
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c89c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000623c  0800cb34  0800cb34  0001cb34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012d70  08012d70  00022d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012d78  08012d78  00022d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012d7c  08012d7c  00022d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08012d80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00015eb8  24000078  08012df8  00030078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24015f30  08012df8  00035f30  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f89a  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004cc2  00000000  00000000  0005f940  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001630  00000000  00000000  00064608  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001400  00000000  00000000  00065c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003be2b  00000000  00000000  00067038  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00017997  00000000  00000000  000a2e63  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00185e19  00000000  00000000  000ba7fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000e9  00000000  00000000  00240613  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005968  00000000  00000000  002406fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00003f11  00000000  00000000  00246064  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800cb1c 	.word	0x0800cb1c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	0800cb1c 	.word	0x0800cb1c

080002d8 <arm_bitreversal_32>:
 80002d8:	1c4b      	adds	r3, r1, #1
 80002da:	2b01      	cmp	r3, #1
 80002dc:	bf98      	it	ls
 80002de:	4770      	bxls	lr
 80002e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002e4:	1c91      	adds	r1, r2, #2
 80002e6:	089b      	lsrs	r3, r3, #2

080002e8 <arm_bitreversal_32_0>:
 80002e8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002ec:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f0:	880a      	ldrh	r2, [r1, #0]
 80002f2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002f6:	4480      	add	r8, r0
 80002f8:	4481      	add	r9, r0
 80002fa:	4402      	add	r2, r0
 80002fc:	4484      	add	ip, r0
 80002fe:	f8d9 7000 	ldr.w	r7, [r9]
 8000302:	f8d8 6000 	ldr.w	r6, [r8]
 8000306:	6815      	ldr	r5, [r2, #0]
 8000308:	f8dc 4000 	ldr.w	r4, [ip]
 800030c:	f8c9 6000 	str.w	r6, [r9]
 8000310:	f8c8 7000 	str.w	r7, [r8]
 8000314:	f8cc 5000 	str.w	r5, [ip]
 8000318:	6014      	str	r4, [r2, #0]
 800031a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800031e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000322:	6855      	ldr	r5, [r2, #4]
 8000324:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000328:	f8c9 6004 	str.w	r6, [r9, #4]
 800032c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000330:	f8cc 5004 	str.w	r5, [ip, #4]
 8000334:	6054      	str	r4, [r2, #4]
 8000336:	3108      	adds	r1, #8
 8000338:	3b01      	subs	r3, #1
 800033a:	d1d5      	bne.n	80002e8 <arm_bitreversal_32_0>
 800033c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000340:	4770      	bx	lr

08000342 <arm_bitreversal_16>:
 8000342:	1c4b      	adds	r3, r1, #1
 8000344:	2b01      	cmp	r3, #1
 8000346:	bf98      	it	ls
 8000348:	4770      	bxls	lr
 800034a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800034e:	1c91      	adds	r1, r2, #2
 8000350:	089b      	lsrs	r3, r3, #2

08000352 <arm_bitreversal_16_0>:
 8000352:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000356:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800035a:	880a      	ldrh	r2, [r1, #0]
 800035c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000360:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000364:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000368:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800036c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000370:	f8d9 7000 	ldr.w	r7, [r9]
 8000374:	f8d8 6000 	ldr.w	r6, [r8]
 8000378:	6815      	ldr	r5, [r2, #0]
 800037a:	f8dc 4000 	ldr.w	r4, [ip]
 800037e:	f8c9 6000 	str.w	r6, [r9]
 8000382:	f8c8 7000 	str.w	r7, [r8]
 8000386:	f8cc 5000 	str.w	r5, [ip]
 800038a:	6014      	str	r4, [r2, #0]
 800038c:	3108      	adds	r1, #8
 800038e:	3b01      	subs	r3, #1
 8000390:	d1df      	bne.n	8000352 <arm_bitreversal_16_0>
 8000392:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000396:	4770      	bx	lr

08000398 <__aeabi_ldivmod>:
 8000398:	b97b      	cbnz	r3, 80003ba <__aeabi_ldivmod+0x22>
 800039a:	b972      	cbnz	r2, 80003ba <__aeabi_ldivmod+0x22>
 800039c:	2900      	cmp	r1, #0
 800039e:	bfbe      	ittt	lt
 80003a0:	2000      	movlt	r0, #0
 80003a2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80003a6:	e006      	blt.n	80003b6 <__aeabi_ldivmod+0x1e>
 80003a8:	bf08      	it	eq
 80003aa:	2800      	cmpeq	r0, #0
 80003ac:	bf1c      	itt	ne
 80003ae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80003b2:	f04f 30ff 	movne.w	r0, #4294967295
 80003b6:	f000 b9bd 	b.w	8000734 <__aeabi_idiv0>
 80003ba:	f1ad 0c08 	sub.w	ip, sp, #8
 80003be:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c2:	2900      	cmp	r1, #0
 80003c4:	db09      	blt.n	80003da <__aeabi_ldivmod+0x42>
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	db1a      	blt.n	8000400 <__aeabi_ldivmod+0x68>
 80003ca:	f000 f84d 	bl	8000468 <__udivmoddi4>
 80003ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003d6:	b004      	add	sp, #16
 80003d8:	4770      	bx	lr
 80003da:	4240      	negs	r0, r0
 80003dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db1b      	blt.n	800041c <__aeabi_ldivmod+0x84>
 80003e4:	f000 f840 	bl	8000468 <__udivmoddi4>
 80003e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003f0:	b004      	add	sp, #16
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	4252      	negs	r2, r2
 80003fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003fe:	4770      	bx	lr
 8000400:	4252      	negs	r2, r2
 8000402:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000406:	f000 f82f 	bl	8000468 <__udivmoddi4>
 800040a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800040e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000412:	b004      	add	sp, #16
 8000414:	4240      	negs	r0, r0
 8000416:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041a:	4770      	bx	lr
 800041c:	4252      	negs	r2, r2
 800041e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000422:	f000 f821 	bl	8000468 <__udivmoddi4>
 8000426:	f8dd e004 	ldr.w	lr, [sp, #4]
 800042a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042e:	b004      	add	sp, #16
 8000430:	4252      	negs	r2, r2
 8000432:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000436:	4770      	bx	lr

08000438 <__aeabi_uldivmod>:
 8000438:	b953      	cbnz	r3, 8000450 <__aeabi_uldivmod+0x18>
 800043a:	b94a      	cbnz	r2, 8000450 <__aeabi_uldivmod+0x18>
 800043c:	2900      	cmp	r1, #0
 800043e:	bf08      	it	eq
 8000440:	2800      	cmpeq	r0, #0
 8000442:	bf1c      	itt	ne
 8000444:	f04f 31ff 	movne.w	r1, #4294967295
 8000448:	f04f 30ff 	movne.w	r0, #4294967295
 800044c:	f000 b972 	b.w	8000734 <__aeabi_idiv0>
 8000450:	f1ad 0c08 	sub.w	ip, sp, #8
 8000454:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000458:	f000 f806 	bl	8000468 <__udivmoddi4>
 800045c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000464:	b004      	add	sp, #16
 8000466:	4770      	bx	lr

08000468 <__udivmoddi4>:
 8000468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800046c:	9e08      	ldr	r6, [sp, #32]
 800046e:	4604      	mov	r4, r0
 8000470:	4688      	mov	r8, r1
 8000472:	2b00      	cmp	r3, #0
 8000474:	d14b      	bne.n	800050e <__udivmoddi4+0xa6>
 8000476:	428a      	cmp	r2, r1
 8000478:	4615      	mov	r5, r2
 800047a:	d967      	bls.n	800054c <__udivmoddi4+0xe4>
 800047c:	fab2 f282 	clz	r2, r2
 8000480:	b14a      	cbz	r2, 8000496 <__udivmoddi4+0x2e>
 8000482:	f1c2 0720 	rsb	r7, r2, #32
 8000486:	fa01 f302 	lsl.w	r3, r1, r2
 800048a:	fa20 f707 	lsr.w	r7, r0, r7
 800048e:	4095      	lsls	r5, r2
 8000490:	ea47 0803 	orr.w	r8, r7, r3
 8000494:	4094      	lsls	r4, r2
 8000496:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800049a:	0c23      	lsrs	r3, r4, #16
 800049c:	fbb8 f7fe 	udiv	r7, r8, lr
 80004a0:	fa1f fc85 	uxth.w	ip, r5
 80004a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80004a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ac:	fb07 f10c 	mul.w	r1, r7, ip
 80004b0:	4299      	cmp	r1, r3
 80004b2:	d909      	bls.n	80004c8 <__udivmoddi4+0x60>
 80004b4:	18eb      	adds	r3, r5, r3
 80004b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80004ba:	f080 811b 	bcs.w	80006f4 <__udivmoddi4+0x28c>
 80004be:	4299      	cmp	r1, r3
 80004c0:	f240 8118 	bls.w	80006f4 <__udivmoddi4+0x28c>
 80004c4:	3f02      	subs	r7, #2
 80004c6:	442b      	add	r3, r5
 80004c8:	1a5b      	subs	r3, r3, r1
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80004dc:	45a4      	cmp	ip, r4
 80004de:	d909      	bls.n	80004f4 <__udivmoddi4+0x8c>
 80004e0:	192c      	adds	r4, r5, r4
 80004e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e6:	f080 8107 	bcs.w	80006f8 <__udivmoddi4+0x290>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	f240 8104 	bls.w	80006f8 <__udivmoddi4+0x290>
 80004f0:	3802      	subs	r0, #2
 80004f2:	442c      	add	r4, r5
 80004f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80004f8:	eba4 040c 	sub.w	r4, r4, ip
 80004fc:	2700      	movs	r7, #0
 80004fe:	b11e      	cbz	r6, 8000508 <__udivmoddi4+0xa0>
 8000500:	40d4      	lsrs	r4, r2
 8000502:	2300      	movs	r3, #0
 8000504:	e9c6 4300 	strd	r4, r3, [r6]
 8000508:	4639      	mov	r1, r7
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	428b      	cmp	r3, r1
 8000510:	d909      	bls.n	8000526 <__udivmoddi4+0xbe>
 8000512:	2e00      	cmp	r6, #0
 8000514:	f000 80eb 	beq.w	80006ee <__udivmoddi4+0x286>
 8000518:	2700      	movs	r7, #0
 800051a:	e9c6 0100 	strd	r0, r1, [r6]
 800051e:	4638      	mov	r0, r7
 8000520:	4639      	mov	r1, r7
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	fab3 f783 	clz	r7, r3
 800052a:	2f00      	cmp	r7, #0
 800052c:	d147      	bne.n	80005be <__udivmoddi4+0x156>
 800052e:	428b      	cmp	r3, r1
 8000530:	d302      	bcc.n	8000538 <__udivmoddi4+0xd0>
 8000532:	4282      	cmp	r2, r0
 8000534:	f200 80fa 	bhi.w	800072c <__udivmoddi4+0x2c4>
 8000538:	1a84      	subs	r4, r0, r2
 800053a:	eb61 0303 	sbc.w	r3, r1, r3
 800053e:	2001      	movs	r0, #1
 8000540:	4698      	mov	r8, r3
 8000542:	2e00      	cmp	r6, #0
 8000544:	d0e0      	beq.n	8000508 <__udivmoddi4+0xa0>
 8000546:	e9c6 4800 	strd	r4, r8, [r6]
 800054a:	e7dd      	b.n	8000508 <__udivmoddi4+0xa0>
 800054c:	b902      	cbnz	r2, 8000550 <__udivmoddi4+0xe8>
 800054e:	deff      	udf	#255	; 0xff
 8000550:	fab2 f282 	clz	r2, r2
 8000554:	2a00      	cmp	r2, #0
 8000556:	f040 808f 	bne.w	8000678 <__udivmoddi4+0x210>
 800055a:	1b49      	subs	r1, r1, r5
 800055c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000560:	fa1f f885 	uxth.w	r8, r5
 8000564:	2701      	movs	r7, #1
 8000566:	fbb1 fcfe 	udiv	ip, r1, lr
 800056a:	0c23      	lsrs	r3, r4, #16
 800056c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000570:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000574:	fb08 f10c 	mul.w	r1, r8, ip
 8000578:	4299      	cmp	r1, r3
 800057a:	d907      	bls.n	800058c <__udivmoddi4+0x124>
 800057c:	18eb      	adds	r3, r5, r3
 800057e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000582:	d202      	bcs.n	800058a <__udivmoddi4+0x122>
 8000584:	4299      	cmp	r1, r3
 8000586:	f200 80cd 	bhi.w	8000724 <__udivmoddi4+0x2bc>
 800058a:	4684      	mov	ip, r0
 800058c:	1a59      	subs	r1, r3, r1
 800058e:	b2a3      	uxth	r3, r4
 8000590:	fbb1 f0fe 	udiv	r0, r1, lr
 8000594:	fb0e 1410 	mls	r4, lr, r0, r1
 8000598:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800059c:	fb08 f800 	mul.w	r8, r8, r0
 80005a0:	45a0      	cmp	r8, r4
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x14c>
 80005a4:	192c      	adds	r4, r5, r4
 80005a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80005aa:	d202      	bcs.n	80005b2 <__udivmoddi4+0x14a>
 80005ac:	45a0      	cmp	r8, r4
 80005ae:	f200 80b6 	bhi.w	800071e <__udivmoddi4+0x2b6>
 80005b2:	4618      	mov	r0, r3
 80005b4:	eba4 0408 	sub.w	r4, r4, r8
 80005b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005bc:	e79f      	b.n	80004fe <__udivmoddi4+0x96>
 80005be:	f1c7 0c20 	rsb	ip, r7, #32
 80005c2:	40bb      	lsls	r3, r7
 80005c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80005c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80005cc:	fa01 f407 	lsl.w	r4, r1, r7
 80005d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80005d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80005d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80005dc:	4325      	orrs	r5, r4
 80005de:	fbb3 f9f8 	udiv	r9, r3, r8
 80005e2:	0c2c      	lsrs	r4, r5, #16
 80005e4:	fb08 3319 	mls	r3, r8, r9, r3
 80005e8:	fa1f fa8e 	uxth.w	sl, lr
 80005ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80005f0:	fb09 f40a 	mul.w	r4, r9, sl
 80005f4:	429c      	cmp	r4, r3
 80005f6:	fa02 f207 	lsl.w	r2, r2, r7
 80005fa:	fa00 f107 	lsl.w	r1, r0, r7
 80005fe:	d90b      	bls.n	8000618 <__udivmoddi4+0x1b0>
 8000600:	eb1e 0303 	adds.w	r3, lr, r3
 8000604:	f109 30ff 	add.w	r0, r9, #4294967295
 8000608:	f080 8087 	bcs.w	800071a <__udivmoddi4+0x2b2>
 800060c:	429c      	cmp	r4, r3
 800060e:	f240 8084 	bls.w	800071a <__udivmoddi4+0x2b2>
 8000612:	f1a9 0902 	sub.w	r9, r9, #2
 8000616:	4473      	add	r3, lr
 8000618:	1b1b      	subs	r3, r3, r4
 800061a:	b2ad      	uxth	r5, r5
 800061c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000620:	fb08 3310 	mls	r3, r8, r0, r3
 8000624:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000628:	fb00 fa0a 	mul.w	sl, r0, sl
 800062c:	45a2      	cmp	sl, r4
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x1da>
 8000630:	eb1e 0404 	adds.w	r4, lr, r4
 8000634:	f100 33ff 	add.w	r3, r0, #4294967295
 8000638:	d26b      	bcs.n	8000712 <__udivmoddi4+0x2aa>
 800063a:	45a2      	cmp	sl, r4
 800063c:	d969      	bls.n	8000712 <__udivmoddi4+0x2aa>
 800063e:	3802      	subs	r0, #2
 8000640:	4474      	add	r4, lr
 8000642:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000646:	fba0 8902 	umull	r8, r9, r0, r2
 800064a:	eba4 040a 	sub.w	r4, r4, sl
 800064e:	454c      	cmp	r4, r9
 8000650:	46c2      	mov	sl, r8
 8000652:	464b      	mov	r3, r9
 8000654:	d354      	bcc.n	8000700 <__udivmoddi4+0x298>
 8000656:	d051      	beq.n	80006fc <__udivmoddi4+0x294>
 8000658:	2e00      	cmp	r6, #0
 800065a:	d069      	beq.n	8000730 <__udivmoddi4+0x2c8>
 800065c:	ebb1 050a 	subs.w	r5, r1, sl
 8000660:	eb64 0403 	sbc.w	r4, r4, r3
 8000664:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000668:	40fd      	lsrs	r5, r7
 800066a:	40fc      	lsrs	r4, r7
 800066c:	ea4c 0505 	orr.w	r5, ip, r5
 8000670:	e9c6 5400 	strd	r5, r4, [r6]
 8000674:	2700      	movs	r7, #0
 8000676:	e747      	b.n	8000508 <__udivmoddi4+0xa0>
 8000678:	f1c2 0320 	rsb	r3, r2, #32
 800067c:	fa20 f703 	lsr.w	r7, r0, r3
 8000680:	4095      	lsls	r5, r2
 8000682:	fa01 f002 	lsl.w	r0, r1, r2
 8000686:	fa21 f303 	lsr.w	r3, r1, r3
 800068a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800068e:	4338      	orrs	r0, r7
 8000690:	0c01      	lsrs	r1, r0, #16
 8000692:	fbb3 f7fe 	udiv	r7, r3, lr
 8000696:	fa1f f885 	uxth.w	r8, r5
 800069a:	fb0e 3317 	mls	r3, lr, r7, r3
 800069e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006a2:	fb07 f308 	mul.w	r3, r7, r8
 80006a6:	428b      	cmp	r3, r1
 80006a8:	fa04 f402 	lsl.w	r4, r4, r2
 80006ac:	d907      	bls.n	80006be <__udivmoddi4+0x256>
 80006ae:	1869      	adds	r1, r5, r1
 80006b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80006b4:	d22f      	bcs.n	8000716 <__udivmoddi4+0x2ae>
 80006b6:	428b      	cmp	r3, r1
 80006b8:	d92d      	bls.n	8000716 <__udivmoddi4+0x2ae>
 80006ba:	3f02      	subs	r7, #2
 80006bc:	4429      	add	r1, r5
 80006be:	1acb      	subs	r3, r1, r3
 80006c0:	b281      	uxth	r1, r0
 80006c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80006c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80006ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006ce:	fb00 f308 	mul.w	r3, r0, r8
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d907      	bls.n	80006e6 <__udivmoddi4+0x27e>
 80006d6:	1869      	adds	r1, r5, r1
 80006d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80006dc:	d217      	bcs.n	800070e <__udivmoddi4+0x2a6>
 80006de:	428b      	cmp	r3, r1
 80006e0:	d915      	bls.n	800070e <__udivmoddi4+0x2a6>
 80006e2:	3802      	subs	r0, #2
 80006e4:	4429      	add	r1, r5
 80006e6:	1ac9      	subs	r1, r1, r3
 80006e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80006ec:	e73b      	b.n	8000566 <__udivmoddi4+0xfe>
 80006ee:	4637      	mov	r7, r6
 80006f0:	4630      	mov	r0, r6
 80006f2:	e709      	b.n	8000508 <__udivmoddi4+0xa0>
 80006f4:	4607      	mov	r7, r0
 80006f6:	e6e7      	b.n	80004c8 <__udivmoddi4+0x60>
 80006f8:	4618      	mov	r0, r3
 80006fa:	e6fb      	b.n	80004f4 <__udivmoddi4+0x8c>
 80006fc:	4541      	cmp	r1, r8
 80006fe:	d2ab      	bcs.n	8000658 <__udivmoddi4+0x1f0>
 8000700:	ebb8 0a02 	subs.w	sl, r8, r2
 8000704:	eb69 020e 	sbc.w	r2, r9, lr
 8000708:	3801      	subs	r0, #1
 800070a:	4613      	mov	r3, r2
 800070c:	e7a4      	b.n	8000658 <__udivmoddi4+0x1f0>
 800070e:	4660      	mov	r0, ip
 8000710:	e7e9      	b.n	80006e6 <__udivmoddi4+0x27e>
 8000712:	4618      	mov	r0, r3
 8000714:	e795      	b.n	8000642 <__udivmoddi4+0x1da>
 8000716:	4667      	mov	r7, ip
 8000718:	e7d1      	b.n	80006be <__udivmoddi4+0x256>
 800071a:	4681      	mov	r9, r0
 800071c:	e77c      	b.n	8000618 <__udivmoddi4+0x1b0>
 800071e:	3802      	subs	r0, #2
 8000720:	442c      	add	r4, r5
 8000722:	e747      	b.n	80005b4 <__udivmoddi4+0x14c>
 8000724:	f1ac 0c02 	sub.w	ip, ip, #2
 8000728:	442b      	add	r3, r5
 800072a:	e72f      	b.n	800058c <__udivmoddi4+0x124>
 800072c:	4638      	mov	r0, r7
 800072e:	e708      	b.n	8000542 <__udivmoddi4+0xda>
 8000730:	4637      	mov	r7, r6
 8000732:	e6e9      	b.n	8000508 <__udivmoddi4+0xa0>

08000734 <__aeabi_idiv0>:
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800073c:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <SystemInit+0xc4>)
 800073e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000742:	4a2e      	ldr	r2, [pc, #184]	; (80007fc <SystemInit+0xc4>)
 8000744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 800074c:	4b2b      	ldr	r3, [pc, #172]	; (80007fc <SystemInit+0xc4>)
 800074e:	691b      	ldr	r3, [r3, #16]
 8000750:	4a2a      	ldr	r2, [pc, #168]	; (80007fc <SystemInit+0xc4>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000758:	4b29      	ldr	r3, [pc, #164]	; (8000800 <SystemInit+0xc8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a28      	ldr	r2, [pc, #160]	; (8000800 <SystemInit+0xc8>)
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000764:	4b26      	ldr	r3, [pc, #152]	; (8000800 <SystemInit+0xc8>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800076a:	4b25      	ldr	r3, [pc, #148]	; (8000800 <SystemInit+0xc8>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4924      	ldr	r1, [pc, #144]	; (8000800 <SystemInit+0xc8>)
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <SystemInit+0xcc>)
 8000772:	4013      	ands	r3, r2
 8000774:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <SystemInit+0xc8>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800077c:	4b20      	ldr	r3, [pc, #128]	; (8000800 <SystemInit+0xc8>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <SystemInit+0xc8>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <SystemInit+0xc8>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <SystemInit+0xc8>)
 8000790:	2200      	movs	r2, #0
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <SystemInit+0xc8>)
 8000796:	2200      	movs	r2, #0
 8000798:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <SystemInit+0xc8>)
 800079c:	2200      	movs	r2, #0
 800079e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <SystemInit+0xc8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <SystemInit+0xc8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <SystemInit+0xc8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <SystemInit+0xc8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <SystemInit+0xc8>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a10      	ldr	r2, [pc, #64]	; (8000800 <SystemInit+0xc8>)
 80007be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <SystemInit+0xc8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <SystemInit+0xd0>)
 80007cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <SystemInit+0xd0>)
 80007d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <SystemInit+0xd4>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <SystemInit+0xd8>)
 80007dc:	4013      	ands	r3, r2
 80007de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80007e2:	d202      	bcs.n	80007ea <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <SystemInit+0xdc>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <SystemInit+0xc4>)
 80007ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007f0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	e000ed00 	.word	0xe000ed00
 8000800:	58024400 	.word	0x58024400
 8000804:	eaf6ed7f 	.word	0xeaf6ed7f
 8000808:	580000c0 	.word	0x580000c0
 800080c:	5c001000 	.word	0x5c001000
 8000810:	ffff0000 	.word	0xffff0000
 8000814:	51008108 	.word	0x51008108

08000818 <arm_nn_activations_direct_q15>:
   * More than 3 just not making much sense, makes no difference with
   * saturation followed by any of these activation functions. 
   */

void arm_nn_activations_direct_q15(q15_t * data, uint16_t size, uint16_t int_width, arm_nn_activation_type type)
{
 8000818:	b480      	push	{r7}
 800081a:	b093      	sub	sp, #76	; 0x4c
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	4608      	mov	r0, r1
 8000822:	4611      	mov	r1, r2
 8000824:	461a      	mov	r2, r3
 8000826:	4603      	mov	r3, r0
 8000828:	817b      	strh	r3, [r7, #10]
 800082a:	460b      	mov	r3, r1
 800082c:	813b      	strh	r3, [r7, #8]
 800082e:	4613      	mov	r3, r2
 8000830:	71fb      	strb	r3, [r7, #7]
    uint16_t  i = size;
 8000832:	897b      	ldrh	r3, [r7, #10]
 8000834:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    q15_t    *pIn = data;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	643b      	str	r3, [r7, #64]	; 0x40
    q15_t    *pOut = data;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint16_t  shift_size = 8 + 3 - int_width;
 8000840:	893b      	ldrh	r3, [r7, #8]
 8000842:	f1c3 030b 	rsb	r3, r3, #11
 8000846:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint32_t  bit_mask = 0x7FF >> int_width;
 8000848:	893b      	ldrh	r3, [r7, #8]
 800084a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800084e:	fa42 f303 	asr.w	r3, r2, r3
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t  full_frac = bit_mask + 1;
 8000854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000856:	3301      	adds	r3, #1
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
    const q15_t *lookup_table;

    switch (type)
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d102      	bne.n	8000866 <arm_nn_activations_direct_q15+0x4e>
    {
    case ARM_SIGMOID:
        lookup_table = sigmoidTable_q15;
 8000860:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <arm_nn_activations_direct_q15+0x100>)
 8000862:	63bb      	str	r3, [r7, #56]	; 0x38
        break;
 8000864:	e002      	b.n	800086c <arm_nn_activations_direct_q15+0x54>
    case ARM_TANH:
    default:
        lookup_table = tanhTable_q15;
 8000866:	4b2d      	ldr	r3, [pc, #180]	; (800091c <arm_nn_activations_direct_q15+0x104>)
 8000868:	63bb      	str	r3, [r7, #56]	; 0x38
        break;
 800086a:	bf00      	nop
    }

    while (i)
 800086c:	e049      	b.n	8000902 <arm_nn_activations_direct_q15+0xea>
    {
        q15_t     out;
        q15_t     in = *pIn++;
 800086e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000870:	1c9a      	adds	r2, r3, #2
 8000872:	643a      	str	r2, [r7, #64]	; 0x40
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	857b      	strh	r3, [r7, #42]	; 0x2a
        q15_t     frac = (uint32_t) in & bit_mask;
 8000878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800087a:	b29a      	uxth	r2, r3
 800087c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800087e:	4013      	ands	r3, r2
 8000880:	b29b      	uxth	r3, r3
 8000882:	853b      	strh	r3, [r7, #40]	; 0x28
        q15_t     value = lookup_table[__USAT(in >> shift_size, 8)];
 8000884:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8000888:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800088a:	fa42 f303 	asr.w	r3, r2, r3
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
 8000890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000892:	f383 0308 	usat	r3, #8, r3
 8000896:	623b      	str	r3, [r7, #32]
 8000898:	6a3b      	ldr	r3, [r7, #32]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800089e:	4413      	add	r3, r2
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	83fb      	strh	r3, [r7, #30]
        q15_t     value2 = lookup_table[__USAT(1 + (in >> shift_size), 8)];
 80008a4:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80008a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80008aa:	fa42 f303 	asr.w	r3, r2, r3
 80008ae:	3301      	adds	r3, #1
 80008b0:	61bb      	str	r3, [r7, #24]
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	f383 0308 	usat	r3, #8, r3
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80008c0:	4413      	add	r3, r2
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	827b      	strh	r3, [r7, #18]

        /* doing the interpolation here for better accuracy */
        out = ((q31_t) (full_frac - frac) * value + (q31_t) value2 * frac) >> shift_size;
 80008c6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80008ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	461a      	mov	r2, r3
 80008d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80008d4:	fb03 f202 	mul.w	r2, r3, r2
 80008d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80008dc:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 80008e0:	fb01 f303 	mul.w	r3, r1, r3
 80008e4:	441a      	add	r2, r3
 80008e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80008e8:	fa42 f303 	asr.w	r3, r2, r3
 80008ec:	823b      	strh	r3, [r7, #16]

        *pOut++ = out;
 80008ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008f0:	1c9a      	adds	r2, r3, #2
 80008f2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80008f4:	8a3a      	ldrh	r2, [r7, #16]
 80008f6:	801a      	strh	r2, [r3, #0]
        i--;
 80008f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80008fc:	3b01      	subs	r3, #1
 80008fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    while (i)
 8000902:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1b1      	bne.n	800086e <arm_nn_activations_direct_q15+0x56>
    }

}
 800090a:	bf00      	nop
 800090c:	374c      	adds	r7, #76	; 0x4c
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	0800cb54 	.word	0x0800cb54
 800091c:	0800cd54 	.word	0x0800cd54

08000920 <arm_fully_connected_q15>:
                        const uint16_t bias_shift,
                        const uint16_t out_shift, 
                        const q15_t * bias, 
                        q15_t * pOut,
                        q15_t * vec_buffer)
{
 8000920:	b480      	push	{r7}
 8000922:	b0b7      	sub	sp, #220	; 0xdc
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	4611      	mov	r1, r2
 800092c:	461a      	mov	r2, r3
 800092e:	460b      	mov	r3, r1
 8000930:	80fb      	strh	r3, [r7, #6]
 8000932:	4613      	mov	r3, r2
 8000934:	80bb      	strh	r3, [r7, #4]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    const q15_t *pB = pM;
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	61fb      	str	r3, [r7, #28]
    const q15_t *pB2 = pB + dim_vec;
 800093a:	69fa      	ldr	r2, [r7, #28]
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]
    q15_t    *pO = pOut;
 8000944:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000948:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    const q15_t    *pA;
    const q15_t    *pBias = bias;
 800094c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    uint16_t rowCnt = num_of_rows >> 1;
 8000954:	88bb      	ldrh	r3, [r7, #4]
 8000956:	085b      	lsrs	r3, r3, #1
 8000958:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce

    /* this loop loops over different output */
    while (rowCnt) {
 800095c:	e124      	b.n	8000ba8 <arm_fully_connected_q15+0x288>
        q31_t     sum =  ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 800095e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000962:	1c9a      	adds	r2, r3, #2
 8000964:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8000968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800096c:	461a      	mov	r2, r3
 800096e:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8000972:	409a      	lsls	r2, r3
 8000974:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8000978:	3b01      	subs	r3, #1
 800097a:	2101      	movs	r1, #1
 800097c:	fa01 f303 	lsl.w	r3, r1, r3
 8000980:	4413      	add	r3, r2
 8000982:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8000986:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800098a:	1c9a      	adds	r2, r3, #2
 800098c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8000990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000994:	461a      	mov	r2, r3
 8000996:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800099a:	409a      	lsls	r2, r3
 800099c:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80009a0:	3b01      	subs	r3, #1
 80009a2:	2101      	movs	r1, #1
 80009a4:	fa01 f303 	lsl.w	r3, r1, r3
 80009a8:	4413      	add	r3, r2
 80009aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

        uint16_t  colCnt = dim_vec >> 2;
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	089b      	lsrs	r3, r3, #2
 80009b2:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2

        pA = pV;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	617b      	str	r3, [r7, #20]
        pB2 = pB + dim_vec;
 80009ba:	69fa      	ldr	r2, [r7, #28]
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4413      	add	r3, r2
 80009c2:	61bb      	str	r3, [r7, #24]

        while (colCnt)
 80009c4:	e07c      	b.n	8000ac0 <arm_fully_connected_q15+0x1a0>
        {
            q31_t     inV1, inM1, inM2;
            inV1 = *__SIMD32(pA)++;
 80009c6:	f107 0214 	add.w	r2, r7, #20
 80009ca:	6813      	ldr	r3, [r2, #0]
 80009cc:	1d19      	adds	r1, r3, #4
 80009ce:	6011      	str	r1, [r2, #0]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            inM1 = *__SIMD32(pB)++;
 80009d6:	f107 021c 	add.w	r2, r7, #28
 80009da:	6813      	ldr	r3, [r2, #0]
 80009dc:	1d19      	adds	r1, r3, #4
 80009de:	6011      	str	r1, [r2, #0]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            sum = __SMLAD(inV1, inM1, sum);
 80009e6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80009ea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80009ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80009f2:	64f9      	str	r1, [r7, #76]	; 0x4c
 80009f4:	64ba      	str	r2, [r7, #72]	; 0x48
 80009f6:	647b      	str	r3, [r7, #68]	; 0x44

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80009f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80009fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80009fe:	fb23 1302 	smlad	r3, r3, r2, r1
 8000a02:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8000a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            inM2 = *__SIMD32(pB2)++;
 8000a0a:	f107 0218 	add.w	r2, r7, #24
 8000a0e:	6813      	ldr	r3, [r2, #0]
 8000a10:	1d19      	adds	r1, r3, #4
 8000a12:	6011      	str	r1, [r2, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            sum2 = __SMLAD(inV1, inM2, sum2);
 8000a1a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000a1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000a22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000a26:	65f9      	str	r1, [r7, #92]	; 0x5c
 8000a28:	65ba      	str	r2, [r7, #88]	; 0x58
 8000a2a:	657b      	str	r3, [r7, #84]	; 0x54
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000a30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000a32:	fb23 1302 	smlad	r3, r3, r2, r1
 8000a36:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 8000a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

            inV1 = *__SIMD32(pA)++;
 8000a3e:	f107 0214 	add.w	r2, r7, #20
 8000a42:	6813      	ldr	r3, [r2, #0]
 8000a44:	1d19      	adds	r1, r3, #4
 8000a46:	6011      	str	r1, [r2, #0]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            inM1 = *__SIMD32(pB)++;
 8000a4e:	f107 021c 	add.w	r2, r7, #28
 8000a52:	6813      	ldr	r3, [r2, #0]
 8000a54:	1d19      	adds	r1, r3, #4
 8000a56:	6011      	str	r1, [r2, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            sum = __SMLAD(inV1, inM1, sum);
 8000a5e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000a62:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000a66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000a6a:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000a6c:	66ba      	str	r2, [r7, #104]	; 0x68
 8000a6e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000a74:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000a76:	fb23 1302 	smlad	r3, r3, r2, r1
 8000a7a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8000a7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            inM2 = *__SIMD32(pB2)++;
 8000a82:	f107 0218 	add.w	r2, r7, #24
 8000a86:	6813      	ldr	r3, [r2, #0]
 8000a88:	1d19      	adds	r1, r3, #4
 8000a8a:	6011      	str	r1, [r2, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            sum2 = __SMLAD(inV1, inM2, sum2);
 8000a92:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000a96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000a9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000a9e:	67f9      	str	r1, [r7, #124]	; 0x7c
 8000aa0:	67ba      	str	r2, [r7, #120]	; 0x78
 8000aa2:	677b      	str	r3, [r7, #116]	; 0x74
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000aa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000aa6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000aa8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000aaa:	fb23 1302 	smlad	r3, r3, r2, r1
 8000aae:	673b      	str	r3, [r7, #112]	; 0x70
  return(result);
 8000ab0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ab2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

            colCnt--;
 8000ab6:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8000aba:	3b01      	subs	r3, #1
 8000abc:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        while (colCnt)
 8000ac0:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	f47f af7e 	bne.w	80009c6 <arm_fully_connected_q15+0xa6>
        }
        colCnt = dim_vec & 0x3;
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	f003 0303 	and.w	r3, r3, #3
 8000ad0:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        while (colCnt)
 8000ad4:	e02c      	b.n	8000b30 <arm_fully_connected_q15+0x210>
        {
            q15_t     inV = *pA++;
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	1c9a      	adds	r2, r3, #2
 8000ada:	617a      	str	r2, [r7, #20]
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
            q15_t     inM = *pB++;
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	1c9a      	adds	r2, r3, #2
 8000ae6:	61fa      	str	r2, [r7, #28]
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
            q15_t     inM2 = *pB2++;
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	1c9a      	adds	r2, r3, #2
 8000af2:	61ba      	str	r2, [r7, #24]
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

            sum += inV * inM;
 8000afa:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000afe:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8000b02:	fb02 f303 	mul.w	r3, r2, r3
 8000b06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000b0a:	4413      	add	r3, r2
 8000b0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            sum2 += inV * inM2;
 8000b10:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000b14:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 8000b18:	fb02 f303 	mul.w	r3, r2, r3
 8000b1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000b20:	4413      	add	r3, r2
 8000b22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            colCnt--;
 8000b26:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        while (colCnt)
 8000b30:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1ce      	bne.n	8000ad6 <arm_fully_connected_q15+0x1b6>
        }                       /* while over colCnt */
        *pO++ =  (q15_t) (__SSAT((sum >> out_shift), 16));
 8000b38:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8000b3c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000b40:	fa42 f303 	asr.w	r3, r2, r3
 8000b44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000b48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000b4c:	f303 030f 	ssat	r3, #16, r3
 8000b50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000b54:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8000b58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000b5c:	1c9a      	adds	r2, r3, #2
 8000b5e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000b62:	b20a      	sxth	r2, r1
 8000b64:	801a      	strh	r2, [r3, #0]
        *pO++ = (q15_t) (__SSAT((sum2>> out_shift), 16));
 8000b66:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8000b6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000b6e:	fa42 f303 	asr.w	r3, r2, r3
 8000b72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000b76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000b7a:	f303 030f 	ssat	r3, #16, r3
 8000b7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000b82:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8000b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000b8a:	1c9a      	adds	r2, r3, #2
 8000b8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000b90:	b20a      	sxth	r2, r1
 8000b92:	801a      	strh	r2, [r3, #0]
		
        /* adjust the pointers and counters */
        pB = pB + dim_vec;
 8000b94:	69fa      	ldr	r2, [r7, #28]
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4413      	add	r3, r2
 8000b9c:	61fb      	str	r3, [r7, #28]
        rowCnt --;
 8000b9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    while (rowCnt) {
 8000ba8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f47f aed6 	bne.w	800095e <arm_fully_connected_q15+0x3e>
    }

    rowCnt = num_of_rows & 0x1;
 8000bb2:	88bb      	ldrh	r3, [r7, #4]
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce

    while (rowCnt) {
 8000bbc:	e0a9      	b.n	8000d12 <arm_fully_connected_q15+0x3f2>
        q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8000bbe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000bc2:	1c9a      	adds	r2, r3, #2
 8000bc4:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8000bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8000bd2:	409a      	lsls	r2, r3
 8000bd4:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	2101      	movs	r1, #1
 8000bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000be0:	4413      	add	r3, r2
 8000be2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        uint16_t  colCnt = dim_vec >> 2;
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	089b      	lsrs	r3, r3, #2
 8000bea:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba

        pA = pV;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	617b      	str	r3, [r7, #20]
      
        while (colCnt) {
 8000bf2:	e048      	b.n	8000c86 <arm_fully_connected_q15+0x366>
            q31_t     inV1, inM1;
            inV1 = *__SIMD32(pA)++;
 8000bf4:	f107 0214 	add.w	r2, r7, #20
 8000bf8:	6813      	ldr	r3, [r2, #0]
 8000bfa:	1d19      	adds	r1, r3, #4
 8000bfc:	6011      	str	r1, [r2, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            inM1 = *__SIMD32(pB)++;
 8000c04:	f107 021c 	add.w	r2, r7, #28
 8000c08:	6813      	ldr	r3, [r2, #0]
 8000c0a:	1d19      	adds	r1, r3, #4
 8000c0c:	6011      	str	r1, [r2, #0]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            sum = __SMLAD(inV1, inM1, sum);
 8000c14:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000c18:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000c1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000c20:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000c22:	62ba      	str	r2, [r7, #40]	; 0x28
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c2c:	fb23 1302 	smlad	r3, r3, r2, r1
 8000c30:	623b      	str	r3, [r7, #32]
  return(result);
 8000c32:	6a3b      	ldr	r3, [r7, #32]
 8000c34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            
            inV1 = *__SIMD32(pA)++;
 8000c38:	f107 0214 	add.w	r2, r7, #20
 8000c3c:	6813      	ldr	r3, [r2, #0]
 8000c3e:	1d19      	adds	r1, r3, #4
 8000c40:	6011      	str	r1, [r2, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            inM1 = *__SIMD32(pB)++;
 8000c48:	f107 021c 	add.w	r2, r7, #28
 8000c4c:	6813      	ldr	r3, [r2, #0]
 8000c4e:	1d19      	adds	r1, r3, #4
 8000c50:	6011      	str	r1, [r2, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            sum = __SMLAD(inV1, inM1, sum);
 8000c58:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000c5c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000c60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000c64:	63f9      	str	r1, [r7, #60]	; 0x3c
 8000c66:	63ba      	str	r2, [r7, #56]	; 0x38
 8000c68:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000c6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000c70:	fb23 1302 	smlad	r3, r3, r2, r1
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8000c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
				
            colCnt--;
 8000c7c:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8000c80:	3b01      	subs	r3, #1
 8000c82:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        while (colCnt) {
 8000c86:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d1b2      	bne.n	8000bf4 <arm_fully_connected_q15+0x2d4>
	}
			
	/* left-over of the vector */
	colCnt = dim_vec & 0x3;
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
	while(colCnt) {
 8000c98:	e01b      	b.n	8000cd2 <arm_fully_connected_q15+0x3b2>
            q15_t     inV = *pA++;
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	1c9a      	adds	r2, r3, #2
 8000c9e:	617a      	str	r2, [r7, #20]
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            q15_t     inM = *pB++;
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	1c9a      	adds	r2, r3, #2
 8000caa:	61fa      	str	r2, [r7, #28]
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

            sum += inV * inM;
 8000cb2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8000cb6:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	; 0xac
 8000cba:	fb02 f303 	mul.w	r3, r2, r3
 8000cbe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000cc2:	4413      	add	r3, r2
 8000cc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            colCnt--;
 8000cc8:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
	while(colCnt) {
 8000cd2:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1df      	bne.n	8000c9a <arm_fully_connected_q15+0x37a>
	}

        *pO++ =  (q15_t) (__SSAT((sum >> out_shift), 16));
 8000cda:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8000cde:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000ce2:	fa42 f303 	asr.w	r3, r2, r3
 8000ce6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000cea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000cee:	f303 030f 	ssat	r3, #16, r3
 8000cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000cf6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8000cfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000cfe:	1c9a      	adds	r2, r3, #2
 8000d00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000d04:	b20a      	sxth	r2, r1
 8000d06:	801a      	strh	r2, [r3, #0]
			
        rowCnt --;
 8000d08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    while (rowCnt) {
 8000d12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f47f af51 	bne.w	8000bbe <arm_fully_connected_q15+0x29e>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return (ARM_MATH_SUCCESS);
 8000d1c:	2300      	movs	r3, #0

}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	37dc      	adds	r7, #220	; 0xdc
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <arm_softmax_q15>:
   *  with a log(2) scaling factor.
   *
   */

void arm_softmax_q15(const q15_t * vec_in, const uint16_t dim_vec, q15_t * p_out)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b093      	sub	sp, #76	; 0x4c
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	460b      	mov	r3, r1
 8000d36:	607a      	str	r2, [r7, #4]
 8000d38:	817b      	strh	r3, [r7, #10]
    q31_t     sum;
    int16_t   i;
    uint8_t   shift;
    q31_t     base;
    base = -1 * 0x100000;
 8000d3a:	4b5e      	ldr	r3, [pc, #376]	; (8000eb4 <arm_softmax_q15+0x188>)
 8000d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < dim_vec; i++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000d44:	e019      	b.n	8000d7a <arm_softmax_q15+0x4e>
    {
        if (vec_in[i] > base)
 8000d46:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d54:	461a      	mov	r2, r3
 8000d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	da07      	bge.n	8000d6c <arm_softmax_q15+0x40>
        {
            base = vec_in[i];
 8000d5c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	4413      	add	r3, r2
 8000d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < dim_vec; i++)
 8000d6c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	3301      	adds	r3, #1
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000d7a:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8000d7e:	897b      	ldrh	r3, [r7, #10]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	dbe0      	blt.n	8000d46 <arm_softmax_q15+0x1a>

    /* we ignore really small values  
     * anyway, they will be 0 after shrinking
     * to q15_t
     */
    base = base - 16;
 8000d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d86:	3b10      	subs	r3, #16
 8000d88:	63fb      	str	r3, [r7, #60]	; 0x3c

    sum = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	647b      	str	r3, [r7, #68]	; 0x44

    for (i = 0; i < dim_vec; i++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000d94:	e02b      	b.n	8000dee <arm_softmax_q15+0xc2>
    {
        if (vec_in[i] > base)
 8000d96:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000da4:	461a      	mov	r2, r3
 8000da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000da8:	4293      	cmp	r3, r2
 8000daa:	da19      	bge.n	8000de0 <arm_softmax_q15+0xb4>
        {
            shift = (uint8_t)__USAT(vec_in[i] - base, 5);
 8000dac:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	4413      	add	r3, r2
 8000db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f383 0305 	usat	r3, #5, r3
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            sum += 0x1 << shift;
 8000dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ddc:	4413      	add	r3, r2
 8000dde:	647b      	str	r3, [r7, #68]	; 0x44
    for (i = 0; i < dim_vec; i++)
 8000de0:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	3301      	adds	r3, #1
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000dee:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8000df2:	897b      	ldrh	r3, [r7, #10]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	dbce      	blt.n	8000d96 <arm_softmax_q15+0x6a>
        }
    }

    /* This is effectively (0x1 << 32) / sum */
    int64_t div_base = 0x100000000LL;
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	f04f 0401 	mov.w	r4, #1
 8000e00:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    int output_base = (int32_t)(div_base / sum);
 8000e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e06:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4623      	mov	r3, r4
 8000e0e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000e12:	f7ff fac1 	bl	8000398 <__aeabi_ldivmod>
 8000e16:	4603      	mov	r3, r0
 8000e18:	460c      	mov	r4, r1
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Final confidence will be output_base >> ( 17 - (vec_in[i] - base) )
     * so 32768 (0x1<<15) -> 100% confidence when sum = 0x1 << 16, output_base = 0x1 << 16
     * and vec_in[i]-base = 16
     */
    for (i = 0; i < dim_vec; i++)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000e22:	e03d      	b.n	8000ea0 <arm_softmax_q15+0x174>
    {
        if (vec_in[i] > base) 
 8000e24:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e32:	461a      	mov	r2, r3
 8000e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e36:	4293      	cmp	r3, r2
 8000e38:	da24      	bge.n	8000e84 <arm_softmax_q15+0x158>
        {
            /* Here minimum value of 17+base-vec[i] will be 1 */
            shift = (uint8_t)__USAT(17+base-vec_in[i], 5);
 8000e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e3c:	3311      	adds	r3, #17
 8000e3e:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8000e42:	0052      	lsls	r2, r2, #1
 8000e44:	68f9      	ldr	r1, [r7, #12]
 8000e46:	440a      	add	r2, r1
 8000e48:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e4c:	1a9b      	subs	r3, r3, r2
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e52:	f383 0305 	usat	r3, #5, r3
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            p_out[i] = (q15_t) __SSAT((output_base >> shift), 16);
 8000e5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e64:	fa42 f303 	asr.w	r3, r2, r3
 8000e68:	61fb      	str	r3, [r7, #28]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	f303 030f 	ssat	r3, #16, r3
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	69b9      	ldr	r1, [r7, #24]
 8000e74:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b20a      	sxth	r2, r1
 8000e80:	801a      	strh	r2, [r3, #0]
 8000e82:	e006      	b.n	8000e92 <arm_softmax_q15+0x166>
        } else
        {
            p_out[i] = 0;
 8000e84:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	2200      	movs	r2, #0
 8000e90:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < dim_vec; i++)
 8000e92:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	3301      	adds	r3, #1
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000ea0:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8000ea4:	897b      	ldrh	r3, [r7, #10]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	dbbc      	blt.n	8000e24 <arm_softmax_q15+0xf8>
        }
    }

}
 8000eaa:	bf00      	nop
 8000eac:	374c      	adds	r7, #76	; 0x4c
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd90      	pop	{r4, r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	fff00000 	.word	0xfff00000

08000eb8 <fully_connected_run>:
extern q15_t aq15_layer_4_biases[14];
extern q15_t aq15_layer_5_weights[14*6];
extern q15_t aq15_layer_5_biases[6];

void fully_connected_run(q15_t input_data[], float32_t *prediction)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af06      	add	r7, sp, #24
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
	q15_t max_Value = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	81fb      	strh	r3, [r7, #14]
	uint32_t max_Index = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
    // Input layer
    arm_fully_connected_q15(
 8000eca:	2300      	movs	r3, #0
 8000ecc:	9304      	str	r3, [sp, #16]
 8000ece:	4b3f      	ldr	r3, [pc, #252]	; (8000fcc <fully_connected_run+0x114>)
 8000ed0:	9303      	str	r3, [sp, #12]
 8000ed2:	4b3f      	ldr	r3, [pc, #252]	; (8000fd0 <fully_connected_run+0x118>)
 8000ed4:	9302      	str	r3, [sp, #8]
 8000ed6:	230f      	movs	r3, #15
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	230f      	movs	r3, #15
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2316      	movs	r3, #22
 8000ee0:	2216      	movs	r2, #22
 8000ee2:	493c      	ldr	r1, [pc, #240]	; (8000fd4 <fully_connected_run+0x11c>)
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fd1b 	bl	8000920 <arm_fully_connected_q15>
        LAYER_1_IN_SHIFT,
        LAYER_1_OU_SHIFT,
        aq15_layer_1_biases,
        layer_1_out_Buf,
        NULL);
    arm_nn_activations_direct_q15(
 8000eea:	2300      	movs	r3, #0
 8000eec:	2200      	movs	r2, #0
 8000eee:	2116      	movs	r1, #22
 8000ef0:	4836      	ldr	r0, [pc, #216]	; (8000fcc <fully_connected_run+0x114>)
 8000ef2:	f7ff fc91 	bl	8000818 <arm_nn_activations_direct_q15>
        aq15_out_Buf,
        LAYER_1_OU_DIM);
    */

    // First hidden layer
    arm_fully_connected_q15(
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	9304      	str	r3, [sp, #16]
 8000efa:	4b37      	ldr	r3, [pc, #220]	; (8000fd8 <fully_connected_run+0x120>)
 8000efc:	9303      	str	r3, [sp, #12]
 8000efe:	4b37      	ldr	r3, [pc, #220]	; (8000fdc <fully_connected_run+0x124>)
 8000f00:	9302      	str	r3, [sp, #8]
 8000f02:	230f      	movs	r3, #15
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	230f      	movs	r3, #15
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2316      	movs	r3, #22
 8000f0c:	2216      	movs	r2, #22
 8000f0e:	4934      	ldr	r1, [pc, #208]	; (8000fe0 <fully_connected_run+0x128>)
 8000f10:	482e      	ldr	r0, [pc, #184]	; (8000fcc <fully_connected_run+0x114>)
 8000f12:	f7ff fd05 	bl	8000920 <arm_fully_connected_q15>
        LAYER_2_IN_SHIFT,
        LAYER_2_OU_SHIFT,
		aq15_layer_2_biases,
        layer_2_out_Buf,
        NULL);
    arm_nn_activations_direct_q15(
 8000f16:	2300      	movs	r3, #0
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2116      	movs	r1, #22
 8000f1c:	482e      	ldr	r0, [pc, #184]	; (8000fd8 <fully_connected_run+0x120>)
 8000f1e:	f7ff fc7b 	bl	8000818 <arm_nn_activations_direct_q15>
        aq15_out_Buf,
        LAYER_1_OU_DIM);
    */

    // Second hidden layer
    arm_fully_connected_q15(
 8000f22:	2300      	movs	r3, #0
 8000f24:	9304      	str	r3, [sp, #16]
 8000f26:	4b2f      	ldr	r3, [pc, #188]	; (8000fe4 <fully_connected_run+0x12c>)
 8000f28:	9303      	str	r3, [sp, #12]
 8000f2a:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <fully_connected_run+0x130>)
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	230f      	movs	r3, #15
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	230f      	movs	r3, #15
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2312      	movs	r3, #18
 8000f38:	2216      	movs	r2, #22
 8000f3a:	492c      	ldr	r1, [pc, #176]	; (8000fec <fully_connected_run+0x134>)
 8000f3c:	4826      	ldr	r0, [pc, #152]	; (8000fd8 <fully_connected_run+0x120>)
 8000f3e:	f7ff fcef 	bl	8000920 <arm_fully_connected_q15>
        LAYER_3_IN_SHIFT,
        LAYER_3_OU_SHIFT,
		aq15_layer_3_biases,
        layer_3_out_Buf,
        NULL);
    arm_nn_activations_direct_q15(
 8000f42:	2300      	movs	r3, #0
 8000f44:	2200      	movs	r2, #0
 8000f46:	2112      	movs	r1, #18
 8000f48:	4826      	ldr	r0, [pc, #152]	; (8000fe4 <fully_connected_run+0x12c>)
 8000f4a:	f7ff fc65 	bl	8000818 <arm_nn_activations_direct_q15>
        aq15_out_Buf,
        LAYER_1_OU_DIM);
    */

    // Third hidden layer
    arm_fully_connected_q15(
 8000f4e:	2300      	movs	r3, #0
 8000f50:	9304      	str	r3, [sp, #16]
 8000f52:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <fully_connected_run+0x138>)
 8000f54:	9303      	str	r3, [sp, #12]
 8000f56:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <fully_connected_run+0x13c>)
 8000f58:	9302      	str	r3, [sp, #8]
 8000f5a:	230f      	movs	r3, #15
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	230f      	movs	r3, #15
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	230e      	movs	r3, #14
 8000f64:	2212      	movs	r2, #18
 8000f66:	4924      	ldr	r1, [pc, #144]	; (8000ff8 <fully_connected_run+0x140>)
 8000f68:	481e      	ldr	r0, [pc, #120]	; (8000fe4 <fully_connected_run+0x12c>)
 8000f6a:	f7ff fcd9 	bl	8000920 <arm_fully_connected_q15>
        LAYER_4_IN_SHIFT,
        LAYER_4_OU_SHIFT,
		aq15_layer_4_biases,
        layer_4_out_Buf,
        NULL);
    arm_nn_activations_direct_q15(
 8000f6e:	2300      	movs	r3, #0
 8000f70:	2200      	movs	r2, #0
 8000f72:	210e      	movs	r1, #14
 8000f74:	481e      	ldr	r0, [pc, #120]	; (8000ff0 <fully_connected_run+0x138>)
 8000f76:	f7ff fc4f 	bl	8000818 <arm_nn_activations_direct_q15>
    arm_relu_q15(
        aq15_out_Buf,
        LAYER_1_OU_DIM);
    */
    // Output layer
	arm_fully_connected_q15(
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	9304      	str	r3, [sp, #16]
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <fully_connected_run+0x144>)
 8000f80:	9303      	str	r3, [sp, #12]
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <fully_connected_run+0x148>)
 8000f84:	9302      	str	r3, [sp, #8]
 8000f86:	230f      	movs	r3, #15
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	230f      	movs	r3, #15
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2306      	movs	r3, #6
 8000f90:	220e      	movs	r2, #14
 8000f92:	491c      	ldr	r1, [pc, #112]	; (8001004 <fully_connected_run+0x14c>)
 8000f94:	4816      	ldr	r0, [pc, #88]	; (8000ff0 <fully_connected_run+0x138>)
 8000f96:	f7ff fcc3 	bl	8000920 <arm_fully_connected_q15>
		LAYER_5_IN_SHIFT,
		LAYER_5_OU_SHIFT,
		aq15_layer_5_biases,
		layer_5_out_Buf,
		NULL);
    arm_softmax_q15(
 8000f9a:	4a1b      	ldr	r2, [pc, #108]	; (8001008 <fully_connected_run+0x150>)
 8000f9c:	2106      	movs	r1, #6
 8000f9e:	4817      	ldr	r0, [pc, #92]	; (8000ffc <fully_connected_run+0x144>)
 8000fa0:	f7ff fec4 	bl	8000d2c <arm_softmax_q15>
    	layer_5_out_Buf,
        LAYER_5_OU_DIM,
        output_data);
    arm_max_q15(output_data, LAYER_5_OU_DIM, &max_Value, &max_Index);
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	f107 020e 	add.w	r2, r7, #14
 8000fac:	2106      	movs	r1, #6
 8000fae:	4816      	ldr	r0, [pc, #88]	; (8001008 <fully_connected_run+0x150>)
 8000fb0:	f00a f878 	bl	800b0a4 <arm_max_q15>
    *prediction = (float32_t) max_Index;
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	edc3 7a00 	vstr	s15, [r3]
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	24000094 	.word	0x24000094
 8000fd0:	2400050c 	.word	0x2400050c
 8000fd4:	24000144 	.word	0x24000144
 8000fd8:	240000c0 	.word	0x240000c0
 8000fdc:	24000900 	.word	0x24000900
 8000fe0:	24000538 	.word	0x24000538
 8000fe4:	240000ec 	.word	0x240000ec
 8000fe8:	24000c44 	.word	0x24000c44
 8000fec:	2400092c 	.word	0x2400092c
 8000ff0:	24000110 	.word	0x24000110
 8000ff4:	24000e60 	.word	0x24000e60
 8000ff8:	24000c68 	.word	0x24000c68
 8000ffc:	2400012c 	.word	0x2400012c
 8001000:	24000f24 	.word	0x24000f24
 8001004:	24000e7c 	.word	0x24000e7c
 8001008:	24000138 	.word	0x24000138

0800100c <inst_absolute>:
#include "functions.h"

//**********************************************************************************************//
// Preprocessing - Instantaneous values (6 features)
// To use with instantaneous values
void inst_absolute(float32_t in[], float32_t out[]){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	arm_abs_f32(&in[0], &out[0], frameSize);
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <inst_absolute+0x20>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	6839      	ldr	r1, [r7, #0]
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f00a ff04 	bl	800be2c <arm_abs_f32>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	0800cf54 	.word	0x0800cf54

08001030 <complex_inst_absolute>:

// To use with complex input values
void complex_inst_absolute(float32_t in[], float32_t out[]){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
	arm_cmplx_mag_f32(&in[0], &out[0], frameSize);
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <complex_inst_absolute+0x20>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	6839      	ldr	r1, [r7, #0]
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f00a fd2e 	bl	800baa4 <arm_cmplx_mag_f32>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	0800cf54 	.word	0x0800cf54

08001054 <inst_phase>:

void inst_phase(float32_t in[], float32_t out[]){
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
	int j = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	e020      	b.n	80010aa <inst_phase+0x56>
		out[j] = atan2f(in[i+1], in[i]);
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	3301      	adds	r3, #1
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	edd3 7a00 	vldr	s15, [r3]
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	ed93 7a00 	vldr	s14, [r3]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	18d4      	adds	r4, r2, r3
 800108a:	eef0 0a47 	vmov.f32	s1, s14
 800108e:	eeb0 0a67 	vmov.f32	s0, s15
 8001092:	f00b fb67 	bl	800c764 <atan2f>
 8001096:	eef0 7a40 	vmov.f32	s15, s0
 800109a:	edc4 7a00 	vstr	s15, [r4]
		j++;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3301      	adds	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	3302      	adds	r3, #2
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <inst_phase+0x6c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	005a      	lsls	r2, r3, #1
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d8d8      	bhi.n	8001068 <inst_phase+0x14>
	}
}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd90      	pop	{r4, r7, pc}
 80010be:	bf00      	nop
 80010c0:	0800cf54 	.word	0x0800cf54
 80010c4:	00000000 	.word	0x00000000

080010c8 <unwrap>:

void unwrap(float32_t in[], float32_t out[]){
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	466b      	mov	r3, sp
 80010d4:	461d      	mov	r5, r3
	int32_t k = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t alpha = M_PI;
 80010da:	4b8b      	ldr	r3, [pc, #556]	; (8001308 <unwrap+0x240>)
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
	// float32_t diff = 0.0f;
	float32_t in_cp[frameSize];
 80010de:	4b8b      	ldr	r3, [pc, #556]	; (800130c <unwrap+0x244>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010e6:	4b89      	ldr	r3, [pc, #548]	; (800130c <unwrap+0x244>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4619      	mov	r1, r3
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	f04f 0400 	mov.w	r4, #0
 80010f8:	0154      	lsls	r4, r2, #5
 80010fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80010fe:	014b      	lsls	r3, r1, #5
 8001100:	4b82      	ldr	r3, [pc, #520]	; (800130c <unwrap+0x244>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	f04f 0300 	mov.w	r3, #0
 800110e:	f04f 0400 	mov.w	r4, #0
 8001112:	0154      	lsls	r4, r2, #5
 8001114:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001118:	014b      	lsls	r3, r1, #5
 800111a:	4b7c      	ldr	r3, [pc, #496]	; (800130c <unwrap+0x244>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	3303      	adds	r3, #3
 8001122:	3307      	adds	r3, #7
 8001124:	08db      	lsrs	r3, r3, #3
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	ebad 0d03 	sub.w	sp, sp, r3
 800112c:	466b      	mov	r3, sp
 800112e:	3303      	adds	r3, #3
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	61fb      	str	r3, [r7, #28]
	float32_t sub[frameSize];
 8001136:	4b75      	ldr	r3, [pc, #468]	; (800130c <unwrap+0x244>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3b01      	subs	r3, #1
 800113c:	61bb      	str	r3, [r7, #24]
 800113e:	4b73      	ldr	r3, [pc, #460]	; (800130c <unwrap+0x244>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	f04f 0400 	mov.w	r4, #0
 8001150:	0154      	lsls	r4, r2, #5
 8001152:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001156:	014b      	lsls	r3, r1, #5
 8001158:	4b6c      	ldr	r3, [pc, #432]	; (800130c <unwrap+0x244>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	f04f 0400 	mov.w	r4, #0
 800116a:	0154      	lsls	r4, r2, #5
 800116c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001170:	014b      	lsls	r3, r1, #5
 8001172:	4b66      	ldr	r3, [pc, #408]	; (800130c <unwrap+0x244>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	3303      	adds	r3, #3
 800117a:	3307      	adds	r3, #7
 800117c:	08db      	lsrs	r3, r3, #3
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	ebad 0d03 	sub.w	sp, sp, r3
 8001184:	466b      	mov	r3, sp
 8001186:	3303      	adds	r3, #3
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	617b      	str	r3, [r7, #20]
	float32_t abs_sub[frameSize];
 800118e:	4b5f      	ldr	r3, [pc, #380]	; (800130c <unwrap+0x244>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	3b01      	subs	r3, #1
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b5d      	ldr	r3, [pc, #372]	; (800130c <unwrap+0x244>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4619      	mov	r1, r3
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	f04f 0300 	mov.w	r3, #0
 80011a4:	f04f 0400 	mov.w	r4, #0
 80011a8:	0154      	lsls	r4, r2, #5
 80011aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011ae:	014b      	lsls	r3, r1, #5
 80011b0:	4b56      	ldr	r3, [pc, #344]	; (800130c <unwrap+0x244>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	f04f 0400 	mov.w	r4, #0
 80011c2:	0154      	lsls	r4, r2, #5
 80011c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011c8:	014b      	lsls	r3, r1, #5
 80011ca:	4b50      	ldr	r3, [pc, #320]	; (800130c <unwrap+0x244>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	3303      	adds	r3, #3
 80011d2:	3307      	adds	r3, #7
 80011d4:	08db      	lsrs	r3, r3, #3
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	ebad 0d03 	sub.w	sp, sp, r3
 80011dc:	466b      	mov	r3, sp
 80011de:	3303      	adds	r3, #3
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize);
 80011e6:	69f9      	ldr	r1, [r7, #28]
 80011e8:	4b48      	ldr	r3, [pc, #288]	; (800130c <unwrap+0x244>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f009 fe14 	bl	800ae1c <arm_copy_f32>
	arm_sub_f32(&in[1], &in_cp[0], &sub[0], (frameSize - 1));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	1d18      	adds	r0, r3, #4
 80011f8:	69f9      	ldr	r1, [r7, #28]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4b43      	ldr	r3, [pc, #268]	; (800130c <unwrap+0x244>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	3b01      	subs	r3, #1
 8001202:	f00a fd87 	bl	800bd14 <arm_sub_f32>
	arm_abs_f32(&sub[0], &abs_sub[0], (frameSize - 1));
 8001206:	6978      	ldr	r0, [r7, #20]
 8001208:	68f9      	ldr	r1, [r7, #12]
 800120a:	4b40      	ldr	r3, [pc, #256]	; (800130c <unwrap+0x244>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3b01      	subs	r3, #1
 8001210:	461a      	mov	r2, r3
 8001212:	f00a fe0b 	bl	800be2c <arm_abs_f32>
	for(int i = 0; i < (frameSize - 1); i++){
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
 800121a:	e043      	b.n	80012a4 <unwrap+0x1dc>
		out[i] = in[i] + 2*M_PI*k;
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	4413      	add	r3, r2
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	ee07 3a90 	vmov	s15, r3
 8001232:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001236:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8001300 <unwrap+0x238>
 800123a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800123e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	4413      	add	r3, r2
 800124a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800124e:	edc3 7a00 	vstr	s15, [r3]
		// diff = fabsf(in[i+1] - in[i]);
		// if(diff > alpha){
		if(abs_sub[i] > alpha){
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	edd3 7a00 	vldr	s15, [r3]
 800125e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001262:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126a:	d518      	bpl.n	800129e <unwrap+0x1d6>
			if(in[i+1] < in_cp[i]){
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	3301      	adds	r3, #1
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	ed93 7a00 	vldr	s14, [r3]
 800127a:	69fa      	ldr	r2, [r7, #28]
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	edd3 7a00 	vldr	s15, [r3]
 8001286:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d503      	bpl.n	8001298 <unwrap+0x1d0>
				k++;
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	3301      	adds	r3, #1
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
 8001296:	e002      	b.n	800129e <unwrap+0x1d6>
			} else {
				k--;
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	3b01      	subs	r3, #1
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < (frameSize - 1); i++){
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	3301      	adds	r3, #1
 80012a2:	623b      	str	r3, [r7, #32]
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <unwrap+0x244>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8b5      	bhi.n	800121c <unwrap+0x154>
			}
		}
	}
	out[frameSize-1] = in[frameSize-1] + 2*M_PI*k;
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <unwrap+0x244>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80012b8:	4413      	add	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	4413      	add	r3, r2
 80012c0:	edd3 7a00 	vldr	s15, [r3]
 80012c4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	ee07 3a90 	vmov	s15, r3
 80012ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80012d2:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8001300 <unwrap+0x238>
 80012d6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80012da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <unwrap+0x244>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80012e6:	4413      	add	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	4413      	add	r3, r2
 80012ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012f2:	edc3 7a00 	vstr	s15, [r3]
 80012f6:	46ad      	mov	sp, r5
}
 80012f8:	bf00      	nop
 80012fa:	3730      	adds	r7, #48	; 0x30
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001300:	54442d18 	.word	0x54442d18
 8001304:	401921fb 	.word	0x401921fb
 8001308:	40490fdb 	.word	0x40490fdb
 800130c:	0800cf54 	.word	0x0800cf54

08001310 <inst_frequency>:

void inst_frequency(float32_t in[], float32_t out[]){
 8001310:	b580      	push	{r7, lr}
 8001312:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	4b52      	ldr	r3, [pc, #328]	; (8001464 <inst_frequency+0x154>)
 800131c:	f244 0210 	movw	r2, #16400	; 0x4010
 8001320:	443a      	add	r2, r7
 8001322:	4413      	add	r3, r2
 8001324:	6018      	str	r0, [r3, #0]
 8001326:	4b50      	ldr	r3, [pc, #320]	; (8001468 <inst_frequency+0x158>)
 8001328:	f244 0210 	movw	r2, #16400	; 0x4010
 800132c:	443a      	add	r2, r7
 800132e:	4413      	add	r3, r2
 8001330:	6019      	str	r1, [r3, #0]
	float32_t phase[2048] = {0};
 8001332:	4b4e      	ldr	r3, [pc, #312]	; (800146c <inst_frequency+0x15c>)
 8001334:	f244 0210 	movw	r2, #16400	; 0x4010
 8001338:	443a      	add	r2, r7
 800133a:	4413      	add	r3, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001342:	461a      	mov	r2, r3
 8001344:	2100      	movs	r1, #0
 8001346:	f00b f8d3 	bl	800c4f0 <memset>
	float32_t unwrapped_phase[2048] = {0};
 800134a:	4b49      	ldr	r3, [pc, #292]	; (8001470 <inst_frequency+0x160>)
 800134c:	f244 0210 	movw	r2, #16400	; 0x4010
 8001350:	443a      	add	r2, r7
 8001352:	4413      	add	r3, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800135a:	461a      	mov	r2, r3
 800135c:	2100      	movs	r1, #0
 800135e:	f00b f8c7 	bl	800c4f0 <memset>
	float32_t C = 1 / M_TWOPI;
 8001362:	4b44      	ldr	r3, [pc, #272]	; (8001474 <inst_frequency+0x164>)
 8001364:	f244 0208 	movw	r2, #16392	; 0x4008
 8001368:	443a      	add	r2, r7
 800136a:	6013      	str	r3, [r2, #0]
	inst_phase(&in[0], &phase[0]);
 800136c:	4a3f      	ldr	r2, [pc, #252]	; (800146c <inst_frequency+0x15c>)
 800136e:	f244 0310 	movw	r3, #16400	; 0x4010
 8001372:	443b      	add	r3, r7
 8001374:	441a      	add	r2, r3
 8001376:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <inst_frequency+0x154>)
 8001378:	f244 0110 	movw	r1, #16400	; 0x4010
 800137c:	4439      	add	r1, r7
 800137e:	440b      	add	r3, r1
 8001380:	4611      	mov	r1, r2
 8001382:	6818      	ldr	r0, [r3, #0]
 8001384:	f7ff fe66 	bl	8001054 <inst_phase>
	unwrap(&phase[0], &unwrapped_phase[0]);
 8001388:	4a39      	ldr	r2, [pc, #228]	; (8001470 <inst_frequency+0x160>)
 800138a:	f244 0310 	movw	r3, #16400	; 0x4010
 800138e:	443b      	add	r3, r7
 8001390:	441a      	add	r2, r3
 8001392:	4b36      	ldr	r3, [pc, #216]	; (800146c <inst_frequency+0x15c>)
 8001394:	f244 0110 	movw	r1, #16400	; 0x4010
 8001398:	4439      	add	r1, r7
 800139a:	440b      	add	r3, r1
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fe92 	bl	80010c8 <unwrap>
	for(int i = 0; i < (frameSize-1); i++){
 80013a4:	2300      	movs	r3, #0
 80013a6:	f244 020c 	movw	r2, #16396	; 0x400c
 80013aa:	443a      	add	r2, r7
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e03a      	b.n	8001426 <inst_frequency+0x116>
		out[i] = C*(unwrapped_phase[i + 1] - unwrapped_phase[i]);
 80013b0:	f244 030c 	movw	r3, #16396	; 0x400c
 80013b4:	443b      	add	r3, r7
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <inst_frequency+0x160>)
 80013bc:	f244 0110 	movw	r1, #16400	; 0x4010
 80013c0:	4439      	add	r1, r7
 80013c2:	440b      	add	r3, r1
 80013c4:	0092      	lsls	r2, r2, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	ed93 7a00 	vldr	s14, [r3]
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <inst_frequency+0x160>)
 80013ce:	f244 0210 	movw	r2, #16400	; 0x4010
 80013d2:	443a      	add	r2, r7
 80013d4:	4413      	add	r3, r2
 80013d6:	f244 020c 	movw	r2, #16396	; 0x400c
 80013da:	443a      	add	r2, r7
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	0092      	lsls	r2, r2, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013ea:	f244 030c 	movw	r3, #16396	; 0x400c
 80013ee:	443b      	add	r3, r7
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	009a      	lsls	r2, r3, #2
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <inst_frequency+0x158>)
 80013f6:	f244 0110 	movw	r1, #16400	; 0x4010
 80013fa:	4439      	add	r1, r7
 80013fc:	440b      	add	r3, r1
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4413      	add	r3, r2
 8001402:	f244 0208 	movw	r2, #16392	; 0x4008
 8001406:	443a      	add	r2, r7
 8001408:	edd2 7a00 	vldr	s15, [r2]
 800140c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001410:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < (frameSize-1); i++){
 8001414:	f244 030c 	movw	r3, #16396	; 0x400c
 8001418:	443b      	add	r3, r7
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	f244 020c 	movw	r2, #16396	; 0x400c
 8001422:	443a      	add	r2, r7
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <inst_frequency+0x168>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	1e5a      	subs	r2, r3, #1
 800142c:	f244 030c 	movw	r3, #16396	; 0x400c
 8001430:	443b      	add	r3, r7
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	429a      	cmp	r2, r3
 8001436:	d8bb      	bhi.n	80013b0 <inst_frequency+0xa0>
	}
	out[frameSize - 1] = 0;
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <inst_frequency+0x168>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001440:	4413      	add	r3, r2
 8001442:	009a      	lsls	r2, r3, #2
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <inst_frequency+0x158>)
 8001446:	f244 0110 	movw	r1, #16400	; 0x4010
 800144a:	4439      	add	r1, r7
 800144c:	440b      	add	r3, r1
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4413      	add	r3, r2
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
}
 8001458:	bf00      	nop
 800145a:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	ffffbff4 	.word	0xffffbff4
 8001468:	ffffbff0 	.word	0xffffbff0
 800146c:	ffffdff8 	.word	0xffffdff8
 8001470:	ffffbff8 	.word	0xffffbff8
 8001474:	3e22f983 	.word	0x3e22f983
 8001478:	0800cf54 	.word	0x0800cf54

0800147c <inst_centralized_normalized_absolute>:

void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
	float32_t mean = 0, max = 0;
 8001486:	f04f 0300 	mov.w	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
	uint32_t max_index = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
	float32_t *absolute, *normalized;
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8001496:	4b34      	ldr	r3, [pc, #208]	; (8001568 <inst_centralized_normalized_absolute+0xec>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4618      	mov	r0, r3
 800149e:	f00b f817 	bl	800c4d0 <malloc>
 80014a2:	4603      	mov	r3, r0
 80014a4:	61fb      	str	r3, [r7, #28]
	normalized = (float32_t *) malloc(frameSize * sizeof(float32_t));
 80014a6:	4b30      	ldr	r3, [pc, #192]	; (8001568 <inst_centralized_normalized_absolute+0xec>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00b f80f 	bl	800c4d0 <malloc>
 80014b2:	4603      	mov	r3, r0
 80014b4:	61bb      	str	r3, [r7, #24]
	complex_inst_absolute(in, &absolute[0]);
 80014b6:	69f9      	ldr	r1, [r7, #28]
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff fdb9 	bl	8001030 <complex_inst_absolute>
	arm_max_f32(absolute, frameSize, &max, &max_index);
 80014be:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <inst_centralized_normalized_absolute+0xec>)
 80014c0:	6819      	ldr	r1, [r3, #0]
 80014c2:	f107 030c 	add.w	r3, r7, #12
 80014c6:	f107 0210 	add.w	r2, r7, #16
 80014ca:	69f8      	ldr	r0, [r7, #28]
 80014cc:	f009 fe44 	bl	800b158 <arm_max_f32>
	for(int a = 0; a < frameSize; a++){
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
 80014d4:	e012      	b.n	80014fc <inst_centralized_normalized_absolute+0x80>
		normalized[a] = absolute[a] / max;
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	4413      	add	r3, r2
 80014de:	edd3 6a00 	vldr	s13, [r3]
 80014e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4413      	add	r3, r2
 80014ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f2:	edc3 7a00 	vstr	s15, [r3]
	for(int a = 0; a < frameSize; a++){
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	3301      	adds	r3, #1
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
 80014fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <inst_centralized_normalized_absolute+0xec>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d3e7      	bcc.n	80014d6 <inst_centralized_normalized_absolute+0x5a>
	}
	arm_mean_f32(&normalized[0], frameSize, &mean);
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <inst_centralized_normalized_absolute+0xec>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f107 0214 	add.w	r2, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	69b8      	ldr	r0, [r7, #24]
 8001512:	f009 fd91 	bl	800b038 <arm_mean_f32>
	for(int i = 0; i < frameSize; i++){
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
 800151a:	e016      	b.n	800154a <inst_centralized_normalized_absolute+0xce>
		out[i] = normalized[i] / mean - 1;
 800151c:	6a3b      	ldr	r3, [r7, #32]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4413      	add	r3, r2
 8001524:	edd3 6a00 	vldr	s13, [r3]
 8001528:	ed97 7a05 	vldr	s14, [r7, #20]
 800152c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	4413      	add	r3, r2
 8001538:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800153c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001540:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < frameSize; i++){
 8001544:	6a3b      	ldr	r3, [r7, #32]
 8001546:	3301      	adds	r3, #1
 8001548:	623b      	str	r3, [r7, #32]
 800154a:	6a3a      	ldr	r2, [r7, #32]
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <inst_centralized_normalized_absolute+0xec>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d3e3      	bcc.n	800151c <inst_centralized_normalized_absolute+0xa0>
	}
	free(absolute);
 8001554:	69f8      	ldr	r0, [r7, #28]
 8001556:	f00a ffc3 	bl	800c4e0 <free>
	free(normalized);
 800155a:	69b8      	ldr	r0, [r7, #24]
 800155c:	f00a ffc0 	bl	800c4e0 <free>
}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	; 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	0800cf54 	.word	0x0800cf54

0800156c <std_dev>:

void std_dev(float32_t in[], float32_t *out) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	arm_std_f32(&in[0], frameSize, out);
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <std_dev+0x20>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f009 fc7c 	bl	800ae7c <arm_std_f32>
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	0800cf54 	.word	0x0800cf54

08001590 <mean_of_signal_magnitude>:
//**********************************************************************************************//
// Feature number 6
void mean_of_signal_magnitude(float32_t in[], float32_t *out) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
	arm_mean_f32(&in[0], frameSize, out);
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <mean_of_signal_magnitude+0x20>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f009 fd48 	bl	800b038 <arm_mean_f32>
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	0800cf54 	.word	0x0800cf54

080015b4 <squared_mean_of_signal_magnitude>:

// Feature number 7
void squared_mean_of_signal_magnitude(float32_t in[], float32_t *out) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
	float32_t mean_of_signal_magnitude;
	arm_mean_f32(&in[0], frameSize, &mean_of_signal_magnitude);
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <squared_mean_of_signal_magnitude+0x34>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f107 020c 	add.w	r2, r7, #12
 80015c6:	4619      	mov	r1, r3
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f009 fd35 	bl	800b038 <arm_mean_f32>
	*out = mean_of_signal_magnitude * mean_of_signal_magnitude;
 80015ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80015d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80015d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	edc3 7a00 	vstr	s15, [r3]
}
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	0800cf54 	.word	0x0800cf54

080015ec <normalized_sqrt_of_sum_of_amp>:

// Feature number 8
void normalized_sqrt_of_sum_of_amp(float32_t in[], float32_t *out) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
	float32_t sum = 0.0f;
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < frameSize; i++){
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	e00e      	b.n	8001620 <normalized_sqrt_of_sum_of_amp+0x34>
		sum += in[i];
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	edd3 7a00 	vldr	s15, [r3]
 800160e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001616:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < frameSize; i++){
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	3301      	adds	r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <normalized_sqrt_of_sum_of_amp+0x68>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d3eb      	bcc.n	8001602 <normalized_sqrt_of_sum_of_amp+0x16>
	}
	*out = sqrtf(sum)/frameSize;
 800162a:	ed97 0a03 	vldr	s0, [r7, #12]
 800162e:	f00b f89b 	bl	800c768 <sqrtf>
 8001632:	eef0 6a40 	vmov.f32	s13, s0
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <normalized_sqrt_of_sum_of_amp+0x68>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	edc3 7a00 	vstr	s15, [r3]
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	0800cf54 	.word	0x0800cf54

08001658 <ratio_iq>:

// Feature number 9
void ratio_iq(float32_t in[], float32_t *out) {
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	// ft_output = np.sum(np.power(np.imag(signal_input), 2)) / np.sum(np.power(np.real(signal_input), 2))
	float32_t sum_of_real_squared = 0.0f;
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
	float32_t sum_of_imag_squared = 0.0f;
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 2*frameSize; i+=2){
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	e02c      	b.n	80016ce <ratio_iq+0x76>
		sum_of_real_squared += in[i]*in[i];
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	ed93 7a00 	vldr	s14, [r3]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	4413      	add	r3, r2
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001690:	ed97 7a05 	vldr	s14, [r7, #20]
 8001694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001698:	edc7 7a05 	vstr	s15, [r7, #20]
		sum_of_imag_squared += in[i+1]*in[i+1];
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3301      	adds	r3, #1
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	ed93 7a00 	vldr	s14, [r3]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	3301      	adds	r3, #1
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	4413      	add	r3, r2
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80016c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c4:	edc7 7a04 	vstr	s15, [r7, #16]
	for(int i = 0; i < 2*frameSize; i+=2){
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3302      	adds	r3, #2
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <ratio_iq+0xa0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	005a      	lsls	r2, r3, #1
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d8cc      	bhi.n	8001674 <ratio_iq+0x1c>
	}
	*out = sum_of_imag_squared / sum_of_real_squared;
 80016da:	edd7 6a04 	vldr	s13, [r7, #16]
 80016de:	ed97 7a05 	vldr	s14, [r7, #20]
 80016e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	edc3 7a00 	vstr	s15, [r3]
}
 80016ec:	bf00      	nop
 80016ee:	371c      	adds	r7, #28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	0800cf54 	.word	0x0800cf54

080016fc <gmax>:

// Feature number 10
void gmax(float32_t in[], float32_t *out){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	4b61      	ldr	r3, [pc, #388]	; (800188c <gmax+0x190>)
 8001708:	f244 0228 	movw	r2, #16424	; 0x4028
 800170c:	443a      	add	r2, r7
 800170e:	4413      	add	r3, r2
 8001710:	6018      	str	r0, [r3, #0]
 8001712:	4b5f      	ldr	r3, [pc, #380]	; (8001890 <gmax+0x194>)
 8001714:	f244 0228 	movw	r2, #16424	; 0x4028
 8001718:	443a      	add	r2, r7
 800171a:	4413      	add	r3, r2
 800171c:	6019      	str	r1, [r3, #0]
	uint32_t fftSize = 2048;
 800171e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001722:	f244 0220 	movw	r2, #16416	; 0x4020
 8001726:	443a      	add	r2, r7
 8001728:	6013      	str	r3, [r2, #0]
	uint32_t ifftFlag = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	f244 021c 	movw	r2, #16412	; 0x401c
 8001730:	443a      	add	r2, r7
 8001732:	6013      	str	r3, [r2, #0]
	uint32_t doBitReverse = 1;
 8001734:	2301      	movs	r3, #1
 8001736:	f244 0218 	movw	r2, #16408	; 0x4018
 800173a:	443a      	add	r2, r7
 800173c:	6013      	str	r3, [r2, #0]
	uint32_t maxValueIndex; //Unused
	float32_t maxValue;
	float32_t *result_mag;
	float32_t result_fft[4096] = {0};
 800173e:	4b55      	ldr	r3, [pc, #340]	; (8001894 <gmax+0x198>)
 8001740:	f244 0228 	movw	r2, #16424	; 0x4028
 8001744:	443a      	add	r2, r7
 8001746:	4413      	add	r3, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800174e:	461a      	mov	r2, r3
 8001750:	2100      	movs	r1, #0
 8001752:	f00a fecd 	bl	800c4f0 <memset>

	result_mag = (float32_t *) malloc(fftSize * sizeof(float32_t));
 8001756:	f244 0320 	movw	r3, #16416	; 0x4020
 800175a:	443b      	add	r3, r7
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4618      	mov	r0, r3
 8001762:	f00a feb5 	bl	800c4d0 <malloc>
 8001766:	4603      	mov	r3, r0
 8001768:	f244 0214 	movw	r2, #16404	; 0x4014
 800176c:	443a      	add	r2, r7
 800176e:	6013      	str	r3, [r2, #0]

	// Copy array to calculate
	for(int i = 0; i < frameSize*2; i++){
 8001770:	2300      	movs	r3, #0
 8001772:	f244 0224 	movw	r2, #16420	; 0x4024
 8001776:	443a      	add	r2, r7
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e021      	b.n	80017c0 <gmax+0xc4>
		result_fft[i] = in[i];
 800177c:	f244 0324 	movw	r3, #16420	; 0x4024
 8001780:	443b      	add	r3, r7
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	009a      	lsls	r2, r3, #2
 8001786:	4b41      	ldr	r3, [pc, #260]	; (800188c <gmax+0x190>)
 8001788:	f244 0128 	movw	r1, #16424	; 0x4028
 800178c:	4439      	add	r1, r7
 800178e:	440b      	add	r3, r1
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b3f      	ldr	r3, [pc, #252]	; (8001894 <gmax+0x198>)
 8001798:	f244 0128 	movw	r1, #16424	; 0x4028
 800179c:	4439      	add	r1, r7
 800179e:	440b      	add	r3, r1
 80017a0:	f244 0124 	movw	r1, #16420	; 0x4024
 80017a4:	4439      	add	r1, r7
 80017a6:	6809      	ldr	r1, [r1, #0]
 80017a8:	0089      	lsls	r1, r1, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < frameSize*2; i++){
 80017ae:	f244 0324 	movw	r3, #16420	; 0x4024
 80017b2:	443b      	add	r3, r7
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	f244 0224 	movw	r2, #16420	; 0x4024
 80017bc:	443a      	add	r2, r7
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4b35      	ldr	r3, [pc, #212]	; (8001898 <gmax+0x19c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	005a      	lsls	r2, r3, #1
 80017c6:	f244 0324 	movw	r3, #16420	; 0x4024
 80017ca:	443b      	add	r3, r7
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d8d4      	bhi.n	800177c <gmax+0x80>
	}

	arm_cfft_f32(&arm_cfft_sR_f32_len2048, &result_fft[0], ifftFlag, doBitReverse);
 80017d2:	f244 031c 	movw	r3, #16412	; 0x401c
 80017d6:	443b      	add	r3, r7
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	f244 0318 	movw	r3, #16408	; 0x4018
 80017e0:	443b      	add	r3, r7
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	492b      	ldr	r1, [pc, #172]	; (8001894 <gmax+0x198>)
 80017e8:	f244 0028 	movw	r0, #16424	; 0x4028
 80017ec:	4438      	add	r0, r7
 80017ee:	4401      	add	r1, r0
 80017f0:	482a      	ldr	r0, [pc, #168]	; (800189c <gmax+0x1a0>)
 80017f2:	f00a f83f 	bl	800b874 <arm_cfft_f32>
	arm_cmplx_mag_f32(result_fft, result_mag, fftSize);
 80017f6:	4b27      	ldr	r3, [pc, #156]	; (8001894 <gmax+0x198>)
 80017f8:	f244 0228 	movw	r2, #16424	; 0x4028
 80017fc:	443a      	add	r2, r7
 80017fe:	4413      	add	r3, r2
 8001800:	f244 0220 	movw	r2, #16416	; 0x4020
 8001804:	443a      	add	r2, r7
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	f244 0114 	movw	r1, #16404	; 0x4014
 800180c:	4439      	add	r1, r7
 800180e:	6809      	ldr	r1, [r1, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f00a f947 	bl	800baa4 <arm_cmplx_mag_f32>
	arm_max_f32(result_mag, fftSize, &maxValue, &maxValueIndex);
 8001816:	f244 0310 	movw	r3, #16400	; 0x4010
 800181a:	443b      	add	r3, r7
 800181c:	f244 020c 	movw	r2, #16396	; 0x400c
 8001820:	443a      	add	r2, r7
 8001822:	f244 0120 	movw	r1, #16416	; 0x4020
 8001826:	4439      	add	r1, r7
 8001828:	6809      	ldr	r1, [r1, #0]
 800182a:	f244 0014 	movw	r0, #16404	; 0x4014
 800182e:	4438      	add	r0, r7
 8001830:	6800      	ldr	r0, [r0, #0]
 8001832:	f009 fc91 	bl	800b158 <arm_max_f32>
	*out = maxValue*maxValue/fftSize;
 8001836:	f244 030c 	movw	r3, #16396	; 0x400c
 800183a:	443b      	add	r3, r7
 800183c:	ed93 7a00 	vldr	s14, [r3]
 8001840:	f244 030c 	movw	r3, #16396	; 0x400c
 8001844:	443b      	add	r3, r7
 8001846:	edd3 7a00 	vldr	s15, [r3]
 800184a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800184e:	f244 0320 	movw	r3, #16416	; 0x4020
 8001852:	443b      	add	r3, r7
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	ee07 3a90 	vmov	s15, r3
 800185a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800185e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <gmax+0x194>)
 8001864:	f244 0228 	movw	r2, #16424	; 0x4028
 8001868:	443a      	add	r2, r7
 800186a:	4413      	add	r3, r2
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	edc3 7a00 	vstr	s15, [r3]
	free(result_mag);
 8001872:	f244 0314 	movw	r3, #16404	; 0x4014
 8001876:	443b      	add	r3, r7
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	f00a fe31 	bl	800c4e0 <free>
}
 800187e:	bf00      	nop
 8001880:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 8001884:	3728      	adds	r7, #40	; 0x28
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	ffffbfdc 	.word	0xffffbfdc
 8001890:	ffffbfd8 	.word	0xffffbfd8
 8001894:	ffffbfe4 	.word	0xffffbfe4
 8001898:	0800cf54 	.word	0x0800cf54
 800189c:	0800cf78 	.word	0x0800cf78

080018a0 <kurtosis_of_abs_amplitude>:

// Features number 11 and 12
void kurtosis_of_abs_amplitude(float32_t in[], float32_t *out, uint32_t blockSize){
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	b094      	sub	sp, #80	; 0x50
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	466b      	mov	r3, sp
 80018ae:	461d      	mov	r5, r3
	float32_t mean_array[blockSize];
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4603      	mov	r3, r0
 80018b4:	3b01      	subs	r3, #1
 80018b6:	637b      	str	r3, [r7, #52]	; 0x34
 80018b8:	4601      	mov	r1, r0
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	f04f 0400 	mov.w	r4, #0
 80018c6:	0154      	lsls	r4, r2, #5
 80018c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018cc:	014b      	lsls	r3, r1, #5
 80018ce:	4601      	mov	r1, r0
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	f04f 0400 	mov.w	r4, #0
 80018dc:	0154      	lsls	r4, r2, #5
 80018de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018e2:	014b      	lsls	r3, r1, #5
 80018e4:	0083      	lsls	r3, r0, #2
 80018e6:	3303      	adds	r3, #3
 80018e8:	3307      	adds	r3, #7
 80018ea:	08db      	lsrs	r3, r3, #3
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	ebad 0d03 	sub.w	sp, sp, r3
 80018f2:	466b      	mov	r3, sp
 80018f4:	3303      	adds	r3, #3
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t x_1[blockSize];
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	4603      	mov	r3, r0
 8001900:	3b01      	subs	r3, #1
 8001902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001904:	4601      	mov	r1, r0
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	f04f 0400 	mov.w	r4, #0
 8001912:	0154      	lsls	r4, r2, #5
 8001914:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001918:	014b      	lsls	r3, r1, #5
 800191a:	4601      	mov	r1, r0
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	f04f 0400 	mov.w	r4, #0
 8001928:	0154      	lsls	r4, r2, #5
 800192a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800192e:	014b      	lsls	r3, r1, #5
 8001930:	0083      	lsls	r3, r0, #2
 8001932:	3303      	adds	r3, #3
 8001934:	3307      	adds	r3, #7
 8001936:	08db      	lsrs	r3, r3, #3
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	ebad 0d03 	sub.w	sp, sp, r3
 800193e:	466b      	mov	r3, sp
 8001940:	3303      	adds	r3, #3
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t x_2[blockSize];
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	4603      	mov	r3, r0
 800194c:	3b01      	subs	r3, #1
 800194e:	647b      	str	r3, [r7, #68]	; 0x44
 8001950:	4601      	mov	r1, r0
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	f04f 0400 	mov.w	r4, #0
 800195e:	0154      	lsls	r4, r2, #5
 8001960:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001964:	014b      	lsls	r3, r1, #5
 8001966:	4601      	mov	r1, r0
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	f04f 0400 	mov.w	r4, #0
 8001974:	0154      	lsls	r4, r2, #5
 8001976:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800197a:	014b      	lsls	r3, r1, #5
 800197c:	0083      	lsls	r3, r0, #2
 800197e:	3303      	adds	r3, #3
 8001980:	3307      	adds	r3, #7
 8001982:	08db      	lsrs	r3, r3, #3
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	ebad 0d03 	sub.w	sp, sp, r3
 800198a:	466b      	mov	r3, sp
 800198c:	3303      	adds	r3, #3
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t temp_1[blockSize];
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	4603      	mov	r3, r0
 8001998:	3b01      	subs	r3, #1
 800199a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800199c:	4601      	mov	r1, r0
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	f04f 0400 	mov.w	r4, #0
 80019aa:	0154      	lsls	r4, r2, #5
 80019ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019b0:	014b      	lsls	r3, r1, #5
 80019b2:	4601      	mov	r1, r0
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	f04f 0400 	mov.w	r4, #0
 80019c0:	0154      	lsls	r4, r2, #5
 80019c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019c6:	014b      	lsls	r3, r1, #5
 80019c8:	0083      	lsls	r3, r0, #2
 80019ca:	3303      	adds	r3, #3
 80019cc:	3307      	adds	r3, #7
 80019ce:	08db      	lsrs	r3, r3, #3
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	ebad 0d03 	sub.w	sp, sp, r3
 80019d6:	466b      	mov	r3, sp
 80019d8:	3303      	adds	r3, #3
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
	float32_t temp_2[blockSize];
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	4603      	mov	r3, r0
 80019e4:	3b01      	subs	r3, #1
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019e8:	4601      	mov	r1, r0
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	f04f 0400 	mov.w	r4, #0
 80019f6:	0154      	lsls	r4, r2, #5
 80019f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019fc:	014b      	lsls	r3, r1, #5
 80019fe:	4601      	mov	r1, r0
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	f04f 0400 	mov.w	r4, #0
 8001a0c:	0154      	lsls	r4, r2, #5
 8001a0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a12:	014b      	lsls	r3, r1, #5
 8001a14:	0083      	lsls	r3, r0, #2
 8001a16:	3303      	adds	r3, #3
 8001a18:	3307      	adds	r3, #7
 8001a1a:	08db      	lsrs	r3, r3, #3
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	ebad 0d03 	sub.w	sp, sp, r3
 8001a22:	466b      	mov	r3, sp
 8001a24:	3303      	adds	r3, #3
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t result[blockSize];
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	4603      	mov	r3, r0
 8001a30:	3b01      	subs	r3, #1
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
 8001a34:	4601      	mov	r1, r0
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	f04f 0400 	mov.w	r4, #0
 8001a42:	0154      	lsls	r4, r2, #5
 8001a44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a48:	014b      	lsls	r3, r1, #5
 8001a4a:	4601      	mov	r1, r0
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	f04f 0400 	mov.w	r4, #0
 8001a58:	0154      	lsls	r4, r2, #5
 8001a5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a5e:	014b      	lsls	r3, r1, #5
 8001a60:	0083      	lsls	r3, r0, #2
 8001a62:	3303      	adds	r3, #3
 8001a64:	3307      	adds	r3, #7
 8001a66:	08db      	lsrs	r3, r3, #3
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	ebad 0d03 	sub.w	sp, sp, r3
 8001a6e:	466b      	mov	r3, sp
 8001a70:	3303      	adds	r3, #3
 8001a72:	089b      	lsrs	r3, r3, #2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	623b      	str	r3, [r7, #32]
	float32_t mean, m4, m2;
	// Calculate mean
	arm_mean_f32(&in[0], blockSize, &mean);
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f009 fad9 	bl	800b038 <arm_mean_f32>
	// Transform scalar into vector
	arm_fill_f32(mean, &mean_array[0], blockSize);
 8001a86:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	eeb0 0a67 	vmov.f32	s0, s15
 8001a94:	f009 f97e 	bl	800ad94 <arm_fill_f32>
	// Calculate (x - mean)
	arm_sub_f32(&in[0], &mean_array[0], &x_1[0], blockSize);
 8001a98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f00a f938 	bl	800bd14 <arm_sub_f32>
	// Make a copy of (x - mean)
	arm_copy_f32(&x_1[0], &x_2[0], blockSize);
 8001aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aa6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f009 f9b6 	bl	800ae1c <arm_copy_f32>
	// Calculate (x - mean) ^ 4
	arm_mult_f32(&x_1[0], &x_2[0], &temp_1[0], blockSize); // temp1 = (x - u)^2
 8001ab0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001ab2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f00a f972 	bl	800bda0 <arm_mult_f32>
	arm_mult_f32(&temp_1[0], &x_2[0], &temp_2[0], blockSize); // temp2 = (x - u)^3
 8001abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001abe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f00a f96c 	bl	800bda0 <arm_mult_f32>
	arm_mult_f32(&temp_2[0], &x_2[0], &result[0], blockSize); // result = (x - u)^4
 8001ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001aca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001acc:	6a3a      	ldr	r2, [r7, #32]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f00a f966 	bl	800bda0 <arm_mult_f32>
	// Calculate mean of (x - mean) ^ 4
	arm_mean_f32(&result[0], blockSize, &m4);
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	f107 0218 	add.w	r2, r7, #24
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f009 faab 	bl	800b038 <arm_mean_f32>
	// Calculate mean of (x - mean) ^ 2
	arm_mean_f32(&temp_1[0], blockSize, &m2);
 8001ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae4:	f107 0214 	add.w	r2, r7, #20
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f009 faa4 	bl	800b038 <arm_mean_f32>
	*out = m4 / (m2*m2) - 3;
 8001af0:	edd7 6a06 	vldr	s13, [r7, #24]
 8001af4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001af8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001afc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b04:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001b08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	edc3 7a00 	vstr	s15, [r3]
 8001b12:	46ad      	mov	sp, r5
}
 8001b14:	bf00      	nop
 8001b16:	3750      	adds	r7, #80	; 0x50
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bdb0      	pop	{r4, r5, r7, pc}

08001b1c <kurtosis_of_abs_freq>:

void kurtosis_of_abs_freq(float32_t in[], float32_t *out, uint32_t blockSize){
 8001b1c:	b5b0      	push	{r4, r5, r7, lr}
 8001b1e:	b094      	sub	sp, #80	; 0x50
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	466b      	mov	r3, sp
 8001b2a:	461d      	mov	r5, r3
	float32_t mean_array[blockSize];
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	4603      	mov	r3, r0
 8001b30:	3b01      	subs	r3, #1
 8001b32:	637b      	str	r3, [r7, #52]	; 0x34
 8001b34:	4601      	mov	r1, r0
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	f04f 0400 	mov.w	r4, #0
 8001b42:	0154      	lsls	r4, r2, #5
 8001b44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b48:	014b      	lsls	r3, r1, #5
 8001b4a:	4601      	mov	r1, r0
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	f04f 0400 	mov.w	r4, #0
 8001b58:	0154      	lsls	r4, r2, #5
 8001b5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b5e:	014b      	lsls	r3, r1, #5
 8001b60:	0083      	lsls	r3, r0, #2
 8001b62:	3303      	adds	r3, #3
 8001b64:	3307      	adds	r3, #7
 8001b66:	08db      	lsrs	r3, r3, #3
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	ebad 0d03 	sub.w	sp, sp, r3
 8001b6e:	466b      	mov	r3, sp
 8001b70:	3303      	adds	r3, #3
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t x_1[blockSize];
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b80:	4601      	mov	r1, r0
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	f04f 0400 	mov.w	r4, #0
 8001b8e:	0154      	lsls	r4, r2, #5
 8001b90:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b94:	014b      	lsls	r3, r1, #5
 8001b96:	4601      	mov	r1, r0
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	f04f 0400 	mov.w	r4, #0
 8001ba4:	0154      	lsls	r4, r2, #5
 8001ba6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001baa:	014b      	lsls	r3, r1, #5
 8001bac:	0083      	lsls	r3, r0, #2
 8001bae:	3303      	adds	r3, #3
 8001bb0:	3307      	adds	r3, #7
 8001bb2:	08db      	lsrs	r3, r3, #3
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	ebad 0d03 	sub.w	sp, sp, r3
 8001bba:	466b      	mov	r3, sp
 8001bbc:	3303      	adds	r3, #3
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t x_2[blockSize];
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	647b      	str	r3, [r7, #68]	; 0x44
 8001bcc:	4601      	mov	r1, r0
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	f04f 0400 	mov.w	r4, #0
 8001bda:	0154      	lsls	r4, r2, #5
 8001bdc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001be0:	014b      	lsls	r3, r1, #5
 8001be2:	4601      	mov	r1, r0
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	f04f 0400 	mov.w	r4, #0
 8001bf0:	0154      	lsls	r4, r2, #5
 8001bf2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bf6:	014b      	lsls	r3, r1, #5
 8001bf8:	0083      	lsls	r3, r0, #2
 8001bfa:	3303      	adds	r3, #3
 8001bfc:	3307      	adds	r3, #7
 8001bfe:	08db      	lsrs	r3, r3, #3
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	ebad 0d03 	sub.w	sp, sp, r3
 8001c06:	466b      	mov	r3, sp
 8001c08:	3303      	adds	r3, #3
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t temp_1[blockSize];
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	4603      	mov	r3, r0
 8001c14:	3b01      	subs	r3, #1
 8001c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c18:	4601      	mov	r1, r0
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	f04f 0400 	mov.w	r4, #0
 8001c26:	0154      	lsls	r4, r2, #5
 8001c28:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c2c:	014b      	lsls	r3, r1, #5
 8001c2e:	4601      	mov	r1, r0
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	f04f 0400 	mov.w	r4, #0
 8001c3c:	0154      	lsls	r4, r2, #5
 8001c3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c42:	014b      	lsls	r3, r1, #5
 8001c44:	0083      	lsls	r3, r0, #2
 8001c46:	3303      	adds	r3, #3
 8001c48:	3307      	adds	r3, #7
 8001c4a:	08db      	lsrs	r3, r3, #3
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	ebad 0d03 	sub.w	sp, sp, r3
 8001c52:	466b      	mov	r3, sp
 8001c54:	3303      	adds	r3, #3
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
	float32_t temp_2[blockSize];
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	4603      	mov	r3, r0
 8001c60:	3b01      	subs	r3, #1
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c64:	4601      	mov	r1, r0
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	f04f 0400 	mov.w	r4, #0
 8001c72:	0154      	lsls	r4, r2, #5
 8001c74:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c78:	014b      	lsls	r3, r1, #5
 8001c7a:	4601      	mov	r1, r0
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	f04f 0400 	mov.w	r4, #0
 8001c88:	0154      	lsls	r4, r2, #5
 8001c8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c8e:	014b      	lsls	r3, r1, #5
 8001c90:	0083      	lsls	r3, r0, #2
 8001c92:	3303      	adds	r3, #3
 8001c94:	3307      	adds	r3, #7
 8001c96:	08db      	lsrs	r3, r3, #3
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	ebad 0d03 	sub.w	sp, sp, r3
 8001c9e:	466b      	mov	r3, sp
 8001ca0:	3303      	adds	r3, #3
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t result[blockSize];
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	4603      	mov	r3, r0
 8001cac:	3b01      	subs	r3, #1
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb0:	4601      	mov	r1, r0
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	f04f 0400 	mov.w	r4, #0
 8001cbe:	0154      	lsls	r4, r2, #5
 8001cc0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cc4:	014b      	lsls	r3, r1, #5
 8001cc6:	4601      	mov	r1, r0
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	f04f 0400 	mov.w	r4, #0
 8001cd4:	0154      	lsls	r4, r2, #5
 8001cd6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cda:	014b      	lsls	r3, r1, #5
 8001cdc:	0083      	lsls	r3, r0, #2
 8001cde:	3303      	adds	r3, #3
 8001ce0:	3307      	adds	r3, #7
 8001ce2:	08db      	lsrs	r3, r3, #3
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	ebad 0d03 	sub.w	sp, sp, r3
 8001cea:	466b      	mov	r3, sp
 8001cec:	3303      	adds	r3, #3
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	623b      	str	r3, [r7, #32]
	float32_t mean, m4, m2;
	// Calculate mean
	arm_mean_f32(&in[0], blockSize, &mean);
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f009 f99b 	bl	800b038 <arm_mean_f32>
	// Transform scalar into vector
	arm_fill_f32(mean, &mean_array[0], blockSize);
 8001d02:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d10:	f009 f840 	bl	800ad94 <arm_fill_f32>
	// Calculate (x - mean)
	arm_sub_f32(&in[0], &mean_array[0], &x_1[0], blockSize);
 8001d14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f009 fffa 	bl	800bd14 <arm_sub_f32>
	// Make a copy of (x - mean)
	arm_copy_f32(&x_1[0], &x_2[0], blockSize);
 8001d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d22:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f009 f878 	bl	800ae1c <arm_copy_f32>
	// Calculate (x - mean) ^ 4
	arm_mult_f32(&x_1[0], &x_2[0], &temp_1[0], blockSize); // temp1 = (x - u)^2
 8001d2c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001d2e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f00a f834 	bl	800bda0 <arm_mult_f32>
	arm_mult_f32(&temp_1[0], &x_2[0], &temp_2[0], blockSize); // temp2 = (x - u)^3
 8001d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d3a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f00a f82e 	bl	800bda0 <arm_mult_f32>
	arm_mult_f32(&temp_2[0], &x_2[0], &result[0], blockSize); // result = (x - u)^4
 8001d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d46:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001d48:	6a3a      	ldr	r2, [r7, #32]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f00a f828 	bl	800bda0 <arm_mult_f32>
	// Calculate mean of (x - mean) ^ 4
	arm_mean_f32(&result[0], blockSize, &m4);
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	f107 0218 	add.w	r2, r7, #24
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f009 f96d 	bl	800b038 <arm_mean_f32>
	// Calculate mean of (x - mean) ^ 2
	arm_mean_f32(&temp_1[0], blockSize, &m2);
 8001d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d60:	f107 0214 	add.w	r2, r7, #20
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f009 f966 	bl	800b038 <arm_mean_f32>
	*out = m4 / (m2*m2) - 3;
 8001d6c:	edd7 6a06 	vldr	s13, [r7, #24]
 8001d70:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d74:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d80:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001d84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	edc3 7a00 	vstr	s15, [r3]
 8001d8e:	46ad      	mov	sp, r5
}
 8001d90:	bf00      	nop
 8001d92:	3750      	adds	r7, #80	; 0x50
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bdb0      	pop	{r4, r5, r7, pc}

08001d98 <moment20>:

// Central moment definition
// Mpq = E[x^(p-q).x*^q]
void moment20(float32_t in[], float32_t out[]){
 8001d98:	b5b0      	push	{r4, r5, r7, lr}
 8001d9a:	b08c      	sub	sp, #48	; 0x30
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
 8001da2:	466b      	mov	r3, sp
 8001da4:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 8001da6:	4b61      	ldr	r3, [pc, #388]	; (8001f2c <moment20+0x194>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float32_t in_cp[frameSize*2];
 8001db6:	4b5d      	ldr	r3, [pc, #372]	; (8001f2c <moment20+0x194>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc0:	4b5a      	ldr	r3, [pc, #360]	; (8001f2c <moment20+0x194>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	f04f 0400 	mov.w	r4, #0
 8001dd4:	0154      	lsls	r4, r2, #5
 8001dd6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dda:	014b      	lsls	r3, r1, #5
 8001ddc:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <moment20+0x194>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4619      	mov	r1, r3
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	f04f 0400 	mov.w	r4, #0
 8001df0:	0154      	lsls	r4, r2, #5
 8001df2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001df6:	014b      	lsls	r3, r1, #5
 8001df8:	4b4c      	ldr	r3, [pc, #304]	; (8001f2c <moment20+0x194>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	3303      	adds	r3, #3
 8001e00:	3307      	adds	r3, #7
 8001e02:	08db      	lsrs	r3, r3, #3
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	ebad 0d03 	sub.w	sp, sp, r3
 8001e0a:	466b      	mov	r3, sp
 8001e0c:	3303      	adds	r3, #3
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	61bb      	str	r3, [r7, #24]
	float32_t m20[frameSize*2]; // in^2
 8001e14:	4b45      	ldr	r3, [pc, #276]	; (8001f2c <moment20+0x194>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	4b43      	ldr	r3, [pc, #268]	; (8001f2c <moment20+0x194>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4619      	mov	r1, r3
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	f04f 0400 	mov.w	r4, #0
 8001e32:	0154      	lsls	r4, r2, #5
 8001e34:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e38:	014b      	lsls	r3, r1, #5
 8001e3a:	4b3c      	ldr	r3, [pc, #240]	; (8001f2c <moment20+0x194>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4619      	mov	r1, r3
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	f04f 0400 	mov.w	r4, #0
 8001e4e:	0154      	lsls	r4, r2, #5
 8001e50:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e54:	014b      	lsls	r3, r1, #5
 8001e56:	4b35      	ldr	r3, [pc, #212]	; (8001f2c <moment20+0x194>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	3303      	adds	r3, #3
 8001e5e:	3307      	adds	r3, #7
 8001e60:	08db      	lsrs	r3, r3, #3
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	ebad 0d03 	sub.w	sp, sp, r3
 8001e68:	466b      	mov	r3, sp
 8001e6a:	3303      	adds	r3, #3
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	613b      	str	r3, [r7, #16]
	float32_t m20_real = 0, m20_imag = 0, m20_real_mean = 0, m20_imag_mean = 0;
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <moment20+0x194>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	461a      	mov	r2, r3
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f008 ffc1 	bl	800ae1c <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8001e9a:	69b9      	ldr	r1, [r7, #24]
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <moment20+0x194>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f009 fd5e 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8001eac:	e01b      	b.n	8001ee6 <moment20+0x14e>
		m20_real += m20[i];
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	edd3 7a00 	vldr	s15, [r3]
 8001eba:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec2:	edc7 7a07 	vstr	s15, [r7, #28]
		m20_imag += m20[i+1];
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	3301      	adds	r3, #1
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001edc:	edc7 7a08 	vstr	s15, [r7, #32]
	for(int i = 0; i < frameSize*2; i+=2){
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee6:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <moment20+0x194>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	005a      	lsls	r2, r3, #1
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d8dd      	bhi.n	8001eae <moment20+0x116>
	}
	m20_real_mean = m20_real / blockSize;
 8001ef2:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ef6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001efe:	edc7 7a03 	vstr	s15, [r7, #12]
	m20_imag_mean = m20_imag / blockSize;
 8001f02:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f06:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001f0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f0e:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m20_real_mean;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	601a      	str	r2, [r3, #0]
	out[1] = m20_imag_mean;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	46ad      	mov	sp, r5
	//*out = sqrtf(m20_real_mean*m20_real_mean + m20_imag_mean*m20_imag_mean);
}
 8001f22:	bf00      	nop
 8001f24:	3730      	adds	r7, #48	; 0x30
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bdb0      	pop	{r4, r5, r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	0800cf54 	.word	0x0800cf54

08001f30 <moment21>:

void moment21(float32_t in[], float32_t out[]){
 8001f30:	b5b0      	push	{r4, r5, r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	466b      	mov	r3, sp
 8001f3c:	461d      	mov	r5, r3
	float32_t in_conj[frameSize*2];
 8001f3e:	4b55      	ldr	r3, [pc, #340]	; (8002094 <moment21+0x164>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	3b01      	subs	r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	4b52      	ldr	r3, [pc, #328]	; (8002094 <moment21+0x164>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	f04f 0400 	mov.w	r4, #0
 8001f5c:	0154      	lsls	r4, r2, #5
 8001f5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f62:	014b      	lsls	r3, r1, #5
 8001f64:	4b4b      	ldr	r3, [pc, #300]	; (8002094 <moment21+0x164>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	f04f 0400 	mov.w	r4, #0
 8001f78:	0154      	lsls	r4, r2, #5
 8001f7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f7e:	014b      	lsls	r3, r1, #5
 8001f80:	4b44      	ldr	r3, [pc, #272]	; (8002094 <moment21+0x164>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	3303      	adds	r3, #3
 8001f88:	3307      	adds	r3, #7
 8001f8a:	08db      	lsrs	r3, r3, #3
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	ebad 0d03 	sub.w	sp, sp, r3
 8001f92:	466b      	mov	r3, sp
 8001f94:	3303      	adds	r3, #3
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	61bb      	str	r3, [r7, #24]
	float32_t m21[frameSize*2];
 8001f9c:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <moment21+0x164>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	4b3b      	ldr	r3, [pc, #236]	; (8002094 <moment21+0x164>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4619      	mov	r1, r3
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	f04f 0400 	mov.w	r4, #0
 8001fba:	0154      	lsls	r4, r2, #5
 8001fbc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fc0:	014b      	lsls	r3, r1, #5
 8001fc2:	4b34      	ldr	r3, [pc, #208]	; (8002094 <moment21+0x164>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	f04f 0400 	mov.w	r4, #0
 8001fd6:	0154      	lsls	r4, r2, #5
 8001fd8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fdc:	014b      	lsls	r3, r1, #5
 8001fde:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <moment21+0x164>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	3303      	adds	r3, #3
 8001fe6:	3307      	adds	r3, #7
 8001fe8:	08db      	lsrs	r3, r3, #3
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	ebad 0d03 	sub.w	sp, sp, r3
 8001ff0:	466b      	mov	r3, sp
 8001ff2:	3303      	adds	r3, #3
 8001ff4:	089b      	lsrs	r3, r3, #2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	613b      	str	r3, [r7, #16]
	float32_t in_mag[frameSize];
 8001ffa:	4b26      	ldr	r3, [pc, #152]	; (8002094 <moment21+0x164>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b24      	ldr	r3, [pc, #144]	; (8002094 <moment21+0x164>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4619      	mov	r1, r3
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	f04f 0400 	mov.w	r4, #0
 8002014:	0154      	lsls	r4, r2, #5
 8002016:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800201a:	014b      	lsls	r3, r1, #5
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <moment21+0x164>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	f04f 0400 	mov.w	r4, #0
 800202e:	0154      	lsls	r4, r2, #5
 8002030:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002034:	014b      	lsls	r3, r1, #5
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <moment21+0x164>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	3303      	adds	r3, #3
 800203e:	3307      	adds	r3, #7
 8002040:	08db      	lsrs	r3, r3, #3
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	ebad 0d03 	sub.w	sp, sp, r3
 8002048:	466b      	mov	r3, sp
 800204a:	3303      	adds	r3, #3
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	60bb      	str	r3, [r7, #8]
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8002052:	69b9      	ldr	r1, [r7, #24]
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <moment21+0x164>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f009 fe0a 	bl	800bc74 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_conj[0], &m21[0], frameSize);
 8002060:	69b9      	ldr	r1, [r7, #24]
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <moment21+0x164>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f009 fc7b 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mag_f32(&m21[0], &in_mag[0], frameSize);
 800206e:	6938      	ldr	r0, [r7, #16]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <moment21+0x164>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	f009 fd14 	bl	800baa4 <arm_cmplx_mag_f32>
	arm_mean_f32(&in_mag[0], frameSize, out);
 800207c:	68b8      	ldr	r0, [r7, #8]
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <moment21+0x164>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	f008 ffd7 	bl	800b038 <arm_mean_f32>
 800208a:	46ad      	mov	sp, r5
	// Calculating the mean after the absolute value here works because there
	// is no imaginary part in the number M21, different from M20
}
 800208c:	bf00      	nop
 800208e:	3720      	adds	r7, #32
 8002090:	46bd      	mov	sp, r7
 8002092:	bdb0      	pop	{r4, r5, r7, pc}
 8002094:	0800cf54 	.word	0x0800cf54

08002098 <moment22>:

void moment22(float32_t in[], float32_t out[]){
 8002098:	b5b0      	push	{r4, r5, r7, lr}
 800209a:	b08e      	sub	sp, #56	; 0x38
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	466b      	mov	r3, sp
 80020a4:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 80020a6:	4b7c      	ldr	r3, [pc, #496]	; (8002298 <moment22+0x200>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	ee07 3a90 	vmov	s15, r3
 80020ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020b2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float32_t in_conj[frameSize*2];
 80020b6:	4b78      	ldr	r3, [pc, #480]	; (8002298 <moment22+0x200>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	3b01      	subs	r3, #1
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c0:	4b75      	ldr	r3, [pc, #468]	; (8002298 <moment22+0x200>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4619      	mov	r1, r3
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	f04f 0400 	mov.w	r4, #0
 80020d4:	0154      	lsls	r4, r2, #5
 80020d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020da:	014b      	lsls	r3, r1, #5
 80020dc:	4b6e      	ldr	r3, [pc, #440]	; (8002298 <moment22+0x200>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4619      	mov	r1, r3
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	f04f 0400 	mov.w	r4, #0
 80020f0:	0154      	lsls	r4, r2, #5
 80020f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020f6:	014b      	lsls	r3, r1, #5
 80020f8:	4b67      	ldr	r3, [pc, #412]	; (8002298 <moment22+0x200>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	3303      	adds	r3, #3
 8002100:	3307      	adds	r3, #7
 8002102:	08db      	lsrs	r3, r3, #3
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	ebad 0d03 	sub.w	sp, sp, r3
 800210a:	466b      	mov	r3, sp
 800210c:	3303      	adds	r3, #3
 800210e:	089b      	lsrs	r3, r3, #2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	633b      	str	r3, [r7, #48]	; 0x30
	float32_t in_conj_cp[frameSize*2];
 8002114:	4b60      	ldr	r3, [pc, #384]	; (8002298 <moment22+0x200>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	3b01      	subs	r3, #1
 800211c:	637b      	str	r3, [r7, #52]	; 0x34
 800211e:	4b5e      	ldr	r3, [pc, #376]	; (8002298 <moment22+0x200>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4619      	mov	r1, r3
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	f04f 0400 	mov.w	r4, #0
 8002132:	0154      	lsls	r4, r2, #5
 8002134:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002138:	014b      	lsls	r3, r1, #5
 800213a:	4b57      	ldr	r3, [pc, #348]	; (8002298 <moment22+0x200>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4619      	mov	r1, r3
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	f04f 0400 	mov.w	r4, #0
 800214e:	0154      	lsls	r4, r2, #5
 8002150:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002154:	014b      	lsls	r3, r1, #5
 8002156:	4b50      	ldr	r3, [pc, #320]	; (8002298 <moment22+0x200>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	3303      	adds	r3, #3
 800215e:	3307      	adds	r3, #7
 8002160:	08db      	lsrs	r3, r3, #3
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	ebad 0d03 	sub.w	sp, sp, r3
 8002168:	466b      	mov	r3, sp
 800216a:	3303      	adds	r3, #3
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	61bb      	str	r3, [r7, #24]
	float32_t m22[frameSize*2]; // in^2
 8002172:	4b49      	ldr	r3, [pc, #292]	; (8002298 <moment22+0x200>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	3b01      	subs	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	4b46      	ldr	r3, [pc, #280]	; (8002298 <moment22+0x200>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4619      	mov	r1, r3
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	f04f 0400 	mov.w	r4, #0
 8002190:	0154      	lsls	r4, r2, #5
 8002192:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002196:	014b      	lsls	r3, r1, #5
 8002198:	4b3f      	ldr	r3, [pc, #252]	; (8002298 <moment22+0x200>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4619      	mov	r1, r3
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	f04f 0400 	mov.w	r4, #0
 80021ac:	0154      	lsls	r4, r2, #5
 80021ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021b2:	014b      	lsls	r3, r1, #5
 80021b4:	4b38      	ldr	r3, [pc, #224]	; (8002298 <moment22+0x200>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	3303      	adds	r3, #3
 80021bc:	3307      	adds	r3, #7
 80021be:	08db      	lsrs	r3, r3, #3
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	ebad 0d03 	sub.w	sp, sp, r3
 80021c6:	466b      	mov	r3, sp
 80021c8:	3303      	adds	r3, #3
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	613b      	str	r3, [r7, #16]
	float32_t m22_real = 0, m22_imag = 0, m22_real_mean = 0, m22_imag_mean = 0;
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	623b      	str	r3, [r7, #32]
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 80021e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021ea:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <moment22+0x200>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f009 fd3f 	bl	800bc74 <arm_cmplx_conj_f32>
	arm_copy_f32(&in_conj[0], &in_conj_cp[0], frameSize*2);
 80021f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021f8:	69b9      	ldr	r1, [r7, #24]
 80021fa:	4b27      	ldr	r3, [pc, #156]	; (8002298 <moment22+0x200>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	461a      	mov	r2, r3
 8002202:	f008 fe0b 	bl	800ae1c <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in_conj[0], &in_conj_cp[0], &m22[0], frameSize);
 8002206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002208:	69b9      	ldr	r1, [r7, #24]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4b22      	ldr	r3, [pc, #136]	; (8002298 <moment22+0x200>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f009 fba8 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8002214:	2300      	movs	r3, #0
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
 8002218:	e01b      	b.n	8002252 <moment22+0x1ba>
		m22_real += m22[i];
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	ed97 7a07 	vldr	s14, [r7, #28]
 800222a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800222e:	edc7 7a07 	vstr	s15, [r7, #28]
		m22_imag += m22[i+1];
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	3301      	adds	r3, #1
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	ed97 7a08 	vldr	s14, [r7, #32]
 8002244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002248:	edc7 7a08 	vstr	s15, [r7, #32]
	for(int i = 0; i < frameSize*2; i+=2){
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	3302      	adds	r3, #2
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
 8002252:	4b11      	ldr	r3, [pc, #68]	; (8002298 <moment22+0x200>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	005a      	lsls	r2, r3, #1
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	429a      	cmp	r2, r3
 800225c:	d8dd      	bhi.n	800221a <moment22+0x182>
	}
	m22_real_mean = m22_real / blockSize;
 800225e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002262:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800226a:	edc7 7a03 	vstr	s15, [r7, #12]
	m22_imag_mean = m22_imag / blockSize;
 800226e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002272:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800227a:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m22_real_mean;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	601a      	str	r2, [r3, #0]
	out[1] = m22_imag_mean;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	3304      	adds	r3, #4
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	46ad      	mov	sp, r5
	//*out = sqrtf(m22_real_mean*m22_real_mean + m22_imag_mean*m22_imag_mean);
}
 800228e:	bf00      	nop
 8002290:	3738      	adds	r7, #56	; 0x38
 8002292:	46bd      	mov	sp, r7
 8002294:	bdb0      	pop	{r4, r5, r7, pc}
 8002296:	bf00      	nop
 8002298:	0800cf54 	.word	0x0800cf54

0800229c <moment40>:

void moment40(float32_t in[], float32_t out[]){
 800229c:	b5b0      	push	{r4, r5, r7, lr}
 800229e:	b090      	sub	sp, #64	; 0x40
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	466b      	mov	r3, sp
 80022a8:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 80022aa:	4b94      	ldr	r3, [pc, #592]	; (80024fc <moment40+0x260>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	ee07 3a90 	vmov	s15, r3
 80022b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022b6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float32_t in_cp[frameSize*2];
 80022ba:	4b90      	ldr	r3, [pc, #576]	; (80024fc <moment40+0x260>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	3b01      	subs	r3, #1
 80022c2:	637b      	str	r3, [r7, #52]	; 0x34
 80022c4:	4b8d      	ldr	r3, [pc, #564]	; (80024fc <moment40+0x260>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4619      	mov	r1, r3
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	f04f 0400 	mov.w	r4, #0
 80022d8:	0154      	lsls	r4, r2, #5
 80022da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022de:	014b      	lsls	r3, r1, #5
 80022e0:	4b86      	ldr	r3, [pc, #536]	; (80024fc <moment40+0x260>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4619      	mov	r1, r3
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	f04f 0400 	mov.w	r4, #0
 80022f4:	0154      	lsls	r4, r2, #5
 80022f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022fa:	014b      	lsls	r3, r1, #5
 80022fc:	4b7f      	ldr	r3, [pc, #508]	; (80024fc <moment40+0x260>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	3303      	adds	r3, #3
 8002304:	3307      	adds	r3, #7
 8002306:	08db      	lsrs	r3, r3, #3
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	ebad 0d03 	sub.w	sp, sp, r3
 800230e:	466b      	mov	r3, sp
 8002310:	3303      	adds	r3, #3
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t m20[frameSize*2]; // in^2
 8002318:	4b78      	ldr	r3, [pc, #480]	; (80024fc <moment40+0x260>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	3b01      	subs	r3, #1
 8002320:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002322:	4b76      	ldr	r3, [pc, #472]	; (80024fc <moment40+0x260>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4619      	mov	r1, r3
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	f04f 0400 	mov.w	r4, #0
 8002336:	0154      	lsls	r4, r2, #5
 8002338:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800233c:	014b      	lsls	r3, r1, #5
 800233e:	4b6f      	ldr	r3, [pc, #444]	; (80024fc <moment40+0x260>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4619      	mov	r1, r3
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	f04f 0400 	mov.w	r4, #0
 8002352:	0154      	lsls	r4, r2, #5
 8002354:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002358:	014b      	lsls	r3, r1, #5
 800235a:	4b68      	ldr	r3, [pc, #416]	; (80024fc <moment40+0x260>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	3303      	adds	r3, #3
 8002362:	3307      	adds	r3, #7
 8002364:	08db      	lsrs	r3, r3, #3
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	ebad 0d03 	sub.w	sp, sp, r3
 800236c:	466b      	mov	r3, sp
 800236e:	3303      	adds	r3, #3
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	623b      	str	r3, [r7, #32]
	float32_t m30[frameSize]; // in^3
 8002376:	4b61      	ldr	r3, [pc, #388]	; (80024fc <moment40+0x260>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3b01      	subs	r3, #1
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	4b5f      	ldr	r3, [pc, #380]	; (80024fc <moment40+0x260>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4619      	mov	r1, r3
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	f04f 0400 	mov.w	r4, #0
 8002390:	0154      	lsls	r4, r2, #5
 8002392:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002396:	014b      	lsls	r3, r1, #5
 8002398:	4b58      	ldr	r3, [pc, #352]	; (80024fc <moment40+0x260>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	f04f 0400 	mov.w	r4, #0
 80023aa:	0154      	lsls	r4, r2, #5
 80023ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023b0:	014b      	lsls	r3, r1, #5
 80023b2:	4b52      	ldr	r3, [pc, #328]	; (80024fc <moment40+0x260>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	3303      	adds	r3, #3
 80023ba:	3307      	adds	r3, #7
 80023bc:	08db      	lsrs	r3, r3, #3
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	ebad 0d03 	sub.w	sp, sp, r3
 80023c4:	466b      	mov	r3, sp
 80023c6:	3303      	adds	r3, #3
 80023c8:	089b      	lsrs	r3, r3, #2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	61bb      	str	r3, [r7, #24]
	float32_t m40[frameSize]; // in^4
 80023ce:	4b4b      	ldr	r3, [pc, #300]	; (80024fc <moment40+0x260>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	4b49      	ldr	r3, [pc, #292]	; (80024fc <moment40+0x260>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4619      	mov	r1, r3
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	f04f 0400 	mov.w	r4, #0
 80023e8:	0154      	lsls	r4, r2, #5
 80023ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023ee:	014b      	lsls	r3, r1, #5
 80023f0:	4b42      	ldr	r3, [pc, #264]	; (80024fc <moment40+0x260>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	f04f 0400 	mov.w	r4, #0
 8002402:	0154      	lsls	r4, r2, #5
 8002404:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002408:	014b      	lsls	r3, r1, #5
 800240a:	4b3c      	ldr	r3, [pc, #240]	; (80024fc <moment40+0x260>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	3303      	adds	r3, #3
 8002412:	3307      	adds	r3, #7
 8002414:	08db      	lsrs	r3, r3, #3
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	ebad 0d03 	sub.w	sp, sp, r3
 800241c:	466b      	mov	r3, sp
 800241e:	3303      	adds	r3, #3
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	613b      	str	r3, [r7, #16]
	float32_t m40_real = 0.0f, m40_imag = 0.0f;
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t m40_real_mean = 0.0f, m40_imag_mean = 0.0f;
 8002432:	f04f 0300 	mov.w	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 800243e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002440:	4b2e      	ldr	r3, [pc, #184]	; (80024fc <moment40+0x260>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	461a      	mov	r2, r3
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f008 fce7 	bl	800ae1c <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 800244e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002450:	6a3a      	ldr	r2, [r7, #32]
 8002452:	4b2a      	ldr	r3, [pc, #168]	; (80024fc <moment40+0x260>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f009 fa84 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 800245c:	6a38      	ldr	r0, [r7, #32]
 800245e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4b26      	ldr	r3, [pc, #152]	; (80024fc <moment40+0x260>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f009 fa7d 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 800246a:	69b8      	ldr	r0, [r7, #24]
 800246c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4b22      	ldr	r3, [pc, #136]	; (80024fc <moment40+0x260>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f009 fa76 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8002478:	2300      	movs	r3, #0
 800247a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800247c:	e01b      	b.n	80024b6 <moment40+0x21a>
		m40_real += m40[i];
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	edd3 7a00 	vldr	s15, [r3]
 800248a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800248e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002492:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		m40_imag += m40[i+1];
 8002496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002498:	3301      	adds	r3, #1
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80024a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ac:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	for(int i = 0; i < frameSize*2; i+=2){
 80024b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b2:	3302      	adds	r3, #2
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024b6:	4b11      	ldr	r3, [pc, #68]	; (80024fc <moment40+0x260>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	005a      	lsls	r2, r3, #1
 80024bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024be:	429a      	cmp	r2, r3
 80024c0:	d8dd      	bhi.n	800247e <moment40+0x1e2>
	}
	m40_real_mean = m40_real / blockSize;
 80024c2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80024c6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80024ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ce:	edc7 7a03 	vstr	s15, [r7, #12]
	m40_imag_mean = m40_imag / blockSize;
 80024d2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80024d6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80024da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024de:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m40_real_mean;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	601a      	str	r2, [r3, #0]
	out[1] = m40_imag_mean;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	3304      	adds	r3, #4
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	46ad      	mov	sp, r5
	// *out = sqrtf(m40_real_mean*m40_real_mean + m40_imag_mean*m40_imag_mean);
}
 80024f2:	bf00      	nop
 80024f4:	3740      	adds	r7, #64	; 0x40
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bdb0      	pop	{r4, r5, r7, pc}
 80024fa:	bf00      	nop
 80024fc:	0800cf54 	.word	0x0800cf54

08002500 <moment41>:

void moment41(float32_t in[], float32_t out[]){
 8002500:	b5b0      	push	{r4, r5, r7, lr}
 8002502:	b092      	sub	sp, #72	; 0x48
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
 800250a:	466b      	mov	r3, sp
 800250c:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 800250e:	4baf      	ldr	r3, [pc, #700]	; (80027cc <moment41+0x2cc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	ee07 3a90 	vmov	s15, r3
 8002516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800251a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float32_t in_cp[frameSize*2];
 800251e:	4bab      	ldr	r3, [pc, #684]	; (80027cc <moment41+0x2cc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	3b01      	subs	r3, #1
 8002526:	637b      	str	r3, [r7, #52]	; 0x34
 8002528:	4ba8      	ldr	r3, [pc, #672]	; (80027cc <moment41+0x2cc>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4619      	mov	r1, r3
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	f04f 0400 	mov.w	r4, #0
 800253c:	0154      	lsls	r4, r2, #5
 800253e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002542:	014b      	lsls	r3, r1, #5
 8002544:	4ba1      	ldr	r3, [pc, #644]	; (80027cc <moment41+0x2cc>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4619      	mov	r1, r3
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	f04f 0400 	mov.w	r4, #0
 8002558:	0154      	lsls	r4, r2, #5
 800255a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800255e:	014b      	lsls	r3, r1, #5
 8002560:	4b9a      	ldr	r3, [pc, #616]	; (80027cc <moment41+0x2cc>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	3303      	adds	r3, #3
 8002568:	3307      	adds	r3, #7
 800256a:	08db      	lsrs	r3, r3, #3
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	ebad 0d03 	sub.w	sp, sp, r3
 8002572:	466b      	mov	r3, sp
 8002574:	3303      	adds	r3, #3
 8002576:	089b      	lsrs	r3, r3, #2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t in_conj[frameSize*2];
 800257c:	4b93      	ldr	r3, [pc, #588]	; (80027cc <moment41+0x2cc>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	3b01      	subs	r3, #1
 8002584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002586:	4b91      	ldr	r3, [pc, #580]	; (80027cc <moment41+0x2cc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4619      	mov	r1, r3
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	f04f 0400 	mov.w	r4, #0
 800259a:	0154      	lsls	r4, r2, #5
 800259c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025a0:	014b      	lsls	r3, r1, #5
 80025a2:	4b8a      	ldr	r3, [pc, #552]	; (80027cc <moment41+0x2cc>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4619      	mov	r1, r3
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	f04f 0400 	mov.w	r4, #0
 80025b6:	0154      	lsls	r4, r2, #5
 80025b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025bc:	014b      	lsls	r3, r1, #5
 80025be:	4b83      	ldr	r3, [pc, #524]	; (80027cc <moment41+0x2cc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	3303      	adds	r3, #3
 80025c6:	3307      	adds	r3, #7
 80025c8:	08db      	lsrs	r3, r3, #3
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	ebad 0d03 	sub.w	sp, sp, r3
 80025d0:	466b      	mov	r3, sp
 80025d2:	3303      	adds	r3, #3
 80025d4:	089b      	lsrs	r3, r3, #2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m20[frameSize*2]; // in^2
 80025da:	4b7c      	ldr	r3, [pc, #496]	; (80027cc <moment41+0x2cc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	3b01      	subs	r3, #1
 80025e2:	647b      	str	r3, [r7, #68]	; 0x44
 80025e4:	4b79      	ldr	r3, [pc, #484]	; (80027cc <moment41+0x2cc>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	4619      	mov	r1, r3
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	f04f 0400 	mov.w	r4, #0
 80025f8:	0154      	lsls	r4, r2, #5
 80025fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025fe:	014b      	lsls	r3, r1, #5
 8002600:	4b72      	ldr	r3, [pc, #456]	; (80027cc <moment41+0x2cc>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4619      	mov	r1, r3
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	f04f 0400 	mov.w	r4, #0
 8002614:	0154      	lsls	r4, r2, #5
 8002616:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800261a:	014b      	lsls	r3, r1, #5
 800261c:	4b6b      	ldr	r3, [pc, #428]	; (80027cc <moment41+0x2cc>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	3303      	adds	r3, #3
 8002624:	3307      	adds	r3, #7
 8002626:	08db      	lsrs	r3, r3, #3
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	ebad 0d03 	sub.w	sp, sp, r3
 800262e:	466b      	mov	r3, sp
 8002630:	3303      	adds	r3, #3
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	623b      	str	r3, [r7, #32]
	float32_t m30[frameSize]; // in^3
 8002638:	4b64      	ldr	r3, [pc, #400]	; (80027cc <moment41+0x2cc>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	3b01      	subs	r3, #1
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	4b62      	ldr	r3, [pc, #392]	; (80027cc <moment41+0x2cc>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4619      	mov	r1, r3
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	f04f 0400 	mov.w	r4, #0
 8002652:	0154      	lsls	r4, r2, #5
 8002654:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002658:	014b      	lsls	r3, r1, #5
 800265a:	4b5c      	ldr	r3, [pc, #368]	; (80027cc <moment41+0x2cc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4619      	mov	r1, r3
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	f04f 0400 	mov.w	r4, #0
 800266c:	0154      	lsls	r4, r2, #5
 800266e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002672:	014b      	lsls	r3, r1, #5
 8002674:	4b55      	ldr	r3, [pc, #340]	; (80027cc <moment41+0x2cc>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	3303      	adds	r3, #3
 800267c:	3307      	adds	r3, #7
 800267e:	08db      	lsrs	r3, r3, #3
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	ebad 0d03 	sub.w	sp, sp, r3
 8002686:	466b      	mov	r3, sp
 8002688:	3303      	adds	r3, #3
 800268a:	089b      	lsrs	r3, r3, #2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	61bb      	str	r3, [r7, #24]
	float32_t m41[frameSize]; // in^4
 8002690:	4b4e      	ldr	r3, [pc, #312]	; (80027cc <moment41+0x2cc>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	3b01      	subs	r3, #1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	4b4c      	ldr	r3, [pc, #304]	; (80027cc <moment41+0x2cc>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	f04f 0400 	mov.w	r4, #0
 80026aa:	0154      	lsls	r4, r2, #5
 80026ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026b0:	014b      	lsls	r3, r1, #5
 80026b2:	4b46      	ldr	r3, [pc, #280]	; (80027cc <moment41+0x2cc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4619      	mov	r1, r3
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	f04f 0400 	mov.w	r4, #0
 80026c4:	0154      	lsls	r4, r2, #5
 80026c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026ca:	014b      	lsls	r3, r1, #5
 80026cc:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <moment41+0x2cc>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	3303      	adds	r3, #3
 80026d4:	3307      	adds	r3, #7
 80026d6:	08db      	lsrs	r3, r3, #3
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	ebad 0d03 	sub.w	sp, sp, r3
 80026de:	466b      	mov	r3, sp
 80026e0:	3303      	adds	r3, #3
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	613b      	str	r3, [r7, #16]
	float32_t m41_real = 0.0f, m41_imag = 0.0f;
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t m41_real_mean = 0.0f, m41_imag_mean = 0.0f;
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8002700:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002702:	4b32      	ldr	r3, [pc, #200]	; (80027cc <moment41+0x2cc>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	461a      	mov	r2, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f008 fb86 	bl	800ae1c <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8002710:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002712:	4b2e      	ldr	r3, [pc, #184]	; (80027cc <moment41+0x2cc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f009 faab 	bl	800bc74 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 800271e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002720:	6a3a      	ldr	r2, [r7, #32]
 8002722:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <moment41+0x2cc>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f009 f91c 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 800272c:	6a38      	ldr	r0, [r7, #32]
 800272e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4b26      	ldr	r3, [pc, #152]	; (80027cc <moment41+0x2cc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f009 f915 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_conj[0], &m41[0], frameSize);
 800273a:	69b8      	ldr	r0, [r7, #24]
 800273c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4b22      	ldr	r3, [pc, #136]	; (80027cc <moment41+0x2cc>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f009 f90e 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8002748:	2300      	movs	r3, #0
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800274c:	e01b      	b.n	8002786 <moment41+0x286>
		m41_real += m41[i];
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	edd3 7a00 	vldr	s15, [r3]
 800275a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800275e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002762:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		m41_imag += m41[i+1];
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	3301      	adds	r3, #1
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	edd3 7a00 	vldr	s15, [r3]
 8002774:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	for(int i = 0; i < frameSize*2; i+=2){
 8002780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002782:	3302      	adds	r3, #2
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002786:	4b11      	ldr	r3, [pc, #68]	; (80027cc <moment41+0x2cc>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	005a      	lsls	r2, r3, #1
 800278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278e:	429a      	cmp	r2, r3
 8002790:	d8dd      	bhi.n	800274e <moment41+0x24e>
	}
	m41_real_mean = m41_real / blockSize;
 8002792:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002796:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800279a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800279e:	edc7 7a03 	vstr	s15, [r7, #12]
	m41_imag_mean = m41_imag / blockSize;
 80027a2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80027a6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80027aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ae:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m41_real_mean;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	601a      	str	r2, [r3, #0]
	out[1] = m41_imag_mean;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	3304      	adds	r3, #4
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	46ad      	mov	sp, r5
	// *out = sqrtf(m41_real_mean*m41_real_mean + m41_imag_mean*m41_imag_mean);
}
 80027c2:	bf00      	nop
 80027c4:	3748      	adds	r7, #72	; 0x48
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bdb0      	pop	{r4, r5, r7, pc}
 80027ca:	bf00      	nop
 80027cc:	0800cf54 	.word	0x0800cf54

080027d0 <moment42>:

void moment42(float32_t in[], float32_t out[]){
 80027d0:	b5b0      	push	{r4, r5, r7, lr}
 80027d2:	b092      	sub	sp, #72	; 0x48
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
 80027da:	466b      	mov	r3, sp
 80027dc:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 80027de:	4baf      	ldr	r3, [pc, #700]	; (8002a9c <moment42+0x2cc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	ee07 3a90 	vmov	s15, r3
 80027e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ea:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float32_t in_cp[frameSize*2];
 80027ee:	4bab      	ldr	r3, [pc, #684]	; (8002a9c <moment42+0x2cc>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	3b01      	subs	r3, #1
 80027f6:	637b      	str	r3, [r7, #52]	; 0x34
 80027f8:	4ba8      	ldr	r3, [pc, #672]	; (8002a9c <moment42+0x2cc>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4619      	mov	r1, r3
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	f04f 0400 	mov.w	r4, #0
 800280c:	0154      	lsls	r4, r2, #5
 800280e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002812:	014b      	lsls	r3, r1, #5
 8002814:	4ba1      	ldr	r3, [pc, #644]	; (8002a9c <moment42+0x2cc>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4619      	mov	r1, r3
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	f04f 0400 	mov.w	r4, #0
 8002828:	0154      	lsls	r4, r2, #5
 800282a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800282e:	014b      	lsls	r3, r1, #5
 8002830:	4b9a      	ldr	r3, [pc, #616]	; (8002a9c <moment42+0x2cc>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	3303      	adds	r3, #3
 8002838:	3307      	adds	r3, #7
 800283a:	08db      	lsrs	r3, r3, #3
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	ebad 0d03 	sub.w	sp, sp, r3
 8002842:	466b      	mov	r3, sp
 8002844:	3303      	adds	r3, #3
 8002846:	089b      	lsrs	r3, r3, #2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t in_conj[frameSize*2];
 800284c:	4b93      	ldr	r3, [pc, #588]	; (8002a9c <moment42+0x2cc>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	3b01      	subs	r3, #1
 8002854:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002856:	4b91      	ldr	r3, [pc, #580]	; (8002a9c <moment42+0x2cc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4619      	mov	r1, r3
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	f04f 0400 	mov.w	r4, #0
 800286a:	0154      	lsls	r4, r2, #5
 800286c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002870:	014b      	lsls	r3, r1, #5
 8002872:	4b8a      	ldr	r3, [pc, #552]	; (8002a9c <moment42+0x2cc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4619      	mov	r1, r3
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	f04f 0400 	mov.w	r4, #0
 8002886:	0154      	lsls	r4, r2, #5
 8002888:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800288c:	014b      	lsls	r3, r1, #5
 800288e:	4b83      	ldr	r3, [pc, #524]	; (8002a9c <moment42+0x2cc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	3303      	adds	r3, #3
 8002896:	3307      	adds	r3, #7
 8002898:	08db      	lsrs	r3, r3, #3
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	ebad 0d03 	sub.w	sp, sp, r3
 80028a0:	466b      	mov	r3, sp
 80028a2:	3303      	adds	r3, #3
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m20[frameSize*2]; // in^2
 80028aa:	4b7c      	ldr	r3, [pc, #496]	; (8002a9c <moment42+0x2cc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	3b01      	subs	r3, #1
 80028b2:	647b      	str	r3, [r7, #68]	; 0x44
 80028b4:	4b79      	ldr	r3, [pc, #484]	; (8002a9c <moment42+0x2cc>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4619      	mov	r1, r3
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	f04f 0400 	mov.w	r4, #0
 80028c8:	0154      	lsls	r4, r2, #5
 80028ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028ce:	014b      	lsls	r3, r1, #5
 80028d0:	4b72      	ldr	r3, [pc, #456]	; (8002a9c <moment42+0x2cc>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4619      	mov	r1, r3
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	f04f 0400 	mov.w	r4, #0
 80028e4:	0154      	lsls	r4, r2, #5
 80028e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028ea:	014b      	lsls	r3, r1, #5
 80028ec:	4b6b      	ldr	r3, [pc, #428]	; (8002a9c <moment42+0x2cc>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	3303      	adds	r3, #3
 80028f4:	3307      	adds	r3, #7
 80028f6:	08db      	lsrs	r3, r3, #3
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	ebad 0d03 	sub.w	sp, sp, r3
 80028fe:	466b      	mov	r3, sp
 8002900:	3303      	adds	r3, #3
 8002902:	089b      	lsrs	r3, r3, #2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	623b      	str	r3, [r7, #32]
	float32_t m31[frameSize]; // in^3
 8002908:	4b64      	ldr	r3, [pc, #400]	; (8002a9c <moment42+0x2cc>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3b01      	subs	r3, #1
 800290e:	61fb      	str	r3, [r7, #28]
 8002910:	4b62      	ldr	r3, [pc, #392]	; (8002a9c <moment42+0x2cc>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4619      	mov	r1, r3
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	f04f 0400 	mov.w	r4, #0
 8002922:	0154      	lsls	r4, r2, #5
 8002924:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002928:	014b      	lsls	r3, r1, #5
 800292a:	4b5c      	ldr	r3, [pc, #368]	; (8002a9c <moment42+0x2cc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4619      	mov	r1, r3
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	f04f 0400 	mov.w	r4, #0
 800293c:	0154      	lsls	r4, r2, #5
 800293e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002942:	014b      	lsls	r3, r1, #5
 8002944:	4b55      	ldr	r3, [pc, #340]	; (8002a9c <moment42+0x2cc>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	3303      	adds	r3, #3
 800294c:	3307      	adds	r3, #7
 800294e:	08db      	lsrs	r3, r3, #3
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	ebad 0d03 	sub.w	sp, sp, r3
 8002956:	466b      	mov	r3, sp
 8002958:	3303      	adds	r3, #3
 800295a:	089b      	lsrs	r3, r3, #2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	61bb      	str	r3, [r7, #24]
	float32_t m42[frameSize]; // in^4
 8002960:	4b4e      	ldr	r3, [pc, #312]	; (8002a9c <moment42+0x2cc>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3b01      	subs	r3, #1
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	4b4c      	ldr	r3, [pc, #304]	; (8002a9c <moment42+0x2cc>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4619      	mov	r1, r3
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	f04f 0400 	mov.w	r4, #0
 800297a:	0154      	lsls	r4, r2, #5
 800297c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002980:	014b      	lsls	r3, r1, #5
 8002982:	4b46      	ldr	r3, [pc, #280]	; (8002a9c <moment42+0x2cc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4619      	mov	r1, r3
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	f04f 0400 	mov.w	r4, #0
 8002994:	0154      	lsls	r4, r2, #5
 8002996:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800299a:	014b      	lsls	r3, r1, #5
 800299c:	4b3f      	ldr	r3, [pc, #252]	; (8002a9c <moment42+0x2cc>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	3303      	adds	r3, #3
 80029a4:	3307      	adds	r3, #7
 80029a6:	08db      	lsrs	r3, r3, #3
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	ebad 0d03 	sub.w	sp, sp, r3
 80029ae:	466b      	mov	r3, sp
 80029b0:	3303      	adds	r3, #3
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	613b      	str	r3, [r7, #16]
	float32_t m42_real = 0.0f, m42_imag = 0.0f;
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t m42_real_mean = 0.0f, m42_imag_mean = 0.0f;
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 80029d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029d2:	4b32      	ldr	r3, [pc, #200]	; (8002a9c <moment42+0x2cc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	461a      	mov	r2, r3
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f008 fa1e 	bl	800ae1c <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 80029e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029e2:	4b2e      	ldr	r3, [pc, #184]	; (8002a9c <moment42+0x2cc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f009 f943 	bl	800bc74 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 80029ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029f0:	6a3a      	ldr	r2, [r7, #32]
 80029f2:	4b2a      	ldr	r3, [pc, #168]	; (8002a9c <moment42+0x2cc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f008 ffb4 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_conj[0], &m31[0], frameSize);
 80029fc:	6a38      	ldr	r0, [r7, #32]
 80029fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <moment42+0x2cc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f008 ffad 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m31[0], &in_conj[0], &m42[0], frameSize);
 8002a0a:	69b8      	ldr	r0, [r7, #24]
 8002a0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <moment42+0x2cc>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f008 ffa6 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8002a18:	2300      	movs	r3, #0
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1c:	e01b      	b.n	8002a56 <moment42+0x286>
		m42_real += m42[i];
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	edd3 7a00 	vldr	s15, [r3]
 8002a2a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a32:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		m42_imag += m42[i+1];
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a38:	3301      	adds	r3, #1
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	edd3 7a00 	vldr	s15, [r3]
 8002a44:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a4c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	for(int i = 0; i < frameSize*2; i+=2){
 8002a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a52:	3302      	adds	r3, #2
 8002a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a56:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <moment42+0x2cc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	005a      	lsls	r2, r3, #1
 8002a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d8dd      	bhi.n	8002a1e <moment42+0x24e>
	}
	m42_real_mean = m42_real / blockSize;
 8002a62:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002a66:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a6e:	edc7 7a03 	vstr	s15, [r7, #12]
	m42_imag_mean = m42_imag / blockSize;
 8002a72:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002a76:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a7e:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m42_real_mean;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	601a      	str	r2, [r3, #0]
	out[1] = m42_imag_mean;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	46ad      	mov	sp, r5
	// *out = sqrtf(m42_real_mean*m42_real_mean + m42_imag_mean*m42_imag_mean);
}
 8002a92:	bf00      	nop
 8002a94:	3748      	adds	r7, #72	; 0x48
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bdb0      	pop	{r4, r5, r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	0800cf54 	.word	0x0800cf54

08002aa0 <moment43>:

void moment43(float32_t in[], float32_t out[]){
 8002aa0:	b5b0      	push	{r4, r5, r7, lr}
 8002aa2:	b092      	sub	sp, #72	; 0x48
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	466b      	mov	r3, sp
 8002aac:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 8002aae:	4baf      	ldr	r3, [pc, #700]	; (8002d6c <moment43+0x2cc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	ee07 3a90 	vmov	s15, r3
 8002ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aba:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float32_t in_cp[frameSize*2];
 8002abe:	4bab      	ldr	r3, [pc, #684]	; (8002d6c <moment43+0x2cc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ac8:	4ba8      	ldr	r3, [pc, #672]	; (8002d6c <moment43+0x2cc>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	f04f 0400 	mov.w	r4, #0
 8002adc:	0154      	lsls	r4, r2, #5
 8002ade:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ae2:	014b      	lsls	r3, r1, #5
 8002ae4:	4ba1      	ldr	r3, [pc, #644]	; (8002d6c <moment43+0x2cc>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4619      	mov	r1, r3
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	f04f 0400 	mov.w	r4, #0
 8002af8:	0154      	lsls	r4, r2, #5
 8002afa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002afe:	014b      	lsls	r3, r1, #5
 8002b00:	4b9a      	ldr	r3, [pc, #616]	; (8002d6c <moment43+0x2cc>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	3303      	adds	r3, #3
 8002b08:	3307      	adds	r3, #7
 8002b0a:	08db      	lsrs	r3, r3, #3
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	ebad 0d03 	sub.w	sp, sp, r3
 8002b12:	466b      	mov	r3, sp
 8002b14:	3303      	adds	r3, #3
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t in_conj[frameSize*2];
 8002b1c:	4b93      	ldr	r3, [pc, #588]	; (8002d6c <moment43+0x2cc>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	3b01      	subs	r3, #1
 8002b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b26:	4b91      	ldr	r3, [pc, #580]	; (8002d6c <moment43+0x2cc>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	f04f 0400 	mov.w	r4, #0
 8002b3a:	0154      	lsls	r4, r2, #5
 8002b3c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b40:	014b      	lsls	r3, r1, #5
 8002b42:	4b8a      	ldr	r3, [pc, #552]	; (8002d6c <moment43+0x2cc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	f04f 0400 	mov.w	r4, #0
 8002b56:	0154      	lsls	r4, r2, #5
 8002b58:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b5c:	014b      	lsls	r3, r1, #5
 8002b5e:	4b83      	ldr	r3, [pc, #524]	; (8002d6c <moment43+0x2cc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	3303      	adds	r3, #3
 8002b66:	3307      	adds	r3, #7
 8002b68:	08db      	lsrs	r3, r3, #3
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	ebad 0d03 	sub.w	sp, sp, r3
 8002b70:	466b      	mov	r3, sp
 8002b72:	3303      	adds	r3, #3
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m21[frameSize*2]; // in^2
 8002b7a:	4b7c      	ldr	r3, [pc, #496]	; (8002d6c <moment43+0x2cc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	3b01      	subs	r3, #1
 8002b82:	647b      	str	r3, [r7, #68]	; 0x44
 8002b84:	4b79      	ldr	r3, [pc, #484]	; (8002d6c <moment43+0x2cc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	f04f 0400 	mov.w	r4, #0
 8002b98:	0154      	lsls	r4, r2, #5
 8002b9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b9e:	014b      	lsls	r3, r1, #5
 8002ba0:	4b72      	ldr	r3, [pc, #456]	; (8002d6c <moment43+0x2cc>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	f04f 0400 	mov.w	r4, #0
 8002bb4:	0154      	lsls	r4, r2, #5
 8002bb6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bba:	014b      	lsls	r3, r1, #5
 8002bbc:	4b6b      	ldr	r3, [pc, #428]	; (8002d6c <moment43+0x2cc>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	3303      	adds	r3, #3
 8002bc4:	3307      	adds	r3, #7
 8002bc6:	08db      	lsrs	r3, r3, #3
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	ebad 0d03 	sub.w	sp, sp, r3
 8002bce:	466b      	mov	r3, sp
 8002bd0:	3303      	adds	r3, #3
 8002bd2:	089b      	lsrs	r3, r3, #2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	623b      	str	r3, [r7, #32]
	float32_t m32[frameSize]; // in^3
 8002bd8:	4b64      	ldr	r3, [pc, #400]	; (8002d6c <moment43+0x2cc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	4b62      	ldr	r3, [pc, #392]	; (8002d6c <moment43+0x2cc>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4619      	mov	r1, r3
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	f04f 0400 	mov.w	r4, #0
 8002bf2:	0154      	lsls	r4, r2, #5
 8002bf4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bf8:	014b      	lsls	r3, r1, #5
 8002bfa:	4b5c      	ldr	r3, [pc, #368]	; (8002d6c <moment43+0x2cc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	f04f 0400 	mov.w	r4, #0
 8002c0c:	0154      	lsls	r4, r2, #5
 8002c0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c12:	014b      	lsls	r3, r1, #5
 8002c14:	4b55      	ldr	r3, [pc, #340]	; (8002d6c <moment43+0x2cc>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	3303      	adds	r3, #3
 8002c1c:	3307      	adds	r3, #7
 8002c1e:	08db      	lsrs	r3, r3, #3
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	ebad 0d03 	sub.w	sp, sp, r3
 8002c26:	466b      	mov	r3, sp
 8002c28:	3303      	adds	r3, #3
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	61bb      	str	r3, [r7, #24]
	float32_t m43[frameSize]; // in^4
 8002c30:	4b4e      	ldr	r3, [pc, #312]	; (8002d6c <moment43+0x2cc>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	4b4c      	ldr	r3, [pc, #304]	; (8002d6c <moment43+0x2cc>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	f04f 0400 	mov.w	r4, #0
 8002c4a:	0154      	lsls	r4, r2, #5
 8002c4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c50:	014b      	lsls	r3, r1, #5
 8002c52:	4b46      	ldr	r3, [pc, #280]	; (8002d6c <moment43+0x2cc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4619      	mov	r1, r3
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	f04f 0400 	mov.w	r4, #0
 8002c64:	0154      	lsls	r4, r2, #5
 8002c66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c6a:	014b      	lsls	r3, r1, #5
 8002c6c:	4b3f      	ldr	r3, [pc, #252]	; (8002d6c <moment43+0x2cc>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	3303      	adds	r3, #3
 8002c74:	3307      	adds	r3, #7
 8002c76:	08db      	lsrs	r3, r3, #3
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	ebad 0d03 	sub.w	sp, sp, r3
 8002c7e:	466b      	mov	r3, sp
 8002c80:	3303      	adds	r3, #3
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	613b      	str	r3, [r7, #16]
	float32_t m43_real = 0.0f, m43_imag = 0.0f;
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t m43_real_mean = 0.0f, m43_imag_mean = 0.0f;
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8002ca0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ca2:	4b32      	ldr	r3, [pc, #200]	; (8002d6c <moment43+0x2cc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	461a      	mov	r2, r3
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f008 f8b6 	bl	800ae1c <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8002cb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cb2:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <moment43+0x2cc>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f008 ffdb 	bl	800bc74 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_conj[0], &m21[0], frameSize);
 8002cbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cc0:	6a3a      	ldr	r2, [r7, #32]
 8002cc2:	4b2a      	ldr	r3, [pc, #168]	; (8002d6c <moment43+0x2cc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f008 fe4c 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m21[0], &in_conj[0], &m32[0], frameSize);
 8002ccc:	6a38      	ldr	r0, [r7, #32]
 8002cce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4b26      	ldr	r3, [pc, #152]	; (8002d6c <moment43+0x2cc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f008 fe45 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m32[0], &in_conj[0], &m43[0], frameSize);
 8002cda:	69b8      	ldr	r0, [r7, #24]
 8002cdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <moment43+0x2cc>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f008 fe3e 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8002ce8:	2300      	movs	r3, #0
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cec:	e01b      	b.n	8002d26 <moment43+0x286>
		m43_real += m43[i];
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	edd3 7a00 	vldr	s15, [r3]
 8002cfa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d02:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		m43_imag += m43[i+1];
 8002d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d08:	3301      	adds	r3, #1
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	edd3 7a00 	vldr	s15, [r3]
 8002d14:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d1c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	for(int i = 0; i < frameSize*2; i+=2){
 8002d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d22:	3302      	adds	r3, #2
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <moment43+0x2cc>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	005a      	lsls	r2, r3, #1
 8002d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d8dd      	bhi.n	8002cee <moment43+0x24e>
	}
	m43_real_mean = m43_real / blockSize;
 8002d32:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002d36:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d3e:	edc7 7a03 	vstr	s15, [r7, #12]
	m43_imag_mean = m43_imag / blockSize;
 8002d42:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002d46:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d4e:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m43_real_mean;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	601a      	str	r2, [r3, #0]
	out[1] = m43_imag_mean;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	46ad      	mov	sp, r5
	// *out = sqrtf(m43_real_mean*m43_real_mean + m43_imag_mean*m43_imag_mean);
}
 8002d62:	bf00      	nop
 8002d64:	3748      	adds	r7, #72	; 0x48
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bdb0      	pop	{r4, r5, r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	0800cf54 	.word	0x0800cf54

08002d70 <moment60>:

void moment60(float32_t in[], float32_t out[]){
 8002d70:	b5b0      	push	{r4, r5, r7, lr}
 8002d72:	b094      	sub	sp, #80	; 0x50
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
 8002d7a:	466b      	mov	r3, sp
 8002d7c:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 8002d7e:	4ba8      	ldr	r3, [pc, #672]	; (8003020 <moment60+0x2b0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	ee07 3a90 	vmov	s15, r3
 8002d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d8a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float32_t in_cp[frameSize*2];
 8002d8e:	4ba4      	ldr	r3, [pc, #656]	; (8003020 <moment60+0x2b0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	3b01      	subs	r3, #1
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34
 8002d98:	4ba1      	ldr	r3, [pc, #644]	; (8003020 <moment60+0x2b0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4619      	mov	r1, r3
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	f04f 0400 	mov.w	r4, #0
 8002dac:	0154      	lsls	r4, r2, #5
 8002dae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002db2:	014b      	lsls	r3, r1, #5
 8002db4:	4b9a      	ldr	r3, [pc, #616]	; (8003020 <moment60+0x2b0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4619      	mov	r1, r3
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	f04f 0400 	mov.w	r4, #0
 8002dc8:	0154      	lsls	r4, r2, #5
 8002dca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002dce:	014b      	lsls	r3, r1, #5
 8002dd0:	4b93      	ldr	r3, [pc, #588]	; (8003020 <moment60+0x2b0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	3303      	adds	r3, #3
 8002dd8:	3307      	adds	r3, #7
 8002dda:	08db      	lsrs	r3, r3, #3
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	ebad 0d03 	sub.w	sp, sp, r3
 8002de2:	466b      	mov	r3, sp
 8002de4:	3303      	adds	r3, #3
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t m20[frameSize*2]; // in^2
 8002dec:	4b8c      	ldr	r3, [pc, #560]	; (8003020 <moment60+0x2b0>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	3b01      	subs	r3, #1
 8002df4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df6:	4b8a      	ldr	r3, [pc, #552]	; (8003020 <moment60+0x2b0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	f04f 0400 	mov.w	r4, #0
 8002e0a:	0154      	lsls	r4, r2, #5
 8002e0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e10:	014b      	lsls	r3, r1, #5
 8002e12:	4b83      	ldr	r3, [pc, #524]	; (8003020 <moment60+0x2b0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	f04f 0400 	mov.w	r4, #0
 8002e26:	0154      	lsls	r4, r2, #5
 8002e28:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e2c:	014b      	lsls	r3, r1, #5
 8002e2e:	4b7c      	ldr	r3, [pc, #496]	; (8003020 <moment60+0x2b0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	3303      	adds	r3, #3
 8002e36:	3307      	adds	r3, #7
 8002e38:	08db      	lsrs	r3, r3, #3
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	ebad 0d03 	sub.w	sp, sp, r3
 8002e40:	466b      	mov	r3, sp
 8002e42:	3303      	adds	r3, #3
 8002e44:	089b      	lsrs	r3, r3, #2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m30[frameSize]; // in^3
 8002e4a:	4b75      	ldr	r3, [pc, #468]	; (8003020 <moment60+0x2b0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	647b      	str	r3, [r7, #68]	; 0x44
 8002e52:	4b73      	ldr	r3, [pc, #460]	; (8003020 <moment60+0x2b0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4619      	mov	r1, r3
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	f04f 0400 	mov.w	r4, #0
 8002e64:	0154      	lsls	r4, r2, #5
 8002e66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e6a:	014b      	lsls	r3, r1, #5
 8002e6c:	4b6c      	ldr	r3, [pc, #432]	; (8003020 <moment60+0x2b0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4619      	mov	r1, r3
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	f04f 0400 	mov.w	r4, #0
 8002e7e:	0154      	lsls	r4, r2, #5
 8002e80:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e84:	014b      	lsls	r3, r1, #5
 8002e86:	4b66      	ldr	r3, [pc, #408]	; (8003020 <moment60+0x2b0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	3303      	adds	r3, #3
 8002e8e:	3307      	adds	r3, #7
 8002e90:	08db      	lsrs	r3, r3, #3
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	ebad 0d03 	sub.w	sp, sp, r3
 8002e98:	466b      	mov	r3, sp
 8002e9a:	3303      	adds	r3, #3
 8002e9c:	089b      	lsrs	r3, r3, #2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t m40[frameSize]; // in^4
 8002ea2:	4b5f      	ldr	r3, [pc, #380]	; (8003020 <moment60+0x2b0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eaa:	4b5d      	ldr	r3, [pc, #372]	; (8003020 <moment60+0x2b0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	f04f 0400 	mov.w	r4, #0
 8002ebc:	0154      	lsls	r4, r2, #5
 8002ebe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ec2:	014b      	lsls	r3, r1, #5
 8002ec4:	4b56      	ldr	r3, [pc, #344]	; (8003020 <moment60+0x2b0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	f04f 0400 	mov.w	r4, #0
 8002ed6:	0154      	lsls	r4, r2, #5
 8002ed8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002edc:	014b      	lsls	r3, r1, #5
 8002ede:	4b50      	ldr	r3, [pc, #320]	; (8003020 <moment60+0x2b0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	3303      	adds	r3, #3
 8002ee6:	3307      	adds	r3, #7
 8002ee8:	08db      	lsrs	r3, r3, #3
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	ebad 0d03 	sub.w	sp, sp, r3
 8002ef0:	466b      	mov	r3, sp
 8002ef2:	3303      	adds	r3, #3
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	623b      	str	r3, [r7, #32]
	float32_t m50[frameSize]; // in^5
 8002efa:	4b49      	ldr	r3, [pc, #292]	; (8003020 <moment60+0x2b0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	4b47      	ldr	r3, [pc, #284]	; (8003020 <moment60+0x2b0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4619      	mov	r1, r3
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	f04f 0400 	mov.w	r4, #0
 8002f14:	0154      	lsls	r4, r2, #5
 8002f16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f1a:	014b      	lsls	r3, r1, #5
 8002f1c:	4b40      	ldr	r3, [pc, #256]	; (8003020 <moment60+0x2b0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4619      	mov	r1, r3
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	f04f 0400 	mov.w	r4, #0
 8002f2e:	0154      	lsls	r4, r2, #5
 8002f30:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f34:	014b      	lsls	r3, r1, #5
 8002f36:	4b3a      	ldr	r3, [pc, #232]	; (8003020 <moment60+0x2b0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	3303      	adds	r3, #3
 8002f3e:	3307      	adds	r3, #7
 8002f40:	08db      	lsrs	r3, r3, #3
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	ebad 0d03 	sub.w	sp, sp, r3
 8002f48:	466b      	mov	r3, sp
 8002f4a:	3303      	adds	r3, #3
 8002f4c:	089b      	lsrs	r3, r3, #2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	61bb      	str	r3, [r7, #24]
	float32_t m60[frameSize]; // in^6
 8002f52:	4b33      	ldr	r3, [pc, #204]	; (8003020 <moment60+0x2b0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	4b31      	ldr	r3, [pc, #196]	; (8003020 <moment60+0x2b0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4619      	mov	r1, r3
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	f04f 0400 	mov.w	r4, #0
 8002f6c:	0154      	lsls	r4, r2, #5
 8002f6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f72:	014b      	lsls	r3, r1, #5
 8002f74:	4b2a      	ldr	r3, [pc, #168]	; (8003020 <moment60+0x2b0>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	f04f 0400 	mov.w	r4, #0
 8002f86:	0154      	lsls	r4, r2, #5
 8002f88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f8c:	014b      	lsls	r3, r1, #5
 8002f8e:	4b24      	ldr	r3, [pc, #144]	; (8003020 <moment60+0x2b0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	3303      	adds	r3, #3
 8002f96:	3307      	adds	r3, #7
 8002f98:	08db      	lsrs	r3, r3, #3
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	ebad 0d03 	sub.w	sp, sp, r3
 8002fa0:	466b      	mov	r3, sp
 8002fa2:	3303      	adds	r3, #3
 8002fa4:	089b      	lsrs	r3, r3, #2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	613b      	str	r3, [r7, #16]
	float32_t m60_real = 0.0f, m60_imag = 0.0f;
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t m60_real_mean = 0.0f, m60_imag_mean = 0.0f;
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8002fc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fc4:	4b16      	ldr	r3, [pc, #88]	; (8003020 <moment60+0x2b0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	461a      	mov	r2, r3
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f007 ff25 	bl	800ae1c <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8002fd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fd6:	4b12      	ldr	r3, [pc, #72]	; (8003020 <moment60+0x2b0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f008 fcc2 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8002fe0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002fe2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fe6:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <moment60+0x2b0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f008 fcbb 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 8002fee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002ff0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ff2:	6a3a      	ldr	r2, [r7, #32]
 8002ff4:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <moment60+0x2b0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f008 fcb4 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m40[0], &in_cp[0], &m50[0], frameSize);
 8002ffc:	6a38      	ldr	r0, [r7, #32]
 8002ffe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4b07      	ldr	r3, [pc, #28]	; (8003020 <moment60+0x2b0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f008 fcad 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m50[0], &in_cp[0], &m60[0], frameSize);
 800300a:	69b8      	ldr	r0, [r7, #24]
 800300c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4b03      	ldr	r3, [pc, #12]	; (8003020 <moment60+0x2b0>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f008 fca6 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8003018:	2300      	movs	r3, #0
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800301c:	e01e      	b.n	800305c <moment60+0x2ec>
 800301e:	bf00      	nop
 8003020:	0800cf54 	.word	0x0800cf54
		m60_real += m60[i];
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	edd3 7a00 	vldr	s15, [r3]
 8003030:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003038:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		m60_imag += m60[i+1];
 800303c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303e:	3301      	adds	r3, #1
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	edd3 7a00 	vldr	s15, [r3]
 800304a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800304e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003052:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	for(int i = 0; i < frameSize*2; i+=2){
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	3302      	adds	r3, #2
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800305c:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <moment60+0x330>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	005a      	lsls	r2, r3, #1
 8003062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003064:	429a      	cmp	r2, r3
 8003066:	d8dd      	bhi.n	8003024 <moment60+0x2b4>
	}
	m60_real_mean = m60_real / blockSize;
 8003068:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800306c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003074:	edc7 7a03 	vstr	s15, [r7, #12]
	m60_imag_mean = m60_imag / blockSize;
 8003078:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800307c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003084:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m60_real_mean;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	601a      	str	r2, [r3, #0]
	out[1] = m60_imag_mean;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	3304      	adds	r3, #4
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	46ad      	mov	sp, r5
	// *out = sqrtf(m60_real_mean*m60_real_mean + m60_imag_mean*m60_imag_mean);
}
 8003098:	bf00      	nop
 800309a:	3750      	adds	r7, #80	; 0x50
 800309c:	46bd      	mov	sp, r7
 800309e:	bdb0      	pop	{r4, r5, r7, pc}
 80030a0:	0800cf54 	.word	0x0800cf54

080030a4 <moment61>:

void moment61(float32_t in[], float32_t out[]){
 80030a4:	b5b0      	push	{r4, r5, r7, lr}
 80030a6:	b096      	sub	sp, #88	; 0x58
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
 80030ae:	466b      	mov	r3, sp
 80030b0:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 80030b2:	4bc3      	ldr	r3, [pc, #780]	; (80033c0 <moment61+0x31c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030be:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float32_t in_cp[frameSize*2];
 80030c2:	4bbf      	ldr	r3, [pc, #764]	; (80033c0 <moment61+0x31c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	3b01      	subs	r3, #1
 80030ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80030cc:	4bbc      	ldr	r3, [pc, #752]	; (80033c0 <moment61+0x31c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4619      	mov	r1, r3
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	f04f 0400 	mov.w	r4, #0
 80030e0:	0154      	lsls	r4, r2, #5
 80030e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030e6:	014b      	lsls	r3, r1, #5
 80030e8:	4bb5      	ldr	r3, [pc, #724]	; (80033c0 <moment61+0x31c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4619      	mov	r1, r3
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	f04f 0400 	mov.w	r4, #0
 80030fc:	0154      	lsls	r4, r2, #5
 80030fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003102:	014b      	lsls	r3, r1, #5
 8003104:	4bae      	ldr	r3, [pc, #696]	; (80033c0 <moment61+0x31c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	3303      	adds	r3, #3
 800310c:	3307      	adds	r3, #7
 800310e:	08db      	lsrs	r3, r3, #3
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	ebad 0d03 	sub.w	sp, sp, r3
 8003116:	466b      	mov	r3, sp
 8003118:	3303      	adds	r3, #3
 800311a:	089b      	lsrs	r3, r3, #2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	63fb      	str	r3, [r7, #60]	; 0x3c
	float32_t in_conj[frameSize*2];
 8003120:	4ba7      	ldr	r3, [pc, #668]	; (80033c0 <moment61+0x31c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	3b01      	subs	r3, #1
 8003128:	643b      	str	r3, [r7, #64]	; 0x40
 800312a:	4ba5      	ldr	r3, [pc, #660]	; (80033c0 <moment61+0x31c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	4619      	mov	r1, r3
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	f04f 0400 	mov.w	r4, #0
 800313e:	0154      	lsls	r4, r2, #5
 8003140:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003144:	014b      	lsls	r3, r1, #5
 8003146:	4b9e      	ldr	r3, [pc, #632]	; (80033c0 <moment61+0x31c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4619      	mov	r1, r3
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	f04f 0400 	mov.w	r4, #0
 800315a:	0154      	lsls	r4, r2, #5
 800315c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003160:	014b      	lsls	r3, r1, #5
 8003162:	4b97      	ldr	r3, [pc, #604]	; (80033c0 <moment61+0x31c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	3303      	adds	r3, #3
 800316a:	3307      	adds	r3, #7
 800316c:	08db      	lsrs	r3, r3, #3
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	ebad 0d03 	sub.w	sp, sp, r3
 8003174:	466b      	mov	r3, sp
 8003176:	3303      	adds	r3, #3
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	647b      	str	r3, [r7, #68]	; 0x44
	float32_t m20[frameSize*2]; // in^2
 800317e:	4b90      	ldr	r3, [pc, #576]	; (80033c0 <moment61+0x31c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	3b01      	subs	r3, #1
 8003186:	64bb      	str	r3, [r7, #72]	; 0x48
 8003188:	4b8d      	ldr	r3, [pc, #564]	; (80033c0 <moment61+0x31c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4619      	mov	r1, r3
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	f04f 0400 	mov.w	r4, #0
 800319c:	0154      	lsls	r4, r2, #5
 800319e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031a2:	014b      	lsls	r3, r1, #5
 80031a4:	4b86      	ldr	r3, [pc, #536]	; (80033c0 <moment61+0x31c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4619      	mov	r1, r3
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	f04f 0400 	mov.w	r4, #0
 80031b8:	0154      	lsls	r4, r2, #5
 80031ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031be:	014b      	lsls	r3, r1, #5
 80031c0:	4b7f      	ldr	r3, [pc, #508]	; (80033c0 <moment61+0x31c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	3303      	adds	r3, #3
 80031c8:	3307      	adds	r3, #7
 80031ca:	08db      	lsrs	r3, r3, #3
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	ebad 0d03 	sub.w	sp, sp, r3
 80031d2:	466b      	mov	r3, sp
 80031d4:	3303      	adds	r3, #3
 80031d6:	089b      	lsrs	r3, r3, #2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	64fb      	str	r3, [r7, #76]	; 0x4c
	float32_t m30[frameSize]; // in^3
 80031dc:	4b78      	ldr	r3, [pc, #480]	; (80033c0 <moment61+0x31c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	653b      	str	r3, [r7, #80]	; 0x50
 80031e4:	4b76      	ldr	r3, [pc, #472]	; (80033c0 <moment61+0x31c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4619      	mov	r1, r3
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	f04f 0400 	mov.w	r4, #0
 80031f6:	0154      	lsls	r4, r2, #5
 80031f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031fc:	014b      	lsls	r3, r1, #5
 80031fe:	4b70      	ldr	r3, [pc, #448]	; (80033c0 <moment61+0x31c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4619      	mov	r1, r3
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	f04f 0400 	mov.w	r4, #0
 8003210:	0154      	lsls	r4, r2, #5
 8003212:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003216:	014b      	lsls	r3, r1, #5
 8003218:	4b69      	ldr	r3, [pc, #420]	; (80033c0 <moment61+0x31c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	3303      	adds	r3, #3
 8003220:	3307      	adds	r3, #7
 8003222:	08db      	lsrs	r3, r3, #3
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	ebad 0d03 	sub.w	sp, sp, r3
 800322a:	466b      	mov	r3, sp
 800322c:	3303      	adds	r3, #3
 800322e:	089b      	lsrs	r3, r3, #2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	657b      	str	r3, [r7, #84]	; 0x54
	float32_t m40[frameSize]; // in^4
 8003234:	4b62      	ldr	r3, [pc, #392]	; (80033c0 <moment61+0x31c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3b01      	subs	r3, #1
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
 800323c:	4b60      	ldr	r3, [pc, #384]	; (80033c0 <moment61+0x31c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4619      	mov	r1, r3
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	f04f 0400 	mov.w	r4, #0
 800324e:	0154      	lsls	r4, r2, #5
 8003250:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003254:	014b      	lsls	r3, r1, #5
 8003256:	4b5a      	ldr	r3, [pc, #360]	; (80033c0 <moment61+0x31c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4619      	mov	r1, r3
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	f04f 0400 	mov.w	r4, #0
 8003268:	0154      	lsls	r4, r2, #5
 800326a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800326e:	014b      	lsls	r3, r1, #5
 8003270:	4b53      	ldr	r3, [pc, #332]	; (80033c0 <moment61+0x31c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	3303      	adds	r3, #3
 8003278:	3307      	adds	r3, #7
 800327a:	08db      	lsrs	r3, r3, #3
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	ebad 0d03 	sub.w	sp, sp, r3
 8003282:	466b      	mov	r3, sp
 8003284:	3303      	adds	r3, #3
 8003286:	089b      	lsrs	r3, r3, #2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	623b      	str	r3, [r7, #32]
	float32_t m50[frameSize]; // in^5
 800328c:	4b4c      	ldr	r3, [pc, #304]	; (80033c0 <moment61+0x31c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3b01      	subs	r3, #1
 8003292:	61fb      	str	r3, [r7, #28]
 8003294:	4b4a      	ldr	r3, [pc, #296]	; (80033c0 <moment61+0x31c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4619      	mov	r1, r3
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	f04f 0400 	mov.w	r4, #0
 80032a6:	0154      	lsls	r4, r2, #5
 80032a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032ac:	014b      	lsls	r3, r1, #5
 80032ae:	4b44      	ldr	r3, [pc, #272]	; (80033c0 <moment61+0x31c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4619      	mov	r1, r3
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	f04f 0400 	mov.w	r4, #0
 80032c0:	0154      	lsls	r4, r2, #5
 80032c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032c6:	014b      	lsls	r3, r1, #5
 80032c8:	4b3d      	ldr	r3, [pc, #244]	; (80033c0 <moment61+0x31c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	3303      	adds	r3, #3
 80032d0:	3307      	adds	r3, #7
 80032d2:	08db      	lsrs	r3, r3, #3
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	ebad 0d03 	sub.w	sp, sp, r3
 80032da:	466b      	mov	r3, sp
 80032dc:	3303      	adds	r3, #3
 80032de:	089b      	lsrs	r3, r3, #2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	61bb      	str	r3, [r7, #24]
	float32_t m61[frameSize]; // in^6
 80032e4:	4b36      	ldr	r3, [pc, #216]	; (80033c0 <moment61+0x31c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	4b34      	ldr	r3, [pc, #208]	; (80033c0 <moment61+0x31c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4619      	mov	r1, r3
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	f04f 0400 	mov.w	r4, #0
 80032fe:	0154      	lsls	r4, r2, #5
 8003300:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003304:	014b      	lsls	r3, r1, #5
 8003306:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <moment61+0x31c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4619      	mov	r1, r3
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	f04f 0400 	mov.w	r4, #0
 8003318:	0154      	lsls	r4, r2, #5
 800331a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800331e:	014b      	lsls	r3, r1, #5
 8003320:	4b27      	ldr	r3, [pc, #156]	; (80033c0 <moment61+0x31c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	3303      	adds	r3, #3
 8003328:	3307      	adds	r3, #7
 800332a:	08db      	lsrs	r3, r3, #3
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	ebad 0d03 	sub.w	sp, sp, r3
 8003332:	466b      	mov	r3, sp
 8003334:	3303      	adds	r3, #3
 8003336:	089b      	lsrs	r3, r3, #2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	613b      	str	r3, [r7, #16]
	float32_t m61_real = 0.0f, m61_imag = 0.0f;
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	62bb      	str	r3, [r7, #40]	; 0x28
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t m61_real_mean = 0.0f, m61_imag_mean = 0.0f;
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8003354:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003356:	4b1a      	ldr	r3, [pc, #104]	; (80033c0 <moment61+0x31c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	461a      	mov	r2, r3
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f007 fd5c 	bl	800ae1c <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8003364:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003366:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <moment61+0x31c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f008 fc81 	bl	800bc74 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8003372:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003374:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003376:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <moment61+0x31c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f008 faf2 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8003380:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003382:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003384:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003386:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <moment61+0x31c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f008 faeb 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 800338e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003390:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003392:	6a3a      	ldr	r2, [r7, #32]
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <moment61+0x31c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f008 fae4 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m40[0], &in_cp[0], &m50[0], frameSize);
 800339c:	6a38      	ldr	r0, [r7, #32]
 800339e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <moment61+0x31c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f008 fadd 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m50[0], &in_conj[0], &m61[0], frameSize);
 80033aa:	69b8      	ldr	r0, [r7, #24]
 80033ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <moment61+0x31c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f008 fad6 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 80033b8:	2300      	movs	r3, #0
 80033ba:	633b      	str	r3, [r7, #48]	; 0x30
 80033bc:	e01e      	b.n	80033fc <moment61+0x358>
 80033be:	bf00      	nop
 80033c0:	0800cf54 	.word	0x0800cf54
		m61_real += m61[i];
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	edd3 7a00 	vldr	s15, [r3]
 80033d0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80033d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		m61_imag += m61[i+1];
 80033dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033de:	3301      	adds	r3, #1
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	edd3 7a00 	vldr	s15, [r3]
 80033ea:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80033ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i < frameSize*2; i+=2){
 80033f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f8:	3302      	adds	r3, #2
 80033fa:	633b      	str	r3, [r7, #48]	; 0x30
 80033fc:	4b10      	ldr	r3, [pc, #64]	; (8003440 <moment61+0x39c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	005a      	lsls	r2, r3, #1
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	429a      	cmp	r2, r3
 8003406:	d8dd      	bhi.n	80033c4 <moment61+0x320>
	}
	m61_real_mean = m61_real / blockSize;
 8003408:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800340c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003414:	edc7 7a03 	vstr	s15, [r7, #12]
	m61_imag_mean = m61_imag / blockSize;
 8003418:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800341c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003424:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m61_real_mean;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	601a      	str	r2, [r3, #0]
	out[1] = m61_imag_mean;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	3304      	adds	r3, #4
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	46ad      	mov	sp, r5
	// *out = sqrtf(m61_real_mean*m61_real_mean + m61_imag_mean*m61_imag_mean);
}
 8003438:	bf00      	nop
 800343a:	3758      	adds	r7, #88	; 0x58
 800343c:	46bd      	mov	sp, r7
 800343e:	bdb0      	pop	{r4, r5, r7, pc}
 8003440:	0800cf54 	.word	0x0800cf54

08003444 <moment62>:

void moment62(float32_t in[], float32_t out[]){
 8003444:	b5b0      	push	{r4, r5, r7, lr}
 8003446:	b096      	sub	sp, #88	; 0x58
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
 800344e:	466b      	mov	r3, sp
 8003450:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 8003452:	4bc3      	ldr	r3, [pc, #780]	; (8003760 <moment62+0x31c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800345e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float32_t in_cp[frameSize*2];
 8003462:	4bbf      	ldr	r3, [pc, #764]	; (8003760 <moment62+0x31c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	3b01      	subs	r3, #1
 800346a:	63bb      	str	r3, [r7, #56]	; 0x38
 800346c:	4bbc      	ldr	r3, [pc, #752]	; (8003760 <moment62+0x31c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4619      	mov	r1, r3
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	f04f 0400 	mov.w	r4, #0
 8003480:	0154      	lsls	r4, r2, #5
 8003482:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003486:	014b      	lsls	r3, r1, #5
 8003488:	4bb5      	ldr	r3, [pc, #724]	; (8003760 <moment62+0x31c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4619      	mov	r1, r3
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	f04f 0400 	mov.w	r4, #0
 800349c:	0154      	lsls	r4, r2, #5
 800349e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034a2:	014b      	lsls	r3, r1, #5
 80034a4:	4bae      	ldr	r3, [pc, #696]	; (8003760 <moment62+0x31c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	3303      	adds	r3, #3
 80034ac:	3307      	adds	r3, #7
 80034ae:	08db      	lsrs	r3, r3, #3
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	ebad 0d03 	sub.w	sp, sp, r3
 80034b6:	466b      	mov	r3, sp
 80034b8:	3303      	adds	r3, #3
 80034ba:	089b      	lsrs	r3, r3, #2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	63fb      	str	r3, [r7, #60]	; 0x3c
	float32_t in_conj[frameSize*2];
 80034c0:	4ba7      	ldr	r3, [pc, #668]	; (8003760 <moment62+0x31c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	3b01      	subs	r3, #1
 80034c8:	643b      	str	r3, [r7, #64]	; 0x40
 80034ca:	4ba5      	ldr	r3, [pc, #660]	; (8003760 <moment62+0x31c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	4619      	mov	r1, r3
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	f04f 0400 	mov.w	r4, #0
 80034de:	0154      	lsls	r4, r2, #5
 80034e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034e4:	014b      	lsls	r3, r1, #5
 80034e6:	4b9e      	ldr	r3, [pc, #632]	; (8003760 <moment62+0x31c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4619      	mov	r1, r3
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	f04f 0400 	mov.w	r4, #0
 80034fa:	0154      	lsls	r4, r2, #5
 80034fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003500:	014b      	lsls	r3, r1, #5
 8003502:	4b97      	ldr	r3, [pc, #604]	; (8003760 <moment62+0x31c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	3303      	adds	r3, #3
 800350a:	3307      	adds	r3, #7
 800350c:	08db      	lsrs	r3, r3, #3
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	ebad 0d03 	sub.w	sp, sp, r3
 8003514:	466b      	mov	r3, sp
 8003516:	3303      	adds	r3, #3
 8003518:	089b      	lsrs	r3, r3, #2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	647b      	str	r3, [r7, #68]	; 0x44
	float32_t m20[frameSize*2]; // in^2
 800351e:	4b90      	ldr	r3, [pc, #576]	; (8003760 <moment62+0x31c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	3b01      	subs	r3, #1
 8003526:	64bb      	str	r3, [r7, #72]	; 0x48
 8003528:	4b8d      	ldr	r3, [pc, #564]	; (8003760 <moment62+0x31c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4619      	mov	r1, r3
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	f04f 0400 	mov.w	r4, #0
 800353c:	0154      	lsls	r4, r2, #5
 800353e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003542:	014b      	lsls	r3, r1, #5
 8003544:	4b86      	ldr	r3, [pc, #536]	; (8003760 <moment62+0x31c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	4619      	mov	r1, r3
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	f04f 0400 	mov.w	r4, #0
 8003558:	0154      	lsls	r4, r2, #5
 800355a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800355e:	014b      	lsls	r3, r1, #5
 8003560:	4b7f      	ldr	r3, [pc, #508]	; (8003760 <moment62+0x31c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	3303      	adds	r3, #3
 8003568:	3307      	adds	r3, #7
 800356a:	08db      	lsrs	r3, r3, #3
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	ebad 0d03 	sub.w	sp, sp, r3
 8003572:	466b      	mov	r3, sp
 8003574:	3303      	adds	r3, #3
 8003576:	089b      	lsrs	r3, r3, #2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	64fb      	str	r3, [r7, #76]	; 0x4c
	float32_t m30[frameSize]; // in^3
 800357c:	4b78      	ldr	r3, [pc, #480]	; (8003760 <moment62+0x31c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3b01      	subs	r3, #1
 8003582:	653b      	str	r3, [r7, #80]	; 0x50
 8003584:	4b76      	ldr	r3, [pc, #472]	; (8003760 <moment62+0x31c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4619      	mov	r1, r3
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	f04f 0400 	mov.w	r4, #0
 8003596:	0154      	lsls	r4, r2, #5
 8003598:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800359c:	014b      	lsls	r3, r1, #5
 800359e:	4b70      	ldr	r3, [pc, #448]	; (8003760 <moment62+0x31c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4619      	mov	r1, r3
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	f04f 0400 	mov.w	r4, #0
 80035b0:	0154      	lsls	r4, r2, #5
 80035b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035b6:	014b      	lsls	r3, r1, #5
 80035b8:	4b69      	ldr	r3, [pc, #420]	; (8003760 <moment62+0x31c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	3303      	adds	r3, #3
 80035c0:	3307      	adds	r3, #7
 80035c2:	08db      	lsrs	r3, r3, #3
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	ebad 0d03 	sub.w	sp, sp, r3
 80035ca:	466b      	mov	r3, sp
 80035cc:	3303      	adds	r3, #3
 80035ce:	089b      	lsrs	r3, r3, #2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	657b      	str	r3, [r7, #84]	; 0x54
	float32_t m40[frameSize]; // in^4
 80035d4:	4b62      	ldr	r3, [pc, #392]	; (8003760 <moment62+0x31c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3b01      	subs	r3, #1
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
 80035dc:	4b60      	ldr	r3, [pc, #384]	; (8003760 <moment62+0x31c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4619      	mov	r1, r3
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	f04f 0400 	mov.w	r4, #0
 80035ee:	0154      	lsls	r4, r2, #5
 80035f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035f4:	014b      	lsls	r3, r1, #5
 80035f6:	4b5a      	ldr	r3, [pc, #360]	; (8003760 <moment62+0x31c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4619      	mov	r1, r3
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	f04f 0400 	mov.w	r4, #0
 8003608:	0154      	lsls	r4, r2, #5
 800360a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800360e:	014b      	lsls	r3, r1, #5
 8003610:	4b53      	ldr	r3, [pc, #332]	; (8003760 <moment62+0x31c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	3303      	adds	r3, #3
 8003618:	3307      	adds	r3, #7
 800361a:	08db      	lsrs	r3, r3, #3
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	ebad 0d03 	sub.w	sp, sp, r3
 8003622:	466b      	mov	r3, sp
 8003624:	3303      	adds	r3, #3
 8003626:	089b      	lsrs	r3, r3, #2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	623b      	str	r3, [r7, #32]
	float32_t m51[frameSize]; // in^5
 800362c:	4b4c      	ldr	r3, [pc, #304]	; (8003760 <moment62+0x31c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3b01      	subs	r3, #1
 8003632:	61fb      	str	r3, [r7, #28]
 8003634:	4b4a      	ldr	r3, [pc, #296]	; (8003760 <moment62+0x31c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4619      	mov	r1, r3
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	f04f 0400 	mov.w	r4, #0
 8003646:	0154      	lsls	r4, r2, #5
 8003648:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800364c:	014b      	lsls	r3, r1, #5
 800364e:	4b44      	ldr	r3, [pc, #272]	; (8003760 <moment62+0x31c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4619      	mov	r1, r3
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	f04f 0400 	mov.w	r4, #0
 8003660:	0154      	lsls	r4, r2, #5
 8003662:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003666:	014b      	lsls	r3, r1, #5
 8003668:	4b3d      	ldr	r3, [pc, #244]	; (8003760 <moment62+0x31c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	3303      	adds	r3, #3
 8003670:	3307      	adds	r3, #7
 8003672:	08db      	lsrs	r3, r3, #3
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	ebad 0d03 	sub.w	sp, sp, r3
 800367a:	466b      	mov	r3, sp
 800367c:	3303      	adds	r3, #3
 800367e:	089b      	lsrs	r3, r3, #2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	61bb      	str	r3, [r7, #24]
	float32_t m62[frameSize]; // in^6
 8003684:	4b36      	ldr	r3, [pc, #216]	; (8003760 <moment62+0x31c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3b01      	subs	r3, #1
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	4b34      	ldr	r3, [pc, #208]	; (8003760 <moment62+0x31c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4619      	mov	r1, r3
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	f04f 0400 	mov.w	r4, #0
 800369e:	0154      	lsls	r4, r2, #5
 80036a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036a4:	014b      	lsls	r3, r1, #5
 80036a6:	4b2e      	ldr	r3, [pc, #184]	; (8003760 <moment62+0x31c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4619      	mov	r1, r3
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	f04f 0400 	mov.w	r4, #0
 80036b8:	0154      	lsls	r4, r2, #5
 80036ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036be:	014b      	lsls	r3, r1, #5
 80036c0:	4b27      	ldr	r3, [pc, #156]	; (8003760 <moment62+0x31c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	3303      	adds	r3, #3
 80036c8:	3307      	adds	r3, #7
 80036ca:	08db      	lsrs	r3, r3, #3
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	ebad 0d03 	sub.w	sp, sp, r3
 80036d2:	466b      	mov	r3, sp
 80036d4:	3303      	adds	r3, #3
 80036d6:	089b      	lsrs	r3, r3, #2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	613b      	str	r3, [r7, #16]
	float32_t m62_real = 0.0f, m62_imag = 0.0f;
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t m62_real_mean = 0.0f, m62_imag_mean = 0.0f;
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 80036f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036f6:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <moment62+0x31c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	461a      	mov	r2, r3
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f007 fb8c 	bl	800ae1c <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8003704:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003706:	4b16      	ldr	r3, [pc, #88]	; (8003760 <moment62+0x31c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f008 fab1 	bl	800bc74 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8003712:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003714:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003716:	4b12      	ldr	r3, [pc, #72]	; (8003760 <moment62+0x31c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f008 f922 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8003720:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003722:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003724:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003726:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <moment62+0x31c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f008 f91b 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 800372e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003730:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003732:	6a3a      	ldr	r2, [r7, #32]
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <moment62+0x31c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f008 f914 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m40[0], &in_conj[0], &m51[0], frameSize);
 800373c:	6a38      	ldr	r0, [r7, #32]
 800373e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4b07      	ldr	r3, [pc, #28]	; (8003760 <moment62+0x31c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f008 f90d 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m51[0], &in_conj[0], &m62[0], frameSize);
 800374a:	69b8      	ldr	r0, [r7, #24]
 800374c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <moment62+0x31c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f008 f906 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8003758:	2300      	movs	r3, #0
 800375a:	633b      	str	r3, [r7, #48]	; 0x30
 800375c:	e01e      	b.n	800379c <moment62+0x358>
 800375e:	bf00      	nop
 8003760:	0800cf54 	.word	0x0800cf54
		m62_real += m62[i];
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	edd3 7a00 	vldr	s15, [r3]
 8003770:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003778:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		m62_imag += m62[i+1];
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	3301      	adds	r3, #1
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	edd3 7a00 	vldr	s15, [r3]
 800378a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800378e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003792:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i < frameSize*2; i+=2){
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	3302      	adds	r3, #2
 800379a:	633b      	str	r3, [r7, #48]	; 0x30
 800379c:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <moment62+0x39c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	005a      	lsls	r2, r3, #1
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d8dd      	bhi.n	8003764 <moment62+0x320>
	}
	m62_real_mean = m62_real / blockSize;
 80037a8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80037ac:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80037b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037b4:	edc7 7a03 	vstr	s15, [r7, #12]
	m62_imag_mean = m62_imag / blockSize;
 80037b8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80037bc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80037c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037c4:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m62_real_mean;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	601a      	str	r2, [r3, #0]
	out[1] = m62_imag_mean;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	3304      	adds	r3, #4
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	46ad      	mov	sp, r5
	// *out = sqrtf(m62_real_mean*m62_real_mean + m62_imag_mean*m62_imag_mean);
}
 80037d8:	bf00      	nop
 80037da:	3758      	adds	r7, #88	; 0x58
 80037dc:	46bd      	mov	sp, r7
 80037de:	bdb0      	pop	{r4, r5, r7, pc}
 80037e0:	0800cf54 	.word	0x0800cf54

080037e4 <moment63>:

void moment63(float32_t in[], float32_t out[]){
 80037e4:	b5b0      	push	{r4, r5, r7, lr}
 80037e6:	b096      	sub	sp, #88	; 0x58
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
 80037ee:	466b      	mov	r3, sp
 80037f0:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 80037f2:	4bc3      	ldr	r3, [pc, #780]	; (8003b00 <moment63+0x31c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	ee07 3a90 	vmov	s15, r3
 80037fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037fe:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float32_t in_cp[frameSize*2];
 8003802:	4bbf      	ldr	r3, [pc, #764]	; (8003b00 <moment63+0x31c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	3b01      	subs	r3, #1
 800380a:	63bb      	str	r3, [r7, #56]	; 0x38
 800380c:	4bbc      	ldr	r3, [pc, #752]	; (8003b00 <moment63+0x31c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	4619      	mov	r1, r3
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	f04f 0400 	mov.w	r4, #0
 8003820:	0154      	lsls	r4, r2, #5
 8003822:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003826:	014b      	lsls	r3, r1, #5
 8003828:	4bb5      	ldr	r3, [pc, #724]	; (8003b00 <moment63+0x31c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	4619      	mov	r1, r3
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	f04f 0400 	mov.w	r4, #0
 800383c:	0154      	lsls	r4, r2, #5
 800383e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003842:	014b      	lsls	r3, r1, #5
 8003844:	4bae      	ldr	r3, [pc, #696]	; (8003b00 <moment63+0x31c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	3303      	adds	r3, #3
 800384c:	3307      	adds	r3, #7
 800384e:	08db      	lsrs	r3, r3, #3
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	ebad 0d03 	sub.w	sp, sp, r3
 8003856:	466b      	mov	r3, sp
 8003858:	3303      	adds	r3, #3
 800385a:	089b      	lsrs	r3, r3, #2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	63fb      	str	r3, [r7, #60]	; 0x3c
	float32_t in_conj[frameSize*2];
 8003860:	4ba7      	ldr	r3, [pc, #668]	; (8003b00 <moment63+0x31c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	3b01      	subs	r3, #1
 8003868:	643b      	str	r3, [r7, #64]	; 0x40
 800386a:	4ba5      	ldr	r3, [pc, #660]	; (8003b00 <moment63+0x31c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	4619      	mov	r1, r3
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	f04f 0400 	mov.w	r4, #0
 800387e:	0154      	lsls	r4, r2, #5
 8003880:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003884:	014b      	lsls	r3, r1, #5
 8003886:	4b9e      	ldr	r3, [pc, #632]	; (8003b00 <moment63+0x31c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	4619      	mov	r1, r3
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	f04f 0400 	mov.w	r4, #0
 800389a:	0154      	lsls	r4, r2, #5
 800389c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038a0:	014b      	lsls	r3, r1, #5
 80038a2:	4b97      	ldr	r3, [pc, #604]	; (8003b00 <moment63+0x31c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	3303      	adds	r3, #3
 80038aa:	3307      	adds	r3, #7
 80038ac:	08db      	lsrs	r3, r3, #3
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	ebad 0d03 	sub.w	sp, sp, r3
 80038b4:	466b      	mov	r3, sp
 80038b6:	3303      	adds	r3, #3
 80038b8:	089b      	lsrs	r3, r3, #2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	647b      	str	r3, [r7, #68]	; 0x44
	float32_t m20[frameSize*2]; // in^2
 80038be:	4b90      	ldr	r3, [pc, #576]	; (8003b00 <moment63+0x31c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	3b01      	subs	r3, #1
 80038c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038c8:	4b8d      	ldr	r3, [pc, #564]	; (8003b00 <moment63+0x31c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4619      	mov	r1, r3
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	f04f 0400 	mov.w	r4, #0
 80038dc:	0154      	lsls	r4, r2, #5
 80038de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038e2:	014b      	lsls	r3, r1, #5
 80038e4:	4b86      	ldr	r3, [pc, #536]	; (8003b00 <moment63+0x31c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	4619      	mov	r1, r3
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	f04f 0400 	mov.w	r4, #0
 80038f8:	0154      	lsls	r4, r2, #5
 80038fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038fe:	014b      	lsls	r3, r1, #5
 8003900:	4b7f      	ldr	r3, [pc, #508]	; (8003b00 <moment63+0x31c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	3303      	adds	r3, #3
 8003908:	3307      	adds	r3, #7
 800390a:	08db      	lsrs	r3, r3, #3
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	ebad 0d03 	sub.w	sp, sp, r3
 8003912:	466b      	mov	r3, sp
 8003914:	3303      	adds	r3, #3
 8003916:	089b      	lsrs	r3, r3, #2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	64fb      	str	r3, [r7, #76]	; 0x4c
	float32_t m30[frameSize]; // in^3
 800391c:	4b78      	ldr	r3, [pc, #480]	; (8003b00 <moment63+0x31c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3b01      	subs	r3, #1
 8003922:	653b      	str	r3, [r7, #80]	; 0x50
 8003924:	4b76      	ldr	r3, [pc, #472]	; (8003b00 <moment63+0x31c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4619      	mov	r1, r3
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	f04f 0400 	mov.w	r4, #0
 8003936:	0154      	lsls	r4, r2, #5
 8003938:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800393c:	014b      	lsls	r3, r1, #5
 800393e:	4b70      	ldr	r3, [pc, #448]	; (8003b00 <moment63+0x31c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4619      	mov	r1, r3
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	f04f 0400 	mov.w	r4, #0
 8003950:	0154      	lsls	r4, r2, #5
 8003952:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003956:	014b      	lsls	r3, r1, #5
 8003958:	4b69      	ldr	r3, [pc, #420]	; (8003b00 <moment63+0x31c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	3303      	adds	r3, #3
 8003960:	3307      	adds	r3, #7
 8003962:	08db      	lsrs	r3, r3, #3
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	ebad 0d03 	sub.w	sp, sp, r3
 800396a:	466b      	mov	r3, sp
 800396c:	3303      	adds	r3, #3
 800396e:	089b      	lsrs	r3, r3, #2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	657b      	str	r3, [r7, #84]	; 0x54
	float32_t m41[frameSize]; // in^4
 8003974:	4b62      	ldr	r3, [pc, #392]	; (8003b00 <moment63+0x31c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3b01      	subs	r3, #1
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
 800397c:	4b60      	ldr	r3, [pc, #384]	; (8003b00 <moment63+0x31c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4619      	mov	r1, r3
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	f04f 0400 	mov.w	r4, #0
 800398e:	0154      	lsls	r4, r2, #5
 8003990:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003994:	014b      	lsls	r3, r1, #5
 8003996:	4b5a      	ldr	r3, [pc, #360]	; (8003b00 <moment63+0x31c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4619      	mov	r1, r3
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	f04f 0400 	mov.w	r4, #0
 80039a8:	0154      	lsls	r4, r2, #5
 80039aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039ae:	014b      	lsls	r3, r1, #5
 80039b0:	4b53      	ldr	r3, [pc, #332]	; (8003b00 <moment63+0x31c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	3303      	adds	r3, #3
 80039b8:	3307      	adds	r3, #7
 80039ba:	08db      	lsrs	r3, r3, #3
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	ebad 0d03 	sub.w	sp, sp, r3
 80039c2:	466b      	mov	r3, sp
 80039c4:	3303      	adds	r3, #3
 80039c6:	089b      	lsrs	r3, r3, #2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	623b      	str	r3, [r7, #32]
	float32_t m52[frameSize]; // in^5
 80039cc:	4b4c      	ldr	r3, [pc, #304]	; (8003b00 <moment63+0x31c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	61fb      	str	r3, [r7, #28]
 80039d4:	4b4a      	ldr	r3, [pc, #296]	; (8003b00 <moment63+0x31c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4619      	mov	r1, r3
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	f04f 0400 	mov.w	r4, #0
 80039e6:	0154      	lsls	r4, r2, #5
 80039e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039ec:	014b      	lsls	r3, r1, #5
 80039ee:	4b44      	ldr	r3, [pc, #272]	; (8003b00 <moment63+0x31c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4619      	mov	r1, r3
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	f04f 0400 	mov.w	r4, #0
 8003a00:	0154      	lsls	r4, r2, #5
 8003a02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a06:	014b      	lsls	r3, r1, #5
 8003a08:	4b3d      	ldr	r3, [pc, #244]	; (8003b00 <moment63+0x31c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	3303      	adds	r3, #3
 8003a10:	3307      	adds	r3, #7
 8003a12:	08db      	lsrs	r3, r3, #3
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	ebad 0d03 	sub.w	sp, sp, r3
 8003a1a:	466b      	mov	r3, sp
 8003a1c:	3303      	adds	r3, #3
 8003a1e:	089b      	lsrs	r3, r3, #2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	61bb      	str	r3, [r7, #24]
	float32_t m63[frameSize]; // in^6
 8003a24:	4b36      	ldr	r3, [pc, #216]	; (8003b00 <moment63+0x31c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	4b34      	ldr	r3, [pc, #208]	; (8003b00 <moment63+0x31c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4619      	mov	r1, r3
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	f04f 0400 	mov.w	r4, #0
 8003a3e:	0154      	lsls	r4, r2, #5
 8003a40:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a44:	014b      	lsls	r3, r1, #5
 8003a46:	4b2e      	ldr	r3, [pc, #184]	; (8003b00 <moment63+0x31c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	f04f 0400 	mov.w	r4, #0
 8003a58:	0154      	lsls	r4, r2, #5
 8003a5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a5e:	014b      	lsls	r3, r1, #5
 8003a60:	4b27      	ldr	r3, [pc, #156]	; (8003b00 <moment63+0x31c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	3303      	adds	r3, #3
 8003a68:	3307      	adds	r3, #7
 8003a6a:	08db      	lsrs	r3, r3, #3
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	ebad 0d03 	sub.w	sp, sp, r3
 8003a72:	466b      	mov	r3, sp
 8003a74:	3303      	adds	r3, #3
 8003a76:	089b      	lsrs	r3, r3, #2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	613b      	str	r3, [r7, #16]
	float32_t m63_real = 0.0f, m63_imag = 0.0f;
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t m63_real_mean = 0.0f, m63_imag_mean = 0.0f;
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8003a94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a96:	4b1a      	ldr	r3, [pc, #104]	; (8003b00 <moment63+0x31c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f007 f9bc 	bl	800ae1c <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8003aa4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003aa6:	4b16      	ldr	r3, [pc, #88]	; (8003b00 <moment63+0x31c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f008 f8e1 	bl	800bc74 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8003ab2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ab4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ab6:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <moment63+0x31c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f007 ff52 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8003ac0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003ac2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ac4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ac6:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <moment63+0x31c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f007 ff4b 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_conj[0], &m41[0], frameSize);
 8003ace:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003ad0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ad2:	6a3a      	ldr	r2, [r7, #32]
 8003ad4:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <moment63+0x31c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f007 ff44 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m41[0], &in_conj[0], &m52[0], frameSize);
 8003adc:	6a38      	ldr	r0, [r7, #32]
 8003ade:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <moment63+0x31c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f007 ff3d 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m52[0], &in_conj[0], &m63[0], frameSize);
 8003aea:	69b8      	ldr	r0, [r7, #24]
 8003aec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <moment63+0x31c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f007 ff36 	bl	800b964 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8003af8:	2300      	movs	r3, #0
 8003afa:	633b      	str	r3, [r7, #48]	; 0x30
 8003afc:	e01e      	b.n	8003b3c <moment63+0x358>
 8003afe:	bf00      	nop
 8003b00:	0800cf54 	.word	0x0800cf54
		m63_real += m63[i];
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	edd3 7a00 	vldr	s15, [r3]
 8003b10:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b18:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		m63_imag += m63[i+1];
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	3301      	adds	r3, #1
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	edd3 7a00 	vldr	s15, [r3]
 8003b2a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b32:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i < frameSize*2; i+=2){
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	3302      	adds	r3, #2
 8003b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b3c:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <moment63+0x39c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	005a      	lsls	r2, r3, #1
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d8dd      	bhi.n	8003b04 <moment63+0x320>
	}
	m63_real_mean = m63_real / blockSize;
 8003b48:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003b4c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b54:	edc7 7a03 	vstr	s15, [r7, #12]
	m63_imag_mean = m63_imag / blockSize;
 8003b58:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003b5c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b64:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m63_real_mean;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	601a      	str	r2, [r3, #0]
	out[1] = m63_imag_mean;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	3304      	adds	r3, #4
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	46ad      	mov	sp, r5
	// *out = sqrtf(m63_real_mean*m63_real_mean + m63_imag_mean*m63_imag_mean);
}
 8003b78:	bf00      	nop
 8003b7a:	3758      	adds	r7, #88	; 0x58
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bdb0      	pop	{r4, r5, r7, pc}
 8003b80:	0800cf54 	.word	0x0800cf54

08003b84 <cumulant_20>:

// Features no 13, 14, 15, 16, 17, 18, 19, 20 and 21
void cumulant_20(float32_t in[], float32_t *out){
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
	float32_t temp[2];
	moment20(&in[0], &temp[0]);
 8003b8e:	f107 0308 	add.w	r3, r7, #8
 8003b92:	4619      	mov	r1, r3
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7fe f8ff 	bl	8001d98 <moment20>
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
 8003b9a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ba6:	edd7 6a03 	vldr	s13, [r7, #12]
 8003baa:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bba:	f008 fdd5 	bl	800c768 <sqrtf>
 8003bbe:	eef0 7a40 	vmov.f32	s15, s0
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	edc3 7a00 	vstr	s15, [r3]
};
 8003bc8:	bf00      	nop
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <cumulant_21>:
void cumulant_21(float32_t in[], float32_t *out){
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
	moment21(&in[0], out);
 8003bda:	6839      	ldr	r1, [r7, #0]
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7fe f9a7 	bl	8001f30 <moment21>
};
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <cumulant_40>:

void cumulant_40(float32_t in[], float32_t *out){
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b08c      	sub	sp, #48	; 0x30
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	6039      	str	r1, [r7, #0]
	float32_t m40[2], m20[2];
	float32_t m20_2[2], _3_m20_2[2];
	float32_t temp[2];
	moment20(&in[0], &m20[0]); // m20 is complex
 8003bf4:	f107 0320 	add.w	r3, r7, #32
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fe f8cc 	bl	8001d98 <moment20>
	moment40(&in[0], &m40[0]); // m40 is complex
 8003c00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c04:	4619      	mov	r1, r3
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fe fb48 	bl	800229c <moment40>
	// From complex multiplication
	// (a + bi)(a + bi) = (a^2 - b^2) + (2ab)i
	// Calculate 3*m20^2
	m20_2[0] = m20[0] * m20[0] - m20[1] * m20[1];
 8003c0c:	ed97 7a08 	vldr	s14, [r7, #32]
 8003c10:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c18:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003c1c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c28:	edc7 7a06 	vstr	s15, [r7, #24]
	m20_2[1] = 2 * m20[0] * m20[1];
 8003c2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c30:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003c34:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3c:	edc7 7a07 	vstr	s15, [r7, #28]
	_3_m20_2[0] = m20_2[0] * 3;
 8003c40:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c44:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003c48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c4c:	edc7 7a04 	vstr	s15, [r7, #16]
	_3_m20_2[1] = m20_2[1] * 3;
 8003c50:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c54:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c5c:	edc7 7a05 	vstr	s15, [r7, #20]
	// Save temporary complex number and calculate absolute value
	temp[0] = m40[0] - _3_m20_2[0];
 8003c60:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003c64:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c6c:	edc7 7a02 	vstr	s15, [r7, #8]
	temp[1] = m40[1] - _3_m20_2[1];
 8003c70:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003c74:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c7c:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
 8003c80:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c84:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c8c:	edd7 6a03 	vldr	s13, [r7, #12]
 8003c90:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca0:	f008 fd62 	bl	800c768 <sqrtf>
 8003ca4:	eef0 7a40 	vmov.f32	s15, s0
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	edc3 7a00 	vstr	s15, [r3]
	// *out = fabsf(m40 - 3*m20*m20);
};
 8003cae:	bf00      	nop
 8003cb0:	3730      	adds	r7, #48	; 0x30
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <cumulant_41>:
void cumulant_41(float32_t in[], float32_t *out){
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b08c      	sub	sp, #48	; 0x30
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	6039      	str	r1, [r7, #0]
	float32_t m41[2], m20[2], m21;
	float32_t _3_m20_m21[2];
	float32_t temp[2];
	moment41(&in[0], &m41[0]); // m41 is complex
 8003cc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fe fc1a 	bl	8002500 <moment41>
	moment20(&in[0], &m20[0]); // m20 is complex
 8003ccc:	f107 0320 	add.w	r3, r7, #32
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fe f860 	bl	8001d98 <moment20>
	moment21(&in[0], &m21);    // m21 is real
 8003cd8:	f107 031c 	add.w	r3, r7, #28
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fe f926 	bl	8001f30 <moment21>
	// Calculate 3*m20*m21
	_3_m20_m21[0] = 3 * m20[0] * m21;
 8003ce4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ce8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003cec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003cf0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf8:	edc7 7a05 	vstr	s15, [r7, #20]
	_3_m20_m21[1] = 3 * m20[1] * m21;
 8003cfc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d00:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003d04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d08:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d10:	edc7 7a06 	vstr	s15, [r7, #24]
	temp[0] = m41[0] - _3_m20_m21[0];
 8003d14:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003d18:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d20:	edc7 7a03 	vstr	s15, [r7, #12]
	temp[1] = m41[1] - _3_m20_m21[1];
 8003d24:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003d28:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d30:	edc7 7a04 	vstr	s15, [r7, #16]
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
 8003d34:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d38:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d40:	edd7 6a04 	vldr	s13, [r7, #16]
 8003d44:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d50:	eeb0 0a67 	vmov.f32	s0, s15
 8003d54:	f008 fd08 	bl	800c768 <sqrtf>
 8003d58:	eef0 7a40 	vmov.f32	s15, s0
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	edc3 7a00 	vstr	s15, [r3]
	// *out = fabsf(m41 - 3*m20*m21);
};
 8003d62:	bf00      	nop
 8003d64:	3730      	adds	r7, #48	; 0x30
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <cumulant_42>:
void cumulant_42(float32_t in[], float32_t *out){
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b08e      	sub	sp, #56	; 0x38
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	6039      	str	r1, [r7, #0]
	float32_t m42[2], m20[2], m20_2[2], m21;
	float32_t _2_m21_2, abs_m20_2;
	float32_t temp[2];
	// From complex multiplication
	// Calculate 3*m20*m21
	moment42(&in[0], &m42[0]); // m42 is complex
 8003d74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d78:	4619      	mov	r1, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7fe fd28 	bl	80027d0 <moment42>
	moment20(&in[0], &m20[0]); // m20 is complex
 8003d80:	f107 0320 	add.w	r3, r7, #32
 8003d84:	4619      	mov	r1, r3
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fe f806 	bl	8001d98 <moment20>
	moment21(&in[0], &m21);    // m21 is real
 8003d8c:	f107 0314 	add.w	r3, r7, #20
 8003d90:	4619      	mov	r1, r3
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fe f8cc 	bl	8001f30 <moment21>
	// Calculate 2*m1^2
	_2_m21_2 = 2 * m21 * m21;
 8003d98:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d9c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003da0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	// Calculate |m20^2|
	// From complex multiplication
	// (a + bi)(a + bi) = (a^2 - b^2) + (2ab)i
	m20_2[0] = m20[0] * m20[0] - m20[1] * m20[1];
 8003dac:	ed97 7a08 	vldr	s14, [r7, #32]
 8003db0:	edd7 7a08 	vldr	s15, [r7, #32]
 8003db4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003db8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003dbc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dc8:	edc7 7a06 	vstr	s15, [r7, #24]
	m20_2[1] = 2 * m20[0] * m20[1];
 8003dcc:	edd7 7a08 	vldr	s15, [r7, #32]
 8003dd0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003dd4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ddc:	edc7 7a07 	vstr	s15, [r7, #28]
	abs_m20_2 = sqrtf(m20_2[0]*m20_2[0] + m20_2[1]*m20_2[1]);
 8003de0:	ed97 7a06 	vldr	s14, [r7, #24]
 8003de4:	edd7 7a06 	vldr	s15, [r7, #24]
 8003de8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dec:	edd7 6a07 	vldr	s13, [r7, #28]
 8003df0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003df4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003df8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8003e00:	f008 fcb2 	bl	800c768 <sqrtf>
 8003e04:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	temp[0] = m42[0] - abs_m20_2 - _2_m21_2;
 8003e08:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003e0c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003e10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e14:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003e18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e1c:	edc7 7a03 	vstr	s15, [r7, #12]
	temp[1] = m42[1];
 8003e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e22:	613b      	str	r3, [r7, #16]
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
 8003e24:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e28:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e30:	edd7 6a04 	vldr	s13, [r7, #16]
 8003e34:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e40:	eeb0 0a67 	vmov.f32	s0, s15
 8003e44:	f008 fc90 	bl	800c768 <sqrtf>
 8003e48:	eef0 7a40 	vmov.f32	s15, s0
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	edc3 7a00 	vstr	s15, [r3]
	// *out = fabsf(m42 - fabsf(m20*m20) - 2*m21*m21);
};
 8003e52:	bf00      	nop
 8003e54:	3738      	adds	r7, #56	; 0x38
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <cumulant_60>:
void cumulant_60(float32_t in[], float32_t *out){
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b08e      	sub	sp, #56	; 0x38
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	6039      	str	r1, [r7, #0]
	float32_t m60[2], m40[2], m20[2];
	float32_t _15_m20_m40[2], _3_m20_3[2];
	float32_t temp[2];
	moment20(&in[0], &m20[0]); // m20 is complex
 8003e64:	f107 0320 	add.w	r3, r7, #32
 8003e68:	4619      	mov	r1, r3
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fd ff94 	bl	8001d98 <moment20>
	moment40(&in[0], &m40[0]); // m40 is complex
 8003e70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fe fa10 	bl	800229c <moment40>
	moment60(&in[0], &m60[0]); // m60 is complexs
 8003e7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e80:	4619      	mov	r1, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fe ff74 	bl	8002d70 <moment60>
	// Calculate 15*m20*m40
	// From complex multiplication
	// (a + bi)(a + bi) = (a^2 - b^2) + (2ab)i
	_15_m20_m40[0] = 15 * (m20[0] * m40[0] - m20[1] * m40[1]);
 8003e88:	ed97 7a08 	vldr	s14, [r7, #32]
 8003e8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003e90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e94:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003e98:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ea4:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003eac:	edc7 7a06 	vstr	s15, [r7, #24]
	_15_m20_m40[1] = 15 * (m20[0] * m40[1] + m20[1] * m40[0]);
 8003eb0:	ed97 7a08 	vldr	s14, [r7, #32]
 8003eb4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003eb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ebc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003ec0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003ec4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ecc:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ed4:	edc7 7a07 	vstr	s15, [r7, #28]
	// Calculate 30*m20*m20*m20
	// From complex multiplication
	// (a + bi)(a + bi)(a + bi) = (a^3 - 3ab^2) + (3a^2b - b^3)i
	_3_m20_3[0] = 3 * (m20[0]*m20[0]*m20[0] - 3 * m20[0]*m20[1]*m20[1]);
 8003ed8:	ed97 7a08 	vldr	s14, [r7, #32]
 8003edc:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ee0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ee4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ee8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003eec:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ef0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003ef4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003ef8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003efc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f00:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003f04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f0c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003f10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f14:	edc7 7a04 	vstr	s15, [r7, #16]
	_3_m20_3[1] = 3 * (3 * m20[0]*m20[0]*m20[1] - m20[1]*m20[1]*m20[1]);
 8003f18:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f1c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003f20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f24:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f2c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003f30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f34:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003f38:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003f3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f40:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f4c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f54:	edc7 7a05 	vstr	s15, [r7, #20]
	temp[0] = m60[0] -_15_m20_m40[0] + _3_m20_3[0];
 8003f58:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003f5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f64:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f6c:	edc7 7a02 	vstr	s15, [r7, #8]
	temp[1] = m60[1] -_15_m20_m40[1] + _3_m20_3[1];
 8003f70:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003f74:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f84:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
 8003f88:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f94:	edd7 6a03 	vldr	s13, [r7, #12]
 8003f98:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fa4:	eeb0 0a67 	vmov.f32	s0, s15
 8003fa8:	f008 fbde 	bl	800c768 <sqrtf>
 8003fac:	eef0 7a40 	vmov.f32	s15, s0
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	edc3 7a00 	vstr	s15, [r3]
	// *out = fabsf(m60 - 15*m20*m40 + 30*m20*m20*m20);
};
 8003fb6:	bf00      	nop
 8003fb8:	3738      	adds	r7, #56	; 0x38
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <cumulant_61>:
void cumulant_61(float32_t in[], float32_t *out){
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b096      	sub	sp, #88	; 0x58
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]
	//M61 - 5 M21 M40 - 10 M20 M41 + 30 M20 M20 M21
	float32_t m61[2], m21, m40[2], m20[2], m41[2];
	float32_t _5_m21_m40[2], _10_m20_m41[2], _30_m20_2[2], _30_m20_m21[2];
	float32_t temp[2];
	moment20(&in[0], &m20[0]); // m20 is complex
 8003fc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003fcc:	4619      	mov	r1, r3
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fd fee2 	bl	8001d98 <moment20>
	moment21(&in[0], &m21); // m21 is real
 8003fd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fd8:	4619      	mov	r1, r3
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fd ffa8 	bl	8001f30 <moment21>
	moment40(&in[0], &m40[0]); // m40 is complex
 8003fe0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fe f958 	bl	800229c <moment40>
	moment41(&in[0], &m41[0]); // m41 is complex
 8003fec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fe fa84 	bl	8002500 <moment41>
	moment61(&in[0], &m61[0]); // m61 is complex
 8003ff8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff f850 	bl	80030a4 <moment61>
	// Calculate 5*m21*m40
	_5_m21_m40[0] = 5 * m40[0]*m21;
 8004004:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004008:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800400c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004010:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004018:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	_5_m21_m40[1] = 5 * m40[1]*m21;
 800401c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004020:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8004024:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004028:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800402c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004030:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	// Calculate 10*m20*m41
	// From complex multiplication
	// (a + bi)(a + bi) = (a^2 - b^2) + (2ab)i
	_10_m20_m41[0] = 10 * (m20[0] * m41[0] - m20[1] * m41[1]);
 8004034:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004038:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800403c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004040:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8004044:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800404c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004050:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004058:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	_10_m20_m41[1] = 10 * (m20[0] * m41[1] + m20[1] * m41[0]);
 800405c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004060:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004064:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004068:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800406c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004070:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004078:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800407c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004080:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	// Calculate 30*m20^2*m21
	// From complex multiplication
	// (a + bi)(a + bi) = (a^2 - b^2) + (2ab)i
	_30_m20_2[0] = 30 * (m20[0] * m20[0] - m20[1] * m20[1]);
 8004084:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004088:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800408c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004090:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8004094:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800409c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040a0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80040a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040a8:	edc7 7a07 	vstr	s15, [r7, #28]
	_30_m20_2[1] = 30 * (2 * m20[0] * m20[1]);
 80040ac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80040b0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80040b4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80040b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040bc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80040c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040c4:	edc7 7a08 	vstr	s15, [r7, #32]
	_30_m20_m21[0] = _30_m20_2[0]*m21;
 80040c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80040cc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80040d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d4:	edc7 7a05 	vstr	s15, [r7, #20]
	_30_m20_m21[1] = _30_m20_2[1]*m21;
 80040d8:	ed97 7a08 	vldr	s14, [r7, #32]
 80040dc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80040e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e4:	edc7 7a06 	vstr	s15, [r7, #24]
	temp[0] = m61[0] - _5_m21_m40[0] - _10_m20_m41[0] + _30_m20_m21[0];
 80040e8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80040ec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80040f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80040f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8004100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004104:	edc7 7a03 	vstr	s15, [r7, #12]
	temp[1] = m61[1] - _5_m21_m40[1] - _10_m20_m41[1] + _30_m20_m21[1];
 8004108:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800410c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004110:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004114:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004118:	ee37 7a67 	vsub.f32	s14, s14, s15
 800411c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004124:	edc7 7a04 	vstr	s15, [r7, #16]
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
 8004128:	ed97 7a03 	vldr	s14, [r7, #12]
 800412c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004134:	edd7 6a04 	vldr	s13, [r7, #16]
 8004138:	edd7 7a04 	vldr	s15, [r7, #16]
 800413c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004144:	eeb0 0a67 	vmov.f32	s0, s15
 8004148:	f008 fb0e 	bl	800c768 <sqrtf>
 800414c:	eef0 7a40 	vmov.f32	s15, s0
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	edc3 7a00 	vstr	s15, [r3]
	// *out = fabsf(m61 - 5*m21*m40 - 10*m20*m41 + 30*m20*m20*m21);
};
 8004156:	bf00      	nop
 8004158:	3758      	adds	r7, #88	; 0x58
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <cumulant_62>:
void cumulant_62(float32_t in[], float32_t *out){
 800415e:	b580      	push	{r7, lr}
 8004160:	b09e      	sub	sp, #120	; 0x78
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
	// M62 - 6 M20 M42 - 8 M21 M41 - M22 M40 + 6 M20 M20 M22 + 24 M21 M21 M22
	float32_t m62[2], m20[2], m42[2], m21, m41[2], m22[2], m40[2];
	float32_t _6_m20_m42[2], _8_m21_m41[2], m22_m40[2], _6_m20_2[2], _6_m20_m20_m22[2], _24_m21_m21_m22[2];
	float32_t temp[2];
	moment20(&in[0], &m20[0]); // m20 is complex
 8004168:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800416c:	4619      	mov	r1, r3
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fd fe12 	bl	8001d98 <moment20>
	moment21(&in[0], &m21); // m21 is real
 8004174:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004178:	4619      	mov	r1, r3
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fd fed8 	bl	8001f30 <moment21>
	moment22(&in[0], &m22[0]); // m22 is complex
 8004180:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004184:	4619      	mov	r1, r3
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fd ff86 	bl	8002098 <moment22>
	moment40(&in[0], &m40[0]); // m40 is complex
 800418c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004190:	4619      	mov	r1, r3
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fe f882 	bl	800229c <moment40>
	moment41(&in[0], &m41[0]); // m41 is complex
 8004198:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800419c:	4619      	mov	r1, r3
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fe f9ae 	bl	8002500 <moment41>
	moment42(&in[0], &m42[0]); // m42 is complex
 80041a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80041a8:	4619      	mov	r1, r3
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fe fb10 	bl	80027d0 <moment42>
	moment62(&in[0], &m62[0]); // m62 is complex
 80041b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80041b4:	4619      	mov	r1, r3
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff f944 	bl	8003444 <moment62>
	// Calculate 6*m20*m42, 8*m21*m41, m22*m40, 6*m20*m20*m22 + 24*m21*m21*m22
	// From complex multiplication
	// (a + bi)(a + bi) = (a^2 - b^2) + (2ab)i
	_6_m20_m42[0] = 6 * (m20[0] * m42[0] - m20[1] * m42[1]);
 80041bc:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80041c0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80041c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041c8:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80041cc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80041d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041d8:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80041dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041e0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	_6_m20_m42[1] = 6 * (m20[0] * m42[1] + m20[1] * m42[0]);
 80041e4:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80041e8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80041ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041f0:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80041f4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80041f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004200:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004204:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004208:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	_8_m21_m41[0] = 8 * m21 * m41[0];
 800420c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004210:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8004214:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004218:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800421c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004220:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	_8_m21_m41[1] = 8 * m21 * m41[1];
 8004224:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004228:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800422c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004230:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004238:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	m22_m40[0] = (m22[0] * m40[0] - m22[1] * m40[1]);
 800423c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004240:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004244:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004248:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800424c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004250:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004254:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004258:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	m22_m40[1] = (m22[0] * m40[1] + m22[1] * m40[0]);
 800425c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004260:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004264:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004268:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800426c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004278:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	_6_m20_2[0] = 6 * (m20[0] * m20[0] - m20[1] * m20[1]);
 800427c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8004280:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004284:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004288:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800428c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004294:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004298:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800429c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042a0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	_6_m20_2[1] = 6 * (2 * m20[0] * m20[1]);
 80042a4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80042a8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80042ac:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80042b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b4:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80042b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042bc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	_6_m20_m20_m22[0] = _6_m20_2[0] * m22[0] - _6_m20_2[1] * m22[1];
 80042c0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80042c4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80042c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042cc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80042d0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80042d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042dc:	edc7 7a07 	vstr	s15, [r7, #28]
	_6_m20_m20_m22[1] = _6_m20_2[0] * m22[1] + _6_m20_2[1] * m22[0];
 80042e0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80042e4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80042e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042ec:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80042f0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80042f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042fc:	edc7 7a08 	vstr	s15, [r7, #32]
	_24_m21_m21_m22[0] = 24 * m21 * m21 * m20[0];
 8004300:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004304:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8004308:	ee27 7a87 	vmul.f32	s14, s15, s14
 800430c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004310:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004314:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800431c:	edc7 7a05 	vstr	s15, [r7, #20]
	_24_m21_m21_m22[1] = 24 * m21 * m21 * m20[1];
 8004320:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004324:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8004328:	ee27 7a87 	vmul.f32	s14, s15, s14
 800432c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004330:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004334:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433c:	edc7 7a06 	vstr	s15, [r7, #24]
	temp[0] = m62[0] - _6_m20_m42[0] - _8_m21_m41[0] - m22_m40[0] + _6_m20_m20_m22[0] + _24_m21_m21_m22[0];
 8004340:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8004344:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004348:	ee37 7a67 	vsub.f32	s14, s14, s15
 800434c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004350:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004354:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004358:	ee37 7a67 	vsub.f32	s14, s14, s15
 800435c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004364:	edd7 7a05 	vldr	s15, [r7, #20]
 8004368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800436c:	edc7 7a03 	vstr	s15, [r7, #12]
	temp[1] = m62[1] - _6_m20_m42[1] - _8_m21_m41[1] - m22_m40[1] + _6_m20_m20_m22[1] + _24_m21_m21_m22[1];
 8004370:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8004374:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004378:	ee37 7a67 	vsub.f32	s14, s14, s15
 800437c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004380:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004384:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004388:	ee37 7a67 	vsub.f32	s14, s14, s15
 800438c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004390:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004394:	edd7 7a06 	vldr	s15, [r7, #24]
 8004398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800439c:	edc7 7a04 	vstr	s15, [r7, #16]
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
 80043a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80043a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80043a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043ac:	edd7 6a04 	vldr	s13, [r7, #16]
 80043b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80043b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043bc:	eeb0 0a67 	vmov.f32	s0, s15
 80043c0:	f008 f9d2 	bl	800c768 <sqrtf>
 80043c4:	eef0 7a40 	vmov.f32	s15, s0
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	edc3 7a00 	vstr	s15, [r3]
	// *out = fabsf(m62 - 6*m20*m42 - 8*m21*m41 - m22*m40 + 6*m20*m20*m22 + 24*m21*m21*m20);
};
 80043ce:	bf00      	nop
 80043d0:	3778      	adds	r7, #120	; 0x78
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <cumulant_63>:
void cumulant_63(float32_t in[], float32_t *out){
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b09a      	sub	sp, #104	; 0x68
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	6039      	str	r1, [r7, #0]
	// M63 - 9 M21 M42 + 12 M21 M21 M21 - 3 M20 M43 - 3 M22 M41 + 18 M20 M21 M22
	float32_t m63[2], m21, m42[2], m20[2], m43[2], m22[2], m41[2];
	float32_t _9_m21_m42[2], _3_m20_m43[2], _3_m22_m41[2], _18_m20_m21_m22[2], _12_m21_3;
	float32_t temp[2];
	moment20(&in[0], &m20[0]); // m20 is complex
 80043e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043e4:	4619      	mov	r1, r3
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fd fcd6 	bl	8001d98 <moment20>
	moment21(&in[0], &m21); // m21 is real
 80043ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80043f0:	4619      	mov	r1, r3
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fd fd9c 	bl	8001f30 <moment21>
	moment22(&in[0], &m22[0]); // m22 is complex
 80043f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043fc:	4619      	mov	r1, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7fd fe4a 	bl	8002098 <moment22>
	moment41(&in[0], &m41[0]); // m41 is complex
 8004404:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004408:	4619      	mov	r1, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fe f878 	bl	8002500 <moment41>
	moment42(&in[0], &m42[0]); // m42 is complex
 8004410:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004414:	4619      	mov	r1, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fe f9da 	bl	80027d0 <moment42>
	moment43(&in[0], &m43[0]); // m43 is complex
 800441c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004420:	4619      	mov	r1, r3
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fe fb3c 	bl	8002aa0 <moment43>
	moment63(&in[0], &m63[0]); // m64 is complex
 8004428:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800442c:	4619      	mov	r1, r3
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff f9d8 	bl	80037e4 <moment63>
	// Calculate 9*m21*m42, 3*m20*m43, 3*m22*m41 + 18*m20*m21*m22
	// From complex multiplication
	// (a + bi)(a + bi) = (a^2 - b^2) + (2ab)i
	_9_m21_m42[0] = 9 * m21 * m42[0];
 8004434:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004438:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800443c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004440:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004448:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	_9_m21_m42[1] = 9 * m21 * m42[1];
 800444c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004450:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004454:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004458:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800445c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004460:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	_3_m20_m43[0] = 3 * (m20[0] * m43[0] - m20[1] * m43[1]);
 8004464:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004468:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800446c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004470:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8004474:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800447c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004480:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004488:	edc7 7a08 	vstr	s15, [r7, #32]
	_3_m20_m43[1] = 3 * (m20[0] * m43[1] + m20[1] * m43[0]);
 800448c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004490:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004494:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004498:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800449c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80044a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044a8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80044ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044b0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	_3_m22_m41[0] = 3 * (m22[0] * m41[0] - m22[1] * m41[1]);
 80044b4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80044b8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80044bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044c0:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80044c4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80044c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044d0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80044d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044d8:	edc7 7a06 	vstr	s15, [r7, #24]
	_3_m22_m41[1] = 3 * (m22[0] * m41[1] + m22[1] * m41[0]);
 80044dc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80044e0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80044e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044e8:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80044ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80044f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044f8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80044fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004500:	edc7 7a07 	vstr	s15, [r7, #28]
	_18_m20_m21_m22[0] = 18 * m21 * (m20[0] * m22[0] - m20[1] * m22[1]);
 8004504:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004508:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 800450c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004510:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8004514:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004518:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800451c:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8004520:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004524:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004528:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800452c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004530:	edc7 7a04 	vstr	s15, [r7, #16]
	_18_m20_m21_m22[1] = 18 * m21 * (m20[0] * m22[1] + m20[1] * m22[0]);
 8004534:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004538:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 800453c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004540:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8004544:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004548:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800454c:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8004550:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004554:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800455c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004560:	edc7 7a05 	vstr	s15, [r7, #20]
	// Calculate 12*m21*m21*m21
	_12_m21_3 = 12 * m21 * m21 * m21;
 8004564:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004568:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800456c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004570:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004574:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004578:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800457c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004580:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	temp[0] = m63[0] - _9_m21_m42[0] + _12_m21_3 - _3_m20_m43[0] - _3_m22_m41[0] + _18_m20_m21_m22[0];
 8004584:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004588:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800458c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004590:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8004594:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004598:	edd7 7a08 	vldr	s15, [r7, #32]
 800459c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80045a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80045ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045b0:	edc7 7a02 	vstr	s15, [r7, #8]
	temp[1] = m63[1] - _9_m21_m42[1] - _3_m20_m43[1] - _3_m22_m41[1] + _18_m20_m21_m22[1];
 80045b4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80045b8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80045bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045c0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80045c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80045cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80045d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045d8:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
 80045dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80045e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80045e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045e8:	edd7 6a03 	vldr	s13, [r7, #12]
 80045ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80045f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045f8:	eeb0 0a67 	vmov.f32	s0, s15
 80045fc:	f008 f8b4 	bl	800c768 <sqrtf>
 8004600:	eef0 7a40 	vmov.f32	s15, s0
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	edc3 7a00 	vstr	s15, [r3]
	// *out = fabsf(m63 - 9*m21*m42 + 12*m21*m21*m21 - 3*m20*m43 - 3*m22*m41 + 18*m20*m21*m22);
};
 800460a:	bf00      	nop
 800460c:	3768      	adds	r7, #104	; 0x68
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08c      	sub	sp, #48	; 0x30
 8004618:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800461a:	f107 031c 	add.w	r3, r7, #28
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	605a      	str	r2, [r3, #4]
 8004624:	609a      	str	r2, [r3, #8]
 8004626:	60da      	str	r2, [r3, #12]
 8004628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800462a:	4b4b      	ldr	r3, [pc, #300]	; (8004758 <MX_GPIO_Init+0x144>)
 800462c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004630:	4a49      	ldr	r2, [pc, #292]	; (8004758 <MX_GPIO_Init+0x144>)
 8004632:	f043 0304 	orr.w	r3, r3, #4
 8004636:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800463a:	4b47      	ldr	r3, [pc, #284]	; (8004758 <MX_GPIO_Init+0x144>)
 800463c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	61bb      	str	r3, [r7, #24]
 8004646:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004648:	4b43      	ldr	r3, [pc, #268]	; (8004758 <MX_GPIO_Init+0x144>)
 800464a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800464e:	4a42      	ldr	r2, [pc, #264]	; (8004758 <MX_GPIO_Init+0x144>)
 8004650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004654:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004658:	4b3f      	ldr	r3, [pc, #252]	; (8004758 <MX_GPIO_Init+0x144>)
 800465a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800465e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004666:	4b3c      	ldr	r3, [pc, #240]	; (8004758 <MX_GPIO_Init+0x144>)
 8004668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800466c:	4a3a      	ldr	r2, [pc, #232]	; (8004758 <MX_GPIO_Init+0x144>)
 800466e:	f043 0302 	orr.w	r3, r3, #2
 8004672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004676:	4b38      	ldr	r3, [pc, #224]	; (8004758 <MX_GPIO_Init+0x144>)
 8004678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004684:	4b34      	ldr	r3, [pc, #208]	; (8004758 <MX_GPIO_Init+0x144>)
 8004686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800468a:	4a33      	ldr	r2, [pc, #204]	; (8004758 <MX_GPIO_Init+0x144>)
 800468c:	f043 0308 	orr.w	r3, r3, #8
 8004690:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004694:	4b30      	ldr	r3, [pc, #192]	; (8004758 <MX_GPIO_Init+0x144>)
 8004696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046a2:	4b2d      	ldr	r3, [pc, #180]	; (8004758 <MX_GPIO_Init+0x144>)
 80046a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046a8:	4a2b      	ldr	r2, [pc, #172]	; (8004758 <MX_GPIO_Init+0x144>)
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046b2:	4b29      	ldr	r3, [pc, #164]	; (8004758 <MX_GPIO_Init+0x144>)
 80046b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	60bb      	str	r3, [r7, #8]
 80046be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80046c0:	4b25      	ldr	r3, [pc, #148]	; (8004758 <MX_GPIO_Init+0x144>)
 80046c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046c6:	4a24      	ldr	r2, [pc, #144]	; (8004758 <MX_GPIO_Init+0x144>)
 80046c8:	f043 0310 	orr.w	r3, r3, #16
 80046cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046d0:	4b21      	ldr	r3, [pc, #132]	; (8004758 <MX_GPIO_Init+0x144>)
 80046d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046d6:	f003 0310 	and.w	r3, r3, #16
 80046da:	607b      	str	r3, [r7, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80046de:	2200      	movs	r2, #0
 80046e0:	f244 0101 	movw	r1, #16385	; 0x4001
 80046e4:	481d      	ldr	r0, [pc, #116]	; (800475c <MX_GPIO_Init+0x148>)
 80046e6:	f001 fe5f 	bl	80063a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80046ea:	2200      	movs	r2, #0
 80046ec:	2102      	movs	r1, #2
 80046ee:	481c      	ldr	r0, [pc, #112]	; (8004760 <MX_GPIO_Init+0x14c>)
 80046f0:	f001 fe5a 	bl	80063a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80046f4:	f244 0301 	movw	r3, #16385	; 0x4001
 80046f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046fa:	2301      	movs	r3, #1
 80046fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004702:	2300      	movs	r3, #0
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004706:	f107 031c 	add.w	r3, r7, #28
 800470a:	4619      	mov	r1, r3
 800470c:	4813      	ldr	r0, [pc, #76]	; (800475c <MX_GPIO_Init+0x148>)
 800470e:	f001 fc9b 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8004712:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8004716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004718:	2302      	movs	r3, #2
 800471a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471c:	2300      	movs	r3, #0
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004720:	2300      	movs	r3, #0
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8004724:	230a      	movs	r3, #10
 8004726:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004728:	f107 031c 	add.w	r3, r7, #28
 800472c:	4619      	mov	r1, r3
 800472e:	480d      	ldr	r0, [pc, #52]	; (8004764 <MX_GPIO_Init+0x150>)
 8004730:	f001 fc8a 	bl	8006048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004734:	2302      	movs	r3, #2
 8004736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004738:	2301      	movs	r3, #1
 800473a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473c:	2300      	movs	r3, #0
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004740:	2300      	movs	r3, #0
 8004742:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004744:	f107 031c 	add.w	r3, r7, #28
 8004748:	4619      	mov	r1, r3
 800474a:	4805      	ldr	r0, [pc, #20]	; (8004760 <MX_GPIO_Init+0x14c>)
 800474c:	f001 fc7c 	bl	8006048 <HAL_GPIO_Init>

}
 8004750:	bf00      	nop
 8004752:	3730      	adds	r7, #48	; 0x30
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	58024400 	.word	0x58024400
 800475c:	58020400 	.word	0x58020400
 8004760:	58021000 	.word	0x58021000
 8004764:	58020000 	.word	0x58020000

08004768 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800476c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004770:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004774:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <SCB_EnableICache+0x3c>)
 8004776:	2200      	movs	r2, #0
 8004778:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800477c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004780:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004784:	4b07      	ldr	r3, [pc, #28]	; (80047a4 <SCB_EnableICache+0x3c>)
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	4a06      	ldr	r2, [pc, #24]	; (80047a4 <SCB_EnableICache+0x3c>)
 800478a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800478e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004790:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004794:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8004798:	bf00      	nop
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	e000ed00 	.word	0xe000ed00

080047a8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80047ae:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <SCB_EnableDCache+0x7c>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80047b6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80047ba:	4b1a      	ldr	r3, [pc, #104]	; (8004824 <SCB_EnableDCache+0x7c>)
 80047bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047c0:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	0b5b      	lsrs	r3, r3, #13
 80047c6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80047ca:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	08db      	lsrs	r3, r3, #3
 80047d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047d4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80047de:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80047e4:	490f      	ldr	r1, [pc, #60]	; (8004824 <SCB_EnableDCache+0x7c>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	1e5a      	subs	r2, r3, #1
 80047f0:	60ba      	str	r2, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1ef      	bne.n	80047d6 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1e5a      	subs	r2, r3, #1
 80047fa:	60fa      	str	r2, [r7, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e5      	bne.n	80047cc <SCB_EnableDCache+0x24>
 8004800:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8004804:	4b07      	ldr	r3, [pc, #28]	; (8004824 <SCB_EnableDCache+0x7c>)
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	4a06      	ldr	r2, [pc, #24]	; (8004824 <SCB_EnableDCache+0x7c>)
 800480a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480e:	6153      	str	r3, [r2, #20]
 8004810:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004814:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8004818:	bf00      	nop
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	e000ed00 	.word	0xe000ed00

08004828 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08e      	sub	sp, #56	; 0x38
 800482c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	/*****************************************************************************************************/
	q15_t q15_input_vector[22] = {0};
 800482e:	f107 0308 	add.w	r3, r7, #8
 8004832:	222c      	movs	r2, #44	; 0x2c
 8004834:	2100      	movs	r1, #0
 8004836:	4618      	mov	r0, r3
 8004838:	f007 fe5a 	bl	800c4f0 <memset>
	/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 800483c:	f7ff ff94 	bl	8004768 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8004840:	f7ff ffb2 	bl	80047a8 <SCB_EnableDCache>

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8004844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004848:	637b      	str	r3, [r7, #52]	; 0x34
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800484a:	bf00      	nop
 800484c:	4b66      	ldr	r3, [pc, #408]	; (80049e8 <main+0x1c0>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d004      	beq.n	8004862 <main+0x3a>
 8004858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485a:	1e5a      	subs	r2, r3, #1
 800485c:	637a      	str	r2, [r7, #52]	; 0x34
 800485e:	2b00      	cmp	r3, #0
 8004860:	dcf4      	bgt.n	800484c <main+0x24>
	if ( timeout < 0 )
 8004862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004864:	2b00      	cmp	r3, #0
 8004866:	da01      	bge.n	800486c <main+0x44>
	{
		Error_Handler();
 8004868:	f000 fe1e 	bl	80054a8 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800486c:	f000 ffd8 	bl	8005820 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004870:	f000 fb04 	bl	8004e7c <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8004874:	4b5c      	ldr	r3, [pc, #368]	; (80049e8 <main+0x1c0>)
 8004876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800487a:	4a5b      	ldr	r2, [pc, #364]	; (80049e8 <main+0x1c0>)
 800487c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004880:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004884:	4b58      	ldr	r3, [pc, #352]	; (80049e8 <main+0x1c0>)
 8004886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800488a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488e:	607b      	str	r3, [r7, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8004892:	2000      	movs	r0, #0
 8004894:	f001 fda2 	bl	80063dc <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8004898:	2100      	movs	r1, #0
 800489a:	2000      	movs	r0, #0
 800489c:	f001 fdb8 	bl	8006410 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80048a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048a4:	637b      	str	r3, [r7, #52]	; 0x34
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80048a6:	bf00      	nop
 80048a8:	4b4f      	ldr	r3, [pc, #316]	; (80049e8 <main+0x1c0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d104      	bne.n	80048be <main+0x96>
 80048b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b6:	1e5a      	subs	r2, r3, #1
 80048b8:	637a      	str	r2, [r7, #52]	; 0x34
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	dcf4      	bgt.n	80048a8 <main+0x80>
	if ( timeout < 0 )
 80048be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	da01      	bge.n	80048c8 <main+0xa0>
	{
		Error_Handler();
 80048c4:	f000 fdf0 	bl	80054a8 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80048c8:	f7ff fea4 	bl	8004614 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80048cc:	f000 fee0 	bl	8005690 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 80048d0:	f000 fe70 	bl	80055b4 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	/*****************************************************************************************************/
	// HRTimer enable
	__HAL_TIM_ENABLE(&htim2);
 80048d4:	4b45      	ldr	r3, [pc, #276]	; (80049ec <main+0x1c4>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	4b44      	ldr	r3, [pc, #272]	; (80049ec <main+0x1c4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]
	__HAL_TIM_UIFREMAP_DISABLE(&htim2);
 80048e4:	4b41      	ldr	r3, [pc, #260]	; (80049ec <main+0x1c4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4b40      	ldr	r3, [pc, #256]	; (80049ec <main+0x1c4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048f2:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim2);
 80048f4:	483d      	ldr	r0, [pc, #244]	; (80049ec <main+0x1c4>)
 80048f6:	f004 f8e5 	bl	8008ac4 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80048fa:	4b3c      	ldr	r3, [pc, #240]	; (80049ec <main+0x1c4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2200      	movs	r2, #0
 8004900:	625a      	str	r2, [r3, #36]	; 0x24

	// Put UART peripheral in reception process
	if(HAL_UART_Receive_IT(&huart3, &rxWandB.bytes[0], 1700*2+82*2) != HAL_OK)
 8004902:	f640 52ec 	movw	r2, #3564	; 0xdec
 8004906:	493a      	ldr	r1, [pc, #232]	; (80049f0 <main+0x1c8>)
 8004908:	483a      	ldr	r0, [pc, #232]	; (80049f4 <main+0x1cc>)
 800490a:	f004 fc6d 	bl	80091e8 <HAL_UART_Receive_IT>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00a      	beq.n	800492a <main+0x102>
	{
		Error_Handler();
 8004914:	f000 fdc8 	bl	80054a8 <Error_Handler>
	}
	// Wait for message
	while (UartReady != SET)
 8004918:	e007      	b.n	800492a <main+0x102>
	{
		HAL_Delay(500);
 800491a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800491e:	f001 f811 	bl	8005944 <HAL_Delay>
		blink_green();
 8004922:	f000 fba5 	bl	8005070 <blink_green>
		blink_green();
 8004926:	f000 fba3 	bl	8005070 <blink_green>
	while (UartReady != SET)
 800492a:	4b33      	ldr	r3, [pc, #204]	; (80049f8 <main+0x1d0>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	d1f2      	bne.n	800491a <main+0xf2>
	}
	UartReady = RESET;
 8004934:	4b30      	ldr	r3, [pc, #192]	; (80049f8 <main+0x1d0>)
 8004936:	2200      	movs	r2, #0
 8004938:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 800493a:	2201      	movs	r2, #1
 800493c:	2101      	movs	r1, #1
 800493e:	482f      	ldr	r0, [pc, #188]	; (80049fc <main+0x1d4>)
 8004940:	f001 fd32 	bl	80063a8 <HAL_GPIO_WritePin>
	if(rxWandB.bytes[1700*2+82*2 - 1] != 0){ // Means: received everything
 8004944:	4b2a      	ldr	r3, [pc, #168]	; (80049f0 <main+0x1c8>)
 8004946:	f893 3deb 	ldrb.w	r3, [r3, #3563]	; 0xdeb
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <main+0x132>
		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800494e:	2201      	movs	r2, #1
 8004950:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004954:	4829      	ldr	r0, [pc, #164]	; (80049fc <main+0x1d4>)
 8004956:	f001 fd27 	bl	80063a8 <HAL_GPIO_WritePin>
	}
	// Echo
	transmit_echo_wandb(&rxWandB.bytes[0], 1700*2+82*2);
 800495a:	f640 51ec 	movw	r1, #3564	; 0xdec
 800495e:	4824      	ldr	r0, [pc, #144]	; (80049f0 <main+0x1c8>)
 8004960:	f000 fc54 	bl	800520c <transmit_echo_wandb>

	// Copying weights
	arm_copy_q15(&rxWandB.number[0], &aq15_layer_1_weights[0], 22*22);
 8004964:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004968:	4925      	ldr	r1, [pc, #148]	; (8004a00 <main+0x1d8>)
 800496a:	4821      	ldr	r0, [pc, #132]	; (80049f0 <main+0x1c8>)
 800496c:	f006 fa30 	bl	800add0 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[22*22], &aq15_layer_2_weights[0], 22*22);
 8004970:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004974:	4923      	ldr	r1, [pc, #140]	; (8004a04 <main+0x1dc>)
 8004976:	4824      	ldr	r0, [pc, #144]	; (8004a08 <main+0x1e0>)
 8004978:	f006 fa2a 	bl	800add0 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[22*22*2], &aq15_layer_3_weights[0], 22*18);
 800497c:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8004980:	4922      	ldr	r1, [pc, #136]	; (8004a0c <main+0x1e4>)
 8004982:	4823      	ldr	r0, [pc, #140]	; (8004a10 <main+0x1e8>)
 8004984:	f006 fa24 	bl	800add0 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[22*22*2 + 22*18], &aq15_layer_4_weights[0], 18*14);
 8004988:	22fc      	movs	r2, #252	; 0xfc
 800498a:	4922      	ldr	r1, [pc, #136]	; (8004a14 <main+0x1ec>)
 800498c:	4822      	ldr	r0, [pc, #136]	; (8004a18 <main+0x1f0>)
 800498e:	f006 fa1f 	bl	800add0 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[22*22*2 + 22*18 + 18*14], &aq15_layer_5_weights[0], 14*6);
 8004992:	2254      	movs	r2, #84	; 0x54
 8004994:	4921      	ldr	r1, [pc, #132]	; (8004a1c <main+0x1f4>)
 8004996:	4822      	ldr	r0, [pc, #136]	; (8004a20 <main+0x1f8>)
 8004998:	f006 fa1a 	bl	800add0 <arm_copy_q15>

	// Copying biases
	arm_copy_q15(&rxWandB.number[1700], &aq15_layer_1_biases[0], 22);
 800499c:	2216      	movs	r2, #22
 800499e:	4921      	ldr	r1, [pc, #132]	; (8004a24 <main+0x1fc>)
 80049a0:	4821      	ldr	r0, [pc, #132]	; (8004a28 <main+0x200>)
 80049a2:	f006 fa15 	bl	800add0 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[1722], &aq15_layer_2_biases[0], 22);
 80049a6:	2216      	movs	r2, #22
 80049a8:	4920      	ldr	r1, [pc, #128]	; (8004a2c <main+0x204>)
 80049aa:	4821      	ldr	r0, [pc, #132]	; (8004a30 <main+0x208>)
 80049ac:	f006 fa10 	bl	800add0 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[1744], &aq15_layer_3_biases[0], 18);
 80049b0:	2212      	movs	r2, #18
 80049b2:	4920      	ldr	r1, [pc, #128]	; (8004a34 <main+0x20c>)
 80049b4:	4820      	ldr	r0, [pc, #128]	; (8004a38 <main+0x210>)
 80049b6:	f006 fa0b 	bl	800add0 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[1762], &aq15_layer_4_biases[0], 14);
 80049ba:	220e      	movs	r2, #14
 80049bc:	491f      	ldr	r1, [pc, #124]	; (8004a3c <main+0x214>)
 80049be:	4820      	ldr	r0, [pc, #128]	; (8004a40 <main+0x218>)
 80049c0:	f006 fa06 	bl	800add0 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[1776], &aq15_layer_5_biases[0], 6);
 80049c4:	2206      	movs	r2, #6
 80049c6:	491f      	ldr	r1, [pc, #124]	; (8004a44 <main+0x21c>)
 80049c8:	481f      	ldr	r0, [pc, #124]	; (8004a48 <main+0x220>)
 80049ca:	f006 fa01 	bl	800add0 <arm_copy_q15>
	/* USER CODE BEGIN WHILE */
	/*****************************************************************************************************/
	while (1)
	{
		// Put UART peripheral in reception process
		if(HAL_UART_Receive_IT(&huart3, &rxBuffer.bytes[0], RX_DATA_SIZE*4) != HAL_OK)
 80049ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049d2:	491e      	ldr	r1, [pc, #120]	; (8004a4c <main+0x224>)
 80049d4:	4807      	ldr	r0, [pc, #28]	; (80049f4 <main+0x1cc>)
 80049d6:	f004 fc07 	bl	80091e8 <HAL_UART_Receive_IT>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d03f      	beq.n	8004a60 <main+0x238>
		{
			Error_Handler();
 80049e0:	f000 fd62 	bl	80054a8 <Error_Handler>
		}
		// Wait for message
		while (UartReady != SET)
 80049e4:	e03c      	b.n	8004a60 <main+0x238>
 80049e6:	bf00      	nop
 80049e8:	58024400 	.word	0x58024400
 80049ec:	24015e50 	.word	0x24015e50
 80049f0:	24014f30 	.word	0x24014f30
 80049f4:	24015e9c 	.word	0x24015e9c
 80049f8:	24015e40 	.word	0x24015e40
 80049fc:	58020400 	.word	0x58020400
 8004a00:	24000144 	.word	0x24000144
 8004a04:	24000538 	.word	0x24000538
 8004a08:	240152f8 	.word	0x240152f8
 8004a0c:	2400092c 	.word	0x2400092c
 8004a10:	240156c0 	.word	0x240156c0
 8004a14:	24000c68 	.word	0x24000c68
 8004a18:	240159d8 	.word	0x240159d8
 8004a1c:	24000e7c 	.word	0x24000e7c
 8004a20:	24015bd0 	.word	0x24015bd0
 8004a24:	2400050c 	.word	0x2400050c
 8004a28:	24015c78 	.word	0x24015c78
 8004a2c:	24000900 	.word	0x24000900
 8004a30:	24015ca4 	.word	0x24015ca4
 8004a34:	24000c44 	.word	0x24000c44
 8004a38:	24015cd0 	.word	0x24015cd0
 8004a3c:	24000e60 	.word	0x24000e60
 8004a40:	24015cf4 	.word	0x24015cf4
 8004a44:	24000f24 	.word	0x24000f24
 8004a48:	24015d10 	.word	0x24015d10
 8004a4c:	24010f30 	.word	0x24010f30
		{
			HAL_Delay(500);
 8004a50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a54:	f000 ff76 	bl	8005944 <HAL_Delay>
			blink_green();
 8004a58:	f000 fb0a 	bl	8005070 <blink_green>
			blink_green();
 8004a5c:	f000 fb08 	bl	8005070 <blink_green>
		while (UartReady != SET)
 8004a60:	4b95      	ldr	r3, [pc, #596]	; (8004cb8 <main+0x490>)
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d1f2      	bne.n	8004a50 <main+0x228>
		}
		UartReady = RESET;
 8004a6a:	4b93      	ldr	r3, [pc, #588]	; (8004cb8 <main+0x490>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8004a70:	2201      	movs	r2, #1
 8004a72:	2101      	movs	r1, #1
 8004a74:	4891      	ldr	r0, [pc, #580]	; (8004cbc <main+0x494>)
 8004a76:	f001 fc97 	bl	80063a8 <HAL_GPIO_WritePin>
		if(rxBuffer.bytes[8191] != 0){ // Means: received everything
 8004a7a:	4a91      	ldr	r2, [pc, #580]	; (8004cc0 <main+0x498>)
 8004a7c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8004a80:	4413      	add	r3, r2
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d004      	beq.n	8004a92 <main+0x26a>
			HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 8004a88:	2201      	movs	r2, #1
 8004a8a:	2102      	movs	r1, #2
 8004a8c:	488d      	ldr	r0, [pc, #564]	; (8004cc4 <main+0x49c>)
 8004a8e:	f001 fc8b 	bl	80063a8 <HAL_GPIO_WritePin>
		/*
		// Echo
		transmit_echo_data(&rxBuffer.bytes[0], RX_DATA_SIZE*4);
		*/
		// Instantaneous absolute value
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004a92:	4b8d      	ldr	r3, [pc, #564]	; (8004cc8 <main+0x4a0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2200      	movs	r2, #0
 8004a98:	625a      	str	r2, [r3, #36]	; 0x24
		complex_inst_absolute(&rxBuffer.number[0], &instAbs.number[0]);
 8004a9a:	498c      	ldr	r1, [pc, #560]	; (8004ccc <main+0x4a4>)
 8004a9c:	4888      	ldr	r0, [pc, #544]	; (8004cc0 <main+0x498>)
 8004a9e:	f7fc fac7 	bl	8001030 <complex_inst_absolute>
		counter_array.number[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8004aa2:	4b89      	ldr	r3, [pc, #548]	; (8004cc8 <main+0x4a0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	4a89      	ldr	r2, [pc, #548]	; (8004cd0 <main+0x4a8>)
 8004aaa:	6013      	str	r3, [r2, #0]
		//transmit_array(&instAbs.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[0]);

		// Instantaneous phase value
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004aac:	4b86      	ldr	r3, [pc, #536]	; (8004cc8 <main+0x4a0>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	625a      	str	r2, [r3, #36]	; 0x24
		inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 8004ab4:	4987      	ldr	r1, [pc, #540]	; (8004cd4 <main+0x4ac>)
 8004ab6:	4882      	ldr	r0, [pc, #520]	; (8004cc0 <main+0x498>)
 8004ab8:	f7fc facc 	bl	8001054 <inst_phase>
		counter_array.number[1] = __HAL_TIM_GET_COUNTER(&htim2);
 8004abc:	4b82      	ldr	r3, [pc, #520]	; (8004cc8 <main+0x4a0>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	4a83      	ldr	r2, [pc, #524]	; (8004cd0 <main+0x4a8>)
 8004ac4:	6053      	str	r3, [r2, #4]
		//transmit_array(&instPhase.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[4]);

		// Instantaneous unwrapped phase value
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004ac6:	4b80      	ldr	r3, [pc, #512]	; (8004cc8 <main+0x4a0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2200      	movs	r2, #0
 8004acc:	625a      	str	r2, [r3, #36]	; 0x24
		inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 8004ace:	4981      	ldr	r1, [pc, #516]	; (8004cd4 <main+0x4ac>)
 8004ad0:	487b      	ldr	r0, [pc, #492]	; (8004cc0 <main+0x498>)
 8004ad2:	f7fc fabf 	bl	8001054 <inst_phase>
		unwrap(&instPhase.number[0], &instUnwrappedPhase.number[0]);
 8004ad6:	4980      	ldr	r1, [pc, #512]	; (8004cd8 <main+0x4b0>)
 8004ad8:	487e      	ldr	r0, [pc, #504]	; (8004cd4 <main+0x4ac>)
 8004ada:	f7fc faf5 	bl	80010c8 <unwrap>
		counter_array.number[2] = __HAL_TIM_GET_COUNTER(&htim2);
 8004ade:	4b7a      	ldr	r3, [pc, #488]	; (8004cc8 <main+0x4a0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	4a7a      	ldr	r2, [pc, #488]	; (8004cd0 <main+0x4a8>)
 8004ae6:	6093      	str	r3, [r2, #8]
		//transmit_array(&instUnwrappedPhase.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[8]);

		// Instantaneous frequency value
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004ae8:	4b77      	ldr	r3, [pc, #476]	; (8004cc8 <main+0x4a0>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2200      	movs	r2, #0
 8004aee:	625a      	str	r2, [r3, #36]	; 0x24
		inst_frequency(&rxBuffer.number[0], &instFreq.number[0]);
 8004af0:	497a      	ldr	r1, [pc, #488]	; (8004cdc <main+0x4b4>)
 8004af2:	4873      	ldr	r0, [pc, #460]	; (8004cc0 <main+0x498>)
 8004af4:	f7fc fc0c 	bl	8001310 <inst_frequency>
		counter_array.number[3] = __HAL_TIM_GET_COUNTER(&htim2);
 8004af8:	4b73      	ldr	r3, [pc, #460]	; (8004cc8 <main+0x4a0>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	4a74      	ldr	r2, [pc, #464]	; (8004cd0 <main+0x4a8>)
 8004b00:	60d3      	str	r3, [r2, #12]
		//transmit_array(&instFreq.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[12]);

		// Instantaneous centered normalized absolute value
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004b02:	4b71      	ldr	r3, [pc, #452]	; (8004cc8 <main+0x4a0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2200      	movs	r2, #0
 8004b08:	625a      	str	r2, [r3, #36]	; 0x24
		inst_centralized_normalized_absolute(&rxBuffer.number[0], &instCNAbs.number[0]);
 8004b0a:	4975      	ldr	r1, [pc, #468]	; (8004ce0 <main+0x4b8>)
 8004b0c:	486c      	ldr	r0, [pc, #432]	; (8004cc0 <main+0x498>)
 8004b0e:	f7fc fcb5 	bl	800147c <inst_centralized_normalized_absolute>
		counter_array.number[4] = __HAL_TIM_GET_COUNTER(&htim2);
 8004b12:	4b6d      	ldr	r3, [pc, #436]	; (8004cc8 <main+0x4a0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	4a6d      	ldr	r2, [pc, #436]	; (8004cd0 <main+0x4a8>)
 8004b1a:	6113      	str	r3, [r2, #16]
		//transmit_array(&instCNAbs.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[16]);

		/*****************************************************************************************************/
		// Standard deviation of the instantaneous phase
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004b1c:	4b6a      	ldr	r3, [pc, #424]	; (8004cc8 <main+0x4a0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2200      	movs	r2, #0
 8004b22:	625a      	str	r2, [r3, #36]	; 0x24
		std_dev(&instPhase.number[0], &ft_array.number[0]);
 8004b24:	496f      	ldr	r1, [pc, #444]	; (8004ce4 <main+0x4bc>)
 8004b26:	486b      	ldr	r0, [pc, #428]	; (8004cd4 <main+0x4ac>)
 8004b28:	f7fc fd20 	bl	800156c <std_dev>
		counter_array.number[5] = __HAL_TIM_GET_COUNTER(&htim2);
 8004b2c:	4b66      	ldr	r3, [pc, #408]	; (8004cc8 <main+0x4a0>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	4a67      	ldr	r2, [pc, #412]	; (8004cd0 <main+0x4a8>)
 8004b34:	6153      	str	r3, [r2, #20]

		// Standard deviation of the absolute instantaneous phase
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004b36:	4b64      	ldr	r3, [pc, #400]	; (8004cc8 <main+0x4a0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24
		inst_absolute(&instPhase.number[0], &instAbsPhase.number[0]);
 8004b3e:	496a      	ldr	r1, [pc, #424]	; (8004ce8 <main+0x4c0>)
 8004b40:	4864      	ldr	r0, [pc, #400]	; (8004cd4 <main+0x4ac>)
 8004b42:	f7fc fa63 	bl	800100c <inst_absolute>
		std_dev(&instAbsPhase.number[0], &ft_array.number[1]);
 8004b46:	4969      	ldr	r1, [pc, #420]	; (8004cec <main+0x4c4>)
 8004b48:	4867      	ldr	r0, [pc, #412]	; (8004ce8 <main+0x4c0>)
 8004b4a:	f7fc fd0f 	bl	800156c <std_dev>
		counter_array.number[6] = __HAL_TIM_GET_COUNTER(&htim2);
 8004b4e:	4b5e      	ldr	r3, [pc, #376]	; (8004cc8 <main+0x4a0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	4a5e      	ldr	r2, [pc, #376]	; (8004cd0 <main+0x4a8>)
 8004b56:	6193      	str	r3, [r2, #24]

		// Standard deviation of the instantaneous frequency
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004b58:	4b5b      	ldr	r3, [pc, #364]	; (8004cc8 <main+0x4a0>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	625a      	str	r2, [r3, #36]	; 0x24
		std_dev(&instFreq.number[0], &ft_array.number[2]);
 8004b60:	4963      	ldr	r1, [pc, #396]	; (8004cf0 <main+0x4c8>)
 8004b62:	485e      	ldr	r0, [pc, #376]	; (8004cdc <main+0x4b4>)
 8004b64:	f7fc fd02 	bl	800156c <std_dev>
		counter_array.number[7] = __HAL_TIM_GET_COUNTER(&htim2);
 8004b68:	4b57      	ldr	r3, [pc, #348]	; (8004cc8 <main+0x4a0>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	4a58      	ldr	r2, [pc, #352]	; (8004cd0 <main+0x4a8>)
 8004b70:	61d3      	str	r3, [r2, #28]

		// Standard deviation of the absolute instantaneous frequency
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004b72:	4b55      	ldr	r3, [pc, #340]	; (8004cc8 <main+0x4a0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2200      	movs	r2, #0
 8004b78:	625a      	str	r2, [r3, #36]	; 0x24
		inst_absolute(&instFreq.number[0], &instAbsFreq.number[0]);
 8004b7a:	495e      	ldr	r1, [pc, #376]	; (8004cf4 <main+0x4cc>)
 8004b7c:	4857      	ldr	r0, [pc, #348]	; (8004cdc <main+0x4b4>)
 8004b7e:	f7fc fa45 	bl	800100c <inst_absolute>
		std_dev(&instAbsFreq.number[0], &ft_array.number[3]);
 8004b82:	495d      	ldr	r1, [pc, #372]	; (8004cf8 <main+0x4d0>)
 8004b84:	485b      	ldr	r0, [pc, #364]	; (8004cf4 <main+0x4cc>)
 8004b86:	f7fc fcf1 	bl	800156c <std_dev>
		counter_array.number[8] = __HAL_TIM_GET_COUNTER(&htim2);
 8004b8a:	4b4f      	ldr	r3, [pc, #316]	; (8004cc8 <main+0x4a0>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	4a4f      	ldr	r2, [pc, #316]	; (8004cd0 <main+0x4a8>)
 8004b92:	6213      	str	r3, [r2, #32]

		// Standard deviation of the centralized normalized absolute amplitude
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004b94:	4b4c      	ldr	r3, [pc, #304]	; (8004cc8 <main+0x4a0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	625a      	str	r2, [r3, #36]	; 0x24
		std_dev(&instCNAbs.number[0], &ft_array.number[4]);
 8004b9c:	4957      	ldr	r1, [pc, #348]	; (8004cfc <main+0x4d4>)
 8004b9e:	4850      	ldr	r0, [pc, #320]	; (8004ce0 <main+0x4b8>)
 8004ba0:	f7fc fce4 	bl	800156c <std_dev>
		counter_array.number[9] = __HAL_TIM_GET_COUNTER(&htim2);
 8004ba4:	4b48      	ldr	r3, [pc, #288]	; (8004cc8 <main+0x4a0>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	4a49      	ldr	r2, [pc, #292]	; (8004cd0 <main+0x4a8>)
 8004bac:	6253      	str	r3, [r2, #36]	; 0x24

		// Standard deviation of the absolute centralized normalized absolute amplitude
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004bae:	4b46      	ldr	r3, [pc, #280]	; (8004cc8 <main+0x4a0>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	625a      	str	r2, [r3, #36]	; 0x24
		inst_absolute(&instCNAbs.number[0], &instAbsCNAbs.number[0]);
 8004bb6:	4952      	ldr	r1, [pc, #328]	; (8004d00 <main+0x4d8>)
 8004bb8:	4849      	ldr	r0, [pc, #292]	; (8004ce0 <main+0x4b8>)
 8004bba:	f7fc fa27 	bl	800100c <inst_absolute>
		std_dev(&instAbsCNAbs.number[0], &ft_array.number[5]);
 8004bbe:	4951      	ldr	r1, [pc, #324]	; (8004d04 <main+0x4dc>)
 8004bc0:	484f      	ldr	r0, [pc, #316]	; (8004d00 <main+0x4d8>)
 8004bc2:	f7fc fcd3 	bl	800156c <std_dev>
		counter_array.number[10] = __HAL_TIM_GET_COUNTER(&htim2);
 8004bc6:	4b40      	ldr	r3, [pc, #256]	; (8004cc8 <main+0x4a0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	4a40      	ldr	r2, [pc, #256]	; (8004cd0 <main+0x4a8>)
 8004bce:	6293      	str	r3, [r2, #40]	; 0x28

		// Mean Value of the Signal Magnitude
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004bd0:	4b3d      	ldr	r3, [pc, #244]	; (8004cc8 <main+0x4a0>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	625a      	str	r2, [r3, #36]	; 0x24
		mean_of_signal_magnitude(&instAbs.number[0], &ft_array.number[6]);
 8004bd8:	494b      	ldr	r1, [pc, #300]	; (8004d08 <main+0x4e0>)
 8004bda:	483c      	ldr	r0, [pc, #240]	; (8004ccc <main+0x4a4>)
 8004bdc:	f7fc fcd8 	bl	8001590 <mean_of_signal_magnitude>
		counter_array.number[11] = __HAL_TIM_GET_COUNTER(&htim2);
 8004be0:	4b39      	ldr	r3, [pc, #228]	; (8004cc8 <main+0x4a0>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	4a3a      	ldr	r2, [pc, #232]	; (8004cd0 <main+0x4a8>)
 8004be8:	62d3      	str	r3, [r2, #44]	; 0x2c

		// Squared Mean of the Signal Magnitude
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004bea:	4b37      	ldr	r3, [pc, #220]	; (8004cc8 <main+0x4a0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	625a      	str	r2, [r3, #36]	; 0x24
		squared_mean_of_signal_magnitude(&instAbs.number[0], &ft_array.number[7]);
 8004bf2:	4946      	ldr	r1, [pc, #280]	; (8004d0c <main+0x4e4>)
 8004bf4:	4835      	ldr	r0, [pc, #212]	; (8004ccc <main+0x4a4>)
 8004bf6:	f7fc fcdd 	bl	80015b4 <squared_mean_of_signal_magnitude>
		counter_array.number[12] = __HAL_TIM_GET_COUNTER(&htim2);
 8004bfa:	4b33      	ldr	r3, [pc, #204]	; (8004cc8 <main+0x4a0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	4a33      	ldr	r2, [pc, #204]	; (8004cd0 <main+0x4a8>)
 8004c02:	6313      	str	r3, [r2, #48]	; 0x30

		// Normalized Sqrt Value of Sum of Amplitude
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004c04:	4b30      	ldr	r3, [pc, #192]	; (8004cc8 <main+0x4a0>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	625a      	str	r2, [r3, #36]	; 0x24
		normalized_sqrt_of_sum_of_amp(&instAbs.number[0], &ft_array.number[8]);
 8004c0c:	4940      	ldr	r1, [pc, #256]	; (8004d10 <main+0x4e8>)
 8004c0e:	482f      	ldr	r0, [pc, #188]	; (8004ccc <main+0x4a4>)
 8004c10:	f7fc fcec 	bl	80015ec <normalized_sqrt_of_sum_of_amp>
		counter_array.number[13] = __HAL_TIM_GET_COUNTER(&htim2);
 8004c14:	4b2c      	ldr	r3, [pc, #176]	; (8004cc8 <main+0x4a0>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	4a2d      	ldr	r2, [pc, #180]	; (8004cd0 <main+0x4a8>)
 8004c1c:	6353      	str	r3, [r2, #52]	; 0x34

		// Ratio of I/Q Components
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004c1e:	4b2a      	ldr	r3, [pc, #168]	; (8004cc8 <main+0x4a0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2200      	movs	r2, #0
 8004c24:	625a      	str	r2, [r3, #36]	; 0x24
		ratio_iq(&rxBuffer.number[0], &ft_array.number[9]);
 8004c26:	493b      	ldr	r1, [pc, #236]	; (8004d14 <main+0x4ec>)
 8004c28:	4825      	ldr	r0, [pc, #148]	; (8004cc0 <main+0x498>)
 8004c2a:	f7fc fd15 	bl	8001658 <ratio_iq>
		counter_array.number[14] = __HAL_TIM_GET_COUNTER(&htim2);
 8004c2e:	4b26      	ldr	r3, [pc, #152]	; (8004cc8 <main+0x4a0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	4a26      	ldr	r2, [pc, #152]	; (8004cd0 <main+0x4a8>)
 8004c36:	6393      	str	r3, [r2, #56]	; 0x38

		// Gmax
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004c38:	4b23      	ldr	r3, [pc, #140]	; (8004cc8 <main+0x4a0>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	625a      	str	r2, [r3, #36]	; 0x24
		gmax(&rxBuffer.number[0], &ft_array.number[10]);
 8004c40:	4935      	ldr	r1, [pc, #212]	; (8004d18 <main+0x4f0>)
 8004c42:	481f      	ldr	r0, [pc, #124]	; (8004cc0 <main+0x498>)
 8004c44:	f7fc fd5a 	bl	80016fc <gmax>
		counter_array.number[15] = __HAL_TIM_GET_COUNTER(&htim2);
 8004c48:	4b1f      	ldr	r3, [pc, #124]	; (8004cc8 <main+0x4a0>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	4a20      	ldr	r2, [pc, #128]	; (8004cd0 <main+0x4a8>)
 8004c50:	63d3      	str	r3, [r2, #60]	; 0x3c

		// Kurtosis of the Absolute Amplitude
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004c52:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <main+0x4a0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2200      	movs	r2, #0
 8004c58:	625a      	str	r2, [r3, #36]	; 0x24
		kurtosis_of_abs_amplitude(&instAbs.number[0], &ft_array.number[11], frameSize);
 8004c5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c5e:	461a      	mov	r2, r3
 8004c60:	492e      	ldr	r1, [pc, #184]	; (8004d1c <main+0x4f4>)
 8004c62:	481a      	ldr	r0, [pc, #104]	; (8004ccc <main+0x4a4>)
 8004c64:	f7fc fe1c 	bl	80018a0 <kurtosis_of_abs_amplitude>
		counter_array.number[16] = __HAL_TIM_GET_COUNTER(&htim2);
 8004c68:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <main+0x4a0>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	4a18      	ldr	r2, [pc, #96]	; (8004cd0 <main+0x4a8>)
 8004c70:	6413      	str	r3, [r2, #64]	; 0x40

		// Kurtosis of the Absolute Frequency
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004c72:	4b15      	ldr	r3, [pc, #84]	; (8004cc8 <main+0x4a0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2200      	movs	r2, #0
 8004c78:	625a      	str	r2, [r3, #36]	; 0x24
		kurtosis_of_abs_freq(&instAbsFreq.number[0], &ft_array.number[12], frameSize - 1);
 8004c7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	461a      	mov	r2, r3
 8004c82:	4927      	ldr	r1, [pc, #156]	; (8004d20 <main+0x4f8>)
 8004c84:	481b      	ldr	r0, [pc, #108]	; (8004cf4 <main+0x4cc>)
 8004c86:	f7fc ff49 	bl	8001b1c <kurtosis_of_abs_freq>
		counter_array.number[17] = __HAL_TIM_GET_COUNTER(&htim2);
 8004c8a:	4b0f      	ldr	r3, [pc, #60]	; (8004cc8 <main+0x4a0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	4a0f      	ldr	r2, [pc, #60]	; (8004cd0 <main+0x4a8>)
 8004c92:	6453      	str	r3, [r2, #68]	; 0x44

		// Cumulant 20
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004c94:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <main+0x4a0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_20(&rxBuffer.number[0], &ft_array.number[13]);
 8004c9c:	4921      	ldr	r1, [pc, #132]	; (8004d24 <main+0x4fc>)
 8004c9e:	4808      	ldr	r0, [pc, #32]	; (8004cc0 <main+0x498>)
 8004ca0:	f7fe ff70 	bl	8003b84 <cumulant_20>
		counter_array.number[18] = __HAL_TIM_GET_COUNTER(&htim2);
 8004ca4:	4b08      	ldr	r3, [pc, #32]	; (8004cc8 <main+0x4a0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	4a09      	ldr	r2, [pc, #36]	; (8004cd0 <main+0x4a8>)
 8004cac:	6493      	str	r3, [r2, #72]	; 0x48

		// Cumulant 21
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004cae:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <main+0x4a0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	e038      	b.n	8004d28 <main+0x500>
 8004cb6:	bf00      	nop
 8004cb8:	24015e40 	.word	0x24015e40
 8004cbc:	58020400 	.word	0x58020400
 8004cc0:	24010f30 	.word	0x24010f30
 8004cc4:	58021000 	.word	0x58021000
 8004cc8:	24015e50 	.word	0x24015e50
 8004ccc:	24000f30 	.word	0x24000f30
 8004cd0:	24015d1c 	.word	0x24015d1c
 8004cd4:	24002f30 	.word	0x24002f30
 8004cd8:	24006f30 	.word	0x24006f30
 8004cdc:	24008f30 	.word	0x24008f30
 8004ce0:	2400cf30 	.word	0x2400cf30
 8004ce4:	24015d8c 	.word	0x24015d8c
 8004ce8:	24004f30 	.word	0x24004f30
 8004cec:	24015d90 	.word	0x24015d90
 8004cf0:	24015d94 	.word	0x24015d94
 8004cf4:	2400af30 	.word	0x2400af30
 8004cf8:	24015d98 	.word	0x24015d98
 8004cfc:	24015d9c 	.word	0x24015d9c
 8004d00:	2400ef30 	.word	0x2400ef30
 8004d04:	24015da0 	.word	0x24015da0
 8004d08:	24015da4 	.word	0x24015da4
 8004d0c:	24015da8 	.word	0x24015da8
 8004d10:	24015dac 	.word	0x24015dac
 8004d14:	24015db0 	.word	0x24015db0
 8004d18:	24015db4 	.word	0x24015db4
 8004d1c:	24015db8 	.word	0x24015db8
 8004d20:	24015dbc 	.word	0x24015dbc
 8004d24:	24015dc0 	.word	0x24015dc0
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_21(&rxBuffer.number[0], &ft_array.number[14]);
 8004d2a:	4944      	ldr	r1, [pc, #272]	; (8004e3c <main+0x614>)
 8004d2c:	4844      	ldr	r0, [pc, #272]	; (8004e40 <main+0x618>)
 8004d2e:	f7fe ff4f 	bl	8003bd0 <cumulant_21>
		counter_array.number[19] = __HAL_TIM_GET_COUNTER(&htim2);
 8004d32:	4b44      	ldr	r3, [pc, #272]	; (8004e44 <main+0x61c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	4a43      	ldr	r2, [pc, #268]	; (8004e48 <main+0x620>)
 8004d3a:	64d3      	str	r3, [r2, #76]	; 0x4c

		// Cumulant 40
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004d3c:	4b41      	ldr	r3, [pc, #260]	; (8004e44 <main+0x61c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2200      	movs	r2, #0
 8004d42:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_40(&rxBuffer.number[0], &ft_array.number[15]);
 8004d44:	4941      	ldr	r1, [pc, #260]	; (8004e4c <main+0x624>)
 8004d46:	483e      	ldr	r0, [pc, #248]	; (8004e40 <main+0x618>)
 8004d48:	f7fe ff4f 	bl	8003bea <cumulant_40>
		counter_array.number[20] = __HAL_TIM_GET_COUNTER(&htim2);
 8004d4c:	4b3d      	ldr	r3, [pc, #244]	; (8004e44 <main+0x61c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	4a3d      	ldr	r2, [pc, #244]	; (8004e48 <main+0x620>)
 8004d54:	6513      	str	r3, [r2, #80]	; 0x50

		// Cumulant 41
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004d56:	4b3b      	ldr	r3, [pc, #236]	; (8004e44 <main+0x61c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_41(&rxBuffer.number[0], &ft_array.number[16]);
 8004d5e:	493c      	ldr	r1, [pc, #240]	; (8004e50 <main+0x628>)
 8004d60:	4837      	ldr	r0, [pc, #220]	; (8004e40 <main+0x618>)
 8004d62:	f7fe ffa8 	bl	8003cb6 <cumulant_41>
		counter_array.number[21] = __HAL_TIM_GET_COUNTER(&htim2);
 8004d66:	4b37      	ldr	r3, [pc, #220]	; (8004e44 <main+0x61c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	4a36      	ldr	r2, [pc, #216]	; (8004e48 <main+0x620>)
 8004d6e:	6553      	str	r3, [r2, #84]	; 0x54

		// Cumulant 42
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004d70:	4b34      	ldr	r3, [pc, #208]	; (8004e44 <main+0x61c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2200      	movs	r2, #0
 8004d76:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_42(&rxBuffer.number[0], &ft_array.number[17]);
 8004d78:	4936      	ldr	r1, [pc, #216]	; (8004e54 <main+0x62c>)
 8004d7a:	4831      	ldr	r0, [pc, #196]	; (8004e40 <main+0x618>)
 8004d7c:	f7fe fff5 	bl	8003d6a <cumulant_42>
		counter_array.number[22] = __HAL_TIM_GET_COUNTER(&htim2);
 8004d80:	4b30      	ldr	r3, [pc, #192]	; (8004e44 <main+0x61c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	4a30      	ldr	r2, [pc, #192]	; (8004e48 <main+0x620>)
 8004d88:	6593      	str	r3, [r2, #88]	; 0x58

		// Cumulant 60
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004d8a:	4b2e      	ldr	r3, [pc, #184]	; (8004e44 <main+0x61c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_60(&rxBuffer.number[0], &ft_array.number[18]);
 8004d92:	4931      	ldr	r1, [pc, #196]	; (8004e58 <main+0x630>)
 8004d94:	482a      	ldr	r0, [pc, #168]	; (8004e40 <main+0x618>)
 8004d96:	f7ff f860 	bl	8003e5a <cumulant_60>
		counter_array.number[23] = __HAL_TIM_GET_COUNTER(&htim2);
 8004d9a:	4b2a      	ldr	r3, [pc, #168]	; (8004e44 <main+0x61c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	4a29      	ldr	r2, [pc, #164]	; (8004e48 <main+0x620>)
 8004da2:	65d3      	str	r3, [r2, #92]	; 0x5c

		// Cumulant 61
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004da4:	4b27      	ldr	r3, [pc, #156]	; (8004e44 <main+0x61c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2200      	movs	r2, #0
 8004daa:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_61(&rxBuffer.number[0], &ft_array.number[19]);
 8004dac:	492b      	ldr	r1, [pc, #172]	; (8004e5c <main+0x634>)
 8004dae:	4824      	ldr	r0, [pc, #144]	; (8004e40 <main+0x618>)
 8004db0:	f7ff f905 	bl	8003fbe <cumulant_61>
		counter_array.number[24] = __HAL_TIM_GET_COUNTER(&htim2);
 8004db4:	4b23      	ldr	r3, [pc, #140]	; (8004e44 <main+0x61c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	4a23      	ldr	r2, [pc, #140]	; (8004e48 <main+0x620>)
 8004dbc:	6613      	str	r3, [r2, #96]	; 0x60

		// Cumulant 62
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004dbe:	4b21      	ldr	r3, [pc, #132]	; (8004e44 <main+0x61c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_62(&rxBuffer.number[0], &ft_array.number[20]);
 8004dc6:	4926      	ldr	r1, [pc, #152]	; (8004e60 <main+0x638>)
 8004dc8:	481d      	ldr	r0, [pc, #116]	; (8004e40 <main+0x618>)
 8004dca:	f7ff f9c8 	bl	800415e <cumulant_62>
		counter_array.number[25] = __HAL_TIM_GET_COUNTER(&htim2);
 8004dce:	4b1d      	ldr	r3, [pc, #116]	; (8004e44 <main+0x61c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	4a1c      	ldr	r2, [pc, #112]	; (8004e48 <main+0x620>)
 8004dd6:	6653      	str	r3, [r2, #100]	; 0x64

		// Cumulant 63
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004dd8:	4b1a      	ldr	r3, [pc, #104]	; (8004e44 <main+0x61c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_63(&rxBuffer.number[0], &ft_array.number[21]);
 8004de0:	4920      	ldr	r1, [pc, #128]	; (8004e64 <main+0x63c>)
 8004de2:	4817      	ldr	r0, [pc, #92]	; (8004e40 <main+0x618>)
 8004de4:	f7ff faf7 	bl	80043d6 <cumulant_63>
		counter_array.number[26] = __HAL_TIM_GET_COUNTER(&htim2);
 8004de8:	4b16      	ldr	r3, [pc, #88]	; (8004e44 <main+0x61c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	4a16      	ldr	r2, [pc, #88]	; (8004e48 <main+0x620>)
 8004df0:	6693      	str	r3, [r2, #104]	; 0x68

		transmit_features(&ft_array.bytes[0], &counter_array.bytes[20]);
 8004df2:	491d      	ldr	r1, [pc, #116]	; (8004e68 <main+0x640>)
 8004df4:	481d      	ldr	r0, [pc, #116]	; (8004e6c <main+0x644>)
 8004df6:	f000 f9ad 	bl	8005154 <transmit_features>

		// Scale features (mean and var)
		preprocess_features(&ft_array.number[0], &scaled_ft_array.number[0]);
 8004dfa:	491d      	ldr	r1, [pc, #116]	; (8004e70 <main+0x648>)
 8004dfc:	481b      	ldr	r0, [pc, #108]	; (8004e6c <main+0x644>)
 8004dfe:	f000 fa53 	bl	80052a8 <preprocess_features>

		// Evaluate neural network
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004e02:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <main+0x61c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2200      	movs	r2, #0
 8004e08:	625a      	str	r2, [r3, #36]	; 0x24
		quantize_features(&scaled_ft_array.number[0], &q15_input_vector[0]);
 8004e0a:	f107 0308 	add.w	r3, r7, #8
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4817      	ldr	r0, [pc, #92]	; (8004e70 <main+0x648>)
 8004e12:	f000 fa55 	bl	80052c0 <quantize_features>
		fully_connected_run(&q15_input_vector[0], &predicted.number);
 8004e16:	f107 0308 	add.w	r3, r7, #8
 8004e1a:	4916      	ldr	r1, [pc, #88]	; (8004e74 <main+0x64c>)
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fc f84b 	bl	8000eb8 <fully_connected_run>
		counter_array.number[27] = __HAL_TIM_GET_COUNTER(&htim2);
 8004e22:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <main+0x61c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	4a07      	ldr	r2, [pc, #28]	; (8004e48 <main+0x620>)
 8004e2a:	66d3      	str	r3, [r2, #108]	; 0x6c
		transmit_prediction(&predicted.bytes[0], &counter_array.bytes[4*27]);
 8004e2c:	4912      	ldr	r1, [pc, #72]	; (8004e78 <main+0x650>)
 8004e2e:	4811      	ldr	r0, [pc, #68]	; (8004e74 <main+0x64c>)
 8004e30:	f000 f934 	bl	800509c <transmit_prediction>
		/*************************************************************************************************/
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		blink_orange_slow();
 8004e34:	f000 f904 	bl	8005040 <blink_orange_slow>
		if(HAL_UART_Receive_IT(&huart3, &rxBuffer.bytes[0], RX_DATA_SIZE*4) != HAL_OK)
 8004e38:	e5c9      	b.n	80049ce <main+0x1a6>
 8004e3a:	bf00      	nop
 8004e3c:	24015dc4 	.word	0x24015dc4
 8004e40:	24010f30 	.word	0x24010f30
 8004e44:	24015e50 	.word	0x24015e50
 8004e48:	24015d1c 	.word	0x24015d1c
 8004e4c:	24015dc8 	.word	0x24015dc8
 8004e50:	24015dcc 	.word	0x24015dcc
 8004e54:	24015dd0 	.word	0x24015dd0
 8004e58:	24015dd4 	.word	0x24015dd4
 8004e5c:	24015dd8 	.word	0x24015dd8
 8004e60:	24015ddc 	.word	0x24015ddc
 8004e64:	24015de0 	.word	0x24015de0
 8004e68:	24015d30 	.word	0x24015d30
 8004e6c:	24015d8c 	.word	0x24015d8c
 8004e70:	24015de4 	.word	0x24015de4
 8004e74:	24015e3c 	.word	0x24015e3c
 8004e78:	24015d88 	.word	0x24015d88

08004e7c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b0cc      	sub	sp, #304	; 0x130
 8004e80:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e82:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004e86:	224c      	movs	r2, #76	; 0x4c
 8004e88:	2100      	movs	r1, #0
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f007 fb30 	bl	800c4f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e90:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004e94:	2220      	movs	r2, #32
 8004e96:	2100      	movs	r1, #0
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f007 fb29 	bl	800c4f0 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e9e:	f107 0308 	add.w	r3, r7, #8
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	23bc      	movs	r3, #188	; 0xbc
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	f007 fb21 	bl	800c4f0 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8004eae:	2004      	movs	r0, #4
 8004eb0:	f001 fac2 	bl	8006438 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004eb4:	1d3b      	adds	r3, r7, #4
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	4b47      	ldr	r3, [pc, #284]	; (8004fd8 <SystemClock_Config+0x15c>)
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	4a46      	ldr	r2, [pc, #280]	; (8004fd8 <SystemClock_Config+0x15c>)
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ec6:	4b44      	ldr	r3, [pc, #272]	; (8004fd8 <SystemClock_Config+0x15c>)
 8004ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eca:	f003 0201 	and.w	r2, r3, #1
 8004ece:	1d3b      	adds	r3, r7, #4
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	4b42      	ldr	r3, [pc, #264]	; (8004fdc <SystemClock_Config+0x160>)
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	4a41      	ldr	r2, [pc, #260]	; (8004fdc <SystemClock_Config+0x160>)
 8004ed8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004edc:	6193      	str	r3, [r2, #24]
 8004ede:	4b3f      	ldr	r3, [pc, #252]	; (8004fdc <SystemClock_Config+0x160>)
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8004ee6:	1d3b      	adds	r3, r7, #4
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	1d3b      	adds	r3, r7, #4
 8004eec:	681b      	ldr	r3, [r3, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004eee:	bf00      	nop
 8004ef0:	4b3a      	ldr	r3, [pc, #232]	; (8004fdc <SystemClock_Config+0x160>)
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004efc:	d1f8      	bne.n	8004ef0 <SystemClock_Config+0x74>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004efe:	2302      	movs	r3, #2
 8004f00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8004f04:	2301      	movs	r3, #1
 8004f06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004f0a:	2340      	movs	r3, #64	; 0x40
 8004f0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f10:	2302      	movs	r3, #2
 8004f12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004f16:	2300      	movs	r3, #0
 8004f18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	RCC_OscInitStruct.PLL.PLLN = 50;
 8004f22:	2332      	movs	r3, #50	; 0x32
 8004f24:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	RCC_OscInitStruct.PLL.PLLP = 2;
 8004f28:	2302      	movs	r3, #2
 8004f2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8004f2e:	2302      	movs	r3, #2
 8004f30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8004f34:	2302      	movs	r3, #2
 8004f36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004f3a:	230c      	movs	r3, #12
 8004f3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004f40:	2300      	movs	r3, #0
 8004f42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004f46:	2300      	movs	r3, #0
 8004f48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f4c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004f50:	4618      	mov	r0, r3
 8004f52:	f001 facb 	bl	80064ec <HAL_RCC_OscConfig>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <SystemClock_Config+0xe4>
	{
		Error_Handler();
 8004f5c:	f000 faa4 	bl	80054a8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f60:	233f      	movs	r3, #63	; 0x3f
 8004f62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f66:	2303      	movs	r3, #3
 8004f68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004f72:	2308      	movs	r3, #8
 8004f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004f78:	2340      	movs	r3, #64	; 0x40
 8004f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004f7e:	2340      	movs	r3, #64	; 0x40
 8004f80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004f8c:	2340      	movs	r3, #64	; 0x40
 8004f8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004f92:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004f96:	2102      	movs	r1, #2
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f001 feb7 	bl	8006d0c <HAL_RCC_ClockConfig>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <SystemClock_Config+0x12c>
	{
		Error_Handler();
 8004fa4:	f000 fa80 	bl	80054a8 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004fa8:	f107 0308 	add.w	r3, r7, #8
 8004fac:	2202      	movs	r2, #2
 8004fae:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8004fb0:	f107 0308 	add.w	r3, r7, #8
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	675a      	str	r2, [r3, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004fb8:	f107 0308 	add.w	r3, r7, #8
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f002 fa29 	bl	8007414 <HAL_RCCEx_PeriphCLKConfig>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <SystemClock_Config+0x150>
	{
		Error_Handler();
 8004fc8:	f000 fa6e 	bl	80054a8 <Error_Handler>
	}
}
 8004fcc:	bf00      	nop
 8004fce:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	58000400 	.word	0x58000400
 8004fdc:	58024800 	.word	0x58024800

08004fe0 <clear_leds>:

/* USER CODE BEGIN 4 */
void clear_leds(){
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	4807      	ldr	r0, [pc, #28]	; (8005008 <clear_leds+0x28>)
 8004fea:	f001 f9dd 	bl	80063a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2102      	movs	r1, #2
 8004ff2:	4806      	ldr	r0, [pc, #24]	; (800500c <clear_leds+0x2c>)
 8004ff4:	f001 f9d8 	bl	80063a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ffe:	4802      	ldr	r0, [pc, #8]	; (8005008 <clear_leds+0x28>)
 8005000:	f001 f9d2 	bl	80063a8 <HAL_GPIO_WritePin>
}
 8005004:	bf00      	nop
 8005006:	bd80      	pop	{r7, pc}
 8005008:	58020400 	.word	0x58020400
 800500c:	58021000 	.word	0x58021000

08005010 <blink_red_fast>:
void light_leds(){
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
}
void blink_red_fast(){
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8005014:	2200      	movs	r2, #0
 8005016:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800501a:	4808      	ldr	r0, [pc, #32]	; (800503c <blink_red_fast+0x2c>)
 800501c:	f001 f9c4 	bl	80063a8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8005020:	2032      	movs	r0, #50	; 0x32
 8005022:	f000 fc8f 	bl	8005944 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8005026:	2201      	movs	r2, #1
 8005028:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800502c:	4803      	ldr	r0, [pc, #12]	; (800503c <blink_red_fast+0x2c>)
 800502e:	f001 f9bb 	bl	80063a8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8005032:	2032      	movs	r0, #50	; 0x32
 8005034:	f000 fc86 	bl	8005944 <HAL_Delay>
}
 8005038:	bf00      	nop
 800503a:	bd80      	pop	{r7, pc}
 800503c:	58020400 	.word	0x58020400

08005040 <blink_orange_slow>:
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_orange_slow(){
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8005044:	2200      	movs	r2, #0
 8005046:	2102      	movs	r1, #2
 8005048:	4808      	ldr	r0, [pc, #32]	; (800506c <blink_orange_slow+0x2c>)
 800504a:	f001 f9ad 	bl	80063a8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800504e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005052:	f000 fc77 	bl	8005944 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 8005056:	2201      	movs	r2, #1
 8005058:	2102      	movs	r1, #2
 800505a:	4804      	ldr	r0, [pc, #16]	; (800506c <blink_orange_slow+0x2c>)
 800505c:	f001 f9a4 	bl	80063a8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8005060:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005064:	f000 fc6e 	bl	8005944 <HAL_Delay>
}
 8005068:	bf00      	nop
 800506a:	bd80      	pop	{r7, pc}
 800506c:	58021000 	.word	0x58021000

08005070 <blink_green>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_green(){
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8005074:	2200      	movs	r2, #0
 8005076:	2101      	movs	r1, #1
 8005078:	4807      	ldr	r0, [pc, #28]	; (8005098 <blink_green+0x28>)
 800507a:	f001 f995 	bl	80063a8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800507e:	20c8      	movs	r0, #200	; 0xc8
 8005080:	f000 fc60 	bl	8005944 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8005084:	2201      	movs	r2, #1
 8005086:	2101      	movs	r1, #1
 8005088:	4803      	ldr	r0, [pc, #12]	; (8005098 <blink_green+0x28>)
 800508a:	f001 f98d 	bl	80063a8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800508e:	20c8      	movs	r0, #200	; 0xc8
 8005090:	f000 fc58 	bl	8005944 <HAL_Delay>
}
 8005094:	bf00      	nop
 8005096:	bd80      	pop	{r7, pc}
 8005098:	58020400 	.word	0x58020400

0800509c <transmit_prediction>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(500);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(500);
}
void transmit_prediction(uint8_t *value, uint8_t *counter){
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80050a6:	4827      	ldr	r0, [pc, #156]	; (8005144 <transmit_prediction+0xa8>)
 80050a8:	f005 f952 	bl	800a350 <UART_CheckIdleState>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d13f      	bne.n	8005132 <transmit_prediction+0x96>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 80050b2:	2204      	movs	r2, #4
 80050b4:	4924      	ldr	r1, [pc, #144]	; (8005148 <transmit_prediction+0xac>)
 80050b6:	4823      	ldr	r0, [pc, #140]	; (8005144 <transmit_prediction+0xa8>)
 80050b8:	f004 f812 	bl	80090e0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80050bc:	e001      	b.n	80050c2 <transmit_prediction+0x26>
			blink_red_fast();
 80050be:	f7ff ffa7 	bl	8005010 <blink_red_fast>
		while(UartReady != SET){
 80050c2:	4b22      	ldr	r3, [pc, #136]	; (800514c <transmit_prediction+0xb0>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d1f8      	bne.n	80050be <transmit_prediction+0x22>
		}
		UartReady = RESET;
 80050cc:	4b1f      	ldr	r3, [pc, #124]	; (800514c <transmit_prediction+0xb0>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &value[0], 4);
 80050d2:	2204      	movs	r2, #4
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	481b      	ldr	r0, [pc, #108]	; (8005144 <transmit_prediction+0xa8>)
 80050d8:	f004 f802 	bl	80090e0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80050dc:	e001      	b.n	80050e2 <transmit_prediction+0x46>
			blink_red_fast();
 80050de:	f7ff ff97 	bl	8005010 <blink_red_fast>
		while(UartReady != SET){
 80050e2:	4b1a      	ldr	r3, [pc, #104]	; (800514c <transmit_prediction+0xb0>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d1f8      	bne.n	80050de <transmit_prediction+0x42>
		}
		UartReady = RESET;
 80050ec:	4b17      	ldr	r3, [pc, #92]	; (800514c <transmit_prediction+0xb0>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &counter[0], 4);
 80050f2:	2204      	movs	r2, #4
 80050f4:	6839      	ldr	r1, [r7, #0]
 80050f6:	4813      	ldr	r0, [pc, #76]	; (8005144 <transmit_prediction+0xa8>)
 80050f8:	f003 fff2 	bl	80090e0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80050fc:	e001      	b.n	8005102 <transmit_prediction+0x66>
			blink_red_fast();
 80050fe:	f7ff ff87 	bl	8005010 <blink_red_fast>
		while(UartReady != SET){
 8005102:	4b12      	ldr	r3, [pc, #72]	; (800514c <transmit_prediction+0xb0>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b01      	cmp	r3, #1
 800510a:	d1f8      	bne.n	80050fe <transmit_prediction+0x62>
		}
		UartReady = RESET;
 800510c:	4b0f      	ldr	r3, [pc, #60]	; (800514c <transmit_prediction+0xb0>)
 800510e:	2200      	movs	r2, #0
 8005110:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8005112:	2204      	movs	r2, #4
 8005114:	490e      	ldr	r1, [pc, #56]	; (8005150 <transmit_prediction+0xb4>)
 8005116:	480b      	ldr	r0, [pc, #44]	; (8005144 <transmit_prediction+0xa8>)
 8005118:	f003 ffe2 	bl	80090e0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800511c:	e001      	b.n	8005122 <transmit_prediction+0x86>
			blink_red_fast();
 800511e:	f7ff ff77 	bl	8005010 <blink_red_fast>
		while(UartReady != SET){
 8005122:	4b0a      	ldr	r3, [pc, #40]	; (800514c <transmit_prediction+0xb0>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b01      	cmp	r3, #1
 800512a:	d1f8      	bne.n	800511e <transmit_prediction+0x82>
		}
		UartReady = RESET;
 800512c:	4b07      	ldr	r3, [pc, #28]	; (800514c <transmit_prediction+0xb0>)
 800512e:	2200      	movs	r2, #0
 8005130:	701a      	strb	r2, [r3, #0]
	}
	blink_orange_slow();
 8005132:	f7ff ff85 	bl	8005040 <blink_orange_slow>
	clear_leds();
 8005136:	f7ff ff53 	bl	8004fe0 <clear_leds>
}
 800513a:	bf00      	nop
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	24015e9c 	.word	0x24015e9c
 8005148:	0800cf58 	.word	0x0800cf58
 800514c:	24015e40 	.word	0x24015e40
 8005150:	0800cf5c 	.word	0x0800cf5c

08005154 <transmit_features>:
void transmit_features(uint8_t *value, uint8_t *counter){
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800515e:	4827      	ldr	r0, [pc, #156]	; (80051fc <transmit_features+0xa8>)
 8005160:	f005 f8f6 	bl	800a350 <UART_CheckIdleState>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d13f      	bne.n	80051ea <transmit_features+0x96>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 800516a:	2204      	movs	r2, #4
 800516c:	4924      	ldr	r1, [pc, #144]	; (8005200 <transmit_features+0xac>)
 800516e:	4823      	ldr	r0, [pc, #140]	; (80051fc <transmit_features+0xa8>)
 8005170:	f003 ffb6 	bl	80090e0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8005174:	e001      	b.n	800517a <transmit_features+0x26>
			blink_red_fast();
 8005176:	f7ff ff4b 	bl	8005010 <blink_red_fast>
		while(UartReady != SET){
 800517a:	4b22      	ldr	r3, [pc, #136]	; (8005204 <transmit_features+0xb0>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b01      	cmp	r3, #1
 8005182:	d1f8      	bne.n	8005176 <transmit_features+0x22>
		}
		UartReady = RESET;
 8005184:	4b1f      	ldr	r3, [pc, #124]	; (8005204 <transmit_features+0xb0>)
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &value[0], 4*22);
 800518a:	2258      	movs	r2, #88	; 0x58
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	481b      	ldr	r0, [pc, #108]	; (80051fc <transmit_features+0xa8>)
 8005190:	f003 ffa6 	bl	80090e0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8005194:	e001      	b.n	800519a <transmit_features+0x46>
			blink_red_fast();
 8005196:	f7ff ff3b 	bl	8005010 <blink_red_fast>
		while(UartReady != SET){
 800519a:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <transmit_features+0xb0>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d1f8      	bne.n	8005196 <transmit_features+0x42>
		}
		UartReady = RESET;
 80051a4:	4b17      	ldr	r3, [pc, #92]	; (8005204 <transmit_features+0xb0>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &counter[0], 4*22);
 80051aa:	2258      	movs	r2, #88	; 0x58
 80051ac:	6839      	ldr	r1, [r7, #0]
 80051ae:	4813      	ldr	r0, [pc, #76]	; (80051fc <transmit_features+0xa8>)
 80051b0:	f003 ff96 	bl	80090e0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80051b4:	e001      	b.n	80051ba <transmit_features+0x66>
			blink_red_fast();
 80051b6:	f7ff ff2b 	bl	8005010 <blink_red_fast>
		while(UartReady != SET){
 80051ba:	4b12      	ldr	r3, [pc, #72]	; (8005204 <transmit_features+0xb0>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d1f8      	bne.n	80051b6 <transmit_features+0x62>
		}
		UartReady = RESET;
 80051c4:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <transmit_features+0xb0>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 80051ca:	2204      	movs	r2, #4
 80051cc:	490e      	ldr	r1, [pc, #56]	; (8005208 <transmit_features+0xb4>)
 80051ce:	480b      	ldr	r0, [pc, #44]	; (80051fc <transmit_features+0xa8>)
 80051d0:	f003 ff86 	bl	80090e0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80051d4:	e001      	b.n	80051da <transmit_features+0x86>
			blink_red_fast();
 80051d6:	f7ff ff1b 	bl	8005010 <blink_red_fast>
		while(UartReady != SET){
 80051da:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <transmit_features+0xb0>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d1f8      	bne.n	80051d6 <transmit_features+0x82>
		}
		UartReady = RESET;
 80051e4:	4b07      	ldr	r3, [pc, #28]	; (8005204 <transmit_features+0xb0>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	701a      	strb	r2, [r3, #0]
	}
	blink_orange_slow();
 80051ea:	f7ff ff29 	bl	8005040 <blink_orange_slow>
	clear_leds();
 80051ee:	f7ff fef7 	bl	8004fe0 <clear_leds>
}
 80051f2:	bf00      	nop
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	24015e9c 	.word	0x24015e9c
 8005200:	0800cf58 	.word	0x0800cf58
 8005204:	24015e40 	.word	0x24015e40
 8005208:	0800cf5c 	.word	0x0800cf5c

0800520c <transmit_echo_wandb>:
		UartReady = RESET;
	}
	blink_orange_slow();
	clear_leds();
}
void transmit_echo_wandb(uint8_t *array, uint16_t size){
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	807b      	strh	r3, [r7, #2]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8005218:	481f      	ldr	r0, [pc, #124]	; (8005298 <transmit_echo_wandb+0x8c>)
 800521a:	f005 f899 	bl	800a350 <UART_CheckIdleState>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d130      	bne.n	8005286 <transmit_echo_wandb+0x7a>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 2);
 8005224:	2202      	movs	r2, #2
 8005226:	491d      	ldr	r1, [pc, #116]	; (800529c <transmit_echo_wandb+0x90>)
 8005228:	481b      	ldr	r0, [pc, #108]	; (8005298 <transmit_echo_wandb+0x8c>)
 800522a:	f003 ff59 	bl	80090e0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800522e:	e001      	b.n	8005234 <transmit_echo_wandb+0x28>
			blink_red_fast();
 8005230:	f7ff feee 	bl	8005010 <blink_red_fast>
		while(UartReady != SET){
 8005234:	4b1a      	ldr	r3, [pc, #104]	; (80052a0 <transmit_echo_wandb+0x94>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b01      	cmp	r3, #1
 800523c:	d1f8      	bne.n	8005230 <transmit_echo_wandb+0x24>
		}
		UartReady = RESET;
 800523e:	4b18      	ldr	r3, [pc, #96]	; (80052a0 <transmit_echo_wandb+0x94>)
 8005240:	2200      	movs	r2, #0
 8005242:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &array[0], size);
 8005244:	887b      	ldrh	r3, [r7, #2]
 8005246:	461a      	mov	r2, r3
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	4813      	ldr	r0, [pc, #76]	; (8005298 <transmit_echo_wandb+0x8c>)
 800524c:	f003 ff48 	bl	80090e0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8005250:	e001      	b.n	8005256 <transmit_echo_wandb+0x4a>
			blink_red_fast();
 8005252:	f7ff fedd 	bl	8005010 <blink_red_fast>
		while(UartReady != SET){
 8005256:	4b12      	ldr	r3, [pc, #72]	; (80052a0 <transmit_echo_wandb+0x94>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b01      	cmp	r3, #1
 800525e:	d1f8      	bne.n	8005252 <transmit_echo_wandb+0x46>
		}
		UartReady = RESET;
 8005260:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <transmit_echo_wandb+0x94>)
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 2);
 8005266:	2202      	movs	r2, #2
 8005268:	490e      	ldr	r1, [pc, #56]	; (80052a4 <transmit_echo_wandb+0x98>)
 800526a:	480b      	ldr	r0, [pc, #44]	; (8005298 <transmit_echo_wandb+0x8c>)
 800526c:	f003 ff38 	bl	80090e0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8005270:	e001      	b.n	8005276 <transmit_echo_wandb+0x6a>
			blink_red_fast();
 8005272:	f7ff fecd 	bl	8005010 <blink_red_fast>
		while(UartReady != SET){
 8005276:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <transmit_echo_wandb+0x94>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b01      	cmp	r3, #1
 800527e:	d1f8      	bne.n	8005272 <transmit_echo_wandb+0x66>
		}
		UartReady = RESET;
 8005280:	4b07      	ldr	r3, [pc, #28]	; (80052a0 <transmit_echo_wandb+0x94>)
 8005282:	2200      	movs	r2, #0
 8005284:	701a      	strb	r2, [r3, #0]
	}
	blink_orange_slow();
 8005286:	f7ff fedb 	bl	8005040 <blink_orange_slow>
	clear_leds();
 800528a:	f7ff fea9 	bl	8004fe0 <clear_leds>
}
 800528e:	bf00      	nop
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	24015e9c 	.word	0x24015e9c
 800529c:	0800cf58 	.word	0x0800cf58
 80052a0:	24015e40 	.word	0x24015e40
 80052a4:	0800cf5c 	.word	0x0800cf5c

080052a8 <preprocess_features>:
		UartReady = RESET;
	}
	blink_orange_slow();
	clear_leds();
}
void preprocess_features(float32_t in[], float32_t out[]){
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]

}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <quantize_features>:
void quantize_features(float32_t in[], q15_t out[]){
 80052c0:	b580      	push	{r7, lr}
 80052c2:	ed2d 8b02 	vpush	{d8}
 80052c6:	b08c      	sub	sp, #48	; 0x30
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
	const int16_t min_int16_t = SHRT_MIN;
 80052ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	const int16_t max_int16_t = SHRT_MAX;
 80052d4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80052d8:	857b      	strh	r3, [r7, #42]	; 0x2a
	const float32_t max_float = FLT_MAX;
 80052da:	4b62      	ldr	r3, [pc, #392]	; (8005464 <quantize_features+0x1a4>)
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24

	float32_t min_range = 0.0f;
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]
	uint32_t min_index = 0;
 80052e4:	2300      	movs	r3, #0
 80052e6:	613b      	str	r3, [r7, #16]
	float32_t max_range = 0.0f;
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]
	uint32_t max_index = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	60bb      	str	r3, [r7, #8]
	float32_t scale_factor_from_min_side = 0.0f;
 80052f2:	f04f 0300 	mov.w	r3, #0
 80052f6:	623b      	str	r3, [r7, #32]
	float32_t scale_factor_from_max_side = 0.0f;
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	61fb      	str	r3, [r7, #28]
	float32_t scale_factor = 0.0f;
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	61bb      	str	r3, [r7, #24]

	arm_min_f32(in, number_of_features, &min_range, &min_index);
 8005304:	2116      	movs	r1, #22
 8005306:	f107 0310 	add.w	r3, r7, #16
 800530a:	f107 0214 	add.w	r2, r7, #20
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f005 fe2c 	bl	800af6c <arm_min_f32>
	arm_max_f32(in, number_of_features, &max_range, &max_index);
 8005314:	2116      	movs	r1, #22
 8005316:	f107 0308 	add.w	r3, r7, #8
 800531a:	f107 020c 	add.w	r2, r7, #12
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f005 ff1a 	bl	800b158 <arm_max_f32>
	scale_factor_from_min_side = (min_int16_t * min_range > 0) ? min_int16_t / min_range : max_float;
 8005324:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005328:	ee07 3a90 	vmov	s15, r3
 800532c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005330:	edd7 7a05 	vldr	s15, [r7, #20]
 8005334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800533c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005340:	dd0a      	ble.n	8005358 <quantize_features+0x98>
 8005342:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800534e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005356:	e001      	b.n	800535c <quantize_features+0x9c>
 8005358:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800535c:	edc7 7a08 	vstr	s15, [r7, #32]
	scale_factor_from_max_side = (max_int16_t * max_range > 0) ? max_int16_t / max_range : max_float;
 8005360:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005364:	ee07 3a90 	vmov	s15, r3
 8005368:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800536c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005374:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800537c:	dd0a      	ble.n	8005394 <quantize_features+0xd4>
 800537e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800538a:	ed97 7a03 	vldr	s14, [r7, #12]
 800538e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005392:	e001      	b.n	8005398 <quantize_features+0xd8>
 8005394:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005398:	edc7 7a07 	vstr	s15, [r7, #28]
	scale_factor = fminf(scale_factor_from_min_side, scale_factor_from_max_side);
 800539c:	edd7 0a07 	vldr	s1, [r7, #28]
 80053a0:	ed97 0a08 	vldr	s0, [r7, #32]
 80053a4:	f007 f981 	bl	800c6aa <fminf>
 80053a8:	ed87 0a06 	vstr	s0, [r7, #24]

	min_range = min_int16_t / scale_factor;
 80053ac:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80053b0:	ee07 3a90 	vmov	s15, r3
 80053b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80053b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80053bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053c0:	edc7 7a05 	vstr	s15, [r7, #20]
	max_range = max_int16_t / scale_factor;
 80053c4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80053c8:	ee07 3a90 	vmov	s15, r3
 80053cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80053d0:	ed97 7a06 	vldr	s14, [r7, #24]
 80053d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053d8:	edc7 7a03 	vstr	s15, [r7, #12]

	for(uint8_t i = 0; i < number_of_features; i++){
 80053dc:	2300      	movs	r3, #0
 80053de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80053e2:	e034      	b.n	800544e <quantize_features+0x18e>
		out[i] = (int16_t) roundf(fminf(max_range, fmaxf(min_range, in[i])) * scale_factor);
 80053e4:	ed97 8a03 	vldr	s16, [r7, #12]
 80053e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80053ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	4413      	add	r3, r2
 80053f6:	ed93 7a00 	vldr	s14, [r3]
 80053fa:	eef0 0a47 	vmov.f32	s1, s14
 80053fe:	eeb0 0a67 	vmov.f32	s0, s15
 8005402:	f007 f937 	bl	800c674 <fmaxf>
 8005406:	eef0 7a40 	vmov.f32	s15, s0
 800540a:	eef0 0a67 	vmov.f32	s1, s15
 800540e:	eeb0 0a48 	vmov.f32	s0, s16
 8005412:	f007 f94a 	bl	800c6aa <fminf>
 8005416:	eeb0 7a40 	vmov.f32	s14, s0
 800541a:	edd7 7a06 	vldr	s15, [r7, #24]
 800541e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005422:	eeb0 0a67 	vmov.f32	s0, s15
 8005426:	f007 f977 	bl	800c718 <roundf>
 800542a:	eef0 7a40 	vmov.f32	s15, s0
 800542e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	4413      	add	r3, r2
 8005438:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800543c:	ee17 2a90 	vmov	r2, s15
 8005440:	b212      	sxth	r2, r2
 8005442:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < number_of_features; i++){
 8005444:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005448:	3301      	adds	r3, #1
 800544a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800544e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005452:	2216      	movs	r2, #22
 8005454:	4293      	cmp	r3, r2
 8005456:	d3c5      	bcc.n	80053e4 <quantize_features+0x124>
	}
}
 8005458:	bf00      	nop
 800545a:	3730      	adds	r7, #48	; 0x30
 800545c:	46bd      	mov	sp, r7
 800545e:	ecbd 8b02 	vpop	{d8}
 8005462:	bd80      	pop	{r7, pc}
 8005464:	7f7fffff 	.word	0x7f7fffff

08005468 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart3){
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8005470:	4b04      	ldr	r3, [pc, #16]	; (8005484 <HAL_UART_TxCpltCallback+0x1c>)
 8005472:	2201      	movs	r2, #1
 8005474:	701a      	strb	r2, [r3, #0]
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	24015e40 	.word	0x24015e40

08005488 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart3){
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8005490:	4b04      	ldr	r3, [pc, #16]	; (80054a4 <HAL_UART_RxCpltCallback+0x1c>)
 8005492:	2201      	movs	r2, #1
 8005494:	701a      	strb	r2, [r3, #0]
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	24015e40 	.word	0x24015e40

080054a8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80054ac:	bf00      	nop
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
	...

080054b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054be:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <HAL_MspInit+0x30>)
 80054c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054c4:	4a08      	ldr	r2, [pc, #32]	; (80054e8 <HAL_MspInit+0x30>)
 80054c6:	f043 0302 	orr.w	r3, r3, #2
 80054ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80054ce:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <HAL_MspInit+0x30>)
 80054d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	607b      	str	r3, [r7, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	58024400 	.word	0x58024400

080054ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80054f0:	bf00      	nop
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054fa:	b480      	push	{r7}
 80054fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054fe:	e7fe      	b.n	80054fe <HardFault_Handler+0x4>

08005500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005504:	e7fe      	b.n	8005504 <MemManage_Handler+0x4>

08005506 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005506:	b480      	push	{r7}
 8005508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800550a:	e7fe      	b.n	800550a <BusFault_Handler+0x4>

0800550c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005510:	e7fe      	b.n	8005510 <UsageFault_Handler+0x4>

08005512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005512:	b480      	push	{r7}
 8005514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005516:	bf00      	nop
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005524:	bf00      	nop
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800552e:	b480      	push	{r7}
 8005530:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005532:	bf00      	nop
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005540:	f000 f9e0 	bl	8005904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005544:	bf00      	nop
 8005546:	bd80      	pop	{r7, pc}

08005548 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800554c:	4802      	ldr	r0, [pc, #8]	; (8005558 <USART3_IRQHandler+0x10>)
 800554e:	f003 ff23 	bl	8009398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005552:	bf00      	nop
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	24015e9c 	.word	0x24015e9c

0800555c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005564:	4b11      	ldr	r3, [pc, #68]	; (80055ac <_sbrk+0x50>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d102      	bne.n	8005572 <_sbrk+0x16>
		heap_end = &end;
 800556c:	4b0f      	ldr	r3, [pc, #60]	; (80055ac <_sbrk+0x50>)
 800556e:	4a10      	ldr	r2, [pc, #64]	; (80055b0 <_sbrk+0x54>)
 8005570:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005572:	4b0e      	ldr	r3, [pc, #56]	; (80055ac <_sbrk+0x50>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005578:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <_sbrk+0x50>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4413      	add	r3, r2
 8005580:	466a      	mov	r2, sp
 8005582:	4293      	cmp	r3, r2
 8005584:	d907      	bls.n	8005596 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005586:	f006 ff79 	bl	800c47c <__errno>
 800558a:	4602      	mov	r2, r0
 800558c:	230c      	movs	r3, #12
 800558e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005590:	f04f 33ff 	mov.w	r3, #4294967295
 8005594:	e006      	b.n	80055a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8005596:	4b05      	ldr	r3, [pc, #20]	; (80055ac <_sbrk+0x50>)
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4413      	add	r3, r2
 800559e:	4a03      	ldr	r2, [pc, #12]	; (80055ac <_sbrk+0x50>)
 80055a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80055a2:	68fb      	ldr	r3, [r7, #12]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	24015e44 	.word	0x24015e44
 80055b0:	24015f30 	.word	0x24015f30

080055b4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80055ba:	f107 0310 	add.w	r3, r7, #16
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	605a      	str	r2, [r3, #4]
 80055c4:	609a      	str	r2, [r3, #8]
 80055c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055c8:	1d3b      	adds	r3, r7, #4
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	605a      	str	r2, [r3, #4]
 80055d0:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80055d2:	4b1e      	ldr	r3, [pc, #120]	; (800564c <MX_TIM2_Init+0x98>)
 80055d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80055d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80055da:	4b1c      	ldr	r3, [pc, #112]	; (800564c <MX_TIM2_Init+0x98>)
 80055dc:	2200      	movs	r2, #0
 80055de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055e0:	4b1a      	ldr	r3, [pc, #104]	; (800564c <MX_TIM2_Init+0x98>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80055e6:	4b19      	ldr	r3, [pc, #100]	; (800564c <MX_TIM2_Init+0x98>)
 80055e8:	f04f 32ff 	mov.w	r2, #4294967295
 80055ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055ee:	4b17      	ldr	r3, [pc, #92]	; (800564c <MX_TIM2_Init+0x98>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055f4:	4b15      	ldr	r3, [pc, #84]	; (800564c <MX_TIM2_Init+0x98>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80055fa:	4814      	ldr	r0, [pc, #80]	; (800564c <MX_TIM2_Init+0x98>)
 80055fc:	f003 fa0a 	bl	8008a14 <HAL_TIM_Base_Init>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005606:	f7ff ff4f 	bl	80054a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800560a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800560e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005610:	f107 0310 	add.w	r3, r7, #16
 8005614:	4619      	mov	r1, r3
 8005616:	480d      	ldr	r0, [pc, #52]	; (800564c <MX_TIM2_Init+0x98>)
 8005618:	f003 fa82 	bl	8008b20 <HAL_TIM_ConfigClockSource>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005622:	f7ff ff41 	bl	80054a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005626:	2300      	movs	r3, #0
 8005628:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800562a:	2300      	movs	r3, #0
 800562c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800562e:	1d3b      	adds	r3, r7, #4
 8005630:	4619      	mov	r1, r3
 8005632:	4806      	ldr	r0, [pc, #24]	; (800564c <MX_TIM2_Init+0x98>)
 8005634:	f003 fc7c 	bl	8008f30 <HAL_TIMEx_MasterConfigSynchronization>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800563e:	f7ff ff33 	bl	80054a8 <Error_Handler>
  }

}
 8005642:	bf00      	nop
 8005644:	3720      	adds	r7, #32
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	24015e50 	.word	0x24015e50

08005650 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005660:	d10e      	bne.n	8005680 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005662:	4b0a      	ldr	r3, [pc, #40]	; (800568c <HAL_TIM_Base_MspInit+0x3c>)
 8005664:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005668:	4a08      	ldr	r2, [pc, #32]	; (800568c <HAL_TIM_Base_MspInit+0x3c>)
 800566a:	f043 0301 	orr.w	r3, r3, #1
 800566e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005672:	4b06      	ldr	r3, [pc, #24]	; (800568c <HAL_TIM_Base_MspInit+0x3c>)
 8005674:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005680:	bf00      	nop
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	58024400 	.word	0x58024400

08005690 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8005694:	4b22      	ldr	r3, [pc, #136]	; (8005720 <MX_USART3_UART_Init+0x90>)
 8005696:	4a23      	ldr	r2, [pc, #140]	; (8005724 <MX_USART3_UART_Init+0x94>)
 8005698:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800569a:	4b21      	ldr	r3, [pc, #132]	; (8005720 <MX_USART3_UART_Init+0x90>)
 800569c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80056a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80056a2:	4b1f      	ldr	r3, [pc, #124]	; (8005720 <MX_USART3_UART_Init+0x90>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80056a8:	4b1d      	ldr	r3, [pc, #116]	; (8005720 <MX_USART3_UART_Init+0x90>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80056ae:	4b1c      	ldr	r3, [pc, #112]	; (8005720 <MX_USART3_UART_Init+0x90>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80056b4:	4b1a      	ldr	r3, [pc, #104]	; (8005720 <MX_USART3_UART_Init+0x90>)
 80056b6:	220c      	movs	r2, #12
 80056b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056ba:	4b19      	ldr	r3, [pc, #100]	; (8005720 <MX_USART3_UART_Init+0x90>)
 80056bc:	2200      	movs	r2, #0
 80056be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80056c0:	4b17      	ldr	r3, [pc, #92]	; (8005720 <MX_USART3_UART_Init+0x90>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80056c6:	4b16      	ldr	r3, [pc, #88]	; (8005720 <MX_USART3_UART_Init+0x90>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80056cc:	4b14      	ldr	r3, [pc, #80]	; (8005720 <MX_USART3_UART_Init+0x90>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80056d2:	4b13      	ldr	r3, [pc, #76]	; (8005720 <MX_USART3_UART_Init+0x90>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80056d8:	4811      	ldr	r0, [pc, #68]	; (8005720 <MX_USART3_UART_Init+0x90>)
 80056da:	f003 fcb1 	bl	8009040 <HAL_UART_Init>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80056e4:	f7ff fee0 	bl	80054a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80056e8:	2100      	movs	r1, #0
 80056ea:	480d      	ldr	r0, [pc, #52]	; (8005720 <MX_USART3_UART_Init+0x90>)
 80056ec:	f005 fa6d 	bl	800abca <HAL_UARTEx_SetTxFifoThreshold>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80056f6:	f7ff fed7 	bl	80054a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80056fa:	2100      	movs	r1, #0
 80056fc:	4808      	ldr	r0, [pc, #32]	; (8005720 <MX_USART3_UART_Init+0x90>)
 80056fe:	f005 faa2 	bl	800ac46 <HAL_UARTEx_SetRxFifoThreshold>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005708:	f7ff fece 	bl	80054a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800570c:	4804      	ldr	r0, [pc, #16]	; (8005720 <MX_USART3_UART_Init+0x90>)
 800570e:	f005 fa23 	bl	800ab58 <HAL_UARTEx_DisableFifoMode>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005718:	f7ff fec6 	bl	80054a8 <Error_Handler>
  }

}
 800571c:	bf00      	nop
 800571e:	bd80      	pop	{r7, pc}
 8005720:	24015e9c 	.word	0x24015e9c
 8005724:	40004800 	.word	0x40004800

08005728 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08a      	sub	sp, #40	; 0x28
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005730:	f107 0314 	add.w	r3, r7, #20
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	605a      	str	r2, [r3, #4]
 800573a:	609a      	str	r2, [r3, #8]
 800573c:	60da      	str	r2, [r3, #12]
 800573e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a1e      	ldr	r2, [pc, #120]	; (80057c0 <HAL_UART_MspInit+0x98>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d136      	bne.n	80057b8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800574a:	4b1e      	ldr	r3, [pc, #120]	; (80057c4 <HAL_UART_MspInit+0x9c>)
 800574c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005750:	4a1c      	ldr	r2, [pc, #112]	; (80057c4 <HAL_UART_MspInit+0x9c>)
 8005752:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005756:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800575a:	4b1a      	ldr	r3, [pc, #104]	; (80057c4 <HAL_UART_MspInit+0x9c>)
 800575c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005768:	4b16      	ldr	r3, [pc, #88]	; (80057c4 <HAL_UART_MspInit+0x9c>)
 800576a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800576e:	4a15      	ldr	r2, [pc, #84]	; (80057c4 <HAL_UART_MspInit+0x9c>)
 8005770:	f043 0308 	orr.w	r3, r3, #8
 8005774:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005778:	4b12      	ldr	r3, [pc, #72]	; (80057c4 <HAL_UART_MspInit+0x9c>)
 800577a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800577e:	f003 0308 	and.w	r3, r3, #8
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005786:	f44f 7340 	mov.w	r3, #768	; 0x300
 800578a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578c:	2302      	movs	r3, #2
 800578e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005790:	2300      	movs	r3, #0
 8005792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005794:	2300      	movs	r3, #0
 8005796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005798:	2307      	movs	r3, #7
 800579a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800579c:	f107 0314 	add.w	r3, r7, #20
 80057a0:	4619      	mov	r1, r3
 80057a2:	4809      	ldr	r0, [pc, #36]	; (80057c8 <HAL_UART_MspInit+0xa0>)
 80057a4:	f000 fc50 	bl	8006048 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80057a8:	2200      	movs	r2, #0
 80057aa:	2100      	movs	r1, #0
 80057ac:	2027      	movs	r0, #39	; 0x27
 80057ae:	f000 f9d2 	bl	8005b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80057b2:	2027      	movs	r0, #39	; 0x27
 80057b4:	f000 f9e9 	bl	8005b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80057b8:	bf00      	nop
 80057ba:	3728      	adds	r7, #40	; 0x28
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40004800 	.word	0x40004800
 80057c4:	58024400 	.word	0x58024400
 80057c8:	58020c00 	.word	0x58020c00

080057cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80057cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005804 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80057d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80057d2:	e003      	b.n	80057dc <LoopCopyDataInit>

080057d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80057d4:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80057d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80057d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80057da:	3104      	adds	r1, #4

080057dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80057dc:	480b      	ldr	r0, [pc, #44]	; (800580c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80057de:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80057e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80057e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80057e4:	d3f6      	bcc.n	80057d4 <CopyDataInit>
  ldr  r2, =_sbss
 80057e6:	4a0b      	ldr	r2, [pc, #44]	; (8005814 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80057e8:	e002      	b.n	80057f0 <LoopFillZerobss>

080057ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80057ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80057ec:	f842 3b04 	str.w	r3, [r2], #4

080057f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80057f0:	4b09      	ldr	r3, [pc, #36]	; (8005818 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80057f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80057f4:	d3f9      	bcc.n	80057ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80057f6:	f7fa ff9f 	bl	8000738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057fa:	f006 fe45 	bl	800c488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057fe:	f7ff f813 	bl	8004828 <main>
  bx  lr    
 8005802:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005804:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005808:	08012d80 	.word	0x08012d80
  ldr  r0, =_sdata
 800580c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8005810:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 8005814:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 8005818:	24015f30 	.word	0x24015f30

0800581c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800581c:	e7fe      	b.n	800581c <ADC3_IRQHandler>
	...

08005820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005826:	2003      	movs	r0, #3
 8005828:	f000 f98a 	bl	8005b40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800582c:	f001 fc24 	bl	8007078 <HAL_RCC_GetSysClockFreq>
 8005830:	4601      	mov	r1, r0
 8005832:	4b15      	ldr	r3, [pc, #84]	; (8005888 <HAL_Init+0x68>)
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	0a1b      	lsrs	r3, r3, #8
 8005838:	f003 030f 	and.w	r3, r3, #15
 800583c:	4a13      	ldr	r2, [pc, #76]	; (800588c <HAL_Init+0x6c>)
 800583e:	5cd3      	ldrb	r3, [r2, r3]
 8005840:	f003 031f 	and.w	r3, r3, #31
 8005844:	fa21 f303 	lsr.w	r3, r1, r3
 8005848:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800584a:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <HAL_Init+0x68>)
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	f003 030f 	and.w	r3, r3, #15
 8005852:	4a0e      	ldr	r2, [pc, #56]	; (800588c <HAL_Init+0x6c>)
 8005854:	5cd3      	ldrb	r3, [r2, r3]
 8005856:	f003 031f 	and.w	r3, r3, #31
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	fa22 f303 	lsr.w	r3, r2, r3
 8005860:	4a0b      	ldr	r2, [pc, #44]	; (8005890 <HAL_Init+0x70>)
 8005862:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005864:	4a0b      	ldr	r2, [pc, #44]	; (8005894 <HAL_Init+0x74>)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800586a:	2000      	movs	r0, #0
 800586c:	f000 f814 	bl	8005898 <HAL_InitTick>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e002      	b.n	8005880 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800587a:	f7ff fe1d 	bl	80054b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	58024400 	.word	0x58024400
 800588c:	0800cb44 	.word	0x0800cb44
 8005890:	24000004 	.word	0x24000004
 8005894:	24000000 	.word	0x24000000

08005898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80058a0:	4b15      	ldr	r3, [pc, #84]	; (80058f8 <HAL_InitTick+0x60>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e021      	b.n	80058f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80058ac:	4b13      	ldr	r3, [pc, #76]	; (80058fc <HAL_InitTick+0x64>)
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <HAL_InitTick+0x60>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	4619      	mov	r1, r3
 80058b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80058be:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 f96f 	bl	8005ba6 <HAL_SYSTICK_Config>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e00e      	b.n	80058f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b0f      	cmp	r3, #15
 80058d6:	d80a      	bhi.n	80058ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058d8:	2200      	movs	r2, #0
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	f04f 30ff 	mov.w	r0, #4294967295
 80058e0:	f000 f939 	bl	8005b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80058e4:	4a06      	ldr	r2, [pc, #24]	; (8005900 <HAL_InitTick+0x68>)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	e000      	b.n	80058f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	2400000c 	.word	0x2400000c
 80058fc:	24000000 	.word	0x24000000
 8005900:	24000008 	.word	0x24000008

08005904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005908:	4b06      	ldr	r3, [pc, #24]	; (8005924 <HAL_IncTick+0x20>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	461a      	mov	r2, r3
 800590e:	4b06      	ldr	r3, [pc, #24]	; (8005928 <HAL_IncTick+0x24>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4413      	add	r3, r2
 8005914:	4a04      	ldr	r2, [pc, #16]	; (8005928 <HAL_IncTick+0x24>)
 8005916:	6013      	str	r3, [r2, #0]
}
 8005918:	bf00      	nop
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	2400000c 	.word	0x2400000c
 8005928:	24015f28 	.word	0x24015f28

0800592c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
  return uwTick;
 8005930:	4b03      	ldr	r3, [pc, #12]	; (8005940 <HAL_GetTick+0x14>)
 8005932:	681b      	ldr	r3, [r3, #0]
}
 8005934:	4618      	mov	r0, r3
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	24015f28 	.word	0x24015f28

08005944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800594c:	f7ff ffee 	bl	800592c <HAL_GetTick>
 8005950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595c:	d005      	beq.n	800596a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800595e:	4b09      	ldr	r3, [pc, #36]	; (8005984 <HAL_Delay+0x40>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4413      	add	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800596a:	bf00      	nop
 800596c:	f7ff ffde 	bl	800592c <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	429a      	cmp	r2, r3
 800597a:	d8f7      	bhi.n	800596c <HAL_Delay+0x28>
  {
  }
}
 800597c:	bf00      	nop
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	2400000c 	.word	0x2400000c

08005988 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800598c:	4b03      	ldr	r3, [pc, #12]	; (800599c <HAL_GetREVID+0x14>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	0c1b      	lsrs	r3, r3, #16
}
 8005992:	4618      	mov	r0, r3
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	5c001000 	.word	0x5c001000

080059a0 <__NVIC_SetPriorityGrouping>:
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059b0:	4b0b      	ldr	r3, [pc, #44]	; (80059e0 <__NVIC_SetPriorityGrouping+0x40>)
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059bc:	4013      	ands	r3, r2
 80059be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80059c8:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <__NVIC_SetPriorityGrouping+0x44>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059ce:	4a04      	ldr	r2, [pc, #16]	; (80059e0 <__NVIC_SetPriorityGrouping+0x40>)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	60d3      	str	r3, [r2, #12]
}
 80059d4:	bf00      	nop
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	e000ed00 	.word	0xe000ed00
 80059e4:	05fa0000 	.word	0x05fa0000

080059e8 <__NVIC_GetPriorityGrouping>:
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059ec:	4b04      	ldr	r3, [pc, #16]	; (8005a00 <__NVIC_GetPriorityGrouping+0x18>)
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	0a1b      	lsrs	r3, r3, #8
 80059f2:	f003 0307 	and.w	r3, r3, #7
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	e000ed00 	.word	0xe000ed00

08005a04 <__NVIC_EnableIRQ>:
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	db0b      	blt.n	8005a2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a16:	88fb      	ldrh	r3, [r7, #6]
 8005a18:	f003 021f 	and.w	r2, r3, #31
 8005a1c:	4907      	ldr	r1, [pc, #28]	; (8005a3c <__NVIC_EnableIRQ+0x38>)
 8005a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	2001      	movs	r0, #1
 8005a26:	fa00 f202 	lsl.w	r2, r0, r2
 8005a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	e000e100 	.word	0xe000e100

08005a40 <__NVIC_SetPriority>:
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	4603      	mov	r3, r0
 8005a48:	6039      	str	r1, [r7, #0]
 8005a4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	db0a      	blt.n	8005a6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	490c      	ldr	r1, [pc, #48]	; (8005a8c <__NVIC_SetPriority+0x4c>)
 8005a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a5e:	0112      	lsls	r2, r2, #4
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	440b      	add	r3, r1
 8005a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a68:	e00a      	b.n	8005a80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	4908      	ldr	r1, [pc, #32]	; (8005a90 <__NVIC_SetPriority+0x50>)
 8005a70:	88fb      	ldrh	r3, [r7, #6]
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	3b04      	subs	r3, #4
 8005a78:	0112      	lsls	r2, r2, #4
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	761a      	strb	r2, [r3, #24]
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	e000e100 	.word	0xe000e100
 8005a90:	e000ed00 	.word	0xe000ed00

08005a94 <NVIC_EncodePriority>:
{
 8005a94:	b480      	push	{r7}
 8005a96:	b089      	sub	sp, #36	; 0x24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	f1c3 0307 	rsb	r3, r3, #7
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	bf28      	it	cs
 8005ab2:	2304      	movcs	r3, #4
 8005ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	3304      	adds	r3, #4
 8005aba:	2b06      	cmp	r3, #6
 8005abc:	d902      	bls.n	8005ac4 <NVIC_EncodePriority+0x30>
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	3b03      	subs	r3, #3
 8005ac2:	e000      	b.n	8005ac6 <NVIC_EncodePriority+0x32>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	43da      	mvns	r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	401a      	ands	r2, r3
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005adc:	f04f 31ff 	mov.w	r1, #4294967295
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae6:	43d9      	mvns	r1, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005aec:	4313      	orrs	r3, r2
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3724      	adds	r7, #36	; 0x24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
	...

08005afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b0c:	d301      	bcc.n	8005b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e00f      	b.n	8005b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b12:	4a0a      	ldr	r2, [pc, #40]	; (8005b3c <SysTick_Config+0x40>)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b1a:	210f      	movs	r1, #15
 8005b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b20:	f7ff ff8e 	bl	8005a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b24:	4b05      	ldr	r3, [pc, #20]	; (8005b3c <SysTick_Config+0x40>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b2a:	4b04      	ldr	r3, [pc, #16]	; (8005b3c <SysTick_Config+0x40>)
 8005b2c:	2207      	movs	r2, #7
 8005b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	e000e010 	.word	0xe000e010

08005b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7ff ff29 	bl	80059a0 <__NVIC_SetPriorityGrouping>
}
 8005b4e:	bf00      	nop
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b086      	sub	sp, #24
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	60b9      	str	r1, [r7, #8]
 8005b60:	607a      	str	r2, [r7, #4]
 8005b62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b64:	f7ff ff40 	bl	80059e8 <__NVIC_GetPriorityGrouping>
 8005b68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	68b9      	ldr	r1, [r7, #8]
 8005b6e:	6978      	ldr	r0, [r7, #20]
 8005b70:	f7ff ff90 	bl	8005a94 <NVIC_EncodePriority>
 8005b74:	4602      	mov	r2, r0
 8005b76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff ff5f 	bl	8005a40 <__NVIC_SetPriority>
}
 8005b82:	bf00      	nop
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b082      	sub	sp, #8
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	4603      	mov	r3, r0
 8005b92:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff ff33 	bl	8005a04 <__NVIC_EnableIRQ>
}
 8005b9e:	bf00      	nop
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b082      	sub	sp, #8
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff ffa4 	bl	8005afc <SysTick_Config>
 8005bb4:	4603      	mov	r3, r0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e205      	b.n	8005fde <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d004      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2280      	movs	r2, #128	; 0x80
 8005be2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e1fa      	b.n	8005fde <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a8c      	ldr	r2, [pc, #560]	; (8005e20 <HAL_DMA_Abort_IT+0x260>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d04a      	beq.n	8005c88 <HAL_DMA_Abort_IT+0xc8>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a8b      	ldr	r2, [pc, #556]	; (8005e24 <HAL_DMA_Abort_IT+0x264>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d045      	beq.n	8005c88 <HAL_DMA_Abort_IT+0xc8>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a89      	ldr	r2, [pc, #548]	; (8005e28 <HAL_DMA_Abort_IT+0x268>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d040      	beq.n	8005c88 <HAL_DMA_Abort_IT+0xc8>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a88      	ldr	r2, [pc, #544]	; (8005e2c <HAL_DMA_Abort_IT+0x26c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d03b      	beq.n	8005c88 <HAL_DMA_Abort_IT+0xc8>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a86      	ldr	r2, [pc, #536]	; (8005e30 <HAL_DMA_Abort_IT+0x270>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d036      	beq.n	8005c88 <HAL_DMA_Abort_IT+0xc8>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a85      	ldr	r2, [pc, #532]	; (8005e34 <HAL_DMA_Abort_IT+0x274>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d031      	beq.n	8005c88 <HAL_DMA_Abort_IT+0xc8>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a83      	ldr	r2, [pc, #524]	; (8005e38 <HAL_DMA_Abort_IT+0x278>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d02c      	beq.n	8005c88 <HAL_DMA_Abort_IT+0xc8>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a82      	ldr	r2, [pc, #520]	; (8005e3c <HAL_DMA_Abort_IT+0x27c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d027      	beq.n	8005c88 <HAL_DMA_Abort_IT+0xc8>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a80      	ldr	r2, [pc, #512]	; (8005e40 <HAL_DMA_Abort_IT+0x280>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d022      	beq.n	8005c88 <HAL_DMA_Abort_IT+0xc8>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a7f      	ldr	r2, [pc, #508]	; (8005e44 <HAL_DMA_Abort_IT+0x284>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d01d      	beq.n	8005c88 <HAL_DMA_Abort_IT+0xc8>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a7d      	ldr	r2, [pc, #500]	; (8005e48 <HAL_DMA_Abort_IT+0x288>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d018      	beq.n	8005c88 <HAL_DMA_Abort_IT+0xc8>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a7c      	ldr	r2, [pc, #496]	; (8005e4c <HAL_DMA_Abort_IT+0x28c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d013      	beq.n	8005c88 <HAL_DMA_Abort_IT+0xc8>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a7a      	ldr	r2, [pc, #488]	; (8005e50 <HAL_DMA_Abort_IT+0x290>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00e      	beq.n	8005c88 <HAL_DMA_Abort_IT+0xc8>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a79      	ldr	r2, [pc, #484]	; (8005e54 <HAL_DMA_Abort_IT+0x294>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d009      	beq.n	8005c88 <HAL_DMA_Abort_IT+0xc8>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a77      	ldr	r2, [pc, #476]	; (8005e58 <HAL_DMA_Abort_IT+0x298>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d004      	beq.n	8005c88 <HAL_DMA_Abort_IT+0xc8>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a76      	ldr	r2, [pc, #472]	; (8005e5c <HAL_DMA_Abort_IT+0x29c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d101      	bne.n	8005c8c <HAL_DMA_Abort_IT+0xcc>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e000      	b.n	8005c8e <HAL_DMA_Abort_IT+0xce>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d065      	beq.n	8005d5e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2204      	movs	r2, #4
 8005c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a60      	ldr	r2, [pc, #384]	; (8005e20 <HAL_DMA_Abort_IT+0x260>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d04a      	beq.n	8005d3a <HAL_DMA_Abort_IT+0x17a>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a5e      	ldr	r2, [pc, #376]	; (8005e24 <HAL_DMA_Abort_IT+0x264>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d045      	beq.n	8005d3a <HAL_DMA_Abort_IT+0x17a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a5d      	ldr	r2, [pc, #372]	; (8005e28 <HAL_DMA_Abort_IT+0x268>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d040      	beq.n	8005d3a <HAL_DMA_Abort_IT+0x17a>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a5b      	ldr	r2, [pc, #364]	; (8005e2c <HAL_DMA_Abort_IT+0x26c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d03b      	beq.n	8005d3a <HAL_DMA_Abort_IT+0x17a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a5a      	ldr	r2, [pc, #360]	; (8005e30 <HAL_DMA_Abort_IT+0x270>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d036      	beq.n	8005d3a <HAL_DMA_Abort_IT+0x17a>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a58      	ldr	r2, [pc, #352]	; (8005e34 <HAL_DMA_Abort_IT+0x274>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d031      	beq.n	8005d3a <HAL_DMA_Abort_IT+0x17a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a57      	ldr	r2, [pc, #348]	; (8005e38 <HAL_DMA_Abort_IT+0x278>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d02c      	beq.n	8005d3a <HAL_DMA_Abort_IT+0x17a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a55      	ldr	r2, [pc, #340]	; (8005e3c <HAL_DMA_Abort_IT+0x27c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d027      	beq.n	8005d3a <HAL_DMA_Abort_IT+0x17a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a54      	ldr	r2, [pc, #336]	; (8005e40 <HAL_DMA_Abort_IT+0x280>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d022      	beq.n	8005d3a <HAL_DMA_Abort_IT+0x17a>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a52      	ldr	r2, [pc, #328]	; (8005e44 <HAL_DMA_Abort_IT+0x284>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d01d      	beq.n	8005d3a <HAL_DMA_Abort_IT+0x17a>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a51      	ldr	r2, [pc, #324]	; (8005e48 <HAL_DMA_Abort_IT+0x288>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d018      	beq.n	8005d3a <HAL_DMA_Abort_IT+0x17a>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a4f      	ldr	r2, [pc, #316]	; (8005e4c <HAL_DMA_Abort_IT+0x28c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d013      	beq.n	8005d3a <HAL_DMA_Abort_IT+0x17a>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a4e      	ldr	r2, [pc, #312]	; (8005e50 <HAL_DMA_Abort_IT+0x290>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00e      	beq.n	8005d3a <HAL_DMA_Abort_IT+0x17a>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a4c      	ldr	r2, [pc, #304]	; (8005e54 <HAL_DMA_Abort_IT+0x294>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d009      	beq.n	8005d3a <HAL_DMA_Abort_IT+0x17a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a4b      	ldr	r2, [pc, #300]	; (8005e58 <HAL_DMA_Abort_IT+0x298>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d004      	beq.n	8005d3a <HAL_DMA_Abort_IT+0x17a>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a49      	ldr	r2, [pc, #292]	; (8005e5c <HAL_DMA_Abort_IT+0x29c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d108      	bne.n	8005d4c <HAL_DMA_Abort_IT+0x18c>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0201 	bic.w	r2, r2, #1
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	e147      	b.n	8005fdc <HAL_DMA_Abort_IT+0x41c>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0201 	bic.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	e13e      	b.n	8005fdc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 020e 	bic.w	r2, r2, #14
 8005d6c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a2b      	ldr	r2, [pc, #172]	; (8005e20 <HAL_DMA_Abort_IT+0x260>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d04a      	beq.n	8005e0e <HAL_DMA_Abort_IT+0x24e>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a29      	ldr	r2, [pc, #164]	; (8005e24 <HAL_DMA_Abort_IT+0x264>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d045      	beq.n	8005e0e <HAL_DMA_Abort_IT+0x24e>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a28      	ldr	r2, [pc, #160]	; (8005e28 <HAL_DMA_Abort_IT+0x268>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d040      	beq.n	8005e0e <HAL_DMA_Abort_IT+0x24e>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a26      	ldr	r2, [pc, #152]	; (8005e2c <HAL_DMA_Abort_IT+0x26c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d03b      	beq.n	8005e0e <HAL_DMA_Abort_IT+0x24e>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a25      	ldr	r2, [pc, #148]	; (8005e30 <HAL_DMA_Abort_IT+0x270>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d036      	beq.n	8005e0e <HAL_DMA_Abort_IT+0x24e>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a23      	ldr	r2, [pc, #140]	; (8005e34 <HAL_DMA_Abort_IT+0x274>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d031      	beq.n	8005e0e <HAL_DMA_Abort_IT+0x24e>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a22      	ldr	r2, [pc, #136]	; (8005e38 <HAL_DMA_Abort_IT+0x278>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d02c      	beq.n	8005e0e <HAL_DMA_Abort_IT+0x24e>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a20      	ldr	r2, [pc, #128]	; (8005e3c <HAL_DMA_Abort_IT+0x27c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d027      	beq.n	8005e0e <HAL_DMA_Abort_IT+0x24e>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1f      	ldr	r2, [pc, #124]	; (8005e40 <HAL_DMA_Abort_IT+0x280>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d022      	beq.n	8005e0e <HAL_DMA_Abort_IT+0x24e>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1d      	ldr	r2, [pc, #116]	; (8005e44 <HAL_DMA_Abort_IT+0x284>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d01d      	beq.n	8005e0e <HAL_DMA_Abort_IT+0x24e>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1c      	ldr	r2, [pc, #112]	; (8005e48 <HAL_DMA_Abort_IT+0x288>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d018      	beq.n	8005e0e <HAL_DMA_Abort_IT+0x24e>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1a      	ldr	r2, [pc, #104]	; (8005e4c <HAL_DMA_Abort_IT+0x28c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d013      	beq.n	8005e0e <HAL_DMA_Abort_IT+0x24e>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a19      	ldr	r2, [pc, #100]	; (8005e50 <HAL_DMA_Abort_IT+0x290>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00e      	beq.n	8005e0e <HAL_DMA_Abort_IT+0x24e>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a17      	ldr	r2, [pc, #92]	; (8005e54 <HAL_DMA_Abort_IT+0x294>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d009      	beq.n	8005e0e <HAL_DMA_Abort_IT+0x24e>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a16      	ldr	r2, [pc, #88]	; (8005e58 <HAL_DMA_Abort_IT+0x298>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d004      	beq.n	8005e0e <HAL_DMA_Abort_IT+0x24e>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a14      	ldr	r2, [pc, #80]	; (8005e5c <HAL_DMA_Abort_IT+0x29c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d128      	bne.n	8005e60 <HAL_DMA_Abort_IT+0x2a0>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0201 	bic.w	r2, r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	e027      	b.n	8005e70 <HAL_DMA_Abort_IT+0x2b0>
 8005e20:	40020010 	.word	0x40020010
 8005e24:	40020028 	.word	0x40020028
 8005e28:	40020040 	.word	0x40020040
 8005e2c:	40020058 	.word	0x40020058
 8005e30:	40020070 	.word	0x40020070
 8005e34:	40020088 	.word	0x40020088
 8005e38:	400200a0 	.word	0x400200a0
 8005e3c:	400200b8 	.word	0x400200b8
 8005e40:	40020410 	.word	0x40020410
 8005e44:	40020428 	.word	0x40020428
 8005e48:	40020440 	.word	0x40020440
 8005e4c:	40020458 	.word	0x40020458
 8005e50:	40020470 	.word	0x40020470
 8005e54:	40020488 	.word	0x40020488
 8005e58:	400204a0 	.word	0x400204a0
 8005e5c:	400204b8 	.word	0x400204b8
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0201 	bic.w	r2, r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a5c      	ldr	r2, [pc, #368]	; (8005fe8 <HAL_DMA_Abort_IT+0x428>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d072      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a5b      	ldr	r2, [pc, #364]	; (8005fec <HAL_DMA_Abort_IT+0x42c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d06d      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a59      	ldr	r2, [pc, #356]	; (8005ff0 <HAL_DMA_Abort_IT+0x430>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d068      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a58      	ldr	r2, [pc, #352]	; (8005ff4 <HAL_DMA_Abort_IT+0x434>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d063      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a56      	ldr	r2, [pc, #344]	; (8005ff8 <HAL_DMA_Abort_IT+0x438>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d05e      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a55      	ldr	r2, [pc, #340]	; (8005ffc <HAL_DMA_Abort_IT+0x43c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d059      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a53      	ldr	r2, [pc, #332]	; (8006000 <HAL_DMA_Abort_IT+0x440>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d054      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a52      	ldr	r2, [pc, #328]	; (8006004 <HAL_DMA_Abort_IT+0x444>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d04f      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a50      	ldr	r2, [pc, #320]	; (8006008 <HAL_DMA_Abort_IT+0x448>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d04a      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a4f      	ldr	r2, [pc, #316]	; (800600c <HAL_DMA_Abort_IT+0x44c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d045      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a4d      	ldr	r2, [pc, #308]	; (8006010 <HAL_DMA_Abort_IT+0x450>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d040      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a4c      	ldr	r2, [pc, #304]	; (8006014 <HAL_DMA_Abort_IT+0x454>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d03b      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a4a      	ldr	r2, [pc, #296]	; (8006018 <HAL_DMA_Abort_IT+0x458>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d036      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a49      	ldr	r2, [pc, #292]	; (800601c <HAL_DMA_Abort_IT+0x45c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d031      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a47      	ldr	r2, [pc, #284]	; (8006020 <HAL_DMA_Abort_IT+0x460>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d02c      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a46      	ldr	r2, [pc, #280]	; (8006024 <HAL_DMA_Abort_IT+0x464>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d027      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a44      	ldr	r2, [pc, #272]	; (8006028 <HAL_DMA_Abort_IT+0x468>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d022      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a43      	ldr	r2, [pc, #268]	; (800602c <HAL_DMA_Abort_IT+0x46c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d01d      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a41      	ldr	r2, [pc, #260]	; (8006030 <HAL_DMA_Abort_IT+0x470>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d018      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a40      	ldr	r2, [pc, #256]	; (8006034 <HAL_DMA_Abort_IT+0x474>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d013      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a3e      	ldr	r2, [pc, #248]	; (8006038 <HAL_DMA_Abort_IT+0x478>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d00e      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a3d      	ldr	r2, [pc, #244]	; (800603c <HAL_DMA_Abort_IT+0x47c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d009      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a3b      	ldr	r2, [pc, #236]	; (8006040 <HAL_DMA_Abort_IT+0x480>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d004      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x3a0>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a3a      	ldr	r2, [pc, #232]	; (8006044 <HAL_DMA_Abort_IT+0x484>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d101      	bne.n	8005f64 <HAL_DMA_Abort_IT+0x3a4>
 8005f60:	2301      	movs	r3, #1
 8005f62:	e000      	b.n	8005f66 <HAL_DMA_Abort_IT+0x3a6>
 8005f64:	2300      	movs	r3, #0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d028      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f78:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f84:	f003 031f 	and.w	r3, r3, #31
 8005f88:	2201      	movs	r2, #1
 8005f8a:	409a      	lsls	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f98:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00c      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fb0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005fba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	40020010 	.word	0x40020010
 8005fec:	40020028 	.word	0x40020028
 8005ff0:	40020040 	.word	0x40020040
 8005ff4:	40020058 	.word	0x40020058
 8005ff8:	40020070 	.word	0x40020070
 8005ffc:	40020088 	.word	0x40020088
 8006000:	400200a0 	.word	0x400200a0
 8006004:	400200b8 	.word	0x400200b8
 8006008:	40020410 	.word	0x40020410
 800600c:	40020428 	.word	0x40020428
 8006010:	40020440 	.word	0x40020440
 8006014:	40020458 	.word	0x40020458
 8006018:	40020470 	.word	0x40020470
 800601c:	40020488 	.word	0x40020488
 8006020:	400204a0 	.word	0x400204a0
 8006024:	400204b8 	.word	0x400204b8
 8006028:	58025408 	.word	0x58025408
 800602c:	5802541c 	.word	0x5802541c
 8006030:	58025430 	.word	0x58025430
 8006034:	58025444 	.word	0x58025444
 8006038:	58025458 	.word	0x58025458
 800603c:	5802546c 	.word	0x5802546c
 8006040:	58025480 	.word	0x58025480
 8006044:	58025494 	.word	0x58025494

08006048 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006048:	b480      	push	{r7}
 800604a:	b089      	sub	sp, #36	; 0x24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006052:	2300      	movs	r3, #0
 8006054:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006056:	4b89      	ldr	r3, [pc, #548]	; (800627c <HAL_GPIO_Init+0x234>)
 8006058:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800605a:	e194      	b.n	8006386 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	2101      	movs	r1, #1
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	fa01 f303 	lsl.w	r3, r1, r3
 8006068:	4013      	ands	r3, r2
 800606a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 8186 	beq.w	8006380 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d00b      	beq.n	8006094 <HAL_GPIO_Init+0x4c>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d007      	beq.n	8006094 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006088:	2b11      	cmp	r3, #17
 800608a:	d003      	beq.n	8006094 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	2b12      	cmp	r3, #18
 8006092:	d130      	bne.n	80060f6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	2203      	movs	r2, #3
 80060a0:	fa02 f303 	lsl.w	r3, r2, r3
 80060a4:	43db      	mvns	r3, r3
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	4013      	ands	r3, r2
 80060aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	fa02 f303 	lsl.w	r3, r2, r3
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060ca:	2201      	movs	r2, #1
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	fa02 f303 	lsl.w	r3, r2, r3
 80060d2:	43db      	mvns	r3, r3
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	4013      	ands	r3, r2
 80060d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	091b      	lsrs	r3, r3, #4
 80060e0:	f003 0201 	and.w	r2, r3, #1
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	2203      	movs	r2, #3
 8006102:	fa02 f303 	lsl.w	r3, r2, r3
 8006106:	43db      	mvns	r3, r3
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	4013      	ands	r3, r2
 800610c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	4313      	orrs	r3, r2
 800611e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2b02      	cmp	r3, #2
 800612c:	d003      	beq.n	8006136 <HAL_GPIO_Init+0xee>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2b12      	cmp	r3, #18
 8006134:	d123      	bne.n	800617e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	08da      	lsrs	r2, r3, #3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3208      	adds	r2, #8
 800613e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	220f      	movs	r2, #15
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	43db      	mvns	r3, r3
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	4013      	ands	r3, r2
 8006158:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	691a      	ldr	r2, [r3, #16]
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	fa02 f303 	lsl.w	r3, r2, r3
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	4313      	orrs	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	08da      	lsrs	r2, r3, #3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3208      	adds	r2, #8
 8006178:	69b9      	ldr	r1, [r7, #24]
 800617a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	2203      	movs	r2, #3
 800618a:	fa02 f303 	lsl.w	r3, r2, r3
 800618e:	43db      	mvns	r3, r3
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	4013      	ands	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f003 0203 	and.w	r2, r3, #3
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	fa02 f303 	lsl.w	r3, r2, r3
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 80e0 	beq.w	8006380 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061c0:	4b2f      	ldr	r3, [pc, #188]	; (8006280 <HAL_GPIO_Init+0x238>)
 80061c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061c6:	4a2e      	ldr	r2, [pc, #184]	; (8006280 <HAL_GPIO_Init+0x238>)
 80061c8:	f043 0302 	orr.w	r3, r3, #2
 80061cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80061d0:	4b2b      	ldr	r3, [pc, #172]	; (8006280 <HAL_GPIO_Init+0x238>)
 80061d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061de:	4a29      	ldr	r2, [pc, #164]	; (8006284 <HAL_GPIO_Init+0x23c>)
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	089b      	lsrs	r3, r3, #2
 80061e4:	3302      	adds	r3, #2
 80061e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f003 0303 	and.w	r3, r3, #3
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	220f      	movs	r2, #15
 80061f6:	fa02 f303 	lsl.w	r3, r2, r3
 80061fa:	43db      	mvns	r3, r3
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	4013      	ands	r3, r2
 8006200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a20      	ldr	r2, [pc, #128]	; (8006288 <HAL_GPIO_Init+0x240>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d052      	beq.n	80062b0 <HAL_GPIO_Init+0x268>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a1f      	ldr	r2, [pc, #124]	; (800628c <HAL_GPIO_Init+0x244>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d031      	beq.n	8006276 <HAL_GPIO_Init+0x22e>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a1e      	ldr	r2, [pc, #120]	; (8006290 <HAL_GPIO_Init+0x248>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d02b      	beq.n	8006272 <HAL_GPIO_Init+0x22a>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a1d      	ldr	r2, [pc, #116]	; (8006294 <HAL_GPIO_Init+0x24c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d025      	beq.n	800626e <HAL_GPIO_Init+0x226>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a1c      	ldr	r2, [pc, #112]	; (8006298 <HAL_GPIO_Init+0x250>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d01f      	beq.n	800626a <HAL_GPIO_Init+0x222>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a1b      	ldr	r2, [pc, #108]	; (800629c <HAL_GPIO_Init+0x254>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d019      	beq.n	8006266 <HAL_GPIO_Init+0x21e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a1a      	ldr	r2, [pc, #104]	; (80062a0 <HAL_GPIO_Init+0x258>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d013      	beq.n	8006262 <HAL_GPIO_Init+0x21a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a19      	ldr	r2, [pc, #100]	; (80062a4 <HAL_GPIO_Init+0x25c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00d      	beq.n	800625e <HAL_GPIO_Init+0x216>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a18      	ldr	r2, [pc, #96]	; (80062a8 <HAL_GPIO_Init+0x260>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d007      	beq.n	800625a <HAL_GPIO_Init+0x212>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a17      	ldr	r2, [pc, #92]	; (80062ac <HAL_GPIO_Init+0x264>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d101      	bne.n	8006256 <HAL_GPIO_Init+0x20e>
 8006252:	2309      	movs	r3, #9
 8006254:	e02d      	b.n	80062b2 <HAL_GPIO_Init+0x26a>
 8006256:	230a      	movs	r3, #10
 8006258:	e02b      	b.n	80062b2 <HAL_GPIO_Init+0x26a>
 800625a:	2308      	movs	r3, #8
 800625c:	e029      	b.n	80062b2 <HAL_GPIO_Init+0x26a>
 800625e:	2307      	movs	r3, #7
 8006260:	e027      	b.n	80062b2 <HAL_GPIO_Init+0x26a>
 8006262:	2306      	movs	r3, #6
 8006264:	e025      	b.n	80062b2 <HAL_GPIO_Init+0x26a>
 8006266:	2305      	movs	r3, #5
 8006268:	e023      	b.n	80062b2 <HAL_GPIO_Init+0x26a>
 800626a:	2304      	movs	r3, #4
 800626c:	e021      	b.n	80062b2 <HAL_GPIO_Init+0x26a>
 800626e:	2303      	movs	r3, #3
 8006270:	e01f      	b.n	80062b2 <HAL_GPIO_Init+0x26a>
 8006272:	2302      	movs	r3, #2
 8006274:	e01d      	b.n	80062b2 <HAL_GPIO_Init+0x26a>
 8006276:	2301      	movs	r3, #1
 8006278:	e01b      	b.n	80062b2 <HAL_GPIO_Init+0x26a>
 800627a:	bf00      	nop
 800627c:	58000080 	.word	0x58000080
 8006280:	58024400 	.word	0x58024400
 8006284:	58000400 	.word	0x58000400
 8006288:	58020000 	.word	0x58020000
 800628c:	58020400 	.word	0x58020400
 8006290:	58020800 	.word	0x58020800
 8006294:	58020c00 	.word	0x58020c00
 8006298:	58021000 	.word	0x58021000
 800629c:	58021400 	.word	0x58021400
 80062a0:	58021800 	.word	0x58021800
 80062a4:	58021c00 	.word	0x58021c00
 80062a8:	58022000 	.word	0x58022000
 80062ac:	58022400 	.word	0x58022400
 80062b0:	2300      	movs	r3, #0
 80062b2:	69fa      	ldr	r2, [r7, #28]
 80062b4:	f002 0203 	and.w	r2, r2, #3
 80062b8:	0092      	lsls	r2, r2, #2
 80062ba:	4093      	lsls	r3, r2
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	4313      	orrs	r3, r2
 80062c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062c2:	4938      	ldr	r1, [pc, #224]	; (80063a4 <HAL_GPIO_Init+0x35c>)
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	089b      	lsrs	r3, r3, #2
 80062c8:	3302      	adds	r3, #2
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	43db      	mvns	r3, r3
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	4013      	ands	r3, r2
 80062de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	43db      	mvns	r3, r3
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	4013      	ands	r3, r2
 8006308:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	4313      	orrs	r3, r2
 800631c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	43db      	mvns	r3, r3
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	4013      	ands	r3, r2
 8006334:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800634a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	43db      	mvns	r3, r3
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	4013      	ands	r3, r2
 8006362:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	4313      	orrs	r3, r2
 8006376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	3301      	adds	r3, #1
 8006384:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	fa22 f303 	lsr.w	r3, r2, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	f47f ae63 	bne.w	800605c <HAL_GPIO_Init+0x14>
  }
}
 8006396:	bf00      	nop
 8006398:	3724      	adds	r7, #36	; 0x24
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	58000400 	.word	0x58000400

080063a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	460b      	mov	r3, r1
 80063b2:	807b      	strh	r3, [r7, #2]
 80063b4:	4613      	mov	r3, r2
 80063b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063b8:	787b      	ldrb	r3, [r7, #1]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063be:	887a      	ldrh	r2, [r7, #2]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80063c4:	e003      	b.n	80063ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063c6:	887b      	ldrh	r3, [r7, #2]
 80063c8:	041a      	lsls	r2, r3, #16
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	619a      	str	r2, [r3, #24]
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
	...

080063dc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80063e4:	4a08      	ldr	r2, [pc, #32]	; (8006408 <HAL_HSEM_FastTake+0x2c>)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	3320      	adds	r3, #32
 80063ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ee:	4a07      	ldr	r2, [pc, #28]	; (800640c <HAL_HSEM_FastTake+0x30>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d101      	bne.n	80063f8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	e000      	b.n	80063fa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	58026400 	.word	0x58026400
 800640c:	80000300 	.word	0x80000300

08006410 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800641a:	4906      	ldr	r1, [pc, #24]	; (8006434 <HAL_HSEM_Release+0x24>)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	58026400 	.word	0x58026400

08006438 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006440:	4b29      	ldr	r3, [pc, #164]	; (80064e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f003 0307 	and.w	r3, r3, #7
 8006448:	2b06      	cmp	r3, #6
 800644a:	d00a      	beq.n	8006462 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800644c:	4b26      	ldr	r3, [pc, #152]	; (80064e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	429a      	cmp	r2, r3
 8006458:	d001      	beq.n	800645e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e040      	b.n	80064e0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	e03e      	b.n	80064e0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006462:	4b21      	ldr	r3, [pc, #132]	; (80064e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800646a:	491f      	ldr	r1, [pc, #124]	; (80064e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4313      	orrs	r3, r2
 8006470:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006472:	f7ff fa5b 	bl	800592c <HAL_GetTick>
 8006476:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006478:	e009      	b.n	800648e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800647a:	f7ff fa57 	bl	800592c <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006488:	d901      	bls.n	800648e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e028      	b.n	80064e0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800648e:	4b16      	ldr	r3, [pc, #88]	; (80064e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649a:	d1ee      	bne.n	800647a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b1e      	cmp	r3, #30
 80064a0:	d008      	beq.n	80064b4 <HAL_PWREx_ConfigSupply+0x7c>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b2e      	cmp	r3, #46	; 0x2e
 80064a6:	d005      	beq.n	80064b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b1d      	cmp	r3, #29
 80064ac:	d002      	beq.n	80064b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b2d      	cmp	r3, #45	; 0x2d
 80064b2:	d114      	bne.n	80064de <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80064b4:	f7ff fa3a 	bl	800592c <HAL_GetTick>
 80064b8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80064ba:	e009      	b.n	80064d0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80064bc:	f7ff fa36 	bl	800592c <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064ca:	d901      	bls.n	80064d0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e007      	b.n	80064e0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80064d0:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <HAL_PWREx_ConfigSupply+0xb0>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064dc:	d1ee      	bne.n	80064bc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	58024800 	.word	0x58024800

080064ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b08c      	sub	sp, #48	; 0x30
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e3ff      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 8087 	beq.w	800661a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800650c:	4b99      	ldr	r3, [pc, #612]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006514:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006516:	4b97      	ldr	r3, [pc, #604]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 8006518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	2b10      	cmp	r3, #16
 8006520:	d007      	beq.n	8006532 <HAL_RCC_OscConfig+0x46>
 8006522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006524:	2b18      	cmp	r3, #24
 8006526:	d110      	bne.n	800654a <HAL_RCC_OscConfig+0x5e>
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	f003 0303 	and.w	r3, r3, #3
 800652e:	2b02      	cmp	r3, #2
 8006530:	d10b      	bne.n	800654a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006532:	4b90      	ldr	r3, [pc, #576]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d06c      	beq.n	8006618 <HAL_RCC_OscConfig+0x12c>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d168      	bne.n	8006618 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e3d9      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006552:	d106      	bne.n	8006562 <HAL_RCC_OscConfig+0x76>
 8006554:	4b87      	ldr	r3, [pc, #540]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a86      	ldr	r2, [pc, #536]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 800655a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	e02e      	b.n	80065c0 <HAL_RCC_OscConfig+0xd4>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10c      	bne.n	8006584 <HAL_RCC_OscConfig+0x98>
 800656a:	4b82      	ldr	r3, [pc, #520]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a81      	ldr	r2, [pc, #516]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 8006570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	4b7f      	ldr	r3, [pc, #508]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a7e      	ldr	r2, [pc, #504]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 800657c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	e01d      	b.n	80065c0 <HAL_RCC_OscConfig+0xd4>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800658c:	d10c      	bne.n	80065a8 <HAL_RCC_OscConfig+0xbc>
 800658e:	4b79      	ldr	r3, [pc, #484]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a78      	ldr	r2, [pc, #480]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 8006594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	4b76      	ldr	r3, [pc, #472]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a75      	ldr	r2, [pc, #468]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 80065a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a4:	6013      	str	r3, [r2, #0]
 80065a6:	e00b      	b.n	80065c0 <HAL_RCC_OscConfig+0xd4>
 80065a8:	4b72      	ldr	r3, [pc, #456]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a71      	ldr	r2, [pc, #452]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 80065ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	4b6f      	ldr	r3, [pc, #444]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a6e      	ldr	r2, [pc, #440]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 80065ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d013      	beq.n	80065f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c8:	f7ff f9b0 	bl	800592c <HAL_GetTick>
 80065cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065ce:	e008      	b.n	80065e2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065d0:	f7ff f9ac 	bl	800592c <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b64      	cmp	r3, #100	; 0x64
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e38d      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065e2:	4b64      	ldr	r3, [pc, #400]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0f0      	beq.n	80065d0 <HAL_RCC_OscConfig+0xe4>
 80065ee:	e014      	b.n	800661a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f0:	f7ff f99c 	bl	800592c <HAL_GetTick>
 80065f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065f8:	f7ff f998 	bl	800592c <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b64      	cmp	r3, #100	; 0x64
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e379      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800660a:	4b5a      	ldr	r3, [pc, #360]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1f0      	bne.n	80065f8 <HAL_RCC_OscConfig+0x10c>
 8006616:	e000      	b.n	800661a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 80ae 	beq.w	8006784 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006628:	4b52      	ldr	r3, [pc, #328]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006630:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006632:	4b50      	ldr	r3, [pc, #320]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 8006634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006636:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d007      	beq.n	800664e <HAL_RCC_OscConfig+0x162>
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	2b18      	cmp	r3, #24
 8006642:	d13a      	bne.n	80066ba <HAL_RCC_OscConfig+0x1ce>
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	f003 0303 	and.w	r3, r3, #3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d135      	bne.n	80066ba <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800664e:	4b49      	ldr	r3, [pc, #292]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b00      	cmp	r3, #0
 8006658:	d005      	beq.n	8006666 <HAL_RCC_OscConfig+0x17a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e34b      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006666:	f7ff f98f 	bl	8005988 <HAL_GetREVID>
 800666a:	4602      	mov	r2, r0
 800666c:	f241 0303 	movw	r3, #4099	; 0x1003
 8006670:	429a      	cmp	r2, r3
 8006672:	d817      	bhi.n	80066a4 <HAL_RCC_OscConfig+0x1b8>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	2b40      	cmp	r3, #64	; 0x40
 800667a:	d108      	bne.n	800668e <HAL_RCC_OscConfig+0x1a2>
 800667c:	4b3d      	ldr	r3, [pc, #244]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006684:	4a3b      	ldr	r2, [pc, #236]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 8006686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800668a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800668c:	e07a      	b.n	8006784 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800668e:	4b39      	ldr	r3, [pc, #228]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	031b      	lsls	r3, r3, #12
 800669c:	4935      	ldr	r1, [pc, #212]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066a2:	e06f      	b.n	8006784 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a4:	4b33      	ldr	r3, [pc, #204]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	061b      	lsls	r3, r3, #24
 80066b2:	4930      	ldr	r1, [pc, #192]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066b8:	e064      	b.n	8006784 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d045      	beq.n	800674e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80066c2:	4b2c      	ldr	r3, [pc, #176]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f023 0219 	bic.w	r2, r3, #25
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	4929      	ldr	r1, [pc, #164]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d4:	f7ff f92a 	bl	800592c <HAL_GetTick>
 80066d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066da:	e008      	b.n	80066ee <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066dc:	f7ff f926 	bl	800592c <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e307      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066ee:	4b21      	ldr	r3, [pc, #132]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0f0      	beq.n	80066dc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066fa:	f7ff f945 	bl	8005988 <HAL_GetREVID>
 80066fe:	4602      	mov	r2, r0
 8006700:	f241 0303 	movw	r3, #4099	; 0x1003
 8006704:	429a      	cmp	r2, r3
 8006706:	d817      	bhi.n	8006738 <HAL_RCC_OscConfig+0x24c>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b40      	cmp	r3, #64	; 0x40
 800670e:	d108      	bne.n	8006722 <HAL_RCC_OscConfig+0x236>
 8006710:	4b18      	ldr	r3, [pc, #96]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006718:	4a16      	ldr	r2, [pc, #88]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 800671a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800671e:	6053      	str	r3, [r2, #4]
 8006720:	e030      	b.n	8006784 <HAL_RCC_OscConfig+0x298>
 8006722:	4b14      	ldr	r3, [pc, #80]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	031b      	lsls	r3, r3, #12
 8006730:	4910      	ldr	r1, [pc, #64]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 8006732:	4313      	orrs	r3, r2
 8006734:	604b      	str	r3, [r1, #4]
 8006736:	e025      	b.n	8006784 <HAL_RCC_OscConfig+0x298>
 8006738:	4b0e      	ldr	r3, [pc, #56]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	061b      	lsls	r3, r3, #24
 8006746:	490b      	ldr	r1, [pc, #44]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 8006748:	4313      	orrs	r3, r2
 800674a:	604b      	str	r3, [r1, #4]
 800674c:	e01a      	b.n	8006784 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800674e:	4b09      	ldr	r3, [pc, #36]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a08      	ldr	r2, [pc, #32]	; (8006774 <HAL_RCC_OscConfig+0x288>)
 8006754:	f023 0301 	bic.w	r3, r3, #1
 8006758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800675a:	f7ff f8e7 	bl	800592c <HAL_GetTick>
 800675e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006760:	e00a      	b.n	8006778 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006762:	f7ff f8e3 	bl	800592c <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d903      	bls.n	8006778 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e2c4      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
 8006774:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006778:	4ba4      	ldr	r3, [pc, #656]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1ee      	bne.n	8006762 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0310 	and.w	r3, r3, #16
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 80a9 	beq.w	80068e4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006792:	4b9e      	ldr	r3, [pc, #632]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800679a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800679c:	4b9b      	ldr	r3, [pc, #620]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 800679e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	2b08      	cmp	r3, #8
 80067a6:	d007      	beq.n	80067b8 <HAL_RCC_OscConfig+0x2cc>
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	2b18      	cmp	r3, #24
 80067ac:	d13a      	bne.n	8006824 <HAL_RCC_OscConfig+0x338>
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f003 0303 	and.w	r3, r3, #3
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d135      	bne.n	8006824 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067b8:	4b94      	ldr	r3, [pc, #592]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d005      	beq.n	80067d0 <HAL_RCC_OscConfig+0x2e4>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	2b80      	cmp	r3, #128	; 0x80
 80067ca:	d001      	beq.n	80067d0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e296      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067d0:	f7ff f8da 	bl	8005988 <HAL_GetREVID>
 80067d4:	4602      	mov	r2, r0
 80067d6:	f241 0303 	movw	r3, #4099	; 0x1003
 80067da:	429a      	cmp	r2, r3
 80067dc:	d817      	bhi.n	800680e <HAL_RCC_OscConfig+0x322>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	2b20      	cmp	r3, #32
 80067e4:	d108      	bne.n	80067f8 <HAL_RCC_OscConfig+0x30c>
 80067e6:	4b89      	ldr	r3, [pc, #548]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80067ee:	4a87      	ldr	r2, [pc, #540]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 80067f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067f4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067f6:	e075      	b.n	80068e4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067f8:	4b84      	ldr	r3, [pc, #528]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	069b      	lsls	r3, r3, #26
 8006806:	4981      	ldr	r1, [pc, #516]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 8006808:	4313      	orrs	r3, r2
 800680a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800680c:	e06a      	b.n	80068e4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800680e:	4b7f      	ldr	r3, [pc, #508]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	061b      	lsls	r3, r3, #24
 800681c:	497b      	ldr	r1, [pc, #492]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 800681e:	4313      	orrs	r3, r2
 8006820:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006822:	e05f      	b.n	80068e4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d042      	beq.n	80068b2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800682c:	4b77      	ldr	r3, [pc, #476]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a76      	ldr	r2, [pc, #472]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 8006832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006838:	f7ff f878 	bl	800592c <HAL_GetTick>
 800683c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006840:	f7ff f874 	bl	800592c <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e255      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006852:	4b6e      	ldr	r3, [pc, #440]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685a:	2b00      	cmp	r3, #0
 800685c:	d0f0      	beq.n	8006840 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800685e:	f7ff f893 	bl	8005988 <HAL_GetREVID>
 8006862:	4602      	mov	r2, r0
 8006864:	f241 0303 	movw	r3, #4099	; 0x1003
 8006868:	429a      	cmp	r2, r3
 800686a:	d817      	bhi.n	800689c <HAL_RCC_OscConfig+0x3b0>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	2b20      	cmp	r3, #32
 8006872:	d108      	bne.n	8006886 <HAL_RCC_OscConfig+0x39a>
 8006874:	4b65      	ldr	r3, [pc, #404]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800687c:	4a63      	ldr	r2, [pc, #396]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 800687e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006882:	6053      	str	r3, [r2, #4]
 8006884:	e02e      	b.n	80068e4 <HAL_RCC_OscConfig+0x3f8>
 8006886:	4b61      	ldr	r3, [pc, #388]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	069b      	lsls	r3, r3, #26
 8006894:	495d      	ldr	r1, [pc, #372]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 8006896:	4313      	orrs	r3, r2
 8006898:	604b      	str	r3, [r1, #4]
 800689a:	e023      	b.n	80068e4 <HAL_RCC_OscConfig+0x3f8>
 800689c:	4b5b      	ldr	r3, [pc, #364]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	061b      	lsls	r3, r3, #24
 80068aa:	4958      	ldr	r1, [pc, #352]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60cb      	str	r3, [r1, #12]
 80068b0:	e018      	b.n	80068e4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80068b2:	4b56      	ldr	r3, [pc, #344]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a55      	ldr	r2, [pc, #340]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 80068b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068be:	f7ff f835 	bl	800592c <HAL_GetTick>
 80068c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80068c4:	e008      	b.n	80068d8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80068c6:	f7ff f831 	bl	800592c <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d901      	bls.n	80068d8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e212      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80068d8:	4b4c      	ldr	r3, [pc, #304]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1f0      	bne.n	80068c6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d036      	beq.n	800695e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d019      	beq.n	800692c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068f8:	4b44      	ldr	r3, [pc, #272]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 80068fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068fc:	4a43      	ldr	r2, [pc, #268]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 80068fe:	f043 0301 	orr.w	r3, r3, #1
 8006902:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006904:	f7ff f812 	bl	800592c <HAL_GetTick>
 8006908:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800690a:	e008      	b.n	800691e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800690c:	f7ff f80e 	bl	800592c <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b02      	cmp	r3, #2
 8006918:	d901      	bls.n	800691e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e1ef      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800691e:	4b3b      	ldr	r3, [pc, #236]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 8006920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0f0      	beq.n	800690c <HAL_RCC_OscConfig+0x420>
 800692a:	e018      	b.n	800695e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800692c:	4b37      	ldr	r3, [pc, #220]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 800692e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006930:	4a36      	ldr	r2, [pc, #216]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 8006932:	f023 0301 	bic.w	r3, r3, #1
 8006936:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006938:	f7fe fff8 	bl	800592c <HAL_GetTick>
 800693c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800693e:	e008      	b.n	8006952 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006940:	f7fe fff4 	bl	800592c <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e1d5      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006952:	4b2e      	ldr	r3, [pc, #184]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 8006954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1f0      	bne.n	8006940 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0320 	and.w	r3, r3, #32
 8006966:	2b00      	cmp	r3, #0
 8006968:	d036      	beq.n	80069d8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d019      	beq.n	80069a6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006972:	4b26      	ldr	r3, [pc, #152]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a25      	ldr	r2, [pc, #148]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 8006978:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800697c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800697e:	f7fe ffd5 	bl	800592c <HAL_GetTick>
 8006982:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006984:	e008      	b.n	8006998 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006986:	f7fe ffd1 	bl	800592c <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	2b02      	cmp	r3, #2
 8006992:	d901      	bls.n	8006998 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e1b2      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006998:	4b1c      	ldr	r3, [pc, #112]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d0f0      	beq.n	8006986 <HAL_RCC_OscConfig+0x49a>
 80069a4:	e018      	b.n	80069d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80069a6:	4b19      	ldr	r3, [pc, #100]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a18      	ldr	r2, [pc, #96]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 80069ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80069b2:	f7fe ffbb 	bl	800592c <HAL_GetTick>
 80069b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069b8:	e008      	b.n	80069cc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80069ba:	f7fe ffb7 	bl	800592c <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d901      	bls.n	80069cc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e198      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069cc:	4b0f      	ldr	r3, [pc, #60]	; (8006a0c <HAL_RCC_OscConfig+0x520>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1f0      	bne.n	80069ba <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 8085 	beq.w	8006af0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80069e6:	4b0a      	ldr	r3, [pc, #40]	; (8006a10 <HAL_RCC_OscConfig+0x524>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a09      	ldr	r2, [pc, #36]	; (8006a10 <HAL_RCC_OscConfig+0x524>)
 80069ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069f2:	f7fe ff9b 	bl	800592c <HAL_GetTick>
 80069f6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069f8:	e00c      	b.n	8006a14 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80069fa:	f7fe ff97 	bl	800592c <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	2b64      	cmp	r3, #100	; 0x64
 8006a06:	d905      	bls.n	8006a14 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e178      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
 8006a0c:	58024400 	.word	0x58024400
 8006a10:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a14:	4b96      	ldr	r3, [pc, #600]	; (8006c70 <HAL_RCC_OscConfig+0x784>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d0ec      	beq.n	80069fa <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d106      	bne.n	8006a36 <HAL_RCC_OscConfig+0x54a>
 8006a28:	4b92      	ldr	r3, [pc, #584]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2c:	4a91      	ldr	r2, [pc, #580]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006a2e:	f043 0301 	orr.w	r3, r3, #1
 8006a32:	6713      	str	r3, [r2, #112]	; 0x70
 8006a34:	e02d      	b.n	8006a92 <HAL_RCC_OscConfig+0x5a6>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10c      	bne.n	8006a58 <HAL_RCC_OscConfig+0x56c>
 8006a3e:	4b8d      	ldr	r3, [pc, #564]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a42:	4a8c      	ldr	r2, [pc, #560]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006a44:	f023 0301 	bic.w	r3, r3, #1
 8006a48:	6713      	str	r3, [r2, #112]	; 0x70
 8006a4a:	4b8a      	ldr	r3, [pc, #552]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4e:	4a89      	ldr	r2, [pc, #548]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006a50:	f023 0304 	bic.w	r3, r3, #4
 8006a54:	6713      	str	r3, [r2, #112]	; 0x70
 8006a56:	e01c      	b.n	8006a92 <HAL_RCC_OscConfig+0x5a6>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	2b05      	cmp	r3, #5
 8006a5e:	d10c      	bne.n	8006a7a <HAL_RCC_OscConfig+0x58e>
 8006a60:	4b84      	ldr	r3, [pc, #528]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a64:	4a83      	ldr	r2, [pc, #524]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006a66:	f043 0304 	orr.w	r3, r3, #4
 8006a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a6c:	4b81      	ldr	r3, [pc, #516]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a70:	4a80      	ldr	r2, [pc, #512]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006a72:	f043 0301 	orr.w	r3, r3, #1
 8006a76:	6713      	str	r3, [r2, #112]	; 0x70
 8006a78:	e00b      	b.n	8006a92 <HAL_RCC_OscConfig+0x5a6>
 8006a7a:	4b7e      	ldr	r3, [pc, #504]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7e:	4a7d      	ldr	r2, [pc, #500]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006a80:	f023 0301 	bic.w	r3, r3, #1
 8006a84:	6713      	str	r3, [r2, #112]	; 0x70
 8006a86:	4b7b      	ldr	r3, [pc, #492]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8a:	4a7a      	ldr	r2, [pc, #488]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006a8c:	f023 0304 	bic.w	r3, r3, #4
 8006a90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d015      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a9a:	f7fe ff47 	bl	800592c <HAL_GetTick>
 8006a9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006aa0:	e00a      	b.n	8006ab8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006aa2:	f7fe ff43 	bl	800592c <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d901      	bls.n	8006ab8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e122      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ab8:	4b6e      	ldr	r3, [pc, #440]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d0ee      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x5b6>
 8006ac4:	e014      	b.n	8006af0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac6:	f7fe ff31 	bl	800592c <HAL_GetTick>
 8006aca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006acc:	e00a      	b.n	8006ae4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ace:	f7fe ff2d 	bl	800592c <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d901      	bls.n	8006ae4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e10c      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ae4:	4b63      	ldr	r3, [pc, #396]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1ee      	bne.n	8006ace <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 8101 	beq.w	8006cfc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006afa:	4b5e      	ldr	r3, [pc, #376]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b02:	2b18      	cmp	r3, #24
 8006b04:	f000 80bc 	beq.w	8006c80 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	f040 8095 	bne.w	8006c3c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b12:	4b58      	ldr	r3, [pc, #352]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a57      	ldr	r2, [pc, #348]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006b18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b1e:	f7fe ff05 	bl	800592c <HAL_GetTick>
 8006b22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b24:	e008      	b.n	8006b38 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b26:	f7fe ff01 	bl	800592c <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d901      	bls.n	8006b38 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e0e2      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b38:	4b4e      	ldr	r3, [pc, #312]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1f0      	bne.n	8006b26 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b44:	4b4b      	ldr	r3, [pc, #300]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006b46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b48:	4b4b      	ldr	r3, [pc, #300]	; (8006c78 <HAL_RCC_OscConfig+0x78c>)
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006b54:	0112      	lsls	r2, r2, #4
 8006b56:	430a      	orrs	r2, r1
 8006b58:	4946      	ldr	r1, [pc, #280]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	628b      	str	r3, [r1, #40]	; 0x28
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b62:	3b01      	subs	r3, #1
 8006b64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	025b      	lsls	r3, r3, #9
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	431a      	orrs	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	041b      	lsls	r3, r3, #16
 8006b7c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b80:	431a      	orrs	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b86:	3b01      	subs	r3, #1
 8006b88:	061b      	lsls	r3, r3, #24
 8006b8a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b8e:	4939      	ldr	r1, [pc, #228]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006b94:	4b37      	ldr	r3, [pc, #220]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	4a36      	ldr	r2, [pc, #216]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006b9a:	f023 0301 	bic.w	r3, r3, #1
 8006b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006ba0:	4b34      	ldr	r3, [pc, #208]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ba4:	4b35      	ldr	r3, [pc, #212]	; (8006c7c <HAL_RCC_OscConfig+0x790>)
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006bac:	00d2      	lsls	r2, r2, #3
 8006bae:	4931      	ldr	r1, [pc, #196]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006bb4:	4b2f      	ldr	r3, [pc, #188]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	f023 020c 	bic.w	r2, r3, #12
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc0:	492c      	ldr	r1, [pc, #176]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006bc6:	4b2b      	ldr	r3, [pc, #172]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bca:	f023 0202 	bic.w	r2, r3, #2
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd2:	4928      	ldr	r1, [pc, #160]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006bd8:	4b26      	ldr	r3, [pc, #152]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bdc:	4a25      	ldr	r2, [pc, #148]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006be2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006be4:	4b23      	ldr	r3, [pc, #140]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	4a22      	ldr	r2, [pc, #136]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006bf0:	4b20      	ldr	r3, [pc, #128]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	4a1f      	ldr	r2, [pc, #124]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006bf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006bfc:	4b1d      	ldr	r3, [pc, #116]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	4a1c      	ldr	r2, [pc, #112]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006c02:	f043 0301 	orr.w	r3, r3, #1
 8006c06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c08:	4b1a      	ldr	r3, [pc, #104]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a19      	ldr	r2, [pc, #100]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c14:	f7fe fe8a 	bl	800592c <HAL_GetTick>
 8006c18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c1c:	f7fe fe86 	bl	800592c <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e067      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c2e:	4b11      	ldr	r3, [pc, #68]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d0f0      	beq.n	8006c1c <HAL_RCC_OscConfig+0x730>
 8006c3a:	e05f      	b.n	8006cfc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c3c:	4b0d      	ldr	r3, [pc, #52]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a0c      	ldr	r2, [pc, #48]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c48:	f7fe fe70 	bl	800592c <HAL_GetTick>
 8006c4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c4e:	e008      	b.n	8006c62 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c50:	f7fe fe6c 	bl	800592c <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e04d      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c62:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <HAL_RCC_OscConfig+0x788>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1f0      	bne.n	8006c50 <HAL_RCC_OscConfig+0x764>
 8006c6e:	e045      	b.n	8006cfc <HAL_RCC_OscConfig+0x810>
 8006c70:	58024800 	.word	0x58024800
 8006c74:	58024400 	.word	0x58024400
 8006c78:	fffffc0c 	.word	0xfffffc0c
 8006c7c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006c80:	4b21      	ldr	r3, [pc, #132]	; (8006d08 <HAL_RCC_OscConfig+0x81c>)
 8006c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c84:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006c86:	4b20      	ldr	r3, [pc, #128]	; (8006d08 <HAL_RCC_OscConfig+0x81c>)
 8006c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d031      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	f003 0203 	and.w	r2, r3, #3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d12a      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	091b      	lsrs	r3, r3, #4
 8006ca6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d122      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d11a      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	0a5b      	lsrs	r3, r3, #9
 8006cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cce:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d111      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	0c1b      	lsrs	r3, r3, #16
 8006cd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d108      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	0e1b      	lsrs	r3, r3, #24
 8006cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d001      	beq.n	8006cfc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e000      	b.n	8006cfe <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3730      	adds	r7, #48	; 0x30
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	58024400 	.word	0x58024400

08006d0c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e19c      	b.n	800705a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d20:	4b8a      	ldr	r3, [pc, #552]	; (8006f4c <HAL_RCC_ClockConfig+0x240>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 030f 	and.w	r3, r3, #15
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d910      	bls.n	8006d50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d2e:	4b87      	ldr	r3, [pc, #540]	; (8006f4c <HAL_RCC_ClockConfig+0x240>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f023 020f 	bic.w	r2, r3, #15
 8006d36:	4985      	ldr	r1, [pc, #532]	; (8006f4c <HAL_RCC_ClockConfig+0x240>)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d3e:	4b83      	ldr	r3, [pc, #524]	; (8006f4c <HAL_RCC_ClockConfig+0x240>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 030f 	and.w	r3, r3, #15
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d001      	beq.n	8006d50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e184      	b.n	800705a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d010      	beq.n	8006d7e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691a      	ldr	r2, [r3, #16]
 8006d60:	4b7b      	ldr	r3, [pc, #492]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d908      	bls.n	8006d7e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d6c:	4b78      	ldr	r3, [pc, #480]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	4975      	ldr	r1, [pc, #468]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d010      	beq.n	8006dac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	695a      	ldr	r2, [r3, #20]
 8006d8e:	4b70      	ldr	r3, [pc, #448]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d908      	bls.n	8006dac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d9a:	4b6d      	ldr	r3, [pc, #436]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	496a      	ldr	r1, [pc, #424]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0310 	and.w	r3, r3, #16
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d010      	beq.n	8006dda <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699a      	ldr	r2, [r3, #24]
 8006dbc:	4b64      	ldr	r3, [pc, #400]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006dbe:	69db      	ldr	r3, [r3, #28]
 8006dc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d908      	bls.n	8006dda <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006dc8:	4b61      	ldr	r3, [pc, #388]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	495e      	ldr	r1, [pc, #376]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0320 	and.w	r3, r3, #32
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d010      	beq.n	8006e08 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	69da      	ldr	r2, [r3, #28]
 8006dea:	4b59      	ldr	r3, [pc, #356]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d908      	bls.n	8006e08 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006df6:	4b56      	ldr	r3, [pc, #344]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	4953      	ldr	r1, [pc, #332]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d010      	beq.n	8006e36 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68da      	ldr	r2, [r3, #12]
 8006e18:	4b4d      	ldr	r3, [pc, #308]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	f003 030f 	and.w	r3, r3, #15
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d908      	bls.n	8006e36 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e24:	4b4a      	ldr	r3, [pc, #296]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	f023 020f 	bic.w	r2, r3, #15
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	4947      	ldr	r1, [pc, #284]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d055      	beq.n	8006eee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006e42:	4b43      	ldr	r3, [pc, #268]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	4940      	ldr	r1, [pc, #256]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d107      	bne.n	8006e6c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e5c:	4b3c      	ldr	r3, [pc, #240]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d121      	bne.n	8006eac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e0f6      	b.n	800705a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	d107      	bne.n	8006e84 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e74:	4b36      	ldr	r3, [pc, #216]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d115      	bne.n	8006eac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e0ea      	b.n	800705a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d107      	bne.n	8006e9c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e8c:	4b30      	ldr	r3, [pc, #192]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d109      	bne.n	8006eac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e0de      	b.n	800705a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e9c:	4b2c      	ldr	r3, [pc, #176]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0304 	and.w	r3, r3, #4
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e0d6      	b.n	800705a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006eac:	4b28      	ldr	r3, [pc, #160]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	f023 0207 	bic.w	r2, r3, #7
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	4925      	ldr	r1, [pc, #148]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ebe:	f7fe fd35 	bl	800592c <HAL_GetTick>
 8006ec2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ec4:	e00a      	b.n	8006edc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ec6:	f7fe fd31 	bl	800592c <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d901      	bls.n	8006edc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e0be      	b.n	800705a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006edc:	4b1c      	ldr	r3, [pc, #112]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	00db      	lsls	r3, r3, #3
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d1eb      	bne.n	8006ec6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d010      	beq.n	8006f1c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68da      	ldr	r2, [r3, #12]
 8006efe:	4b14      	ldr	r3, [pc, #80]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	f003 030f 	and.w	r3, r3, #15
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d208      	bcs.n	8006f1c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f0a:	4b11      	ldr	r3, [pc, #68]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	f023 020f 	bic.w	r2, r3, #15
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	490e      	ldr	r1, [pc, #56]	; (8006f50 <HAL_RCC_ClockConfig+0x244>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f1c:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <HAL_RCC_ClockConfig+0x240>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 030f 	and.w	r3, r3, #15
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d214      	bcs.n	8006f54 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f2a:	4b08      	ldr	r3, [pc, #32]	; (8006f4c <HAL_RCC_ClockConfig+0x240>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f023 020f 	bic.w	r2, r3, #15
 8006f32:	4906      	ldr	r1, [pc, #24]	; (8006f4c <HAL_RCC_ClockConfig+0x240>)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f3a:	4b04      	ldr	r3, [pc, #16]	; (8006f4c <HAL_RCC_ClockConfig+0x240>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 030f 	and.w	r3, r3, #15
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d005      	beq.n	8006f54 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e086      	b.n	800705a <HAL_RCC_ClockConfig+0x34e>
 8006f4c:	52002000 	.word	0x52002000
 8006f50:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0304 	and.w	r3, r3, #4
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d010      	beq.n	8006f82 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691a      	ldr	r2, [r3, #16]
 8006f64:	4b3f      	ldr	r3, [pc, #252]	; (8007064 <HAL_RCC_ClockConfig+0x358>)
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d208      	bcs.n	8006f82 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f70:	4b3c      	ldr	r3, [pc, #240]	; (8007064 <HAL_RCC_ClockConfig+0x358>)
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	4939      	ldr	r1, [pc, #228]	; (8007064 <HAL_RCC_ClockConfig+0x358>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0308 	and.w	r3, r3, #8
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d010      	beq.n	8006fb0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	695a      	ldr	r2, [r3, #20]
 8006f92:	4b34      	ldr	r3, [pc, #208]	; (8007064 <HAL_RCC_ClockConfig+0x358>)
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d208      	bcs.n	8006fb0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f9e:	4b31      	ldr	r3, [pc, #196]	; (8007064 <HAL_RCC_ClockConfig+0x358>)
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	492e      	ldr	r1, [pc, #184]	; (8007064 <HAL_RCC_ClockConfig+0x358>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0310 	and.w	r3, r3, #16
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d010      	beq.n	8006fde <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	699a      	ldr	r2, [r3, #24]
 8006fc0:	4b28      	ldr	r3, [pc, #160]	; (8007064 <HAL_RCC_ClockConfig+0x358>)
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d208      	bcs.n	8006fde <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006fcc:	4b25      	ldr	r3, [pc, #148]	; (8007064 <HAL_RCC_ClockConfig+0x358>)
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	4922      	ldr	r1, [pc, #136]	; (8007064 <HAL_RCC_ClockConfig+0x358>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0320 	and.w	r3, r3, #32
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d010      	beq.n	800700c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	69da      	ldr	r2, [r3, #28]
 8006fee:	4b1d      	ldr	r3, [pc, #116]	; (8007064 <HAL_RCC_ClockConfig+0x358>)
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d208      	bcs.n	800700c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006ffa:	4b1a      	ldr	r3, [pc, #104]	; (8007064 <HAL_RCC_ClockConfig+0x358>)
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	4917      	ldr	r1, [pc, #92]	; (8007064 <HAL_RCC_ClockConfig+0x358>)
 8007008:	4313      	orrs	r3, r2
 800700a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800700c:	f000 f834 	bl	8007078 <HAL_RCC_GetSysClockFreq>
 8007010:	4601      	mov	r1, r0
 8007012:	4b14      	ldr	r3, [pc, #80]	; (8007064 <HAL_RCC_ClockConfig+0x358>)
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	0a1b      	lsrs	r3, r3, #8
 8007018:	f003 030f 	and.w	r3, r3, #15
 800701c:	4a12      	ldr	r2, [pc, #72]	; (8007068 <HAL_RCC_ClockConfig+0x35c>)
 800701e:	5cd3      	ldrb	r3, [r2, r3]
 8007020:	f003 031f 	and.w	r3, r3, #31
 8007024:	fa21 f303 	lsr.w	r3, r1, r3
 8007028:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800702a:	4b0e      	ldr	r3, [pc, #56]	; (8007064 <HAL_RCC_ClockConfig+0x358>)
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	f003 030f 	and.w	r3, r3, #15
 8007032:	4a0d      	ldr	r2, [pc, #52]	; (8007068 <HAL_RCC_ClockConfig+0x35c>)
 8007034:	5cd3      	ldrb	r3, [r2, r3]
 8007036:	f003 031f 	and.w	r3, r3, #31
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	fa22 f303 	lsr.w	r3, r2, r3
 8007040:	4a0a      	ldr	r2, [pc, #40]	; (800706c <HAL_RCC_ClockConfig+0x360>)
 8007042:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007044:	4a0a      	ldr	r2, [pc, #40]	; (8007070 <HAL_RCC_ClockConfig+0x364>)
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800704a:	4b0a      	ldr	r3, [pc, #40]	; (8007074 <HAL_RCC_ClockConfig+0x368>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4618      	mov	r0, r3
 8007050:	f7fe fc22 	bl	8005898 <HAL_InitTick>
 8007054:	4603      	mov	r3, r0
 8007056:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	58024400 	.word	0x58024400
 8007068:	0800cb44 	.word	0x0800cb44
 800706c:	24000004 	.word	0x24000004
 8007070:	24000000 	.word	0x24000000
 8007074:	24000008 	.word	0x24000008

08007078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007078:	b480      	push	{r7}
 800707a:	b089      	sub	sp, #36	; 0x24
 800707c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800707e:	4baf      	ldr	r3, [pc, #700]	; (800733c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007086:	2b18      	cmp	r3, #24
 8007088:	f200 814e 	bhi.w	8007328 <HAL_RCC_GetSysClockFreq+0x2b0>
 800708c:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <HAL_RCC_GetSysClockFreq+0x1c>)
 800708e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007092:	bf00      	nop
 8007094:	080070f9 	.word	0x080070f9
 8007098:	08007329 	.word	0x08007329
 800709c:	08007329 	.word	0x08007329
 80070a0:	08007329 	.word	0x08007329
 80070a4:	08007329 	.word	0x08007329
 80070a8:	08007329 	.word	0x08007329
 80070ac:	08007329 	.word	0x08007329
 80070b0:	08007329 	.word	0x08007329
 80070b4:	0800711f 	.word	0x0800711f
 80070b8:	08007329 	.word	0x08007329
 80070bc:	08007329 	.word	0x08007329
 80070c0:	08007329 	.word	0x08007329
 80070c4:	08007329 	.word	0x08007329
 80070c8:	08007329 	.word	0x08007329
 80070cc:	08007329 	.word	0x08007329
 80070d0:	08007329 	.word	0x08007329
 80070d4:	08007125 	.word	0x08007125
 80070d8:	08007329 	.word	0x08007329
 80070dc:	08007329 	.word	0x08007329
 80070e0:	08007329 	.word	0x08007329
 80070e4:	08007329 	.word	0x08007329
 80070e8:	08007329 	.word	0x08007329
 80070ec:	08007329 	.word	0x08007329
 80070f0:	08007329 	.word	0x08007329
 80070f4:	0800712b 	.word	0x0800712b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070f8:	4b90      	ldr	r3, [pc, #576]	; (800733c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0320 	and.w	r3, r3, #32
 8007100:	2b00      	cmp	r3, #0
 8007102:	d009      	beq.n	8007118 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007104:	4b8d      	ldr	r3, [pc, #564]	; (800733c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	08db      	lsrs	r3, r3, #3
 800710a:	f003 0303 	and.w	r3, r3, #3
 800710e:	4a8c      	ldr	r2, [pc, #560]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007110:	fa22 f303 	lsr.w	r3, r2, r3
 8007114:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007116:	e10a      	b.n	800732e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007118:	4b89      	ldr	r3, [pc, #548]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800711a:	61bb      	str	r3, [r7, #24]
    break;
 800711c:	e107      	b.n	800732e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800711e:	4b89      	ldr	r3, [pc, #548]	; (8007344 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007120:	61bb      	str	r3, [r7, #24]
    break;
 8007122:	e104      	b.n	800732e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007124:	4b88      	ldr	r3, [pc, #544]	; (8007348 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8007126:	61bb      	str	r3, [r7, #24]
    break;
 8007128:	e101      	b.n	800732e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800712a:	4b84      	ldr	r3, [pc, #528]	; (800733c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800712c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007134:	4b81      	ldr	r3, [pc, #516]	; (800733c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007138:	091b      	lsrs	r3, r3, #4
 800713a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800713e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007140:	4b7e      	ldr	r3, [pc, #504]	; (800733c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800714a:	4b7c      	ldr	r3, [pc, #496]	; (800733c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800714c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714e:	08db      	lsrs	r3, r3, #3
 8007150:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	fb02 f303 	mul.w	r3, r2, r3
 800715a:	ee07 3a90 	vmov	s15, r3
 800715e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007162:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 80da 	beq.w	8007322 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d05a      	beq.n	800722a <HAL_RCC_GetSysClockFreq+0x1b2>
 8007174:	2b01      	cmp	r3, #1
 8007176:	d302      	bcc.n	800717e <HAL_RCC_GetSysClockFreq+0x106>
 8007178:	2b02      	cmp	r3, #2
 800717a:	d078      	beq.n	800726e <HAL_RCC_GetSysClockFreq+0x1f6>
 800717c:	e099      	b.n	80072b2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800717e:	4b6f      	ldr	r3, [pc, #444]	; (800733c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0320 	and.w	r3, r3, #32
 8007186:	2b00      	cmp	r3, #0
 8007188:	d02d      	beq.n	80071e6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800718a:	4b6c      	ldr	r3, [pc, #432]	; (800733c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	08db      	lsrs	r3, r3, #3
 8007190:	f003 0303 	and.w	r3, r3, #3
 8007194:	4a6a      	ldr	r2, [pc, #424]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007196:	fa22 f303 	lsr.w	r3, r2, r3
 800719a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071b4:	4b61      	ldr	r3, [pc, #388]	; (800733c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80071b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071bc:	ee07 3a90 	vmov	s15, r3
 80071c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80071c8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800734c <HAL_RCC_GetSysClockFreq+0x2d4>
 80071cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80071e4:	e087      	b.n	80072f6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	ee07 3a90 	vmov	s15, r3
 80071ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007350 <HAL_RCC_GetSysClockFreq+0x2d8>
 80071f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f8:	4b50      	ldr	r3, [pc, #320]	; (800733c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80071fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007200:	ee07 3a90 	vmov	s15, r3
 8007204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007208:	ed97 6a02 	vldr	s12, [r7, #8]
 800720c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800734c <HAL_RCC_GetSysClockFreq+0x2d4>
 8007210:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007214:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007218:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800721c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007224:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007228:	e065      	b.n	80072f6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	ee07 3a90 	vmov	s15, r3
 8007230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007234:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007354 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007238:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800723c:	4b3f      	ldr	r3, [pc, #252]	; (800733c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800723e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007244:	ee07 3a90 	vmov	s15, r3
 8007248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800724c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007250:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800734c <HAL_RCC_GetSysClockFreq+0x2d4>
 8007254:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007258:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800725c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007260:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007268:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800726c:	e043      	b.n	80072f6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	ee07 3a90 	vmov	s15, r3
 8007274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007278:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007358 <HAL_RCC_GetSysClockFreq+0x2e0>
 800727c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007280:	4b2e      	ldr	r3, [pc, #184]	; (800733c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007288:	ee07 3a90 	vmov	s15, r3
 800728c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007290:	ed97 6a02 	vldr	s12, [r7, #8]
 8007294:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800734c <HAL_RCC_GetSysClockFreq+0x2d4>
 8007298:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800729c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072b0:	e021      	b.n	80072f6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	ee07 3a90 	vmov	s15, r3
 80072b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072bc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007354 <HAL_RCC_GetSysClockFreq+0x2dc>
 80072c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c4:	4b1d      	ldr	r3, [pc, #116]	; (800733c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80072c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072cc:	ee07 3a90 	vmov	s15, r3
 80072d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80072d8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800734c <HAL_RCC_GetSysClockFreq+0x2d4>
 80072dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072f4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80072f6:	4b11      	ldr	r3, [pc, #68]	; (800733c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80072f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fa:	0a5b      	lsrs	r3, r3, #9
 80072fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007300:	3301      	adds	r3, #1
 8007302:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800730e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800731a:	ee17 3a90 	vmov	r3, s15
 800731e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007320:	e005      	b.n	800732e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007322:	2300      	movs	r3, #0
 8007324:	61bb      	str	r3, [r7, #24]
    break;
 8007326:	e002      	b.n	800732e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007328:	4b06      	ldr	r3, [pc, #24]	; (8007344 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800732a:	61bb      	str	r3, [r7, #24]
    break;
 800732c:	bf00      	nop
  }

  return sysclockfreq;
 800732e:	69bb      	ldr	r3, [r7, #24]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3724      	adds	r7, #36	; 0x24
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	58024400 	.word	0x58024400
 8007340:	03d09000 	.word	0x03d09000
 8007344:	003d0900 	.word	0x003d0900
 8007348:	02625a00 	.word	0x02625a00
 800734c:	46000000 	.word	0x46000000
 8007350:	4c742400 	.word	0x4c742400
 8007354:	4a742400 	.word	0x4a742400
 8007358:	4c189680 	.word	0x4c189680

0800735c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007362:	f7ff fe89 	bl	8007078 <HAL_RCC_GetSysClockFreq>
 8007366:	4601      	mov	r1, r0
 8007368:	4b10      	ldr	r3, [pc, #64]	; (80073ac <HAL_RCC_GetHCLKFreq+0x50>)
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	0a1b      	lsrs	r3, r3, #8
 800736e:	f003 030f 	and.w	r3, r3, #15
 8007372:	4a0f      	ldr	r2, [pc, #60]	; (80073b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007374:	5cd3      	ldrb	r3, [r2, r3]
 8007376:	f003 031f 	and.w	r3, r3, #31
 800737a:	fa21 f303 	lsr.w	r3, r1, r3
 800737e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007380:	4b0a      	ldr	r3, [pc, #40]	; (80073ac <HAL_RCC_GetHCLKFreq+0x50>)
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	f003 030f 	and.w	r3, r3, #15
 8007388:	4a09      	ldr	r2, [pc, #36]	; (80073b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800738a:	5cd3      	ldrb	r3, [r2, r3]
 800738c:	f003 031f 	and.w	r3, r3, #31
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	fa22 f303 	lsr.w	r3, r2, r3
 8007396:	4a07      	ldr	r2, [pc, #28]	; (80073b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007398:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800739a:	4a07      	ldr	r2, [pc, #28]	; (80073b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80073a0:	4b04      	ldr	r3, [pc, #16]	; (80073b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80073a2:	681b      	ldr	r3, [r3, #0]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	58024400 	.word	0x58024400
 80073b0:	0800cb44 	.word	0x0800cb44
 80073b4:	24000004 	.word	0x24000004
 80073b8:	24000000 	.word	0x24000000

080073bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80073c0:	f7ff ffcc 	bl	800735c <HAL_RCC_GetHCLKFreq>
 80073c4:	4601      	mov	r1, r0
 80073c6:	4b06      	ldr	r3, [pc, #24]	; (80073e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	091b      	lsrs	r3, r3, #4
 80073cc:	f003 0307 	and.w	r3, r3, #7
 80073d0:	4a04      	ldr	r2, [pc, #16]	; (80073e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80073d2:	5cd3      	ldrb	r3, [r2, r3]
 80073d4:	f003 031f 	and.w	r3, r3, #31
 80073d8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80073dc:	4618      	mov	r0, r3
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	58024400 	.word	0x58024400
 80073e4:	0800cb44 	.word	0x0800cb44

080073e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80073ec:	f7ff ffb6 	bl	800735c <HAL_RCC_GetHCLKFreq>
 80073f0:	4601      	mov	r1, r0
 80073f2:	4b06      	ldr	r3, [pc, #24]	; (800740c <HAL_RCC_GetPCLK2Freq+0x24>)
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	0a1b      	lsrs	r3, r3, #8
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	4a04      	ldr	r2, [pc, #16]	; (8007410 <HAL_RCC_GetPCLK2Freq+0x28>)
 80073fe:	5cd3      	ldrb	r3, [r2, r3]
 8007400:	f003 031f 	and.w	r3, r3, #31
 8007404:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007408:	4618      	mov	r0, r3
 800740a:	bd80      	pop	{r7, pc}
 800740c:	58024400 	.word	0x58024400
 8007410:	0800cb44 	.word	0x0800cb44

08007414 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800741c:	2300      	movs	r3, #0
 800741e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007420:	2300      	movs	r3, #0
 8007422:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d03d      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007438:	d013      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800743a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800743e:	d802      	bhi.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007440:	2b00      	cmp	r3, #0
 8007442:	d007      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007444:	e01f      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800744a:	d013      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800744c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007450:	d01c      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007452:	e018      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007454:	4baf      	ldr	r3, [pc, #700]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	4aae      	ldr	r2, [pc, #696]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800745a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800745e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007460:	e015      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	3304      	adds	r3, #4
 8007466:	2102      	movs	r1, #2
 8007468:	4618      	mov	r0, r3
 800746a:	f001 f96f 	bl	800874c <RCCEx_PLL2_Config>
 800746e:	4603      	mov	r3, r0
 8007470:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007472:	e00c      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	3324      	adds	r3, #36	; 0x24
 8007478:	2102      	movs	r1, #2
 800747a:	4618      	mov	r0, r3
 800747c:	f001 fa18 	bl	80088b0 <RCCEx_PLL3_Config>
 8007480:	4603      	mov	r3, r0
 8007482:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007484:	e003      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	75fb      	strb	r3, [r7, #23]
      break;
 800748a:	e000      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800748c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800748e:	7dfb      	ldrb	r3, [r7, #23]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d109      	bne.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007494:	4b9f      	ldr	r3, [pc, #636]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007498:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074a0:	499c      	ldr	r1, [pc, #624]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	650b      	str	r3, [r1, #80]	; 0x50
 80074a6:	e001      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a8:	7dfb      	ldrb	r3, [r7, #23]
 80074aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d03d      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074bc:	2b04      	cmp	r3, #4
 80074be:	d826      	bhi.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80074c0:	a201      	add	r2, pc, #4	; (adr r2, 80074c8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80074c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c6:	bf00      	nop
 80074c8:	080074dd 	.word	0x080074dd
 80074cc:	080074eb 	.word	0x080074eb
 80074d0:	080074fd 	.word	0x080074fd
 80074d4:	08007515 	.word	0x08007515
 80074d8:	08007515 	.word	0x08007515
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074dc:	4b8d      	ldr	r3, [pc, #564]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e0:	4a8c      	ldr	r2, [pc, #560]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074e8:	e015      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3304      	adds	r3, #4
 80074ee:	2100      	movs	r1, #0
 80074f0:	4618      	mov	r0, r3
 80074f2:	f001 f92b 	bl	800874c <RCCEx_PLL2_Config>
 80074f6:	4603      	mov	r3, r0
 80074f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074fa:	e00c      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3324      	adds	r3, #36	; 0x24
 8007500:	2100      	movs	r1, #0
 8007502:	4618      	mov	r0, r3
 8007504:	f001 f9d4 	bl	80088b0 <RCCEx_PLL3_Config>
 8007508:	4603      	mov	r3, r0
 800750a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800750c:	e003      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	75fb      	strb	r3, [r7, #23]
      break;
 8007512:	e000      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007514:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007516:	7dfb      	ldrb	r3, [r7, #23]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d109      	bne.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800751c:	4b7d      	ldr	r3, [pc, #500]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800751e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007520:	f023 0207 	bic.w	r2, r3, #7
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007528:	497a      	ldr	r1, [pc, #488]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800752a:	4313      	orrs	r3, r2
 800752c:	650b      	str	r3, [r1, #80]	; 0x50
 800752e:	e001      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007530:	7dfb      	ldrb	r3, [r7, #23]
 8007532:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800753c:	2b00      	cmp	r3, #0
 800753e:	d03e      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007544:	2b80      	cmp	r3, #128	; 0x80
 8007546:	d01c      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007548:	2b80      	cmp	r3, #128	; 0x80
 800754a:	d804      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800754c:	2b00      	cmp	r3, #0
 800754e:	d008      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007550:	2b40      	cmp	r3, #64	; 0x40
 8007552:	d00d      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007554:	e01e      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007556:	2bc0      	cmp	r3, #192	; 0xc0
 8007558:	d01f      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800755a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800755e:	d01e      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007560:	e018      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007562:	4b6c      	ldr	r3, [pc, #432]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007566:	4a6b      	ldr	r2, [pc, #428]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800756c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800756e:	e017      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3304      	adds	r3, #4
 8007574:	2100      	movs	r1, #0
 8007576:	4618      	mov	r0, r3
 8007578:	f001 f8e8 	bl	800874c <RCCEx_PLL2_Config>
 800757c:	4603      	mov	r3, r0
 800757e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007580:	e00e      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	3324      	adds	r3, #36	; 0x24
 8007586:	2100      	movs	r1, #0
 8007588:	4618      	mov	r0, r3
 800758a:	f001 f991 	bl	80088b0 <RCCEx_PLL3_Config>
 800758e:	4603      	mov	r3, r0
 8007590:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007592:	e005      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	75fb      	strb	r3, [r7, #23]
      break;
 8007598:	e002      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800759a:	bf00      	nop
 800759c:	e000      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800759e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075a0:	7dfb      	ldrb	r3, [r7, #23]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d109      	bne.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80075a6:	4b5b      	ldr	r3, [pc, #364]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b2:	4958      	ldr	r1, [pc, #352]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	650b      	str	r3, [r1, #80]	; 0x50
 80075b8:	e001      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ba:	7dfb      	ldrb	r3, [r7, #23]
 80075bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d044      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80075d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075d4:	d01f      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80075d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075da:	d805      	bhi.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00a      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80075e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075e4:	d00e      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80075e6:	e01f      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80075e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80075ec:	d01f      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80075ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075f2:	d01e      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80075f4:	e018      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075f6:	4b47      	ldr	r3, [pc, #284]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fa:	4a46      	ldr	r2, [pc, #280]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007600:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007602:	e017      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3304      	adds	r3, #4
 8007608:	2100      	movs	r1, #0
 800760a:	4618      	mov	r0, r3
 800760c:	f001 f89e 	bl	800874c <RCCEx_PLL2_Config>
 8007610:	4603      	mov	r3, r0
 8007612:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007614:	e00e      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3324      	adds	r3, #36	; 0x24
 800761a:	2100      	movs	r1, #0
 800761c:	4618      	mov	r0, r3
 800761e:	f001 f947 	bl	80088b0 <RCCEx_PLL3_Config>
 8007622:	4603      	mov	r3, r0
 8007624:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007626:	e005      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	75fb      	strb	r3, [r7, #23]
      break;
 800762c:	e002      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800762e:	bf00      	nop
 8007630:	e000      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007632:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007634:	7dfb      	ldrb	r3, [r7, #23]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10a      	bne.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800763a:	4b36      	ldr	r3, [pc, #216]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800763c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800763e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007648:	4932      	ldr	r1, [pc, #200]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800764a:	4313      	orrs	r3, r2
 800764c:	658b      	str	r3, [r1, #88]	; 0x58
 800764e:	e001      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007650:	7dfb      	ldrb	r3, [r7, #23]
 8007652:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800765c:	2b00      	cmp	r3, #0
 800765e:	d044      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007666:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800766a:	d01f      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x298>
 800766c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007670:	d805      	bhi.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007676:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800767a:	d00e      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800767c:	e01f      	b.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800767e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007682:	d01f      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007684:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007688:	d01e      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800768a:	e018      	b.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800768c:	4b21      	ldr	r3, [pc, #132]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	4a20      	ldr	r2, [pc, #128]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007696:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007698:	e017      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	3304      	adds	r3, #4
 800769e:	2100      	movs	r1, #0
 80076a0:	4618      	mov	r0, r3
 80076a2:	f001 f853 	bl	800874c <RCCEx_PLL2_Config>
 80076a6:	4603      	mov	r3, r0
 80076a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80076aa:	e00e      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	3324      	adds	r3, #36	; 0x24
 80076b0:	2100      	movs	r1, #0
 80076b2:	4618      	mov	r0, r3
 80076b4:	f001 f8fc 	bl	80088b0 <RCCEx_PLL3_Config>
 80076b8:	4603      	mov	r3, r0
 80076ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076bc:	e005      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	75fb      	strb	r3, [r7, #23]
      break;
 80076c2:	e002      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80076c4:	bf00      	nop
 80076c6:	e000      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80076c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076ca:	7dfb      	ldrb	r3, [r7, #23]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10a      	bne.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80076d0:	4b10      	ldr	r3, [pc, #64]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80076d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80076de:	490d      	ldr	r1, [pc, #52]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	658b      	str	r3, [r1, #88]	; 0x58
 80076e4:	e001      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
 80076e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d035      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076fa:	2b10      	cmp	r3, #16
 80076fc:	d00c      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80076fe:	2b10      	cmp	r3, #16
 8007700:	d802      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8007702:	2b00      	cmp	r3, #0
 8007704:	d01b      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007706:	e017      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007708:	2b20      	cmp	r3, #32
 800770a:	d00c      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800770c:	2b30      	cmp	r3, #48	; 0x30
 800770e:	d018      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007710:	e012      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007712:	bf00      	nop
 8007714:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007718:	4baf      	ldr	r3, [pc, #700]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	4aae      	ldr	r2, [pc, #696]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800771e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007722:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007724:	e00e      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	3304      	adds	r3, #4
 800772a:	2102      	movs	r1, #2
 800772c:	4618      	mov	r0, r3
 800772e:	f001 f80d 	bl	800874c <RCCEx_PLL2_Config>
 8007732:	4603      	mov	r3, r0
 8007734:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007736:	e005      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	75fb      	strb	r3, [r7, #23]
      break;
 800773c:	e002      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800773e:	bf00      	nop
 8007740:	e000      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007742:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007744:	7dfb      	ldrb	r3, [r7, #23]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d109      	bne.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800774a:	4ba3      	ldr	r3, [pc, #652]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800774c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800774e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007756:	49a0      	ldr	r1, [pc, #640]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007758:	4313      	orrs	r3, r2
 800775a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800775c:	e001      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800775e:	7dfb      	ldrb	r3, [r7, #23]
 8007760:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d042      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007776:	d01f      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800777c:	d805      	bhi.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00a      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8007782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007786:	d00e      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007788:	e01f      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800778a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800778e:	d01f      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007794:	d01e      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007796:	e018      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007798:	4b8f      	ldr	r3, [pc, #572]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779c:	4a8e      	ldr	r2, [pc, #568]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800779e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80077a4:	e017      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	3304      	adds	r3, #4
 80077aa:	2100      	movs	r1, #0
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 ffcd 	bl	800874c <RCCEx_PLL2_Config>
 80077b2:	4603      	mov	r3, r0
 80077b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80077b6:	e00e      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	3324      	adds	r3, #36	; 0x24
 80077bc:	2100      	movs	r1, #0
 80077be:	4618      	mov	r0, r3
 80077c0:	f001 f876 	bl	80088b0 <RCCEx_PLL3_Config>
 80077c4:	4603      	mov	r3, r0
 80077c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80077c8:	e005      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	75fb      	strb	r3, [r7, #23]
      break;
 80077ce:	e002      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80077d0:	bf00      	nop
 80077d2:	e000      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80077d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d109      	bne.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80077dc:	4b7e      	ldr	r3, [pc, #504]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e8:	497b      	ldr	r1, [pc, #492]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	650b      	str	r3, [r1, #80]	; 0x50
 80077ee:	e001      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f0:	7dfb      	ldrb	r3, [r7, #23]
 80077f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d042      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007804:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007808:	d01b      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800780a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800780e:	d805      	bhi.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007810:	2b00      	cmp	r3, #0
 8007812:	d022      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007818:	d00a      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800781a:	e01b      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800781c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007820:	d01d      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8007822:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007826:	d01c      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007828:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800782c:	d01b      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800782e:	e011      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	3304      	adds	r3, #4
 8007834:	2101      	movs	r1, #1
 8007836:	4618      	mov	r0, r3
 8007838:	f000 ff88 	bl	800874c <RCCEx_PLL2_Config>
 800783c:	4603      	mov	r3, r0
 800783e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007840:	e012      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	3324      	adds	r3, #36	; 0x24
 8007846:	2101      	movs	r1, #1
 8007848:	4618      	mov	r0, r3
 800784a:	f001 f831 	bl	80088b0 <RCCEx_PLL3_Config>
 800784e:	4603      	mov	r3, r0
 8007850:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007852:	e009      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	75fb      	strb	r3, [r7, #23]
      break;
 8007858:	e006      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800785a:	bf00      	nop
 800785c:	e004      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800785e:	bf00      	nop
 8007860:	e002      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007862:	bf00      	nop
 8007864:	e000      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007866:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007868:	7dfb      	ldrb	r3, [r7, #23]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d109      	bne.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800786e:	4b5a      	ldr	r3, [pc, #360]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007872:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800787a:	4957      	ldr	r1, [pc, #348]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800787c:	4313      	orrs	r3, r2
 800787e:	650b      	str	r3, [r1, #80]	; 0x50
 8007880:	e001      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d044      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800789c:	d01b      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800789e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078a2:	d805      	bhi.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d022      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80078a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078ac:	d00a      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80078ae:	e01b      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80078b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078b4:	d01d      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80078b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078ba:	d01c      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80078bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078c0:	d01b      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80078c2:	e011      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3304      	adds	r3, #4
 80078c8:	2101      	movs	r1, #1
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 ff3e 	bl	800874c <RCCEx_PLL2_Config>
 80078d0:	4603      	mov	r3, r0
 80078d2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80078d4:	e012      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	3324      	adds	r3, #36	; 0x24
 80078da:	2101      	movs	r1, #1
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 ffe7 	bl	80088b0 <RCCEx_PLL3_Config>
 80078e2:	4603      	mov	r3, r0
 80078e4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80078e6:	e009      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	75fb      	strb	r3, [r7, #23]
      break;
 80078ec:	e006      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80078ee:	bf00      	nop
 80078f0:	e004      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80078f2:	bf00      	nop
 80078f4:	e002      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80078f6:	bf00      	nop
 80078f8:	e000      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80078fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078fc:	7dfb      	ldrb	r3, [r7, #23]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10a      	bne.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007902:	4b35      	ldr	r3, [pc, #212]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007906:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007910:	4931      	ldr	r1, [pc, #196]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007912:	4313      	orrs	r3, r2
 8007914:	658b      	str	r3, [r1, #88]	; 0x58
 8007916:	e001      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007918:	7dfb      	ldrb	r3, [r7, #23]
 800791a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d02d      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800792c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007930:	d005      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007932:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007936:	d009      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007938:	2b00      	cmp	r3, #0
 800793a:	d013      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800793c:	e00f      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800793e:	4b26      	ldr	r3, [pc, #152]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007942:	4a25      	ldr	r2, [pc, #148]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007948:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800794a:	e00c      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3304      	adds	r3, #4
 8007950:	2101      	movs	r1, #1
 8007952:	4618      	mov	r0, r3
 8007954:	f000 fefa 	bl	800874c <RCCEx_PLL2_Config>
 8007958:	4603      	mov	r3, r0
 800795a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800795c:	e003      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	75fb      	strb	r3, [r7, #23]
      break;
 8007962:	e000      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007966:	7dfb      	ldrb	r3, [r7, #23]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d109      	bne.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800796c:	4b1a      	ldr	r3, [pc, #104]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800796e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007970:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007978:	4917      	ldr	r1, [pc, #92]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800797a:	4313      	orrs	r3, r2
 800797c:	650b      	str	r3, [r1, #80]	; 0x50
 800797e:	e001      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007980:	7dfb      	ldrb	r3, [r7, #23]
 8007982:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d035      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007994:	2b03      	cmp	r3, #3
 8007996:	d81b      	bhi.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007998:	a201      	add	r2, pc, #4	; (adr r2, 80079a0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800799a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799e:	bf00      	nop
 80079a0:	080079dd 	.word	0x080079dd
 80079a4:	080079b1 	.word	0x080079b1
 80079a8:	080079bf 	.word	0x080079bf
 80079ac:	080079dd 	.word	0x080079dd
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b0:	4b09      	ldr	r3, [pc, #36]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80079b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b4:	4a08      	ldr	r2, [pc, #32]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80079b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80079bc:	e00f      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	3304      	adds	r3, #4
 80079c2:	2102      	movs	r1, #2
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 fec1 	bl	800874c <RCCEx_PLL2_Config>
 80079ca:	4603      	mov	r3, r0
 80079cc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80079ce:	e006      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	75fb      	strb	r3, [r7, #23]
      break;
 80079d4:	e003      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80079d6:	bf00      	nop
 80079d8:	58024400 	.word	0x58024400
      break;
 80079dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079de:	7dfb      	ldrb	r3, [r7, #23]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d109      	bne.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80079e4:	4bba      	ldr	r3, [pc, #744]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079e8:	f023 0203 	bic.w	r2, r3, #3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f0:	49b7      	ldr	r1, [pc, #732]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80079f6:	e001      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f8:	7dfb      	ldrb	r3, [r7, #23]
 80079fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f000 8086 	beq.w	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a0a:	4bb2      	ldr	r3, [pc, #712]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4ab1      	ldr	r2, [pc, #708]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a16:	f7fd ff89 	bl	800592c <HAL_GetTick>
 8007a1a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a1c:	e009      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a1e:	f7fd ff85 	bl	800592c <HAL_GetTick>
 8007a22:	4602      	mov	r2, r0
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	2b64      	cmp	r3, #100	; 0x64
 8007a2a:	d902      	bls.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	75fb      	strb	r3, [r7, #23]
        break;
 8007a30:	e005      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a32:	4ba8      	ldr	r3, [pc, #672]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0ef      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8007a3e:	7dfb      	ldrb	r3, [r7, #23]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d166      	bne.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007a44:	4ba2      	ldr	r3, [pc, #648]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a4e:	4053      	eors	r3, r2
 8007a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d013      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a58:	4b9d      	ldr	r3, [pc, #628]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a60:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a62:	4b9b      	ldr	r3, [pc, #620]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a66:	4a9a      	ldr	r2, [pc, #616]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a6c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a6e:	4b98      	ldr	r3, [pc, #608]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a72:	4a97      	ldr	r2, [pc, #604]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a78:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007a7a:	4a95      	ldr	r2, [pc, #596]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a8a:	d115      	bne.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a8c:	f7fd ff4e 	bl	800592c <HAL_GetTick>
 8007a90:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a92:	e00b      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a94:	f7fd ff4a 	bl	800592c <HAL_GetTick>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d902      	bls.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	75fb      	strb	r3, [r7, #23]
            break;
 8007aaa:	e005      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007aac:	4b88      	ldr	r3, [pc, #544]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab0:	f003 0302 	and.w	r3, r3, #2
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d0ed      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007ab8:	7dfb      	ldrb	r3, [r7, #23]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d126      	bne.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ac8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007acc:	d10d      	bne.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007ace:	4b80      	ldr	r3, [pc, #512]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007adc:	0919      	lsrs	r1, r3, #4
 8007ade:	4b7e      	ldr	r3, [pc, #504]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007ae0:	400b      	ands	r3, r1
 8007ae2:	497b      	ldr	r1, [pc, #492]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	610b      	str	r3, [r1, #16]
 8007ae8:	e005      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007aea:	4b79      	ldr	r3, [pc, #484]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	4a78      	ldr	r2, [pc, #480]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007af0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007af4:	6113      	str	r3, [r2, #16]
 8007af6:	4b76      	ldr	r3, [pc, #472]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007af8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b04:	4972      	ldr	r1, [pc, #456]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	670b      	str	r3, [r1, #112]	; 0x70
 8007b0a:	e004      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b0c:	7dfb      	ldrb	r3, [r7, #23]
 8007b0e:	75bb      	strb	r3, [r7, #22]
 8007b10:	e001      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b12:	7dfb      	ldrb	r3, [r7, #23]
 8007b14:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d07d      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b26:	2b28      	cmp	r3, #40	; 0x28
 8007b28:	d866      	bhi.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007b2a:	a201      	add	r2, pc, #4	; (adr r2, 8007b30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b30:	08007bff 	.word	0x08007bff
 8007b34:	08007bf9 	.word	0x08007bf9
 8007b38:	08007bf9 	.word	0x08007bf9
 8007b3c:	08007bf9 	.word	0x08007bf9
 8007b40:	08007bf9 	.word	0x08007bf9
 8007b44:	08007bf9 	.word	0x08007bf9
 8007b48:	08007bf9 	.word	0x08007bf9
 8007b4c:	08007bf9 	.word	0x08007bf9
 8007b50:	08007bd5 	.word	0x08007bd5
 8007b54:	08007bf9 	.word	0x08007bf9
 8007b58:	08007bf9 	.word	0x08007bf9
 8007b5c:	08007bf9 	.word	0x08007bf9
 8007b60:	08007bf9 	.word	0x08007bf9
 8007b64:	08007bf9 	.word	0x08007bf9
 8007b68:	08007bf9 	.word	0x08007bf9
 8007b6c:	08007bf9 	.word	0x08007bf9
 8007b70:	08007be7 	.word	0x08007be7
 8007b74:	08007bf9 	.word	0x08007bf9
 8007b78:	08007bf9 	.word	0x08007bf9
 8007b7c:	08007bf9 	.word	0x08007bf9
 8007b80:	08007bf9 	.word	0x08007bf9
 8007b84:	08007bf9 	.word	0x08007bf9
 8007b88:	08007bf9 	.word	0x08007bf9
 8007b8c:	08007bf9 	.word	0x08007bf9
 8007b90:	08007bff 	.word	0x08007bff
 8007b94:	08007bf9 	.word	0x08007bf9
 8007b98:	08007bf9 	.word	0x08007bf9
 8007b9c:	08007bf9 	.word	0x08007bf9
 8007ba0:	08007bf9 	.word	0x08007bf9
 8007ba4:	08007bf9 	.word	0x08007bf9
 8007ba8:	08007bf9 	.word	0x08007bf9
 8007bac:	08007bf9 	.word	0x08007bf9
 8007bb0:	08007bff 	.word	0x08007bff
 8007bb4:	08007bf9 	.word	0x08007bf9
 8007bb8:	08007bf9 	.word	0x08007bf9
 8007bbc:	08007bf9 	.word	0x08007bf9
 8007bc0:	08007bf9 	.word	0x08007bf9
 8007bc4:	08007bf9 	.word	0x08007bf9
 8007bc8:	08007bf9 	.word	0x08007bf9
 8007bcc:	08007bf9 	.word	0x08007bf9
 8007bd0:	08007bff 	.word	0x08007bff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	2101      	movs	r1, #1
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 fdb6 	bl	800874c <RCCEx_PLL2_Config>
 8007be0:	4603      	mov	r3, r0
 8007be2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007be4:	e00c      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	3324      	adds	r3, #36	; 0x24
 8007bea:	2101      	movs	r1, #1
 8007bec:	4618      	mov	r0, r3
 8007bee:	f000 fe5f 	bl	80088b0 <RCCEx_PLL3_Config>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007bf6:	e003      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8007bfc:	e000      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007bfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c00:	7dfb      	ldrb	r3, [r7, #23]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d109      	bne.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007c06:	4b32      	ldr	r3, [pc, #200]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c12:	492f      	ldr	r1, [pc, #188]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	654b      	str	r3, [r1, #84]	; 0x54
 8007c18:	e001      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
 8007c1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d037      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c2e:	2b05      	cmp	r3, #5
 8007c30:	d820      	bhi.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007c32:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007c7b 	.word	0x08007c7b
 8007c3c:	08007c51 	.word	0x08007c51
 8007c40:	08007c63 	.word	0x08007c63
 8007c44:	08007c7b 	.word	0x08007c7b
 8007c48:	08007c7b 	.word	0x08007c7b
 8007c4c:	08007c7b 	.word	0x08007c7b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	3304      	adds	r3, #4
 8007c54:	2101      	movs	r1, #1
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 fd78 	bl	800874c <RCCEx_PLL2_Config>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c60:	e00c      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	3324      	adds	r3, #36	; 0x24
 8007c66:	2101      	movs	r1, #1
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 fe21 	bl	80088b0 <RCCEx_PLL3_Config>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c72:	e003      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	75fb      	strb	r3, [r7, #23]
      break;
 8007c78:	e000      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d109      	bne.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c82:	4b13      	ldr	r3, [pc, #76]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c86:	f023 0207 	bic.w	r2, r3, #7
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c8e:	4910      	ldr	r1, [pc, #64]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007c90:	4313      	orrs	r3, r2
 8007c92:	654b      	str	r3, [r1, #84]	; 0x54
 8007c94:	e001      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
 8007c98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0304 	and.w	r3, r3, #4
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d040      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cac:	2b05      	cmp	r3, #5
 8007cae:	d827      	bhi.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007cb0:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb6:	bf00      	nop
 8007cb8:	08007d07 	.word	0x08007d07
 8007cbc:	08007cdd 	.word	0x08007cdd
 8007cc0:	08007cef 	.word	0x08007cef
 8007cc4:	08007d07 	.word	0x08007d07
 8007cc8:	08007d07 	.word	0x08007d07
 8007ccc:	08007d07 	.word	0x08007d07
 8007cd0:	58024400 	.word	0x58024400
 8007cd4:	58024800 	.word	0x58024800
 8007cd8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	3304      	adds	r3, #4
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 fd32 	bl	800874c <RCCEx_PLL2_Config>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007cec:	e00c      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3324      	adds	r3, #36	; 0x24
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 fddb 	bl	80088b0 <RCCEx_PLL3_Config>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007cfe:	e003      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	75fb      	strb	r3, [r7, #23]
      break;
 8007d04:	e000      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007d06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10a      	bne.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d0e:	4bb2      	ldr	r3, [pc, #712]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d12:	f023 0207 	bic.w	r2, r3, #7
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d1c:	49ae      	ldr	r1, [pc, #696]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	658b      	str	r3, [r1, #88]	; 0x58
 8007d22:	e001      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d24:	7dfb      	ldrb	r3, [r7, #23]
 8007d26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0320 	and.w	r3, r3, #32
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d044      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d3e:	d01b      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d44:	d805      	bhi.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d022      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d4e:	d00a      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007d50:	e01b      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d56:	d01d      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d5c:	d01c      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007d5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d62:	d01b      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007d64:	e011      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f000 fced 	bl	800874c <RCCEx_PLL2_Config>
 8007d72:	4603      	mov	r3, r0
 8007d74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d76:	e012      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3324      	adds	r3, #36	; 0x24
 8007d7c:	2102      	movs	r1, #2
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 fd96 	bl	80088b0 <RCCEx_PLL3_Config>
 8007d84:	4603      	mov	r3, r0
 8007d86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d88:	e009      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d8e:	e006      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007d90:	bf00      	nop
 8007d92:	e004      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007d94:	bf00      	nop
 8007d96:	e002      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007d98:	bf00      	nop
 8007d9a:	e000      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10a      	bne.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007da4:	4b8c      	ldr	r3, [pc, #560]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007db2:	4989      	ldr	r1, [pc, #548]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	654b      	str	r3, [r1, #84]	; 0x54
 8007db8:	e001      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dba:	7dfb      	ldrb	r3, [r7, #23]
 8007dbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d044      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007dd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dd4:	d01b      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007dd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dda:	d805      	bhi.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d022      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007de4:	d00a      	beq.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007de6:	e01b      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dec:	d01d      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007dee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007df2:	d01c      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007df4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007df8:	d01b      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007dfa:	e011      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	3304      	adds	r3, #4
 8007e00:	2100      	movs	r1, #0
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 fca2 	bl	800874c <RCCEx_PLL2_Config>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007e0c:	e012      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	3324      	adds	r3, #36	; 0x24
 8007e12:	2102      	movs	r1, #2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 fd4b 	bl	80088b0 <RCCEx_PLL3_Config>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007e1e:	e009      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	75fb      	strb	r3, [r7, #23]
      break;
 8007e24:	e006      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007e26:	bf00      	nop
 8007e28:	e004      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007e2a:	bf00      	nop
 8007e2c:	e002      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007e2e:	bf00      	nop
 8007e30:	e000      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e34:	7dfb      	ldrb	r3, [r7, #23]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10a      	bne.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e3a:	4b67      	ldr	r3, [pc, #412]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e3e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e48:	4963      	ldr	r1, [pc, #396]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	658b      	str	r3, [r1, #88]	; 0x58
 8007e4e:	e001      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e50:	7dfb      	ldrb	r3, [r7, #23]
 8007e52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d044      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e6a:	d01b      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007e6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e70:	d805      	bhi.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d022      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e7a:	d00a      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007e7c:	e01b      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e82:	d01d      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007e84:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007e88:	d01c      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007e8a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e8e:	d01b      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007e90:	e011      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	3304      	adds	r3, #4
 8007e96:	2100      	movs	r1, #0
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 fc57 	bl	800874c <RCCEx_PLL2_Config>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007ea2:	e012      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3324      	adds	r3, #36	; 0x24
 8007ea8:	2102      	movs	r1, #2
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 fd00 	bl	80088b0 <RCCEx_PLL3_Config>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007eb4:	e009      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8007eba:	e006      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007ebc:	bf00      	nop
 8007ebe:	e004      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007ec0:	bf00      	nop
 8007ec2:	e002      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007ec4:	bf00      	nop
 8007ec6:	e000      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007ec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10a      	bne.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ed0:	4b41      	ldr	r3, [pc, #260]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ede:	493e      	ldr	r1, [pc, #248]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	658b      	str	r3, [r1, #88]	; 0x58
 8007ee4:	e001      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee6:	7dfb      	ldrb	r3, [r7, #23]
 8007ee8:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0308 	and.w	r3, r3, #8
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d01a      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f00:	d10a      	bne.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	3324      	adds	r3, #36	; 0x24
 8007f06:	2102      	movs	r1, #2
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 fcd1 	bl	80088b0 <RCCEx_PLL3_Config>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d001      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f18:	4b2f      	ldr	r3, [pc, #188]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f26:	492c      	ldr	r1, [pc, #176]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d01a      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f42:	d10a      	bne.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3324      	adds	r3, #36	; 0x24
 8007f48:	2102      	movs	r1, #2
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 fcb0 	bl	80088b0 <RCCEx_PLL3_Config>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f5a:	4b1f      	ldr	r3, [pc, #124]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f68:	491b      	ldr	r1, [pc, #108]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d032      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f84:	d00d      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007f86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f8a:	d016      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d111      	bne.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3304      	adds	r3, #4
 8007f94:	2100      	movs	r1, #0
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 fbd8 	bl	800874c <RCCEx_PLL2_Config>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007fa0:	e00c      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	3324      	adds	r3, #36	; 0x24
 8007fa6:	2102      	movs	r1, #2
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 fc81 	bl	80088b0 <RCCEx_PLL3_Config>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007fb2:	e003      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fb8:	e000      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007fba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fbc:	7dfb      	ldrb	r3, [r7, #23]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10c      	bne.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fc2:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007fd0:	4901      	ldr	r1, [pc, #4]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	658b      	str	r3, [r1, #88]	; 0x58
 8007fd6:	e003      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007fd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fdc:	7dfb      	ldrb	r3, [r7, #23]
 8007fde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d02f      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ff2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ff6:	d00c      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007ff8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ffc:	d015      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008002:	d10f      	bne.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008004:	4b79      	ldr	r3, [pc, #484]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008008:	4a78      	ldr	r2, [pc, #480]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800800a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800800e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008010:	e00c      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	3324      	adds	r3, #36	; 0x24
 8008016:	2101      	movs	r1, #1
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fc49 	bl	80088b0 <RCCEx_PLL3_Config>
 800801e:	4603      	mov	r3, r0
 8008020:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008022:	e003      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	75fb      	strb	r3, [r7, #23]
      break;
 8008028:	e000      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800802a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800802c:	7dfb      	ldrb	r3, [r7, #23]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10a      	bne.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008032:	4b6e      	ldr	r3, [pc, #440]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008036:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008040:	496a      	ldr	r1, [pc, #424]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008042:	4313      	orrs	r3, r2
 8008044:	654b      	str	r3, [r1, #84]	; 0x54
 8008046:	e001      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008048:	7dfb      	ldrb	r3, [r7, #23]
 800804a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008054:	2b00      	cmp	r3, #0
 8008056:	d029      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8008060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008064:	d007      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8008066:	e00f      	b.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008068:	4b60      	ldr	r3, [pc, #384]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800806a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806c:	4a5f      	ldr	r2, [pc, #380]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800806e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008072:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008074:	e00b      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	3304      	adds	r3, #4
 800807a:	2102      	movs	r1, #2
 800807c:	4618      	mov	r0, r3
 800807e:	f000 fb65 	bl	800874c <RCCEx_PLL2_Config>
 8008082:	4603      	mov	r3, r0
 8008084:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008086:	e002      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	75fb      	strb	r3, [r7, #23]
      break;
 800808c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800808e:	7dfb      	ldrb	r3, [r7, #23]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d109      	bne.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008094:	4b55      	ldr	r3, [pc, #340]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008098:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080a0:	4952      	ldr	r1, [pc, #328]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80080a6:	e001      	b.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00a      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3324      	adds	r3, #36	; 0x24
 80080bc:	2102      	movs	r1, #2
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 fbf6 	bl	80088b0 <RCCEx_PLL3_Config>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d02f      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080e2:	d00c      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80080e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080e8:	d802      	bhi.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d011      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80080ee:	e00d      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80080f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080f4:	d00f      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80080f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080fa:	d00e      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80080fc:	e006      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080fe:	4b3b      	ldr	r3, [pc, #236]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008102:	4a3a      	ldr	r2, [pc, #232]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008108:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800810a:	e007      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	75fb      	strb	r3, [r7, #23]
      break;
 8008110:	e004      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008112:	bf00      	nop
 8008114:	e002      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008116:	bf00      	nop
 8008118:	e000      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800811a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800811c:	7dfb      	ldrb	r3, [r7, #23]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d109      	bne.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008122:	4b32      	ldr	r3, [pc, #200]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008126:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800812e:	492f      	ldr	r1, [pc, #188]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008130:	4313      	orrs	r3, r2
 8008132:	654b      	str	r3, [r1, #84]	; 0x54
 8008134:	e001      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008136:	7dfb      	ldrb	r3, [r7, #23]
 8008138:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d008      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008146:	4b29      	ldr	r3, [pc, #164]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800814a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008152:	4926      	ldr	r1, [pc, #152]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008154:	4313      	orrs	r3, r2
 8008156:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d009      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008164:	4b21      	ldr	r3, [pc, #132]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008172:	491e      	ldr	r1, [pc, #120]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008174:	4313      	orrs	r3, r2
 8008176:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d008      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008184:	4b19      	ldr	r3, [pc, #100]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008188:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008190:	4916      	ldr	r1, [pc, #88]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008192:	4313      	orrs	r3, r2
 8008194:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00d      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081a2:	4b12      	ldr	r3, [pc, #72]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	4a11      	ldr	r2, [pc, #68]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80081a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081ac:	6113      	str	r3, [r2, #16]
 80081ae:	4b0f      	ldr	r3, [pc, #60]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80081b0:	691a      	ldr	r2, [r3, #16]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80081b8:	490c      	ldr	r1, [pc, #48]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	da08      	bge.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80081c6:	4b09      	ldr	r3, [pc, #36]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80081c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d2:	4906      	ldr	r1, [pc, #24]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80081d4:	4313      	orrs	r3, r2
 80081d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80081d8:	7dbb      	ldrb	r3, [r7, #22]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d101      	bne.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	e000      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	58024400 	.word	0x58024400

080081f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80081f4:	f7ff f8b2 	bl	800735c <HAL_RCC_GetHCLKFreq>
 80081f8:	4601      	mov	r1, r0
 80081fa:	4b06      	ldr	r3, [pc, #24]	; (8008214 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	091b      	lsrs	r3, r3, #4
 8008200:	f003 0307 	and.w	r3, r3, #7
 8008204:	4a04      	ldr	r2, [pc, #16]	; (8008218 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008206:	5cd3      	ldrb	r3, [r2, r3]
 8008208:	f003 031f 	and.w	r3, r3, #31
 800820c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008210:	4618      	mov	r0, r3
 8008212:	bd80      	pop	{r7, pc}
 8008214:	58024400 	.word	0x58024400
 8008218:	0800cb44 	.word	0x0800cb44

0800821c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800821c:	b480      	push	{r7}
 800821e:	b089      	sub	sp, #36	; 0x24
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008224:	4b9d      	ldr	r3, [pc, #628]	; (800849c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008228:	f003 0303 	and.w	r3, r3, #3
 800822c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800822e:	4b9b      	ldr	r3, [pc, #620]	; (800849c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008232:	0b1b      	lsrs	r3, r3, #12
 8008234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008238:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800823a:	4b98      	ldr	r3, [pc, #608]	; (800849c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800823c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823e:	091b      	lsrs	r3, r3, #4
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008246:	4b95      	ldr	r3, [pc, #596]	; (800849c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824a:	08db      	lsrs	r3, r3, #3
 800824c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	fb02 f303 	mul.w	r3, r2, r3
 8008256:	ee07 3a90 	vmov	s15, r3
 800825a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800825e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 810a 	beq.w	800847e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d05a      	beq.n	8008326 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008270:	2b01      	cmp	r3, #1
 8008272:	d302      	bcc.n	800827a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008274:	2b02      	cmp	r3, #2
 8008276:	d078      	beq.n	800836a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008278:	e099      	b.n	80083ae <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800827a:	4b88      	ldr	r3, [pc, #544]	; (800849c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0320 	and.w	r3, r3, #32
 8008282:	2b00      	cmp	r3, #0
 8008284:	d02d      	beq.n	80082e2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008286:	4b85      	ldr	r3, [pc, #532]	; (800849c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	08db      	lsrs	r3, r3, #3
 800828c:	f003 0303 	and.w	r3, r3, #3
 8008290:	4a83      	ldr	r2, [pc, #524]	; (80084a0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8008292:	fa22 f303 	lsr.w	r3, r2, r3
 8008296:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	ee07 3a90 	vmov	s15, r3
 800829e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	ee07 3a90 	vmov	s15, r3
 80082a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082b0:	4b7a      	ldr	r3, [pc, #488]	; (800849c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80082b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b8:	ee07 3a90 	vmov	s15, r3
 80082bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80082c4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80084a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80082c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082dc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80082e0:	e087      	b.n	80083f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	ee07 3a90 	vmov	s15, r3
 80082e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80084a8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80082f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082f4:	4b69      	ldr	r3, [pc, #420]	; (800849c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80082f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082fc:	ee07 3a90 	vmov	s15, r3
 8008300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008304:	ed97 6a03 	vldr	s12, [r7, #12]
 8008308:	eddf 5a66 	vldr	s11, [pc, #408]	; 80084a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800830c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008310:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008314:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008318:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800831c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008320:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008324:	e065      	b.n	80083f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	ee07 3a90 	vmov	s15, r3
 800832c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008330:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80084ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008334:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008338:	4b58      	ldr	r3, [pc, #352]	; (800849c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800833a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008340:	ee07 3a90 	vmov	s15, r3
 8008344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008348:	ed97 6a03 	vldr	s12, [r7, #12]
 800834c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80084a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008350:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008354:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008358:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800835c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008364:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008368:	e043      	b.n	80083f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	ee07 3a90 	vmov	s15, r3
 8008370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008374:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80084b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008378:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800837c:	4b47      	ldr	r3, [pc, #284]	; (800849c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800837e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008384:	ee07 3a90 	vmov	s15, r3
 8008388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800838c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008390:	eddf 5a44 	vldr	s11, [pc, #272]	; 80084a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008394:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008398:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800839c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083ac:	e021      	b.n	80083f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	ee07 3a90 	vmov	s15, r3
 80083b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80084ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80083bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083c0:	4b36      	ldr	r3, [pc, #216]	; (800849c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80083c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c8:	ee07 3a90 	vmov	s15, r3
 80083cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80083d4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80084a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80083d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083f0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80083f2:	4b2a      	ldr	r3, [pc, #168]	; (800849c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80083f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f6:	0a5b      	lsrs	r3, r3, #9
 80083f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083fc:	ee07 3a90 	vmov	s15, r3
 8008400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008404:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008408:	ee37 7a87 	vadd.f32	s14, s15, s14
 800840c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008418:	ee17 2a90 	vmov	r2, s15
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008420:	4b1e      	ldr	r3, [pc, #120]	; (800849c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008424:	0c1b      	lsrs	r3, r3, #16
 8008426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800842a:	ee07 3a90 	vmov	s15, r3
 800842e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008432:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008436:	ee37 7a87 	vadd.f32	s14, s15, s14
 800843a:	edd7 6a07 	vldr	s13, [r7, #28]
 800843e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008446:	ee17 2a90 	vmov	r2, s15
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800844e:	4b13      	ldr	r3, [pc, #76]	; (800849c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008452:	0e1b      	lsrs	r3, r3, #24
 8008454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008458:	ee07 3a90 	vmov	s15, r3
 800845c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008464:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008468:	edd7 6a07 	vldr	s13, [r7, #28]
 800846c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008474:	ee17 2a90 	vmov	r2, s15
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800847c:	e008      	b.n	8008490 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	609a      	str	r2, [r3, #8]
}
 8008490:	bf00      	nop
 8008492:	3724      	adds	r7, #36	; 0x24
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	58024400 	.word	0x58024400
 80084a0:	03d09000 	.word	0x03d09000
 80084a4:	46000000 	.word	0x46000000
 80084a8:	4c742400 	.word	0x4c742400
 80084ac:	4a742400 	.word	0x4a742400
 80084b0:	4c189680 	.word	0x4c189680

080084b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b089      	sub	sp, #36	; 0x24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084bc:	4b9d      	ldr	r3, [pc, #628]	; (8008734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c0:	f003 0303 	and.w	r3, r3, #3
 80084c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80084c6:	4b9b      	ldr	r3, [pc, #620]	; (8008734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ca:	0d1b      	lsrs	r3, r3, #20
 80084cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80084d2:	4b98      	ldr	r3, [pc, #608]	; (8008734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d6:	0a1b      	lsrs	r3, r3, #8
 80084d8:	f003 0301 	and.w	r3, r3, #1
 80084dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80084de:	4b95      	ldr	r3, [pc, #596]	; (8008734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e2:	08db      	lsrs	r3, r3, #3
 80084e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	fb02 f303 	mul.w	r3, r2, r3
 80084ee:	ee07 3a90 	vmov	s15, r3
 80084f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 810a 	beq.w	8008716 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d05a      	beq.n	80085be <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008508:	2b01      	cmp	r3, #1
 800850a:	d302      	bcc.n	8008512 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800850c:	2b02      	cmp	r3, #2
 800850e:	d078      	beq.n	8008602 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008510:	e099      	b.n	8008646 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008512:	4b88      	ldr	r3, [pc, #544]	; (8008734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 0320 	and.w	r3, r3, #32
 800851a:	2b00      	cmp	r3, #0
 800851c:	d02d      	beq.n	800857a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800851e:	4b85      	ldr	r3, [pc, #532]	; (8008734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	08db      	lsrs	r3, r3, #3
 8008524:	f003 0303 	and.w	r3, r3, #3
 8008528:	4a83      	ldr	r2, [pc, #524]	; (8008738 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800852a:	fa22 f303 	lsr.w	r3, r2, r3
 800852e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	ee07 3a90 	vmov	s15, r3
 8008536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	ee07 3a90 	vmov	s15, r3
 8008540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008548:	4b7a      	ldr	r3, [pc, #488]	; (8008734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800854a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008550:	ee07 3a90 	vmov	s15, r3
 8008554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008558:	ed97 6a03 	vldr	s12, [r7, #12]
 800855c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800873c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008560:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008564:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008568:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800856c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008574:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008578:	e087      	b.n	800868a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	ee07 3a90 	vmov	s15, r3
 8008580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008584:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008740 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008588:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800858c:	4b69      	ldr	r3, [pc, #420]	; (8008734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800858e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008594:	ee07 3a90 	vmov	s15, r3
 8008598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800859c:	ed97 6a03 	vldr	s12, [r7, #12]
 80085a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800873c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80085a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085bc:	e065      	b.n	800868a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	ee07 3a90 	vmov	s15, r3
 80085c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80085cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085d0:	4b58      	ldr	r3, [pc, #352]	; (8008734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80085d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d8:	ee07 3a90 	vmov	s15, r3
 80085dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80085e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800873c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80085e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008600:	e043      	b.n	800868a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	ee07 3a90 	vmov	s15, r3
 8008608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008748 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008610:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008614:	4b47      	ldr	r3, [pc, #284]	; (8008734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800861c:	ee07 3a90 	vmov	s15, r3
 8008620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008624:	ed97 6a03 	vldr	s12, [r7, #12]
 8008628:	eddf 5a44 	vldr	s11, [pc, #272]	; 800873c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800862c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008630:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008634:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008638:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800863c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008640:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008644:	e021      	b.n	800868a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	ee07 3a90 	vmov	s15, r3
 800864c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008650:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008654:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008658:	4b36      	ldr	r3, [pc, #216]	; (8008734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800865a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008660:	ee07 3a90 	vmov	s15, r3
 8008664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008668:	ed97 6a03 	vldr	s12, [r7, #12]
 800866c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800873c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008670:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008674:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008678:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800867c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008684:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008688:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800868a:	4b2a      	ldr	r3, [pc, #168]	; (8008734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800868c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868e:	0a5b      	lsrs	r3, r3, #9
 8008690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008694:	ee07 3a90 	vmov	s15, r3
 8008698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800869c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80086a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086b0:	ee17 2a90 	vmov	r2, s15
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80086b8:	4b1e      	ldr	r3, [pc, #120]	; (8008734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086bc:	0c1b      	lsrs	r3, r3, #16
 80086be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086c2:	ee07 3a90 	vmov	s15, r3
 80086c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80086d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086de:	ee17 2a90 	vmov	r2, s15
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80086e6:	4b13      	ldr	r3, [pc, #76]	; (8008734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ea:	0e1b      	lsrs	r3, r3, #24
 80086ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086f0:	ee07 3a90 	vmov	s15, r3
 80086f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008700:	edd7 6a07 	vldr	s13, [r7, #28]
 8008704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800870c:	ee17 2a90 	vmov	r2, s15
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008714:	e008      	b.n	8008728 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	609a      	str	r2, [r3, #8]
}
 8008728:	bf00      	nop
 800872a:	3724      	adds	r7, #36	; 0x24
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	58024400 	.word	0x58024400
 8008738:	03d09000 	.word	0x03d09000
 800873c:	46000000 	.word	0x46000000
 8008740:	4c742400 	.word	0x4c742400
 8008744:	4a742400 	.word	0x4a742400
 8008748:	4c189680 	.word	0x4c189680

0800874c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800875a:	4b53      	ldr	r3, [pc, #332]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	f003 0303 	and.w	r3, r3, #3
 8008762:	2b03      	cmp	r3, #3
 8008764:	d101      	bne.n	800876a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e099      	b.n	800889e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800876a:	4b4f      	ldr	r3, [pc, #316]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a4e      	ldr	r2, [pc, #312]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 8008770:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008776:	f7fd f8d9 	bl	800592c <HAL_GetTick>
 800877a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800877c:	e008      	b.n	8008790 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800877e:	f7fd f8d5 	bl	800592c <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	2b02      	cmp	r3, #2
 800878a:	d901      	bls.n	8008790 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	e086      	b.n	800889e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008790:	4b45      	ldr	r3, [pc, #276]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1f0      	bne.n	800877e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800879c:	4b42      	ldr	r3, [pc, #264]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 800879e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	031b      	lsls	r3, r3, #12
 80087aa:	493f      	ldr	r1, [pc, #252]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 80087ac:	4313      	orrs	r3, r2
 80087ae:	628b      	str	r3, [r1, #40]	; 0x28
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	3b01      	subs	r3, #1
 80087b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	3b01      	subs	r3, #1
 80087c0:	025b      	lsls	r3, r3, #9
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	431a      	orrs	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	3b01      	subs	r3, #1
 80087cc:	041b      	lsls	r3, r3, #16
 80087ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80087d2:	431a      	orrs	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	3b01      	subs	r3, #1
 80087da:	061b      	lsls	r3, r3, #24
 80087dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80087e0:	4931      	ldr	r1, [pc, #196]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80087e6:	4b30      	ldr	r3, [pc, #192]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 80087e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	492d      	ldr	r1, [pc, #180]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80087f8:	4b2b      	ldr	r3, [pc, #172]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 80087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fc:	f023 0220 	bic.w	r2, r3, #32
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	4928      	ldr	r1, [pc, #160]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 8008806:	4313      	orrs	r3, r2
 8008808:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800880a:	4b27      	ldr	r3, [pc, #156]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 800880c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880e:	4a26      	ldr	r2, [pc, #152]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 8008810:	f023 0310 	bic.w	r3, r3, #16
 8008814:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008816:	4b24      	ldr	r3, [pc, #144]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 8008818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800881a:	4b24      	ldr	r3, [pc, #144]	; (80088ac <RCCEx_PLL2_Config+0x160>)
 800881c:	4013      	ands	r3, r2
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	69d2      	ldr	r2, [r2, #28]
 8008822:	00d2      	lsls	r2, r2, #3
 8008824:	4920      	ldr	r1, [pc, #128]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 8008826:	4313      	orrs	r3, r2
 8008828:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800882a:	4b1f      	ldr	r3, [pc, #124]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 800882c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882e:	4a1e      	ldr	r2, [pc, #120]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 8008830:	f043 0310 	orr.w	r3, r3, #16
 8008834:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d106      	bne.n	800884a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800883c:	4b1a      	ldr	r3, [pc, #104]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 800883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008840:	4a19      	ldr	r2, [pc, #100]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 8008842:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008846:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008848:	e00f      	b.n	800886a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d106      	bne.n	800885e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008850:	4b15      	ldr	r3, [pc, #84]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 8008852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008854:	4a14      	ldr	r2, [pc, #80]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 8008856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800885a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800885c:	e005      	b.n	800886a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800885e:	4b12      	ldr	r3, [pc, #72]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 8008860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008862:	4a11      	ldr	r2, [pc, #68]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 8008864:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008868:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800886a:	4b0f      	ldr	r3, [pc, #60]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a0e      	ldr	r2, [pc, #56]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 8008870:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008874:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008876:	f7fd f859 	bl	800592c <HAL_GetTick>
 800887a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800887c:	e008      	b.n	8008890 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800887e:	f7fd f855 	bl	800592c <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	2b02      	cmp	r3, #2
 800888a:	d901      	bls.n	8008890 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e006      	b.n	800889e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008890:	4b05      	ldr	r3, [pc, #20]	; (80088a8 <RCCEx_PLL2_Config+0x15c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d0f0      	beq.n	800887e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800889c:	7bfb      	ldrb	r3, [r7, #15]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	58024400 	.word	0x58024400
 80088ac:	ffff0007 	.word	0xffff0007

080088b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088be:	4b53      	ldr	r3, [pc, #332]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 80088c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c2:	f003 0303 	and.w	r3, r3, #3
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d101      	bne.n	80088ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e099      	b.n	8008a02 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80088ce:	4b4f      	ldr	r3, [pc, #316]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a4e      	ldr	r2, [pc, #312]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 80088d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088da:	f7fd f827 	bl	800592c <HAL_GetTick>
 80088de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088e0:	e008      	b.n	80088f4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80088e2:	f7fd f823 	bl	800592c <HAL_GetTick>
 80088e6:	4602      	mov	r2, r0
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d901      	bls.n	80088f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e086      	b.n	8008a02 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088f4:	4b45      	ldr	r3, [pc, #276]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1f0      	bne.n	80088e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008900:	4b42      	ldr	r3, [pc, #264]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 8008902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008904:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	051b      	lsls	r3, r3, #20
 800890e:	493f      	ldr	r1, [pc, #252]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 8008910:	4313      	orrs	r3, r2
 8008912:	628b      	str	r3, [r1, #40]	; 0x28
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	3b01      	subs	r3, #1
 800891a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	3b01      	subs	r3, #1
 8008924:	025b      	lsls	r3, r3, #9
 8008926:	b29b      	uxth	r3, r3
 8008928:	431a      	orrs	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	3b01      	subs	r3, #1
 8008930:	041b      	lsls	r3, r3, #16
 8008932:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008936:	431a      	orrs	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	3b01      	subs	r3, #1
 800893e:	061b      	lsls	r3, r3, #24
 8008940:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008944:	4931      	ldr	r1, [pc, #196]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 8008946:	4313      	orrs	r3, r2
 8008948:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800894a:	4b30      	ldr	r3, [pc, #192]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 800894c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	695b      	ldr	r3, [r3, #20]
 8008956:	492d      	ldr	r1, [pc, #180]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 8008958:	4313      	orrs	r3, r2
 800895a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800895c:	4b2b      	ldr	r3, [pc, #172]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 800895e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008960:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	4928      	ldr	r1, [pc, #160]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 800896a:	4313      	orrs	r3, r2
 800896c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800896e:	4b27      	ldr	r3, [pc, #156]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 8008970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008972:	4a26      	ldr	r2, [pc, #152]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 8008974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008978:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800897a:	4b24      	ldr	r3, [pc, #144]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 800897c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800897e:	4b24      	ldr	r3, [pc, #144]	; (8008a10 <RCCEx_PLL3_Config+0x160>)
 8008980:	4013      	ands	r3, r2
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	69d2      	ldr	r2, [r2, #28]
 8008986:	00d2      	lsls	r2, r2, #3
 8008988:	4920      	ldr	r1, [pc, #128]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 800898a:	4313      	orrs	r3, r2
 800898c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800898e:	4b1f      	ldr	r3, [pc, #124]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 8008990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008992:	4a1e      	ldr	r2, [pc, #120]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 8008994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008998:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d106      	bne.n	80089ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80089a0:	4b1a      	ldr	r3, [pc, #104]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 80089a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a4:	4a19      	ldr	r2, [pc, #100]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 80089a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80089aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089ac:	e00f      	b.n	80089ce <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d106      	bne.n	80089c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80089b4:	4b15      	ldr	r3, [pc, #84]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 80089b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b8:	4a14      	ldr	r2, [pc, #80]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 80089ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80089be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089c0:	e005      	b.n	80089ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80089c2:	4b12      	ldr	r3, [pc, #72]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 80089c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c6:	4a11      	ldr	r2, [pc, #68]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 80089c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80089ce:	4b0f      	ldr	r3, [pc, #60]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a0e      	ldr	r2, [pc, #56]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 80089d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089da:	f7fc ffa7 	bl	800592c <HAL_GetTick>
 80089de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089e0:	e008      	b.n	80089f4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80089e2:	f7fc ffa3 	bl	800592c <HAL_GetTick>
 80089e6:	4602      	mov	r2, r0
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	1ad3      	subs	r3, r2, r3
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d901      	bls.n	80089f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089f0:	2303      	movs	r3, #3
 80089f2:	e006      	b.n	8008a02 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089f4:	4b05      	ldr	r3, [pc, #20]	; (8008a0c <RCCEx_PLL3_Config+0x15c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d0f0      	beq.n	80089e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	58024400 	.word	0x58024400
 8008a10:	ffff0007 	.word	0xffff0007

08008a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d101      	bne.n	8008a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e049      	b.n	8008aba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d106      	bne.n	8008a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f7fc fe08 	bl	8005650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2202      	movs	r2, #2
 8008a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3304      	adds	r3, #4
 8008a50:	4619      	mov	r1, r3
 8008a52:	4610      	mov	r0, r2
 8008a54:	f000 f934 	bl	8008cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
	...

08008ac4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d001      	beq.n	8008adc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e019      	b.n	8008b10 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689a      	ldr	r2, [r3, #8]
 8008aea:	4b0c      	ldr	r3, [pc, #48]	; (8008b1c <HAL_TIM_Base_Start+0x58>)
 8008aec:	4013      	ands	r3, r2
 8008aee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2b06      	cmp	r3, #6
 8008af4:	d00b      	beq.n	8008b0e <HAL_TIM_Base_Start+0x4a>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008afc:	d007      	beq.n	8008b0e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f042 0201 	orr.w	r2, r2, #1
 8008b0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	00010007 	.word	0x00010007

08008b20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d101      	bne.n	8008b38 <HAL_TIM_ConfigClockSource+0x18>
 8008b34:	2302      	movs	r3, #2
 8008b36:	e0b7      	b.n	8008ca8 <HAL_TIM_ConfigClockSource+0x188>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2202      	movs	r2, #2
 8008b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	4b57      	ldr	r3, [pc, #348]	; (8008cb0 <HAL_TIM_ConfigClockSource+0x190>)
 8008b54:	4013      	ands	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2b70      	cmp	r3, #112	; 0x70
 8008b6e:	d02e      	beq.n	8008bce <HAL_TIM_ConfigClockSource+0xae>
 8008b70:	2b70      	cmp	r3, #112	; 0x70
 8008b72:	d812      	bhi.n	8008b9a <HAL_TIM_ConfigClockSource+0x7a>
 8008b74:	2b30      	cmp	r3, #48	; 0x30
 8008b76:	f000 8084 	beq.w	8008c82 <HAL_TIM_ConfigClockSource+0x162>
 8008b7a:	2b30      	cmp	r3, #48	; 0x30
 8008b7c:	d806      	bhi.n	8008b8c <HAL_TIM_ConfigClockSource+0x6c>
 8008b7e:	2b10      	cmp	r3, #16
 8008b80:	d07f      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0x162>
 8008b82:	2b20      	cmp	r3, #32
 8008b84:	d07d      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0x162>
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d07b      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008b8a:	e084      	b.n	8008c96 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008b8c:	2b50      	cmp	r3, #80	; 0x50
 8008b8e:	d048      	beq.n	8008c22 <HAL_TIM_ConfigClockSource+0x102>
 8008b90:	2b60      	cmp	r3, #96	; 0x60
 8008b92:	d056      	beq.n	8008c42 <HAL_TIM_ConfigClockSource+0x122>
 8008b94:	2b40      	cmp	r3, #64	; 0x40
 8008b96:	d064      	beq.n	8008c62 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8008b98:	e07d      	b.n	8008c96 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008b9a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b9e:	d070      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0x162>
 8008ba0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008ba4:	d809      	bhi.n	8008bba <HAL_TIM_ConfigClockSource+0x9a>
 8008ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008baa:	d027      	beq.n	8008bfc <HAL_TIM_ConfigClockSource+0xdc>
 8008bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bb0:	d067      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0x162>
 8008bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bb6:	d06d      	beq.n	8008c94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008bb8:	e06d      	b.n	8008c96 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008bba:	4a3e      	ldr	r2, [pc, #248]	; (8008cb4 <HAL_TIM_ConfigClockSource+0x194>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d060      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0x162>
 8008bc0:	4a3d      	ldr	r2, [pc, #244]	; (8008cb8 <HAL_TIM_ConfigClockSource+0x198>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d05d      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0x162>
 8008bc6:	4a3d      	ldr	r2, [pc, #244]	; (8008cbc <HAL_TIM_ConfigClockSource+0x19c>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d05a      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8008bcc:	e063      	b.n	8008c96 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6818      	ldr	r0, [r3, #0]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	6899      	ldr	r1, [r3, #8]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	f000 f987 	bl	8008ef0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008bf0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	609a      	str	r2, [r3, #8]
      break;
 8008bfa:	e04c      	b.n	8008c96 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6818      	ldr	r0, [r3, #0]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	6899      	ldr	r1, [r3, #8]
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	685a      	ldr	r2, [r3, #4]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	f000 f970 	bl	8008ef0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689a      	ldr	r2, [r3, #8]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c1e:	609a      	str	r2, [r3, #8]
      break;
 8008c20:	e039      	b.n	8008c96 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6818      	ldr	r0, [r3, #0]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	6859      	ldr	r1, [r3, #4]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	f000 f8e0 	bl	8008df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2150      	movs	r1, #80	; 0x50
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 f93a 	bl	8008eb4 <TIM_ITRx_SetConfig>
      break;
 8008c40:	e029      	b.n	8008c96 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6818      	ldr	r0, [r3, #0]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	6859      	ldr	r1, [r3, #4]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f000 f8ff 	bl	8008e52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2160      	movs	r1, #96	; 0x60
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 f92a 	bl	8008eb4 <TIM_ITRx_SetConfig>
      break;
 8008c60:	e019      	b.n	8008c96 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6818      	ldr	r0, [r3, #0]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	6859      	ldr	r1, [r3, #4]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	f000 f8c0 	bl	8008df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2140      	movs	r1, #64	; 0x40
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 f91a 	bl	8008eb4 <TIM_ITRx_SetConfig>
      break;
 8008c80:	e009      	b.n	8008c96 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	f000 f911 	bl	8008eb4 <TIM_ITRx_SetConfig>
      break;
 8008c92:	e000      	b.n	8008c96 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008c94:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	ffceff88 	.word	0xffceff88
 8008cb4:	00100030 	.word	0x00100030
 8008cb8:	00100040 	.word	0x00100040
 8008cbc:	00100020 	.word	0x00100020

08008cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a40      	ldr	r2, [pc, #256]	; (8008dd4 <TIM_Base_SetConfig+0x114>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d013      	beq.n	8008d00 <TIM_Base_SetConfig+0x40>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cde:	d00f      	beq.n	8008d00 <TIM_Base_SetConfig+0x40>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a3d      	ldr	r2, [pc, #244]	; (8008dd8 <TIM_Base_SetConfig+0x118>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d00b      	beq.n	8008d00 <TIM_Base_SetConfig+0x40>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a3c      	ldr	r2, [pc, #240]	; (8008ddc <TIM_Base_SetConfig+0x11c>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d007      	beq.n	8008d00 <TIM_Base_SetConfig+0x40>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a3b      	ldr	r2, [pc, #236]	; (8008de0 <TIM_Base_SetConfig+0x120>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d003      	beq.n	8008d00 <TIM_Base_SetConfig+0x40>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a3a      	ldr	r2, [pc, #232]	; (8008de4 <TIM_Base_SetConfig+0x124>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d108      	bne.n	8008d12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a2f      	ldr	r2, [pc, #188]	; (8008dd4 <TIM_Base_SetConfig+0x114>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d01f      	beq.n	8008d5a <TIM_Base_SetConfig+0x9a>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d20:	d01b      	beq.n	8008d5a <TIM_Base_SetConfig+0x9a>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a2c      	ldr	r2, [pc, #176]	; (8008dd8 <TIM_Base_SetConfig+0x118>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d017      	beq.n	8008d5a <TIM_Base_SetConfig+0x9a>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a2b      	ldr	r2, [pc, #172]	; (8008ddc <TIM_Base_SetConfig+0x11c>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d013      	beq.n	8008d5a <TIM_Base_SetConfig+0x9a>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a2a      	ldr	r2, [pc, #168]	; (8008de0 <TIM_Base_SetConfig+0x120>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d00f      	beq.n	8008d5a <TIM_Base_SetConfig+0x9a>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a29      	ldr	r2, [pc, #164]	; (8008de4 <TIM_Base_SetConfig+0x124>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d00b      	beq.n	8008d5a <TIM_Base_SetConfig+0x9a>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a28      	ldr	r2, [pc, #160]	; (8008de8 <TIM_Base_SetConfig+0x128>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d007      	beq.n	8008d5a <TIM_Base_SetConfig+0x9a>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a27      	ldr	r2, [pc, #156]	; (8008dec <TIM_Base_SetConfig+0x12c>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d003      	beq.n	8008d5a <TIM_Base_SetConfig+0x9a>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a26      	ldr	r2, [pc, #152]	; (8008df0 <TIM_Base_SetConfig+0x130>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d108      	bne.n	8008d6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	689a      	ldr	r2, [r3, #8]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a10      	ldr	r2, [pc, #64]	; (8008dd4 <TIM_Base_SetConfig+0x114>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d00f      	beq.n	8008db8 <TIM_Base_SetConfig+0xf8>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a12      	ldr	r2, [pc, #72]	; (8008de4 <TIM_Base_SetConfig+0x124>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00b      	beq.n	8008db8 <TIM_Base_SetConfig+0xf8>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a11      	ldr	r2, [pc, #68]	; (8008de8 <TIM_Base_SetConfig+0x128>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d007      	beq.n	8008db8 <TIM_Base_SetConfig+0xf8>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a10      	ldr	r2, [pc, #64]	; (8008dec <TIM_Base_SetConfig+0x12c>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d003      	beq.n	8008db8 <TIM_Base_SetConfig+0xf8>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a0f      	ldr	r2, [pc, #60]	; (8008df0 <TIM_Base_SetConfig+0x130>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d103      	bne.n	8008dc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	691a      	ldr	r2, [r3, #16]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	615a      	str	r2, [r3, #20]
}
 8008dc6:	bf00      	nop
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	40010000 	.word	0x40010000
 8008dd8:	40000400 	.word	0x40000400
 8008ddc:	40000800 	.word	0x40000800
 8008de0:	40000c00 	.word	0x40000c00
 8008de4:	40010400 	.word	0x40010400
 8008de8:	40014000 	.word	0x40014000
 8008dec:	40014400 	.word	0x40014400
 8008df0:	40014800 	.word	0x40014800

08008df4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b087      	sub	sp, #28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	f023 0201 	bic.w	r2, r3, #1
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	011b      	lsls	r3, r3, #4
 8008e24:	693a      	ldr	r2, [r7, #16]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f023 030a 	bic.w	r3, r3, #10
 8008e30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	621a      	str	r2, [r3, #32]
}
 8008e46:	bf00      	nop
 8008e48:	371c      	adds	r7, #28
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e52:	b480      	push	{r7}
 8008e54:	b087      	sub	sp, #28
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	60f8      	str	r0, [r7, #12]
 8008e5a:	60b9      	str	r1, [r7, #8]
 8008e5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	f023 0210 	bic.w	r2, r3, #16
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6a1b      	ldr	r3, [r3, #32]
 8008e74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	031b      	lsls	r3, r3, #12
 8008e82:	697a      	ldr	r2, [r7, #20]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	011b      	lsls	r3, r3, #4
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	697a      	ldr	r2, [r7, #20]
 8008e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	621a      	str	r2, [r3, #32]
}
 8008ea6:	bf00      	nop
 8008ea8:	371c      	adds	r7, #28
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
	...

08008eb4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	4b09      	ldr	r3, [pc, #36]	; (8008eec <TIM_ITRx_SetConfig+0x38>)
 8008ec8:	4013      	ands	r3, r2
 8008eca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	f043 0307 	orr.w	r3, r3, #7
 8008ed6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	609a      	str	r2, [r3, #8]
}
 8008ede:	bf00      	nop
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	ffcfff8f 	.word	0xffcfff8f

08008ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b087      	sub	sp, #28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
 8008efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	021a      	lsls	r2, r3, #8
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	431a      	orrs	r2, r3
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	697a      	ldr	r2, [r7, #20]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	697a      	ldr	r2, [r7, #20]
 8008f22:	609a      	str	r2, [r3, #8]
}
 8008f24:	bf00      	nop
 8008f26:	371c      	adds	r7, #28
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d101      	bne.n	8008f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f44:	2302      	movs	r3, #2
 8008f46:	e068      	b.n	800901a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2202      	movs	r2, #2
 8008f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a2e      	ldr	r2, [pc, #184]	; (8009028 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d004      	beq.n	8008f7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a2d      	ldr	r2, [pc, #180]	; (800902c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d108      	bne.n	8008f8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a1e      	ldr	r2, [pc, #120]	; (8009028 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d01d      	beq.n	8008fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fba:	d018      	beq.n	8008fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a1b      	ldr	r2, [pc, #108]	; (8009030 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d013      	beq.n	8008fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a1a      	ldr	r2, [pc, #104]	; (8009034 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d00e      	beq.n	8008fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a18      	ldr	r2, [pc, #96]	; (8009038 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d009      	beq.n	8008fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a13      	ldr	r2, [pc, #76]	; (800902c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d004      	beq.n	8008fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a14      	ldr	r2, [pc, #80]	; (800903c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d10c      	bne.n	8009008 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	40010000 	.word	0x40010000
 800902c:	40010400 	.word	0x40010400
 8009030:	40000400 	.word	0x40000400
 8009034:	40000800 	.word	0x40000800
 8009038:	40000c00 	.word	0x40000c00
 800903c:	40001800 	.word	0x40001800

08009040 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e042      	b.n	80090d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009058:	2b00      	cmp	r3, #0
 800905a:	d106      	bne.n	800906a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7fc fb5f 	bl	8005728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2224      	movs	r2, #36	; 0x24
 800906e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f022 0201 	bic.w	r2, r2, #1
 8009080:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fb12 	bl	80096ac <UART_SetConfig>
 8009088:	4603      	mov	r3, r0
 800908a:	2b01      	cmp	r3, #1
 800908c:	d101      	bne.n	8009092 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e022      	b.n	80090d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009096:	2b00      	cmp	r3, #0
 8009098:	d002      	beq.n	80090a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f001 f8b6 	bl	800a20c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	685a      	ldr	r2, [r3, #4]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	689a      	ldr	r2, [r3, #8]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f042 0201 	orr.w	r2, r2, #1
 80090ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f001 f93d 	bl	800a350 <UART_CheckIdleState>
 80090d6:	4603      	mov	r3, r0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b085      	sub	sp, #20
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	4613      	mov	r3, r2
 80090ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090f4:	2b20      	cmp	r3, #32
 80090f6:	d168      	bne.n	80091ca <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d002      	beq.n	8009104 <HAL_UART_Transmit_IT+0x24>
 80090fe:	88fb      	ldrh	r3, [r7, #6]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d101      	bne.n	8009108 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e061      	b.n	80091cc <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800910e:	2b01      	cmp	r3, #1
 8009110:	d101      	bne.n	8009116 <HAL_UART_Transmit_IT+0x36>
 8009112:	2302      	movs	r3, #2
 8009114:	e05a      	b.n	80091cc <HAL_UART_Transmit_IT+0xec>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2201      	movs	r2, #1
 800911a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	88fa      	ldrh	r2, [r7, #6]
 8009128:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	88fa      	ldrh	r2, [r7, #6]
 8009130:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2221      	movs	r2, #33	; 0x21
 8009146:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800914e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009152:	d11c      	bne.n	800918e <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800915c:	d107      	bne.n	800916e <HAL_UART_Transmit_IT+0x8e>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d103      	bne.n	800916e <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	4a1b      	ldr	r2, [pc, #108]	; (80091d8 <HAL_UART_Transmit_IT+0xf8>)
 800916a:	671a      	str	r2, [r3, #112]	; 0x70
 800916c:	e002      	b.n	8009174 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	4a1a      	ldr	r2, [pc, #104]	; (80091dc <HAL_UART_Transmit_IT+0xfc>)
 8009172:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	689a      	ldr	r2, [r3, #8]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800918a:	609a      	str	r2, [r3, #8]
 800918c:	e01b      	b.n	80091c6 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009196:	d107      	bne.n	80091a8 <HAL_UART_Transmit_IT+0xc8>
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d103      	bne.n	80091a8 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4a0f      	ldr	r2, [pc, #60]	; (80091e0 <HAL_UART_Transmit_IT+0x100>)
 80091a4:	671a      	str	r2, [r3, #112]	; 0x70
 80091a6:	e002      	b.n	80091ae <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	4a0e      	ldr	r2, [pc, #56]	; (80091e4 <HAL_UART_Transmit_IT+0x104>)
 80091ac:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80091c4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	e000      	b.n	80091cc <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 80091ca:	2302      	movs	r3, #2
  }
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr
 80091d8:	0800a6e1 	.word	0x0800a6e1
 80091dc:	0800a647 	.word	0x0800a647
 80091e0:	0800a5c9 	.word	0x0800a5c9
 80091e4:	0800a555 	.word	0x0800a555

080091e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	4613      	mov	r3, r2
 80091f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091fc:	2b20      	cmp	r3, #32
 80091fe:	f040 80bc 	bne.w	800937a <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <HAL_UART_Receive_IT+0x26>
 8009208:	88fb      	ldrh	r3, [r7, #6]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d101      	bne.n	8009212 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e0b4      	b.n	800937c <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009218:	2b01      	cmp	r3, #1
 800921a:	d101      	bne.n	8009220 <HAL_UART_Receive_IT+0x38>
 800921c:	2302      	movs	r3, #2
 800921e:	e0ad      	b.n	800937c <HAL_UART_Receive_IT+0x194>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	88fa      	ldrh	r2, [r7, #6]
 8009232:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	88fa      	ldrh	r2, [r7, #6]
 800923a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800924c:	d10e      	bne.n	800926c <HAL_UART_Receive_IT+0x84>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d105      	bne.n	8009262 <HAL_UART_Receive_IT+0x7a>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f240 12ff 	movw	r2, #511	; 0x1ff
 800925c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009260:	e02d      	b.n	80092be <HAL_UART_Receive_IT+0xd6>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	22ff      	movs	r2, #255	; 0xff
 8009266:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800926a:	e028      	b.n	80092be <HAL_UART_Receive_IT+0xd6>
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10d      	bne.n	8009290 <HAL_UART_Receive_IT+0xa8>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d104      	bne.n	8009286 <HAL_UART_Receive_IT+0x9e>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	22ff      	movs	r2, #255	; 0xff
 8009280:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009284:	e01b      	b.n	80092be <HAL_UART_Receive_IT+0xd6>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	227f      	movs	r2, #127	; 0x7f
 800928a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800928e:	e016      	b.n	80092be <HAL_UART_Receive_IT+0xd6>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009298:	d10d      	bne.n	80092b6 <HAL_UART_Receive_IT+0xce>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d104      	bne.n	80092ac <HAL_UART_Receive_IT+0xc4>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	227f      	movs	r2, #127	; 0x7f
 80092a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092aa:	e008      	b.n	80092be <HAL_UART_Receive_IT+0xd6>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	223f      	movs	r2, #63	; 0x3f
 80092b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092b4:	e003      	b.n	80092be <HAL_UART_Receive_IT+0xd6>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2222      	movs	r2, #34	; 0x22
 80092ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	689a      	ldr	r2, [r3, #8]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f042 0201 	orr.w	r2, r2, #1
 80092dc:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092e6:	d12a      	bne.n	800933e <HAL_UART_Receive_IT+0x156>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80092ee:	88fa      	ldrh	r2, [r7, #6]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d324      	bcc.n	800933e <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092fc:	d107      	bne.n	800930e <HAL_UART_Receive_IT+0x126>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d103      	bne.n	800930e <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	4a1f      	ldr	r2, [pc, #124]	; (8009388 <HAL_UART_Receive_IT+0x1a0>)
 800930a:	66da      	str	r2, [r3, #108]	; 0x6c
 800930c:	e002      	b.n	8009314 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	4a1e      	ldr	r2, [pc, #120]	; (800938c <HAL_UART_Receive_IT+0x1a4>)
 8009312:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800932a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689a      	ldr	r2, [r3, #8]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800933a:	609a      	str	r2, [r3, #8]
 800933c:	e01b      	b.n	8009376 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009346:	d107      	bne.n	8009358 <HAL_UART_Receive_IT+0x170>
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d103      	bne.n	8009358 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	4a0f      	ldr	r2, [pc, #60]	; (8009390 <HAL_UART_Receive_IT+0x1a8>)
 8009354:	66da      	str	r2, [r3, #108]	; 0x6c
 8009356:	e002      	b.n	800935e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4a0e      	ldr	r2, [pc, #56]	; (8009394 <HAL_UART_Receive_IT+0x1ac>)
 800935c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009374:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	e000      	b.n	800937c <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800937a:	2302      	movs	r3, #2
  }
}
 800937c:	4618      	mov	r0, r3
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr
 8009388:	0800aa15 	.word	0x0800aa15
 800938c:	0800a90d 	.word	0x0800a90d
 8009390:	0800a863 	.word	0x0800a863
 8009394:	0800a7b9 	.word	0x0800a7b9

08009398 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b088      	sub	sp, #32
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	69db      	ldr	r3, [r3, #28]
 80093a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80093b8:	69fa      	ldr	r2, [r7, #28]
 80093ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80093be:	4013      	ands	r3, r2
 80093c0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d118      	bne.n	80093fa <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	f003 0320 	and.w	r3, r3, #32
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d013      	beq.n	80093fa <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	f003 0320 	and.w	r3, r3, #32
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d104      	bne.n	80093e6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d009      	beq.n	80093fa <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f000 8145 	beq.w	800967a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	4798      	blx	r3
      }
      return;
 80093f8:	e13f      	b.n	800967a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f000 80e8 	beq.w	80095d2 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	4ba1      	ldr	r3, [pc, #644]	; (800968c <HAL_UART_IRQHandler+0x2f4>)
 8009406:	4013      	ands	r3, r2
 8009408:	2b00      	cmp	r3, #0
 800940a:	d105      	bne.n	8009418 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800940c:	69ba      	ldr	r2, [r7, #24]
 800940e:	4ba0      	ldr	r3, [pc, #640]	; (8009690 <HAL_UART_IRQHandler+0x2f8>)
 8009410:	4013      	ands	r3, r2
 8009412:	2b00      	cmp	r3, #0
 8009414:	f000 80dd 	beq.w	80095d2 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	2b00      	cmp	r3, #0
 8009420:	d010      	beq.n	8009444 <HAL_UART_IRQHandler+0xac>
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00b      	beq.n	8009444 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2201      	movs	r2, #1
 8009432:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800943a:	f043 0201 	orr.w	r2, r3, #1
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	f003 0302 	and.w	r3, r3, #2
 800944a:	2b00      	cmp	r3, #0
 800944c:	d010      	beq.n	8009470 <HAL_UART_IRQHandler+0xd8>
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f003 0301 	and.w	r3, r3, #1
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00b      	beq.n	8009470 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2202      	movs	r2, #2
 800945e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009466:	f043 0204 	orr.w	r2, r3, #4
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	f003 0304 	and.w	r3, r3, #4
 8009476:	2b00      	cmp	r3, #0
 8009478:	d010      	beq.n	800949c <HAL_UART_IRQHandler+0x104>
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	f003 0301 	and.w	r3, r3, #1
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00b      	beq.n	800949c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2204      	movs	r2, #4
 800948a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009492:	f043 0202 	orr.w	r2, r3, #2
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	f003 0308 	and.w	r3, r3, #8
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d015      	beq.n	80094d2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	f003 0320 	and.w	r3, r3, #32
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d104      	bne.n	80094ba <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	4b76      	ldr	r3, [pc, #472]	; (800968c <HAL_UART_IRQHandler+0x2f4>)
 80094b4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00b      	beq.n	80094d2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2208      	movs	r2, #8
 80094c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094c8:	f043 0208 	orr.w	r2, r3, #8
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d011      	beq.n	8009500 <HAL_UART_IRQHandler+0x168>
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00c      	beq.n	8009500 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094f6:	f043 0220 	orr.w	r2, r3, #32
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009506:	2b00      	cmp	r3, #0
 8009508:	f000 80b9 	beq.w	800967e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	f003 0320 	and.w	r3, r3, #32
 8009512:	2b00      	cmp	r3, #0
 8009514:	d011      	beq.n	800953a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	f003 0320 	and.w	r3, r3, #32
 800951c:	2b00      	cmp	r3, #0
 800951e:	d104      	bne.n	800952a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009526:	2b00      	cmp	r3, #0
 8009528:	d007      	beq.n	800953a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800952e:	2b00      	cmp	r3, #0
 8009530:	d003      	beq.n	800953a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009540:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800954c:	2b40      	cmp	r3, #64	; 0x40
 800954e:	d004      	beq.n	800955a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009556:	2b00      	cmp	r3, #0
 8009558:	d031      	beq.n	80095be <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 ffc0 	bl	800a4e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800956a:	2b40      	cmp	r3, #64	; 0x40
 800956c:	d123      	bne.n	80095b6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800957c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009582:	2b00      	cmp	r3, #0
 8009584:	d013      	beq.n	80095ae <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800958a:	4a42      	ldr	r2, [pc, #264]	; (8009694 <HAL_UART_IRQHandler+0x2fc>)
 800958c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009592:	4618      	mov	r0, r3
 8009594:	f7fc fb14 	bl	8005bc0 <HAL_DMA_Abort_IT>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d017      	beq.n	80095ce <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80095a8:	4610      	mov	r0, r2
 80095aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ac:	e00f      	b.n	80095ce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f872 	bl	8009698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095b4:	e00b      	b.n	80095ce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f86e 	bl	8009698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095bc:	e007      	b.n	80095ce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f86a 	bl	8009698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80095cc:	e057      	b.n	800967e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ce:	bf00      	nop
    return;
 80095d0:	e055      	b.n	800967e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00d      	beq.n	80095f8 <HAL_UART_IRQHandler+0x260>
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d008      	beq.n	80095f8 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80095ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f001 fa93 	bl	800ab1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095f6:	e045      	b.n	8009684 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d012      	beq.n	8009628 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009608:	2b00      	cmp	r3, #0
 800960a:	d104      	bne.n	8009616 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009612:	2b00      	cmp	r3, #0
 8009614:	d008      	beq.n	8009628 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800961a:	2b00      	cmp	r3, #0
 800961c:	d031      	beq.n	8009682 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	4798      	blx	r3
    }
    return;
 8009626:	e02c      	b.n	8009682 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800962e:	2b00      	cmp	r3, #0
 8009630:	d008      	beq.n	8009644 <HAL_UART_IRQHandler+0x2ac>
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009638:	2b00      	cmp	r3, #0
 800963a:	d003      	beq.n	8009644 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f001 f8a1 	bl	800a784 <UART_EndTransmit_IT>
    return;
 8009642:	e01f      	b.n	8009684 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800964a:	2b00      	cmp	r3, #0
 800964c:	d008      	beq.n	8009660 <HAL_UART_IRQHandler+0x2c8>
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009654:	2b00      	cmp	r3, #0
 8009656:	d003      	beq.n	8009660 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f001 fa73 	bl	800ab44 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800965e:	e011      	b.n	8009684 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00c      	beq.n	8009684 <HAL_UART_IRQHandler+0x2ec>
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	2b00      	cmp	r3, #0
 800966e:	da09      	bge.n	8009684 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f001 fa5d 	bl	800ab30 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009676:	bf00      	nop
 8009678:	e004      	b.n	8009684 <HAL_UART_IRQHandler+0x2ec>
      return;
 800967a:	bf00      	nop
 800967c:	e002      	b.n	8009684 <HAL_UART_IRQHandler+0x2ec>
    return;
 800967e:	bf00      	nop
 8009680:	e000      	b.n	8009684 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009682:	bf00      	nop
  }
}
 8009684:	3720      	adds	r7, #32
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	10000001 	.word	0x10000001
 8009690:	04000120 	.word	0x04000120
 8009694:	0800a529 	.word	0x0800a529

08009698 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80096a0:	bf00      	nop
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096ac:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80096b0:	b08e      	sub	sp, #56	; 0x38
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096b6:	2300      	movs	r3, #0
 80096b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	689a      	ldr	r2, [r3, #8]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	431a      	orrs	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	695b      	ldr	r3, [r3, #20]
 80096ca:	431a      	orrs	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	69db      	ldr	r3, [r3, #28]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096da:	4313      	orrs	r3, r2
 80096dc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	4bc1      	ldr	r3, [pc, #772]	; (80099ec <UART_SetConfig+0x340>)
 80096e6:	4013      	ands	r3, r2
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	6812      	ldr	r2, [r2, #0]
 80096ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80096ee:	430b      	orrs	r3, r1
 80096f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	68da      	ldr	r2, [r3, #12]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	430a      	orrs	r2, r1
 8009706:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4ab7      	ldr	r2, [pc, #732]	; (80099f0 <UART_SetConfig+0x344>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d004      	beq.n	8009722 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6a1b      	ldr	r3, [r3, #32]
 800971c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800971e:	4313      	orrs	r3, r2
 8009720:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	689a      	ldr	r2, [r3, #8]
 8009728:	4bb2      	ldr	r3, [pc, #712]	; (80099f4 <UART_SetConfig+0x348>)
 800972a:	4013      	ands	r3, r2
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	6812      	ldr	r2, [r2, #0]
 8009730:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009732:	430b      	orrs	r3, r1
 8009734:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973c:	f023 010f 	bic.w	r1, r3, #15
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	430a      	orrs	r2, r1
 800974a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4aa9      	ldr	r2, [pc, #676]	; (80099f8 <UART_SetConfig+0x34c>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d177      	bne.n	8009846 <UART_SetConfig+0x19a>
 8009756:	4ba9      	ldr	r3, [pc, #676]	; (80099fc <UART_SetConfig+0x350>)
 8009758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800975a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800975e:	2b28      	cmp	r3, #40	; 0x28
 8009760:	d86c      	bhi.n	800983c <UART_SetConfig+0x190>
 8009762:	a201      	add	r2, pc, #4	; (adr r2, 8009768 <UART_SetConfig+0xbc>)
 8009764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009768:	0800980d 	.word	0x0800980d
 800976c:	0800983d 	.word	0x0800983d
 8009770:	0800983d 	.word	0x0800983d
 8009774:	0800983d 	.word	0x0800983d
 8009778:	0800983d 	.word	0x0800983d
 800977c:	0800983d 	.word	0x0800983d
 8009780:	0800983d 	.word	0x0800983d
 8009784:	0800983d 	.word	0x0800983d
 8009788:	08009815 	.word	0x08009815
 800978c:	0800983d 	.word	0x0800983d
 8009790:	0800983d 	.word	0x0800983d
 8009794:	0800983d 	.word	0x0800983d
 8009798:	0800983d 	.word	0x0800983d
 800979c:	0800983d 	.word	0x0800983d
 80097a0:	0800983d 	.word	0x0800983d
 80097a4:	0800983d 	.word	0x0800983d
 80097a8:	0800981d 	.word	0x0800981d
 80097ac:	0800983d 	.word	0x0800983d
 80097b0:	0800983d 	.word	0x0800983d
 80097b4:	0800983d 	.word	0x0800983d
 80097b8:	0800983d 	.word	0x0800983d
 80097bc:	0800983d 	.word	0x0800983d
 80097c0:	0800983d 	.word	0x0800983d
 80097c4:	0800983d 	.word	0x0800983d
 80097c8:	08009825 	.word	0x08009825
 80097cc:	0800983d 	.word	0x0800983d
 80097d0:	0800983d 	.word	0x0800983d
 80097d4:	0800983d 	.word	0x0800983d
 80097d8:	0800983d 	.word	0x0800983d
 80097dc:	0800983d 	.word	0x0800983d
 80097e0:	0800983d 	.word	0x0800983d
 80097e4:	0800983d 	.word	0x0800983d
 80097e8:	0800982d 	.word	0x0800982d
 80097ec:	0800983d 	.word	0x0800983d
 80097f0:	0800983d 	.word	0x0800983d
 80097f4:	0800983d 	.word	0x0800983d
 80097f8:	0800983d 	.word	0x0800983d
 80097fc:	0800983d 	.word	0x0800983d
 8009800:	0800983d 	.word	0x0800983d
 8009804:	0800983d 	.word	0x0800983d
 8009808:	08009835 	.word	0x08009835
 800980c:	2301      	movs	r3, #1
 800980e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009812:	e233      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009814:	2304      	movs	r3, #4
 8009816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800981a:	e22f      	b.n	8009c7c <UART_SetConfig+0x5d0>
 800981c:	2308      	movs	r3, #8
 800981e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009822:	e22b      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009824:	2310      	movs	r3, #16
 8009826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800982a:	e227      	b.n	8009c7c <UART_SetConfig+0x5d0>
 800982c:	2320      	movs	r3, #32
 800982e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009832:	e223      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009834:	2340      	movs	r3, #64	; 0x40
 8009836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800983a:	e21f      	b.n	8009c7c <UART_SetConfig+0x5d0>
 800983c:	2380      	movs	r3, #128	; 0x80
 800983e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009842:	bf00      	nop
 8009844:	e21a      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a6d      	ldr	r2, [pc, #436]	; (8009a00 <UART_SetConfig+0x354>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d132      	bne.n	80098b6 <UART_SetConfig+0x20a>
 8009850:	4b6a      	ldr	r3, [pc, #424]	; (80099fc <UART_SetConfig+0x350>)
 8009852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009854:	f003 0307 	and.w	r3, r3, #7
 8009858:	2b05      	cmp	r3, #5
 800985a:	d827      	bhi.n	80098ac <UART_SetConfig+0x200>
 800985c:	a201      	add	r2, pc, #4	; (adr r2, 8009864 <UART_SetConfig+0x1b8>)
 800985e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009862:	bf00      	nop
 8009864:	0800987d 	.word	0x0800987d
 8009868:	08009885 	.word	0x08009885
 800986c:	0800988d 	.word	0x0800988d
 8009870:	08009895 	.word	0x08009895
 8009874:	0800989d 	.word	0x0800989d
 8009878:	080098a5 	.word	0x080098a5
 800987c:	2300      	movs	r3, #0
 800987e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009882:	e1fb      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009884:	2304      	movs	r3, #4
 8009886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800988a:	e1f7      	b.n	8009c7c <UART_SetConfig+0x5d0>
 800988c:	2308      	movs	r3, #8
 800988e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009892:	e1f3      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009894:	2310      	movs	r3, #16
 8009896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800989a:	e1ef      	b.n	8009c7c <UART_SetConfig+0x5d0>
 800989c:	2320      	movs	r3, #32
 800989e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098a2:	e1eb      	b.n	8009c7c <UART_SetConfig+0x5d0>
 80098a4:	2340      	movs	r3, #64	; 0x40
 80098a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098aa:	e1e7      	b.n	8009c7c <UART_SetConfig+0x5d0>
 80098ac:	2380      	movs	r3, #128	; 0x80
 80098ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098b2:	bf00      	nop
 80098b4:	e1e2      	b.n	8009c7c <UART_SetConfig+0x5d0>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a52      	ldr	r2, [pc, #328]	; (8009a04 <UART_SetConfig+0x358>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d132      	bne.n	8009926 <UART_SetConfig+0x27a>
 80098c0:	4b4e      	ldr	r3, [pc, #312]	; (80099fc <UART_SetConfig+0x350>)
 80098c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098c4:	f003 0307 	and.w	r3, r3, #7
 80098c8:	2b05      	cmp	r3, #5
 80098ca:	d827      	bhi.n	800991c <UART_SetConfig+0x270>
 80098cc:	a201      	add	r2, pc, #4	; (adr r2, 80098d4 <UART_SetConfig+0x228>)
 80098ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d2:	bf00      	nop
 80098d4:	080098ed 	.word	0x080098ed
 80098d8:	080098f5 	.word	0x080098f5
 80098dc:	080098fd 	.word	0x080098fd
 80098e0:	08009905 	.word	0x08009905
 80098e4:	0800990d 	.word	0x0800990d
 80098e8:	08009915 	.word	0x08009915
 80098ec:	2300      	movs	r3, #0
 80098ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098f2:	e1c3      	b.n	8009c7c <UART_SetConfig+0x5d0>
 80098f4:	2304      	movs	r3, #4
 80098f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098fa:	e1bf      	b.n	8009c7c <UART_SetConfig+0x5d0>
 80098fc:	2308      	movs	r3, #8
 80098fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009902:	e1bb      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009904:	2310      	movs	r3, #16
 8009906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800990a:	e1b7      	b.n	8009c7c <UART_SetConfig+0x5d0>
 800990c:	2320      	movs	r3, #32
 800990e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009912:	e1b3      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009914:	2340      	movs	r3, #64	; 0x40
 8009916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800991a:	e1af      	b.n	8009c7c <UART_SetConfig+0x5d0>
 800991c:	2380      	movs	r3, #128	; 0x80
 800991e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009922:	bf00      	nop
 8009924:	e1aa      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a37      	ldr	r2, [pc, #220]	; (8009a08 <UART_SetConfig+0x35c>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d132      	bne.n	8009996 <UART_SetConfig+0x2ea>
 8009930:	4b32      	ldr	r3, [pc, #200]	; (80099fc <UART_SetConfig+0x350>)
 8009932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009934:	f003 0307 	and.w	r3, r3, #7
 8009938:	2b05      	cmp	r3, #5
 800993a:	d827      	bhi.n	800998c <UART_SetConfig+0x2e0>
 800993c:	a201      	add	r2, pc, #4	; (adr r2, 8009944 <UART_SetConfig+0x298>)
 800993e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009942:	bf00      	nop
 8009944:	0800995d 	.word	0x0800995d
 8009948:	08009965 	.word	0x08009965
 800994c:	0800996d 	.word	0x0800996d
 8009950:	08009975 	.word	0x08009975
 8009954:	0800997d 	.word	0x0800997d
 8009958:	08009985 	.word	0x08009985
 800995c:	2300      	movs	r3, #0
 800995e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009962:	e18b      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009964:	2304      	movs	r3, #4
 8009966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800996a:	e187      	b.n	8009c7c <UART_SetConfig+0x5d0>
 800996c:	2308      	movs	r3, #8
 800996e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009972:	e183      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009974:	2310      	movs	r3, #16
 8009976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800997a:	e17f      	b.n	8009c7c <UART_SetConfig+0x5d0>
 800997c:	2320      	movs	r3, #32
 800997e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009982:	e17b      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009984:	2340      	movs	r3, #64	; 0x40
 8009986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800998a:	e177      	b.n	8009c7c <UART_SetConfig+0x5d0>
 800998c:	2380      	movs	r3, #128	; 0x80
 800998e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009992:	bf00      	nop
 8009994:	e172      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a1c      	ldr	r2, [pc, #112]	; (8009a0c <UART_SetConfig+0x360>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d144      	bne.n	8009a2a <UART_SetConfig+0x37e>
 80099a0:	4b16      	ldr	r3, [pc, #88]	; (80099fc <UART_SetConfig+0x350>)
 80099a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099a4:	f003 0307 	and.w	r3, r3, #7
 80099a8:	2b05      	cmp	r3, #5
 80099aa:	d839      	bhi.n	8009a20 <UART_SetConfig+0x374>
 80099ac:	a201      	add	r2, pc, #4	; (adr r2, 80099b4 <UART_SetConfig+0x308>)
 80099ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b2:	bf00      	nop
 80099b4:	080099cd 	.word	0x080099cd
 80099b8:	080099d5 	.word	0x080099d5
 80099bc:	080099dd 	.word	0x080099dd
 80099c0:	080099e5 	.word	0x080099e5
 80099c4:	08009a11 	.word	0x08009a11
 80099c8:	08009a19 	.word	0x08009a19
 80099cc:	2300      	movs	r3, #0
 80099ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099d2:	e153      	b.n	8009c7c <UART_SetConfig+0x5d0>
 80099d4:	2304      	movs	r3, #4
 80099d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099da:	e14f      	b.n	8009c7c <UART_SetConfig+0x5d0>
 80099dc:	2308      	movs	r3, #8
 80099de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099e2:	e14b      	b.n	8009c7c <UART_SetConfig+0x5d0>
 80099e4:	2310      	movs	r3, #16
 80099e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ea:	e147      	b.n	8009c7c <UART_SetConfig+0x5d0>
 80099ec:	cfff69f3 	.word	0xcfff69f3
 80099f0:	58000c00 	.word	0x58000c00
 80099f4:	11fff4ff 	.word	0x11fff4ff
 80099f8:	40011000 	.word	0x40011000
 80099fc:	58024400 	.word	0x58024400
 8009a00:	40004400 	.word	0x40004400
 8009a04:	40004800 	.word	0x40004800
 8009a08:	40004c00 	.word	0x40004c00
 8009a0c:	40005000 	.word	0x40005000
 8009a10:	2320      	movs	r3, #32
 8009a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a16:	e131      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009a18:	2340      	movs	r3, #64	; 0x40
 8009a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a1e:	e12d      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009a20:	2380      	movs	r3, #128	; 0x80
 8009a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a26:	bf00      	nop
 8009a28:	e128      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4ab6      	ldr	r2, [pc, #728]	; (8009d08 <UART_SetConfig+0x65c>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d178      	bne.n	8009b26 <UART_SetConfig+0x47a>
 8009a34:	4bb5      	ldr	r3, [pc, #724]	; (8009d0c <UART_SetConfig+0x660>)
 8009a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a3c:	2b28      	cmp	r3, #40	; 0x28
 8009a3e:	d86d      	bhi.n	8009b1c <UART_SetConfig+0x470>
 8009a40:	a201      	add	r2, pc, #4	; (adr r2, 8009a48 <UART_SetConfig+0x39c>)
 8009a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a46:	bf00      	nop
 8009a48:	08009aed 	.word	0x08009aed
 8009a4c:	08009b1d 	.word	0x08009b1d
 8009a50:	08009b1d 	.word	0x08009b1d
 8009a54:	08009b1d 	.word	0x08009b1d
 8009a58:	08009b1d 	.word	0x08009b1d
 8009a5c:	08009b1d 	.word	0x08009b1d
 8009a60:	08009b1d 	.word	0x08009b1d
 8009a64:	08009b1d 	.word	0x08009b1d
 8009a68:	08009af5 	.word	0x08009af5
 8009a6c:	08009b1d 	.word	0x08009b1d
 8009a70:	08009b1d 	.word	0x08009b1d
 8009a74:	08009b1d 	.word	0x08009b1d
 8009a78:	08009b1d 	.word	0x08009b1d
 8009a7c:	08009b1d 	.word	0x08009b1d
 8009a80:	08009b1d 	.word	0x08009b1d
 8009a84:	08009b1d 	.word	0x08009b1d
 8009a88:	08009afd 	.word	0x08009afd
 8009a8c:	08009b1d 	.word	0x08009b1d
 8009a90:	08009b1d 	.word	0x08009b1d
 8009a94:	08009b1d 	.word	0x08009b1d
 8009a98:	08009b1d 	.word	0x08009b1d
 8009a9c:	08009b1d 	.word	0x08009b1d
 8009aa0:	08009b1d 	.word	0x08009b1d
 8009aa4:	08009b1d 	.word	0x08009b1d
 8009aa8:	08009b05 	.word	0x08009b05
 8009aac:	08009b1d 	.word	0x08009b1d
 8009ab0:	08009b1d 	.word	0x08009b1d
 8009ab4:	08009b1d 	.word	0x08009b1d
 8009ab8:	08009b1d 	.word	0x08009b1d
 8009abc:	08009b1d 	.word	0x08009b1d
 8009ac0:	08009b1d 	.word	0x08009b1d
 8009ac4:	08009b1d 	.word	0x08009b1d
 8009ac8:	08009b0d 	.word	0x08009b0d
 8009acc:	08009b1d 	.word	0x08009b1d
 8009ad0:	08009b1d 	.word	0x08009b1d
 8009ad4:	08009b1d 	.word	0x08009b1d
 8009ad8:	08009b1d 	.word	0x08009b1d
 8009adc:	08009b1d 	.word	0x08009b1d
 8009ae0:	08009b1d 	.word	0x08009b1d
 8009ae4:	08009b1d 	.word	0x08009b1d
 8009ae8:	08009b15 	.word	0x08009b15
 8009aec:	2301      	movs	r3, #1
 8009aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009af2:	e0c3      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009af4:	2304      	movs	r3, #4
 8009af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afa:	e0bf      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009afc:	2308      	movs	r3, #8
 8009afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b02:	e0bb      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b04:	2310      	movs	r3, #16
 8009b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b0a:	e0b7      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b0c:	2320      	movs	r3, #32
 8009b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b12:	e0b3      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b14:	2340      	movs	r3, #64	; 0x40
 8009b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b1a:	e0af      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b1c:	2380      	movs	r3, #128	; 0x80
 8009b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b22:	bf00      	nop
 8009b24:	e0aa      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a79      	ldr	r2, [pc, #484]	; (8009d10 <UART_SetConfig+0x664>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d132      	bne.n	8009b96 <UART_SetConfig+0x4ea>
 8009b30:	4b76      	ldr	r3, [pc, #472]	; (8009d0c <UART_SetConfig+0x660>)
 8009b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b34:	f003 0307 	and.w	r3, r3, #7
 8009b38:	2b05      	cmp	r3, #5
 8009b3a:	d827      	bhi.n	8009b8c <UART_SetConfig+0x4e0>
 8009b3c:	a201      	add	r2, pc, #4	; (adr r2, 8009b44 <UART_SetConfig+0x498>)
 8009b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b42:	bf00      	nop
 8009b44:	08009b5d 	.word	0x08009b5d
 8009b48:	08009b65 	.word	0x08009b65
 8009b4c:	08009b6d 	.word	0x08009b6d
 8009b50:	08009b75 	.word	0x08009b75
 8009b54:	08009b7d 	.word	0x08009b7d
 8009b58:	08009b85 	.word	0x08009b85
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b62:	e08b      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b64:	2304      	movs	r3, #4
 8009b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b6a:	e087      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b6c:	2308      	movs	r3, #8
 8009b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b72:	e083      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b74:	2310      	movs	r3, #16
 8009b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b7a:	e07f      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b7c:	2320      	movs	r3, #32
 8009b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b82:	e07b      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b84:	2340      	movs	r3, #64	; 0x40
 8009b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b8a:	e077      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b8c:	2380      	movs	r3, #128	; 0x80
 8009b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b92:	bf00      	nop
 8009b94:	e072      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a5e      	ldr	r2, [pc, #376]	; (8009d14 <UART_SetConfig+0x668>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d132      	bne.n	8009c06 <UART_SetConfig+0x55a>
 8009ba0:	4b5a      	ldr	r3, [pc, #360]	; (8009d0c <UART_SetConfig+0x660>)
 8009ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba4:	f003 0307 	and.w	r3, r3, #7
 8009ba8:	2b05      	cmp	r3, #5
 8009baa:	d827      	bhi.n	8009bfc <UART_SetConfig+0x550>
 8009bac:	a201      	add	r2, pc, #4	; (adr r2, 8009bb4 <UART_SetConfig+0x508>)
 8009bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb2:	bf00      	nop
 8009bb4:	08009bcd 	.word	0x08009bcd
 8009bb8:	08009bd5 	.word	0x08009bd5
 8009bbc:	08009bdd 	.word	0x08009bdd
 8009bc0:	08009be5 	.word	0x08009be5
 8009bc4:	08009bed 	.word	0x08009bed
 8009bc8:	08009bf5 	.word	0x08009bf5
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bd2:	e053      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009bd4:	2304      	movs	r3, #4
 8009bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bda:	e04f      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009bdc:	2308      	movs	r3, #8
 8009bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009be2:	e04b      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009be4:	2310      	movs	r3, #16
 8009be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bea:	e047      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009bec:	2320      	movs	r3, #32
 8009bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bf2:	e043      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009bf4:	2340      	movs	r3, #64	; 0x40
 8009bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bfa:	e03f      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009bfc:	2380      	movs	r3, #128	; 0x80
 8009bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c02:	bf00      	nop
 8009c04:	e03a      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a43      	ldr	r2, [pc, #268]	; (8009d18 <UART_SetConfig+0x66c>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d132      	bne.n	8009c76 <UART_SetConfig+0x5ca>
 8009c10:	4b3e      	ldr	r3, [pc, #248]	; (8009d0c <UART_SetConfig+0x660>)
 8009c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c14:	f003 0307 	and.w	r3, r3, #7
 8009c18:	2b05      	cmp	r3, #5
 8009c1a:	d827      	bhi.n	8009c6c <UART_SetConfig+0x5c0>
 8009c1c:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <UART_SetConfig+0x578>)
 8009c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c22:	bf00      	nop
 8009c24:	08009c3d 	.word	0x08009c3d
 8009c28:	08009c45 	.word	0x08009c45
 8009c2c:	08009c4d 	.word	0x08009c4d
 8009c30:	08009c55 	.word	0x08009c55
 8009c34:	08009c5d 	.word	0x08009c5d
 8009c38:	08009c65 	.word	0x08009c65
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c42:	e01b      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009c44:	2304      	movs	r3, #4
 8009c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c4a:	e017      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009c4c:	2308      	movs	r3, #8
 8009c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c52:	e013      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009c54:	2310      	movs	r3, #16
 8009c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c5a:	e00f      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009c5c:	2320      	movs	r3, #32
 8009c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c62:	e00b      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009c64:	2340      	movs	r3, #64	; 0x40
 8009c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c6a:	e007      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009c6c:	2380      	movs	r3, #128	; 0x80
 8009c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c72:	bf00      	nop
 8009c74:	e002      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009c76:	2380      	movs	r3, #128	; 0x80
 8009c78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a25      	ldr	r2, [pc, #148]	; (8009d18 <UART_SetConfig+0x66c>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	f040 80b8 	bne.w	8009df8 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c8c:	2b08      	cmp	r3, #8
 8009c8e:	d019      	beq.n	8009cc4 <UART_SetConfig+0x618>
 8009c90:	2b08      	cmp	r3, #8
 8009c92:	dc04      	bgt.n	8009c9e <UART_SetConfig+0x5f2>
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d009      	beq.n	8009cac <UART_SetConfig+0x600>
 8009c98:	2b04      	cmp	r3, #4
 8009c9a:	d00b      	beq.n	8009cb4 <UART_SetConfig+0x608>
 8009c9c:	e042      	b.n	8009d24 <UART_SetConfig+0x678>
 8009c9e:	2b20      	cmp	r3, #32
 8009ca0:	d02b      	beq.n	8009cfa <UART_SetConfig+0x64e>
 8009ca2:	2b40      	cmp	r3, #64	; 0x40
 8009ca4:	d02c      	beq.n	8009d00 <UART_SetConfig+0x654>
 8009ca6:	2b10      	cmp	r3, #16
 8009ca8:	d014      	beq.n	8009cd4 <UART_SetConfig+0x628>
 8009caa:	e03b      	b.n	8009d24 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009cac:	f7fe faa0 	bl	80081f0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009cb0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009cb2:	e03d      	b.n	8009d30 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cb4:	f107 0314 	add.w	r3, r7, #20
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fe faaf 	bl	800821c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cc2:	e035      	b.n	8009d30 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cc4:	f107 0308 	add.w	r3, r7, #8
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fe fbf3 	bl	80084b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cd2:	e02d      	b.n	8009d30 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cd4:	4b0d      	ldr	r3, [pc, #52]	; (8009d0c <UART_SetConfig+0x660>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f003 0320 	and.w	r3, r3, #32
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d009      	beq.n	8009cf4 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ce0:	4b0a      	ldr	r3, [pc, #40]	; (8009d0c <UART_SetConfig+0x660>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	08db      	lsrs	r3, r3, #3
 8009ce6:	f003 0303 	and.w	r3, r3, #3
 8009cea:	4a0c      	ldr	r2, [pc, #48]	; (8009d1c <UART_SetConfig+0x670>)
 8009cec:	fa22 f303 	lsr.w	r3, r2, r3
 8009cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009cf2:	e01d      	b.n	8009d30 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8009cf4:	4b09      	ldr	r3, [pc, #36]	; (8009d1c <UART_SetConfig+0x670>)
 8009cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cf8:	e01a      	b.n	8009d30 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009cfa:	4b09      	ldr	r3, [pc, #36]	; (8009d20 <UART_SetConfig+0x674>)
 8009cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cfe:	e017      	b.n	8009d30 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d06:	e013      	b.n	8009d30 <UART_SetConfig+0x684>
 8009d08:	40011400 	.word	0x40011400
 8009d0c:	58024400 	.word	0x58024400
 8009d10:	40007800 	.word	0x40007800
 8009d14:	40007c00 	.word	0x40007c00
 8009d18:	58000c00 	.word	0x58000c00
 8009d1c:	03d09000 	.word	0x03d09000
 8009d20:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8009d24:	2300      	movs	r3, #0
 8009d26:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009d2e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f000 824d 	beq.w	800a1d2 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3c:	4aad      	ldr	r2, [pc, #692]	; (8009ff4 <UART_SetConfig+0x948>)
 8009d3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d42:	461a      	mov	r2, r3
 8009d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d46:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d4a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	685a      	ldr	r2, [r3, #4]
 8009d50:	4613      	mov	r3, r2
 8009d52:	005b      	lsls	r3, r3, #1
 8009d54:	4413      	add	r3, r2
 8009d56:	6a3a      	ldr	r2, [r7, #32]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d305      	bcc.n	8009d68 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d62:	6a3a      	ldr	r2, [r7, #32]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d903      	bls.n	8009d70 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009d6e:	e230      	b.n	800a1d2 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d72:	4618      	mov	r0, r3
 8009d74:	f04f 0100 	mov.w	r1, #0
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7c:	4a9d      	ldr	r2, [pc, #628]	; (8009ff4 <UART_SetConfig+0x948>)
 8009d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	f04f 0400 	mov.w	r4, #0
 8009d88:	461a      	mov	r2, r3
 8009d8a:	4623      	mov	r3, r4
 8009d8c:	f7f6 fb54 	bl	8000438 <__aeabi_uldivmod>
 8009d90:	4603      	mov	r3, r0
 8009d92:	460c      	mov	r4, r1
 8009d94:	4619      	mov	r1, r3
 8009d96:	4622      	mov	r2, r4
 8009d98:	f04f 0300 	mov.w	r3, #0
 8009d9c:	f04f 0400 	mov.w	r4, #0
 8009da0:	0214      	lsls	r4, r2, #8
 8009da2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009da6:	020b      	lsls	r3, r1, #8
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	6852      	ldr	r2, [r2, #4]
 8009dac:	0852      	lsrs	r2, r2, #1
 8009dae:	4611      	mov	r1, r2
 8009db0:	f04f 0200 	mov.w	r2, #0
 8009db4:	eb13 0b01 	adds.w	fp, r3, r1
 8009db8:	eb44 0c02 	adc.w	ip, r4, r2
 8009dbc:	4658      	mov	r0, fp
 8009dbe:	4661      	mov	r1, ip
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	f04f 0400 	mov.w	r4, #0
 8009dc8:	461a      	mov	r2, r3
 8009dca:	4623      	mov	r3, r4
 8009dcc:	f7f6 fb34 	bl	8000438 <__aeabi_uldivmod>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ddc:	d308      	bcc.n	8009df0 <UART_SetConfig+0x744>
 8009dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009de4:	d204      	bcs.n	8009df0 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dec:	60da      	str	r2, [r3, #12]
 8009dee:	e1f0      	b.n	800a1d2 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009df6:	e1ec      	b.n	800a1d2 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e00:	f040 8100 	bne.w	800a004 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8009e04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e08:	2b40      	cmp	r3, #64	; 0x40
 8009e0a:	f200 80b7 	bhi.w	8009f7c <UART_SetConfig+0x8d0>
 8009e0e:	a201      	add	r2, pc, #4	; (adr r2, 8009e14 <UART_SetConfig+0x768>)
 8009e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e14:	08009f19 	.word	0x08009f19
 8009e18:	08009f21 	.word	0x08009f21
 8009e1c:	08009f7d 	.word	0x08009f7d
 8009e20:	08009f7d 	.word	0x08009f7d
 8009e24:	08009f29 	.word	0x08009f29
 8009e28:	08009f7d 	.word	0x08009f7d
 8009e2c:	08009f7d 	.word	0x08009f7d
 8009e30:	08009f7d 	.word	0x08009f7d
 8009e34:	08009f39 	.word	0x08009f39
 8009e38:	08009f7d 	.word	0x08009f7d
 8009e3c:	08009f7d 	.word	0x08009f7d
 8009e40:	08009f7d 	.word	0x08009f7d
 8009e44:	08009f7d 	.word	0x08009f7d
 8009e48:	08009f7d 	.word	0x08009f7d
 8009e4c:	08009f7d 	.word	0x08009f7d
 8009e50:	08009f7d 	.word	0x08009f7d
 8009e54:	08009f49 	.word	0x08009f49
 8009e58:	08009f7d 	.word	0x08009f7d
 8009e5c:	08009f7d 	.word	0x08009f7d
 8009e60:	08009f7d 	.word	0x08009f7d
 8009e64:	08009f7d 	.word	0x08009f7d
 8009e68:	08009f7d 	.word	0x08009f7d
 8009e6c:	08009f7d 	.word	0x08009f7d
 8009e70:	08009f7d 	.word	0x08009f7d
 8009e74:	08009f7d 	.word	0x08009f7d
 8009e78:	08009f7d 	.word	0x08009f7d
 8009e7c:	08009f7d 	.word	0x08009f7d
 8009e80:	08009f7d 	.word	0x08009f7d
 8009e84:	08009f7d 	.word	0x08009f7d
 8009e88:	08009f7d 	.word	0x08009f7d
 8009e8c:	08009f7d 	.word	0x08009f7d
 8009e90:	08009f7d 	.word	0x08009f7d
 8009e94:	08009f6f 	.word	0x08009f6f
 8009e98:	08009f7d 	.word	0x08009f7d
 8009e9c:	08009f7d 	.word	0x08009f7d
 8009ea0:	08009f7d 	.word	0x08009f7d
 8009ea4:	08009f7d 	.word	0x08009f7d
 8009ea8:	08009f7d 	.word	0x08009f7d
 8009eac:	08009f7d 	.word	0x08009f7d
 8009eb0:	08009f7d 	.word	0x08009f7d
 8009eb4:	08009f7d 	.word	0x08009f7d
 8009eb8:	08009f7d 	.word	0x08009f7d
 8009ebc:	08009f7d 	.word	0x08009f7d
 8009ec0:	08009f7d 	.word	0x08009f7d
 8009ec4:	08009f7d 	.word	0x08009f7d
 8009ec8:	08009f7d 	.word	0x08009f7d
 8009ecc:	08009f7d 	.word	0x08009f7d
 8009ed0:	08009f7d 	.word	0x08009f7d
 8009ed4:	08009f7d 	.word	0x08009f7d
 8009ed8:	08009f7d 	.word	0x08009f7d
 8009edc:	08009f7d 	.word	0x08009f7d
 8009ee0:	08009f7d 	.word	0x08009f7d
 8009ee4:	08009f7d 	.word	0x08009f7d
 8009ee8:	08009f7d 	.word	0x08009f7d
 8009eec:	08009f7d 	.word	0x08009f7d
 8009ef0:	08009f7d 	.word	0x08009f7d
 8009ef4:	08009f7d 	.word	0x08009f7d
 8009ef8:	08009f7d 	.word	0x08009f7d
 8009efc:	08009f7d 	.word	0x08009f7d
 8009f00:	08009f7d 	.word	0x08009f7d
 8009f04:	08009f7d 	.word	0x08009f7d
 8009f08:	08009f7d 	.word	0x08009f7d
 8009f0c:	08009f7d 	.word	0x08009f7d
 8009f10:	08009f7d 	.word	0x08009f7d
 8009f14:	08009f75 	.word	0x08009f75
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f18:	f7fd fa50 	bl	80073bc <HAL_RCC_GetPCLK1Freq>
 8009f1c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f1e:	e033      	b.n	8009f88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f20:	f7fd fa62 	bl	80073e8 <HAL_RCC_GetPCLK2Freq>
 8009f24:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f26:	e02f      	b.n	8009f88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f28:	f107 0314 	add.w	r3, r7, #20
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7fe f975 	bl	800821c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f36:	e027      	b.n	8009f88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f38:	f107 0308 	add.w	r3, r7, #8
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7fe fab9 	bl	80084b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f46:	e01f      	b.n	8009f88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f48:	4b2b      	ldr	r3, [pc, #172]	; (8009ff8 <UART_SetConfig+0x94c>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0320 	and.w	r3, r3, #32
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d009      	beq.n	8009f68 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f54:	4b28      	ldr	r3, [pc, #160]	; (8009ff8 <UART_SetConfig+0x94c>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	08db      	lsrs	r3, r3, #3
 8009f5a:	f003 0303 	and.w	r3, r3, #3
 8009f5e:	4a27      	ldr	r2, [pc, #156]	; (8009ffc <UART_SetConfig+0x950>)
 8009f60:	fa22 f303 	lsr.w	r3, r2, r3
 8009f64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f66:	e00f      	b.n	8009f88 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8009f68:	4b24      	ldr	r3, [pc, #144]	; (8009ffc <UART_SetConfig+0x950>)
 8009f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f6c:	e00c      	b.n	8009f88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f6e:	4b24      	ldr	r3, [pc, #144]	; (800a000 <UART_SetConfig+0x954>)
 8009f70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f72:	e009      	b.n	8009f88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f7a:	e005      	b.n	8009f88 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009f86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f000 8121 	beq.w	800a1d2 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f94:	4a17      	ldr	r2, [pc, #92]	; (8009ff4 <UART_SetConfig+0x948>)
 8009f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fa2:	005a      	lsls	r2, r3, #1
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	085b      	lsrs	r3, r3, #1
 8009faa:	441a      	add	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fba:	2b0f      	cmp	r3, #15
 8009fbc:	d916      	bls.n	8009fec <UART_SetConfig+0x940>
 8009fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fc4:	d212      	bcs.n	8009fec <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	f023 030f 	bic.w	r3, r3, #15
 8009fce:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd2:	085b      	lsrs	r3, r3, #1
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	f003 0307 	and.w	r3, r3, #7
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009fe8:	60da      	str	r2, [r3, #12]
 8009fea:	e0f2      	b.n	800a1d2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ff2:	e0ee      	b.n	800a1d2 <UART_SetConfig+0xb26>
 8009ff4:	0800cf60 	.word	0x0800cf60
 8009ff8:	58024400 	.word	0x58024400
 8009ffc:	03d09000 	.word	0x03d09000
 800a000:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800a004:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a008:	2b40      	cmp	r3, #64	; 0x40
 800a00a:	f200 80b7 	bhi.w	800a17c <UART_SetConfig+0xad0>
 800a00e:	a201      	add	r2, pc, #4	; (adr r2, 800a014 <UART_SetConfig+0x968>)
 800a010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a014:	0800a119 	.word	0x0800a119
 800a018:	0800a121 	.word	0x0800a121
 800a01c:	0800a17d 	.word	0x0800a17d
 800a020:	0800a17d 	.word	0x0800a17d
 800a024:	0800a129 	.word	0x0800a129
 800a028:	0800a17d 	.word	0x0800a17d
 800a02c:	0800a17d 	.word	0x0800a17d
 800a030:	0800a17d 	.word	0x0800a17d
 800a034:	0800a139 	.word	0x0800a139
 800a038:	0800a17d 	.word	0x0800a17d
 800a03c:	0800a17d 	.word	0x0800a17d
 800a040:	0800a17d 	.word	0x0800a17d
 800a044:	0800a17d 	.word	0x0800a17d
 800a048:	0800a17d 	.word	0x0800a17d
 800a04c:	0800a17d 	.word	0x0800a17d
 800a050:	0800a17d 	.word	0x0800a17d
 800a054:	0800a149 	.word	0x0800a149
 800a058:	0800a17d 	.word	0x0800a17d
 800a05c:	0800a17d 	.word	0x0800a17d
 800a060:	0800a17d 	.word	0x0800a17d
 800a064:	0800a17d 	.word	0x0800a17d
 800a068:	0800a17d 	.word	0x0800a17d
 800a06c:	0800a17d 	.word	0x0800a17d
 800a070:	0800a17d 	.word	0x0800a17d
 800a074:	0800a17d 	.word	0x0800a17d
 800a078:	0800a17d 	.word	0x0800a17d
 800a07c:	0800a17d 	.word	0x0800a17d
 800a080:	0800a17d 	.word	0x0800a17d
 800a084:	0800a17d 	.word	0x0800a17d
 800a088:	0800a17d 	.word	0x0800a17d
 800a08c:	0800a17d 	.word	0x0800a17d
 800a090:	0800a17d 	.word	0x0800a17d
 800a094:	0800a16f 	.word	0x0800a16f
 800a098:	0800a17d 	.word	0x0800a17d
 800a09c:	0800a17d 	.word	0x0800a17d
 800a0a0:	0800a17d 	.word	0x0800a17d
 800a0a4:	0800a17d 	.word	0x0800a17d
 800a0a8:	0800a17d 	.word	0x0800a17d
 800a0ac:	0800a17d 	.word	0x0800a17d
 800a0b0:	0800a17d 	.word	0x0800a17d
 800a0b4:	0800a17d 	.word	0x0800a17d
 800a0b8:	0800a17d 	.word	0x0800a17d
 800a0bc:	0800a17d 	.word	0x0800a17d
 800a0c0:	0800a17d 	.word	0x0800a17d
 800a0c4:	0800a17d 	.word	0x0800a17d
 800a0c8:	0800a17d 	.word	0x0800a17d
 800a0cc:	0800a17d 	.word	0x0800a17d
 800a0d0:	0800a17d 	.word	0x0800a17d
 800a0d4:	0800a17d 	.word	0x0800a17d
 800a0d8:	0800a17d 	.word	0x0800a17d
 800a0dc:	0800a17d 	.word	0x0800a17d
 800a0e0:	0800a17d 	.word	0x0800a17d
 800a0e4:	0800a17d 	.word	0x0800a17d
 800a0e8:	0800a17d 	.word	0x0800a17d
 800a0ec:	0800a17d 	.word	0x0800a17d
 800a0f0:	0800a17d 	.word	0x0800a17d
 800a0f4:	0800a17d 	.word	0x0800a17d
 800a0f8:	0800a17d 	.word	0x0800a17d
 800a0fc:	0800a17d 	.word	0x0800a17d
 800a100:	0800a17d 	.word	0x0800a17d
 800a104:	0800a17d 	.word	0x0800a17d
 800a108:	0800a17d 	.word	0x0800a17d
 800a10c:	0800a17d 	.word	0x0800a17d
 800a110:	0800a17d 	.word	0x0800a17d
 800a114:	0800a175 	.word	0x0800a175
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a118:	f7fd f950 	bl	80073bc <HAL_RCC_GetPCLK1Freq>
 800a11c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a11e:	e033      	b.n	800a188 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a120:	f7fd f962 	bl	80073e8 <HAL_RCC_GetPCLK2Freq>
 800a124:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a126:	e02f      	b.n	800a188 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a128:	f107 0314 	add.w	r3, r7, #20
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fe f875 	bl	800821c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a136:	e027      	b.n	800a188 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a138:	f107 0308 	add.w	r3, r7, #8
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7fe f9b9 	bl	80084b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a146:	e01f      	b.n	800a188 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a148:	4b2c      	ldr	r3, [pc, #176]	; (800a1fc <UART_SetConfig+0xb50>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 0320 	and.w	r3, r3, #32
 800a150:	2b00      	cmp	r3, #0
 800a152:	d009      	beq.n	800a168 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a154:	4b29      	ldr	r3, [pc, #164]	; (800a1fc <UART_SetConfig+0xb50>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	08db      	lsrs	r3, r3, #3
 800a15a:	f003 0303 	and.w	r3, r3, #3
 800a15e:	4a28      	ldr	r2, [pc, #160]	; (800a200 <UART_SetConfig+0xb54>)
 800a160:	fa22 f303 	lsr.w	r3, r2, r3
 800a164:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a166:	e00f      	b.n	800a188 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800a168:	4b25      	ldr	r3, [pc, #148]	; (800a200 <UART_SetConfig+0xb54>)
 800a16a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a16c:	e00c      	b.n	800a188 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a16e:	4b25      	ldr	r3, [pc, #148]	; (800a204 <UART_SetConfig+0xb58>)
 800a170:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a172:	e009      	b.n	800a188 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a178:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a17a:	e005      	b.n	800a188 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800a17c:	2300      	movs	r3, #0
 800a17e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a186:	bf00      	nop
    }

    if (pclk != 0U)
 800a188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d021      	beq.n	800a1d2 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a192:	4a1d      	ldr	r2, [pc, #116]	; (800a208 <UART_SetConfig+0xb5c>)
 800a194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a198:	461a      	mov	r2, r3
 800a19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19c:	fbb3 f2f2 	udiv	r2, r3, r2
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	085b      	lsrs	r3, r3, #1
 800a1a6:	441a      	add	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b6:	2b0f      	cmp	r3, #15
 800a1b8:	d908      	bls.n	800a1cc <UART_SetConfig+0xb20>
 800a1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1c0:	d204      	bcs.n	800a1cc <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1c8:	60da      	str	r2, [r3, #12]
 800a1ca:	e002      	b.n	800a1d2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a1ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3738      	adds	r7, #56	; 0x38
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a1fc:	58024400 	.word	0x58024400
 800a200:	03d09000 	.word	0x03d09000
 800a204:	003d0900 	.word	0x003d0900
 800a208:	0800cf60 	.word	0x0800cf60

0800a20c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a218:	f003 0301 	and.w	r3, r3, #1
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00a      	beq.n	800a236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	430a      	orrs	r2, r1
 800a234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23a:	f003 0302 	and.w	r3, r3, #2
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00a      	beq.n	800a258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	430a      	orrs	r2, r1
 800a256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a25c:	f003 0304 	and.w	r3, r3, #4
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00a      	beq.n	800a27a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	430a      	orrs	r2, r1
 800a278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a27e:	f003 0308 	and.w	r3, r3, #8
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00a      	beq.n	800a29c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	430a      	orrs	r2, r1
 800a29a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a0:	f003 0310 	and.w	r3, r3, #16
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00a      	beq.n	800a2be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c2:	f003 0320 	and.w	r3, r3, #32
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00a      	beq.n	800a2e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	430a      	orrs	r2, r1
 800a2de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d01a      	beq.n	800a322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	430a      	orrs	r2, r1
 800a300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a30a:	d10a      	bne.n	800a322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	430a      	orrs	r2, r1
 800a320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00a      	beq.n	800a344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	430a      	orrs	r2, r1
 800a342:	605a      	str	r2, [r3, #4]
  }
}
 800a344:	bf00      	nop
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af02      	add	r7, sp, #8
 800a356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a360:	f7fb fae4 	bl	800592c <HAL_GetTick>
 800a364:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 0308 	and.w	r3, r3, #8
 800a370:	2b08      	cmp	r3, #8
 800a372:	d10e      	bne.n	800a392 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a378:	9300      	str	r3, [sp, #0]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f82c 	bl	800a3e0 <UART_WaitOnFlagUntilTimeout>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a38e:	2303      	movs	r3, #3
 800a390:	e022      	b.n	800a3d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b04      	cmp	r3, #4
 800a39e:	d10e      	bne.n	800a3be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f816 	bl	800a3e0 <UART_WaitOnFlagUntilTimeout>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	e00c      	b.n	800a3d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2220      	movs	r2, #32
 800a3c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2220      	movs	r2, #32
 800a3ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	603b      	str	r3, [r7, #0]
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3f0:	e062      	b.n	800a4b8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3f2:	69bb      	ldr	r3, [r7, #24]
 800a3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f8:	d05e      	beq.n	800a4b8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3fa:	f7fb fa97 	bl	800592c <HAL_GetTick>
 800a3fe:	4602      	mov	r2, r0
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	69ba      	ldr	r2, [r7, #24]
 800a406:	429a      	cmp	r2, r3
 800a408:	d302      	bcc.n	800a410 <UART_WaitOnFlagUntilTimeout+0x30>
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d11d      	bne.n	800a44c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a41e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	689a      	ldr	r2, [r3, #8]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f022 0201 	bic.w	r2, r2, #1
 800a42e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2220      	movs	r2, #32
 800a434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2220      	movs	r2, #32
 800a43c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a448:	2303      	movs	r3, #3
 800a44a:	e045      	b.n	800a4d8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0304 	and.w	r3, r3, #4
 800a456:	2b00      	cmp	r3, #0
 800a458:	d02e      	beq.n	800a4b8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	69db      	ldr	r3, [r3, #28]
 800a460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a468:	d126      	bne.n	800a4b8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a472:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a482:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	689a      	ldr	r2, [r3, #8]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f022 0201 	bic.w	r2, r2, #1
 800a492:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2220      	movs	r2, #32
 800a498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2220      	movs	r2, #32
 800a4a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2220      	movs	r2, #32
 800a4a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a4b4:	2303      	movs	r3, #3
 800a4b6:	e00f      	b.n	800a4d8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	69da      	ldr	r2, [r3, #28]
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	bf0c      	ite	eq
 800a4c8:	2301      	moveq	r3, #1
 800a4ca:	2300      	movne	r3, #0
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	79fb      	ldrb	r3, [r7, #7]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d08d      	beq.n	800a3f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a4f6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6899      	ldr	r1, [r3, #8]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	4b08      	ldr	r3, [pc, #32]	; (800a524 <UART_EndRxTransfer+0x44>)
 800a504:	400b      	ands	r3, r1
 800a506:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2220      	movs	r2, #32
 800a50c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800a516:	bf00      	nop
 800a518:	370c      	adds	r7, #12
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop
 800a524:	effffffe 	.word	0xeffffffe

0800a528 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a534:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	f7ff f8a6 	bl	8009698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a54c:	bf00      	nop
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a562:	2b21      	cmp	r3, #33	; 0x21
 800a564:	d12a      	bne.n	800a5bc <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d110      	bne.n	800a594 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a580:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a590:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a592:	e013      	b.n	800a5bc <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a598:	781a      	ldrb	r2, [r3, #0]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5a4:	1c5a      	adds	r2, r3, #1
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	3b01      	subs	r3, #1
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5d6:	2b21      	cmp	r3, #33	; 0x21
 800a5d8:	d12f      	bne.n	800a63a <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d110      	bne.n	800a608 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5f4:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a604:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a606:	e018      	b.n	800a63a <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a60c:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	881b      	ldrh	r3, [r3, #0]
 800a612:	461a      	mov	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a61c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a622:	1c9a      	adds	r2, r3, #2
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a62e:	b29b      	uxth	r3, r3
 800a630:	3b01      	subs	r3, #1
 800a632:	b29a      	uxth	r2, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800a63a:	bf00      	nop
 800a63c:	3714      	adds	r7, #20
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr

0800a646 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a646:	b480      	push	{r7}
 800a648:	b085      	sub	sp, #20
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a654:	2b21      	cmp	r3, #33	; 0x21
 800a656:	d13d      	bne.n	800a6d4 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a65e:	81fb      	strh	r3, [r7, #14]
 800a660:	e035      	b.n	800a6ce <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a668:	b29b      	uxth	r3, r3
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d111      	bne.n	800a692 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	689a      	ldr	r2, [r3, #8]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a67c:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a68c:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800a68e:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800a690:	e020      	b.n	800a6d4 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	69db      	ldr	r3, [r3, #28]
 800a698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d013      	beq.n	800a6c8 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6a4:	781a      	ldrb	r2, [r3, #0]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6b0:	1c5a      	adds	r2, r3, #1
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a6c8:	89fb      	ldrh	r3, [r7, #14]
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	81fb      	strh	r3, [r7, #14]
 800a6ce:	89fb      	ldrh	r3, [r7, #14]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d1c6      	bne.n	800a662 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800a6d4:	bf00      	nop
 800a6d6:	3714      	adds	r7, #20
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b085      	sub	sp, #20
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6ee:	2b21      	cmp	r3, #33	; 0x21
 800a6f0:	d142      	bne.n	800a778 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a6f8:	81fb      	strh	r3, [r7, #14]
 800a6fa:	e03a      	b.n	800a772 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a702:	b29b      	uxth	r3, r3
 800a704:	2b00      	cmp	r3, #0
 800a706:	d111      	bne.n	800a72c <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	689a      	ldr	r2, [r3, #8]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a716:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a726:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800a728:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800a72a:	e025      	b.n	800a778 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	69db      	ldr	r3, [r3, #28]
 800a732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a736:	2b00      	cmp	r3, #0
 800a738:	d018      	beq.n	800a76c <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a73e:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	881b      	ldrh	r3, [r3, #0]
 800a744:	461a      	mov	r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a74e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a754:	1c9a      	adds	r2, r3, #2
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a760:	b29b      	uxth	r3, r3
 800a762:	3b01      	subs	r3, #1
 800a764:	b29a      	uxth	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a76c:	89fb      	ldrh	r3, [r7, #14]
 800a76e:	3b01      	subs	r3, #1
 800a770:	81fb      	strh	r3, [r7, #14]
 800a772:	89fb      	ldrh	r3, [r7, #14]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d1c1      	bne.n	800a6fc <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800a778:	bf00      	nop
 800a77a:	3714      	adds	r7, #20
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a79a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2220      	movs	r2, #32
 800a7a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7fa fe5c 	bl	8005468 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7b0:	bf00      	nop
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a7c6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7ce:	2b22      	cmp	r3, #34	; 0x22
 800a7d0:	d13b      	bne.n	800a84a <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a7da:	89bb      	ldrh	r3, [r7, #12]
 800a7dc:	b2d9      	uxtb	r1, r3
 800a7de:	89fb      	ldrh	r3, [r7, #14]
 800a7e0:	b2da      	uxtb	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7e6:	400a      	ands	r2, r1
 800a7e8:	b2d2      	uxtb	r2, r2
 800a7ea:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7f0:	1c5a      	adds	r2, r3, #1
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	3b01      	subs	r3, #1
 800a800:	b29a      	uxth	r2, r3
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a80e:	b29b      	uxth	r3, r3
 800a810:	2b00      	cmp	r3, #0
 800a812:	d122      	bne.n	800a85a <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a822:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	689a      	ldr	r2, [r3, #8]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f022 0201 	bic.w	r2, r2, #1
 800a832:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2220      	movs	r2, #32
 800a838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f7fa fe20 	bl	8005488 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a848:	e007      	b.n	800a85a <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	699a      	ldr	r2, [r3, #24]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f042 0208 	orr.w	r2, r2, #8
 800a858:	619a      	str	r2, [r3, #24]
}
 800a85a:	bf00      	nop
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b084      	sub	sp, #16
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a870:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a878:	2b22      	cmp	r3, #34	; 0x22
 800a87a:	d13b      	bne.n	800a8f4 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a882:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a888:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a88a:	89ba      	ldrh	r2, [r7, #12]
 800a88c:	89fb      	ldrh	r3, [r7, #14]
 800a88e:	4013      	ands	r3, r2
 800a890:	b29a      	uxth	r2, r3
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a89a:	1c9a      	adds	r2, r3, #2
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	b29a      	uxth	r2, r3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d122      	bne.n	800a904 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a8cc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	689a      	ldr	r2, [r3, #8]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f022 0201 	bic.w	r2, r2, #1
 800a8dc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2220      	movs	r2, #32
 800a8e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f7fa fdcb 	bl	8005488 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a8f2:	e007      	b.n	800a904 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	699a      	ldr	r2, [r3, #24]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f042 0208 	orr.w	r2, r2, #8
 800a902:	619a      	str	r2, [r3, #24]
}
 800a904:	bf00      	nop
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a91a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a922:	2b22      	cmp	r3, #34	; 0x22
 800a924:	d166      	bne.n	800a9f4 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a92c:	81fb      	strh	r3, [r7, #14]
 800a92e:	e03d      	b.n	800a9ac <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a936:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a938:	893b      	ldrh	r3, [r7, #8]
 800a93a:	b2d9      	uxtb	r1, r3
 800a93c:	89bb      	ldrh	r3, [r7, #12]
 800a93e:	b2da      	uxtb	r2, r3
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a944:	400a      	ands	r2, r1
 800a946:	b2d2      	uxtb	r2, r2
 800a948:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a94e:	1c5a      	adds	r2, r3, #1
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	3b01      	subs	r3, #1
 800a95e:	b29a      	uxth	r2, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d119      	bne.n	800a9a6 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a980:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	6899      	ldr	r1, [r3, #8]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	4b1f      	ldr	r3, [pc, #124]	; (800aa0c <UART_RxISR_8BIT_FIFOEN+0x100>)
 800a98e:	400b      	ands	r3, r1
 800a990:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2220      	movs	r2, #32
 800a996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7fa fd71 	bl	8005488 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a9a6:	89fb      	ldrh	r3, [r7, #14]
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	81fb      	strh	r3, [r7, #14]
 800a9ac:	89fb      	ldrh	r3, [r7, #14]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1be      	bne.n	800a930 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a9b8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a9ba:	897b      	ldrh	r3, [r7, #10]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d021      	beq.n	800aa04 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a9c6:	897a      	ldrh	r2, [r7, #10]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d21b      	bcs.n	800aa04 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	689a      	ldr	r2, [r3, #8]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a9da:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4a0c      	ldr	r2, [pc, #48]	; (800aa10 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800a9e0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f042 0220 	orr.w	r2, r2, #32
 800a9f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a9f2:	e007      	b.n	800aa04 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	699a      	ldr	r2, [r3, #24]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f042 0208 	orr.w	r2, r2, #8
 800aa02:	619a      	str	r2, [r3, #24]
}
 800aa04:	bf00      	nop
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	effffffe 	.word	0xeffffffe
 800aa10:	0800a7b9 	.word	0x0800a7b9

0800aa14 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b086      	sub	sp, #24
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aa22:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa2a:	2b22      	cmp	r3, #34	; 0x22
 800aa2c:	d166      	bne.n	800aafc <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aa34:	82fb      	strh	r3, [r7, #22]
 800aa36:	e03d      	b.n	800aab4 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3e:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa44:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800aa46:	8a3a      	ldrh	r2, [r7, #16]
 800aa48:	8abb      	ldrh	r3, [r7, #20]
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	b29a      	uxth	r2, r3
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa56:	1c9a      	adds	r2, r3, #2
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	3b01      	subs	r3, #1
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d119      	bne.n	800aaae <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa88:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	6899      	ldr	r1, [r3, #8]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	4b1f      	ldr	r3, [pc, #124]	; (800ab14 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800aa96:	400b      	ands	r3, r1
 800aa98:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2220      	movs	r2, #32
 800aa9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f7fa fced 	bl	8005488 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800aaae:	8afb      	ldrh	r3, [r7, #22]
 800aab0:	3b01      	subs	r3, #1
 800aab2:	82fb      	strh	r3, [r7, #22]
 800aab4:	8afb      	ldrh	r3, [r7, #22]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1be      	bne.n	800aa38 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aac0:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800aac2:	8a7b      	ldrh	r3, [r7, #18]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d021      	beq.n	800ab0c <UART_RxISR_16BIT_FIFOEN+0xf8>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aace:	8a7a      	ldrh	r2, [r7, #18]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d21b      	bcs.n	800ab0c <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	689a      	ldr	r2, [r3, #8]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800aae2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a0c      	ldr	r2, [pc, #48]	; (800ab18 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800aae8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f042 0220 	orr.w	r2, r2, #32
 800aaf8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aafa:	e007      	b.n	800ab0c <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	699a      	ldr	r2, [r3, #24]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f042 0208 	orr.w	r2, r2, #8
 800ab0a:	619a      	str	r2, [r3, #24]
}
 800ab0c:	bf00      	nop
 800ab0e:	3718      	adds	r7, #24
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	effffffe 	.word	0xeffffffe
 800ab18:	0800a863 	.word	0x0800a863

0800ab1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ab24:	bf00      	nop
 800ab26:	370c      	adds	r7, #12
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ab38:	bf00      	nop
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ab4c:	bf00      	nop
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d101      	bne.n	800ab6e <HAL_UARTEx_DisableFifoMode+0x16>
 800ab6a:	2302      	movs	r3, #2
 800ab6c:	e027      	b.n	800abbe <HAL_UARTEx_DisableFifoMode+0x66>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2201      	movs	r2, #1
 800ab72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2224      	movs	r2, #36	; 0x24
 800ab7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f022 0201 	bic.w	r2, r2, #1
 800ab94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ab9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2220      	movs	r2, #32
 800abb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3714      	adds	r7, #20
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b084      	sub	sp, #16
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d101      	bne.n	800abe2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800abde:	2302      	movs	r3, #2
 800abe0:	e02d      	b.n	800ac3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2201      	movs	r2, #1
 800abe6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2224      	movs	r2, #36	; 0x24
 800abee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f022 0201 	bic.w	r2, r2, #1
 800ac08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	683a      	ldr	r2, [r7, #0]
 800ac1a:	430a      	orrs	r2, r1
 800ac1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 f850 	bl	800acc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2220      	movs	r2, #32
 800ac30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b084      	sub	sp, #16
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
 800ac4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d101      	bne.n	800ac5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ac5a:	2302      	movs	r3, #2
 800ac5c:	e02d      	b.n	800acba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2201      	movs	r2, #1
 800ac62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2224      	movs	r2, #36	; 0x24
 800ac6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f022 0201 	bic.w	r2, r2, #1
 800ac84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	683a      	ldr	r2, [r7, #0]
 800ac96:	430a      	orrs	r2, r1
 800ac98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 f812 	bl	800acc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2220      	movs	r2, #32
 800acac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
	...

0800acc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b089      	sub	sp, #36	; 0x24
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800accc:	4a2f      	ldr	r2, [pc, #188]	; (800ad8c <UARTEx_SetNbDataToProcess+0xc8>)
 800acce:	f107 0314 	add.w	r3, r7, #20
 800acd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800acd6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800acda:	4a2d      	ldr	r2, [pc, #180]	; (800ad90 <UARTEx_SetNbDataToProcess+0xcc>)
 800acdc:	f107 030c 	add.w	r3, r7, #12
 800ace0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ace4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acec:	2b00      	cmp	r3, #0
 800acee:	d108      	bne.n	800ad02 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ad00:	e03d      	b.n	800ad7e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ad02:	2310      	movs	r3, #16
 800ad04:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ad06:	2310      	movs	r3, #16
 800ad08:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	0e5b      	lsrs	r3, r3, #25
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	f003 0307 	and.w	r3, r3, #7
 800ad18:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	0f5b      	lsrs	r3, r3, #29
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	f003 0307 	and.w	r3, r3, #7
 800ad28:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ad2a:	7fbb      	ldrb	r3, [r7, #30]
 800ad2c:	7f3a      	ldrb	r2, [r7, #28]
 800ad2e:	f107 0120 	add.w	r1, r7, #32
 800ad32:	440a      	add	r2, r1
 800ad34:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ad38:	fb02 f303 	mul.w	r3, r2, r3
 800ad3c:	7f3a      	ldrb	r2, [r7, #28]
 800ad3e:	f107 0120 	add.w	r1, r7, #32
 800ad42:	440a      	add	r2, r1
 800ad44:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ad48:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ad54:	7ffb      	ldrb	r3, [r7, #31]
 800ad56:	7f7a      	ldrb	r2, [r7, #29]
 800ad58:	f107 0120 	add.w	r1, r7, #32
 800ad5c:	440a      	add	r2, r1
 800ad5e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ad62:	fb02 f303 	mul.w	r3, r2, r3
 800ad66:	7f7a      	ldrb	r2, [r7, #29]
 800ad68:	f107 0120 	add.w	r1, r7, #32
 800ad6c:	440a      	add	r2, r1
 800ad6e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ad72:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad76:	b29a      	uxth	r2, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ad7e:	bf00      	nop
 800ad80:	3724      	adds	r7, #36	; 0x24
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop
 800ad8c:	0800cb34 	.word	0x0800cb34
 800ad90:	0800cb3c 	.word	0x0800cb3c

0800ad94 <arm_fill_f32>:
 800ad94:	b410      	push	{r4}
 800ad96:	088c      	lsrs	r4, r1, #2
 800ad98:	d010      	beq.n	800adbc <arm_fill_f32+0x28>
 800ad9a:	f100 0310 	add.w	r3, r0, #16
 800ad9e:	4622      	mov	r2, r4
 800ada0:	3a01      	subs	r2, #1
 800ada2:	ed03 0a04 	vstr	s0, [r3, #-16]
 800ada6:	ed03 0a03 	vstr	s0, [r3, #-12]
 800adaa:	f103 0310 	add.w	r3, r3, #16
 800adae:	ed03 0a06 	vstr	s0, [r3, #-24]	; 0xffffffe8
 800adb2:	ed03 0a05 	vstr	s0, [r3, #-20]	; 0xffffffec
 800adb6:	d1f3      	bne.n	800ada0 <arm_fill_f32+0xc>
 800adb8:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800adbc:	f011 0103 	ands.w	r1, r1, #3
 800adc0:	d003      	beq.n	800adca <arm_fill_f32+0x36>
 800adc2:	3901      	subs	r1, #1
 800adc4:	eca0 0a01 	vstmia	r0!, {s0}
 800adc8:	d1fb      	bne.n	800adc2 <arm_fill_f32+0x2e>
 800adca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <arm_copy_q15>:
 800add0:	b4f0      	push	{r4, r5, r6, r7}
 800add2:	0897      	lsrs	r7, r2, #2
 800add4:	d015      	beq.n	800ae02 <arm_copy_q15+0x32>
 800add6:	f101 0408 	add.w	r4, r1, #8
 800adda:	f100 0308 	add.w	r3, r0, #8
 800adde:	463d      	mov	r5, r7
 800ade0:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800ade4:	3d01      	subs	r5, #1
 800ade6:	f103 0308 	add.w	r3, r3, #8
 800adea:	f104 0408 	add.w	r4, r4, #8
 800adee:	f844 6c10 	str.w	r6, [r4, #-16]
 800adf2:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800adf6:	f844 6c0c 	str.w	r6, [r4, #-12]
 800adfa:	d1f1      	bne.n	800ade0 <arm_copy_q15+0x10>
 800adfc:	00ff      	lsls	r7, r7, #3
 800adfe:	4439      	add	r1, r7
 800ae00:	4438      	add	r0, r7
 800ae02:	f012 0203 	ands.w	r2, r2, #3
 800ae06:	d006      	beq.n	800ae16 <arm_copy_q15+0x46>
 800ae08:	3902      	subs	r1, #2
 800ae0a:	f930 3b02 	ldrsh.w	r3, [r0], #2
 800ae0e:	3a01      	subs	r2, #1
 800ae10:	f821 3f02 	strh.w	r3, [r1, #2]!
 800ae14:	d1f9      	bne.n	800ae0a <arm_copy_q15+0x3a>
 800ae16:	bcf0      	pop	{r4, r5, r6, r7}
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop

0800ae1c <arm_copy_f32>:
 800ae1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae20:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800ae24:	d01e      	beq.n	800ae64 <arm_copy_f32+0x48>
 800ae26:	f100 0410 	add.w	r4, r0, #16
 800ae2a:	f101 0310 	add.w	r3, r1, #16
 800ae2e:	4645      	mov	r5, r8
 800ae30:	f854 cc10 	ldr.w	ip, [r4, #-16]
 800ae34:	3d01      	subs	r5, #1
 800ae36:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 800ae3a:	f103 0310 	add.w	r3, r3, #16
 800ae3e:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800ae42:	f104 0410 	add.w	r4, r4, #16
 800ae46:	f854 6c14 	ldr.w	r6, [r4, #-20]
 800ae4a:	f843 cc20 	str.w	ip, [r3, #-32]
 800ae4e:	f843 ec1c 	str.w	lr, [r3, #-28]
 800ae52:	f843 7c18 	str.w	r7, [r3, #-24]
 800ae56:	f843 6c14 	str.w	r6, [r3, #-20]
 800ae5a:	d1e9      	bne.n	800ae30 <arm_copy_f32+0x14>
 800ae5c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800ae60:	4440      	add	r0, r8
 800ae62:	4441      	add	r1, r8
 800ae64:	f012 0203 	ands.w	r2, r2, #3
 800ae68:	d005      	beq.n	800ae76 <arm_copy_f32+0x5a>
 800ae6a:	f850 3b04 	ldr.w	r3, [r0], #4
 800ae6e:	3a01      	subs	r2, #1
 800ae70:	f841 3b04 	str.w	r3, [r1], #4
 800ae74:	d1f9      	bne.n	800ae6a <arm_copy_f32+0x4e>
 800ae76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae7a:	bf00      	nop

0800ae7c <arm_std_f32>:
 800ae7c:	2901      	cmp	r1, #1
 800ae7e:	d065      	beq.n	800af4c <arm_std_f32+0xd0>
 800ae80:	eddf 5a39 	vldr	s11, [pc, #228]	; 800af68 <arm_std_f32+0xec>
 800ae84:	b530      	push	{r4, r5, lr}
 800ae86:	088d      	lsrs	r5, r1, #2
 800ae88:	b083      	sub	sp, #12
 800ae8a:	d062      	beq.n	800af52 <arm_std_f32+0xd6>
 800ae8c:	eef0 6a65 	vmov.f32	s13, s11
 800ae90:	f100 0310 	add.w	r3, r0, #16
 800ae94:	462c      	mov	r4, r5
 800ae96:	ed53 7a04 	vldr	s15, [r3, #-16]
 800ae9a:	3c01      	subs	r4, #1
 800ae9c:	ed13 7a03 	vldr	s14, [r3, #-12]
 800aea0:	f103 0310 	add.w	r3, r3, #16
 800aea4:	ee27 4aa7 	vmul.f32	s8, s15, s15
 800aea8:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 800aeac:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800aeb0:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800aeb4:	ee27 5a07 	vmul.f32	s10, s14, s14
 800aeb8:	ee74 5a25 	vadd.f32	s11, s8, s11
 800aebc:	ee36 7a87 	vadd.f32	s14, s13, s14
 800aec0:	ee64 6aa4 	vmul.f32	s13, s9, s9
 800aec4:	ee75 5a25 	vadd.f32	s11, s10, s11
 800aec8:	ee77 7a24 	vadd.f32	s15, s14, s9
 800aecc:	ee26 7a06 	vmul.f32	s14, s12, s12
 800aed0:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800aed4:	ee77 6a86 	vadd.f32	s13, s15, s12
 800aed8:	ee77 5a25 	vadd.f32	s11, s14, s11
 800aedc:	d1db      	bne.n	800ae96 <arm_std_f32+0x1a>
 800aede:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800aee2:	f011 0303 	ands.w	r3, r1, #3
 800aee6:	d009      	beq.n	800aefc <arm_std_f32+0x80>
 800aee8:	ecf0 7a01 	vldmia	r0!, {s15}
 800aeec:	3b01      	subs	r3, #1
 800aeee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800aef2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800aef6:	ee75 5a87 	vadd.f32	s11, s11, s14
 800aefa:	d1f5      	bne.n	800aee8 <arm_std_f32+0x6c>
 800aefc:	ee07 1a90 	vmov	s15, r1
 800af00:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800af04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af0c:	ee77 6ac6 	vsub.f32	s13, s15, s12
 800af10:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 800af14:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800af18:	ee27 7a07 	vmul.f32	s14, s14, s14
 800af1c:	ee27 7a00 	vmul.f32	s14, s14, s0
 800af20:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800af24:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800af28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af2c:	db0a      	blt.n	800af44 <arm_std_f32+0xc8>
 800af2e:	eeb1 0ac7 	vsqrt.f32	s0, s14
 800af32:	eeb4 0a40 	vcmp.f32	s0, s0
 800af36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af3a:	d10d      	bne.n	800af58 <arm_std_f32+0xdc>
 800af3c:	ed82 0a00 	vstr	s0, [r2]
 800af40:	b003      	add	sp, #12
 800af42:	bd30      	pop	{r4, r5, pc}
 800af44:	2300      	movs	r3, #0
 800af46:	6013      	str	r3, [r2, #0]
 800af48:	b003      	add	sp, #12
 800af4a:	bd30      	pop	{r4, r5, pc}
 800af4c:	2300      	movs	r3, #0
 800af4e:	6013      	str	r3, [r2, #0]
 800af50:	4770      	bx	lr
 800af52:	eef0 6a65 	vmov.f32	s13, s11
 800af56:	e7c4      	b.n	800aee2 <arm_std_f32+0x66>
 800af58:	eeb0 0a47 	vmov.f32	s0, s14
 800af5c:	9201      	str	r2, [sp, #4]
 800af5e:	f001 fc03 	bl	800c768 <sqrtf>
 800af62:	9a01      	ldr	r2, [sp, #4]
 800af64:	e7ea      	b.n	800af3c <arm_std_f32+0xc0>
 800af66:	bf00      	nop
 800af68:	00000000 	.word	0x00000000

0800af6c <arm_min_f32>:
 800af6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af70:	1e4d      	subs	r5, r1, #1
 800af72:	f100 0c04 	add.w	ip, r0, #4
 800af76:	edd0 7a00 	vldr	s15, [r0]
 800af7a:	ea5f 0995 	movs.w	r9, r5, lsr #2
 800af7e:	d056      	beq.n	800b02e <arm_min_f32+0xc2>
 800af80:	3014      	adds	r0, #20
 800af82:	46c8      	mov	r8, r9
 800af84:	2404      	movs	r4, #4
 800af86:	2600      	movs	r6, #0
 800af88:	ed10 6a04 	vldr	s12, [r0, #-16]
 800af8c:	f1a4 0a03 	sub.w	sl, r4, #3
 800af90:	ed50 6a03 	vldr	s13, [r0, #-12]
 800af94:	f1a4 0e02 	sub.w	lr, r4, #2
 800af98:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800af9c:	ed10 7a02 	vldr	s14, [r0, #-8]
 800afa0:	ed50 5a01 	vldr	s11, [r0, #-4]
 800afa4:	1e67      	subs	r7, r4, #1
 800afa6:	3010      	adds	r0, #16
 800afa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afac:	bf48      	it	mi
 800afae:	eef0 7a46 	vmovmi.f32	s15, s12
 800afb2:	bf48      	it	mi
 800afb4:	4656      	movmi	r6, sl
 800afb6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800afba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afbe:	bfc8      	it	gt
 800afc0:	eef0 7a66 	vmovgt.f32	s15, s13
 800afc4:	bfc8      	it	gt
 800afc6:	4676      	movgt	r6, lr
 800afc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afd0:	bfc8      	it	gt
 800afd2:	eef0 7a47 	vmovgt.f32	s15, s14
 800afd6:	bfc8      	it	gt
 800afd8:	463e      	movgt	r6, r7
 800afda:	eef4 7ae5 	vcmpe.f32	s15, s11
 800afde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afe2:	bfc8      	it	gt
 800afe4:	4626      	movgt	r6, r4
 800afe6:	bfc8      	it	gt
 800afe8:	eef0 7a65 	vmovgt.f32	s15, s11
 800afec:	f1b8 0801 	subs.w	r8, r8, #1
 800aff0:	f104 0404 	add.w	r4, r4, #4
 800aff4:	d1c8      	bne.n	800af88 <arm_min_f32+0x1c>
 800aff6:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 800affa:	f015 0003 	ands.w	r0, r5, #3
 800affe:	d018      	beq.n	800b032 <arm_min_f32+0xc6>
 800b000:	1a08      	subs	r0, r1, r0
 800b002:	ecbc 7a01 	vldmia	ip!, {s14}
 800b006:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b00e:	bf48      	it	mi
 800b010:	4606      	movmi	r6, r0
 800b012:	f100 0001 	add.w	r0, r0, #1
 800b016:	bf58      	it	pl
 800b018:	eeb0 7a67 	vmovpl.f32	s14, s15
 800b01c:	4281      	cmp	r1, r0
 800b01e:	eef0 7a47 	vmov.f32	s15, s14
 800b022:	d1ee      	bne.n	800b002 <arm_min_f32+0x96>
 800b024:	ed82 7a00 	vstr	s14, [r2]
 800b028:	601e      	str	r6, [r3, #0]
 800b02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b02e:	464e      	mov	r6, r9
 800b030:	e7e3      	b.n	800affa <arm_min_f32+0x8e>
 800b032:	eeb0 7a67 	vmov.f32	s14, s15
 800b036:	e7f5      	b.n	800b024 <arm_min_f32+0xb8>

0800b038 <arm_mean_f32>:
 800b038:	b430      	push	{r4, r5}
 800b03a:	088d      	lsrs	r5, r1, #2
 800b03c:	d02d      	beq.n	800b09a <arm_mean_f32+0x62>
 800b03e:	f100 0310 	add.w	r3, r0, #16
 800b042:	462c      	mov	r4, r5
 800b044:	eddf 7a16 	vldr	s15, [pc, #88]	; 800b0a0 <arm_mean_f32+0x68>
 800b048:	ed13 7a04 	vldr	s14, [r3, #-16]
 800b04c:	3c01      	subs	r4, #1
 800b04e:	ed13 6a03 	vldr	s12, [r3, #-12]
 800b052:	f103 0310 	add.w	r3, r3, #16
 800b056:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b05a:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 800b05e:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 800b062:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b06a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b06e:	d1eb      	bne.n	800b048 <arm_mean_f32+0x10>
 800b070:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800b074:	f011 0303 	ands.w	r3, r1, #3
 800b078:	d005      	beq.n	800b086 <arm_mean_f32+0x4e>
 800b07a:	ecb0 7a01 	vldmia	r0!, {s14}
 800b07e:	3b01      	subs	r3, #1
 800b080:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b084:	d1f9      	bne.n	800b07a <arm_mean_f32+0x42>
 800b086:	ee07 1a10 	vmov	s14, r1
 800b08a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b08e:	bc30      	pop	{r4, r5}
 800b090:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b094:	edc2 6a00 	vstr	s13, [r2]
 800b098:	4770      	bx	lr
 800b09a:	eddf 7a01 	vldr	s15, [pc, #4]	; 800b0a0 <arm_mean_f32+0x68>
 800b09e:	e7e9      	b.n	800b074 <arm_mean_f32+0x3c>
 800b0a0:	00000000 	.word	0x00000000

0800b0a4 <arm_max_q15>:
 800b0a4:	f101 3cff 	add.w	ip, r1, #4294967295
 800b0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ac:	ea5f 0a9c 	movs.w	sl, ip, lsr #2
 800b0b0:	f100 0902 	add.w	r9, r0, #2
 800b0b4:	f9b0 4000 	ldrsh.w	r4, [r0]
 800b0b8:	d049      	beq.n	800b14e <arm_max_q15+0xaa>
 800b0ba:	300a      	adds	r0, #10
 800b0bc:	46d0      	mov	r8, sl
 800b0be:	f04f 0e04 	mov.w	lr, #4
 800b0c2:	2700      	movs	r7, #0
 800b0c4:	f930 5c08 	ldrsh.w	r5, [r0, #-8]
 800b0c8:	f1ae 0603 	sub.w	r6, lr, #3
 800b0cc:	f930 bc06 	ldrsh.w	fp, [r0, #-6]
 800b0d0:	3008      	adds	r0, #8
 800b0d2:	42a5      	cmp	r5, r4
 800b0d4:	bfc8      	it	gt
 800b0d6:	4637      	movgt	r7, r6
 800b0d8:	42ac      	cmp	r4, r5
 800b0da:	f930 6c0c 	ldrsh.w	r6, [r0, #-12]
 800b0de:	bfb8      	it	lt
 800b0e0:	462c      	movlt	r4, r5
 800b0e2:	f1ae 0502 	sub.w	r5, lr, #2
 800b0e6:	455c      	cmp	r4, fp
 800b0e8:	bfb8      	it	lt
 800b0ea:	462f      	movlt	r7, r5
 800b0ec:	455c      	cmp	r4, fp
 800b0ee:	bfb8      	it	lt
 800b0f0:	465c      	movlt	r4, fp
 800b0f2:	f10e 3bff 	add.w	fp, lr, #4294967295
 800b0f6:	4625      	mov	r5, r4
 800b0f8:	f930 4c0a 	ldrsh.w	r4, [r0, #-10]
 800b0fc:	42b5      	cmp	r5, r6
 800b0fe:	bfb8      	it	lt
 800b100:	465f      	movlt	r7, fp
 800b102:	42b5      	cmp	r5, r6
 800b104:	bfb8      	it	lt
 800b106:	4635      	movlt	r5, r6
 800b108:	42a5      	cmp	r5, r4
 800b10a:	bfb8      	it	lt
 800b10c:	4677      	movlt	r7, lr
 800b10e:	42ac      	cmp	r4, r5
 800b110:	f10e 0e04 	add.w	lr, lr, #4
 800b114:	bfb8      	it	lt
 800b116:	462c      	movlt	r4, r5
 800b118:	f1b8 0801 	subs.w	r8, r8, #1
 800b11c:	d1d2      	bne.n	800b0c4 <arm_max_q15+0x20>
 800b11e:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
 800b122:	f01c 0c03 	ands.w	ip, ip, #3
 800b126:	d014      	beq.n	800b152 <arm_max_q15+0xae>
 800b128:	ebcc 0c01 	rsb	ip, ip, r1
 800b12c:	f939 0b02 	ldrsh.w	r0, [r9], #2
 800b130:	42a0      	cmp	r0, r4
 800b132:	bfc8      	it	gt
 800b134:	4667      	movgt	r7, ip
 800b136:	42a0      	cmp	r0, r4
 800b138:	f10c 0c01 	add.w	ip, ip, #1
 800b13c:	bfb8      	it	lt
 800b13e:	4620      	movlt	r0, r4
 800b140:	4561      	cmp	r1, ip
 800b142:	4604      	mov	r4, r0
 800b144:	d1f2      	bne.n	800b12c <arm_max_q15+0x88>
 800b146:	8010      	strh	r0, [r2, #0]
 800b148:	601f      	str	r7, [r3, #0]
 800b14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b14e:	4657      	mov	r7, sl
 800b150:	e7e7      	b.n	800b122 <arm_max_q15+0x7e>
 800b152:	4620      	mov	r0, r4
 800b154:	e7f7      	b.n	800b146 <arm_max_q15+0xa2>
 800b156:	bf00      	nop

0800b158 <arm_max_f32>:
 800b158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b15c:	1e4d      	subs	r5, r1, #1
 800b15e:	f100 0c04 	add.w	ip, r0, #4
 800b162:	edd0 7a00 	vldr	s15, [r0]
 800b166:	ea5f 0995 	movs.w	r9, r5, lsr #2
 800b16a:	d056      	beq.n	800b21a <arm_max_f32+0xc2>
 800b16c:	3014      	adds	r0, #20
 800b16e:	46c8      	mov	r8, r9
 800b170:	2404      	movs	r4, #4
 800b172:	2600      	movs	r6, #0
 800b174:	ed10 6a04 	vldr	s12, [r0, #-16]
 800b178:	f1a4 0a03 	sub.w	sl, r4, #3
 800b17c:	ed50 6a03 	vldr	s13, [r0, #-12]
 800b180:	f1a4 0e02 	sub.w	lr, r4, #2
 800b184:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800b188:	ed10 7a02 	vldr	s14, [r0, #-8]
 800b18c:	ed50 5a01 	vldr	s11, [r0, #-4]
 800b190:	1e67      	subs	r7, r4, #1
 800b192:	3010      	adds	r0, #16
 800b194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b198:	bfc8      	it	gt
 800b19a:	eef0 7a46 	vmovgt.f32	s15, s12
 800b19e:	bfc8      	it	gt
 800b1a0:	4656      	movgt	r6, sl
 800b1a2:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1aa:	bf48      	it	mi
 800b1ac:	eef0 7a66 	vmovmi.f32	s15, s13
 800b1b0:	bf48      	it	mi
 800b1b2:	4676      	movmi	r6, lr
 800b1b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1bc:	bf48      	it	mi
 800b1be:	eef0 7a47 	vmovmi.f32	s15, s14
 800b1c2:	bf48      	it	mi
 800b1c4:	463e      	movmi	r6, r7
 800b1c6:	eef4 7ae5 	vcmpe.f32	s15, s11
 800b1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ce:	bf48      	it	mi
 800b1d0:	4626      	movmi	r6, r4
 800b1d2:	bf48      	it	mi
 800b1d4:	eef0 7a65 	vmovmi.f32	s15, s11
 800b1d8:	f1b8 0801 	subs.w	r8, r8, #1
 800b1dc:	f104 0404 	add.w	r4, r4, #4
 800b1e0:	d1c8      	bne.n	800b174 <arm_max_f32+0x1c>
 800b1e2:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 800b1e6:	f015 0003 	ands.w	r0, r5, #3
 800b1ea:	d018      	beq.n	800b21e <arm_max_f32+0xc6>
 800b1ec:	1a08      	subs	r0, r1, r0
 800b1ee:	ecbc 7a01 	vldmia	ip!, {s14}
 800b1f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1fa:	bfc8      	it	gt
 800b1fc:	4606      	movgt	r6, r0
 800b1fe:	f100 0001 	add.w	r0, r0, #1
 800b202:	bfd8      	it	le
 800b204:	eeb0 7a67 	vmovle.f32	s14, s15
 800b208:	4281      	cmp	r1, r0
 800b20a:	eef0 7a47 	vmov.f32	s15, s14
 800b20e:	d1ee      	bne.n	800b1ee <arm_max_f32+0x96>
 800b210:	ed82 7a00 	vstr	s14, [r2]
 800b214:	601e      	str	r6, [r3, #0]
 800b216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b21a:	464e      	mov	r6, r9
 800b21c:	e7e3      	b.n	800b1e6 <arm_max_f32+0x8e>
 800b21e:	eeb0 7a67 	vmov.f32	s14, s15
 800b222:	e7f5      	b.n	800b210 <arm_max_f32+0xb8>

0800b224 <arm_cfft_radix8by2_f32>:
 800b224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b228:	4607      	mov	r7, r0
 800b22a:	4608      	mov	r0, r1
 800b22c:	ed2d 8b06 	vpush	{d8-d10}
 800b230:	f8b7 e000 	ldrh.w	lr, [r7]
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800b23a:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800b23e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800b242:	f000 80b0 	beq.w	800b3a6 <arm_cfft_radix8by2_f32+0x182>
 800b246:	008b      	lsls	r3, r1, #2
 800b248:	3210      	adds	r2, #16
 800b24a:	f100 0610 	add.w	r6, r0, #16
 800b24e:	f108 0510 	add.w	r5, r8, #16
 800b252:	3310      	adds	r3, #16
 800b254:	18c4      	adds	r4, r0, r3
 800b256:	4443      	add	r3, r8
 800b258:	ed55 6a04 	vldr	s13, [r5, #-16]
 800b25c:	f1be 0e01 	subs.w	lr, lr, #1
 800b260:	ed56 4a04 	vldr	s9, [r6, #-16]
 800b264:	f104 0410 	add.w	r4, r4, #16
 800b268:	ed15 7a03 	vldr	s14, [r5, #-12]
 800b26c:	f106 0610 	add.w	r6, r6, #16
 800b270:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800b274:	ed55 7a02 	vldr	s15, [r5, #-8]
 800b278:	ed55 2a01 	vldr	s5, [r5, #-4]
 800b27c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800b280:	ed53 0a04 	vldr	s1, [r3, #-16]
 800b284:	f102 0210 	add.w	r2, r2, #16
 800b288:	ed13 5a03 	vldr	s10, [r3, #-12]
 800b28c:	f105 0510 	add.w	r5, r5, #16
 800b290:	ed13 3a02 	vldr	s6, [r3, #-8]
 800b294:	f103 0310 	add.w	r3, r3, #16
 800b298:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 800b29c:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 800b2a0:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800b2a4:	ee33 8a83 	vadd.f32	s16, s7, s6
 800b2a8:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 800b2ac:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 800b2b0:	ee34 0a06 	vadd.f32	s0, s8, s12
 800b2b4:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 800b2b8:	ee76 aa87 	vadd.f32	s21, s13, s14
 800b2bc:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800b2c0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b2c4:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 800b2c8:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800b2cc:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 800b2d0:	ee71 8a05 	vadd.f32	s17, s2, s10
 800b2d4:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800b2d8:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 800b2dc:	ee72 9a22 	vadd.f32	s19, s4, s5
 800b2e0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800b2e4:	ee35 5a41 	vsub.f32	s10, s10, s2
 800b2e8:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 800b2ec:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 800b2f0:	ee36 6a44 	vsub.f32	s12, s12, s8
 800b2f4:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 800b2f8:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800b2fc:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 800b300:	ee72 7a62 	vsub.f32	s15, s4, s5
 800b304:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 800b308:	ee73 2a63 	vsub.f32	s5, s6, s7
 800b30c:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 800b310:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800b314:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800b318:	ee24 3a84 	vmul.f32	s6, s9, s8
 800b31c:	ee27 2a26 	vmul.f32	s4, s14, s13
 800b320:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800b324:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800b328:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b32c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800b330:	ee65 6a26 	vmul.f32	s13, s10, s13
 800b334:	ee25 5a04 	vmul.f32	s10, s10, s8
 800b338:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b33c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800b340:	ee33 4a02 	vadd.f32	s8, s6, s4
 800b344:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800b348:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 800b34c:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 800b350:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800b354:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 800b358:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800b35c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800b360:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800b364:	ee27 4a87 	vmul.f32	s8, s15, s14
 800b368:	ee61 5a87 	vmul.f32	s11, s3, s14
 800b36c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b370:	ee22 5a87 	vmul.f32	s10, s5, s14
 800b374:	ee26 7a07 	vmul.f32	s14, s12, s14
 800b378:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b37c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800b380:	ee74 4a84 	vadd.f32	s9, s9, s8
 800b384:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b388:	ee35 6a46 	vsub.f32	s12, s10, s12
 800b38c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b390:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 800b394:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 800b398:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 800b39c:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800b3a0:	f47f af5a 	bne.w	800b258 <arm_cfft_radix8by2_f32+0x34>
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	b28c      	uxth	r4, r1
 800b3a8:	2302      	movs	r3, #2
 800b3aa:	4621      	mov	r1, r4
 800b3ac:	f000 fd74 	bl	800be98 <arm_radix8_butterfly_f32>
 800b3b0:	4621      	mov	r1, r4
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	4640      	mov	r0, r8
 800b3b6:	2302      	movs	r3, #2
 800b3b8:	ecbd 8b06 	vpop	{d8-d10}
 800b3bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c0:	f000 bd6a 	b.w	800be98 <arm_radix8_butterfly_f32>

0800b3c4 <arm_cfft_radix8by4_f32>:
 800b3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c8:	ed2d 8b06 	vpush	{d8-d10}
 800b3cc:	8804      	ldrh	r4, [r0, #0]
 800b3ce:	b08f      	sub	sp, #60	; 0x3c
 800b3d0:	ed91 6a00 	vldr	s12, [r1]
 800b3d4:	460a      	mov	r2, r1
 800b3d6:	0864      	lsrs	r4, r4, #1
 800b3d8:	ed91 7a01 	vldr	s14, [r1, #4]
 800b3dc:	9101      	str	r1, [sp, #4]
 800b3de:	00a3      	lsls	r3, r4, #2
 800b3e0:	6841      	ldr	r1, [r0, #4]
 800b3e2:	0864      	lsrs	r4, r4, #1
 800b3e4:	900c      	str	r0, [sp, #48]	; 0x30
 800b3e6:	9205      	str	r2, [sp, #20]
 800b3e8:	f101 0610 	add.w	r6, r1, #16
 800b3ec:	4625      	mov	r5, r4
 800b3ee:	940b      	str	r4, [sp, #44]	; 0x2c
 800b3f0:	f101 0408 	add.w	r4, r1, #8
 800b3f4:	9602      	str	r6, [sp, #8]
 800b3f6:	9407      	str	r4, [sp, #28]
 800b3f8:	18d4      	adds	r4, r2, r3
 800b3fa:	1eaa      	subs	r2, r5, #2
 800b3fc:	f101 0518 	add.w	r5, r1, #24
 800b400:	18e0      	adds	r0, r4, r3
 800b402:	edd4 4a00 	vldr	s9, [r4]
 800b406:	ed94 4a01 	vldr	s8, [r4, #4]
 800b40a:	46a6      	mov	lr, r4
 800b40c:	edd0 6a00 	vldr	s13, [r0]
 800b410:	18c7      	adds	r7, r0, r3
 800b412:	edd0 7a01 	vldr	s15, [r0, #4]
 800b416:	46a0      	mov	r8, r4
 800b418:	ee76 5a26 	vadd.f32	s11, s12, s13
 800b41c:	ed97 5a00 	vldr	s10, [r7]
 800b420:	ee76 6a66 	vsub.f32	s13, s12, s13
 800b424:	4604      	mov	r4, r0
 800b426:	9506      	str	r5, [sp, #24]
 800b428:	4605      	mov	r5, r0
 800b42a:	ee75 2aa4 	vadd.f32	s5, s11, s9
 800b42e:	900a      	str	r0, [sp, #40]	; 0x28
 800b430:	9801      	ldr	r0, [sp, #4]
 800b432:	ee37 6a27 	vadd.f32	s12, s14, s15
 800b436:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b43a:	ed97 3a01 	vldr	s6, [r7, #4]
 800b43e:	ee72 2a85 	vadd.f32	s5, s5, s10
 800b442:	46bc      	mov	ip, r7
 800b444:	ee76 3a84 	vadd.f32	s7, s13, s8
 800b448:	9704      	str	r7, [sp, #16]
 800b44a:	ee36 7a44 	vsub.f32	s14, s12, s8
 800b44e:	f8cd e00c 	str.w	lr, [sp, #12]
 800b452:	ee12 9a90 	vmov	r9, s5
 800b456:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800b45a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800b45e:	1f3e      	subs	r6, r7, #4
 800b460:	f840 9b08 	str.w	r9, [r0], #8
 800b464:	ee37 4ae4 	vsub.f32	s8, s15, s9
 800b468:	edde 2a01 	vldr	s5, [lr, #4]
 800b46c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800b470:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800b474:	eddc 4a01 	vldr	s9, [ip, #4]
 800b478:	ee36 6a22 	vadd.f32	s12, s12, s5
 800b47c:	9001      	str	r0, [sp, #4]
 800b47e:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800b482:	9805      	ldr	r0, [sp, #20]
 800b484:	ee13 9a90 	vmov	r9, s7
 800b488:	ee37 7a43 	vsub.f32	s14, s14, s6
 800b48c:	ee36 6a24 	vadd.f32	s12, s12, s9
 800b490:	f1ae 0704 	sub.w	r7, lr, #4
 800b494:	ee74 4a05 	vadd.f32	s9, s8, s10
 800b498:	ee76 6a83 	vadd.f32	s13, s13, s6
 800b49c:	ed80 6a01 	vstr	s12, [r0, #4]
 800b4a0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800b4a4:	f848 9b08 	str.w	r9, [r8], #8
 800b4a8:	edce 4a01 	vstr	s9, [lr, #4]
 800b4ac:	ee15 ea90 	vmov	lr, s11
 800b4b0:	f844 eb08 	str.w	lr, [r4], #8
 800b4b4:	ee16 ea90 	vmov	lr, s13
 800b4b8:	9408      	str	r4, [sp, #32]
 800b4ba:	462c      	mov	r4, r5
 800b4bc:	ed85 7a01 	vstr	s14, [r5, #4]
 800b4c0:	9d04      	ldr	r5, [sp, #16]
 800b4c2:	f84c eb08 	str.w	lr, [ip], #8
 800b4c6:	edc5 7a01 	vstr	s15, [r5, #4]
 800b4ca:	0855      	lsrs	r5, r2, #1
 800b4cc:	9509      	str	r5, [sp, #36]	; 0x24
 800b4ce:	f000 8130 	beq.w	800b732 <arm_cfft_radix8by4_f32+0x36e>
 800b4d2:	9805      	ldr	r0, [sp, #20]
 800b4d4:	3b08      	subs	r3, #8
 800b4d6:	46ab      	mov	fp, r5
 800b4d8:	f1a4 020c 	sub.w	r2, r4, #12
 800b4dc:	f100 0510 	add.w	r5, r0, #16
 800b4e0:	f101 0920 	add.w	r9, r1, #32
 800b4e4:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800b4e8:	f8dd a008 	ldr.w	sl, [sp, #8]
 800b4ec:	4433      	add	r3, r6
 800b4ee:	3410      	adds	r4, #16
 800b4f0:	4660      	mov	r0, ip
 800b4f2:	4641      	mov	r1, r8
 800b4f4:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800b4f8:	ed54 6a02 	vldr	s13, [r4, #-8]
 800b4fc:	f1bb 0b01 	subs.w	fp, fp, #1
 800b500:	ed55 5a02 	vldr	s11, [r5, #-8]
 800b504:	f10a 0a08 	add.w	sl, sl, #8
 800b508:	edd1 7a00 	vldr	s15, [r1]
 800b50c:	f105 0508 	add.w	r5, r5, #8
 800b510:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800b514:	edd0 2a00 	vldr	s5, [r0]
 800b518:	ed14 7a01 	vldr	s14, [r4, #-4]
 800b51c:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800b520:	ed55 6a03 	vldr	s13, [r5, #-12]
 800b524:	f1a2 0208 	sub.w	r2, r2, #8
 800b528:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800b52c:	ed90 2a01 	vldr	s4, [r0, #4]
 800b530:	ee36 5a87 	vadd.f32	s10, s13, s14
 800b534:	ed91 6a01 	vldr	s12, [r1, #4]
 800b538:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b53c:	f109 0910 	add.w	r9, r9, #16
 800b540:	ee74 6aa2 	vadd.f32	s13, s9, s5
 800b544:	f104 0408 	add.w	r4, r4, #8
 800b548:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800b54c:	f10e 0e18 	add.w	lr, lr, #24
 800b550:	ee37 3a67 	vsub.f32	s6, s14, s15
 800b554:	f1a3 0308 	sub.w	r3, r3, #8
 800b558:	ed45 6a04 	vstr	s13, [r5, #-16]
 800b55c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b560:	edd1 6a01 	vldr	s13, [r1, #4]
 800b564:	ee75 1a86 	vadd.f32	s3, s11, s12
 800b568:	edd0 4a01 	vldr	s9, [r0, #4]
 800b56c:	ee33 3a22 	vadd.f32	s6, s6, s5
 800b570:	ee75 6a26 	vadd.f32	s13, s10, s13
 800b574:	ee35 5a46 	vsub.f32	s10, s10, s12
 800b578:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800b57c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b580:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800b584:	ee35 5a42 	vsub.f32	s10, s10, s4
 800b588:	ed45 6a03 	vstr	s13, [r5, #-12]
 800b58c:	ee36 2a02 	vadd.f32	s4, s12, s4
 800b590:	edd6 7a00 	vldr	s15, [r6]
 800b594:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800b598:	ed97 1a00 	vldr	s2, [r7]
 800b59c:	ee77 2a62 	vsub.f32	s5, s14, s5
 800b5a0:	ed92 8a04 	vldr	s16, [r2, #16]
 800b5a4:	ee71 8a27 	vadd.f32	s17, s2, s15
 800b5a8:	ed93 aa04 	vldr	s20, [r3, #16]
 800b5ac:	ed16 7a01 	vldr	s14, [r6, #-4]
 800b5b0:	ee71 7a67 	vsub.f32	s15, s2, s15
 800b5b4:	ed57 0a01 	vldr	s1, [r7, #-4]
 800b5b8:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800b5bc:	ee38 6a88 	vadd.f32	s12, s17, s16
 800b5c0:	edd3 9a03 	vldr	s19, [r3, #12]
 800b5c4:	ee30 0a87 	vadd.f32	s0, s1, s14
 800b5c8:	ed92 9a03 	vldr	s18, [r2, #12]
 800b5cc:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800b5d0:	ee36 6a0a 	vadd.f32	s12, s12, s20
 800b5d4:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800b5d8:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800b5dc:	ee16 ca10 	vmov	ip, s12
 800b5e0:	ee30 6a49 	vsub.f32	s12, s0, s18
 800b5e4:	ee77 4a01 	vadd.f32	s9, s14, s2
 800b5e8:	f847 c908 	str.w	ip, [r7], #-8
 800b5ec:	ee34 4a29 	vadd.f32	s8, s8, s19
 800b5f0:	edd2 8a03 	vldr	s17, [r2, #12]
 800b5f4:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800b5f8:	ed93 8a03 	vldr	s16, [r3, #12]
 800b5fc:	ee71 0a47 	vsub.f32	s1, s2, s14
 800b600:	ee30 0a28 	vadd.f32	s0, s0, s17
 800b604:	ee39 1a67 	vsub.f32	s2, s18, s15
 800b608:	ee36 6a69 	vsub.f32	s12, s12, s19
 800b60c:	ee30 0a08 	vadd.f32	s0, s0, s16
 800b610:	ee75 5aca 	vsub.f32	s11, s11, s20
 800b614:	ed87 0a01 	vstr	s0, [r7, #4]
 800b618:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800b61c:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800b620:	ee21 8a80 	vmul.f32	s16, s3, s0
 800b624:	ee23 7a26 	vmul.f32	s14, s6, s13
 800b628:	ee64 7a26 	vmul.f32	s15, s8, s13
 800b62c:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800b630:	ee24 4a00 	vmul.f32	s8, s8, s0
 800b634:	ee23 3a00 	vmul.f32	s6, s6, s0
 800b638:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800b63c:	ee24 0a80 	vmul.f32	s0, s9, s0
 800b640:	ee38 7a07 	vadd.f32	s14, s16, s14
 800b644:	ee76 6a84 	vadd.f32	s13, s13, s8
 800b648:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b64c:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b650:	ee17 ca10 	vmov	ip, s14
 800b654:	f841 cb08 	str.w	ip, [r1], #8
 800b658:	ed01 3a01 	vstr	s6, [r1, #-4]
 800b65c:	ed82 0a04 	vstr	s0, [r2, #16]
 800b660:	edc2 6a03 	vstr	s13, [r2, #12]
 800b664:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 800b668:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 800b66c:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800b670:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800b674:	ee65 4a27 	vmul.f32	s9, s10, s15
 800b678:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800b67c:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800b680:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b684:	ee25 5a26 	vmul.f32	s10, s10, s13
 800b688:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b68c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b690:	ee34 6a24 	vadd.f32	s12, s8, s9
 800b694:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800b698:	ee35 5a63 	vsub.f32	s10, s10, s7
 800b69c:	ee17 ca90 	vmov	ip, s15
 800b6a0:	ed04 6a04 	vstr	s12, [r4, #-16]
 800b6a4:	ed04 5a03 	vstr	s10, [r4, #-12]
 800b6a8:	f846 c908 	str.w	ip, [r6], #-8
 800b6ac:	edc6 6a01 	vstr	s13, [r6, #4]
 800b6b0:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 800b6b4:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 800b6b8:	ee62 5a27 	vmul.f32	s11, s4, s15
 800b6bc:	ee22 6a87 	vmul.f32	s12, s5, s14
 800b6c0:	ee22 2a07 	vmul.f32	s4, s4, s14
 800b6c4:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800b6c8:	ee61 6a07 	vmul.f32	s13, s2, s14
 800b6cc:	ee20 7a87 	vmul.f32	s14, s1, s14
 800b6d0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800b6d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 800b6d8:	ee35 6a86 	vadd.f32	s12, s11, s12
 800b6dc:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800b6e0:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800b6e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6e8:	ee16 ca10 	vmov	ip, s12
 800b6ec:	f840 cb08 	str.w	ip, [r0], #8
 800b6f0:	ed40 2a01 	vstr	s5, [r0, #-4]
 800b6f4:	edc3 0a04 	vstr	s1, [r3, #16]
 800b6f8:	edc3 7a03 	vstr	s15, [r3, #12]
 800b6fc:	f47f aefc 	bne.w	800b4f8 <arm_cfft_radix8by4_f32+0x134>
 800b700:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b702:	9802      	ldr	r0, [sp, #8]
 800b704:	00cb      	lsls	r3, r1, #3
 800b706:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800b70a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800b70e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800b712:	4498      	add	r8, r3
 800b714:	449c      	add	ip, r3
 800b716:	9102      	str	r1, [sp, #8]
 800b718:	9901      	ldr	r1, [sp, #4]
 800b71a:	4419      	add	r1, r3
 800b71c:	9101      	str	r1, [sp, #4]
 800b71e:	9907      	ldr	r1, [sp, #28]
 800b720:	4419      	add	r1, r3
 800b722:	9107      	str	r1, [sp, #28]
 800b724:	9908      	ldr	r1, [sp, #32]
 800b726:	4419      	add	r1, r3
 800b728:	9b06      	ldr	r3, [sp, #24]
 800b72a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b72e:	9108      	str	r1, [sp, #32]
 800b730:	9306      	str	r3, [sp, #24]
 800b732:	9a01      	ldr	r2, [sp, #4]
 800b734:	2304      	movs	r3, #4
 800b736:	9e08      	ldr	r6, [sp, #32]
 800b738:	edd2 7a00 	vldr	s15, [r2]
 800b73c:	ed96 7a00 	vldr	s14, [r6]
 800b740:	edd8 2a00 	vldr	s5, [r8]
 800b744:	ee77 5a87 	vadd.f32	s11, s15, s14
 800b748:	ed9c 3a00 	vldr	s6, [ip]
 800b74c:	ed92 6a01 	vldr	s12, [r2, #4]
 800b750:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b754:	edd6 6a01 	vldr	s13, [r6, #4]
 800b758:	ee75 4aa2 	vadd.f32	s9, s11, s5
 800b75c:	ed9c 2a01 	vldr	s4, [ip, #4]
 800b760:	ee36 5a26 	vadd.f32	s10, s12, s13
 800b764:	edd8 7a01 	vldr	s15, [r8, #4]
 800b768:	ee76 6a66 	vsub.f32	s13, s12, s13
 800b76c:	9d02      	ldr	r5, [sp, #8]
 800b76e:	ee34 6a83 	vadd.f32	s12, s9, s6
 800b772:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800b776:	ee37 4a27 	vadd.f32	s8, s14, s15
 800b77a:	9805      	ldr	r0, [sp, #20]
 800b77c:	ee76 4ae2 	vsub.f32	s9, s13, s5
 800b780:	4621      	mov	r1, r4
 800b782:	ed82 6a00 	vstr	s12, [r2]
 800b786:	ee35 6ae2 	vsub.f32	s12, s11, s5
 800b78a:	edd8 3a01 	vldr	s7, [r8, #4]
 800b78e:	ee75 5a67 	vsub.f32	s11, s10, s15
 800b792:	eddc 1a01 	vldr	s3, [ip, #4]
 800b796:	ee34 4a42 	vsub.f32	s8, s8, s4
 800b79a:	ee75 3a23 	vadd.f32	s7, s10, s7
 800b79e:	ee74 4a83 	vadd.f32	s9, s9, s6
 800b7a2:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800b7a6:	ee33 5aa1 	vadd.f32	s10, s7, s3
 800b7aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b7ae:	ee36 6a43 	vsub.f32	s12, s12, s6
 800b7b2:	ed82 5a01 	vstr	s10, [r2, #4]
 800b7b6:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800b7ba:	9a07      	ldr	r2, [sp, #28]
 800b7bc:	ee77 7a02 	vadd.f32	s15, s14, s4
 800b7c0:	ee36 7ac3 	vsub.f32	s14, s13, s6
 800b7c4:	edd2 2a00 	vldr	s5, [r2]
 800b7c8:	ed92 5a01 	vldr	s10, [r2, #4]
 800b7cc:	ee64 3a22 	vmul.f32	s7, s8, s5
 800b7d0:	ee24 4a05 	vmul.f32	s8, s8, s10
 800b7d4:	ee24 5a85 	vmul.f32	s10, s9, s10
 800b7d8:	ee64 4aa2 	vmul.f32	s9, s9, s5
 800b7dc:	ee33 5a85 	vadd.f32	s10, s7, s10
 800b7e0:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800b7e4:	ed88 5a00 	vstr	s10, [r8]
 800b7e8:	edc8 4a01 	vstr	s9, [r8, #4]
 800b7ec:	edd5 4a01 	vldr	s9, [r5, #4]
 800b7f0:	edd5 6a00 	vldr	s13, [r5]
 800b7f4:	9d06      	ldr	r5, [sp, #24]
 800b7f6:	ee26 5a26 	vmul.f32	s10, s12, s13
 800b7fa:	ee26 6a24 	vmul.f32	s12, s12, s9
 800b7fe:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800b802:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800b806:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800b80a:	ee75 5a25 	vadd.f32	s11, s10, s11
 800b80e:	ed86 6a01 	vstr	s12, [r6, #4]
 800b812:	edc6 5a00 	vstr	s11, [r6]
 800b816:	edd5 5a01 	vldr	s11, [r5, #4]
 800b81a:	edd5 6a00 	vldr	s13, [r5]
 800b81e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b820:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800b824:	ee67 6a26 	vmul.f32	s13, s14, s13
 800b828:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b82c:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b830:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b834:	ee36 7a07 	vadd.f32	s14, s12, s14
 800b838:	edcc 7a01 	vstr	s15, [ip, #4]
 800b83c:	ed8c 7a00 	vstr	s14, [ip]
 800b840:	6872      	ldr	r2, [r6, #4]
 800b842:	f000 fb29 	bl	800be98 <arm_radix8_butterfly_f32>
 800b846:	9803      	ldr	r0, [sp, #12]
 800b848:	4621      	mov	r1, r4
 800b84a:	6872      	ldr	r2, [r6, #4]
 800b84c:	2304      	movs	r3, #4
 800b84e:	f000 fb23 	bl	800be98 <arm_radix8_butterfly_f32>
 800b852:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b854:	4621      	mov	r1, r4
 800b856:	6872      	ldr	r2, [r6, #4]
 800b858:	2304      	movs	r3, #4
 800b85a:	f000 fb1d 	bl	800be98 <arm_radix8_butterfly_f32>
 800b85e:	4621      	mov	r1, r4
 800b860:	6872      	ldr	r2, [r6, #4]
 800b862:	2304      	movs	r3, #4
 800b864:	9804      	ldr	r0, [sp, #16]
 800b866:	b00f      	add	sp, #60	; 0x3c
 800b868:	ecbd 8b06 	vpop	{d8-d10}
 800b86c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b870:	f000 bb12 	b.w	800be98 <arm_radix8_butterfly_f32>

0800b874 <arm_cfft_f32>:
 800b874:	2a01      	cmp	r2, #1
 800b876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b87a:	4606      	mov	r6, r0
 800b87c:	4617      	mov	r7, r2
 800b87e:	460c      	mov	r4, r1
 800b880:	4698      	mov	r8, r3
 800b882:	8805      	ldrh	r5, [r0, #0]
 800b884:	d053      	beq.n	800b92e <arm_cfft_f32+0xba>
 800b886:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800b88a:	d04b      	beq.n	800b924 <arm_cfft_f32+0xb0>
 800b88c:	d916      	bls.n	800b8bc <arm_cfft_f32+0x48>
 800b88e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800b892:	d01a      	beq.n	800b8ca <arm_cfft_f32+0x56>
 800b894:	d95a      	bls.n	800b94c <arm_cfft_f32+0xd8>
 800b896:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800b89a:	d043      	beq.n	800b924 <arm_cfft_f32+0xb0>
 800b89c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800b8a0:	d105      	bne.n	800b8ae <arm_cfft_f32+0x3a>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	6872      	ldr	r2, [r6, #4]
 800b8a6:	4629      	mov	r1, r5
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	f000 faf5 	bl	800be98 <arm_radix8_butterfly_f32>
 800b8ae:	f1b8 0f00 	cmp.w	r8, #0
 800b8b2:	d111      	bne.n	800b8d8 <arm_cfft_f32+0x64>
 800b8b4:	2f01      	cmp	r7, #1
 800b8b6:	d016      	beq.n	800b8e6 <arm_cfft_f32+0x72>
 800b8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8bc:	2d20      	cmp	r5, #32
 800b8be:	d031      	beq.n	800b924 <arm_cfft_f32+0xb0>
 800b8c0:	d948      	bls.n	800b954 <arm_cfft_f32+0xe0>
 800b8c2:	2d40      	cmp	r5, #64	; 0x40
 800b8c4:	d0ed      	beq.n	800b8a2 <arm_cfft_f32+0x2e>
 800b8c6:	2d80      	cmp	r5, #128	; 0x80
 800b8c8:	d1f1      	bne.n	800b8ae <arm_cfft_f32+0x3a>
 800b8ca:	4621      	mov	r1, r4
 800b8cc:	4630      	mov	r0, r6
 800b8ce:	f7ff fca9 	bl	800b224 <arm_cfft_radix8by2_f32>
 800b8d2:	f1b8 0f00 	cmp.w	r8, #0
 800b8d6:	d0ed      	beq.n	800b8b4 <arm_cfft_f32+0x40>
 800b8d8:	68b2      	ldr	r2, [r6, #8]
 800b8da:	4620      	mov	r0, r4
 800b8dc:	89b1      	ldrh	r1, [r6, #12]
 800b8de:	f7f4 fcfb 	bl	80002d8 <arm_bitreversal_32>
 800b8e2:	2f01      	cmp	r7, #1
 800b8e4:	d1e8      	bne.n	800b8b8 <arm_cfft_f32+0x44>
 800b8e6:	ee07 5a90 	vmov	s15, r5
 800b8ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b8f6:	2d00      	cmp	r5, #0
 800b8f8:	d0de      	beq.n	800b8b8 <arm_cfft_f32+0x44>
 800b8fa:	f104 0108 	add.w	r1, r4, #8
 800b8fe:	2300      	movs	r3, #0
 800b900:	ed11 7a02 	vldr	s14, [r1, #-8]
 800b904:	3301      	adds	r3, #1
 800b906:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b90a:	3108      	adds	r1, #8
 800b90c:	429d      	cmp	r5, r3
 800b90e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b912:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b916:	ed01 7a04 	vstr	s14, [r1, #-16]
 800b91a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800b91e:	d1ef      	bne.n	800b900 <arm_cfft_f32+0x8c>
 800b920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b924:	4621      	mov	r1, r4
 800b926:	4630      	mov	r0, r6
 800b928:	f7ff fd4c 	bl	800b3c4 <arm_cfft_radix8by4_f32>
 800b92c:	e7bf      	b.n	800b8ae <arm_cfft_f32+0x3a>
 800b92e:	b1a5      	cbz	r5, 800b95a <arm_cfft_f32+0xe6>
 800b930:	f101 030c 	add.w	r3, r1, #12
 800b934:	2200      	movs	r2, #0
 800b936:	ed53 7a02 	vldr	s15, [r3, #-8]
 800b93a:	3201      	adds	r2, #1
 800b93c:	3308      	adds	r3, #8
 800b93e:	eef1 7a67 	vneg.f32	s15, s15
 800b942:	4295      	cmp	r5, r2
 800b944:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b948:	d1f5      	bne.n	800b936 <arm_cfft_f32+0xc2>
 800b94a:	e79c      	b.n	800b886 <arm_cfft_f32+0x12>
 800b94c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800b950:	d0a7      	beq.n	800b8a2 <arm_cfft_f32+0x2e>
 800b952:	e7ac      	b.n	800b8ae <arm_cfft_f32+0x3a>
 800b954:	2d10      	cmp	r5, #16
 800b956:	d0b8      	beq.n	800b8ca <arm_cfft_f32+0x56>
 800b958:	e7a9      	b.n	800b8ae <arm_cfft_f32+0x3a>
 800b95a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800b95e:	d896      	bhi.n	800b88e <arm_cfft_f32+0x1a>
 800b960:	e7ac      	b.n	800b8bc <arm_cfft_f32+0x48>
 800b962:	bf00      	nop

0800b964 <arm_cmplx_mult_cmplx_f32>:
 800b964:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b966:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800b96a:	d073      	beq.n	800ba54 <arm_cmplx_mult_cmplx_f32+0xf0>
 800b96c:	f100 0620 	add.w	r6, r0, #32
 800b970:	f101 0520 	add.w	r5, r1, #32
 800b974:	f102 0420 	add.w	r4, r2, #32
 800b978:	4677      	mov	r7, lr
 800b97a:	ed16 7a08 	vldr	s14, [r6, #-32]	; 0xffffffe0
 800b97e:	3f01      	subs	r7, #1
 800b980:	ed55 7a08 	vldr	s15, [r5, #-32]	; 0xffffffe0
 800b984:	f106 0620 	add.w	r6, r6, #32
 800b988:	ed56 5a0f 	vldr	s11, [r6, #-60]	; 0xffffffc4
 800b98c:	f105 0520 	add.w	r5, r5, #32
 800b990:	ed55 6a0f 	vldr	s13, [r5, #-60]	; 0xffffffc4
 800b994:	ee27 3a27 	vmul.f32	s6, s14, s15
 800b998:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800b99c:	ed16 6a0e 	vldr	s12, [r6, #-56]	; 0xffffffc8
 800b9a0:	ee25 4aa6 	vmul.f32	s8, s11, s13
 800b9a4:	ed55 7a0e 	vldr	s15, [r5, #-56]	; 0xffffffc8
 800b9a8:	ee67 6a26 	vmul.f32	s13, s14, s13
 800b9ac:	ed15 5a0d 	vldr	s10, [r5, #-52]	; 0xffffffcc
 800b9b0:	ed56 2a0d 	vldr	s5, [r6, #-52]	; 0xffffffcc
 800b9b4:	ee66 3a27 	vmul.f32	s7, s12, s15
 800b9b8:	ee66 5a05 	vmul.f32	s11, s12, s10
 800b9bc:	ed16 7a0c 	vldr	s14, [r6, #-48]	; 0xffffffd0
 800b9c0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b9c4:	ed15 6a0c 	vldr	s12, [r5, #-48]	; 0xffffffd0
 800b9c8:	ee25 5a22 	vmul.f32	s10, s10, s5
 800b9cc:	f104 0420 	add.w	r4, r4, #32
 800b9d0:	ee33 4a44 	vsub.f32	s8, s6, s8
 800b9d4:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800b9d8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800b9dc:	ed04 4a10 	vstr	s8, [r4, #-64]	; 0xffffffc0
 800b9e0:	ee67 4a06 	vmul.f32	s9, s14, s12
 800b9e4:	ed16 5a0b 	vldr	s10, [r6, #-44]	; 0xffffffd4
 800b9e8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b9ec:	ed44 6a0f 	vstr	s13, [r4, #-60]	; 0xffffffc4
 800b9f0:	ed55 6a0b 	vldr	s13, [r5, #-44]	; 0xffffffd4
 800b9f4:	ee66 5a05 	vmul.f32	s11, s12, s10
 800b9f8:	ed44 3a0e 	vstr	s7, [r4, #-56]	; 0xffffffc8
 800b9fc:	ee25 5a26 	vmul.f32	s10, s10, s13
 800ba00:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 800ba04:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ba08:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 800ba0c:	ed55 6a0a 	vldr	s13, [r5, #-40]	; 0xffffffd8
 800ba10:	ed16 6a09 	vldr	s12, [r6, #-36]	; 0xffffffdc
 800ba14:	ee34 5ac5 	vsub.f32	s10, s9, s10
 800ba18:	ed15 4a09 	vldr	s8, [r5, #-36]	; 0xffffffdc
 800ba1c:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800ba20:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ba24:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ba28:	ed04 5a0c 	vstr	s10, [r4, #-48]	; 0xffffffd0
 800ba2c:	ee26 6a04 	vmul.f32	s12, s12, s8
 800ba30:	ee37 7a25 	vadd.f32	s14, s14, s11
 800ba34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba38:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800ba3c:	ed04 7a0b 	vstr	s14, [r4, #-44]	; 0xffffffd4
 800ba40:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 800ba44:	ed04 6a0a 	vstr	s12, [r4, #-40]	; 0xffffffd8
 800ba48:	d197      	bne.n	800b97a <arm_cmplx_mult_cmplx_f32+0x16>
 800ba4a:	ea4f 144e 	mov.w	r4, lr, lsl #5
 800ba4e:	4420      	add	r0, r4
 800ba50:	4421      	add	r1, r4
 800ba52:	4422      	add	r2, r4
 800ba54:	f013 0303 	ands.w	r3, r3, #3
 800ba58:	d022      	beq.n	800baa0 <arm_cmplx_mult_cmplx_f32+0x13c>
 800ba5a:	3008      	adds	r0, #8
 800ba5c:	3108      	adds	r1, #8
 800ba5e:	3208      	adds	r2, #8
 800ba60:	ed50 7a02 	vldr	s15, [r0, #-8]
 800ba64:	3b01      	subs	r3, #1
 800ba66:	ed11 7a02 	vldr	s14, [r1, #-8]
 800ba6a:	f100 0008 	add.w	r0, r0, #8
 800ba6e:	ed50 6a03 	vldr	s13, [r0, #-12]
 800ba72:	f101 0108 	add.w	r1, r1, #8
 800ba76:	ed51 5a03 	vldr	s11, [r1, #-12]
 800ba7a:	ee27 6a87 	vmul.f32	s12, s15, s14
 800ba7e:	ee26 7a87 	vmul.f32	s14, s13, s14
 800ba82:	f102 0208 	add.w	r2, r2, #8
 800ba86:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ba8a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ba8e:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ba92:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba96:	ed42 6a04 	vstr	s13, [r2, #-16]
 800ba9a:	ed42 7a03 	vstr	s15, [r2, #-12]
 800ba9e:	d1df      	bne.n	800ba60 <arm_cmplx_mult_cmplx_f32+0xfc>
 800baa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baa2:	bf00      	nop

0800baa4 <arm_cmplx_mag_f32>:
 800baa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baa8:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800baac:	b084      	sub	sp, #16
 800baae:	d07f      	beq.n	800bbb0 <arm_cmplx_mag_f32+0x10c>
 800bab0:	f100 0420 	add.w	r4, r0, #32
 800bab4:	f101 0510 	add.w	r5, r1, #16
 800bab8:	4646      	mov	r6, r8
 800baba:	2700      	movs	r7, #0
 800babc:	e05a      	b.n	800bb74 <arm_cmplx_mag_f32+0xd0>
 800babe:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800bac2:	eeb4 0a40 	vcmp.f32	s0, s0
 800bac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baca:	f040 80a4 	bne.w	800bc16 <arm_cmplx_mag_f32+0x172>
 800bace:	ed05 0a04 	vstr	s0, [r5, #-16]
 800bad2:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800bad6:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800bada:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bade:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bae2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bae6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800baea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baee:	f2c0 808f 	blt.w	800bc10 <arm_cmplx_mag_f32+0x16c>
 800baf2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800baf6:	eeb4 0a40 	vcmp.f32	s0, s0
 800bafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bafe:	f040 80af 	bne.w	800bc60 <arm_cmplx_mag_f32+0x1bc>
 800bb02:	ed05 0a03 	vstr	s0, [r5, #-12]
 800bb06:	ed54 7a04 	vldr	s15, [r4, #-16]
 800bb0a:	ed14 0a03 	vldr	s0, [r4, #-12]
 800bb0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bb12:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bb16:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bb1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bb1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb22:	db72      	blt.n	800bc0a <arm_cmplx_mag_f32+0x166>
 800bb24:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800bb28:	eeb4 0a40 	vcmp.f32	s0, s0
 800bb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb30:	f040 808c 	bne.w	800bc4c <arm_cmplx_mag_f32+0x1a8>
 800bb34:	ed05 0a02 	vstr	s0, [r5, #-8]
 800bb38:	ed54 7a02 	vldr	s15, [r4, #-8]
 800bb3c:	ed14 0a01 	vldr	s0, [r4, #-4]
 800bb40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bb44:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bb48:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bb4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb54:	db20      	blt.n	800bb98 <arm_cmplx_mag_f32+0xf4>
 800bb56:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800bb5a:	eeb4 0a40 	vcmp.f32	s0, s0
 800bb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb62:	d169      	bne.n	800bc38 <arm_cmplx_mag_f32+0x194>
 800bb64:	3e01      	subs	r6, #1
 800bb66:	ed05 0a01 	vstr	s0, [r5, #-4]
 800bb6a:	f104 0420 	add.w	r4, r4, #32
 800bb6e:	f105 0510 	add.w	r5, r5, #16
 800bb72:	d019      	beq.n	800bba8 <arm_cmplx_mag_f32+0x104>
 800bb74:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 800bb78:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 800bb7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bb80:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bb84:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bb88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bb8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb90:	da95      	bge.n	800babe <arm_cmplx_mag_f32+0x1a>
 800bb92:	f845 7c10 	str.w	r7, [r5, #-16]
 800bb96:	e79c      	b.n	800bad2 <arm_cmplx_mag_f32+0x2e>
 800bb98:	3e01      	subs	r6, #1
 800bb9a:	f845 7c04 	str.w	r7, [r5, #-4]
 800bb9e:	f104 0420 	add.w	r4, r4, #32
 800bba2:	f105 0510 	add.w	r5, r5, #16
 800bba6:	d1e5      	bne.n	800bb74 <arm_cmplx_mag_f32+0xd0>
 800bba8:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800bbac:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800bbb0:	f012 0503 	ands.w	r5, r2, #3
 800bbb4:	d026      	beq.n	800bc04 <arm_cmplx_mag_f32+0x160>
 800bbb6:	f100 0408 	add.w	r4, r0, #8
 800bbba:	2600      	movs	r6, #0
 800bbbc:	e00c      	b.n	800bbd8 <arm_cmplx_mag_f32+0x134>
 800bbbe:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800bbc2:	eeb4 0a40 	vcmp.f32	s0, s0
 800bbc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbca:	d12e      	bne.n	800bc2a <arm_cmplx_mag_f32+0x186>
 800bbcc:	3d01      	subs	r5, #1
 800bbce:	ed01 0a01 	vstr	s0, [r1, #-4]
 800bbd2:	f104 0408 	add.w	r4, r4, #8
 800bbd6:	d015      	beq.n	800bc04 <arm_cmplx_mag_f32+0x160>
 800bbd8:	ed54 7a02 	vldr	s15, [r4, #-8]
 800bbdc:	3104      	adds	r1, #4
 800bbde:	ed14 0a01 	vldr	s0, [r4, #-4]
 800bbe2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bbe6:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bbea:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bbee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbf6:	dae2      	bge.n	800bbbe <arm_cmplx_mag_f32+0x11a>
 800bbf8:	3d01      	subs	r5, #1
 800bbfa:	f841 6c04 	str.w	r6, [r1, #-4]
 800bbfe:	f104 0408 	add.w	r4, r4, #8
 800bc02:	d1e9      	bne.n	800bbd8 <arm_cmplx_mag_f32+0x134>
 800bc04:	b004      	add	sp, #16
 800bc06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc0a:	f845 7c08 	str.w	r7, [r5, #-8]
 800bc0e:	e793      	b.n	800bb38 <arm_cmplx_mag_f32+0x94>
 800bc10:	f845 7c0c 	str.w	r7, [r5, #-12]
 800bc14:	e777      	b.n	800bb06 <arm_cmplx_mag_f32+0x62>
 800bc16:	eeb0 0a67 	vmov.f32	s0, s15
 800bc1a:	9203      	str	r2, [sp, #12]
 800bc1c:	9102      	str	r1, [sp, #8]
 800bc1e:	9001      	str	r0, [sp, #4]
 800bc20:	f000 fda2 	bl	800c768 <sqrtf>
 800bc24:	a801      	add	r0, sp, #4
 800bc26:	c807      	ldmia	r0, {r0, r1, r2}
 800bc28:	e751      	b.n	800bace <arm_cmplx_mag_f32+0x2a>
 800bc2a:	eeb0 0a67 	vmov.f32	s0, s15
 800bc2e:	9101      	str	r1, [sp, #4]
 800bc30:	f000 fd9a 	bl	800c768 <sqrtf>
 800bc34:	9901      	ldr	r1, [sp, #4]
 800bc36:	e7c9      	b.n	800bbcc <arm_cmplx_mag_f32+0x128>
 800bc38:	eeb0 0a67 	vmov.f32	s0, s15
 800bc3c:	9203      	str	r2, [sp, #12]
 800bc3e:	9102      	str	r1, [sp, #8]
 800bc40:	9001      	str	r0, [sp, #4]
 800bc42:	f000 fd91 	bl	800c768 <sqrtf>
 800bc46:	a801      	add	r0, sp, #4
 800bc48:	c807      	ldmia	r0, {r0, r1, r2}
 800bc4a:	e78b      	b.n	800bb64 <arm_cmplx_mag_f32+0xc0>
 800bc4c:	eeb0 0a67 	vmov.f32	s0, s15
 800bc50:	9203      	str	r2, [sp, #12]
 800bc52:	9102      	str	r1, [sp, #8]
 800bc54:	9001      	str	r0, [sp, #4]
 800bc56:	f000 fd87 	bl	800c768 <sqrtf>
 800bc5a:	a801      	add	r0, sp, #4
 800bc5c:	c807      	ldmia	r0, {r0, r1, r2}
 800bc5e:	e769      	b.n	800bb34 <arm_cmplx_mag_f32+0x90>
 800bc60:	eeb0 0a67 	vmov.f32	s0, s15
 800bc64:	9203      	str	r2, [sp, #12]
 800bc66:	9102      	str	r1, [sp, #8]
 800bc68:	9001      	str	r0, [sp, #4]
 800bc6a:	f000 fd7d 	bl	800c768 <sqrtf>
 800bc6e:	a801      	add	r0, sp, #4
 800bc70:	c807      	ldmia	r0, {r0, r1, r2}
 800bc72:	e746      	b.n	800bb02 <arm_cmplx_mag_f32+0x5e>

0800bc74 <arm_cmplx_conj_f32>:
 800bc74:	b4f0      	push	{r4, r5, r6, r7}
 800bc76:	0897      	lsrs	r7, r2, #2
 800bc78:	d035      	beq.n	800bce6 <arm_cmplx_conj_f32+0x72>
 800bc7a:	f100 0420 	add.w	r4, r0, #32
 800bc7e:	f101 0320 	add.w	r3, r1, #32
 800bc82:	463d      	mov	r5, r7
 800bc84:	f854 6c20 	ldr.w	r6, [r4, #-32]
 800bc88:	3d01      	subs	r5, #1
 800bc8a:	f104 0420 	add.w	r4, r4, #32
 800bc8e:	f103 0320 	add.w	r3, r3, #32
 800bc92:	f843 6c40 	str.w	r6, [r3, #-64]
 800bc96:	f854 6c38 	ldr.w	r6, [r4, #-56]
 800bc9a:	f843 6c38 	str.w	r6, [r3, #-56]
 800bc9e:	f854 6c30 	ldr.w	r6, [r4, #-48]
 800bca2:	f843 6c30 	str.w	r6, [r3, #-48]
 800bca6:	f854 6c28 	ldr.w	r6, [r4, #-40]
 800bcaa:	f843 6c28 	str.w	r6, [r3, #-40]
 800bcae:	ed14 6a0f 	vldr	s12, [r4, #-60]	; 0xffffffc4
 800bcb2:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 800bcb6:	ed14 7a0b 	vldr	s14, [r4, #-44]	; 0xffffffd4
 800bcba:	eeb1 6a46 	vneg.f32	s12, s12
 800bcbe:	ed54 7a09 	vldr	s15, [r4, #-36]	; 0xffffffdc
 800bcc2:	eef1 6a66 	vneg.f32	s13, s13
 800bcc6:	eeb1 7a47 	vneg.f32	s14, s14
 800bcca:	eef1 7a67 	vneg.f32	s15, s15
 800bcce:	ed03 6a0f 	vstr	s12, [r3, #-60]	; 0xffffffc4
 800bcd2:	ed43 6a0d 	vstr	s13, [r3, #-52]	; 0xffffffcc
 800bcd6:	ed03 7a0b 	vstr	s14, [r3, #-44]	; 0xffffffd4
 800bcda:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
 800bcde:	d1d1      	bne.n	800bc84 <arm_cmplx_conj_f32+0x10>
 800bce0:	017f      	lsls	r7, r7, #5
 800bce2:	4438      	add	r0, r7
 800bce4:	4439      	add	r1, r7
 800bce6:	f012 0203 	ands.w	r2, r2, #3
 800bcea:	d011      	beq.n	800bd10 <arm_cmplx_conj_f32+0x9c>
 800bcec:	3108      	adds	r1, #8
 800bcee:	3008      	adds	r0, #8
 800bcf0:	f850 3c08 	ldr.w	r3, [r0, #-8]
 800bcf4:	3a01      	subs	r2, #1
 800bcf6:	f100 0008 	add.w	r0, r0, #8
 800bcfa:	f101 0108 	add.w	r1, r1, #8
 800bcfe:	f841 3c10 	str.w	r3, [r1, #-16]
 800bd02:	ed50 7a03 	vldr	s15, [r0, #-12]
 800bd06:	eef1 7a67 	vneg.f32	s15, s15
 800bd0a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800bd0e:	d1ef      	bne.n	800bcf0 <arm_cmplx_conj_f32+0x7c>
 800bd10:	bcf0      	pop	{r4, r5, r6, r7}
 800bd12:	4770      	bx	lr

0800bd14 <arm_sub_f32>:
 800bd14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd16:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800bd1a:	d033      	beq.n	800bd84 <arm_sub_f32+0x70>
 800bd1c:	f100 0610 	add.w	r6, r0, #16
 800bd20:	f101 0510 	add.w	r5, r1, #16
 800bd24:	f102 0410 	add.w	r4, r2, #16
 800bd28:	4677      	mov	r7, lr
 800bd2a:	ed16 7a03 	vldr	s14, [r6, #-12]
 800bd2e:	3f01      	subs	r7, #1
 800bd30:	ed56 7a02 	vldr	s15, [r6, #-8]
 800bd34:	f105 0510 	add.w	r5, r5, #16
 800bd38:	ed15 6a07 	vldr	s12, [r5, #-28]	; 0xffffffe4
 800bd3c:	f106 0610 	add.w	r6, r6, #16
 800bd40:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 800bd44:	f104 0410 	add.w	r4, r4, #16
 800bd48:	ed15 5a05 	vldr	s10, [r5, #-20]	; 0xffffffec
 800bd4c:	ee37 6a46 	vsub.f32	s12, s14, s12
 800bd50:	ed55 5a08 	vldr	s11, [r5, #-32]	; 0xffffffe0
 800bd54:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800bd58:	ed16 7a05 	vldr	s14, [r6, #-20]	; 0xffffffec
 800bd5c:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 800bd60:	ee37 7a45 	vsub.f32	s14, s14, s10
 800bd64:	ed04 6a07 	vstr	s12, [r4, #-28]	; 0xffffffe4
 800bd68:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800bd6c:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 800bd70:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 800bd74:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 800bd78:	d1d7      	bne.n	800bd2a <arm_sub_f32+0x16>
 800bd7a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800bd7e:	4420      	add	r0, r4
 800bd80:	4421      	add	r1, r4
 800bd82:	4422      	add	r2, r4
 800bd84:	f013 0303 	ands.w	r3, r3, #3
 800bd88:	d009      	beq.n	800bd9e <arm_sub_f32+0x8a>
 800bd8a:	ecf0 7a01 	vldmia	r0!, {s15}
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	ecb1 7a01 	vldmia	r1!, {s14}
 800bd94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd98:	ece2 7a01 	vstmia	r2!, {s15}
 800bd9c:	d1f5      	bne.n	800bd8a <arm_sub_f32+0x76>
 800bd9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bda0 <arm_mult_f32>:
 800bda0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bda2:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800bda6:	d033      	beq.n	800be10 <arm_mult_f32+0x70>
 800bda8:	f100 0610 	add.w	r6, r0, #16
 800bdac:	f101 0510 	add.w	r5, r1, #16
 800bdb0:	f102 0410 	add.w	r4, r2, #16
 800bdb4:	4677      	mov	r7, lr
 800bdb6:	ed16 7a04 	vldr	s14, [r6, #-16]
 800bdba:	3f01      	subs	r7, #1
 800bdbc:	ed15 6a04 	vldr	s12, [r5, #-16]
 800bdc0:	f106 0610 	add.w	r6, r6, #16
 800bdc4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800bdc8:	f105 0510 	add.w	r5, r5, #16
 800bdcc:	ee27 6a06 	vmul.f32	s12, s14, s12
 800bdd0:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 800bdd4:	ed16 7a07 	vldr	s14, [r6, #-28]	; 0xffffffe4
 800bdd8:	f104 0410 	add.w	r4, r4, #16
 800bddc:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 800bde0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800bde4:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800bde8:	ed04 6a08 	vstr	s12, [r4, #-32]	; 0xffffffe0
 800bdec:	ee27 7a25 	vmul.f32	s14, s14, s11
 800bdf0:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800bdf4:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 800bdf8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bdfc:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 800be00:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800be04:	d1d7      	bne.n	800bdb6 <arm_mult_f32+0x16>
 800be06:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800be0a:	4420      	add	r0, r4
 800be0c:	4421      	add	r1, r4
 800be0e:	4422      	add	r2, r4
 800be10:	f013 0303 	ands.w	r3, r3, #3
 800be14:	d009      	beq.n	800be2a <arm_mult_f32+0x8a>
 800be16:	ecf0 7a01 	vldmia	r0!, {s15}
 800be1a:	3b01      	subs	r3, #1
 800be1c:	ecb1 7a01 	vldmia	r1!, {s14}
 800be20:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be24:	ece2 7a01 	vstmia	r2!, {s15}
 800be28:	d1f5      	bne.n	800be16 <arm_mult_f32+0x76>
 800be2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be2c <arm_abs_f32>:
 800be2c:	b470      	push	{r4, r5, r6}
 800be2e:	0896      	lsrs	r6, r2, #2
 800be30:	d025      	beq.n	800be7e <arm_abs_f32+0x52>
 800be32:	f100 0410 	add.w	r4, r0, #16
 800be36:	f101 0310 	add.w	r3, r1, #16
 800be3a:	4635      	mov	r5, r6
 800be3c:	ed14 6a04 	vldr	s12, [r4, #-16]
 800be40:	3d01      	subs	r5, #1
 800be42:	ed54 6a03 	vldr	s13, [r4, #-12]
 800be46:	f103 0310 	add.w	r3, r3, #16
 800be4a:	ed14 7a02 	vldr	s14, [r4, #-8]
 800be4e:	eeb0 6ac6 	vabs.f32	s12, s12
 800be52:	ed54 7a01 	vldr	s15, [r4, #-4]
 800be56:	eef0 6ae6 	vabs.f32	s13, s13
 800be5a:	eeb0 7ac7 	vabs.f32	s14, s14
 800be5e:	f104 0410 	add.w	r4, r4, #16
 800be62:	eef0 7ae7 	vabs.f32	s15, s15
 800be66:	ed03 6a08 	vstr	s12, [r3, #-32]	; 0xffffffe0
 800be6a:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 800be6e:	ed03 7a06 	vstr	s14, [r3, #-24]	; 0xffffffe8
 800be72:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800be76:	d1e1      	bne.n	800be3c <arm_abs_f32+0x10>
 800be78:	0136      	lsls	r6, r6, #4
 800be7a:	4430      	add	r0, r6
 800be7c:	4431      	add	r1, r6
 800be7e:	f012 0203 	ands.w	r2, r2, #3
 800be82:	d007      	beq.n	800be94 <arm_abs_f32+0x68>
 800be84:	ecf0 7a01 	vldmia	r0!, {s15}
 800be88:	3a01      	subs	r2, #1
 800be8a:	eef0 7ae7 	vabs.f32	s15, s15
 800be8e:	ece1 7a01 	vstmia	r1!, {s15}
 800be92:	d1f7      	bne.n	800be84 <arm_abs_f32+0x58>
 800be94:	bc70      	pop	{r4, r5, r6}
 800be96:	4770      	bx	lr

0800be98 <arm_radix8_butterfly_f32>:
 800be98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be9c:	469e      	mov	lr, r3
 800be9e:	4603      	mov	r3, r0
 800bea0:	468a      	mov	sl, r1
 800bea2:	468b      	mov	fp, r1
 800bea4:	3304      	adds	r3, #4
 800bea6:	ed2d 8b10 	vpush	{d8-d15}
 800beaa:	469c      	mov	ip, r3
 800beac:	b09d      	sub	sp, #116	; 0x74
 800beae:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 800c1bc <arm_radix8_butterfly_f32+0x324>
 800beb2:	9019      	str	r0, [sp, #100]	; 0x64
 800beb4:	921a      	str	r2, [sp, #104]	; 0x68
 800beb6:	931b      	str	r3, [sp, #108]	; 0x6c
 800beb8:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800bebc:	f04f 0800 	mov.w	r8, #0
 800bec0:	461a      	mov	r2, r3
 800bec2:	9311      	str	r3, [sp, #68]	; 0x44
 800bec4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bec8:	4611      	mov	r1, r2
 800beca:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800bece:	9300      	str	r3, [sp, #0]
 800bed0:	0053      	lsls	r3, r2, #1
 800bed2:	18d5      	adds	r5, r2, r3
 800bed4:	9301      	str	r3, [sp, #4]
 800bed6:	0113      	lsls	r3, r2, #4
 800bed8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800beda:	194c      	adds	r4, r1, r5
 800bedc:	eb02 0609 	add.w	r6, r2, r9
 800bee0:	9302      	str	r3, [sp, #8]
 800bee2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800bee6:	4613      	mov	r3, r2
 800bee8:	190a      	adds	r2, r1, r4
 800beea:	eb06 0709 	add.w	r7, r6, r9
 800beee:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bef2:	1888      	adds	r0, r1, r2
 800bef4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800bef8:	4401      	add	r1, r0
 800befa:	3204      	adds	r2, #4
 800befc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800bf00:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800bf04:	9b00      	ldr	r3, [sp, #0]
 800bf06:	3104      	adds	r1, #4
 800bf08:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800bf0c:	44d8      	add	r8, fp
 800bf0e:	ed90 7a00 	vldr	s14, [r0]
 800bf12:	ed94 5a00 	vldr	s10, [r4]
 800bf16:	45c2      	cmp	sl, r8
 800bf18:	edd7 3a00 	vldr	s7, [r7]
 800bf1c:	ed96 6a00 	vldr	s12, [r6]
 800bf20:	ee37 1a85 	vadd.f32	s2, s15, s10
 800bf24:	ed52 6a01 	vldr	s13, [r2, #-4]
 800bf28:	ee73 4a87 	vadd.f32	s9, s7, s14
 800bf2c:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800bf30:	edd5 7a00 	vldr	s15, [r5]
 800bf34:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800bf38:	ed11 7a01 	vldr	s14, [r1, #-4]
 800bf3c:	ee36 2a26 	vadd.f32	s4, s12, s13
 800bf40:	ee37 4a87 	vadd.f32	s8, s15, s14
 800bf44:	ee76 6a66 	vsub.f32	s13, s12, s13
 800bf48:	ee71 5a24 	vadd.f32	s11, s2, s9
 800bf4c:	ee32 6a04 	vadd.f32	s12, s4, s8
 800bf50:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800bf54:	ee31 1a64 	vsub.f32	s2, s2, s9
 800bf58:	ee75 4a86 	vadd.f32	s9, s11, s12
 800bf5c:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800bf60:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800bf64:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800bf68:	ee32 2a44 	vsub.f32	s4, s4, s8
 800bf6c:	ee67 7a89 	vmul.f32	s15, s15, s18
 800bf70:	ed94 0a01 	vldr	s0, [r4, #4]
 800bf74:	edc4 5a00 	vstr	s11, [r4]
 800bf78:	ee36 7a87 	vadd.f32	s14, s13, s14
 800bf7c:	edd6 5a01 	vldr	s11, [r6, #4]
 800bf80:	edd5 2a01 	vldr	s5, [r5, #4]
 800bf84:	ee75 1a27 	vadd.f32	s3, s10, s15
 800bf88:	ed92 4a00 	vldr	s8, [r2]
 800bf8c:	ee75 7a67 	vsub.f32	s15, s10, s15
 800bf90:	edd1 4a00 	vldr	s9, [r1]
 800bf94:	ee27 7a09 	vmul.f32	s14, s14, s18
 800bf98:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800bf9c:	ed9c 6a00 	vldr	s12, [ip]
 800bfa0:	ee72 6ae4 	vsub.f32	s13, s5, s9
 800bfa4:	edd0 0a01 	vldr	s1, [r0, #4]
 800bfa8:	ed97 5a01 	vldr	s10, [r7, #4]
 800bfac:	ee35 4a84 	vadd.f32	s8, s11, s8
 800bfb0:	ee72 4aa4 	vadd.f32	s9, s5, s9
 800bfb4:	ee73 5a26 	vadd.f32	s11, s6, s13
 800bfb8:	ee76 2a00 	vadd.f32	s5, s12, s0
 800bfbc:	ee73 6a66 	vsub.f32	s13, s6, s13
 800bfc0:	ee36 6a40 	vsub.f32	s12, s12, s0
 800bfc4:	ee35 0a20 	vadd.f32	s0, s10, s1
 800bfc8:	ee65 5a89 	vmul.f32	s11, s11, s18
 800bfcc:	ee35 5a60 	vsub.f32	s10, s10, s1
 800bfd0:	ee32 3a80 	vadd.f32	s6, s5, s0
 800bfd4:	ee74 0a24 	vadd.f32	s1, s8, s9
 800bfd8:	ee66 6a89 	vmul.f32	s13, s13, s18
 800bfdc:	ee74 4a64 	vsub.f32	s9, s8, s9
 800bfe0:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800bfe4:	ee75 2a25 	vadd.f32	s5, s10, s11
 800bfe8:	ee33 0a20 	vadd.f32	s0, s6, s1
 800bfec:	ee75 5a65 	vsub.f32	s11, s10, s11
 800bff0:	ee33 3a60 	vsub.f32	s6, s6, s1
 800bff4:	ee36 5a26 	vadd.f32	s10, s12, s13
 800bff8:	ed8c 0a00 	vstr	s0, [ip]
 800bffc:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c000:	449c      	add	ip, r3
 800c002:	ee33 6a87 	vadd.f32	s12, s7, s14
 800c006:	ed84 3a01 	vstr	s6, [r4, #4]
 800c00a:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800c00e:	441c      	add	r4, r3
 800c010:	ee71 3a24 	vadd.f32	s7, s2, s9
 800c014:	ee71 4a64 	vsub.f32	s9, s2, s9
 800c018:	ee31 3aa2 	vadd.f32	s6, s3, s5
 800c01c:	edc7 3a00 	vstr	s7, [r7]
 800c020:	ee34 1a42 	vsub.f32	s2, s8, s4
 800c024:	edc0 4a00 	vstr	s9, [r0]
 800c028:	ee77 3aa5 	vadd.f32	s7, s15, s11
 800c02c:	ee75 4a46 	vsub.f32	s9, s10, s12
 800c030:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c034:	ed87 1a01 	vstr	s2, [r7, #4]
 800c038:	ee76 5ac7 	vsub.f32	s11, s13, s14
 800c03c:	441f      	add	r7, r3
 800c03e:	ee32 4a04 	vadd.f32	s8, s4, s8
 800c042:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800c046:	ee36 6a05 	vadd.f32	s12, s12, s10
 800c04a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c04e:	ed80 4a01 	vstr	s8, [r0, #4]
 800c052:	ed86 3a00 	vstr	s6, [r6]
 800c056:	4418      	add	r0, r3
 800c058:	ed41 1a01 	vstr	s3, [r1, #-4]
 800c05c:	ed42 3a01 	vstr	s7, [r2, #-4]
 800c060:	edc5 7a00 	vstr	s15, [r5]
 800c064:	edc6 4a01 	vstr	s9, [r6, #4]
 800c068:	441e      	add	r6, r3
 800c06a:	ed81 6a00 	vstr	s12, [r1]
 800c06e:	4419      	add	r1, r3
 800c070:	edc2 5a00 	vstr	s11, [r2]
 800c074:	441a      	add	r2, r3
 800c076:	ed85 7a01 	vstr	s14, [r5, #4]
 800c07a:	441d      	add	r5, r3
 800c07c:	f63f af44 	bhi.w	800bf08 <arm_radix8_butterfly_f32+0x70>
 800c080:	9300      	str	r3, [sp, #0]
 800c082:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c084:	2b07      	cmp	r3, #7
 800c086:	f240 81f4 	bls.w	800c472 <arm_radix8_butterfly_f32+0x5da>
 800c08a:	9901      	ldr	r1, [sp, #4]
 800c08c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800c090:	9d02      	ldr	r5, [sp, #8]
 800c092:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 800c096:	3101      	adds	r1, #1
 800c098:	eb04 000e 	add.w	r0, r4, lr
 800c09c:	00e4      	lsls	r4, r4, #3
 800c09e:	3508      	adds	r5, #8
 800c0a0:	4419      	add	r1, r3
 800c0a2:	eb00 0c0e 	add.w	ip, r0, lr
 800c0a6:	9413      	str	r4, [sp, #76]	; 0x4c
 800c0a8:	00c0      	lsls	r0, r0, #3
 800c0aa:	185e      	adds	r6, r3, r1
 800c0ac:	4617      	mov	r7, r2
 800c0ae:	9218      	str	r2, [sp, #96]	; 0x60
 800c0b0:	f109 0908 	add.w	r9, r9, #8
 800c0b4:	199c      	adds	r4, r3, r6
 800c0b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c0b8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c0ba:	9012      	str	r0, [sp, #72]	; 0x48
 800c0bc:	195d      	adds	r5, r3, r5
 800c0be:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c0c0:	443a      	add	r2, r7
 800c0c2:	950c      	str	r5, [sp, #48]	; 0x30
 800c0c4:	4698      	mov	r8, r3
 800c0c6:	4420      	add	r0, r4
 800c0c8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c0ca:	19d7      	adds	r7, r2, r7
 800c0cc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c0d0:	4405      	add	r5, r0
 800c0d2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c0d6:	9710      	str	r7, [sp, #64]	; 0x40
 800c0d8:	eb0c 070e 	add.w	r7, ip, lr
 800c0dc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800c0e0:	3404      	adds	r4, #4
 800c0e2:	3004      	adds	r0, #4
 800c0e4:	44c8      	add	r8, r9
 800c0e6:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800c0ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c0ec:	940a      	str	r4, [sp, #40]	; 0x28
 800c0ee:	9009      	str	r0, [sp, #36]	; 0x24
 800c0f0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c0f4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800c0f6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c0fa:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c0fc:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800c100:	eb07 080e 	add.w	r8, r7, lr
 800c104:	eb04 0900 	add.w	r9, r4, r0
 800c108:	00f8      	lsls	r0, r7, #3
 800c10a:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800c10e:	3504      	adds	r5, #4
 800c110:	4607      	mov	r7, r0
 800c112:	9017      	str	r0, [sp, #92]	; 0x5c
 800c114:	910b      	str	r1, [sp, #44]	; 0x2c
 800c116:	4618      	mov	r0, r3
 800c118:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 800c11c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c11e:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800c122:	18e3      	adds	r3, r4, r3
 800c124:	9508      	str	r5, [sp, #32]
 800c126:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800c128:	910e      	str	r1, [sp, #56]	; 0x38
 800c12a:	4621      	mov	r1, r4
 800c12c:	eb04 0805 	add.w	r8, r4, r5
 800c130:	9304      	str	r3, [sp, #16]
 800c132:	19e5      	adds	r5, r4, r7
 800c134:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800c138:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c13a:	9316      	str	r3, [sp, #88]	; 0x58
 800c13c:	190b      	adds	r3, r1, r4
 800c13e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800c140:	9505      	str	r5, [sp, #20]
 800c142:	9303      	str	r3, [sp, #12]
 800c144:	f100 0308 	add.w	r3, r0, #8
 800c148:	9707      	str	r7, [sp, #28]
 800c14a:	4638      	mov	r0, r7
 800c14c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c14e:	2301      	movs	r3, #1
 800c150:	9306      	str	r3, [sp, #24]
 800c152:	9b00      	ldr	r3, [sp, #0]
 800c154:	ed90 fa00 	vldr	s30, [r0]
 800c158:	edd0 ba01 	vldr	s23, [r0, #4]
 800c15c:	9803      	ldr	r0, [sp, #12]
 800c15e:	9903      	ldr	r1, [sp, #12]
 800c160:	ed90 ba01 	vldr	s22, [r0, #4]
 800c164:	9804      	ldr	r0, [sp, #16]
 800c166:	edd1 ea00 	vldr	s29, [r1]
 800c16a:	edd0 aa01 	vldr	s21, [r0, #4]
 800c16e:	9805      	ldr	r0, [sp, #20]
 800c170:	9905      	ldr	r1, [sp, #20]
 800c172:	edd0 7a01 	vldr	s15, [r0, #4]
 800c176:	ed91 da00 	vldr	s26, [r1]
 800c17a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c17c:	9c04      	ldr	r4, [sp, #16]
 800c17e:	edcd 7a01 	vstr	s15, [sp, #4]
 800c182:	edd8 7a01 	vldr	s15, [r8, #4]
 800c186:	9100      	str	r1, [sp, #0]
 800c188:	edd2 fa00 	vldr	s31, [r2]
 800c18c:	ed94 ea00 	vldr	s28, [r4]
 800c190:	ed92 ca01 	vldr	s24, [r2, #4]
 800c194:	f8dd e020 	ldr.w	lr, [sp, #32]
 800c198:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c19a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c19c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c19e:	edd9 da00 	vldr	s27, [r9]
 800c1a2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c1a4:	edd8 ca00 	vldr	s25, [r8]
 800c1a8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c1aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c1ac:	f8dd c018 	ldr.w	ip, [sp, #24]
 800c1b0:	ed99 aa01 	vldr	s20, [r9, #4]
 800c1b4:	edcd 7a02 	vstr	s15, [sp, #8]
 800c1b8:	9800      	ldr	r0, [sp, #0]
 800c1ba:	e001      	b.n	800c1c0 <arm_radix8_butterfly_f32+0x328>
 800c1bc:	3f3504f3 	.word	0x3f3504f3
 800c1c0:	edd5 3a00 	vldr	s7, [r5]
 800c1c4:	44dc      	add	ip, fp
 800c1c6:	ed91 7a00 	vldr	s14, [r1]
 800c1ca:	edd4 8a00 	vldr	s17, [r4]
 800c1ce:	45e2      	cmp	sl, ip
 800c1d0:	ed57 7a01 	vldr	s15, [r7, #-4]
 800c1d4:	ed90 5a00 	vldr	s10, [r0]
 800c1d8:	ed56 5a01 	vldr	s11, [r6, #-4]
 800c1dc:	ee38 6aa7 	vadd.f32	s12, s17, s15
 800c1e0:	ed92 1a00 	vldr	s2, [r2]
 800c1e4:	ee78 4ae7 	vsub.f32	s9, s17, s15
 800c1e8:	ed1e 4a01 	vldr	s8, [lr, #-4]
 800c1ec:	ee75 9a25 	vadd.f32	s19, s10, s11
 800c1f0:	ee31 3a07 	vadd.f32	s6, s2, s14
 800c1f4:	ed92 8a01 	vldr	s16, [r2, #4]
 800c1f8:	ee73 6a84 	vadd.f32	s13, s7, s8
 800c1fc:	ee75 5a65 	vsub.f32	s11, s10, s11
 800c200:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800c204:	ee73 1a06 	vadd.f32	s3, s6, s12
 800c208:	ee39 5aa6 	vadd.f32	s10, s19, s13
 800c20c:	ee75 7a84 	vadd.f32	s15, s11, s8
 800c210:	ee31 1a47 	vsub.f32	s2, s2, s14
 800c214:	ee31 7a85 	vadd.f32	s14, s3, s10
 800c218:	ee67 7a89 	vmul.f32	s15, s15, s18
 800c21c:	ee33 3a46 	vsub.f32	s6, s6, s12
 800c220:	ed82 7a00 	vstr	s14, [r2]
 800c224:	ee79 9ae6 	vsub.f32	s19, s19, s13
 800c228:	ed96 6a00 	vldr	s12, [r6]
 800c22c:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800c230:	edd5 3a01 	vldr	s7, [r5, #4]
 800c234:	ee74 8ae7 	vsub.f32	s17, s9, s15
 800c238:	ed90 7a01 	vldr	s14, [r0, #4]
 800c23c:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800c240:	edde 4a00 	vldr	s9, [lr]
 800c244:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800c248:	ee77 2a46 	vsub.f32	s5, s14, s12
 800c24c:	edd1 6a01 	vldr	s13, [r1, #4]
 800c250:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800c254:	edd7 0a00 	vldr	s1, [r7]
 800c258:	ee77 5a06 	vadd.f32	s11, s14, s12
 800c25c:	ed94 7a01 	vldr	s14, [r4, #4]
 800c260:	ee33 6aa4 	vadd.f32	s12, s7, s9
 800c264:	ee32 0ae7 	vsub.f32	s0, s5, s15
 800c268:	ee78 4a66 	vsub.f32	s9, s16, s13
 800c26c:	ee78 3a26 	vadd.f32	s7, s16, s13
 800c270:	ee72 2aa7 	vadd.f32	s5, s5, s15
 800c274:	ee77 6a20 	vadd.f32	s13, s14, s1
 800c278:	ee24 4a09 	vmul.f32	s8, s8, s18
 800c27c:	ee37 7a60 	vsub.f32	s14, s14, s1
 800c280:	ee20 8a09 	vmul.f32	s16, s0, s18
 800c284:	ee75 0a86 	vadd.f32	s1, s11, s12
 800c288:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800c28c:	ee62 2a89 	vmul.f32	s5, s5, s18
 800c290:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800c294:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800c298:	ee77 7a62 	vsub.f32	s15, s14, s5
 800c29c:	ee74 5a88 	vadd.f32	s11, s9, s16
 800c2a0:	ee34 8ac8 	vsub.f32	s16, s9, s16
 800c2a4:	ee77 4a22 	vadd.f32	s9, s14, s5
 800c2a8:	ee71 2a04 	vadd.f32	s5, s2, s8
 800c2ac:	ee31 7a44 	vsub.f32	s14, s2, s8
 800c2b0:	ee30 1a60 	vsub.f32	s2, s0, s1
 800c2b4:	ee73 1a06 	vadd.f32	s3, s6, s12
 800c2b8:	ee33 6a46 	vsub.f32	s12, s6, s12
 800c2bc:	ee33 3ae9 	vsub.f32	s6, s7, s19
 800c2c0:	ee79 6aa3 	vadd.f32	s13, s19, s7
 800c2c4:	ee38 4a68 	vsub.f32	s8, s16, s17
 800c2c8:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800c2cc:	ee72 5a25 	vadd.f32	s11, s4, s11
 800c2d0:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800c2d4:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800c2d8:	ee77 2a27 	vadd.f32	s5, s14, s15
 800c2dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c2e0:	ee78 7a88 	vadd.f32	s15, s17, s16
 800c2e4:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800c2e8:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800c2ec:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800c2f0:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800c2f4:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800c2f8:	ee70 0a20 	vadd.f32	s1, s0, s1
 800c2fc:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800c300:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800c304:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800c308:	edc2 0a01 	vstr	s1, [r2, #4]
 800c30c:	ee38 8a88 	vadd.f32	s16, s17, s16
 800c310:	441a      	add	r2, r3
 800c312:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800c316:	ee31 5a45 	vsub.f32	s10, s2, s10
 800c31a:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800c31e:	ed81 8a00 	vstr	s16, [r1]
 800c322:	ee39 0a80 	vadd.f32	s0, s19, s0
 800c326:	ee33 3a61 	vsub.f32	s6, s6, s3
 800c32a:	ed81 5a01 	vstr	s10, [r1, #4]
 800c32e:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800c332:	edcd 3a00 	vstr	s7, [sp]
 800c336:	ed9d 5a02 	vldr	s10, [sp, #8]
 800c33a:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800c33e:	eddd 3a01 	vldr	s7, [sp, #4]
 800c342:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800c346:	ed84 0a00 	vstr	s0, [r4]
 800c34a:	ee65 4a24 	vmul.f32	s9, s10, s9
 800c34e:	ed84 3a01 	vstr	s6, [r4, #4]
 800c352:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800c356:	ee23 6a86 	vmul.f32	s12, s7, s12
 800c35a:	eddd 3a00 	vldr	s7, [sp]
 800c35e:	ee25 5a25 	vmul.f32	s10, s10, s11
 800c362:	4419      	add	r1, r3
 800c364:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800c368:	441c      	add	r4, r3
 800c36a:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800c36e:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800c372:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800c376:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800c37a:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800c37e:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800c382:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800c386:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800c38a:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800c38e:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800c392:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800c396:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800c39a:	ee38 8a01 	vadd.f32	s16, s16, s2
 800c39e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800c3a2:	ee39 5a85 	vadd.f32	s10, s19, s10
 800c3a6:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800c3aa:	ed07 8a01 	vstr	s16, [r7, #-4]
 800c3ae:	ee30 0a21 	vadd.f32	s0, s0, s3
 800c3b2:	ed87 6a00 	vstr	s12, [r7]
 800c3b6:	ee74 2a62 	vsub.f32	s5, s8, s5
 800c3ba:	edc0 0a00 	vstr	s1, [r0]
 800c3be:	ee33 3a28 	vadd.f32	s6, s6, s17
 800c3c2:	edc0 3a01 	vstr	s7, [r0, #4]
 800c3c6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c3ca:	ed0e 5a01 	vstr	s10, [lr, #-4]
 800c3ce:	edce 4a00 	vstr	s9, [lr]
 800c3d2:	4418      	add	r0, r3
 800c3d4:	ed06 0a01 	vstr	s0, [r6, #-4]
 800c3d8:	441f      	add	r7, r3
 800c3da:	edc6 2a00 	vstr	s5, [r6]
 800c3de:	449e      	add	lr, r3
 800c3e0:	ed85 3a00 	vstr	s6, [r5]
 800c3e4:	441e      	add	r6, r3
 800c3e6:	ed85 7a01 	vstr	s14, [r5, #4]
 800c3ea:	441d      	add	r5, r3
 800c3ec:	f63f aee8 	bhi.w	800c1c0 <arm_radix8_butterfly_f32+0x328>
 800c3f0:	9a06      	ldr	r2, [sp, #24]
 800c3f2:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c3f4:	3201      	adds	r2, #1
 800c3f6:	4611      	mov	r1, r2
 800c3f8:	9206      	str	r2, [sp, #24]
 800c3fa:	9a07      	ldr	r2, [sp, #28]
 800c3fc:	4402      	add	r2, r0
 800c3fe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c400:	9207      	str	r2, [sp, #28]
 800c402:	9a03      	ldr	r2, [sp, #12]
 800c404:	4402      	add	r2, r0
 800c406:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c408:	9203      	str	r2, [sp, #12]
 800c40a:	9a04      	ldr	r2, [sp, #16]
 800c40c:	4402      	add	r2, r0
 800c40e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c410:	9204      	str	r2, [sp, #16]
 800c412:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c414:	4491      	add	r9, r2
 800c416:	9a05      	ldr	r2, [sp, #20]
 800c418:	4402      	add	r2, r0
 800c41a:	9205      	str	r2, [sp, #20]
 800c41c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c41e:	4490      	add	r8, r2
 800c420:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c422:	3208      	adds	r2, #8
 800c424:	920f      	str	r2, [sp, #60]	; 0x3c
 800c426:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c428:	3208      	adds	r2, #8
 800c42a:	920e      	str	r2, [sp, #56]	; 0x38
 800c42c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c42e:	3208      	adds	r2, #8
 800c430:	920d      	str	r2, [sp, #52]	; 0x34
 800c432:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c434:	3208      	adds	r2, #8
 800c436:	920c      	str	r2, [sp, #48]	; 0x30
 800c438:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c43a:	3208      	adds	r2, #8
 800c43c:	920b      	str	r2, [sp, #44]	; 0x2c
 800c43e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c440:	3208      	adds	r2, #8
 800c442:	920a      	str	r2, [sp, #40]	; 0x28
 800c444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c446:	3208      	adds	r2, #8
 800c448:	9209      	str	r2, [sp, #36]	; 0x24
 800c44a:	9a08      	ldr	r2, [sp, #32]
 800c44c:	3208      	adds	r2, #8
 800c44e:	9208      	str	r2, [sp, #32]
 800c450:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800c452:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c454:	4622      	mov	r2, r4
 800c456:	4288      	cmp	r0, r1
 800c458:	d005      	beq.n	800c466 <arm_radix8_butterfly_f32+0x5ce>
 800c45a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c45c:	4621      	mov	r1, r4
 800c45e:	4401      	add	r1, r0
 800c460:	9807      	ldr	r0, [sp, #28]
 800c462:	9110      	str	r1, [sp, #64]	; 0x40
 800c464:	e676      	b.n	800c154 <arm_radix8_butterfly_f32+0x2bc>
 800c466:	4683      	mov	fp, r0
 800c468:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 800c46c:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 800c470:	e522      	b.n	800beb8 <arm_radix8_butterfly_f32+0x20>
 800c472:	b01d      	add	sp, #116	; 0x74
 800c474:	ecbd 8b10 	vpop	{d8-d15}
 800c478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c47c <__errno>:
 800c47c:	4b01      	ldr	r3, [pc, #4]	; (800c484 <__errno+0x8>)
 800c47e:	6818      	ldr	r0, [r3, #0]
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	24000010 	.word	0x24000010

0800c488 <__libc_init_array>:
 800c488:	b570      	push	{r4, r5, r6, lr}
 800c48a:	4e0d      	ldr	r6, [pc, #52]	; (800c4c0 <__libc_init_array+0x38>)
 800c48c:	4c0d      	ldr	r4, [pc, #52]	; (800c4c4 <__libc_init_array+0x3c>)
 800c48e:	1ba4      	subs	r4, r4, r6
 800c490:	10a4      	asrs	r4, r4, #2
 800c492:	2500      	movs	r5, #0
 800c494:	42a5      	cmp	r5, r4
 800c496:	d109      	bne.n	800c4ac <__libc_init_array+0x24>
 800c498:	4e0b      	ldr	r6, [pc, #44]	; (800c4c8 <__libc_init_array+0x40>)
 800c49a:	4c0c      	ldr	r4, [pc, #48]	; (800c4cc <__libc_init_array+0x44>)
 800c49c:	f000 fb3e 	bl	800cb1c <_init>
 800c4a0:	1ba4      	subs	r4, r4, r6
 800c4a2:	10a4      	asrs	r4, r4, #2
 800c4a4:	2500      	movs	r5, #0
 800c4a6:	42a5      	cmp	r5, r4
 800c4a8:	d105      	bne.n	800c4b6 <__libc_init_array+0x2e>
 800c4aa:	bd70      	pop	{r4, r5, r6, pc}
 800c4ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c4b0:	4798      	blx	r3
 800c4b2:	3501      	adds	r5, #1
 800c4b4:	e7ee      	b.n	800c494 <__libc_init_array+0xc>
 800c4b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c4ba:	4798      	blx	r3
 800c4bc:	3501      	adds	r5, #1
 800c4be:	e7f2      	b.n	800c4a6 <__libc_init_array+0x1e>
 800c4c0:	08012d78 	.word	0x08012d78
 800c4c4:	08012d78 	.word	0x08012d78
 800c4c8:	08012d78 	.word	0x08012d78
 800c4cc:	08012d7c 	.word	0x08012d7c

0800c4d0 <malloc>:
 800c4d0:	4b02      	ldr	r3, [pc, #8]	; (800c4dc <malloc+0xc>)
 800c4d2:	4601      	mov	r1, r0
 800c4d4:	6818      	ldr	r0, [r3, #0]
 800c4d6:	f000 b861 	b.w	800c59c <_malloc_r>
 800c4da:	bf00      	nop
 800c4dc:	24000010 	.word	0x24000010

0800c4e0 <free>:
 800c4e0:	4b02      	ldr	r3, [pc, #8]	; (800c4ec <free+0xc>)
 800c4e2:	4601      	mov	r1, r0
 800c4e4:	6818      	ldr	r0, [r3, #0]
 800c4e6:	f000 b80b 	b.w	800c500 <_free_r>
 800c4ea:	bf00      	nop
 800c4ec:	24000010 	.word	0x24000010

0800c4f0 <memset>:
 800c4f0:	4402      	add	r2, r0
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d100      	bne.n	800c4fa <memset+0xa>
 800c4f8:	4770      	bx	lr
 800c4fa:	f803 1b01 	strb.w	r1, [r3], #1
 800c4fe:	e7f9      	b.n	800c4f4 <memset+0x4>

0800c500 <_free_r>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	4605      	mov	r5, r0
 800c504:	2900      	cmp	r1, #0
 800c506:	d045      	beq.n	800c594 <_free_r+0x94>
 800c508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c50c:	1f0c      	subs	r4, r1, #4
 800c50e:	2b00      	cmp	r3, #0
 800c510:	bfb8      	it	lt
 800c512:	18e4      	addlt	r4, r4, r3
 800c514:	f000 f8ac 	bl	800c670 <__malloc_lock>
 800c518:	4a1f      	ldr	r2, [pc, #124]	; (800c598 <_free_r+0x98>)
 800c51a:	6813      	ldr	r3, [r2, #0]
 800c51c:	4610      	mov	r0, r2
 800c51e:	b933      	cbnz	r3, 800c52e <_free_r+0x2e>
 800c520:	6063      	str	r3, [r4, #4]
 800c522:	6014      	str	r4, [r2, #0]
 800c524:	4628      	mov	r0, r5
 800c526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c52a:	f000 b8a2 	b.w	800c672 <__malloc_unlock>
 800c52e:	42a3      	cmp	r3, r4
 800c530:	d90c      	bls.n	800c54c <_free_r+0x4c>
 800c532:	6821      	ldr	r1, [r4, #0]
 800c534:	1862      	adds	r2, r4, r1
 800c536:	4293      	cmp	r3, r2
 800c538:	bf04      	itt	eq
 800c53a:	681a      	ldreq	r2, [r3, #0]
 800c53c:	685b      	ldreq	r3, [r3, #4]
 800c53e:	6063      	str	r3, [r4, #4]
 800c540:	bf04      	itt	eq
 800c542:	1852      	addeq	r2, r2, r1
 800c544:	6022      	streq	r2, [r4, #0]
 800c546:	6004      	str	r4, [r0, #0]
 800c548:	e7ec      	b.n	800c524 <_free_r+0x24>
 800c54a:	4613      	mov	r3, r2
 800c54c:	685a      	ldr	r2, [r3, #4]
 800c54e:	b10a      	cbz	r2, 800c554 <_free_r+0x54>
 800c550:	42a2      	cmp	r2, r4
 800c552:	d9fa      	bls.n	800c54a <_free_r+0x4a>
 800c554:	6819      	ldr	r1, [r3, #0]
 800c556:	1858      	adds	r0, r3, r1
 800c558:	42a0      	cmp	r0, r4
 800c55a:	d10b      	bne.n	800c574 <_free_r+0x74>
 800c55c:	6820      	ldr	r0, [r4, #0]
 800c55e:	4401      	add	r1, r0
 800c560:	1858      	adds	r0, r3, r1
 800c562:	4282      	cmp	r2, r0
 800c564:	6019      	str	r1, [r3, #0]
 800c566:	d1dd      	bne.n	800c524 <_free_r+0x24>
 800c568:	6810      	ldr	r0, [r2, #0]
 800c56a:	6852      	ldr	r2, [r2, #4]
 800c56c:	605a      	str	r2, [r3, #4]
 800c56e:	4401      	add	r1, r0
 800c570:	6019      	str	r1, [r3, #0]
 800c572:	e7d7      	b.n	800c524 <_free_r+0x24>
 800c574:	d902      	bls.n	800c57c <_free_r+0x7c>
 800c576:	230c      	movs	r3, #12
 800c578:	602b      	str	r3, [r5, #0]
 800c57a:	e7d3      	b.n	800c524 <_free_r+0x24>
 800c57c:	6820      	ldr	r0, [r4, #0]
 800c57e:	1821      	adds	r1, r4, r0
 800c580:	428a      	cmp	r2, r1
 800c582:	bf04      	itt	eq
 800c584:	6811      	ldreq	r1, [r2, #0]
 800c586:	6852      	ldreq	r2, [r2, #4]
 800c588:	6062      	str	r2, [r4, #4]
 800c58a:	bf04      	itt	eq
 800c58c:	1809      	addeq	r1, r1, r0
 800c58e:	6021      	streq	r1, [r4, #0]
 800c590:	605c      	str	r4, [r3, #4]
 800c592:	e7c7      	b.n	800c524 <_free_r+0x24>
 800c594:	bd38      	pop	{r3, r4, r5, pc}
 800c596:	bf00      	nop
 800c598:	24015e48 	.word	0x24015e48

0800c59c <_malloc_r>:
 800c59c:	b570      	push	{r4, r5, r6, lr}
 800c59e:	1ccd      	adds	r5, r1, #3
 800c5a0:	f025 0503 	bic.w	r5, r5, #3
 800c5a4:	3508      	adds	r5, #8
 800c5a6:	2d0c      	cmp	r5, #12
 800c5a8:	bf38      	it	cc
 800c5aa:	250c      	movcc	r5, #12
 800c5ac:	2d00      	cmp	r5, #0
 800c5ae:	4606      	mov	r6, r0
 800c5b0:	db01      	blt.n	800c5b6 <_malloc_r+0x1a>
 800c5b2:	42a9      	cmp	r1, r5
 800c5b4:	d903      	bls.n	800c5be <_malloc_r+0x22>
 800c5b6:	230c      	movs	r3, #12
 800c5b8:	6033      	str	r3, [r6, #0]
 800c5ba:	2000      	movs	r0, #0
 800c5bc:	bd70      	pop	{r4, r5, r6, pc}
 800c5be:	f000 f857 	bl	800c670 <__malloc_lock>
 800c5c2:	4a21      	ldr	r2, [pc, #132]	; (800c648 <_malloc_r+0xac>)
 800c5c4:	6814      	ldr	r4, [r2, #0]
 800c5c6:	4621      	mov	r1, r4
 800c5c8:	b991      	cbnz	r1, 800c5f0 <_malloc_r+0x54>
 800c5ca:	4c20      	ldr	r4, [pc, #128]	; (800c64c <_malloc_r+0xb0>)
 800c5cc:	6823      	ldr	r3, [r4, #0]
 800c5ce:	b91b      	cbnz	r3, 800c5d8 <_malloc_r+0x3c>
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	f000 f83d 	bl	800c650 <_sbrk_r>
 800c5d6:	6020      	str	r0, [r4, #0]
 800c5d8:	4629      	mov	r1, r5
 800c5da:	4630      	mov	r0, r6
 800c5dc:	f000 f838 	bl	800c650 <_sbrk_r>
 800c5e0:	1c43      	adds	r3, r0, #1
 800c5e2:	d124      	bne.n	800c62e <_malloc_r+0x92>
 800c5e4:	230c      	movs	r3, #12
 800c5e6:	6033      	str	r3, [r6, #0]
 800c5e8:	4630      	mov	r0, r6
 800c5ea:	f000 f842 	bl	800c672 <__malloc_unlock>
 800c5ee:	e7e4      	b.n	800c5ba <_malloc_r+0x1e>
 800c5f0:	680b      	ldr	r3, [r1, #0]
 800c5f2:	1b5b      	subs	r3, r3, r5
 800c5f4:	d418      	bmi.n	800c628 <_malloc_r+0x8c>
 800c5f6:	2b0b      	cmp	r3, #11
 800c5f8:	d90f      	bls.n	800c61a <_malloc_r+0x7e>
 800c5fa:	600b      	str	r3, [r1, #0]
 800c5fc:	50cd      	str	r5, [r1, r3]
 800c5fe:	18cc      	adds	r4, r1, r3
 800c600:	4630      	mov	r0, r6
 800c602:	f000 f836 	bl	800c672 <__malloc_unlock>
 800c606:	f104 000b 	add.w	r0, r4, #11
 800c60a:	1d23      	adds	r3, r4, #4
 800c60c:	f020 0007 	bic.w	r0, r0, #7
 800c610:	1ac3      	subs	r3, r0, r3
 800c612:	d0d3      	beq.n	800c5bc <_malloc_r+0x20>
 800c614:	425a      	negs	r2, r3
 800c616:	50e2      	str	r2, [r4, r3]
 800c618:	e7d0      	b.n	800c5bc <_malloc_r+0x20>
 800c61a:	428c      	cmp	r4, r1
 800c61c:	684b      	ldr	r3, [r1, #4]
 800c61e:	bf16      	itet	ne
 800c620:	6063      	strne	r3, [r4, #4]
 800c622:	6013      	streq	r3, [r2, #0]
 800c624:	460c      	movne	r4, r1
 800c626:	e7eb      	b.n	800c600 <_malloc_r+0x64>
 800c628:	460c      	mov	r4, r1
 800c62a:	6849      	ldr	r1, [r1, #4]
 800c62c:	e7cc      	b.n	800c5c8 <_malloc_r+0x2c>
 800c62e:	1cc4      	adds	r4, r0, #3
 800c630:	f024 0403 	bic.w	r4, r4, #3
 800c634:	42a0      	cmp	r0, r4
 800c636:	d005      	beq.n	800c644 <_malloc_r+0xa8>
 800c638:	1a21      	subs	r1, r4, r0
 800c63a:	4630      	mov	r0, r6
 800c63c:	f000 f808 	bl	800c650 <_sbrk_r>
 800c640:	3001      	adds	r0, #1
 800c642:	d0cf      	beq.n	800c5e4 <_malloc_r+0x48>
 800c644:	6025      	str	r5, [r4, #0]
 800c646:	e7db      	b.n	800c600 <_malloc_r+0x64>
 800c648:	24015e48 	.word	0x24015e48
 800c64c:	24015e4c 	.word	0x24015e4c

0800c650 <_sbrk_r>:
 800c650:	b538      	push	{r3, r4, r5, lr}
 800c652:	4c06      	ldr	r4, [pc, #24]	; (800c66c <_sbrk_r+0x1c>)
 800c654:	2300      	movs	r3, #0
 800c656:	4605      	mov	r5, r0
 800c658:	4608      	mov	r0, r1
 800c65a:	6023      	str	r3, [r4, #0]
 800c65c:	f7f8 ff7e 	bl	800555c <_sbrk>
 800c660:	1c43      	adds	r3, r0, #1
 800c662:	d102      	bne.n	800c66a <_sbrk_r+0x1a>
 800c664:	6823      	ldr	r3, [r4, #0]
 800c666:	b103      	cbz	r3, 800c66a <_sbrk_r+0x1a>
 800c668:	602b      	str	r3, [r5, #0]
 800c66a:	bd38      	pop	{r3, r4, r5, pc}
 800c66c:	24015f2c 	.word	0x24015f2c

0800c670 <__malloc_lock>:
 800c670:	4770      	bx	lr

0800c672 <__malloc_unlock>:
 800c672:	4770      	bx	lr

0800c674 <fmaxf>:
 800c674:	b508      	push	{r3, lr}
 800c676:	ed2d 8b02 	vpush	{d8}
 800c67a:	eeb0 8a40 	vmov.f32	s16, s0
 800c67e:	eef0 8a60 	vmov.f32	s17, s1
 800c682:	f000 f82d 	bl	800c6e0 <__fpclassifyf>
 800c686:	b148      	cbz	r0, 800c69c <fmaxf+0x28>
 800c688:	eeb0 0a68 	vmov.f32	s0, s17
 800c68c:	f000 f828 	bl	800c6e0 <__fpclassifyf>
 800c690:	b130      	cbz	r0, 800c6a0 <fmaxf+0x2c>
 800c692:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c69a:	dc01      	bgt.n	800c6a0 <fmaxf+0x2c>
 800c69c:	eeb0 8a68 	vmov.f32	s16, s17
 800c6a0:	eeb0 0a48 	vmov.f32	s0, s16
 800c6a4:	ecbd 8b02 	vpop	{d8}
 800c6a8:	bd08      	pop	{r3, pc}

0800c6aa <fminf>:
 800c6aa:	b508      	push	{r3, lr}
 800c6ac:	ed2d 8b02 	vpush	{d8}
 800c6b0:	eeb0 8a40 	vmov.f32	s16, s0
 800c6b4:	eef0 8a60 	vmov.f32	s17, s1
 800c6b8:	f000 f812 	bl	800c6e0 <__fpclassifyf>
 800c6bc:	b148      	cbz	r0, 800c6d2 <fminf+0x28>
 800c6be:	eeb0 0a68 	vmov.f32	s0, s17
 800c6c2:	f000 f80d 	bl	800c6e0 <__fpclassifyf>
 800c6c6:	b130      	cbz	r0, 800c6d6 <fminf+0x2c>
 800c6c8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6d0:	d401      	bmi.n	800c6d6 <fminf+0x2c>
 800c6d2:	eeb0 8a68 	vmov.f32	s16, s17
 800c6d6:	eeb0 0a48 	vmov.f32	s0, s16
 800c6da:	ecbd 8b02 	vpop	{d8}
 800c6de:	bd08      	pop	{r3, pc}

0800c6e0 <__fpclassifyf>:
 800c6e0:	ee10 3a10 	vmov	r3, s0
 800c6e4:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800c6e8:	d00d      	beq.n	800c706 <__fpclassifyf+0x26>
 800c6ea:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800c6ee:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c6f2:	d30a      	bcc.n	800c70a <__fpclassifyf+0x2a>
 800c6f4:	4b07      	ldr	r3, [pc, #28]	; (800c714 <__fpclassifyf+0x34>)
 800c6f6:	1e42      	subs	r2, r0, #1
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d908      	bls.n	800c70e <__fpclassifyf+0x2e>
 800c6fc:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800c700:	4258      	negs	r0, r3
 800c702:	4158      	adcs	r0, r3
 800c704:	4770      	bx	lr
 800c706:	2002      	movs	r0, #2
 800c708:	4770      	bx	lr
 800c70a:	2004      	movs	r0, #4
 800c70c:	4770      	bx	lr
 800c70e:	2003      	movs	r0, #3
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	007ffffe 	.word	0x007ffffe

0800c718 <roundf>:
 800c718:	ee10 0a10 	vmov	r0, s0
 800c71c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c720:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800c724:	2a16      	cmp	r2, #22
 800c726:	dc15      	bgt.n	800c754 <roundf+0x3c>
 800c728:	2a00      	cmp	r2, #0
 800c72a:	da08      	bge.n	800c73e <roundf+0x26>
 800c72c:	3201      	adds	r2, #1
 800c72e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800c732:	d101      	bne.n	800c738 <roundf+0x20>
 800c734:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800c738:	ee00 3a10 	vmov	s0, r3
 800c73c:	4770      	bx	lr
 800c73e:	4908      	ldr	r1, [pc, #32]	; (800c760 <roundf+0x48>)
 800c740:	4111      	asrs	r1, r2
 800c742:	4208      	tst	r0, r1
 800c744:	d0fa      	beq.n	800c73c <roundf+0x24>
 800c746:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c74a:	4113      	asrs	r3, r2
 800c74c:	4403      	add	r3, r0
 800c74e:	ea23 0301 	bic.w	r3, r3, r1
 800c752:	e7f1      	b.n	800c738 <roundf+0x20>
 800c754:	2a80      	cmp	r2, #128	; 0x80
 800c756:	d1f1      	bne.n	800c73c <roundf+0x24>
 800c758:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c75c:	4770      	bx	lr
 800c75e:	bf00      	nop
 800c760:	007fffff 	.word	0x007fffff

0800c764 <atan2f>:
 800c764:	f000 b850 	b.w	800c808 <__ieee754_atan2f>

0800c768 <sqrtf>:
 800c768:	b500      	push	{lr}
 800c76a:	ed2d 8b02 	vpush	{d8}
 800c76e:	b08b      	sub	sp, #44	; 0x2c
 800c770:	eeb0 8a40 	vmov.f32	s16, s0
 800c774:	f000 f8f2 	bl	800c95c <__ieee754_sqrtf>
 800c778:	4b21      	ldr	r3, [pc, #132]	; (800c800 <sqrtf+0x98>)
 800c77a:	f993 3000 	ldrsb.w	r3, [r3]
 800c77e:	1c5a      	adds	r2, r3, #1
 800c780:	d028      	beq.n	800c7d4 <sqrtf+0x6c>
 800c782:	eeb4 8a48 	vcmp.f32	s16, s16
 800c786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c78a:	d623      	bvs.n	800c7d4 <sqrtf+0x6c>
 800c78c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c794:	d51e      	bpl.n	800c7d4 <sqrtf+0x6c>
 800c796:	2201      	movs	r2, #1
 800c798:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800c79c:	9200      	str	r2, [sp, #0]
 800c79e:	4a19      	ldr	r2, [pc, #100]	; (800c804 <sqrtf+0x9c>)
 800c7a0:	9201      	str	r2, [sp, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	9208      	str	r2, [sp, #32]
 800c7a6:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c7aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c7ae:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800c7f8 <sqrtf+0x90>
 800c7b2:	b9a3      	cbnz	r3, 800c7de <sqrtf+0x76>
 800c7b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c7b8:	4668      	mov	r0, sp
 800c7ba:	f000 f8d2 	bl	800c962 <matherr>
 800c7be:	b1a0      	cbz	r0, 800c7ea <sqrtf+0x82>
 800c7c0:	9b08      	ldr	r3, [sp, #32]
 800c7c2:	b11b      	cbz	r3, 800c7cc <sqrtf+0x64>
 800c7c4:	f7ff fe5a 	bl	800c47c <__errno>
 800c7c8:	9b08      	ldr	r3, [sp, #32]
 800c7ca:	6003      	str	r3, [r0, #0]
 800c7cc:	ed9d 0b06 	vldr	d0, [sp, #24]
 800c7d0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c7d4:	b00b      	add	sp, #44	; 0x2c
 800c7d6:	ecbd 8b02 	vpop	{d8}
 800c7da:	f85d fb04 	ldr.w	pc, [sp], #4
 800c7de:	2b02      	cmp	r3, #2
 800c7e0:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800c7e4:	ed8d 6b06 	vstr	d6, [sp, #24]
 800c7e8:	d1e6      	bne.n	800c7b8 <sqrtf+0x50>
 800c7ea:	f7ff fe47 	bl	800c47c <__errno>
 800c7ee:	2321      	movs	r3, #33	; 0x21
 800c7f0:	6003      	str	r3, [r0, #0]
 800c7f2:	e7e5      	b.n	800c7c0 <sqrtf+0x58>
 800c7f4:	f3af 8000 	nop.w
	...
 800c800:	24000074 	.word	0x24000074
 800c804:	08012d48 	.word	0x08012d48

0800c808 <__ieee754_atan2f>:
 800c808:	ee10 2a90 	vmov	r2, s1
 800c80c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800c810:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c814:	b510      	push	{r4, lr}
 800c816:	eef0 7a40 	vmov.f32	s15, s0
 800c81a:	dc06      	bgt.n	800c82a <__ieee754_atan2f+0x22>
 800c81c:	ee10 0a10 	vmov	r0, s0
 800c820:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c824:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c828:	dd04      	ble.n	800c834 <__ieee754_atan2f+0x2c>
 800c82a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c82e:	eeb0 0a67 	vmov.f32	s0, s15
 800c832:	bd10      	pop	{r4, pc}
 800c834:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800c838:	d103      	bne.n	800c842 <__ieee754_atan2f+0x3a>
 800c83a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c83e:	f000 b893 	b.w	800c968 <atanf>
 800c842:	1794      	asrs	r4, r2, #30
 800c844:	f004 0402 	and.w	r4, r4, #2
 800c848:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c84c:	b93b      	cbnz	r3, 800c85e <__ieee754_atan2f+0x56>
 800c84e:	2c02      	cmp	r4, #2
 800c850:	d06b      	beq.n	800c92a <__ieee754_atan2f+0x122>
 800c852:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800c930 <__ieee754_atan2f+0x128>
 800c856:	2c03      	cmp	r4, #3
 800c858:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800c85c:	e7e7      	b.n	800c82e <__ieee754_atan2f+0x26>
 800c85e:	b939      	cbnz	r1, 800c870 <__ieee754_atan2f+0x68>
 800c860:	eddf 7a34 	vldr	s15, [pc, #208]	; 800c934 <__ieee754_atan2f+0x12c>
 800c864:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800c938 <__ieee754_atan2f+0x130>
 800c868:	2800      	cmp	r0, #0
 800c86a:	fe67 7a87 	vselge.f32	s15, s15, s14
 800c86e:	e7de      	b.n	800c82e <__ieee754_atan2f+0x26>
 800c870:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c874:	d121      	bne.n	800c8ba <__ieee754_atan2f+0xb2>
 800c876:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c87a:	d111      	bne.n	800c8a0 <__ieee754_atan2f+0x98>
 800c87c:	2c02      	cmp	r4, #2
 800c87e:	d009      	beq.n	800c894 <__ieee754_atan2f+0x8c>
 800c880:	2c03      	cmp	r4, #3
 800c882:	d00a      	beq.n	800c89a <__ieee754_atan2f+0x92>
 800c884:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800c93c <__ieee754_atan2f+0x134>
 800c888:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800c940 <__ieee754_atan2f+0x138>
 800c88c:	2c01      	cmp	r4, #1
 800c88e:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800c892:	e7cc      	b.n	800c82e <__ieee754_atan2f+0x26>
 800c894:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c944 <__ieee754_atan2f+0x13c>
 800c898:	e7c9      	b.n	800c82e <__ieee754_atan2f+0x26>
 800c89a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c948 <__ieee754_atan2f+0x140>
 800c89e:	e7c6      	b.n	800c82e <__ieee754_atan2f+0x26>
 800c8a0:	2c02      	cmp	r4, #2
 800c8a2:	d042      	beq.n	800c92a <__ieee754_atan2f+0x122>
 800c8a4:	2c03      	cmp	r4, #3
 800c8a6:	d005      	beq.n	800c8b4 <__ieee754_atan2f+0xac>
 800c8a8:	2c01      	cmp	r4, #1
 800c8aa:	eddf 7a28 	vldr	s15, [pc, #160]	; 800c94c <__ieee754_atan2f+0x144>
 800c8ae:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800c950 <__ieee754_atan2f+0x148>
 800c8b2:	e7ec      	b.n	800c88e <__ieee754_atan2f+0x86>
 800c8b4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c930 <__ieee754_atan2f+0x128>
 800c8b8:	e7b9      	b.n	800c82e <__ieee754_atan2f+0x26>
 800c8ba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c8be:	d0cf      	beq.n	800c860 <__ieee754_atan2f+0x58>
 800c8c0:	1a5b      	subs	r3, r3, r1
 800c8c2:	15db      	asrs	r3, r3, #23
 800c8c4:	2b3c      	cmp	r3, #60	; 0x3c
 800c8c6:	dc1a      	bgt.n	800c8fe <__ieee754_atan2f+0xf6>
 800c8c8:	2a00      	cmp	r2, #0
 800c8ca:	da01      	bge.n	800c8d0 <__ieee754_atan2f+0xc8>
 800c8cc:	333c      	adds	r3, #60	; 0x3c
 800c8ce:	db19      	blt.n	800c904 <__ieee754_atan2f+0xfc>
 800c8d0:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c8d4:	f000 f91a 	bl	800cb0c <fabsf>
 800c8d8:	f000 f846 	bl	800c968 <atanf>
 800c8dc:	eef0 7a40 	vmov.f32	s15, s0
 800c8e0:	2c01      	cmp	r4, #1
 800c8e2:	d012      	beq.n	800c90a <__ieee754_atan2f+0x102>
 800c8e4:	2c02      	cmp	r4, #2
 800c8e6:	d017      	beq.n	800c918 <__ieee754_atan2f+0x110>
 800c8e8:	2c00      	cmp	r4, #0
 800c8ea:	d0a0      	beq.n	800c82e <__ieee754_atan2f+0x26>
 800c8ec:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800c954 <__ieee754_atan2f+0x14c>
 800c8f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c8f4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800c958 <__ieee754_atan2f+0x150>
 800c8f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c8fc:	e797      	b.n	800c82e <__ieee754_atan2f+0x26>
 800c8fe:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c934 <__ieee754_atan2f+0x12c>
 800c902:	e7ed      	b.n	800c8e0 <__ieee754_atan2f+0xd8>
 800c904:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c950 <__ieee754_atan2f+0x148>
 800c908:	e7ea      	b.n	800c8e0 <__ieee754_atan2f+0xd8>
 800c90a:	ee17 3a90 	vmov	r3, s15
 800c90e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c912:	ee07 3a90 	vmov	s15, r3
 800c916:	e78a      	b.n	800c82e <__ieee754_atan2f+0x26>
 800c918:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800c954 <__ieee754_atan2f+0x14c>
 800c91c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c920:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800c958 <__ieee754_atan2f+0x150>
 800c924:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c928:	e781      	b.n	800c82e <__ieee754_atan2f+0x26>
 800c92a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800c958 <__ieee754_atan2f+0x150>
 800c92e:	e77e      	b.n	800c82e <__ieee754_atan2f+0x26>
 800c930:	c0490fdb 	.word	0xc0490fdb
 800c934:	3fc90fdb 	.word	0x3fc90fdb
 800c938:	bfc90fdb 	.word	0xbfc90fdb
 800c93c:	bf490fdb 	.word	0xbf490fdb
 800c940:	3f490fdb 	.word	0x3f490fdb
 800c944:	4016cbe4 	.word	0x4016cbe4
 800c948:	c016cbe4 	.word	0xc016cbe4
 800c94c:	80000000 	.word	0x80000000
 800c950:	00000000 	.word	0x00000000
 800c954:	33bbbd2e 	.word	0x33bbbd2e
 800c958:	40490fdb 	.word	0x40490fdb

0800c95c <__ieee754_sqrtf>:
 800c95c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c960:	4770      	bx	lr

0800c962 <matherr>:
 800c962:	2000      	movs	r0, #0
 800c964:	4770      	bx	lr
	...

0800c968 <atanf>:
 800c968:	b538      	push	{r3, r4, r5, lr}
 800c96a:	ee10 5a10 	vmov	r5, s0
 800c96e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800c972:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800c976:	eef0 7a40 	vmov.f32	s15, s0
 800c97a:	db0f      	blt.n	800c99c <atanf+0x34>
 800c97c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c980:	dd04      	ble.n	800c98c <atanf+0x24>
 800c982:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c986:	eeb0 0a67 	vmov.f32	s0, s15
 800c98a:	bd38      	pop	{r3, r4, r5, pc}
 800c98c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800cac0 <atanf+0x158>
 800c990:	eddf 7a4c 	vldr	s15, [pc, #304]	; 800cac4 <atanf+0x15c>
 800c994:	2d00      	cmp	r5, #0
 800c996:	fe77 7a87 	vselgt.f32	s15, s15, s14
 800c99a:	e7f4      	b.n	800c986 <atanf+0x1e>
 800c99c:	4b4a      	ldr	r3, [pc, #296]	; (800cac8 <atanf+0x160>)
 800c99e:	429c      	cmp	r4, r3
 800c9a0:	dc10      	bgt.n	800c9c4 <atanf+0x5c>
 800c9a2:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800c9a6:	da0a      	bge.n	800c9be <atanf+0x56>
 800c9a8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800cacc <atanf+0x164>
 800c9ac:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c9b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9b4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9bc:	dce3      	bgt.n	800c986 <atanf+0x1e>
 800c9be:	f04f 33ff 	mov.w	r3, #4294967295
 800c9c2:	e013      	b.n	800c9ec <atanf+0x84>
 800c9c4:	f000 f8a2 	bl	800cb0c <fabsf>
 800c9c8:	4b41      	ldr	r3, [pc, #260]	; (800cad0 <atanf+0x168>)
 800c9ca:	429c      	cmp	r4, r3
 800c9cc:	dc4f      	bgt.n	800ca6e <atanf+0x106>
 800c9ce:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c9d2:	429c      	cmp	r4, r3
 800c9d4:	dc41      	bgt.n	800ca5a <atanf+0xf2>
 800c9d6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c9da:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c9de:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c9e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c9ec:	1c5a      	adds	r2, r3, #1
 800c9ee:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c9f2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800cad4 <atanf+0x16c>
 800c9f6:	eddf 5a38 	vldr	s11, [pc, #224]	; 800cad8 <atanf+0x170>
 800c9fa:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800cadc <atanf+0x174>
 800c9fe:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ca02:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ca06:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800cae0 <atanf+0x178>
 800ca0a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ca0e:	eddf 5a35 	vldr	s11, [pc, #212]	; 800cae4 <atanf+0x17c>
 800ca12:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ca16:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800cae8 <atanf+0x180>
 800ca1a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ca1e:	eddf 5a33 	vldr	s11, [pc, #204]	; 800caec <atanf+0x184>
 800ca22:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ca26:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800caf0 <atanf+0x188>
 800ca2a:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ca2e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800caf4 <atanf+0x18c>
 800ca32:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ca36:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800caf8 <atanf+0x190>
 800ca3a:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ca3e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800cafc <atanf+0x194>
 800ca42:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ca46:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ca4a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ca4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca52:	d121      	bne.n	800ca98 <atanf+0x130>
 800ca54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca58:	e795      	b.n	800c986 <atanf+0x1e>
 800ca5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ca5e:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ca62:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ca66:	2301      	movs	r3, #1
 800ca68:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ca6c:	e7be      	b.n	800c9ec <atanf+0x84>
 800ca6e:	4b24      	ldr	r3, [pc, #144]	; (800cb00 <atanf+0x198>)
 800ca70:	429c      	cmp	r4, r3
 800ca72:	dc0b      	bgt.n	800ca8c <atanf+0x124>
 800ca74:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ca78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca7c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ca80:	2302      	movs	r3, #2
 800ca82:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ca86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca8a:	e7af      	b.n	800c9ec <atanf+0x84>
 800ca8c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ca90:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ca94:	2303      	movs	r3, #3
 800ca96:	e7a9      	b.n	800c9ec <atanf+0x84>
 800ca98:	4a1a      	ldr	r2, [pc, #104]	; (800cb04 <atanf+0x19c>)
 800ca9a:	491b      	ldr	r1, [pc, #108]	; (800cb08 <atanf+0x1a0>)
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	441a      	add	r2, r3
 800caa0:	440b      	add	r3, r1
 800caa2:	edd3 6a00 	vldr	s13, [r3]
 800caa6:	ee37 7a66 	vsub.f32	s14, s14, s13
 800caaa:	2d00      	cmp	r5, #0
 800caac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cab0:	ed92 7a00 	vldr	s14, [r2]
 800cab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cab8:	bfb8      	it	lt
 800caba:	eef1 7a67 	vneglt.f32	s15, s15
 800cabe:	e762      	b.n	800c986 <atanf+0x1e>
 800cac0:	bfc90fdb 	.word	0xbfc90fdb
 800cac4:	3fc90fdb 	.word	0x3fc90fdb
 800cac8:	3edfffff 	.word	0x3edfffff
 800cacc:	7149f2ca 	.word	0x7149f2ca
 800cad0:	3f97ffff 	.word	0x3f97ffff
 800cad4:	3c8569d7 	.word	0x3c8569d7
 800cad8:	3d4bda59 	.word	0x3d4bda59
 800cadc:	bd6ef16b 	.word	0xbd6ef16b
 800cae0:	3d886b35 	.word	0x3d886b35
 800cae4:	3dba2e6e 	.word	0x3dba2e6e
 800cae8:	3e124925 	.word	0x3e124925
 800caec:	3eaaaaab 	.word	0x3eaaaaab
 800caf0:	bd15a221 	.word	0xbd15a221
 800caf4:	bd9d8795 	.word	0xbd9d8795
 800caf8:	bde38e38 	.word	0xbde38e38
 800cafc:	be4ccccd 	.word	0xbe4ccccd
 800cb00:	401bffff 	.word	0x401bffff
 800cb04:	08012d50 	.word	0x08012d50
 800cb08:	08012d60 	.word	0x08012d60

0800cb0c <fabsf>:
 800cb0c:	ee10 3a10 	vmov	r3, s0
 800cb10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb14:	ee00 3a10 	vmov	s0, r3
 800cb18:	4770      	bx	lr
	...

0800cb1c <_init>:
 800cb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb1e:	bf00      	nop
 800cb20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb22:	bc08      	pop	{r3}
 800cb24:	469e      	mov	lr, r3
 800cb26:	4770      	bx	lr

0800cb28 <_fini>:
 800cb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb2a:	bf00      	nop
 800cb2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb2e:	bc08      	pop	{r3}
 800cb30:	469e      	mov	lr, r3
 800cb32:	4770      	bx	lr
