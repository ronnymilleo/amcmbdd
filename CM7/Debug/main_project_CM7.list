
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d4c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006240  08007fe4  08007fe4  00017fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e224  0800e224  0001e224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800e22c  0800e22c  0001e22c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e234  0800e234  0001e234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000858  24000000  0800e238  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00014db0  24000858  0800ea90  00020858  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24015608  0800ea90  00025608  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020858  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003d575  00000000  00000000  00020886  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006a69  00000000  00000000  0005ddfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000124c8  00000000  00000000  00064864  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001558  00000000  00000000  00076d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001568  00000000  00000000  00078288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0003d25c  00000000  00000000  000797f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001900c  00000000  00000000  000b6a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00184def  00000000  00000000  000cfa58  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00254847  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003bfc  00000000  00000000  002548c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000858 	.word	0x24000858
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007fcc 	.word	0x08007fcc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400085c 	.word	0x2400085c
 80002d4:	08007fcc 	.word	0x08007fcc

080002d8 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80002d8:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80002da:	2b01      	cmp	r3, #1
	IT       LS
 80002dc:	bf98      	it	ls
	BXLS     lr
 80002de:	4770      	bxls	lr
	PUSH     {r4-r9}
 80002e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80002e4:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80002e6:	089b      	lsrs	r3, r3, #2

080002e8 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80002e8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80002ec:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80002f0:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80002f2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80002f6:	4480      	add	r8, r0
	ADD      r9,r0,r9
 80002f8:	4481      	add	r9, r0
	ADD      r2,r0,r2
 80002fa:	4402      	add	r2, r0
	ADD      r12,r0,r12
 80002fc:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 80002fe:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 8000302:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000306:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000308:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 800030c:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000310:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 8000314:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000318:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 800031a:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 800031e:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 8000322:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 8000324:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000328:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 800032c:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000330:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 8000334:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 8000336:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000338:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 800033a:	d1d5      	bne.n	80002e8 <arm_bitreversal_32_0>
	POP      {r4-r9}
 800033c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000340:	4770      	bx	lr

08000342 <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 8000342:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000344:	2b01      	cmp	r3, #1
	IT       LS
 8000346:	bf98      	it	ls
	BXLS     lr
 8000348:	4770      	bxls	lr
	PUSH     {r4-r9}
 800034a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800034e:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000350:	089b      	lsrs	r3, r3, #2

08000352 <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000352:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000356:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 800035a:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800035c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000360:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 8000364:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000368:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 800036c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000370:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 8000374:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000378:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 800037a:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 800037e:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000382:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 8000386:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 800038a:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 800038c:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 800038e:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000390:	d1df      	bne.n	8000352 <arm_bitreversal_16_0>
	POP      {r4-r9}
 8000392:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000396:	4770      	bx	lr

08000398 <__aeabi_ldivmod>:
 8000398:	b97b      	cbnz	r3, 80003ba <__aeabi_ldivmod+0x22>
 800039a:	b972      	cbnz	r2, 80003ba <__aeabi_ldivmod+0x22>
 800039c:	2900      	cmp	r1, #0
 800039e:	bfbe      	ittt	lt
 80003a0:	2000      	movlt	r0, #0
 80003a2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80003a6:	e006      	blt.n	80003b6 <__aeabi_ldivmod+0x1e>
 80003a8:	bf08      	it	eq
 80003aa:	2800      	cmpeq	r0, #0
 80003ac:	bf1c      	itt	ne
 80003ae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80003b2:	f04f 30ff 	movne.w	r0, #4294967295
 80003b6:	f000 b9bd 	b.w	8000734 <__aeabi_idiv0>
 80003ba:	f1ad 0c08 	sub.w	ip, sp, #8
 80003be:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c2:	2900      	cmp	r1, #0
 80003c4:	db09      	blt.n	80003da <__aeabi_ldivmod+0x42>
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	db1a      	blt.n	8000400 <__aeabi_ldivmod+0x68>
 80003ca:	f000 f84d 	bl	8000468 <__udivmoddi4>
 80003ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003d6:	b004      	add	sp, #16
 80003d8:	4770      	bx	lr
 80003da:	4240      	negs	r0, r0
 80003dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db1b      	blt.n	800041c <__aeabi_ldivmod+0x84>
 80003e4:	f000 f840 	bl	8000468 <__udivmoddi4>
 80003e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003f0:	b004      	add	sp, #16
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	4252      	negs	r2, r2
 80003fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003fe:	4770      	bx	lr
 8000400:	4252      	negs	r2, r2
 8000402:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000406:	f000 f82f 	bl	8000468 <__udivmoddi4>
 800040a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800040e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000412:	b004      	add	sp, #16
 8000414:	4240      	negs	r0, r0
 8000416:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041a:	4770      	bx	lr
 800041c:	4252      	negs	r2, r2
 800041e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000422:	f000 f821 	bl	8000468 <__udivmoddi4>
 8000426:	f8dd e004 	ldr.w	lr, [sp, #4]
 800042a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042e:	b004      	add	sp, #16
 8000430:	4252      	negs	r2, r2
 8000432:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000436:	4770      	bx	lr

08000438 <__aeabi_uldivmod>:
 8000438:	b953      	cbnz	r3, 8000450 <__aeabi_uldivmod+0x18>
 800043a:	b94a      	cbnz	r2, 8000450 <__aeabi_uldivmod+0x18>
 800043c:	2900      	cmp	r1, #0
 800043e:	bf08      	it	eq
 8000440:	2800      	cmpeq	r0, #0
 8000442:	bf1c      	itt	ne
 8000444:	f04f 31ff 	movne.w	r1, #4294967295
 8000448:	f04f 30ff 	movne.w	r0, #4294967295
 800044c:	f000 b972 	b.w	8000734 <__aeabi_idiv0>
 8000450:	f1ad 0c08 	sub.w	ip, sp, #8
 8000454:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000458:	f000 f806 	bl	8000468 <__udivmoddi4>
 800045c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000464:	b004      	add	sp, #16
 8000466:	4770      	bx	lr

08000468 <__udivmoddi4>:
 8000468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800046c:	9e08      	ldr	r6, [sp, #32]
 800046e:	4604      	mov	r4, r0
 8000470:	4688      	mov	r8, r1
 8000472:	2b00      	cmp	r3, #0
 8000474:	d14b      	bne.n	800050e <__udivmoddi4+0xa6>
 8000476:	428a      	cmp	r2, r1
 8000478:	4615      	mov	r5, r2
 800047a:	d967      	bls.n	800054c <__udivmoddi4+0xe4>
 800047c:	fab2 f282 	clz	r2, r2
 8000480:	b14a      	cbz	r2, 8000496 <__udivmoddi4+0x2e>
 8000482:	f1c2 0720 	rsb	r7, r2, #32
 8000486:	fa01 f302 	lsl.w	r3, r1, r2
 800048a:	fa20 f707 	lsr.w	r7, r0, r7
 800048e:	4095      	lsls	r5, r2
 8000490:	ea47 0803 	orr.w	r8, r7, r3
 8000494:	4094      	lsls	r4, r2
 8000496:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800049a:	0c23      	lsrs	r3, r4, #16
 800049c:	fbb8 f7fe 	udiv	r7, r8, lr
 80004a0:	fa1f fc85 	uxth.w	ip, r5
 80004a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80004a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ac:	fb07 f10c 	mul.w	r1, r7, ip
 80004b0:	4299      	cmp	r1, r3
 80004b2:	d909      	bls.n	80004c8 <__udivmoddi4+0x60>
 80004b4:	18eb      	adds	r3, r5, r3
 80004b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80004ba:	f080 811b 	bcs.w	80006f4 <__udivmoddi4+0x28c>
 80004be:	4299      	cmp	r1, r3
 80004c0:	f240 8118 	bls.w	80006f4 <__udivmoddi4+0x28c>
 80004c4:	3f02      	subs	r7, #2
 80004c6:	442b      	add	r3, r5
 80004c8:	1a5b      	subs	r3, r3, r1
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80004dc:	45a4      	cmp	ip, r4
 80004de:	d909      	bls.n	80004f4 <__udivmoddi4+0x8c>
 80004e0:	192c      	adds	r4, r5, r4
 80004e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e6:	f080 8107 	bcs.w	80006f8 <__udivmoddi4+0x290>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	f240 8104 	bls.w	80006f8 <__udivmoddi4+0x290>
 80004f0:	3802      	subs	r0, #2
 80004f2:	442c      	add	r4, r5
 80004f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80004f8:	eba4 040c 	sub.w	r4, r4, ip
 80004fc:	2700      	movs	r7, #0
 80004fe:	b11e      	cbz	r6, 8000508 <__udivmoddi4+0xa0>
 8000500:	40d4      	lsrs	r4, r2
 8000502:	2300      	movs	r3, #0
 8000504:	e9c6 4300 	strd	r4, r3, [r6]
 8000508:	4639      	mov	r1, r7
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	428b      	cmp	r3, r1
 8000510:	d909      	bls.n	8000526 <__udivmoddi4+0xbe>
 8000512:	2e00      	cmp	r6, #0
 8000514:	f000 80eb 	beq.w	80006ee <__udivmoddi4+0x286>
 8000518:	2700      	movs	r7, #0
 800051a:	e9c6 0100 	strd	r0, r1, [r6]
 800051e:	4638      	mov	r0, r7
 8000520:	4639      	mov	r1, r7
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	fab3 f783 	clz	r7, r3
 800052a:	2f00      	cmp	r7, #0
 800052c:	d147      	bne.n	80005be <__udivmoddi4+0x156>
 800052e:	428b      	cmp	r3, r1
 8000530:	d302      	bcc.n	8000538 <__udivmoddi4+0xd0>
 8000532:	4282      	cmp	r2, r0
 8000534:	f200 80fa 	bhi.w	800072c <__udivmoddi4+0x2c4>
 8000538:	1a84      	subs	r4, r0, r2
 800053a:	eb61 0303 	sbc.w	r3, r1, r3
 800053e:	2001      	movs	r0, #1
 8000540:	4698      	mov	r8, r3
 8000542:	2e00      	cmp	r6, #0
 8000544:	d0e0      	beq.n	8000508 <__udivmoddi4+0xa0>
 8000546:	e9c6 4800 	strd	r4, r8, [r6]
 800054a:	e7dd      	b.n	8000508 <__udivmoddi4+0xa0>
 800054c:	b902      	cbnz	r2, 8000550 <__udivmoddi4+0xe8>
 800054e:	deff      	udf	#255	; 0xff
 8000550:	fab2 f282 	clz	r2, r2
 8000554:	2a00      	cmp	r2, #0
 8000556:	f040 808f 	bne.w	8000678 <__udivmoddi4+0x210>
 800055a:	1b49      	subs	r1, r1, r5
 800055c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000560:	fa1f f885 	uxth.w	r8, r5
 8000564:	2701      	movs	r7, #1
 8000566:	fbb1 fcfe 	udiv	ip, r1, lr
 800056a:	0c23      	lsrs	r3, r4, #16
 800056c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000570:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000574:	fb08 f10c 	mul.w	r1, r8, ip
 8000578:	4299      	cmp	r1, r3
 800057a:	d907      	bls.n	800058c <__udivmoddi4+0x124>
 800057c:	18eb      	adds	r3, r5, r3
 800057e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000582:	d202      	bcs.n	800058a <__udivmoddi4+0x122>
 8000584:	4299      	cmp	r1, r3
 8000586:	f200 80cd 	bhi.w	8000724 <__udivmoddi4+0x2bc>
 800058a:	4684      	mov	ip, r0
 800058c:	1a59      	subs	r1, r3, r1
 800058e:	b2a3      	uxth	r3, r4
 8000590:	fbb1 f0fe 	udiv	r0, r1, lr
 8000594:	fb0e 1410 	mls	r4, lr, r0, r1
 8000598:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800059c:	fb08 f800 	mul.w	r8, r8, r0
 80005a0:	45a0      	cmp	r8, r4
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x14c>
 80005a4:	192c      	adds	r4, r5, r4
 80005a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80005aa:	d202      	bcs.n	80005b2 <__udivmoddi4+0x14a>
 80005ac:	45a0      	cmp	r8, r4
 80005ae:	f200 80b6 	bhi.w	800071e <__udivmoddi4+0x2b6>
 80005b2:	4618      	mov	r0, r3
 80005b4:	eba4 0408 	sub.w	r4, r4, r8
 80005b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005bc:	e79f      	b.n	80004fe <__udivmoddi4+0x96>
 80005be:	f1c7 0c20 	rsb	ip, r7, #32
 80005c2:	40bb      	lsls	r3, r7
 80005c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80005c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80005cc:	fa01 f407 	lsl.w	r4, r1, r7
 80005d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80005d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80005d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80005dc:	4325      	orrs	r5, r4
 80005de:	fbb3 f9f8 	udiv	r9, r3, r8
 80005e2:	0c2c      	lsrs	r4, r5, #16
 80005e4:	fb08 3319 	mls	r3, r8, r9, r3
 80005e8:	fa1f fa8e 	uxth.w	sl, lr
 80005ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80005f0:	fb09 f40a 	mul.w	r4, r9, sl
 80005f4:	429c      	cmp	r4, r3
 80005f6:	fa02 f207 	lsl.w	r2, r2, r7
 80005fa:	fa00 f107 	lsl.w	r1, r0, r7
 80005fe:	d90b      	bls.n	8000618 <__udivmoddi4+0x1b0>
 8000600:	eb1e 0303 	adds.w	r3, lr, r3
 8000604:	f109 30ff 	add.w	r0, r9, #4294967295
 8000608:	f080 8087 	bcs.w	800071a <__udivmoddi4+0x2b2>
 800060c:	429c      	cmp	r4, r3
 800060e:	f240 8084 	bls.w	800071a <__udivmoddi4+0x2b2>
 8000612:	f1a9 0902 	sub.w	r9, r9, #2
 8000616:	4473      	add	r3, lr
 8000618:	1b1b      	subs	r3, r3, r4
 800061a:	b2ad      	uxth	r5, r5
 800061c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000620:	fb08 3310 	mls	r3, r8, r0, r3
 8000624:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000628:	fb00 fa0a 	mul.w	sl, r0, sl
 800062c:	45a2      	cmp	sl, r4
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x1da>
 8000630:	eb1e 0404 	adds.w	r4, lr, r4
 8000634:	f100 33ff 	add.w	r3, r0, #4294967295
 8000638:	d26b      	bcs.n	8000712 <__udivmoddi4+0x2aa>
 800063a:	45a2      	cmp	sl, r4
 800063c:	d969      	bls.n	8000712 <__udivmoddi4+0x2aa>
 800063e:	3802      	subs	r0, #2
 8000640:	4474      	add	r4, lr
 8000642:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000646:	fba0 8902 	umull	r8, r9, r0, r2
 800064a:	eba4 040a 	sub.w	r4, r4, sl
 800064e:	454c      	cmp	r4, r9
 8000650:	46c2      	mov	sl, r8
 8000652:	464b      	mov	r3, r9
 8000654:	d354      	bcc.n	8000700 <__udivmoddi4+0x298>
 8000656:	d051      	beq.n	80006fc <__udivmoddi4+0x294>
 8000658:	2e00      	cmp	r6, #0
 800065a:	d069      	beq.n	8000730 <__udivmoddi4+0x2c8>
 800065c:	ebb1 050a 	subs.w	r5, r1, sl
 8000660:	eb64 0403 	sbc.w	r4, r4, r3
 8000664:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000668:	40fd      	lsrs	r5, r7
 800066a:	40fc      	lsrs	r4, r7
 800066c:	ea4c 0505 	orr.w	r5, ip, r5
 8000670:	e9c6 5400 	strd	r5, r4, [r6]
 8000674:	2700      	movs	r7, #0
 8000676:	e747      	b.n	8000508 <__udivmoddi4+0xa0>
 8000678:	f1c2 0320 	rsb	r3, r2, #32
 800067c:	fa20 f703 	lsr.w	r7, r0, r3
 8000680:	4095      	lsls	r5, r2
 8000682:	fa01 f002 	lsl.w	r0, r1, r2
 8000686:	fa21 f303 	lsr.w	r3, r1, r3
 800068a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800068e:	4338      	orrs	r0, r7
 8000690:	0c01      	lsrs	r1, r0, #16
 8000692:	fbb3 f7fe 	udiv	r7, r3, lr
 8000696:	fa1f f885 	uxth.w	r8, r5
 800069a:	fb0e 3317 	mls	r3, lr, r7, r3
 800069e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006a2:	fb07 f308 	mul.w	r3, r7, r8
 80006a6:	428b      	cmp	r3, r1
 80006a8:	fa04 f402 	lsl.w	r4, r4, r2
 80006ac:	d907      	bls.n	80006be <__udivmoddi4+0x256>
 80006ae:	1869      	adds	r1, r5, r1
 80006b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80006b4:	d22f      	bcs.n	8000716 <__udivmoddi4+0x2ae>
 80006b6:	428b      	cmp	r3, r1
 80006b8:	d92d      	bls.n	8000716 <__udivmoddi4+0x2ae>
 80006ba:	3f02      	subs	r7, #2
 80006bc:	4429      	add	r1, r5
 80006be:	1acb      	subs	r3, r1, r3
 80006c0:	b281      	uxth	r1, r0
 80006c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80006c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80006ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006ce:	fb00 f308 	mul.w	r3, r0, r8
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d907      	bls.n	80006e6 <__udivmoddi4+0x27e>
 80006d6:	1869      	adds	r1, r5, r1
 80006d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80006dc:	d217      	bcs.n	800070e <__udivmoddi4+0x2a6>
 80006de:	428b      	cmp	r3, r1
 80006e0:	d915      	bls.n	800070e <__udivmoddi4+0x2a6>
 80006e2:	3802      	subs	r0, #2
 80006e4:	4429      	add	r1, r5
 80006e6:	1ac9      	subs	r1, r1, r3
 80006e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80006ec:	e73b      	b.n	8000566 <__udivmoddi4+0xfe>
 80006ee:	4637      	mov	r7, r6
 80006f0:	4630      	mov	r0, r6
 80006f2:	e709      	b.n	8000508 <__udivmoddi4+0xa0>
 80006f4:	4607      	mov	r7, r0
 80006f6:	e6e7      	b.n	80004c8 <__udivmoddi4+0x60>
 80006f8:	4618      	mov	r0, r3
 80006fa:	e6fb      	b.n	80004f4 <__udivmoddi4+0x8c>
 80006fc:	4541      	cmp	r1, r8
 80006fe:	d2ab      	bcs.n	8000658 <__udivmoddi4+0x1f0>
 8000700:	ebb8 0a02 	subs.w	sl, r8, r2
 8000704:	eb69 020e 	sbc.w	r2, r9, lr
 8000708:	3801      	subs	r0, #1
 800070a:	4613      	mov	r3, r2
 800070c:	e7a4      	b.n	8000658 <__udivmoddi4+0x1f0>
 800070e:	4660      	mov	r0, ip
 8000710:	e7e9      	b.n	80006e6 <__udivmoddi4+0x27e>
 8000712:	4618      	mov	r0, r3
 8000714:	e795      	b.n	8000642 <__udivmoddi4+0x1da>
 8000716:	4667      	mov	r7, ip
 8000718:	e7d1      	b.n	80006be <__udivmoddi4+0x256>
 800071a:	4681      	mov	r9, r0
 800071c:	e77c      	b.n	8000618 <__udivmoddi4+0x1b0>
 800071e:	3802      	subs	r0, #2
 8000720:	442c      	add	r4, r5
 8000722:	e747      	b.n	80005b4 <__udivmoddi4+0x14c>
 8000724:	f1ac 0c02 	sub.w	ip, ip, #2
 8000728:	442b      	add	r3, r5
 800072a:	e72f      	b.n	800058c <__udivmoddi4+0x124>
 800072c:	4638      	mov	r0, r7
 800072e:	e708      	b.n	8000542 <__udivmoddi4+0xda>
 8000730:	4637      	mov	r7, r6
 8000732:	e6e9      	b.n	8000508 <__udivmoddi4+0xa0>

08000734 <__aeabi_idiv0>:
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <SystemInit+0x74>)
 800073a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800073e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000742:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8000746:	691a      	ldr	r2, [r3, #16]
 8000748:	f042 0204 	orr.w	r2, r2, #4
 800074c:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <SystemInit+0x78>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	f042 0201 	orr.w	r2, r2, #1
 8000756:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800075c:	6818      	ldr	r0, [r3, #0]
 800075e:	4915      	ldr	r1, [pc, #84]	; (80007b4 <SystemInit+0x7c>)
 8000760:	4001      	ands	r1, r0
 8000762:	6019      	str	r1, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000764:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000766:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000768:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800076a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800076e:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000770:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000772:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000774:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000776:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000778:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800077a:	6819      	ldr	r1, [r3, #0]
 800077c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000780:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000782:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000784:	4a0c      	ldr	r2, [pc, #48]	; (80007b8 <SystemInit+0x80>)
 8000786:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <SystemInit+0x84>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <SystemInit+0x88>)
 8000794:	4013      	ands	r3, r2
 8000796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800079a:	d202      	bcs.n	80007a2 <SystemInit+0x6a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <SystemInit+0x8c>)
 800079e:	2201      	movs	r2, #1
 80007a0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80007a2:	4b02      	ldr	r3, [pc, #8]	; (80007ac <SystemInit+0x74>)
 80007a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007a8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80007aa:	4770      	bx	lr
 80007ac:	e000ed00 	.word	0xe000ed00
 80007b0:	58024400 	.word	0x58024400
 80007b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007b8:	580000c0 	.word	0x580000c0
 80007bc:	5c001000 	.word	0x5c001000
 80007c0:	ffff0000 	.word	0xffff0000
 80007c4:	51008108 	.word	0x51008108

080007c8 <arm_abs_f32>:

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;                  /* temporary variables */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 80007c8:	0893      	lsrs	r3, r2, #2

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 80007ca:	e01a      	b.n	8000802 <arm_abs_f32+0x3a>
  {
    /* C = |A| */
    /* Calculate absolute and then store the results in the destination buffer. */
    /* read sample from source */
    in1 = *pSrc;
 80007cc:	ed90 6a00 	vldr	s12, [r0]
    in2 = *(pSrc + 1);
 80007d0:	edd0 6a01 	vldr	s13, [r0, #4]
    in3 = *(pSrc + 2);
 80007d4:	ed90 7a02 	vldr	s14, [r0, #8]

    /* find absolute value */
    in1 = fabsf(in1);
 80007d8:	eeb0 6ac6 	vabs.f32	s12, s12

    /* read sample from source */
    in4 = *(pSrc + 3);
 80007dc:	edd0 7a03 	vldr	s15, [r0, #12]

    /* find absolute value */
    in2 = fabsf(in2);
 80007e0:	eef0 6ae6 	vabs.f32	s13, s13

    /* read sample from source */
    *pDst = in1;
 80007e4:	ed81 6a00 	vstr	s12, [r1]

    /* find absolute value */
    in3 = fabsf(in3);
 80007e8:	eeb0 7ac7 	vabs.f32	s14, s14

    /* find absolute value */
    in4 = fabsf(in4);
 80007ec:	eef0 7ae7 	vabs.f32	s15, s15

    /* store result to destination */
    *(pDst + 1) = in2;
 80007f0:	edc1 6a01 	vstr	s13, [r1, #4]

    /* store result to destination */
    *(pDst + 2) = in3;
 80007f4:	ed81 7a02 	vstr	s14, [r1, #8]

    /* store result to destination */
    *(pDst + 3) = in4;
 80007f8:	edc1 7a03 	vstr	s15, [r1, #12]


    /* Update source pointer to process next sampels */
    pSrc += 4U;
 80007fc:	3010      	adds	r0, #16

    /* Update destination pointer to process next sampels */
    pDst += 4U;
 80007fe:	3110      	adds	r1, #16

    /* Decrement the loop counter */
    blkCnt--;
 8000800:	3b01      	subs	r3, #1
  while (blkCnt > 0U)
 8000802:	2b00      	cmp	r3, #0
 8000804:	d1e2      	bne.n	80007cc <arm_abs_f32+0x4>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8000806:	f002 0203 	and.w	r2, r2, #3
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /*   #if defined (ARM_MATH_DSP)   */

  while (blkCnt > 0U)
 800080a:	e008      	b.n	800081e <arm_abs_f32+0x56>
  {
    /* C = |A| */
    /* Calculate absolute and then store the results in the destination buffer. */
    *pDst++ = fabsf(*pSrc++);
 800080c:	edd0 7a00 	vldr	s15, [r0]
 8000810:	eef0 7ae7 	vabs.f32	s15, s15
 8000814:	edc1 7a00 	vstr	s15, [r1]

    /* Decrement the loop counter */
    blkCnt--;
 8000818:	3a01      	subs	r2, #1
    *pDst++ = fabsf(*pSrc++);
 800081a:	3104      	adds	r1, #4
 800081c:	3004      	adds	r0, #4
  while (blkCnt > 0U)
 800081e:	2a00      	cmp	r2, #0
 8000820:	d1f4      	bne.n	800080c <arm_abs_f32+0x44>
  }
}
 8000822:	4770      	bx	lr

08000824 <arm_mult_f32>:
void arm_mult_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize)
{
 8000824:	b410      	push	{r4}
  float32_t inA1, inA2, inA3, inA4;              /* temporary input variables */
  float32_t inB1, inB2, inB3, inB4;              /* temporary input variables */
  float32_t out1, out2, out3, out4;              /* temporary output variables */

  /* loop Unrolling */
  blkCnt = blockSize >> 2U;
 8000826:	089c      	lsrs	r4, r3, #2

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8000828:	e023      	b.n	8000872 <arm_mult_f32+0x4e>
  {
    /* C = A * B */
    /* Multiply the inputs and store the results in output buffer */
    /* read sample from sourceA */
    inA1 = *pSrcA;
 800082a:	ed90 6a00 	vldr	s12, [r0]
    /* read sample from sourceB */
    inB1 = *pSrcB;
 800082e:	ed91 7a00 	vldr	s14, [r1]
    /* read sample from sourceA */
    inA2 = *(pSrcA + 1);
 8000832:	edd0 6a01 	vldr	s13, [r0, #4]
    /* read sample from sourceB */
    inB2 = *(pSrcB + 1);
 8000836:	edd1 7a01 	vldr	s15, [r1, #4]

    /* out = sourceA * sourceB */
    out1 = inA1 * inB1;
 800083a:	ee26 6a07 	vmul.f32	s12, s12, s14

    /* read sample from sourceA */
    inA3 = *(pSrcA + 2);
 800083e:	ed90 7a02 	vldr	s14, [r0, #8]
    /* read sample from sourceB */
    inB3 = *(pSrcB + 2);
 8000842:	edd1 5a02 	vldr	s11, [r1, #8]

    /* out = sourceA * sourceB */
    out2 = inA2 * inB2;
 8000846:	ee66 6aa7 	vmul.f32	s13, s13, s15

    /* read sample from sourceA */
    inA4 = *(pSrcA + 3);
 800084a:	edd0 7a03 	vldr	s15, [r0, #12]

    /* store result to destination buffer */
    *pDst = out1;
 800084e:	ed82 6a00 	vstr	s12, [r2]

    /* read sample from sourceB */
    inB4 = *(pSrcB + 3);
 8000852:	ed91 6a03 	vldr	s12, [r1, #12]

    /* out = sourceA * sourceB */
    out3 = inA3 * inB3;
 8000856:	ee27 7a25 	vmul.f32	s14, s14, s11

    /* store result to destination buffer */
    *(pDst + 1) = out2;
 800085a:	edc2 6a01 	vstr	s13, [r2, #4]

    /* out = sourceA * sourceB */
    out4 = inA4 * inB4;
 800085e:	ee67 7a86 	vmul.f32	s15, s15, s12
    /* store result to destination buffer */
    *(pDst + 2) = out3;
 8000862:	ed82 7a02 	vstr	s14, [r2, #8]
    /* store result to destination buffer */
    *(pDst + 3) = out4;
 8000866:	edc2 7a03 	vstr	s15, [r2, #12]


    /* update pointers to process next samples */
    pSrcA += 4U;
 800086a:	3010      	adds	r0, #16
    pSrcB += 4U;
 800086c:	3110      	adds	r1, #16
    pDst += 4U;
 800086e:	3210      	adds	r2, #16

    /* Decrement the blockSize loop counter */
    blkCnt--;
 8000870:	3c01      	subs	r4, #1
  while (blkCnt > 0U)
 8000872:	2c00      	cmp	r4, #0
 8000874:	d1d9      	bne.n	800082a <arm_mult_f32+0x6>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8000876:	f003 0303 	and.w	r3, r3, #3
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 800087a:	e00b      	b.n	8000894 <arm_mult_f32+0x70>
  {
    /* C = A * B */
    /* Multiply the inputs and store the results in output buffer */
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 800087c:	edd0 7a00 	vldr	s15, [r0]
 8000880:	ed91 7a00 	vldr	s14, [r1]
 8000884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000888:	edc2 7a00 	vstr	s15, [r2]

    /* Decrement the blockSize loop counter */
    blkCnt--;
 800088c:	3b01      	subs	r3, #1
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 800088e:	3204      	adds	r2, #4
 8000890:	3104      	adds	r1, #4
 8000892:	3004      	adds	r0, #4
  while (blkCnt > 0U)
 8000894:	2b00      	cmp	r3, #0
 8000896:	d1f1      	bne.n	800087c <arm_mult_f32+0x58>
  }
}
 8000898:	f85d 4b04 	ldr.w	r4, [sp], #4
 800089c:	4770      	bx	lr

0800089e <arm_sub_f32>:
void arm_sub_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize)
{
 800089e:	b410      	push	{r4}
/* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t inA1, inA2, inA3, inA4;              /* temporary variables */
  float32_t inB1, inB2, inB3, inB4;              /* temporary variables */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 80008a0:	089c      	lsrs	r4, r3, #2

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 80008a2:	e023      	b.n	80008ec <arm_sub_f32+0x4e>
  {
    /* C = A - B */
    /* Subtract and then store the results in the destination buffer. */
    /* Read 4 input samples from sourceA and sourceB */
    inA1 = *pSrcA;
 80008a4:	ed90 6a00 	vldr	s12, [r0]
    inB1 = *pSrcB;
 80008a8:	ed91 4a00 	vldr	s8, [r1]
    inA2 = *(pSrcA + 1);
 80008ac:	edd0 6a01 	vldr	s13, [r0, #4]
    inB2 = *(pSrcB + 1);
 80008b0:	edd1 4a01 	vldr	s9, [r1, #4]
    inA3 = *(pSrcA + 2);
 80008b4:	ed90 7a02 	vldr	s14, [r0, #8]
    inB3 = *(pSrcB + 2);
 80008b8:	ed91 5a02 	vldr	s10, [r1, #8]
    inA4 = *(pSrcA + 3);
 80008bc:	edd0 7a03 	vldr	s15, [r0, #12]
    inB4 = *(pSrcB + 3);
 80008c0:	edd1 5a03 	vldr	s11, [r1, #12]

    /* dst = srcA - srcB */
    /* subtract and store the result */
    *pDst = inA1 - inB1;
 80008c4:	ee36 6a44 	vsub.f32	s12, s12, s8
 80008c8:	ed82 6a00 	vstr	s12, [r2]
    *(pDst + 1) = inA2 - inB2;
 80008cc:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80008d0:	edc2 6a01 	vstr	s13, [r2, #4]
    *(pDst + 2) = inA3 - inB3;
 80008d4:	ee37 7a45 	vsub.f32	s14, s14, s10
 80008d8:	ed82 7a02 	vstr	s14, [r2, #8]
    *(pDst + 3) = inA4 - inB4;
 80008dc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80008e0:	edc2 7a03 	vstr	s15, [r2, #12]


    /* Update pointers to process next sampels */
    pSrcA += 4U;
 80008e4:	3010      	adds	r0, #16
    pSrcB += 4U;
 80008e6:	3110      	adds	r1, #16
    pDst += 4U;
 80008e8:	3210      	adds	r2, #16

    /* Decrement the loop counter */
    blkCnt--;
 80008ea:	3c01      	subs	r4, #1
  while (blkCnt > 0U)
 80008ec:	2c00      	cmp	r4, #0
 80008ee:	d1d9      	bne.n	80008a4 <arm_sub_f32+0x6>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 80008f0:	f003 0303 	and.w	r3, r3, #3
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 80008f4:	e00b      	b.n	800090e <arm_sub_f32+0x70>
  {
    /* C = A - B */
    /* Subtract and then store the results in the destination buffer. */
    *pDst++ = (*pSrcA++) - (*pSrcB++);
 80008f6:	edd0 7a00 	vldr	s15, [r0]
 80008fa:	ed91 7a00 	vldr	s14, [r1]
 80008fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000902:	edc2 7a00 	vstr	s15, [r2]

    /* Decrement the loop counter */
    blkCnt--;
 8000906:	3b01      	subs	r3, #1
    *pDst++ = (*pSrcA++) - (*pSrcB++);
 8000908:	3204      	adds	r2, #4
 800090a:	3104      	adds	r1, #4
 800090c:	3004      	adds	r0, #4
  while (blkCnt > 0U)
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1f1      	bne.n	80008f6 <arm_sub_f32+0x58>
  }
}
 8000912:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000916:	4770      	bx	lr

08000918 <arm_cmplx_conj_f32>:

void arm_cmplx_conj_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8000918:	b430      	push	{r4, r5}
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t inR1, inR2, inR3, inR4;
  float32_t inI1, inI2, inI3, inI4;

  /*loop Unrolling */
  blkCnt = numSamples >> 2U;
 800091a:	0893      	lsrs	r3, r2, #2

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 800091c:	e022      	b.n	8000964 <arm_cmplx_conj_f32+0x4c>
  {
    /* C[0]+jC[1] = A[0]+ j (-1) A[1] */
    /* Calculate Complex Conjugate and then store the results in the destination buffer. */
    /* read real input samples */
    inR1 = pSrc[0];
 800091e:	6804      	ldr	r4, [r0, #0]
    /* store real samples to destination */
    pDst[0] = inR1;
 8000920:	600c      	str	r4, [r1, #0]
    inR2 = pSrc[2];
 8000922:	6884      	ldr	r4, [r0, #8]
    pDst[2] = inR2;
 8000924:	608c      	str	r4, [r1, #8]
    inR3 = pSrc[4];
 8000926:	6904      	ldr	r4, [r0, #16]
    pDst[4] = inR3;
 8000928:	610c      	str	r4, [r1, #16]
    inR4 = pSrc[6];
 800092a:	6984      	ldr	r4, [r0, #24]
    pDst[6] = inR4;
 800092c:	618c      	str	r4, [r1, #24]

    /* read imaginary input samples */
    inI1 = pSrc[1];
 800092e:	ed90 6a01 	vldr	s12, [r0, #4]
    inI2 = pSrc[3];
 8000932:	edd0 6a03 	vldr	s13, [r0, #12]

    /* conjugate input */
    inI1 = -inI1;
 8000936:	eeb1 6a46 	vneg.f32	s12, s12

    /* read imaginary input samples */
    inI3 = pSrc[5];
 800093a:	ed90 7a05 	vldr	s14, [r0, #20]

    /* conjugate input */
    inI2 = -inI2;
 800093e:	eef1 6a66 	vneg.f32	s13, s13

    /* read imaginary input samples */
    inI4 = pSrc[7];
 8000942:	edd0 7a07 	vldr	s15, [r0, #28]

    /* conjugate input */
    inI3 = -inI3;
 8000946:	eeb1 7a47 	vneg.f32	s14, s14

    /* store imaginary samples to destination */
    pDst[1] = inI1;
 800094a:	ed81 6a01 	vstr	s12, [r1, #4]
    pDst[3] = inI2;
 800094e:	edc1 6a03 	vstr	s13, [r1, #12]

    /* conjugate input */
    inI4 = -inI4;
 8000952:	eef1 7a67 	vneg.f32	s15, s15

    /* store imaginary samples to destination */
    pDst[5] = inI3;
 8000956:	ed81 7a05 	vstr	s14, [r1, #20]

    /* increment source pointer by 8 to process next sampels */
    pSrc += 8U;
 800095a:	3020      	adds	r0, #32

    /* store imaginary sample to destination */
    pDst[7] = inI4;
 800095c:	edc1 7a07 	vstr	s15, [r1, #28]

    /* increment destination pointer by 8 to store next samples */
    pDst += 8U;
 8000960:	3120      	adds	r1, #32

    /* Decrement the loop counter */
    blkCnt--;
 8000962:	3b01      	subs	r3, #1
  while (blkCnt > 0U)
 8000964:	2b00      	cmp	r3, #0
 8000966:	d1da      	bne.n	800091e <arm_cmplx_conj_f32+0x6>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4U;
 8000968:	f002 0203 	and.w	r2, r2, #3
  /* Run the below code for Cortex-M0 */
  blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 800096c:	e00e      	b.n	800098c <arm_cmplx_conj_f32+0x74>
  {
    /* realOut + j (imagOut) = realIn + j (-1) imagIn */
    /* Calculate Complex Conjugate and then store the results in the destination buffer. */
    *pDst++ = *pSrc++;
 800096e:	4603      	mov	r3, r0
 8000970:	f853 5b08 	ldr.w	r5, [r3], #8
 8000974:	460c      	mov	r4, r1
 8000976:	f844 5b08 	str.w	r5, [r4], #8
    *pDst++ = -*pSrc++;
 800097a:	edd0 7a01 	vldr	s15, [r0, #4]
 800097e:	eef1 7a67 	vneg.f32	s15, s15
 8000982:	edc1 7a01 	vstr	s15, [r1, #4]

    /* Decrement the loop counter */
    blkCnt--;
 8000986:	3a01      	subs	r2, #1
    *pDst++ = -*pSrc++;
 8000988:	4621      	mov	r1, r4
 800098a:	4618      	mov	r0, r3
  while (blkCnt > 0U)
 800098c:	2a00      	cmp	r2, #0
 800098e:	d1ee      	bne.n	800096e <arm_cmplx_conj_f32+0x56>
  }
}
 8000990:	bc30      	pop	{r4, r5}
 8000992:	4770      	bx	lr

08000994 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8000994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000998:	4604      	mov	r4, r0
 800099a:	460d      	mov	r5, r1
 800099c:	4617      	mov	r7, r2

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2U;
 800099e:	0896      	lsrs	r6, r2, #2

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 80009a0:	e015      	b.n	80009ce <arm_cmplx_mag_f32+0x3a>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 80009a2:	f007 f939 	bl	8007c18 <sqrtf>
 80009a6:	ed85 0a00 	vstr	s0, [r5]
 80009aa:	e023      	b.n	80009f4 <arm_cmplx_mag_f32+0x60>
 80009ac:	f007 f934 	bl	8007c18 <sqrtf>
 80009b0:	ed85 0a01 	vstr	s0, [r5, #4]
 80009b4:	e02f      	b.n	8000a16 <arm_cmplx_mag_f32+0x82>
 80009b6:	f007 f92f 	bl	8007c18 <sqrtf>
 80009ba:	ed85 0a02 	vstr	s0, [r5, #8]
 80009be:	e03b      	b.n	8000a38 <arm_cmplx_mag_f32+0xa4>
 80009c0:	f007 f92a 	bl	8007c18 <sqrtf>
 80009c4:	ed85 0a03 	vstr	s0, [r5, #12]
    imagIn = *pSrc++;
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);


    /* Decrement the loop counter */
    blkCnt--;
 80009c8:	3e01      	subs	r6, #1
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80009ca:	4625      	mov	r5, r4
    imagIn = *pSrc++;
 80009cc:	4644      	mov	r4, r8
  while (blkCnt > 0U)
 80009ce:	2e00      	cmp	r6, #0
 80009d0:	d048      	beq.n	8000a64 <arm_cmplx_mag_f32+0xd0>
    realIn = *pSrc++;
 80009d2:	ed94 0a00 	vldr	s0, [r4]
    imagIn = *pSrc++;
 80009d6:	edd4 7a01 	vldr	s15, [r4, #4]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80009da:	ee20 0a00 	vmul.f32	s0, s0, s0
 80009de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80009e2:	ee30 0a27 	vadd.f32	s0, s0, s15
    if (in >= 0.0f)
 80009e6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80009ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ee:	dad8      	bge.n	80009a2 <arm_cmplx_mag_f32+0xe>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80009f0:	2300      	movs	r3, #0
 80009f2:	602b      	str	r3, [r5, #0]
    realIn = *pSrc++;
 80009f4:	ed94 0a02 	vldr	s0, [r4, #8]
    imagIn = *pSrc++;
 80009f8:	edd4 7a03 	vldr	s15, [r4, #12]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80009fc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8000a00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000a04:	ee30 0a27 	vadd.f32	s0, s0, s15
    if (in >= 0.0f)
 8000a08:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a10:	dacc      	bge.n	80009ac <arm_cmplx_mag_f32+0x18>
      *pOut = 0.0f;
 8000a12:	2300      	movs	r3, #0
 8000a14:	606b      	str	r3, [r5, #4]
    realIn = *pSrc++;
 8000a16:	ed94 0a04 	vldr	s0, [r4, #16]
    imagIn = *pSrc++;
 8000a1a:	edd4 7a05 	vldr	s15, [r4, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000a1e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8000a22:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000a26:	ee30 0a27 	vadd.f32	s0, s0, s15
    if (in >= 0.0f)
 8000a2a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a32:	dac0      	bge.n	80009b6 <arm_cmplx_mag_f32+0x22>
      *pOut = 0.0f;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60ab      	str	r3, [r5, #8]
    realIn = *pSrc++;
 8000a38:	ed94 0a06 	vldr	s0, [r4, #24]
    imagIn = *pSrc++;
 8000a3c:	f104 0820 	add.w	r8, r4, #32
 8000a40:	edd4 7a07 	vldr	s15, [r4, #28]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000a44:	ee20 0a00 	vmul.f32	s0, s0, s0
 8000a48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000a4c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000a50:	f105 0410 	add.w	r4, r5, #16
    if (in >= 0.0f)
 8000a54:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a5c:	dab0      	bge.n	80009c0 <arm_cmplx_mag_f32+0x2c>
      *pOut = 0.0f;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60eb      	str	r3, [r5, #12]
 8000a62:	e7b1      	b.n	80009c8 <arm_cmplx_mag_f32+0x34>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4U;
 8000a64:	f007 0703 	and.w	r7, r7, #3

  while (blkCnt > 0U)
 8000a68:	e006      	b.n	8000a78 <arm_cmplx_mag_f32+0xe4>
      *pOut = __builtin_sqrtf(in);
 8000a6a:	f007 f8d5 	bl	8007c18 <sqrtf>
 8000a6e:	ed85 0a00 	vstr	s0, [r5]
    imagIn = *pSrc++;
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);

    /* Decrement the loop counter */
    blkCnt--;
 8000a72:	3f01      	subs	r7, #1
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000a74:	4625      	mov	r5, r4
    imagIn = *pSrc++;
 8000a76:	4634      	mov	r4, r6
  while (blkCnt > 0U)
 8000a78:	b1a7      	cbz	r7, 8000aa4 <arm_cmplx_mag_f32+0x110>
    realIn = *pSrc++;
 8000a7a:	4626      	mov	r6, r4
 8000a7c:	3608      	adds	r6, #8
 8000a7e:	ed94 0a00 	vldr	s0, [r4]
    imagIn = *pSrc++;
 8000a82:	edd4 7a01 	vldr	s15, [r4, #4]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000a86:	ee20 0a00 	vmul.f32	s0, s0, s0
 8000a8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000a8e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000a92:	1d2c      	adds	r4, r5, #4
    if (in >= 0.0f)
 8000a94:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a9c:	dae5      	bge.n	8000a6a <arm_cmplx_mag_f32+0xd6>
      *pOut = 0.0f;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	602b      	str	r3, [r5, #0]
 8000aa2:	e7e6      	b.n	8000a72 <arm_cmplx_mag_f32+0xde>
    numSamples--;
  }

#endif /* #if defined (ARM_MATH_DSP) */

}
 8000aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000aa8 <arm_cmplx_mult_cmplx_f32>:
void arm_cmplx_mult_cmplx_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t numSamples)
{
 8000aa8:	b410      	push	{r4}
  float32_t a2, b2, c2, d2;                      /* Temporary variables to store real and imaginary values */
  float32_t acc1, acc2, acc3, acc4;


  /* loop Unrolling */
  blkCnt = numSamples >> 2U;
 8000aaa:	089c      	lsrs	r4, r3, #2

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8000aac:	e063      	b.n	8000b76 <arm_cmplx_mult_cmplx_f32+0xce>
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA;                /* A[2 * i] */
 8000aae:	ed90 7a00 	vldr	s14, [r0]
    c1 = *pSrcB;                /* B[2 * i] */
 8000ab2:	edd1 6a00 	vldr	s13, [r1]

    b1 = *(pSrcA + 1);          /* A[2 * i + 1] */
 8000ab6:	edd0 5a01 	vldr	s11, [r0, #4]
    acc1 = a1 * c1;             /* acc1 = A[2 * i] * B[2 * i] */
 8000aba:	ee27 4a26 	vmul.f32	s8, s14, s13

    a2 = *(pSrcA + 2);          /* A[2 * i + 2] */
 8000abe:	ed90 6a02 	vldr	s12, [r0, #8]
    acc2 = (b1 * c1);           /* acc2 = A[2 * i + 1] * B[2 * i] */
 8000ac2:	ee66 6aa5 	vmul.f32	s13, s13, s11

    d1 = *(pSrcB + 1);          /* B[2 * i + 1] */
 8000ac6:	ed91 5a01 	vldr	s10, [r1, #4]
    c2 = *(pSrcB + 2);          /* B[2 * i + 2] */
 8000aca:	edd1 7a02 	vldr	s15, [r1, #8]
    acc1 -= b1 * d1;            /* acc1 =      A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1] */
 8000ace:	ee65 5a85 	vmul.f32	s11, s11, s10
 8000ad2:	ee34 4a65 	vsub.f32	s8, s8, s11

    d2 = *(pSrcB + 3);          /* B[2 * i + 3] */
 8000ad6:	edd1 5a03 	vldr	s11, [r1, #12]
    acc3 = a2 * c2;             /* acc3 =       A[2 * i + 2] * B[2 * i + 2] */
 8000ada:	ee66 4a27 	vmul.f32	s9, s12, s15

    b2 = *(pSrcA + 3);          /* A[2 * i + 3] */
 8000ade:	edd0 3a03 	vldr	s7, [r0, #12]
    acc2 += (a1 * d1);          /* acc2 =      A[2 * i + 1] * B[2 * i] + A[2 * i] * B[2 * i + 1] */
 8000ae2:	ee27 7a05 	vmul.f32	s14, s14, s10
 8000ae6:	ee77 6a26 	vadd.f32	s13, s14, s13

    a1 = *(pSrcA + 4);          /* A[2 * i + 4] */
 8000aea:	ed90 7a04 	vldr	s14, [r0, #16]
    acc4 = (a2 * d2);           /* acc4 =   A[2 * i + 2] * B[2 * i + 3] */
 8000aee:	ee26 5a25 	vmul.f32	s10, s12, s11

    c1 = *(pSrcB + 4);          /* B[2 * i + 4] */
 8000af2:	ed91 6a04 	vldr	s12, [r1, #16]
    acc3 -= (b2 * d2);          /* acc3 =       A[2 * i + 2] * B[2 * i + 2] - A[2 * i + 3] * B[2 * i + 3] */
 8000af6:	ee65 5aa3 	vmul.f32	s11, s11, s7
 8000afa:	ee74 4ae5 	vsub.f32	s9, s9, s11
    *pDst = acc1;               /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1] */
 8000afe:	ed82 4a00 	vstr	s8, [r2]

    b1 = *(pSrcA + 5);          /* A[2 * i + 5] */
 8000b02:	edd0 5a05 	vldr	s11, [r0, #20]
    acc4 += b2 * c2;            /* acc4 =   A[2 * i + 2] * B[2 * i + 3] + A[2 * i + 3] * B[2 * i + 2] */
 8000b06:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8000b0a:	ee77 7a85 	vadd.f32	s15, s15, s10

    *(pDst + 1) = acc2;         /* C[2 * i + 1] = A[2 * i + 1] * B[2 * i] + A[2 * i] * B[2 * i + 1]  */
 8000b0e:	edc2 6a01 	vstr	s13, [r2, #4]
    acc1 = (a1 * c1);
 8000b12:	ee67 6a06 	vmul.f32	s13, s14, s12

    d1 = *(pSrcB + 5);
 8000b16:	ed91 5a05 	vldr	s10, [r1, #20]
    acc2 = (b1 * c1);
 8000b1a:	ee26 6a25 	vmul.f32	s12, s12, s11

    *(pDst + 2) = acc3;
 8000b1e:	edc2 4a02 	vstr	s9, [r2, #8]
    *(pDst + 3) = acc4;
 8000b22:	edc2 7a03 	vstr	s15, [r2, #12]

    a2 = *(pSrcA + 6);
 8000b26:	edd0 7a06 	vldr	s15, [r0, #24]
    acc1 -= (b1 * d1);
 8000b2a:	ee65 5a85 	vmul.f32	s11, s11, s10
 8000b2e:	ee76 5ae5 	vsub.f32	s11, s13, s11

    c2 = *(pSrcB + 6);
 8000b32:	edd1 6a06 	vldr	s13, [r1, #24]
    acc2 += (a1 * d1);
 8000b36:	ee27 7a05 	vmul.f32	s14, s14, s10
 8000b3a:	ee37 7a06 	vadd.f32	s14, s14, s12

    b2 = *(pSrcA + 7);
 8000b3e:	ed90 6a07 	vldr	s12, [r0, #28]
    acc3 = (a2 * c2);
 8000b42:	ee27 5aa6 	vmul.f32	s10, s15, s13

    d2 = *(pSrcB + 7);
 8000b46:	edd1 4a07 	vldr	s9, [r1, #28]
    acc4 = (b2 * c2);
 8000b4a:	ee66 6a86 	vmul.f32	s13, s13, s12

    *(pDst + 4) = acc1;
 8000b4e:	edc2 5a04 	vstr	s11, [r2, #16]
    pSrcA += 8U;
 8000b52:	3020      	adds	r0, #32

    acc3 -= (b2 * d2);
 8000b54:	ee26 6a24 	vmul.f32	s12, s12, s9
 8000b58:	ee35 6a46 	vsub.f32	s12, s10, s12
    acc4 += (a2 * d2);
 8000b5c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8000b60:	ee77 7aa6 	vadd.f32	s15, s15, s13

    *(pDst + 5) = acc2;
 8000b64:	ed82 7a05 	vstr	s14, [r2, #20]
    pSrcB += 8U;
 8000b68:	3120      	adds	r1, #32

    *(pDst + 6) = acc3;
 8000b6a:	ed82 6a06 	vstr	s12, [r2, #24]
    *(pDst + 7) = acc4;
 8000b6e:	edc2 7a07 	vstr	s15, [r2, #28]

    pDst += 8U;
 8000b72:	3220      	adds	r2, #32

    /* Decrement the numSamples loop counter */
    blkCnt--;
 8000b74:	3c01      	subs	r4, #1
  while (blkCnt > 0U)
 8000b76:	2c00      	cmp	r4, #0
 8000b78:	d199      	bne.n	8000aae <arm_cmplx_mult_cmplx_f32+0x6>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4U;
 8000b7a:	f003 0303 	and.w	r3, r3, #3
  /* Run the below code for Cortex-M0 */
  blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8000b7e:	e022      	b.n	8000bc6 <arm_cmplx_mult_cmplx_f32+0x11e>
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA++;
 8000b80:	4604      	mov	r4, r0
 8000b82:	3408      	adds	r4, #8
 8000b84:	edd0 7a00 	vldr	s15, [r0]
    b1 = *pSrcA++;
 8000b88:	ed90 7a01 	vldr	s14, [r0, #4]
    c1 = *pSrcB++;
 8000b8c:	4608      	mov	r0, r1
 8000b8e:	3008      	adds	r0, #8
 8000b90:	ed91 6a00 	vldr	s12, [r1]
    d1 = *pSrcB++;
 8000b94:	edd1 5a01 	vldr	s11, [r1, #4]

    /* store the result in the destination buffer. */
    *pDst++ = (a1 * c1) - (b1 * d1);
 8000b98:	ee67 6a86 	vmul.f32	s13, s15, s12
 8000b9c:	ee27 5a25 	vmul.f32	s10, s14, s11
 8000ba0:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	ee16 ca90 	vmov	ip, s13
 8000baa:	f841 cb08 	str.w	ip, [r1], #8
    *pDst++ = (a1 * d1) + (b1 * c1);
 8000bae:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8000bb2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8000bb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000bba:	edc2 7a01 	vstr	s15, [r2, #4]

    /* Decrement the numSamples loop counter */
    blkCnt--;
 8000bbe:	3b01      	subs	r3, #1
    *pDst++ = (a1 * d1) + (b1 * c1);
 8000bc0:	460a      	mov	r2, r1
    d1 = *pSrcB++;
 8000bc2:	4601      	mov	r1, r0
    b1 = *pSrcA++;
 8000bc4:	4620      	mov	r0, r4
  while (blkCnt > 0U)
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1da      	bne.n	8000b80 <arm_cmplx_mult_cmplx_f32+0xd8>
  }
}
 8000bca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 8000bd0:	b4f0      	push	{r4, r5, r6, r7}
  /* Initialise the count value. */
  count = 0U;
  /* Initialise the index value to zero. */
  outIndex = 0U;
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8000bd2:	1d04      	adds	r4, r0, #4
 8000bd4:	edd0 7a00 	vldr	s15, [r0]

  /* Loop unrolling */
  blkCnt = (blockSize - 1U) >> 2U;
 8000bd8:	1e48      	subs	r0, r1, #1
 8000bda:	0886      	lsrs	r6, r0, #2
  count = 0U;
 8000bdc:	2500      	movs	r5, #0
  outIndex = 0U;
 8000bde:	462f      	mov	r7, r5

  while (blkCnt > 0U)
 8000be0:	e002      	b.n	8000be8 <arm_max_f32+0x18>
      /* Update the maximum value and its index */
      out = maxVal2;
      outIndex = count + 4U;
    }

    count += 4U;
 8000be2:	3504      	adds	r5, #4

    /* Decrement the loop counter */
    blkCnt--;
 8000be4:	3e01      	subs	r6, #1
    maxVal2 = *pSrc++;
 8000be6:	4664      	mov	r4, ip
  while (blkCnt > 0U)
 8000be8:	b356      	cbz	r6, 8000c40 <arm_max_f32+0x70>
    maxVal1 = *pSrc++;
 8000bea:	edd4 6a00 	vldr	s13, [r4]
    maxVal2 = *pSrc++;
 8000bee:	ed94 7a01 	vldr	s14, [r4, #4]
    if (out < maxVal1)
 8000bf2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8000bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bfa:	d502      	bpl.n	8000c02 <arm_max_f32+0x32>
      outIndex = count + 1U;
 8000bfc:	1c6f      	adds	r7, r5, #1
      out = maxVal1;
 8000bfe:	eef0 7a66 	vmov.f32	s15, s13
    if (out < maxVal2)
 8000c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c0a:	d502      	bpl.n	8000c12 <arm_max_f32+0x42>
      outIndex = count + 2U;
 8000c0c:	1caf      	adds	r7, r5, #2
      out = maxVal2;
 8000c0e:	eef0 7a47 	vmov.f32	s15, s14
    maxVal1 = *pSrc++;
 8000c12:	edd4 6a02 	vldr	s13, [r4, #8]
    maxVal2 = *pSrc++;
 8000c16:	f104 0c10 	add.w	ip, r4, #16
 8000c1a:	ed94 7a03 	vldr	s14, [r4, #12]
    if (out < maxVal1)
 8000c1e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8000c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c26:	d502      	bpl.n	8000c2e <arm_max_f32+0x5e>
      outIndex = count + 3U;
 8000c28:	1cef      	adds	r7, r5, #3
      out = maxVal1;
 8000c2a:	eef0 7a66 	vmov.f32	s15, s13
    if (out < maxVal2)
 8000c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c36:	d5d4      	bpl.n	8000be2 <arm_max_f32+0x12>
      outIndex = count + 4U;
 8000c38:	1d2f      	adds	r7, r5, #4
      out = maxVal2;
 8000c3a:	eef0 7a47 	vmov.f32	s15, s14
 8000c3e:	e7d0      	b.n	8000be2 <arm_max_f32+0x12>
  }

  /* if (blockSize - 1U) is not multiple of 4 */
  blkCnt = (blockSize - 1U) % 4U;
 8000c40:	f000 0003 	and.w	r0, r0, #3

  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8000c44:	e001      	b.n	8000c4a <arm_max_f32+0x7a>
      out = maxVal1;
      outIndex = blockSize - blkCnt;
    }

    /* Decrement the loop counter */
    blkCnt--;
 8000c46:	3801      	subs	r0, #1
    maxVal1 = *pSrc++;
 8000c48:	462c      	mov	r4, r5
  while (blkCnt > 0U)
 8000c4a:	b158      	cbz	r0, 8000c64 <arm_max_f32+0x94>
    maxVal1 = *pSrc++;
 8000c4c:	1d25      	adds	r5, r4, #4
 8000c4e:	ed94 7a00 	vldr	s14, [r4]
    if (out < maxVal1)
 8000c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c5a:	d5f4      	bpl.n	8000c46 <arm_max_f32+0x76>
      outIndex = blockSize - blkCnt;
 8000c5c:	1a0f      	subs	r7, r1, r0
      out = maxVal1;
 8000c5e:	eef0 7a47 	vmov.f32	s15, s14
 8000c62:	e7f0      	b.n	8000c46 <arm_max_f32+0x76>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8000c64:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
 8000c68:	601f      	str	r7, [r3, #0]
}
 8000c6a:	bcf0      	pop	{r4, r5, r6, r7}
 8000c6c:	4770      	bx	lr
	...

08000c70 <arm_mean_f32>:
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t in1, in2, in3, in4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8000c70:	088b      	lsrs	r3, r1, #2
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8000c72:	eddf 7a15 	vldr	s15, [pc, #84]	; 8000cc8 <arm_mean_f32+0x58>

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8000c76:	e011      	b.n	8000c9c <arm_mean_f32+0x2c>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    in1 = *pSrc++;
 8000c78:	edd0 5a00 	vldr	s11, [r0]
    in2 = *pSrc++;
 8000c7c:	edd0 6a01 	vldr	s13, [r0, #4]
    in3 = *pSrc++;
 8000c80:	ed90 7a02 	vldr	s14, [r0, #8]
    in4 = *pSrc++;
 8000c84:	ed90 6a03 	vldr	s12, [r0, #12]

    sum += in1;
 8000c88:	ee77 7aa5 	vadd.f32	s15, s15, s11
    sum += in2;
 8000c8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
    sum += in3;
 8000c90:	ee77 7a27 	vadd.f32	s15, s14, s15
    sum += in4;
 8000c94:	ee76 7a27 	vadd.f32	s15, s12, s15

    /* Decrement the loop counter */
    blkCnt--;
 8000c98:	3b01      	subs	r3, #1
    in4 = *pSrc++;
 8000c9a:	3010      	adds	r0, #16
  while (blkCnt > 0U)
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d1eb      	bne.n	8000c78 <arm_mean_f32+0x8>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8000ca0:	f001 0303 	and.w	r3, r1, #3
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8000ca4:	e005      	b.n	8000cb2 <arm_mean_f32+0x42>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8000ca6:	ed90 7a00 	vldr	s14, [r0]
 8000caa:	ee77 7a87 	vadd.f32	s15, s15, s14

    /* Decrement the loop counter */
    blkCnt--;
 8000cae:	3b01      	subs	r3, #1
    sum += *pSrc++;
 8000cb0:	3004      	adds	r0, #4
  while (blkCnt > 0U)
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1f7      	bne.n	8000ca6 <arm_mean_f32+0x36>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store the result to the destination */
  *pResult = sum / (float32_t) blockSize;
 8000cb6:	ee07 1a10 	vmov	s14, r1
 8000cba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000cbe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000cc2:	edc2 6a00 	vstr	s13, [r2]
}
 8000cc6:	4770      	bx	lr
 8000cc8:	00000000 	.word	0x00000000

08000ccc <arm_std_f32>:

void arm_std_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8000ccc:	b510      	push	{r4, lr}
 8000cce:	4614      	mov	r4, r2
#else
  float32_t squareOfSum;                         /* Square of Sum */
  float32_t var;                                 /* Temporary varaince storage */
#endif

  if (blockSize == 1U)
 8000cd0:	2901      	cmp	r1, #1
 8000cd2:	d005      	beq.n	8000ce0 <arm_std_f32+0x14>

#if defined (ARM_MATH_DSP)
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8000cd4:	088b      	lsrs	r3, r1, #2
  float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 8000cd6:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8000d90 <arm_std_f32+0xc4>
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8000cda:	eeb0 7a67 	vmov.f32	s14, s15

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8000cde:	e024      	b.n	8000d2a <arm_std_f32+0x5e>
    *pResult = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	6013      	str	r3, [r2, #0]
    return;
 8000ce4:	e04d      	b.n	8000d82 <arm_std_f32+0xb6>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
    /* Compute Sum of squares of the input samples
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8000ce6:	edd0 6a00 	vldr	s13, [r0]
    sum += in;
 8000cea:	ee37 7a26 	vadd.f32	s14, s14, s13
    sumOfSquares += in * in;
 8000cee:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8000cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
    in = *pSrc++;
 8000cf6:	edd0 6a01 	vldr	s13, [r0, #4]
    sum += in;
 8000cfa:	ee37 7a26 	vadd.f32	s14, s14, s13
    sumOfSquares += in * in;
 8000cfe:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8000d02:	ee76 6aa7 	vadd.f32	s13, s13, s15
    in = *pSrc++;
 8000d06:	edd0 7a02 	vldr	s15, [r0, #8]
    sum += in;
 8000d0a:	ee37 7a27 	vadd.f32	s14, s14, s15
    sumOfSquares += in * in;
 8000d0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d12:	ee77 6aa6 	vadd.f32	s13, s15, s13
    in = *pSrc++;
 8000d16:	edd0 7a03 	vldr	s15, [r0, #12]
    sum += in;
 8000d1a:	ee37 7a27 	vadd.f32	s14, s14, s15
    sumOfSquares += in * in;
 8000d1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d22:	ee77 7aa6 	vadd.f32	s15, s15, s13

    /* Decrement the loop counter */
    blkCnt--;
 8000d26:	3b01      	subs	r3, #1
    in = *pSrc++;
 8000d28:	3010      	adds	r0, #16
  while (blkCnt > 0U)
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1db      	bne.n	8000ce6 <arm_std_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8000d2e:	f001 0303 	and.w	r3, r1, #3

  while (blkCnt > 0U)
 8000d32:	e009      	b.n	8000d48 <arm_std_f32+0x7c>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
    /* Compute Sum of squares of the input samples
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8000d34:	edd0 6a00 	vldr	s13, [r0]
    sum += in;
 8000d38:	ee37 7a26 	vadd.f32	s14, s14, s13
    sumOfSquares += in * in;
 8000d3c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8000d40:	ee77 7aa6 	vadd.f32	s15, s15, s13

    /* Decrement the loop counter */
    blkCnt--;
 8000d44:	3b01      	subs	r3, #1
    in = *pSrc++;
 8000d46:	3004      	adds	r0, #4
  while (blkCnt > 0U)
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1f3      	bne.n	8000d34 <arm_std_f32+0x68>
  }

  /* Compute Mean of squares of the input samples
   * and then store the result in a temporary variable, meanOfSquares. */
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 8000d4c:	ee06 1a90 	vmov	s13, r1
 8000d50:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8000d54:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000d58:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8000d5c:	ee87 0a86 	vdiv.f32	s0, s15, s12

  /* Compute mean of all input values */
  mean = sum / (float32_t) blockSize;
 8000d60:	eec7 7a26 	vdiv.f32	s15, s14, s13

  /* Compute square of mean */
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8000d64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d68:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8000d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
                                  ((float32_t) blockSize - 1.0f));

  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32((meanOfSquares - squareOfMean), pResult);
 8000d70:	ee30 0a67 	vsub.f32	s0, s0, s15
    if (in >= 0.0f)
 8000d74:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7c:	da02      	bge.n	8000d84 <arm_std_f32+0xb8>
      *pOut = 0.0f;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	6023      	str	r3, [r4, #0]

  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32(var, pResult);

#endif /* #if defined (ARM_MATH_DSP) */
}
 8000d82:	bd10      	pop	{r4, pc}
      *pOut = __builtin_sqrtf(in);
 8000d84:	f006 ff48 	bl	8007c18 <sqrtf>
 8000d88:	ed84 0a00 	vstr	s0, [r4]
 8000d8c:	e7f9      	b.n	8000d82 <arm_std_f32+0xb6>
 8000d8e:	bf00      	nop
 8000d90:	00000000 	.word	0x00000000

08000d94 <arm_copy_f32>:

void arm_copy_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize)
{
 8000d94:	b4f0      	push	{r4, r5, r6, r7}

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8000d96:	0893      	lsrs	r3, r2, #2

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8000d98:	e00a      	b.n	8000db0 <arm_copy_f32+0x1c>
  {
    /* C = A */
    /* Copy and then store the results in the destination buffer */
    in1 = *pSrc++;
 8000d9a:	6807      	ldr	r7, [r0, #0]
    in2 = *pSrc++;
 8000d9c:	6846      	ldr	r6, [r0, #4]
    in3 = *pSrc++;
 8000d9e:	6885      	ldr	r5, [r0, #8]
    in4 = *pSrc++;
 8000da0:	68c4      	ldr	r4, [r0, #12]

    *pDst++ = in1;
 8000da2:	600f      	str	r7, [r1, #0]
    *pDst++ = in2;
 8000da4:	604e      	str	r6, [r1, #4]
    *pDst++ = in3;
 8000da6:	608d      	str	r5, [r1, #8]
    *pDst++ = in4;
 8000da8:	60cc      	str	r4, [r1, #12]

    /* Decrement the loop counter */
    blkCnt--;
 8000daa:	3b01      	subs	r3, #1
    *pDst++ = in4;
 8000dac:	3110      	adds	r1, #16
    in4 = *pSrc++;
 8000dae:	3010      	adds	r0, #16
  while (blkCnt > 0U)
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1f2      	bne.n	8000d9a <arm_copy_f32+0x6>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8000db4:	f002 0203 	and.w	r2, r2, #3
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8000db8:	e004      	b.n	8000dc4 <arm_copy_f32+0x30>
  {
    /* C = A */
    /* Copy and then store the results in the destination buffer */
    *pDst++ = *pSrc++;
 8000dba:	6803      	ldr	r3, [r0, #0]
 8000dbc:	600b      	str	r3, [r1, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8000dbe:	3a01      	subs	r2, #1
    *pDst++ = *pSrc++;
 8000dc0:	3104      	adds	r1, #4
 8000dc2:	3004      	adds	r0, #4
  while (blkCnt > 0U)
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	d1f8      	bne.n	8000dba <arm_copy_f32+0x26>
  }
}
 8000dc8:	bcf0      	pop	{r4, r5, r6, r7}
 8000dca:	4770      	bx	lr

08000dcc <arm_fill_f32>:
  float32_t in2 = value;
  float32_t in3 = value;
  float32_t in4 = value;

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8000dcc:	088b      	lsrs	r3, r1, #2

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8000dce:	e009      	b.n	8000de4 <arm_fill_f32+0x18>
  {
    /* C = value */
    /* Fill the value in the destination buffer */
    *pDst++ = in1;
 8000dd0:	ed80 0a00 	vstr	s0, [r0]
    *pDst++ = in2;
 8000dd4:	ed80 0a01 	vstr	s0, [r0, #4]
    *pDst++ = in3;
 8000dd8:	ed80 0a02 	vstr	s0, [r0, #8]
    *pDst++ = in4;
 8000ddc:	ed80 0a03 	vstr	s0, [r0, #12]

    /* Decrement the loop counter */
    blkCnt--;
 8000de0:	3b01      	subs	r3, #1
    *pDst++ = in4;
 8000de2:	3010      	adds	r0, #16
  while (blkCnt > 0U)
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1f3      	bne.n	8000dd0 <arm_fill_f32+0x4>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8000de8:	f001 0103 	and.w	r1, r1, #3
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 8000dec:	e003      	b.n	8000df6 <arm_fill_f32+0x2a>
  {
    /* C = value */
    /* Fill the value in the destination buffer */
    *pDst++ = value;
 8000dee:	ed80 0a00 	vstr	s0, [r0]

    /* Decrement the loop counter */
    blkCnt--;
 8000df2:	3901      	subs	r1, #1
    *pDst++ = value;
 8000df4:	3004      	adds	r0, #4
  while (blkCnt > 0U)
 8000df6:	2900      	cmp	r1, #0
 8000df8:	d1f9      	bne.n	8000dee <arm_fill_f32+0x22>
  }
}
 8000dfa:	4770      	bx	lr

08000dfc <arm_cfft_radix8by2_f32>:
* \endcode
*
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e00:	ed2d 8b02 	vpush	{d8}
 8000e04:	4607      	mov	r7, r0
 8000e06:	4608      	mov	r0, r1
    uint32_t    L  = S->fftLen;
 8000e08:	8839      	ldrh	r1, [r7, #0]
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8000e0a:	eb00 0881 	add.w	r8, r0, r1, lsl #2
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8000e0e:	687e      	ldr	r6, [r7, #4]

    pCol1 = p1;
    pCol2 = p2;

    //    Define new length
    L >>= 1;
 8000e10:	ea4f 0c51 	mov.w	ip, r1, lsr #1
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8000e14:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8000e18:	18c5      	adds	r5, r0, r3
    pMid2 = p2 + L;
 8000e1a:	4443      	add	r3, r8

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- )
 8000e1c:	08c9      	lsrs	r1, r1, #3
    float32_t * p2 = p1 + L;
 8000e1e:	4644      	mov	r4, r8
    for ( l = L >> 2; l > 0; l-- )
 8000e20:	4602      	mov	r2, r0
 8000e22:	e09d      	b.n	8000f60 <arm_cfft_radix8by2_f32+0x164>
    {
        t1[0] = p1[0];
 8000e24:	ed92 5a00 	vldr	s10, [r2]
        t1[1] = p1[1];
 8000e28:	ed92 6a01 	vldr	s12, [r2, #4]
        t1[2] = p1[2];
 8000e2c:	ed92 1a02 	vldr	s2, [r2, #8]
        t1[3] = p1[3];
 8000e30:	ed92 7a03 	vldr	s14, [r2, #12]

        t2[0] = p2[0];
 8000e34:	ed94 0a00 	vldr	s0, [r4]
        t2[1] = p2[1];
 8000e38:	edd4 0a01 	vldr	s1, [r4, #4]
        t2[2] = p2[2];
 8000e3c:	ed94 3a02 	vldr	s6, [r4, #8]
        t2[3] = p2[3];
 8000e40:	edd4 1a03 	vldr	s3, [r4, #12]

        t3[0] = pMid1[0];
 8000e44:	ed95 2a00 	vldr	s4, [r5]
        t3[1] = pMid1[1];
 8000e48:	edd5 2a01 	vldr	s5, [r5, #4]
        t3[2] = pMid1[2];
 8000e4c:	ed95 4a02 	vldr	s8, [r5, #8]
        t3[3] = pMid1[3];
 8000e50:	edd5 4a03 	vldr	s9, [r5, #12]

        t4[0] = pMid2[0];
 8000e54:	edd3 5a00 	vldr	s11, [r3]
        t4[1] = pMid2[1];
 8000e58:	edd3 6a01 	vldr	s13, [r3, #4]
        t4[2] = pMid2[2];
 8000e5c:	edd3 3a02 	vldr	s7, [r3, #8]
        t4[3] = pMid2[3];
 8000e60:	edd3 7a03 	vldr	s15, [r3, #12]

        *p1++ = t1[0] + t2[0];
 8000e64:	ee35 8a00 	vadd.f32	s16, s10, s0
 8000e68:	ed82 8a00 	vstr	s16, [r2]
        *p1++ = t1[1] + t2[1];
 8000e6c:	ee36 8a20 	vadd.f32	s16, s12, s1
 8000e70:	ed82 8a01 	vstr	s16, [r2, #4]
        *p1++ = t1[2] + t2[2];
 8000e74:	ee31 8a03 	vadd.f32	s16, s2, s6
 8000e78:	ed82 8a02 	vstr	s16, [r2, #8]
        *p1++ = t1[3] + t2[3];    // col 1
 8000e7c:	ee37 8a21 	vadd.f32	s16, s14, s3
 8000e80:	ed82 8a03 	vstr	s16, [r2, #12]

        t2[0] = t1[0] - t2[0];
 8000e84:	ee35 5a40 	vsub.f32	s10, s10, s0
        t2[1] = t1[1] - t2[1];
 8000e88:	ee36 6a60 	vsub.f32	s12, s12, s1
        t2[2] = t1[2] - t2[2];
 8000e8c:	ee31 3a43 	vsub.f32	s6, s2, s6
        t2[3] = t1[3] - t2[3];    // for col 2
 8000e90:	ee37 7a61 	vsub.f32	s14, s14, s3

        *pMid1++ = t3[0] + t4[0];
 8000e94:	ee72 1a25 	vadd.f32	s3, s4, s11
 8000e98:	edc5 1a00 	vstr	s3, [r5]
        *pMid1++ = t3[1] + t4[1];
 8000e9c:	ee72 1aa6 	vadd.f32	s3, s5, s13
 8000ea0:	edc5 1a01 	vstr	s3, [r5, #4]
        *pMid1++ = t3[2] + t4[2];
 8000ea4:	ee74 1a23 	vadd.f32	s3, s8, s7
 8000ea8:	edc5 1a02 	vstr	s3, [r5, #8]
        *pMid1++ = t3[3] + t4[3]; // col 1
 8000eac:	ee74 1aa7 	vadd.f32	s3, s9, s15
 8000eb0:	edc5 1a03 	vstr	s3, [r5, #12]

        t4[0] = t4[0] - t3[0];
 8000eb4:	ee75 5ac2 	vsub.f32	s11, s11, s4
        t4[1] = t4[1] - t3[1];
 8000eb8:	ee76 6ae2 	vsub.f32	s13, s13, s5
        t4[2] = t4[2] - t3[2];
 8000ebc:	ee73 2ac4 	vsub.f32	s5, s7, s8
        t4[3] = t4[3] - t3[3];    // for col 2
 8000ec0:	ee77 7ae4 	vsub.f32	s15, s15, s9

        twR = *tw++;
 8000ec4:	edd6 4a00 	vldr	s9, [r6]
        twI = *tw++;
 8000ec8:	ed96 4a01 	vldr	s8, [r6, #4]

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 8000ecc:	ee65 3a24 	vmul.f32	s7, s10, s9
        m1 = t2[1] * twI;
 8000ed0:	ee26 2a04 	vmul.f32	s4, s12, s8
        m2 = t2[1] * twR;
 8000ed4:	ee26 6a24 	vmul.f32	s12, s12, s9
        m3 = t2[0] * twI;
 8000ed8:	ee25 5a04 	vmul.f32	s10, s10, s8

        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 8000edc:	ee73 3a82 	vadd.f32	s7, s7, s4
 8000ee0:	edc4 3a00 	vstr	s7, [r4]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8000ee4:	ee36 6a45 	vsub.f32	s12, s12, s10
 8000ee8:	ed84 6a01 	vstr	s12, [r4, #4]

        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 8000eec:	ee25 6a84 	vmul.f32	s12, s11, s8
        m1 = t4[1] * twR;
 8000ef0:	ee26 5aa4 	vmul.f32	s10, s13, s9
        m2 = t4[1] * twI;
 8000ef4:	ee66 6a84 	vmul.f32	s13, s13, s8
        m3 = t4[0] * twR;
 8000ef8:	ee65 5aa4 	vmul.f32	s11, s11, s9

        *pMid2++ = m0 - m1;
 8000efc:	ee36 6a45 	vsub.f32	s12, s12, s10
 8000f00:	ed83 6a00 	vstr	s12, [r3]
        *pMid2++ = m2 + m3;
 8000f04:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8000f08:	edc3 6a01 	vstr	s13, [r3, #4]

        twR = *tw++;
 8000f0c:	edd6 6a02 	vldr	s13, [r6, #8]
        twI = *tw++;
 8000f10:	ed96 6a03 	vldr	s12, [r6, #12]

        m0 = t2[2] * twR;
 8000f14:	ee23 5a26 	vmul.f32	s10, s6, s13
        m1 = t2[3] * twI;
 8000f18:	ee67 4a06 	vmul.f32	s9, s14, s12
        m2 = t2[3] * twR;
 8000f1c:	ee27 7a26 	vmul.f32	s14, s14, s13
        m3 = t2[2] * twI;
 8000f20:	ee63 5a06 	vmul.f32	s11, s6, s12

        *p2++ = m0 + m1;
 8000f24:	ee35 5a24 	vadd.f32	s10, s10, s9
 8000f28:	ed84 5a02 	vstr	s10, [r4, #8]
        *p2++ = m2 - m3;
 8000f2c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8000f30:	ed84 7a03 	vstr	s14, [r4, #12]

        m0 = t4[2] * twI;
 8000f34:	ee62 5a86 	vmul.f32	s11, s5, s12
        m1 = t4[3] * twR;
 8000f38:	ee27 5aa6 	vmul.f32	s10, s15, s13
        m2 = t4[3] * twI;
 8000f3c:	ee67 7a86 	vmul.f32	s15, s15, s12
        m3 = t4[2] * twR;
 8000f40:	ee22 7aa6 	vmul.f32	s14, s5, s13

        *pMid2++ = m0 - m1;
 8000f44:	ee75 6ac5 	vsub.f32	s13, s11, s10
 8000f48:	edc3 6a02 	vstr	s13, [r3, #8]
        *pMid2++ = m2 + m3;
 8000f4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f50:	edc3 7a03 	vstr	s15, [r3, #12]
    for ( l = L >> 2; l > 0; l-- )
 8000f54:	3901      	subs	r1, #1
        twI = *tw++;
 8000f56:	3610      	adds	r6, #16
        *p2++ = m2 - m3;
 8000f58:	3410      	adds	r4, #16
        *pMid2++ = m2 + m3;
 8000f5a:	3310      	adds	r3, #16
        *pMid1++ = t3[3] + t4[3]; // col 1
 8000f5c:	3510      	adds	r5, #16
        *p1++ = t1[3] + t2[3];    // col 1
 8000f5e:	3210      	adds	r2, #16
    for ( l = L >> 2; l > 0; l-- )
 8000f60:	2900      	cmp	r1, #0
 8000f62:	f47f af5f 	bne.w	8000e24 <arm_cfft_radix8by2_f32+0x28>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8000f66:	fa1f f48c 	uxth.w	r4, ip
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	4621      	mov	r1, r4
 8000f70:	f000 faaa 	bl	80014c8 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8000f74:	2302      	movs	r3, #2
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	4621      	mov	r1, r4
 8000f7a:	4640      	mov	r0, r8
 8000f7c:	f000 faa4 	bl	80014c8 <arm_radix8_butterfly_f32>
}
 8000f80:	ecbd 8b02 	vpop	{d8}
 8000f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000f88 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f8c:	ed2d 8b06 	vpush	{d8-d10}
 8000f90:	b089      	sub	sp, #36	; 0x24
 8000f92:	4605      	mov	r5, r0
 8000f94:	9006      	str	r0, [sp, #24]
 8000f96:	460f      	mov	r7, r1
 8000f98:	9107      	str	r1, [sp, #28]
    uint32_t    L  = S->fftLen >> 1;
 8000f9a:	8803      	ldrh	r3, [r0, #0]
 8000f9c:	085b      	lsrs	r3, r3, #1
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8000f9e:	0099      	lsls	r1, r3, #2
 8000fa0:	187a      	adds	r2, r7, r1
 8000fa2:	9203      	str	r2, [sp, #12]
    float32_t * p3 = p2 + L;
 8000fa4:	1854      	adds	r4, r2, r1
 8000fa6:	9404      	str	r4, [sp, #16]
    float32_t * p4 = p3 + L;
 8000fa8:	1866      	adds	r6, r4, r1
 8000faa:	9605      	str	r6, [sp, #20]

    pCol1 = p1;         // points to real values by default
    pCol2 = p2;
    pCol3 = p3;
    pCol4 = p4;
    pEnd1 = p2 - 1;     // points to imaginary values by default
 8000fac:	f1a2 0e04 	sub.w	lr, r2, #4
    pEnd2 = p3 - 1;
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	f1a4 0804 	sub.w	r8, r4, #4
    pEnd3 = p4 - 1;
 8000fb6:	1f34      	subs	r4, r6, #4
    pEnd4 = pEnd3 + L;
 8000fb8:	4421      	add	r1, r4

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8000fba:	686d      	ldr	r5, [r5, #4]

    L >>= 1;
 8000fbc:	085b      	lsrs	r3, r3, #1
 8000fbe:	9302      	str	r3, [sp, #8]
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8000fc0:	ed97 7a00 	vldr	s14, [r7]
 8000fc4:	edd0 7a00 	vldr	s15, [r0]
 8000fc8:	ee37 2a27 	vadd.f32	s4, s14, s15
    p1sp3_0 = p1[0] - p3[0];
 8000fcc:	ee37 7a67 	vsub.f32	s14, s14, s15
    p1ap3_1 = p1[1] + p3[1];
 8000fd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd4:	edd0 6a01 	vldr	s13, [r0, #4]
 8000fd8:	ee77 2aa6 	vadd.f32	s5, s15, s13
    p1sp3_1 = p1[1] - p3[1];
 8000fdc:	ee77 7ae6 	vsub.f32	s15, s15, s13

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000fe0:	ed92 3a01 	vldr	s6, [r2, #4]
 8000fe4:	ee73 3a07 	vadd.f32	s7, s6, s14
 8000fe8:	edd6 5a01 	vldr	s11, [r6, #4]
 8000fec:	ee73 3ae5 	vsub.f32	s7, s7, s11
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000ff0:	ed92 6a00 	vldr	s12, [r2]
 8000ff4:	ee37 4ac6 	vsub.f32	s8, s15, s12
 8000ff8:	edd6 6a00 	vldr	s13, [r6]
 8000ffc:	ee34 4a26 	vadd.f32	s8, s8, s13
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001000:	ee72 4a46 	vsub.f32	s9, s4, s12
 8001004:	ee74 4ae6 	vsub.f32	s9, s9, s13
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001008:	ee32 5ac3 	vsub.f32	s10, s5, s6
 800100c:	ee35 5a65 	vsub.f32	s10, s10, s11
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001010:	ee37 7a43 	vsub.f32	s14, s14, s6
 8001014:	ee35 7a87 	vadd.f32	s14, s11, s14
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001018:	ee76 7a27 	vadd.f32	s15, s12, s15
 800101c:	ee77 7ae6 	vsub.f32	s15, s15, s13
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001020:	ee36 6a02 	vadd.f32	s12, s12, s4
 8001024:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001028:	46bc      	mov	ip, r7
 800102a:	ee16 9a90 	vmov	r9, s13
 800102e:	f84c 9b08 	str.w	r9, [ip], #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001032:	edd2 6a01 	vldr	s13, [r2, #4]
 8001036:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800103a:	ed96 6a01 	vldr	s12, [r6, #4]
 800103e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001042:	edc7 6a01 	vstr	s13, [r7, #4]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8001046:	4613      	mov	r3, r2
 8001048:	ee13 9a90 	vmov	r9, s7
 800104c:	f842 9b08 	str.w	r9, [r2], #8
    *p2++ = t2[1];
 8001050:	ed83 4a01 	vstr	s8, [r3, #4]
    *p3++ = t3[0];
 8001054:	4603      	mov	r3, r0
 8001056:	ee14 9a90 	vmov	r9, s9
 800105a:	f840 9b08 	str.w	r9, [r0], #8
    *p3++ = t3[1];
 800105e:	ed83 5a01 	vstr	s10, [r3, #4]
    *p4++ = t4[0];
 8001062:	4633      	mov	r3, r6
 8001064:	ee17 9a10 	vmov	r9, s14
 8001068:	f843 9b08 	str.w	r9, [r3], #8
    *p4++ = t4[1];
 800106c:	edc6 7a01 	vstr	s15, [r6, #4]

    tw2 += twMod2;
 8001070:	f105 0a08 	add.w	sl, r5, #8
    tw3 += twMod3;
 8001074:	f105 0610 	add.w	r6, r5, #16
    tw4 += twMod4;
 8001078:	3518      	adds	r5, #24

    for (l = (L - 2) >> 1; l > 0; l-- )
 800107a:	9f02      	ldr	r7, [sp, #8]
 800107c:	f1a7 0b02 	sub.w	fp, r7, #2
 8001080:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8001084:	e112      	b.n	80012ac <arm_cfft_radix8by4_f32+0x324>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8001086:	eddc 5a00 	vldr	s11, [ip]
 800108a:	edd0 7a00 	vldr	s15, [r0]
 800108e:	ee75 6aa7 	vadd.f32	s13, s11, s15
        p1sp3_0 = p1[0] - p3[0];
 8001092:	ee75 5ae7 	vsub.f32	s11, s11, s15
        p1ap3_1 = p1[1] + p3[1];
 8001096:	eddc 0a01 	vldr	s1, [ip, #4]
 800109a:	edd0 7a01 	vldr	s15, [r0, #4]
 800109e:	ee30 5aa7 	vadd.f32	s10, s1, s15
        p1sp3_1 = p1[1] - p3[1];
 80010a2:	ee70 0ae7 	vsub.f32	s1, s1, s15
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 80010a6:	ed92 6a01 	vldr	s12, [r2, #4]
 80010aa:	ee36 3a25 	vadd.f32	s6, s12, s11
 80010ae:	ed93 1a01 	vldr	s2, [r3, #4]
 80010b2:	ee33 3a41 	vsub.f32	s6, s6, s2
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 80010b6:	ed92 7a00 	vldr	s14, [r2]
 80010ba:	ee30 0ac7 	vsub.f32	s0, s1, s14
 80010be:	edd3 7a00 	vldr	s15, [r3]
 80010c2:	ee30 0a27 	vadd.f32	s0, s0, s15
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 80010c6:	ee76 3ac7 	vsub.f32	s7, s13, s14
 80010ca:	ee73 3ae7 	vsub.f32	s7, s7, s15
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 80010ce:	ee35 8a46 	vsub.f32	s16, s10, s12
 80010d2:	ee38 8a41 	vsub.f32	s16, s16, s2
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 80010d6:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80010da:	ee31 1a06 	vadd.f32	s2, s2, s12
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 80010de:	ee77 0a20 	vadd.f32	s1, s14, s1
 80010e2:	ee70 0ae7 	vsub.f32	s1, s1, s15
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 80010e6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80010ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010ee:	4667      	mov	r7, ip
 80010f0:	ee17 9a90 	vmov	r9, s15
 80010f4:	f847 9b08 	str.w	r9, [r7], #8
 80010f8:	9701      	str	r7, [sp, #4]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 80010fa:	edd2 7a01 	vldr	s15, [r2, #4]
 80010fe:	ee37 5a85 	vadd.f32	s10, s15, s10
 8001102:	edd3 7a01 	vldr	s15, [r3, #4]
 8001106:	ee35 5a27 	vadd.f32	s10, s10, s15
 800110a:	ed8c 5a01 	vstr	s10, [ip, #4]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 800110e:	ed1e 6a01 	vldr	s12, [lr, #-4]
 8001112:	ed54 7a01 	vldr	s15, [r4, #-4]
 8001116:	ee76 8a27 	vadd.f32	s17, s12, s15
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800111a:	ee36 6a67 	vsub.f32	s12, s12, s15
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 800111e:	edde 6a00 	vldr	s13, [lr]
 8001122:	edd4 5a00 	vldr	s11, [r4]
 8001126:	ee76 1aa5 	vadd.f32	s3, s13, s11
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 800112a:	ee76 6ae5 	vsub.f32	s13, s13, s11
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 800112e:	ed98 2a00 	vldr	s4, [r8]
 8001132:	edd1 2a00 	vldr	s5, [r1]
 8001136:	ee32 aa62 	vsub.f32	s20, s4, s5
 800113a:	ee3a 4a06 	vadd.f32	s8, s20, s12
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800113e:	ed18 9a01 	vldr	s18, [r8, #-4]
 8001142:	ee76 4ac9 	vsub.f32	s9, s13, s18
 8001146:	ed51 9a01 	vldr	s19, [r1, #-4]
 800114a:	ee74 4aa9 	vadd.f32	s9, s9, s19
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800114e:	ee38 5ac9 	vsub.f32	s10, s17, s18
 8001152:	ee35 5a69 	vsub.f32	s10, s10, s19
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8001156:	ee71 5ac2 	vsub.f32	s11, s3, s4
 800115a:	ee75 5ae2 	vsub.f32	s11, s11, s5
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 800115e:	ee3a 6a46 	vsub.f32	s12, s20, s12
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8001162:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8001166:	ee79 6a66 	vsub.f32	s13, s18, s13
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 800116a:	ee32 2a21 	vadd.f32	s4, s4, s3
 800116e:	ee72 2a82 	vadd.f32	s5, s5, s4
 8001172:	4677      	mov	r7, lr
 8001174:	ee12 9a90 	vmov	r9, s5
 8001178:	f847 9908 	str.w	r9, [r7], #-8
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 800117c:	ed58 7a01 	vldr	s15, [r8, #-4]
 8001180:	ee77 8aa8 	vadd.f32	s17, s15, s17
 8001184:	ed51 7a01 	vldr	s15, [r1, #-4]
 8001188:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800118c:	ed4e 8a01 	vstr	s17, [lr, #-4]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8001190:	f10a 0908 	add.w	r9, sl, #8
 8001194:	edda 7a00 	vldr	s15, [sl]
        twI = *tw2++;
 8001198:	ed9a 7a01 	vldr	s14, [sl, #4]
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)

        // Top
        m0 = t2[0] * twR;
 800119c:	ee23 2a27 	vmul.f32	s4, s6, s15
        m1 = t2[1] * twI;
 80011a0:	ee60 2a07 	vmul.f32	s5, s0, s14
        m2 = t2[1] * twR;
 80011a4:	ee20 0a27 	vmul.f32	s0, s0, s15
        m3 = t2[0] * twI;
 80011a8:	ee23 3a07 	vmul.f32	s6, s6, s14

        *p2++ = m0 + m1;
 80011ac:	ee72 2a22 	vadd.f32	s5, s4, s5
 80011b0:	4692      	mov	sl, r2
 80011b2:	ee12 ea90 	vmov	lr, s5
 80011b6:	f84a eb08 	str.w	lr, [sl], #8
        *p2++ = m2 - m3;
 80011ba:	ee30 3a43 	vsub.f32	s6, s0, s6
 80011be:	ed82 3a01 	vstr	s6, [r2, #4]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 80011c2:	ee64 2a87 	vmul.f32	s5, s9, s14
        m1 = t2[2] * twR;
 80011c6:	ee24 3a27 	vmul.f32	s6, s8, s15
        m2 = t2[2] * twI;
 80011ca:	ee24 7a07 	vmul.f32	s14, s8, s14
        m3 = t2[3] * twR;
 80011ce:	ee64 7aa7 	vmul.f32	s15, s9, s15

        *pEnd2-- = m0 - m1;
 80011d2:	ee72 4ac3 	vsub.f32	s9, s5, s6
 80011d6:	46c4      	mov	ip, r8
 80011d8:	ee14 2a90 	vmov	r2, s9
 80011dc:	f84c 2908 	str.w	r2, [ip], #-8
        *pEnd2-- = m2 + m3;
 80011e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e4:	ed48 7a01 	vstr	s15, [r8, #-4]

        // COL 3
        twR = tw3[0];
 80011e8:	ed96 7a00 	vldr	s14, [r6]
        twI = tw3[1];
 80011ec:	edd6 7a01 	vldr	s15, [r6, #4]
        tw3 += twMod3;
 80011f0:	3610      	adds	r6, #16
        // Top
        m0 = t3[0] * twR;
 80011f2:	ee23 4a87 	vmul.f32	s8, s7, s14
        m1 = t3[1] * twI;
 80011f6:	ee68 4a27 	vmul.f32	s9, s16, s15
        m2 = t3[1] * twR;
 80011fa:	ee28 8a07 	vmul.f32	s16, s16, s14
        m3 = t3[0] * twI;
 80011fe:	ee63 3aa7 	vmul.f32	s7, s7, s15

        *p3++ = m0 + m1;
 8001202:	ee74 4a24 	vadd.f32	s9, s8, s9
 8001206:	4602      	mov	r2, r0
 8001208:	ee14 ea90 	vmov	lr, s9
 800120c:	f842 eb08 	str.w	lr, [r2], #8
        *p3++ = m2 - m3;
 8001210:	ee78 3a63 	vsub.f32	s7, s16, s7
 8001214:	edc0 3a01 	vstr	s7, [r0, #4]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8001218:	ee25 4ac7 	vnmul.f32	s8, s11, s14
        m1 = t3[2] * twI;
 800121c:	ee65 4a27 	vmul.f32	s9, s10, s15
        m2 = t3[2] * twR;
 8001220:	ee25 7a07 	vmul.f32	s14, s10, s14
        m3 = t3[3] * twI;
 8001224:	ee65 7aa7 	vmul.f32	s15, s11, s15

        *pEnd3-- = m0 - m1;
 8001228:	ee74 5a64 	vsub.f32	s11, s8, s9
 800122c:	46a6      	mov	lr, r4
 800122e:	ee15 0a90 	vmov	r0, s11
 8001232:	f84e 0908 	str.w	r0, [lr], #-8
        *pEnd3-- = m3 - m2;
 8001236:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800123a:	ed44 7a01 	vstr	s15, [r4, #-4]

        // COL 4
        twR = tw4[0];
 800123e:	edd5 7a00 	vldr	s15, [r5]
        twI = tw4[1];
 8001242:	ed95 7a01 	vldr	s14, [r5, #4]
        tw4 += twMod4;
 8001246:	3518      	adds	r5, #24
        // Top
        m0 = t4[0] * twR;
 8001248:	ee21 5a27 	vmul.f32	s10, s2, s15
        m1 = t4[1] * twI;
 800124c:	ee60 5a87 	vmul.f32	s11, s1, s14
        m2 = t4[1] * twR;
 8001250:	ee60 0aa7 	vmul.f32	s1, s1, s15
        m3 = t4[0] * twI;
 8001254:	ee21 1a07 	vmul.f32	s2, s2, s14

        *p4++ = m0 + m1;
 8001258:	ee75 5a25 	vadd.f32	s11, s10, s11
 800125c:	4618      	mov	r0, r3
 800125e:	ee15 4a90 	vmov	r4, s11
 8001262:	f840 4b08 	str.w	r4, [r0], #8
        *p4++ = m2 - m3;
 8001266:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800126a:	ed83 1a01 	vstr	s2, [r3, #4]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 800126e:	ee26 5a87 	vmul.f32	s10, s13, s14
        m1 = t4[2] * twR;
 8001272:	ee66 5a27 	vmul.f32	s11, s12, s15
        m2 = t4[2] * twI;
 8001276:	ee26 7a07 	vmul.f32	s14, s12, s14
        m3 = t4[3] * twR;
 800127a:	ee66 7aa7 	vmul.f32	s15, s13, s15

        *pEnd4-- = m0 - m1;
 800127e:	ee75 6a65 	vsub.f32	s13, s10, s11
 8001282:	460c      	mov	r4, r1
 8001284:	ee16 3a90 	vmov	r3, s13
 8001288:	f844 3908 	str.w	r3, [r4], #-8
        *pEnd4-- = m2 + m3;
 800128c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001290:	ed41 7a01 	vstr	s15, [r1, #-4]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8001294:	f10b 3bff 	add.w	fp, fp, #4294967295
        *p4++ = m2 - m3;
 8001298:	4603      	mov	r3, r0
        *p3++ = m2 - m3;
 800129a:	4610      	mov	r0, r2
        *p2++ = m2 - m3;
 800129c:	4652      	mov	r2, sl
        twI = *tw2++;
 800129e:	46ca      	mov	sl, r9
        *pEnd4-- = m2 + m3;
 80012a0:	4621      	mov	r1, r4
        *pEnd3-- = m3 - m2;
 80012a2:	4674      	mov	r4, lr
        *pEnd2-- = m2 + m3;
 80012a4:	46e0      	mov	r8, ip
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80012a6:	46be      	mov	lr, r7
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 80012a8:	f8dd c004 	ldr.w	ip, [sp, #4]
    for (l = (L - 2) >> 1; l > 0; l-- )
 80012ac:	f1bb 0f00 	cmp.w	fp, #0
 80012b0:	f47f aee9 	bne.w	8001086 <arm_cfft_radix8by4_f32+0xfe>
    }

    //MIDDLE
    // Twiddle factors are
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 80012b4:	ed9c 6a00 	vldr	s12, [ip]
 80012b8:	edd0 7a00 	vldr	s15, [r0]
 80012bc:	ee36 2a27 	vadd.f32	s4, s12, s15
    p1sp3_0 = p1[0] - p3[0];
 80012c0:	ee36 6a67 	vsub.f32	s12, s12, s15
    p1ap3_1 = p1[1] + p3[1];
 80012c4:	eddc 7a01 	vldr	s15, [ip, #4]
 80012c8:	ed90 7a01 	vldr	s14, [r0, #4]
 80012cc:	ee77 2a87 	vadd.f32	s5, s15, s14
    p1sp3_1 = p1[1] - p3[1];
 80012d0:	ee77 7ac7 	vsub.f32	s15, s15, s14

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80012d4:	ed92 3a01 	vldr	s6, [r2, #4]
 80012d8:	ee33 5a06 	vadd.f32	s10, s6, s12
 80012dc:	edd3 3a01 	vldr	s7, [r3, #4]
 80012e0:	ee35 5a63 	vsub.f32	s10, s10, s7
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80012e4:	ed92 4a00 	vldr	s8, [r2]
 80012e8:	ee77 6ac4 	vsub.f32	s13, s15, s8
 80012ec:	edd3 4a00 	vldr	s9, [r3]
 80012f0:	ee76 6aa4 	vadd.f32	s13, s13, s9
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80012f4:	ee72 5a44 	vsub.f32	s11, s4, s8
 80012f8:	ee75 5ae4 	vsub.f32	s11, s11, s9
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80012fc:	ee32 7ac3 	vsub.f32	s14, s5, s6
 8001300:	ee37 7a63 	vsub.f32	s14, s14, s7
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001304:	ee36 6a43 	vsub.f32	s12, s12, s6
 8001308:	ee33 6a86 	vadd.f32	s12, s7, s12
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800130c:	ee74 7a27 	vadd.f32	s15, s8, s15
 8001310:	ee77 7ae4 	vsub.f32	s15, s15, s9
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001314:	ee34 4a02 	vadd.f32	s8, s8, s4
 8001318:	ee74 4a84 	vadd.f32	s9, s9, s8
 800131c:	edcc 4a00 	vstr	s9, [ip]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001320:	edd2 4a01 	vldr	s9, [r2, #4]
 8001324:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8001328:	ed93 4a01 	vldr	s8, [r3, #4]
 800132c:	ee74 4a84 	vadd.f32	s9, s9, s8
 8001330:	edcc 4a01 	vstr	s9, [ip, #4]

    // COL 2
    twR = tw2[0];
 8001334:	edda 3a00 	vldr	s7, [sl]
    twI = tw2[1];
 8001338:	ed9a 4a01 	vldr	s8, [sl, #4]

    m0 = t2[0] * twR;
 800133c:	ee65 4a23 	vmul.f32	s9, s10, s7
    m1 = t2[1] * twI;
 8001340:	ee26 3a84 	vmul.f32	s6, s13, s8
    m2 = t2[1] * twR;
 8001344:	ee66 6aa3 	vmul.f32	s13, s13, s7
    m3 = t2[0] * twI;
 8001348:	ee25 5a04 	vmul.f32	s10, s10, s8

    *p2++ = m0 + m1;
 800134c:	ee74 4a83 	vadd.f32	s9, s9, s6
 8001350:	edc2 4a00 	vstr	s9, [r2]
    *p2++ = m2 - m3;
 8001354:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8001358:	edc2 6a01 	vstr	s13, [r2, #4]
    // COL 3
    twR = tw3[0];
 800135c:	edd6 4a00 	vldr	s9, [r6]
    twI = tw3[1];
 8001360:	ed96 5a01 	vldr	s10, [r6, #4]

    m0 = t3[0] * twR;
 8001364:	ee65 6aa4 	vmul.f32	s13, s11, s9
    m1 = t3[1] * twI;
 8001368:	ee27 4a05 	vmul.f32	s8, s14, s10
    m2 = t3[1] * twR;
 800136c:	ee27 7a24 	vmul.f32	s14, s14, s9
    m3 = t3[0] * twI;
 8001370:	ee65 5a85 	vmul.f32	s11, s11, s10

    *p3++ = m0 + m1;
 8001374:	ee76 6a84 	vadd.f32	s13, s13, s8
 8001378:	edc0 6a00 	vstr	s13, [r0]
    *p3++ = m2 - m3;
 800137c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8001380:	ed80 7a01 	vstr	s14, [r0, #4]
    // COL 4
    twR = tw4[0];
 8001384:	edd5 5a00 	vldr	s11, [r5]
    twI = tw4[1];
 8001388:	edd5 6a01 	vldr	s13, [r5, #4]

    m0 = t4[0] * twR;
 800138c:	ee26 7a25 	vmul.f32	s14, s12, s11
    m1 = t4[1] * twI;
 8001390:	ee27 5aa6 	vmul.f32	s10, s15, s13
    m2 = t4[1] * twR;
 8001394:	ee67 7aa5 	vmul.f32	s15, s15, s11
    m3 = t4[0] * twI;
 8001398:	ee26 6a26 	vmul.f32	s12, s12, s13

    *p4++ = m0 + m1;
 800139c:	ee37 7a05 	vadd.f32	s14, s14, s10
 80013a0:	ed83 7a00 	vstr	s14, [r3]
    *p4++ = m2 - m3;
 80013a4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80013a8:	edc3 7a01 	vstr	s15, [r3, #4]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4U);
 80013ac:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 80013b0:	2304      	movs	r3, #4
 80013b2:	9d06      	ldr	r5, [sp, #24]
 80013b4:	686a      	ldr	r2, [r5, #4]
 80013b6:	4621      	mov	r1, r4
 80013b8:	9807      	ldr	r0, [sp, #28]
 80013ba:	f000 f885 	bl	80014c8 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4U);
 80013be:	2304      	movs	r3, #4
 80013c0:	686a      	ldr	r2, [r5, #4]
 80013c2:	4621      	mov	r1, r4
 80013c4:	9803      	ldr	r0, [sp, #12]
 80013c6:	f000 f87f 	bl	80014c8 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4U);
 80013ca:	2304      	movs	r3, #4
 80013cc:	686a      	ldr	r2, [r5, #4]
 80013ce:	4621      	mov	r1, r4
 80013d0:	9804      	ldr	r0, [sp, #16]
 80013d2:	f000 f879 	bl	80014c8 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80013d6:	2304      	movs	r3, #4
 80013d8:	686a      	ldr	r2, [r5, #4]
 80013da:	4621      	mov	r1, r4
 80013dc:	9805      	ldr	r0, [sp, #20]
 80013de:	f000 f873 	bl	80014c8 <arm_radix8_butterfly_f32>
}
 80013e2:	b009      	add	sp, #36	; 0x24
 80013e4:	ecbd 8b06 	vpop	{d8-d10}
 80013e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080013ec <arm_cfft_f32>:
void arm_cfft_f32(
    const arm_cfft_instance_f32 * S,
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 80013ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013f0:	4607      	mov	r7, r0
 80013f2:	460c      	mov	r4, r1
 80013f4:	4690      	mov	r8, r2
 80013f6:	4699      	mov	r9, r3
    uint32_t  L = S->fftLen, l;
 80013f8:	8805      	ldrh	r5, [r0, #0]
 80013fa:	462e      	mov	r6, r5
    float32_t invL, * pSrc;

    if (ifftFlag == 1U)
 80013fc:	2a01      	cmp	r2, #1
 80013fe:	d00b      	beq.n	8001418 <arm_cfft_f32+0x2c>
            *pSrc = -*pSrc;
            pSrc += 2;
        }
    }

    switch (L)
 8001400:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8001404:	d03a      	beq.n	800147c <arm_cfft_f32+0x90>
 8001406:	d824      	bhi.n	8001452 <arm_cfft_f32+0x66>
 8001408:	2d20      	cmp	r5, #32
 800140a:	d037      	beq.n	800147c <arm_cfft_f32+0x90>
 800140c:	d913      	bls.n	8001436 <arm_cfft_f32+0x4a>
 800140e:	2d40      	cmp	r5, #64	; 0x40
 8001410:	d02d      	beq.n	800146e <arm_cfft_f32+0x82>
 8001412:	2d80      	cmp	r5, #128	; 0x80
 8001414:	d011      	beq.n	800143a <arm_cfft_f32+0x4e>
 8001416:	e014      	b.n	8001442 <arm_cfft_f32+0x56>
        pSrc = p1 + 1;
 8001418:	1d0a      	adds	r2, r1, #4
        for(l=0; l<L; l++)
 800141a:	2300      	movs	r3, #0
 800141c:	e008      	b.n	8001430 <arm_cfft_f32+0x44>
            *pSrc = -*pSrc;
 800141e:	edd2 7a00 	vldr	s15, [r2]
 8001422:	eef1 7a67 	vneg.f32	s15, s15
 8001426:	ee17 1a90 	vmov	r1, s15
 800142a:	f842 1b08 	str.w	r1, [r2], #8
        for(l=0; l<L; l++)
 800142e:	3301      	adds	r3, #1
 8001430:	42b3      	cmp	r3, r6
 8001432:	d3f4      	bcc.n	800141e <arm_cfft_f32+0x32>
 8001434:	e7e4      	b.n	8001400 <arm_cfft_f32+0x14>
    switch (L)
 8001436:	2d10      	cmp	r5, #16
 8001438:	d103      	bne.n	8001442 <arm_cfft_f32+0x56>
    {
    case 16:
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800143a:	4621      	mov	r1, r4
 800143c:	4638      	mov	r0, r7
 800143e:	f7ff fcdd 	bl	8000dfc <arm_cfft_radix8by2_f32>
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
        break;
    }

    if ( bitReverseFlag )
 8001442:	f1b9 0f00 	cmp.w	r9, #0
 8001446:	d11e      	bne.n	8001486 <arm_cfft_f32+0x9a>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);

    if (ifftFlag == 1U)
 8001448:	f1b8 0f01 	cmp.w	r8, #1
 800144c:	d021      	beq.n	8001492 <arm_cfft_f32+0xa6>
            *pSrc++ *=   invL ;
            *pSrc  = -(*pSrc) * invL;
            pSrc++;
        }
    }
}
 800144e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (L)
 8001452:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001456:	d0f0      	beq.n	800143a <arm_cfft_f32+0x4e>
 8001458:	d906      	bls.n	8001468 <arm_cfft_f32+0x7c>
 800145a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800145e:	d00d      	beq.n	800147c <arm_cfft_f32+0x90>
 8001460:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8001464:	d003      	beq.n	800146e <arm_cfft_f32+0x82>
 8001466:	e7ec      	b.n	8001442 <arm_cfft_f32+0x56>
 8001468:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800146c:	d1e9      	bne.n	8001442 <arm_cfft_f32+0x56>
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 800146e:	2301      	movs	r3, #1
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	4629      	mov	r1, r5
 8001474:	4620      	mov	r0, r4
 8001476:	f000 f827 	bl	80014c8 <arm_radix8_butterfly_f32>
        break;
 800147a:	e7e2      	b.n	8001442 <arm_cfft_f32+0x56>
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800147c:	4621      	mov	r1, r4
 800147e:	4638      	mov	r0, r7
 8001480:	f7ff fd82 	bl	8000f88 <arm_cfft_radix8by4_f32>
        break;
 8001484:	e7dd      	b.n	8001442 <arm_cfft_f32+0x56>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	89b9      	ldrh	r1, [r7, #12]
 800148a:	4620      	mov	r0, r4
 800148c:	f7fe ff24 	bl	80002d8 <arm_bitreversal_32>
 8001490:	e7da      	b.n	8001448 <arm_cfft_f32+0x5c>
        invL = 1.0f/(float32_t)L;
 8001492:	ee07 5a90 	vmov	s15, r5
 8001496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800149e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        for(l=0; l<L; l++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	e00d      	b.n	80014c2 <arm_cfft_f32+0xd6>
            *pSrc++ *=   invL ;
 80014a6:	edd4 7a00 	vldr	s15, [r4]
 80014aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ae:	edc4 7a00 	vstr	s15, [r4]
            *pSrc  = -(*pSrc) * invL;
 80014b2:	edd4 7a01 	vldr	s15, [r4, #4]
 80014b6:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80014ba:	edc4 7a01 	vstr	s15, [r4, #4]
            pSrc++;
 80014be:	3408      	adds	r4, #8
        for(l=0; l<L; l++)
 80014c0:	3301      	adds	r3, #1
 80014c2:	42b3      	cmp	r3, r6
 80014c4:	d3ef      	bcc.n	80014a6 <arm_cfft_f32+0xba>
 80014c6:	e7c2      	b.n	800144e <arm_cfft_f32+0x62>

080014c8 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 80014c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014cc:	ed2d 8b10 	vpush	{d8-d15}
 80014d0:	b08d      	sub	sp, #52	; 0x34
 80014d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80014d4:	930a      	str	r3, [sp, #40]	; 0x28
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;

   n2 = fftLen;
 80014d6:	9107      	str	r1, [sp, #28]
 80014d8:	9106      	str	r1, [sp, #24]
 80014da:	4680      	mov	r8, r0

   do
   {
      n1 = n2;
      n2 = n2 >> 3;
 80014dc:	9b06      	ldr	r3, [sp, #24]
 80014de:	ea4f 09d3 	mov.w	r9, r3, lsr #3
      i1 = 0;
 80014e2:	2700      	movs	r7, #0
 80014e4:	46bc      	mov	ip, r7

      do
      {
         i2 = i1 + n2;
 80014e6:	eb0c 0109 	add.w	r1, ip, r9
         i3 = i2 + n2;
 80014ea:	eb09 0401 	add.w	r4, r9, r1
         i4 = i3 + n2;
 80014ee:	eb09 0304 	add.w	r3, r9, r4
         i5 = i4 + n2;
 80014f2:	eb09 0503 	add.w	r5, r9, r3
         i6 = i5 + n2;
 80014f6:	eb09 0205 	add.w	r2, r9, r5
         i7 = i6 + n2;
 80014fa:	eb09 0002 	add.w	r0, r9, r2
         i8 = i7 + n2;
 80014fe:	eb09 0600 	add.w	r6, r9, r0
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8001502:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8001506:	eb08 0b07 	add.w	fp, r8, r7
 800150a:	ed9b 7a00 	vldr	s14, [fp]
 800150e:	00ed      	lsls	r5, r5, #3
 8001510:	eb08 0a05 	add.w	sl, r8, r5
 8001514:	edda 7a00 	vldr	s15, [sl]
 8001518:	ee37 5a27 	vadd.f32	s10, s14, s15
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800151c:	ee37 6a67 	vsub.f32	s12, s14, s15
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8001520:	00c9      	lsls	r1, r1, #3
 8001522:	9100      	str	r1, [sp, #0]
 8001524:	4441      	add	r1, r8
 8001526:	9101      	str	r1, [sp, #4]
 8001528:	edd1 2a00 	vldr	s5, [r1]
 800152c:	00d2      	lsls	r2, r2, #3
 800152e:	eb08 0e02 	add.w	lr, r8, r2
 8001532:	f8cd e008 	str.w	lr, [sp, #8]
 8001536:	ed9e 7a00 	vldr	s14, [lr]
 800153a:	ee72 7a87 	vadd.f32	s15, s5, s14
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800153e:	ee72 2ac7 	vsub.f32	s5, s5, s14
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8001542:	00e4      	lsls	r4, r4, #3
 8001544:	eb08 0e04 	add.w	lr, r8, r4
 8001548:	edde 5a00 	vldr	s11, [lr]
 800154c:	00c0      	lsls	r0, r0, #3
 800154e:	eb08 0100 	add.w	r1, r8, r0
 8001552:	9103      	str	r1, [sp, #12]
 8001554:	edd1 6a00 	vldr	s13, [r1]
 8001558:	ee35 7aa6 	vadd.f32	s14, s11, s13
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800155c:	ee35 3ae6 	vsub.f32	s6, s11, s13
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	eb08 0103 	add.w	r1, r8, r3
 8001566:	9104      	str	r1, [sp, #16]
 8001568:	edd1 4a00 	vldr	s9, [r1]
 800156c:	00f6      	lsls	r6, r6, #3
 800156e:	eb08 0106 	add.w	r1, r8, r6
 8001572:	9105      	str	r1, [sp, #20]
 8001574:	edd1 5a00 	vldr	s11, [r1]
 8001578:	ee74 6aa5 	vadd.f32	s13, s9, s11
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800157c:	ee74 4ae5 	vsub.f32	s9, s9, s11
         t1 = r1 - r3;
 8001580:	ee35 0a47 	vsub.f32	s0, s10, s14
         r1 = r1 + r3;
 8001584:	ee35 7a07 	vadd.f32	s14, s10, s14
         r3 = r2 - r4;
 8001588:	ee77 0ae6 	vsub.f32	s1, s15, s13
         r2 = r2 + r4;
 800158c:	ee77 7aa6 	vadd.f32	s15, s15, s13
         pSrc[2 * i1] = r1 + r2;
 8001590:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001594:	edcb 6a00 	vstr	s13, [fp]
         pSrc[2 * i5] = r1 - r2;
 8001598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159c:	edca 7a00 	vstr	s15, [sl]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80015a0:	3704      	adds	r7, #4
 80015a2:	4447      	add	r7, r8
 80015a4:	ed97 4a00 	vldr	s8, [r7]
 80015a8:	3504      	adds	r5, #4
 80015aa:	4445      	add	r5, r8
 80015ac:	edd5 7a00 	vldr	s15, [r5]
 80015b0:	ee74 1a27 	vadd.f32	s3, s8, s15
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80015b4:	ee34 4a67 	vsub.f32	s8, s8, s15
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80015b8:	9900      	ldr	r1, [sp, #0]
 80015ba:	3104      	adds	r1, #4
 80015bc:	4441      	add	r1, r8
 80015be:	ed91 5a00 	vldr	s10, [r1]
 80015c2:	3204      	adds	r2, #4
 80015c4:	4442      	add	r2, r8
 80015c6:	edd2 7a00 	vldr	s15, [r2]
 80015ca:	ee35 2a27 	vadd.f32	s4, s10, s15
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80015ce:	ee35 5a67 	vsub.f32	s10, s10, s15
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80015d2:	3404      	adds	r4, #4
 80015d4:	4444      	add	r4, r8
 80015d6:	edd4 6a00 	vldr	s13, [r4]
 80015da:	3004      	adds	r0, #4
 80015dc:	4440      	add	r0, r8
 80015de:	edd0 7a00 	vldr	s15, [r0]
 80015e2:	ee36 7aa7 	vadd.f32	s14, s13, s15
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80015e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80015ea:	3304      	adds	r3, #4
 80015ec:	4443      	add	r3, r8
 80015ee:	edd3 5a00 	vldr	s11, [r3]
 80015f2:	3604      	adds	r6, #4
 80015f4:	4446      	add	r6, r8
 80015f6:	edd6 7a00 	vldr	s15, [r6]
 80015fa:	ee75 3aa7 	vadd.f32	s7, s11, s15
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80015fe:	ee75 5ae7 	vsub.f32	s11, s11, s15
         t2 = r1 - s3;
 8001602:	ee31 1ac7 	vsub.f32	s2, s3, s14
         r1 = r1 + s3;
 8001606:	ee31 7a87 	vadd.f32	s14, s3, s14
         s3 = r2 - r4;
 800160a:	ee72 1a63 	vsub.f32	s3, s4, s7
         r2 = r2 + r4;
 800160e:	ee72 7a23 	vadd.f32	s15, s4, s7
         pSrc[2 * i1 + 1] = r1 + r2;
 8001612:	ee77 3a27 	vadd.f32	s7, s14, s15
 8001616:	edc7 3a00 	vstr	s7, [r7]
         pSrc[2 * i5 + 1] = r1 - r2;
 800161a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161e:	edc5 7a00 	vstr	s15, [r5]
         pSrc[2 * i3]     = t1 + s3;
 8001622:	ee70 7a21 	vadd.f32	s15, s0, s3
 8001626:	edce 7a00 	vstr	s15, [lr]
         pSrc[2 * i7]     = t1 - s3;
 800162a:	ee70 1a61 	vsub.f32	s3, s0, s3
 800162e:	9d03      	ldr	r5, [sp, #12]
 8001630:	edc5 1a00 	vstr	s3, [r5]
         pSrc[2 * i3 + 1] = t2 - r3;
 8001634:	ee71 7a60 	vsub.f32	s15, s2, s1
 8001638:	edc4 7a00 	vstr	s15, [r4]
         pSrc[2 * i7 + 1] = t2 + r3;
 800163c:	ee30 1a81 	vadd.f32	s2, s1, s2
 8001640:	ed80 1a00 	vstr	s2, [r0]
         r1 = (r6 - r8) * C81;
 8001644:	ee32 7ae4 	vsub.f32	s14, s5, s9
 8001648:	eddf 7af2 	vldr	s15, [pc, #968]	; 8001a14 <arm_radix8_butterfly_f32+0x54c>
 800164c:	ee27 7a27 	vmul.f32	s14, s14, s15
         r6 = (r6 + r8) * C81;
 8001650:	ee72 3aa4 	vadd.f32	s7, s5, s9
 8001654:	ee63 3aa7 	vmul.f32	s7, s7, s15
         r2 = (s6 - s8) * C81;
 8001658:	ee75 4a65 	vsub.f32	s9, s10, s11
 800165c:	ee64 4aa7 	vmul.f32	s9, s9, s15
         s6 = (s6 + s8) * C81;
 8001660:	ee75 5a25 	vadd.f32	s11, s10, s11
 8001664:	ee65 7aa7 	vmul.f32	s15, s11, s15
         t1 = r5 - r1;
 8001668:	ee36 2a47 	vsub.f32	s4, s12, s14
         r5 = r5 + r1;
 800166c:	ee36 7a07 	vadd.f32	s14, s12, s14
         r8 = r7 - r6;
 8001670:	ee73 2a63 	vsub.f32	s5, s6, s7
         r7 = r7 + r6;
 8001674:	ee73 5a23 	vadd.f32	s11, s6, s7
         t2 = s5 - r2;
 8001678:	ee34 5a64 	vsub.f32	s10, s8, s9
         s5 = s5 + r2;
 800167c:	ee34 6a24 	vadd.f32	s12, s8, s9
         s8 = s7 - s6;
 8001680:	ee76 4ae7 	vsub.f32	s9, s13, s15
         s7 = s7 + s6;
 8001684:	ee76 7aa7 	vadd.f32	s15, s13, s15
         pSrc[2 * i2]     = r5 + s7;
 8001688:	ee77 6a27 	vadd.f32	s13, s14, s15
 800168c:	9801      	ldr	r0, [sp, #4]
 800168e:	edc0 6a00 	vstr	s13, [r0]
         pSrc[2 * i8]     = r5 - s7;
 8001692:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001696:	9c05      	ldr	r4, [sp, #20]
 8001698:	edc4 7a00 	vstr	s15, [r4]
         pSrc[2 * i6]     = t1 + s8;
 800169c:	ee72 7a24 	vadd.f32	s15, s4, s9
 80016a0:	9802      	ldr	r0, [sp, #8]
 80016a2:	edc0 7a00 	vstr	s15, [r0]
         pSrc[2 * i4]     = t1 - s8;
 80016a6:	ee72 4a64 	vsub.f32	s9, s4, s9
 80016aa:	9804      	ldr	r0, [sp, #16]
 80016ac:	edc0 4a00 	vstr	s9, [r0]
         pSrc[2 * i2 + 1] = s5 - r7;
 80016b0:	ee76 7a65 	vsub.f32	s15, s12, s11
 80016b4:	edc1 7a00 	vstr	s15, [r1]
         pSrc[2 * i8 + 1] = s5 + r7;
 80016b8:	ee35 6a86 	vadd.f32	s12, s11, s12
 80016bc:	ed86 6a00 	vstr	s12, [r6]
         pSrc[2 * i6 + 1] = t2 - r8;
 80016c0:	ee75 7a62 	vsub.f32	s15, s10, s5
 80016c4:	edc2 7a00 	vstr	s15, [r2]
         pSrc[2 * i4 + 1] = t2 + r8;
 80016c8:	ee32 5a85 	vadd.f32	s10, s5, s10
 80016cc:	ed83 5a00 	vstr	s10, [r3]

         i1 += n1;
 80016d0:	9b06      	ldr	r3, [sp, #24]
 80016d2:	449c      	add	ip, r3
      } while (i1 < fftLen);
 80016d4:	9b07      	ldr	r3, [sp, #28]
 80016d6:	4563      	cmp	r3, ip
 80016d8:	f63f af05 	bhi.w	80014e6 <arm_radix8_butterfly_f32+0x1e>

      if (n2 < 8)
 80016dc:	f1b9 0f07 	cmp.w	r9, #7
 80016e0:	f240 81b6 	bls.w	8001a50 <arm_radix8_butterfly_f32+0x588>
         break;

      ia1 = 0;
      j = 1;
 80016e4:	2301      	movs	r3, #1
 80016e6:	9309      	str	r3, [sp, #36]	; 0x24
      ia1 = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	9308      	str	r3, [sp, #32]
 80016ec:	46cc      	mov	ip, r9

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 80016ee:	9b08      	ldr	r3, [sp, #32]
 80016f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80016f2:	4413      	add	r3, r2
 80016f4:	461d      	mov	r5, r3
         ia1 = id;
         ia2 = ia1 + id;
         ia3 = ia2 + id;
 80016f6:	eb03 0443 	add.w	r4, r3, r3, lsl #1
         ia4 = ia3 + id;
 80016fa:	1918      	adds	r0, r3, r4
         ia5 = ia4 + id;
 80016fc:	1819      	adds	r1, r3, r0
         ia6 = ia5 + id;
 80016fe:	185a      	adds	r2, r3, r1
         ia7 = ia6 + id;
 8001700:	4413      	add	r3, r2

         co2 = pCoef[2 * ia1];
 8001702:	9508      	str	r5, [sp, #32]
 8001704:	00ee      	lsls	r6, r5, #3
 8001706:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8001708:	19bd      	adds	r5, r7, r6
 800170a:	edd5 ba00 	vldr	s23, [r5]
         co3 = pCoef[2 * ia2];
 800170e:	9d08      	ldr	r5, [sp, #32]
 8001710:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 8001714:	463d      	mov	r5, r7
 8001716:	4477      	add	r7, lr
 8001718:	ed97 ba00 	vldr	s22, [r7]
         co4 = pCoef[2 * ia3];
 800171c:	00e4      	lsls	r4, r4, #3
 800171e:	462f      	mov	r7, r5
 8001720:	4427      	add	r7, r4
 8001722:	edd7 aa00 	vldr	s21, [r7]
         co5 = pCoef[2 * ia4];
 8001726:	00c0      	lsls	r0, r0, #3
 8001728:	462f      	mov	r7, r5
 800172a:	4407      	add	r7, r0
 800172c:	ed97 aa00 	vldr	s20, [r7]
         co6 = pCoef[2 * ia5];
 8001730:	00c9      	lsls	r1, r1, #3
 8001732:	462f      	mov	r7, r5
 8001734:	440f      	add	r7, r1
 8001736:	edd7 9a00 	vldr	s19, [r7]
         co7 = pCoef[2 * ia6];
 800173a:	00d2      	lsls	r2, r2, #3
 800173c:	462f      	mov	r7, r5
 800173e:	4417      	add	r7, r2
 8001740:	ed97 9a00 	vldr	s18, [r7]
         co8 = pCoef[2 * ia7];
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	462f      	mov	r7, r5
 8001748:	441f      	add	r7, r3
 800174a:	edd7 8a00 	vldr	s17, [r7]
         si2 = pCoef[2 * ia1 + 1];
 800174e:	3604      	adds	r6, #4
 8001750:	462f      	mov	r7, r5
 8001752:	442e      	add	r6, r5
 8001754:	ed96 8a00 	vldr	s16, [r6]
         si3 = pCoef[2 * ia2 + 1];
 8001758:	f10e 0504 	add.w	r5, lr, #4
 800175c:	443d      	add	r5, r7
 800175e:	ed95 0a00 	vldr	s0, [r5]
         si4 = pCoef[2 * ia3 + 1];
 8001762:	3404      	adds	r4, #4
 8001764:	443c      	add	r4, r7
 8001766:	edd4 0a00 	vldr	s1, [r4]
         si5 = pCoef[2 * ia4 + 1];
 800176a:	3004      	adds	r0, #4
 800176c:	4438      	add	r0, r7
 800176e:	ed90 1a00 	vldr	s2, [r0]
         si6 = pCoef[2 * ia5 + 1];
 8001772:	3104      	adds	r1, #4
 8001774:	4439      	add	r1, r7
 8001776:	edd1 1a00 	vldr	s3, [r1]
         si7 = pCoef[2 * ia6 + 1];
 800177a:	3204      	adds	r2, #4
 800177c:	443a      	add	r2, r7
 800177e:	ed92 2a00 	vldr	s4, [r2]
         si8 = pCoef[2 * ia7 + 1];
 8001782:	3304      	adds	r3, #4
 8001784:	443b      	add	r3, r7
 8001786:	edd3 2a00 	vldr	s5, [r3]

         i1 = j;
 800178a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800178e:	46ce      	mov	lr, r9

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8001790:	eb0e 010c 	add.w	r1, lr, ip
            i3 = i2 + n2;
 8001794:	eb0c 0401 	add.w	r4, ip, r1
            i4 = i3 + n2;
 8001798:	eb0c 0304 	add.w	r3, ip, r4
            i5 = i4 + n2;
 800179c:	eb0c 0503 	add.w	r5, ip, r3
            i6 = i5 + n2;
 80017a0:	eb0c 0205 	add.w	r2, ip, r5
            i7 = i6 + n2;
 80017a4:	eb0c 0002 	add.w	r0, ip, r2
            i8 = i7 + n2;
 80017a8:	eb0c 0600 	add.w	r6, ip, r0
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80017ac:	ea4f 07ce 	mov.w	r7, lr, lsl #3
 80017b0:	eb08 0b07 	add.w	fp, r8, r7
 80017b4:	eddb 4a00 	vldr	s9, [fp]
 80017b8:	00ed      	lsls	r5, r5, #3
 80017ba:	eb08 0a05 	add.w	sl, r8, r5
 80017be:	edda 7a00 	vldr	s15, [sl]
 80017c2:	ee34 3aa7 	vadd.f32	s6, s9, s15
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80017c6:	ee74 4ae7 	vsub.f32	s9, s9, s15
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80017ca:	00c9      	lsls	r1, r1, #3
 80017cc:	9100      	str	r1, [sp, #0]
 80017ce:	4441      	add	r1, r8
 80017d0:	9101      	str	r1, [sp, #4]
 80017d2:	edd1 6a00 	vldr	s13, [r1]
 80017d6:	00d2      	lsls	r2, r2, #3
 80017d8:	eb08 0902 	add.w	r9, r8, r2
 80017dc:	f8cd 9008 	str.w	r9, [sp, #8]
 80017e0:	edd9 7a00 	vldr	s15, [r9]
 80017e4:	ee36 7aa7 	vadd.f32	s14, s13, s15
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80017e8:	ee36 dae7 	vsub.f32	s26, s13, s15
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80017ec:	00e4      	lsls	r4, r4, #3
 80017ee:	eb08 0904 	add.w	r9, r8, r4
 80017f2:	edd9 6a00 	vldr	s13, [r9]
 80017f6:	00c0      	lsls	r0, r0, #3
 80017f8:	eb08 0100 	add.w	r1, r8, r0
 80017fc:	9103      	str	r1, [sp, #12]
 80017fe:	edd1 7a00 	vldr	s15, [r1]
 8001802:	ee76 5aa7 	vadd.f32	s11, s13, s15
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8001806:	ee36 5ae7 	vsub.f32	s10, s13, s15
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	eb08 0103 	add.w	r1, r8, r3
 8001810:	9104      	str	r1, [sp, #16]
 8001812:	edd1 6a00 	vldr	s13, [r1]
 8001816:	00f6      	lsls	r6, r6, #3
 8001818:	eb08 0106 	add.w	r1, r8, r6
 800181c:	9105      	str	r1, [sp, #20]
 800181e:	edd1 7a00 	vldr	s15, [r1]
 8001822:	ee36 6aa7 	vadd.f32	s12, s13, s15
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8001826:	ee76 6ae7 	vsub.f32	s13, s13, s15
            t1 = r1 - r3;
 800182a:	ee33 fa65 	vsub.f32	s30, s6, s11
            r1 = r1 + r3;
 800182e:	ee33 3a25 	vadd.f32	s6, s6, s11
            r3 = r2 - r4;
 8001832:	ee77 ea46 	vsub.f32	s29, s14, s12
            r2 = r2 + r4;
 8001836:	ee37 7a06 	vadd.f32	s14, s14, s12
            pSrc[2 * i1] = r1 + r2;
 800183a:	ee73 7a07 	vadd.f32	s15, s6, s14
 800183e:	edcb 7a00 	vstr	s15, [fp]
            r2 = r1 - r2;
 8001842:	ee73 da47 	vsub.f32	s27, s6, s14
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8001846:	3704      	adds	r7, #4
 8001848:	4447      	add	r7, r8
 800184a:	ed97 7a00 	vldr	s14, [r7]
 800184e:	3504      	adds	r5, #4
 8001850:	4445      	add	r5, r8
 8001852:	edd5 7a00 	vldr	s15, [r5]
 8001856:	ee37 ca27 	vadd.f32	s24, s14, s15
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800185a:	ee77 5a67 	vsub.f32	s11, s14, s15
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800185e:	9900      	ldr	r1, [sp, #0]
 8001860:	3104      	adds	r1, #4
 8001862:	4441      	add	r1, r8
 8001864:	edd1 3a00 	vldr	s7, [r1]
 8001868:	3204      	adds	r2, #4
 800186a:	4442      	add	r2, r8
 800186c:	edd2 7a00 	vldr	s15, [r2]
 8001870:	ee73 caa7 	vadd.f32	s25, s7, s15
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8001874:	ee73 3ae7 	vsub.f32	s7, s7, s15
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001878:	3404      	adds	r4, #4
 800187a:	4444      	add	r4, r8
 800187c:	ed94 6a00 	vldr	s12, [r4]
 8001880:	3004      	adds	r0, #4
 8001882:	4440      	add	r0, r8
 8001884:	ed90 7a00 	vldr	s14, [r0]
 8001888:	ee76 7a07 	vadd.f32	s15, s12, s14
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800188c:	ee36 6a47 	vsub.f32	s12, s12, s14
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8001890:	3304      	adds	r3, #4
 8001892:	4443      	add	r3, r8
 8001894:	ed93 4a00 	vldr	s8, [r3]
 8001898:	3604      	adds	r6, #4
 800189a:	4446      	add	r6, r8
 800189c:	ed96 7a00 	vldr	s14, [r6]
 80018a0:	ee34 3a07 	vadd.f32	s6, s8, s14
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80018a4:	ee34 4a47 	vsub.f32	s8, s8, s14
            t2 = s1 - s3;
 80018a8:	ee3c ea67 	vsub.f32	s28, s24, s15
            s1 = s1 + s3;
 80018ac:	ee3c ca27 	vadd.f32	s24, s24, s15
            s3 = s2 - s4;
 80018b0:	ee7c 7ac3 	vsub.f32	s15, s25, s6
            s2 = s2 + s4;
 80018b4:	ee3c 3a83 	vadd.f32	s6, s25, s6
            r1 = t1 + s3;
 80018b8:	ee7f ca27 	vadd.f32	s25, s30, s15
            t1 = t1 - s3;
 80018bc:	ee7f 7a67 	vsub.f32	s15, s30, s15
            pSrc[2 * i1 + 1] = s1 + s2;
 80018c0:	ee3c 7a03 	vadd.f32	s14, s24, s6
 80018c4:	ed87 7a00 	vstr	s14, [r7]
            s2 = s1 - s2;
 80018c8:	ee3c 7a43 	vsub.f32	s14, s24, s6
            s1 = t2 - r3;
 80018cc:	ee3e ca6e 	vsub.f32	s24, s28, s29
            t2 = t2 + r3;
 80018d0:	ee3e ea8e 	vadd.f32	s28, s29, s28
            p1 = co5 * r2;
 80018d4:	ee2a fa2d 	vmul.f32	s30, s20, s27
            p2 = si5 * s2;
 80018d8:	ee61 ea07 	vmul.f32	s29, s2, s14
            p3 = co5 * s2;
 80018dc:	ee2a 7a07 	vmul.f32	s14, s20, s14
            p4 = si5 * r2;
 80018e0:	ee21 3a2d 	vmul.f32	s6, s2, s27
            pSrc[2 * i5]     = p1 + p2;
 80018e4:	ee7f da2e 	vadd.f32	s27, s30, s29
 80018e8:	edca da00 	vstr	s27, [sl]
            pSrc[2 * i5 + 1] = p3 - p4;
 80018ec:	ee37 7a43 	vsub.f32	s14, s14, s6
 80018f0:	ed85 7a00 	vstr	s14, [r5]
            p1 = co3 * r1;
 80018f4:	ee2b 3a2c 	vmul.f32	s6, s22, s25
            p2 = si3 * s1;
 80018f8:	ee20 7a0c 	vmul.f32	s14, s0, s24
            p3 = co3 * s1;
 80018fc:	ee2b ca0c 	vmul.f32	s24, s22, s24
            p4 = si3 * r1;
 8001900:	ee60 ca2c 	vmul.f32	s25, s0, s25
            pSrc[2 * i3]     = p1 + p2;
 8001904:	ee33 7a07 	vadd.f32	s14, s6, s14
 8001908:	ed89 7a00 	vstr	s14, [r9]
            pSrc[2 * i3 + 1] = p3 - p4;
 800190c:	ee3c ca6c 	vsub.f32	s24, s24, s25
 8001910:	ed84 ca00 	vstr	s24, [r4]
            p1 = co7 * t1;
 8001914:	ee29 3a27 	vmul.f32	s6, s18, s15
            p2 = si7 * t2;
 8001918:	ee22 7a0e 	vmul.f32	s14, s4, s28
            p3 = co7 * t2;
 800191c:	ee29 ea0e 	vmul.f32	s28, s18, s28
            p4 = si7 * t1;
 8001920:	ee62 7a27 	vmul.f32	s15, s4, s15
            pSrc[2 * i7]     = p1 + p2;
 8001924:	ee33 7a07 	vadd.f32	s14, s6, s14
 8001928:	9c03      	ldr	r4, [sp, #12]
 800192a:	ed84 7a00 	vstr	s14, [r4]
            pSrc[2 * i7 + 1] = p3 - p4;
 800192e:	ee3e ea67 	vsub.f32	s28, s28, s15
 8001932:	ed80 ea00 	vstr	s28, [r0]
            r1 = (r6 - r8) * C81;
 8001936:	ee3d ca66 	vsub.f32	s24, s26, s13
 800193a:	ed9f 3a36 	vldr	s6, [pc, #216]	; 8001a14 <arm_radix8_butterfly_f32+0x54c>
 800193e:	ee2c ca03 	vmul.f32	s24, s24, s6
            r6 = (r6 + r8) * C81;
 8001942:	ee7d 6a26 	vadd.f32	s13, s26, s13
 8001946:	ee66 6a83 	vmul.f32	s13, s13, s6
            s1 = (s6 - s8) * C81;
 800194a:	ee33 7ac4 	vsub.f32	s14, s7, s8
 800194e:	ee27 7a03 	vmul.f32	s14, s14, s6
            s6 = (s6 + s8) * C81;
 8001952:	ee33 4a84 	vadd.f32	s8, s7, s8
 8001956:	ee24 3a03 	vmul.f32	s6, s8, s6
            t1 = r5 - r1;
 800195a:	ee74 7acc 	vsub.f32	s15, s9, s24
            r5 = r5 + r1;
 800195e:	ee74 4a8c 	vadd.f32	s9, s9, s24
            r8 = r7 - r6;
 8001962:	ee75 3a66 	vsub.f32	s7, s10, s13
            r7 = r7 + r6;
 8001966:	ee75 6a26 	vadd.f32	s13, s10, s13
            t2 = s5 - s1;
 800196a:	ee35 cac7 	vsub.f32	s24, s11, s14
            s5 = s5 + s1;
 800196e:	ee35 7a87 	vadd.f32	s14, s11, s14
            s8 = s7 - s6;
 8001972:	ee36 5a43 	vsub.f32	s10, s12, s6
            s7 = s7 + s6;
 8001976:	ee36 6a03 	vadd.f32	s12, s12, s6
            r1 = r5 + s7;
 800197a:	ee74 5a86 	vadd.f32	s11, s9, s12
            r5 = r5 - s7;
 800197e:	ee34 6ac6 	vsub.f32	s12, s9, s12
            r6 = t1 + s8;
 8001982:	ee37 4a85 	vadd.f32	s8, s15, s10
            t1 = t1 - s8;
 8001986:	ee77 4ac5 	vsub.f32	s9, s15, s10
            s1 = s5 - r7;
 800198a:	ee37 5a66 	vsub.f32	s10, s14, s13
            s5 = s5 + r7;
 800198e:	ee76 7a87 	vadd.f32	s15, s13, s14
            s6 = t2 - r8;
 8001992:	ee7c 6a63 	vsub.f32	s13, s24, s7
            t2 = t2 + r8;
 8001996:	ee33 7a8c 	vadd.f32	s14, s7, s24
            p1 = co2 * r1;
 800199a:	ee2b 3aa5 	vmul.f32	s6, s23, s11
            p2 = si2 * s1;
 800199e:	ee68 3a05 	vmul.f32	s7, s16, s10
            p3 = co2 * s1;
 80019a2:	ee2b 5a85 	vmul.f32	s10, s23, s10
            p4 = si2 * r1;
 80019a6:	ee68 5a25 	vmul.f32	s11, s16, s11
            pSrc[2 * i2]     = p1 + p2;
 80019aa:	ee73 3a23 	vadd.f32	s7, s6, s7
 80019ae:	9801      	ldr	r0, [sp, #4]
 80019b0:	edc0 3a00 	vstr	s7, [r0]
            pSrc[2 * i2 + 1] = p3 - p4;
 80019b4:	ee75 5a65 	vsub.f32	s11, s10, s11
 80019b8:	edc1 5a00 	vstr	s11, [r1]
            p1 = co8 * r5;
 80019bc:	ee28 5a86 	vmul.f32	s10, s17, s12
            p2 = si8 * s5;
 80019c0:	ee62 5aa7 	vmul.f32	s11, s5, s15
            p3 = co8 * s5;
 80019c4:	ee68 7aa7 	vmul.f32	s15, s17, s15
            p4 = si8 * r5;
 80019c8:	ee22 6a86 	vmul.f32	s12, s5, s12
            pSrc[2 * i8]     = p1 + p2;
 80019cc:	ee75 5a25 	vadd.f32	s11, s10, s11
 80019d0:	9805      	ldr	r0, [sp, #20]
 80019d2:	edc0 5a00 	vstr	s11, [r0]
            pSrc[2 * i8 + 1] = p3 - p4;
 80019d6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80019da:	edc6 7a00 	vstr	s15, [r6]
            p1 = co6 * r6;
 80019de:	ee69 5a84 	vmul.f32	s11, s19, s8
            p2 = si6 * s6;
 80019e2:	ee61 7aa6 	vmul.f32	s15, s3, s13
            p3 = co6 * s6;
 80019e6:	ee29 6aa6 	vmul.f32	s12, s19, s13
            p4 = si6 * r6;
 80019ea:	ee61 6a84 	vmul.f32	s13, s3, s8
            pSrc[2 * i6]     = p1 + p2;
 80019ee:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80019f2:	9902      	ldr	r1, [sp, #8]
 80019f4:	edc1 7a00 	vstr	s15, [r1]
            pSrc[2 * i6 + 1] = p3 - p4;
 80019f8:	ee76 6a66 	vsub.f32	s13, s12, s13
 80019fc:	edc2 6a00 	vstr	s13, [r2]
            p1 = co4 * t1;
 8001a00:	ee2a 6aa4 	vmul.f32	s12, s21, s9
            p2 = si4 * t2;
 8001a04:	ee60 6a87 	vmul.f32	s13, s1, s14
            p3 = co4 * t2;
 8001a08:	ee2a 7a87 	vmul.f32	s14, s21, s14
            p4 = si4 * t1;
 8001a0c:	ee60 7aa4 	vmul.f32	s15, s1, s9
 8001a10:	e002      	b.n	8001a18 <arm_radix8_butterfly_f32+0x550>
 8001a12:	bf00      	nop
 8001a14:	3f3504f3 	.word	0x3f3504f3
            pSrc[2 * i4]     = p1 + p2;
 8001a18:	ee76 6a26 	vadd.f32	s13, s12, s13
 8001a1c:	9904      	ldr	r1, [sp, #16]
 8001a1e:	edc1 6a00 	vstr	s13, [r1]
            pSrc[2 * i4 + 1] = p3 - p4;
 8001a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a26:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8001a2a:	9b06      	ldr	r3, [sp, #24]
 8001a2c:	449e      	add	lr, r3
         } while (i1 < fftLen);
 8001a2e:	9b07      	ldr	r3, [sp, #28]
 8001a30:	4573      	cmp	r3, lr
 8001a32:	f63f aead 	bhi.w	8001790 <arm_radix8_butterfly_f32+0x2c8>

         j++;
 8001a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a38:	3301      	adds	r3, #1
 8001a3a:	9309      	str	r3, [sp, #36]	; 0x24
      } while (j < n2);
 8001a3c:	459c      	cmp	ip, r3
 8001a3e:	f63f ae56 	bhi.w	80016ee <arm_radix8_butterfly_f32+0x226>

      twidCoefModifier <<= 3;
 8001a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	930a      	str	r3, [sp, #40]	; 0x28
      n2 = n2 >> 3;
 8001a4a:	f8cd c018 	str.w	ip, [sp, #24]
 8001a4e:	e545      	b.n	80014dc <arm_radix8_butterfly_f32+0x14>
   } while (n2 > 7);
}
 8001a50:	b00d      	add	sp, #52	; 0x34
 8001a52:	ecbd 8b10 	vpop	{d8-d15}
 8001a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a5a:	bf00      	nop

08001a5c <arm_nn_activations_direct_q15>:
   * More than 3 just not making much sense, makes no difference with
   * saturation followed by any of these activation functions. 
   */

void arm_nn_activations_direct_q15(q15_t * data, uint16_t size, uint16_t int_width, arm_nn_activation_type type)
{
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t  i = size;
    q15_t    *pIn = data;
    q15_t    *pOut = data;
    uint16_t  shift_size = 8 + 3 - int_width;
 8001a5e:	f1c2 050b 	rsb	r5, r2, #11
 8001a62:	b2ad      	uxth	r5, r5
    uint32_t  bit_mask = 0x7FF >> int_width;
 8001a64:	f240 74ff 	movw	r4, #2047	; 0x7ff
 8001a68:	fa44 f202 	asr.w	r2, r4, r2
    uint32_t  full_frac = bit_mask + 1;
 8001a6c:	1c56      	adds	r6, r2, #1
    const q15_t *lookup_table;

    switch (type)
 8001a6e:	b1eb      	cbz	r3, 8001aac <arm_nn_activations_direct_q15+0x50>
    case ARM_SIGMOID:
        lookup_table = sigmoidTable_q15;
        break;
    case ARM_TANH:
    default:
        lookup_table = tanhTable_q15;
 8001a70:	4f0f      	ldr	r7, [pc, #60]	; (8001ab0 <arm_nn_activations_direct_q15+0x54>)
 8001a72:	e018      	b.n	8001aa6 <arm_nn_activations_direct_q15+0x4a>
    }

    while (i)
    {
        q15_t     out;
        q15_t     in = *pIn++;
 8001a74:	f9b0 3000 	ldrsh.w	r3, [r0]
        q15_t     frac = (uint32_t) in & bit_mask;
 8001a78:	ea02 0c03 	and.w	ip, r2, r3
        q15_t     value = lookup_table[__USAT(in >> shift_size, 8)];
 8001a7c:	412b      	asrs	r3, r5
 8001a7e:	f383 0408 	usat	r4, #8, r3
 8001a82:	f937 4014 	ldrsh.w	r4, [r7, r4, lsl #1]
        q15_t     value2 = lookup_table[__USAT(1 + (in >> shift_size), 8)];
 8001a86:	3301      	adds	r3, #1
 8001a88:	f383 0308 	usat	r3, #8, r3
 8001a8c:	f937 3013 	ldrsh.w	r3, [r7, r3, lsl #1]

        /* doing the interpolation here for better accuracy */
        out = ((q31_t) (full_frac - frac) * value + (q31_t) value2 * frac) >> shift_size;
 8001a90:	eba6 0e0c 	sub.w	lr, r6, ip
 8001a94:	fb03 f30c 	mul.w	r3, r3, ip
 8001a98:	fb0e 3304 	mla	r3, lr, r4, r3
 8001a9c:	412b      	asrs	r3, r5

        *pOut++ = out;
 8001a9e:	8003      	strh	r3, [r0, #0]
        i--;
 8001aa0:	3901      	subs	r1, #1
 8001aa2:	b289      	uxth	r1, r1
        q15_t     in = *pIn++;
 8001aa4:	3002      	adds	r0, #2
    while (i)
 8001aa6:	2900      	cmp	r1, #0
 8001aa8:	d1e4      	bne.n	8001a74 <arm_nn_activations_direct_q15+0x18>
    }

}
 8001aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lookup_table = sigmoidTable_q15;
 8001aac:	4f01      	ldr	r7, [pc, #4]	; (8001ab4 <arm_nn_activations_direct_q15+0x58>)
 8001aae:	e7fa      	b.n	8001aa6 <arm_nn_activations_direct_q15+0x4a>
 8001ab0:	0800dfd4 	.word	0x0800dfd4
 8001ab4:	0800ddd4 	.word	0x0800ddd4

08001ab8 <arm_relu_q15>:
{

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    uint16_t  i = size >> 1;
 8001ab8:	084b      	lsrs	r3, r1, #1
    q15_t    *pOut = data;
    q31_t     in;
    q31_t     buf;
    q31_t     mask;

    while (i)
 8001aba:	b1eb      	cbz	r3, 8001af8 <arm_relu_q15+0x40>
{
 8001abc:	b470      	push	{r4, r5, r6}
    {
        in = *__SIMD32(pIn)++;
 8001abe:	1d06      	adds	r6, r0, #4
 8001ac0:	6802      	ldr	r2, [r0, #0]

        /* extract the first bit */
        buf = __ROR(in & 0x80008000, 15);
 8001ac2:	f002 2480 	and.w	r4, r2, #2147516416	; 0x80008000
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 8001ac6:	ea4f 35f4 	mov.w	r5, r4, ror #15

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001aca:	2400      	movs	r4, #0
 8001acc:	fad4 f415 	qsub16	r4, r4, r5

        /* if MSB=1, mask will be 0xFF, 0x0 otherwise */
        mask = __QSUB16(0x00000000, buf);

        *__SIMD32(pOut)++ = in & (~mask);
 8001ad0:	ea22 0204 	bic.w	r2, r2, r4
 8001ad4:	6002      	str	r2, [r0, #0]
        i--;
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	b29b      	uxth	r3, r3
        in = *__SIMD32(pIn)++;
 8001ada:	4630      	mov	r0, r6
    while (i)
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1ee      	bne.n	8001abe <arm_relu_q15+0x6>
    }

    if (size & 0x1)
 8001ae0:	f011 0f01 	tst.w	r1, #1
 8001ae4:	d003      	beq.n	8001aee <arm_relu_q15+0x36>
    {
        if (*pIn < 0)
 8001ae6:	f9b6 3000 	ldrsh.w	r3, [r6]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	db01      	blt.n	8001af2 <arm_relu_q15+0x3a>
            data[i] = 0;
    }

#endif                          /* ARM_MATH_DSP */

}
 8001aee:	bc70      	pop	{r4, r5, r6}
 8001af0:	4770      	bx	lr
            *pIn = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	8033      	strh	r3, [r6, #0]
}
 8001af6:	e7fa      	b.n	8001aee <arm_relu_q15+0x36>
    if (size & 0x1)
 8001af8:	f011 0f01 	tst.w	r1, #1
 8001afc:	d003      	beq.n	8001b06 <arm_relu_q15+0x4e>
        if (*pIn < 0)
 8001afe:	f9b0 3000 	ldrsh.w	r3, [r0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db00      	blt.n	8001b08 <arm_relu_q15+0x50>
 8001b06:	4770      	bx	lr
            *pIn = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	8003      	strh	r3, [r0, #0]
 8001b0c:	4770      	bx	lr

08001b0e <arm_fully_connected_q15>:
                        const uint16_t bias_shift,
                        const uint16_t out_shift, 
                        const q15_t * bias, 
                        q15_t * pOut,
                        q15_t * vec_buffer)
{
 8001b0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b12:	b087      	sub	sp, #28
 8001b14:	9002      	str	r0, [sp, #8]
 8001b16:	4692      	mov	sl, r2
 8001b18:	9305      	str	r3, [sp, #20]
 8001b1a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8001b1e:	9204      	str	r2, [sp, #16]
 8001b20:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 8001b24:	9a12      	ldr	r2, [sp, #72]	; 0x48

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    const q15_t *pB = pM;
    const q15_t *pB2 = pB + dim_vec;
 8001b26:	ea4f 004a 	mov.w	r0, sl, lsl #1
 8001b2a:	9001      	str	r0, [sp, #4]
    q15_t    *pO = pOut;
    const q15_t    *pA;
    const q15_t    *pBias = bias;
    uint16_t rowCnt = num_of_rows >> 1;
 8001b2c:	085b      	lsrs	r3, r3, #1
 8001b2e:	469b      	mov	fp, r3

    /* this loop loops over different output */
    while (rowCnt) {
 8001b30:	e043      	b.n	8001bba <arm_fully_connected_q15+0xac>
        pB2 = pB + dim_vec;

        while (colCnt)
        {
            q31_t     inV1, inM1, inM2;
            inV1 = *__SIMD32(pA)++;
 8001b32:	46b6      	mov	lr, r6
 8001b34:	f85e 2b08 	ldr.w	r2, [lr], #8
            inM1 = *__SIMD32(pB)++;
 8001b38:	4608      	mov	r0, r1
 8001b3a:	f850 8b08 	ldr.w	r8, [r0], #8

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001b3e:	fb22 4808 	smlad	r8, r2, r8, r4
            sum = __SMLAD(inV1, inM1, sum);
            inM2 = *__SIMD32(pB2)++;
 8001b42:	46ac      	mov	ip, r5
 8001b44:	f85c 4b08 	ldr.w	r4, [ip], #8
 8001b48:	fb22 3304 	smlad	r3, r2, r4, r3
            sum2 = __SMLAD(inV1, inM2, sum2);

            inV1 = *__SIMD32(pA)++;
 8001b4c:	6872      	ldr	r2, [r6, #4]
            inM1 = *__SIMD32(pB)++;
 8001b4e:	684c      	ldr	r4, [r1, #4]
 8001b50:	fb22 8404 	smlad	r4, r2, r4, r8
            sum = __SMLAD(inV1, inM1, sum);
            inM2 = *__SIMD32(pB2)++;
 8001b54:	6869      	ldr	r1, [r5, #4]
 8001b56:	fb22 3301 	smlad	r3, r2, r1, r3
            sum2 = __SMLAD(inV1, inM2, sum2);

            colCnt--;
 8001b5a:	3f01      	subs	r7, #1
 8001b5c:	b2bf      	uxth	r7, r7
            inV1 = *__SIMD32(pA)++;
 8001b5e:	4676      	mov	r6, lr
            inM2 = *__SIMD32(pB2)++;
 8001b60:	4665      	mov	r5, ip
            inM1 = *__SIMD32(pB)++;
 8001b62:	4601      	mov	r1, r0
        while (colCnt)
 8001b64:	2f00      	cmp	r7, #0
 8001b66:	d1e4      	bne.n	8001b32 <arm_fully_connected_q15+0x24>
        }
        colCnt = dim_vec & 0x3;
 8001b68:	f00a 0203 	and.w	r2, sl, #3
        while (colCnt)
 8001b6c:	e00e      	b.n	8001b8c <arm_fully_connected_q15+0x7e>
        {
            q15_t     inV = *pA++;
 8001b6e:	f9b6 0000 	ldrsh.w	r0, [r6]
            q15_t     inM = *pB++;
 8001b72:	f9b1 c000 	ldrsh.w	ip, [r1]
            q15_t     inM2 = *pB2++;
 8001b76:	f9b5 7000 	ldrsh.w	r7, [r5]

            sum += inV * inM;
 8001b7a:	fb00 440c 	mla	r4, r0, ip, r4
            sum2 += inV * inM2;
 8001b7e:	fb00 3307 	mla	r3, r0, r7, r3
            colCnt--;
 8001b82:	3a01      	subs	r2, #1
 8001b84:	b292      	uxth	r2, r2
            q15_t     inV = *pA++;
 8001b86:	3602      	adds	r6, #2
            q15_t     inM2 = *pB2++;
 8001b88:	3502      	adds	r5, #2
            q15_t     inM = *pB++;
 8001b8a:	3102      	adds	r1, #2
        while (colCnt)
 8001b8c:	2a00      	cmp	r2, #0
 8001b8e:	d1ee      	bne.n	8001b6e <arm_fully_connected_q15+0x60>
        }                       /* while over colCnt */
        *pO++ =  (q15_t) (__SSAT((sum >> out_shift), 16));
 8001b90:	fa44 f409 	asr.w	r4, r4, r9
 8001b94:	f304 040f 	ssat	r4, #16, r4
 8001b98:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001b9a:	f820 4b04 	strh.w	r4, [r0], #4
        *pO++ = (q15_t) (__SSAT((sum2>> out_shift), 16));
 8001b9e:	fa43 f309 	asr.w	r3, r3, r9
 8001ba2:	f303 030f 	ssat	r3, #16, r3
 8001ba6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001ba8:	8053      	strh	r3, [r2, #2]
		
        /* adjust the pointers and counters */
        pB = pB + dim_vec;
 8001baa:	9b01      	ldr	r3, [sp, #4]
 8001bac:	4419      	add	r1, r3
        rowCnt --;
 8001bae:	f10b 3bff 	add.w	fp, fp, #4294967295
 8001bb2:	fa1f fb8b 	uxth.w	fp, fp
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8001bb6:	9a03      	ldr	r2, [sp, #12]
        *pO++ = (q15_t) (__SSAT((sum2>> out_shift), 16));
 8001bb8:	9013      	str	r0, [sp, #76]	; 0x4c
    while (rowCnt) {
 8001bba:	f1bb 0f00 	cmp.w	fp, #0
 8001bbe:	d014      	beq.n	8001bea <arm_fully_connected_q15+0xdc>
        q31_t     sum =  ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	f933 4b04 	ldrsh.w	r4, [r3], #4
 8001bc6:	9303      	str	r3, [sp, #12]
 8001bc8:	9d04      	ldr	r5, [sp, #16]
 8001bca:	40ac      	lsls	r4, r5
 8001bcc:	f109 30ff 	add.w	r0, r9, #4294967295
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	4083      	lsls	r3, r0
 8001bd4:	441c      	add	r4, r3
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8001bd6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001bda:	40aa      	lsls	r2, r5
 8001bdc:	4413      	add	r3, r2
        uint16_t  colCnt = dim_vec >> 2;
 8001bde:	ea4f 079a 	mov.w	r7, sl, lsr #2
        pB2 = pB + dim_vec;
 8001be2:	9a01      	ldr	r2, [sp, #4]
 8001be4:	188d      	adds	r5, r1, r2
        pA = pV;
 8001be6:	9e02      	ldr	r6, [sp, #8]
        while (colCnt)
 8001be8:	e7bc      	b.n	8001b64 <arm_fully_connected_q15+0x56>
 8001bea:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    }

    rowCnt = num_of_rows & 0x1;
 8001bee:	9b05      	ldr	r3, [sp, #20]
 8001bf0:	f003 0c01 	and.w	ip, r3, #1
 8001bf4:	4666      	mov	r6, ip
 8001bf6:	f8dd c010 	ldr.w	ip, [sp, #16]

    while (rowCnt) {
 8001bfa:	e02d      	b.n	8001c58 <arm_fully_connected_q15+0x14a>

        pA = pV;
      
        while (colCnt) {
            q31_t     inV1, inM1;
            inV1 = *__SIMD32(pA)++;
 8001bfc:	4674      	mov	r4, lr
 8001bfe:	f854 5b08 	ldr.w	r5, [r4], #8
            inM1 = *__SIMD32(pB)++;
 8001c02:	460a      	mov	r2, r1
 8001c04:	f852 7b08 	ldr.w	r7, [r2], #8
 8001c08:	fb25 3507 	smlad	r5, r5, r7, r3
            sum = __SMLAD(inV1, inM1, sum);
            
            inV1 = *__SIMD32(pA)++;
 8001c0c:	f8de 3004 	ldr.w	r3, [lr, #4]
            inM1 = *__SIMD32(pB)++;
 8001c10:	6849      	ldr	r1, [r1, #4]
 8001c12:	fb23 5301 	smlad	r3, r3, r1, r5
            sum = __SMLAD(inV1, inM1, sum);
				
            colCnt--;
 8001c16:	3801      	subs	r0, #1
 8001c18:	b280      	uxth	r0, r0
            inV1 = *__SIMD32(pA)++;
 8001c1a:	46a6      	mov	lr, r4
            inM1 = *__SIMD32(pB)++;
 8001c1c:	4611      	mov	r1, r2
        while (colCnt) {
 8001c1e:	2800      	cmp	r0, #0
 8001c20:	d1ec      	bne.n	8001bfc <arm_fully_connected_q15+0xee>
	}
			
	/* left-over of the vector */
	colCnt = dim_vec & 0x3;
 8001c22:	f00a 0203 	and.w	r2, sl, #3
	while(colCnt) {
 8001c26:	e00a      	b.n	8001c3e <arm_fully_connected_q15+0x130>
            q15_t     inV = *pA++;
 8001c28:	f9be 0000 	ldrsh.w	r0, [lr]
            q15_t     inM = *pB++;
 8001c2c:	f9b1 4000 	ldrsh.w	r4, [r1]

            sum += inV * inM;
 8001c30:	fb04 3300 	mla	r3, r4, r0, r3

            colCnt--;
 8001c34:	3a01      	subs	r2, #1
 8001c36:	b292      	uxth	r2, r2
            q15_t     inV = *pA++;
 8001c38:	f10e 0e02 	add.w	lr, lr, #2
            q15_t     inM = *pB++;
 8001c3c:	3102      	adds	r1, #2
	while(colCnt) {
 8001c3e:	2a00      	cmp	r2, #0
 8001c40:	d1f2      	bne.n	8001c28 <arm_fully_connected_q15+0x11a>
	}

        *pO++ =  (q15_t) (__SSAT((sum >> out_shift), 16));
 8001c42:	fa43 f309 	asr.w	r3, r3, r9
 8001c46:	f303 030f 	ssat	r3, #16, r3
 8001c4a:	f8ab 3000 	strh.w	r3, [fp]
			
        rowCnt --;
 8001c4e:	3e01      	subs	r6, #1
 8001c50:	b2b6      	uxth	r6, r6
        q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8001c52:	4642      	mov	r2, r8
        *pO++ =  (q15_t) (__SSAT((sum >> out_shift), 16));
 8001c54:	f10b 0b02 	add.w	fp, fp, #2
    while (rowCnt) {
 8001c58:	b17e      	cbz	r6, 8001c7a <arm_fully_connected_q15+0x16c>
        q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8001c5a:	f102 0802 	add.w	r8, r2, #2
 8001c5e:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001c62:	fa03 f20c 	lsl.w	r2, r3, ip
 8001c66:	f109 30ff 	add.w	r0, r9, #4294967295
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	4083      	lsls	r3, r0
 8001c6e:	4413      	add	r3, r2
        uint16_t  colCnt = dim_vec >> 2;
 8001c70:	ea4f 009a 	mov.w	r0, sl, lsr #2
        pA = pV;
 8001c74:	f8dd e008 	ldr.w	lr, [sp, #8]
        while (colCnt) {
 8001c78:	e7d1      	b.n	8001c1e <arm_fully_connected_q15+0x110>
#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return (ARM_MATH_SUCCESS);

}
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	b007      	add	sp, #28
 8001c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001c84 <arm_softmax_q15>:
   *  with a log(2) scaling factor.
   *
   */

void arm_softmax_q15(const q15_t * vec_in, const uint16_t dim_vec, q15_t * p_out)
{
 8001c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c88:	4604      	mov	r4, r0
 8001c8a:	4616      	mov	r6, r2
    q31_t     sum;
    int16_t   i;
    uint8_t   shift;
    q31_t     base;
    base = -1 * 0x100000;
 8001c8c:	4d22      	ldr	r5, [pc, #136]	; (8001d18 <arm_softmax_q15+0x94>)
    for (i = 0; i < dim_vec; i++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e001      	b.n	8001c96 <arm_softmax_q15+0x12>
 8001c92:	3301      	adds	r3, #1
 8001c94:	b21b      	sxth	r3, r3
 8001c96:	460f      	mov	r7, r1
 8001c98:	428b      	cmp	r3, r1
 8001c9a:	da05      	bge.n	8001ca8 <arm_softmax_q15+0x24>
    {
        if (vec_in[i] > base)
 8001c9c:	f934 2013 	ldrsh.w	r2, [r4, r3, lsl #1]
 8001ca0:	42aa      	cmp	r2, r5
 8001ca2:	ddf6      	ble.n	8001c92 <arm_softmax_q15+0xe>
        {
            base = vec_in[i];
 8001ca4:	4615      	mov	r5, r2
 8001ca6:	e7f4      	b.n	8001c92 <arm_softmax_q15+0xe>

    /* we ignore really small values  
     * anyway, they will be 0 after shrinking
     * to q15_t
     */
    base = base - 16;
 8001ca8:	f1a5 0810 	sub.w	r8, r5, #16

    sum = 0;

    for (i = 0; i < dim_vec; i++)
 8001cac:	2300      	movs	r3, #0
    sum = 0;
 8001cae:	461a      	mov	r2, r3
    for (i = 0; i < dim_vec; i++)
 8001cb0:	e001      	b.n	8001cb6 <arm_softmax_q15+0x32>
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	429f      	cmp	r7, r3
 8001cb8:	dd0d      	ble.n	8001cd6 <arm_softmax_q15+0x52>
    {
        if (vec_in[i] > base)
 8001cba:	f934 1013 	ldrsh.w	r1, [r4, r3, lsl #1]
 8001cbe:	4541      	cmp	r1, r8
 8001cc0:	ddf7      	ble.n	8001cb2 <arm_softmax_q15+0x2e>
        {
            shift = (uint8_t)__USAT(vec_in[i] - base, 5);
 8001cc2:	eba1 0108 	sub.w	r1, r1, r8
 8001cc6:	f381 0105 	usat	r1, #5, r1
            sum += 0x1 << shift;
 8001cca:	b2c9      	uxtb	r1, r1
 8001ccc:	2001      	movs	r0, #1
 8001cce:	fa00 f101 	lsl.w	r1, r0, r1
 8001cd2:	440a      	add	r2, r1
 8001cd4:	e7ed      	b.n	8001cb2 <arm_softmax_q15+0x2e>
        }
    }

    /* This is effectively (0x1 << 32) / sum */
    int64_t div_base = 0x100000000LL;
    int output_base = (int32_t)(div_base / sum);
 8001cd6:	17d3      	asrs	r3, r2, #31
 8001cd8:	2000      	movs	r0, #0
 8001cda:	2101      	movs	r1, #1
 8001cdc:	f7fe fb5c 	bl	8000398 <__aeabi_ldivmod>

    /* Final confidence will be output_base >> ( 17 - (vec_in[i] - base) )
     * so 32768 (0x1<<15) -> 100% confidence when sum = 0x1 << 16, output_base = 0x1 << 16
     * and vec_in[i]-base = 16
     */
    for (i = 0; i < dim_vec; i++)
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	e004      	b.n	8001cee <arm_softmax_q15+0x6a>
            /* Here minimum value of 17+base-vec[i] will be 1 */
            shift = (uint8_t)__USAT(17+base-vec_in[i], 5);
            p_out[i] = (q15_t) __SSAT((output_base >> shift), 16);
        } else
        {
            p_out[i] = 0;
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
    for (i = 0; i < dim_vec; i++)
 8001cea:	3301      	adds	r3, #1
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	429f      	cmp	r7, r3
 8001cf0:	dd0f      	ble.n	8001d12 <arm_softmax_q15+0x8e>
        if (vec_in[i] > base) 
 8001cf2:	f934 1013 	ldrsh.w	r1, [r4, r3, lsl #1]
 8001cf6:	4541      	cmp	r1, r8
 8001cf8:	ddf4      	ble.n	8001ce4 <arm_softmax_q15+0x60>
            shift = (uint8_t)__USAT(17+base-vec_in[i], 5);
 8001cfa:	1c6a      	adds	r2, r5, #1
 8001cfc:	1a52      	subs	r2, r2, r1
 8001cfe:	f382 0205 	usat	r2, #5, r2
            p_out[i] = (q15_t) __SSAT((output_base >> shift), 16);
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	fa40 f202 	asr.w	r2, r0, r2
 8001d08:	f302 020f 	ssat	r2, #16, r2
 8001d0c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8001d10:	e7eb      	b.n	8001cea <arm_softmax_q15+0x66>
        }
    }

}
 8001d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d16:	bf00      	nop
 8001d18:	fff00000 	.word	0xfff00000

08001d1c <fully_connected_run>:
q15_t aq15_layer_2_bias[22] = {0};
q15_t aq15_layer_3_weights[22*22] = {0};
q15_t aq15_layer_3_bias[22] = {0};

void fully_connected_run(q15_t input_data[], uint32_t *prediction)
{
 8001d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d20:	b086      	sub	sp, #24
 8001d22:	4680      	mov	r8, r0
    int16_t i16_max_val = 0x7FFF, i = 0;

    arm_fully_connected_q15(
 8001d24:	2400      	movs	r4, #0
 8001d26:	9404      	str	r4, [sp, #16]
 8001d28:	4d3c      	ldr	r5, [pc, #240]	; (8001e1c <fully_connected_run+0x100>)
 8001d2a:	9503      	str	r5, [sp, #12]
 8001d2c:	4b3c      	ldr	r3, [pc, #240]	; (8001e20 <fully_connected_run+0x104>)
 8001d2e:	9302      	str	r3, [sp, #8]
 8001d30:	230f      	movs	r3, #15
 8001d32:	9301      	str	r3, [sp, #4]
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2316      	movs	r3, #22
 8001d38:	461a      	mov	r2, r3
 8001d3a:	493a      	ldr	r1, [pc, #232]	; (8001e24 <fully_connected_run+0x108>)
 8001d3c:	f7ff fee7 	bl	8001b0e <arm_fully_connected_q15>
        LAYER_1_OU_SHIFT,
        aq15_layer_1_bias,
        aq15_out_Buf,
        NULL);

    arm_nn_activations_direct_q15(
 8001d40:	4623      	mov	r3, r4
 8001d42:	2201      	movs	r2, #1
 8001d44:	2116      	movs	r1, #22
 8001d46:	4628      	mov	r0, r5
 8001d48:	f7ff fe88 	bl	8001a5c <arm_nn_activations_direct_q15>
    		aq15_out_Buf,
			LAYER_1_OU_DIM,
			1,
			ARM_SIGMOID);

    arm_relu_q15(
 8001d4c:	2116      	movs	r1, #22
 8001d4e:	4628      	mov	r0, r5
 8001d50:	f7ff feb2 	bl	8001ab8 <arm_relu_q15>
        aq15_out_Buf,
        LAYER_1_OU_DIM);
    memcpy(input_data, aq15_out_Buf, sizeof(aq15_out_Buf));
 8001d54:	462e      	mov	r6, r5
 8001d56:	4644      	mov	r4, r8
 8001d58:	3520      	adds	r5, #32
 8001d5a:	4637      	mov	r7, r6
 8001d5c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001d5e:	6020      	str	r0, [r4, #0]
 8001d60:	6061      	str	r1, [r4, #4]
 8001d62:	60a2      	str	r2, [r4, #8]
 8001d64:	60e3      	str	r3, [r4, #12]
 8001d66:	463e      	mov	r6, r7
 8001d68:	3410      	adds	r4, #16
 8001d6a:	42af      	cmp	r7, r5
 8001d6c:	d1f5      	bne.n	8001d5a <fully_connected_run+0x3e>
 8001d6e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8001d70:	6020      	str	r0, [r4, #0]
 8001d72:	6061      	str	r1, [r4, #4]
 8001d74:	60a2      	str	r2, [r4, #8]
    arm_fully_connected_q15(
 8001d76:	2300      	movs	r3, #0
 8001d78:	9304      	str	r3, [sp, #16]
 8001d7a:	4e28      	ldr	r6, [pc, #160]	; (8001e1c <fully_connected_run+0x100>)
 8001d7c:	9603      	str	r6, [sp, #12]
 8001d7e:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <fully_connected_run+0x10c>)
 8001d80:	9302      	str	r3, [sp, #8]
 8001d82:	230f      	movs	r3, #15
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2316      	movs	r3, #22
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4927      	ldr	r1, [pc, #156]	; (8001e2c <fully_connected_run+0x110>)
 8001d8e:	4640      	mov	r0, r8
 8001d90:	f7ff febd 	bl	8001b0e <arm_fully_connected_q15>
        LAYER_2_IN_SHIFT,
        LAYER_2_OU_SHIFT,
        aq15_layer_2_bias,
        aq15_out_Buf,
        NULL);
    arm_relu_q15(
 8001d94:	2116      	movs	r1, #22
 8001d96:	4630      	mov	r0, r6
 8001d98:	f7ff fe8e 	bl	8001ab8 <arm_relu_q15>
        aq15_out_Buf,
        LAYER_2_OU_DIM);
    memcpy(input_data, aq15_out_Buf, sizeof(aq15_out_Buf));
 8001d9c:	4635      	mov	r5, r6
 8001d9e:	4644      	mov	r4, r8
 8001da0:	3620      	adds	r6, #32
 8001da2:	462f      	mov	r7, r5
 8001da4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001da6:	6020      	str	r0, [r4, #0]
 8001da8:	6061      	str	r1, [r4, #4]
 8001daa:	60a2      	str	r2, [r4, #8]
 8001dac:	60e3      	str	r3, [r4, #12]
 8001dae:	463d      	mov	r5, r7
 8001db0:	3410      	adds	r4, #16
 8001db2:	42b7      	cmp	r7, r6
 8001db4:	d1f5      	bne.n	8001da2 <fully_connected_run+0x86>
 8001db6:	cd07      	ldmia	r5!, {r0, r1, r2}
 8001db8:	6020      	str	r0, [r4, #0]
 8001dba:	6061      	str	r1, [r4, #4]
 8001dbc:	60a2      	str	r2, [r4, #8]
    arm_fully_connected_q15(
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	9304      	str	r3, [sp, #16]
 8001dc2:	4f16      	ldr	r7, [pc, #88]	; (8001e1c <fully_connected_run+0x100>)
 8001dc4:	9703      	str	r7, [sp, #12]
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <fully_connected_run+0x114>)
 8001dc8:	9302      	str	r3, [sp, #8]
 8001dca:	230f      	movs	r3, #15
 8001dcc:	9301      	str	r3, [sp, #4]
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	2306      	movs	r3, #6
 8001dd2:	2216      	movs	r2, #22
 8001dd4:	4917      	ldr	r1, [pc, #92]	; (8001e34 <fully_connected_run+0x118>)
 8001dd6:	4640      	mov	r0, r8
 8001dd8:	f7ff fe99 	bl	8001b0e <arm_fully_connected_q15>
        LAYER_3_IN_SHIFT,
        LAYER_3_OU_SHIFT,
        aq15_layer_3_bias,
        aq15_out_Buf,
        NULL);
    memcpy(input_data, aq15_out_Buf, sizeof(aq15_out_Buf));
 8001ddc:	463d      	mov	r5, r7
 8001dde:	4644      	mov	r4, r8
 8001de0:	3720      	adds	r7, #32
 8001de2:	462e      	mov	r6, r5
 8001de4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001de6:	6020      	str	r0, [r4, #0]
 8001de8:	6061      	str	r1, [r4, #4]
 8001dea:	60a2      	str	r2, [r4, #8]
 8001dec:	60e3      	str	r3, [r4, #12]
 8001dee:	4635      	mov	r5, r6
 8001df0:	3410      	adds	r4, #16
 8001df2:	42be      	cmp	r6, r7
 8001df4:	d1f5      	bne.n	8001de2 <fully_connected_run+0xc6>
 8001df6:	cd07      	ldmia	r5!, {r0, r1, r2}
 8001df8:	6020      	str	r0, [r4, #0]
 8001dfa:	6061      	str	r1, [r4, #4]
 8001dfc:	60a2      	str	r2, [r4, #8]
    arm_softmax_q15(
 8001dfe:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <fully_connected_run+0x100>)
 8001e00:	2106      	movs	r1, #6
 8001e02:	4640      	mov	r0, r8
 8001e04:	f7ff ff3e 	bl	8001c84 <arm_softmax_q15>
        input_data,
        LAYER_3_OU_DIM,
        aq15_out_Buf);
    for(i = 0; i < LAYER_3_OU_DIM; i++) {
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e001      	b.n	8001e10 <fully_connected_run+0xf4>
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	b21b      	sxth	r3, r3
 8001e10:	2b05      	cmp	r3, #5
 8001e12:	ddfb      	ble.n	8001e0c <fully_connected_run+0xf0>
        if(i16_max_val < aq15_out_Buf[i]) {
            i16_max_val = aq15_out_Buf[i];
            *prediction = i;
        }
    }
}
 8001e14:	b006      	add	sp, #24
 8001e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e1a:	bf00      	nop
 8001e1c:	24001450 	.word	0x24001450
 8001e20:	24000874 	.word	0x24000874
 8001e24:	240008a0 	.word	0x240008a0
 8001e28:	24000c68 	.word	0x24000c68
 8001e2c:	24000c94 	.word	0x24000c94
 8001e30:	2400105c 	.word	0x2400105c
 8001e34:	24001088 	.word	0x24001088

08001e38 <inst_absolute>:
#include "functions.h"

//**********************************************************************************************//
// Preprocessing - Instantaneous values (6 features)
// To use with instantaneous values
void inst_absolute(float32_t in[], float32_t out[]){
 8001e38:	b508      	push	{r3, lr}
	arm_abs_f32(&in[0], &out[0], frameSize);
 8001e3a:	4b02      	ldr	r3, [pc, #8]	; (8001e44 <inst_absolute+0xc>)
 8001e3c:	881a      	ldrh	r2, [r3, #0]
 8001e3e:	f7fe fcc3 	bl	80007c8 <arm_abs_f32>
}
 8001e42:	bd08      	pop	{r3, pc}
 8001e44:	0800e1d4 	.word	0x0800e1d4

08001e48 <complex_inst_absolute>:

// To use with complex input values
void complex_inst_absolute(float32_t in[], float32_t out[]){
 8001e48:	b508      	push	{r3, lr}
	arm_cmplx_mag_f32(&in[0], &out[0], frameSize);
 8001e4a:	4b02      	ldr	r3, [pc, #8]	; (8001e54 <complex_inst_absolute+0xc>)
 8001e4c:	881a      	ldrh	r2, [r3, #0]
 8001e4e:	f7fe fda1 	bl	8000994 <arm_cmplx_mag_f32>
}
 8001e52:	bd08      	pop	{r3, pc}
 8001e54:	0800e1d4 	.word	0x0800e1d4

08001e58 <inst_phase>:

void inst_phase(float32_t in[], float32_t out[]){
 8001e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e5c:	4606      	mov	r6, r0
 8001e5e:	460f      	mov	r7, r1
	int j = 0;
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8001e60:	2400      	movs	r4, #0
	int j = 0;
 8001e62:	4625      	mov	r5, r4
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8001e64:	e010      	b.n	8001e88 <inst_phase+0x30>
		out[j] = atan2f(in[i+1], in[i]);
 8001e66:	1c63      	adds	r3, r4, #1
 8001e68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8001e6c:	eb06 0284 	add.w	r2, r6, r4, lsl #2
 8001e70:	eb07 0885 	add.w	r8, r7, r5, lsl #2
 8001e74:	edd2 0a00 	vldr	s1, [r2]
 8001e78:	ed93 0a00 	vldr	s0, [r3]
 8001e7c:	f005 feca 	bl	8007c14 <atan2f>
 8001e80:	ed88 0a00 	vstr	s0, [r8]
		j++;
 8001e84:	3501      	adds	r5, #1
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8001e86:	3402      	adds	r4, #2
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <inst_phase+0x40>)
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
 8001e90:	dbe9      	blt.n	8001e66 <inst_phase+0xe>
	}
}
 8001e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e96:	bf00      	nop
 8001e98:	0800e1d4 	.word	0x0800e1d4
 8001e9c:	00000000 	.word	0x00000000

08001ea0 <unwrap>:

void unwrap(float32_t in[], float32_t out[]){
 8001ea0:	b410      	push	{r4}
	uint16_t k = 0;
	float32_t alpha = M_PI;
	float32_t diff = 0.0f;
	for(int i = 0; i < (frameSize - 1); i++){
 8001ea2:	2300      	movs	r3, #0
	uint16_t k = 0;
 8001ea4:	ee05 3a90 	vmov	s11, r3
	for(int i = 0; i < (frameSize - 1); i++){
 8001ea8:	e006      	b.n	8001eb8 <unwrap+0x18>
		diff = fabsf(in[i+1] - in[i]);
		if(diff > alpha){
			if(in[i+1] < in[i]){
				k++;
			} else {
				k--;
 8001eaa:	ee15 2a90 	vmov	r2, s11
 8001eae:	3a01      	subs	r2, #1
 8001eb0:	b292      	uxth	r2, r2
 8001eb2:	ee05 2a90 	vmov	s11, r2
	for(int i = 0; i < (frameSize - 1); i++){
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	4a27      	ldr	r2, [pc, #156]	; (8001f58 <unwrap+0xb8>)
 8001eba:	8812      	ldrh	r2, [r2, #0]
 8001ebc:	1e54      	subs	r4, r2, #1
 8001ebe:	429c      	cmp	r4, r3
 8001ec0:	dd2e      	ble.n	8001f20 <unwrap+0x80>
		out[i] = in[i] + 2*M_PI*k;
 8001ec2:	009a      	lsls	r2, r3, #2
 8001ec4:	1884      	adds	r4, r0, r2
 8001ec6:	ed94 7a00 	vldr	s14, [r4]
 8001eca:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001ece:	eeb8 6be5 	vcvt.f64.s32	d6, s11
 8001ed2:	440a      	add	r2, r1
 8001ed4:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8001f50 <unwrap+0xb0>
 8001ed8:	ee06 7b04 	vmla.f64	d7, d6, d4
 8001edc:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001ee0:	ed82 7a00 	vstr	s14, [r2]
		diff = fabsf(in[i+1] - in[i]);
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001eea:	edd2 6a00 	vldr	s13, [r2]
 8001eee:	ed94 7a00 	vldr	s14, [r4]
 8001ef2:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8001ef6:	eef0 7ae7 	vabs.f32	s15, s15
		if(diff > alpha){
 8001efa:	ed9f 6a18 	vldr	s12, [pc, #96]	; 8001f5c <unwrap+0xbc>
 8001efe:	eef4 7ac6 	vcmpe.f32	s15, s12
 8001f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f06:	ddd6      	ble.n	8001eb6 <unwrap+0x16>
			if(in[i+1] < in[i]){
 8001f08:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f10:	d5cb      	bpl.n	8001eaa <unwrap+0xa>
				k++;
 8001f12:	ee15 2a90 	vmov	r2, s11
 8001f16:	3201      	adds	r2, #1
 8001f18:	b292      	uxth	r2, r2
 8001f1a:	ee05 2a90 	vmov	s11, r2
 8001f1e:	e7ca      	b.n	8001eb6 <unwrap+0x16>
			}
		}
	}
	out[frameSize-1] = in[frameSize-1] + 2*M_PI*k;
 8001f20:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4418      	add	r0, r3
 8001f2a:	ed90 7a00 	vldr	s14, [r0]
 8001f2e:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
 8001f32:	eeb8 7be5 	vcvt.f64.s32	d7, s11
 8001f36:	4419      	add	r1, r3
 8001f38:	ed9f 5b05 	vldr	d5, [pc, #20]	; 8001f50 <unwrap+0xb0>
 8001f3c:	ee07 6b05 	vmla.f64	d6, d7, d5
 8001f40:	eeb7 7bc6 	vcvt.f32.f64	s14, d6
 8001f44:	ed81 7a00 	vstr	s14, [r1]
}
 8001f48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	54442d18 	.word	0x54442d18
 8001f54:	401921fb 	.word	0x401921fb
 8001f58:	0800e1d4 	.word	0x0800e1d4
 8001f5c:	40490fdb 	.word	0x40490fdb

08001f60 <inst_frequency>:

void inst_frequency(float32_t in[], float32_t out[]){
 8001f60:	b570      	push	{r4, r5, r6, lr}
 8001f62:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 8001f66:	4606      	mov	r6, r0
 8001f68:	460c      	mov	r4, r1
	float32_t phase[2048] = {0};
 8001f6a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8001f6e:	462a      	mov	r2, r5
 8001f70:	2100      	movs	r1, #0
 8001f72:	eb0d 0005 	add.w	r0, sp, r5
 8001f76:	f005 fc8f 	bl	8007898 <memset>
	float32_t unwrapped_phase[2048] = {0};
 8001f7a:	462a      	mov	r2, r5
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4668      	mov	r0, sp
 8001f80:	f005 fc8a 	bl	8007898 <memset>
	float32_t C = 1 / M_TWOPI;
	inst_phase(&in[0], &phase[0]);
 8001f84:	eb0d 0105 	add.w	r1, sp, r5
 8001f88:	4630      	mov	r0, r6
 8001f8a:	f7ff ff65 	bl	8001e58 <inst_phase>
	unwrap(&phase[0], &unwrapped_phase[0]);
 8001f8e:	4669      	mov	r1, sp
 8001f90:	eb0d 0005 	add.w	r0, sp, r5
 8001f94:	f7ff ff84 	bl	8001ea0 <unwrap>
	for(int i = 0; i < (frameSize-1); i++){
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e013      	b.n	8001fc4 <inst_frequency+0x64>
		out[i] = C*(unwrapped_phase[i + 1] - unwrapped_phase[i]);
 8001f9c:	1c59      	adds	r1, r3, #1
 8001f9e:	eb0d 0281 	add.w	r2, sp, r1, lsl #2
 8001fa2:	edd2 7a00 	vldr	s15, [r2]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	eb0d 0203 	add.w	r2, sp, r3
 8001fac:	ed92 7a00 	vldr	s14, [r2]
 8001fb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fb4:	4423      	add	r3, r4
 8001fb6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001fe4 <inst_frequency+0x84>
 8001fba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fbe:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < (frameSize-1); i++){
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4a08      	ldr	r2, [pc, #32]	; (8001fe8 <inst_frequency+0x88>)
 8001fc6:	8812      	ldrh	r2, [r2, #0]
 8001fc8:	1e51      	subs	r1, r2, #1
 8001fca:	4299      	cmp	r1, r3
 8001fcc:	dce6      	bgt.n	8001f9c <inst_frequency+0x3c>
	}
	out[frameSize - 1] = 0;
 8001fce:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001fd2:	4413      	add	r3, r2
 8001fd4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001fd8:	2300      	movs	r3, #0
 8001fda:	6023      	str	r3, [r4, #0]
}
 8001fdc:	f50d 4d80 	add.w	sp, sp, #16384	; 0x4000
 8001fe0:	bd70      	pop	{r4, r5, r6, pc}
 8001fe2:	bf00      	nop
 8001fe4:	3e22f983 	.word	0x3e22f983
 8001fe8:	0800e1d4 	.word	0x0800e1d4

08001fec <inst_centralized_normalized_absolute>:

void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 8001fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	4682      	mov	sl, r0
 8001ff4:	460e      	mov	r6, r1
	float32_t mean = 0, max = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	9303      	str	r3, [sp, #12]
 8001ffa:	9302      	str	r3, [sp, #8]
	uint32_t max_index = 0;
 8001ffc:	2700      	movs	r7, #0
 8001ffe:	f10d 0910 	add.w	r9, sp, #16
 8002002:	f849 7d0c 	str.w	r7, [r9, #-12]!
	float32_t *absolute, *normalized;
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8002006:	4b25      	ldr	r3, [pc, #148]	; (800209c <inst_centralized_normalized_absolute+0xb0>)
 8002008:	f8b3 8000 	ldrh.w	r8, [r3]
 800200c:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8002010:	4620      	mov	r0, r4
 8002012:	f005 f9fb 	bl	800740c <malloc>
 8002016:	4605      	mov	r5, r0
	normalized = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8002018:	4620      	mov	r0, r4
 800201a:	f005 f9f7 	bl	800740c <malloc>
 800201e:	4604      	mov	r4, r0
	complex_inst_absolute(in, &absolute[0]);
 8002020:	4629      	mov	r1, r5
 8002022:	4650      	mov	r0, sl
 8002024:	f7ff ff10 	bl	8001e48 <complex_inst_absolute>
	arm_max_f32(absolute, frameSize, &max, &max_index);
 8002028:	464b      	mov	r3, r9
 800202a:	aa02      	add	r2, sp, #8
 800202c:	4641      	mov	r1, r8
 800202e:	4628      	mov	r0, r5
 8002030:	f7fe fdce 	bl	8000bd0 <arm_max_f32>
	for(int a = 0; a < frameSize; a++){
 8002034:	463a      	mov	r2, r7
 8002036:	e00b      	b.n	8002050 <inst_centralized_normalized_absolute+0x64>
		normalized[a] = absolute[a] / max;
 8002038:	0093      	lsls	r3, r2, #2
 800203a:	18e9      	adds	r1, r5, r3
 800203c:	edd1 6a00 	vldr	s13, [r1]
 8002040:	4423      	add	r3, r4
 8002042:	ed9d 7a02 	vldr	s14, [sp, #8]
 8002046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800204a:	edc3 7a00 	vstr	s15, [r3]
	for(int a = 0; a < frameSize; a++){
 800204e:	3201      	adds	r2, #1
 8002050:	4647      	mov	r7, r8
 8002052:	4590      	cmp	r8, r2
 8002054:	dcf0      	bgt.n	8002038 <inst_centralized_normalized_absolute+0x4c>
	}
	arm_mean_f32(&normalized[0], frameSize, &mean);
 8002056:	aa03      	add	r2, sp, #12
 8002058:	4641      	mov	r1, r8
 800205a:	4620      	mov	r0, r4
 800205c:	f7fe fe08 	bl	8000c70 <arm_mean_f32>
	for(int i = 0; i < frameSize; i++){
 8002060:	2200      	movs	r2, #0
 8002062:	e00f      	b.n	8002084 <inst_centralized_normalized_absolute+0x98>
		out[i] = normalized[i] / mean - 1;
 8002064:	0093      	lsls	r3, r2, #2
 8002066:	18e1      	adds	r1, r4, r3
 8002068:	edd1 6a00 	vldr	s13, [r1]
 800206c:	ed9d 7a03 	vldr	s14, [sp, #12]
 8002070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002074:	4433      	add	r3, r6
 8002076:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800207a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800207e:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < frameSize; i++){
 8002082:	3201      	adds	r2, #1
 8002084:	4297      	cmp	r7, r2
 8002086:	dced      	bgt.n	8002064 <inst_centralized_normalized_absolute+0x78>
	}
	free(absolute);
 8002088:	4628      	mov	r0, r5
 800208a:	f005 f9c7 	bl	800741c <free>
	free(normalized);
 800208e:	4620      	mov	r0, r4
 8002090:	f005 f9c4 	bl	800741c <free>
}
 8002094:	b004      	add	sp, #16
 8002096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800209a:	bf00      	nop
 800209c:	0800e1d4 	.word	0x0800e1d4

080020a0 <std_dev>:

void std_dev(float32_t in[], float32_t *out) {
 80020a0:	b508      	push	{r3, lr}
	arm_std_f32(&in[0], frameSize, out);
 80020a2:	460a      	mov	r2, r1
 80020a4:	4b02      	ldr	r3, [pc, #8]	; (80020b0 <std_dev+0x10>)
 80020a6:	8819      	ldrh	r1, [r3, #0]
 80020a8:	f7fe fe10 	bl	8000ccc <arm_std_f32>
}
 80020ac:	bd08      	pop	{r3, pc}
 80020ae:	bf00      	nop
 80020b0:	0800e1d4 	.word	0x0800e1d4

080020b4 <mean_of_signal_magnitude>:
//**********************************************************************************************//
// Feature number 6
void mean_of_signal_magnitude(float32_t in[], float32_t *out) {
 80020b4:	b508      	push	{r3, lr}
	arm_mean_f32(&in[0], frameSize, out);
 80020b6:	460a      	mov	r2, r1
 80020b8:	4b02      	ldr	r3, [pc, #8]	; (80020c4 <mean_of_signal_magnitude+0x10>)
 80020ba:	8819      	ldrh	r1, [r3, #0]
 80020bc:	f7fe fdd8 	bl	8000c70 <arm_mean_f32>
}
 80020c0:	bd08      	pop	{r3, pc}
 80020c2:	bf00      	nop
 80020c4:	0800e1d4 	.word	0x0800e1d4

080020c8 <squared_mean_of_signal_magnitude>:

// Feature number 7
void squared_mean_of_signal_magnitude(float32_t in[], float32_t *out) {
 80020c8:	b510      	push	{r4, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	460c      	mov	r4, r1
	float32_t mean_of_signal_magnitude;
	arm_mean_f32(&in[0], frameSize, &mean_of_signal_magnitude);
 80020ce:	aa01      	add	r2, sp, #4
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <squared_mean_of_signal_magnitude+0x20>)
 80020d2:	8819      	ldrh	r1, [r3, #0]
 80020d4:	f7fe fdcc 	bl	8000c70 <arm_mean_f32>
	*out = mean_of_signal_magnitude * mean_of_signal_magnitude;
 80020d8:	eddd 7a01 	vldr	s15, [sp, #4]
 80020dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80020e0:	edc4 7a00 	vstr	s15, [r4]
}
 80020e4:	b002      	add	sp, #8
 80020e6:	bd10      	pop	{r4, pc}
 80020e8:	0800e1d4 	.word	0x0800e1d4

080020ec <normalized_sqrt_of_sum_of_amp>:

// Feature number 8
void normalized_sqrt_of_sum_of_amp(float32_t in[], float32_t *out) {
 80020ec:	b538      	push	{r3, r4, r5, lr}
 80020ee:	460d      	mov	r5, r1
	float32_t sum = 0.0f;
	for(int i = 0; i < frameSize; i++){
 80020f0:	2300      	movs	r3, #0
	float32_t sum = 0.0f;
 80020f2:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8002124 <normalized_sqrt_of_sum_of_amp+0x38>
	for(int i = 0; i < frameSize; i++){
 80020f6:	e006      	b.n	8002106 <normalized_sqrt_of_sum_of_amp+0x1a>
		sum += in[i];
 80020f8:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 80020fc:	edd2 7a00 	vldr	s15, [r2]
 8002100:	ee30 0a27 	vadd.f32	s0, s0, s15
	for(int i = 0; i < frameSize; i++){
 8002104:	3301      	adds	r3, #1
 8002106:	4a08      	ldr	r2, [pc, #32]	; (8002128 <normalized_sqrt_of_sum_of_amp+0x3c>)
 8002108:	8814      	ldrh	r4, [r2, #0]
 800210a:	429c      	cmp	r4, r3
 800210c:	dcf4      	bgt.n	80020f8 <normalized_sqrt_of_sum_of_amp+0xc>
	}
	*out = sqrtf(sum)/frameSize;
 800210e:	f005 fd83 	bl	8007c18 <sqrtf>
 8002112:	ee07 4a90 	vmov	s15, r4
 8002116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800211a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800211e:	ed85 0a00 	vstr	s0, [r5]
}
 8002122:	bd38      	pop	{r3, r4, r5, pc}
 8002124:	00000000 	.word	0x00000000
 8002128:	0800e1d4 	.word	0x0800e1d4

0800212c <ratio_iq>:
// Feature number 9
void ratio_iq(float32_t in[], float32_t *out) {
	// ft_output = np.sum(np.power(np.imag(signal_input), 2)) / np.sum(np.power(np.real(signal_input), 2))
	float32_t sum_of_real_squared = 0.0f;
	float32_t sum_of_imag_squared = 0.0f;
	for(int i = 0; i < 2*frameSize; i+=2){
 800212c:	2300      	movs	r3, #0
	float32_t sum_of_imag_squared = 0.0f;
 800212e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002170 <ratio_iq+0x44>
	float32_t sum_of_real_squared = 0.0f;
 8002132:	eef0 6a47 	vmov.f32	s13, s14
	for(int i = 0; i < 2*frameSize; i+=2){
 8002136:	e011      	b.n	800215c <ratio_iq+0x30>
		sum_of_real_squared += in[i]*in[i];
 8002138:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800213c:	edd2 7a00 	vldr	s15, [r2]
 8002140:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002144:	ee76 6aa7 	vadd.f32	s13, s13, s15
		sum_of_imag_squared += in[i+1]*in[i+1];
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800214e:	edd2 7a00 	vldr	s15, [r2]
 8002152:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002156:	ee37 7a27 	vadd.f32	s14, s14, s15
	for(int i = 0; i < 2*frameSize; i+=2){
 800215a:	3302      	adds	r3, #2
 800215c:	4a05      	ldr	r2, [pc, #20]	; (8002174 <ratio_iq+0x48>)
 800215e:	8812      	ldrh	r2, [r2, #0]
 8002160:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8002164:	dbe8      	blt.n	8002138 <ratio_iq+0xc>
	}
	*out = sum_of_imag_squared / sum_of_real_squared;
 8002166:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800216a:	edc1 7a00 	vstr	s15, [r1]
}
 800216e:	4770      	bx	lr
 8002170:	00000000 	.word	0x00000000
 8002174:	0800e1d4 	.word	0x0800e1d4

08002178 <gmax>:

// Feature number 10
void gmax(float32_t in[], float32_t *out){
 8002178:	b570      	push	{r4, r5, r6, lr}
 800217a:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 800217e:	b082      	sub	sp, #8
 8002180:	4604      	mov	r4, r0
 8002182:	460e      	mov	r6, r1
	uint32_t ifftFlag = 0;
	uint32_t doBitReverse = 1;
	uint32_t maxValueIndex; //Unused
	float32_t maxValue;
	float32_t *result_mag;
	float32_t result_fft[4096] = {0};
 8002184:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002188:	2100      	movs	r1, #0
 800218a:	4668      	mov	r0, sp
 800218c:	f005 fb84 	bl	8007898 <memset>

	result_mag = (float32_t *) malloc(fftSize * sizeof(float32_t));
 8002190:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002194:	f005 f93a 	bl	800740c <malloc>
 8002198:	4605      	mov	r5, r0

	// Copy array to calculate
	for(int i = 0; i < frameSize*2; i++){
 800219a:	2300      	movs	r3, #0
 800219c:	e005      	b.n	80021aa <gmax+0x32>
		result_fft[i] = in[i];
 800219e:	009a      	lsls	r2, r3, #2
 80021a0:	18a1      	adds	r1, r4, r2
 80021a2:	6809      	ldr	r1, [r1, #0]
 80021a4:	446a      	add	r2, sp
 80021a6:	6011      	str	r1, [r2, #0]
	for(int i = 0; i < frameSize*2; i++){
 80021a8:	3301      	adds	r3, #1
 80021aa:	4a17      	ldr	r2, [pc, #92]	; (8002208 <gmax+0x90>)
 80021ac:	8812      	ldrh	r2, [r2, #0]
 80021ae:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80021b2:	dbf4      	blt.n	800219e <gmax+0x26>
	}

	arm_cfft_f32(&arm_cfft_sR_f32_len2048, &result_fft[0], ifftFlag, doBitReverse);
 80021b4:	2301      	movs	r3, #1
 80021b6:	2200      	movs	r2, #0
 80021b8:	4669      	mov	r1, sp
 80021ba:	4814      	ldr	r0, [pc, #80]	; (800220c <gmax+0x94>)
 80021bc:	f7ff f916 	bl	80013ec <arm_cfft_f32>
	arm_cmplx_mag_f32(result_fft, result_mag, fftSize);
 80021c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021c4:	4629      	mov	r1, r5
 80021c6:	4668      	mov	r0, sp
 80021c8:	f7fe fbe4 	bl	8000994 <arm_cmplx_mag_f32>
	arm_max_f32(result_mag, fftSize, &maxValue, &maxValueIndex);
 80021cc:	f244 0304 	movw	r3, #16388	; 0x4004
 80021d0:	446b      	add	r3, sp
 80021d2:	f50d 4280 	add.w	r2, sp, #16384	; 0x4000
 80021d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021da:	4628      	mov	r0, r5
 80021dc:	f7fe fcf8 	bl	8000bd0 <arm_max_f32>
	*out = maxValue*maxValue/fftSize;
 80021e0:	f50d 4380 	add.w	r3, sp, #16384	; 0x4000
 80021e4:	edd3 7a00 	vldr	s15, [r3]
 80021e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021ec:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002210 <gmax+0x98>
 80021f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021f4:	edc6 7a00 	vstr	s15, [r6]
	free(result_mag);
 80021f8:	4628      	mov	r0, r5
 80021fa:	f005 f90f 	bl	800741c <free>
}
 80021fe:	f50d 4d80 	add.w	sp, sp, #16384	; 0x4000
 8002202:	b002      	add	sp, #8
 8002204:	bd70      	pop	{r4, r5, r6, pc}
 8002206:	bf00      	nop
 8002208:	0800e1d4 	.word	0x0800e1d4
 800220c:	0800ddc4 	.word	0x0800ddc4
 8002210:	3a000000 	.word	0x3a000000

08002214 <kurtosis_of_abs_amplitude>:

// Features number 11 and 12
void kurtosis_of_abs_amplitude(float32_t in[], float32_t *out, uint32_t blockSize){
 8002214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002218:	b087      	sub	sp, #28
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	468a      	mov	sl, r1
 8002220:	4614      	mov	r4, r2
	float32_t mean_array[blockSize];
 8002222:	0093      	lsls	r3, r2, #2
 8002224:	330a      	adds	r3, #10
 8002226:	f023 0307 	bic.w	r3, r3, #7
 800222a:	ebad 0d03 	sub.w	sp, sp, r3
 800222e:	46e9      	mov	r9, sp
	float32_t x_1[blockSize];
 8002230:	ebad 0d03 	sub.w	sp, sp, r3
 8002234:	46e8      	mov	r8, sp
	float32_t x_2[blockSize];
 8002236:	ebad 0d03 	sub.w	sp, sp, r3
 800223a:	466d      	mov	r5, sp
	float32_t temp_1[blockSize];
 800223c:	ebad 0d03 	sub.w	sp, sp, r3
 8002240:	466e      	mov	r6, sp
	float32_t temp_2[blockSize];
 8002242:	ebad 0d03 	sub.w	sp, sp, r3
 8002246:	f8c7 d000 	str.w	sp, [r7]
	float32_t result[blockSize];
 800224a:	ebad 0d03 	sub.w	sp, sp, r3
 800224e:	46eb      	mov	fp, sp
	float32_t mean, m4, m2;
	// Calculate mean
	arm_mean_f32(&in[0], blockSize, &mean);
 8002250:	f107 0214 	add.w	r2, r7, #20
 8002254:	4621      	mov	r1, r4
 8002256:	f7fe fd0b 	bl	8000c70 <arm_mean_f32>
	// Transform scalar into vector
	arm_fill_f32(mean, &mean_array[0], blockSize);
 800225a:	4621      	mov	r1, r4
 800225c:	4648      	mov	r0, r9
 800225e:	ed97 0a05 	vldr	s0, [r7, #20]
 8002262:	f7fe fdb3 	bl	8000dcc <arm_fill_f32>
	// Calculate (x - mean)
	arm_sub_f32(&in[0], &mean_array[0], &x_1[0], blockSize);
 8002266:	4623      	mov	r3, r4
 8002268:	4642      	mov	r2, r8
 800226a:	4649      	mov	r1, r9
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7fe fb16 	bl	800089e <arm_sub_f32>
	// Make a copy of (x - mean)
	arm_copy_f32(&x_1[0], &x_2[0], blockSize);
 8002272:	4622      	mov	r2, r4
 8002274:	4629      	mov	r1, r5
 8002276:	4640      	mov	r0, r8
 8002278:	f7fe fd8c 	bl	8000d94 <arm_copy_f32>
	// Calculate (x - mean) ^ 4
	arm_mult_f32(&x_1[0], &x_2[0], &temp_1[0], blockSize); // temp1 = (x - u)^2
 800227c:	4623      	mov	r3, r4
 800227e:	4632      	mov	r2, r6
 8002280:	4629      	mov	r1, r5
 8002282:	4640      	mov	r0, r8
 8002284:	f7fe face 	bl	8000824 <arm_mult_f32>
	arm_mult_f32(&temp_1[0], &x_2[0], &temp_2[0], blockSize); // temp2 = (x - u)^3
 8002288:	4623      	mov	r3, r4
 800228a:	f8d7 8000 	ldr.w	r8, [r7]
 800228e:	4642      	mov	r2, r8
 8002290:	4629      	mov	r1, r5
 8002292:	4630      	mov	r0, r6
 8002294:	f7fe fac6 	bl	8000824 <arm_mult_f32>
	arm_mult_f32(&temp_2[0], &x_2[0], &result[0], blockSize); // result = (x - u)^4
 8002298:	4623      	mov	r3, r4
 800229a:	465a      	mov	r2, fp
 800229c:	4629      	mov	r1, r5
 800229e:	4640      	mov	r0, r8
 80022a0:	f7fe fac0 	bl	8000824 <arm_mult_f32>
	// Calculate mean of (x - mean) ^ 4
	arm_mean_f32(&result[0], blockSize, &m4);
 80022a4:	f107 0210 	add.w	r2, r7, #16
 80022a8:	4621      	mov	r1, r4
 80022aa:	4658      	mov	r0, fp
 80022ac:	f7fe fce0 	bl	8000c70 <arm_mean_f32>
	// Calculate mean of (x - mean) ^ 2
	arm_mean_f32(&temp_1[0], blockSize, &m2);
 80022b0:	f107 020c 	add.w	r2, r7, #12
 80022b4:	4621      	mov	r1, r4
 80022b6:	4630      	mov	r0, r6
 80022b8:	f7fe fcda 	bl	8000c70 <arm_mean_f32>
	*out = m4 / (m2*m2) - 3;
 80022bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80022c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022c4:	edd7 6a04 	vldr	s13, [r7, #16]
 80022c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022cc:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80022d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022d4:	edca 7a00 	vstr	s15, [sl]
}
 80022d8:	371c      	adds	r7, #28
 80022da:	46bd      	mov	sp, r7
 80022dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080022e0 <kurtosis_of_abs_freq>:

void kurtosis_of_abs_freq(float32_t in[], float32_t *out, uint32_t blockSize){
 80022e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022e4:	b087      	sub	sp, #28
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	468a      	mov	sl, r1
 80022ec:	4614      	mov	r4, r2
	float32_t mean_array[blockSize];
 80022ee:	0093      	lsls	r3, r2, #2
 80022f0:	330a      	adds	r3, #10
 80022f2:	f023 0307 	bic.w	r3, r3, #7
 80022f6:	ebad 0d03 	sub.w	sp, sp, r3
 80022fa:	46e9      	mov	r9, sp
	float32_t x_1[blockSize];
 80022fc:	ebad 0d03 	sub.w	sp, sp, r3
 8002300:	46e8      	mov	r8, sp
	float32_t x_2[blockSize];
 8002302:	ebad 0d03 	sub.w	sp, sp, r3
 8002306:	466d      	mov	r5, sp
	float32_t temp_1[blockSize];
 8002308:	ebad 0d03 	sub.w	sp, sp, r3
 800230c:	466e      	mov	r6, sp
	float32_t temp_2[blockSize];
 800230e:	ebad 0d03 	sub.w	sp, sp, r3
 8002312:	f8c7 d000 	str.w	sp, [r7]
	float32_t result[blockSize];
 8002316:	ebad 0d03 	sub.w	sp, sp, r3
 800231a:	46eb      	mov	fp, sp
	float32_t mean, m4, m2;
	// Calculate mean
	arm_mean_f32(&in[0], blockSize, &mean);
 800231c:	f107 0214 	add.w	r2, r7, #20
 8002320:	4621      	mov	r1, r4
 8002322:	f7fe fca5 	bl	8000c70 <arm_mean_f32>
	// Transform scalar into vector
	arm_fill_f32(mean, &mean_array[0], blockSize);
 8002326:	4621      	mov	r1, r4
 8002328:	4648      	mov	r0, r9
 800232a:	ed97 0a05 	vldr	s0, [r7, #20]
 800232e:	f7fe fd4d 	bl	8000dcc <arm_fill_f32>
	// Calculate (x - mean)
	arm_sub_f32(&in[0], &mean_array[0], &x_1[0], blockSize);
 8002332:	4623      	mov	r3, r4
 8002334:	4642      	mov	r2, r8
 8002336:	4649      	mov	r1, r9
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7fe fab0 	bl	800089e <arm_sub_f32>
	// Make a copy of (x - mean)
	arm_copy_f32(&x_1[0], &x_2[0], blockSize);
 800233e:	4622      	mov	r2, r4
 8002340:	4629      	mov	r1, r5
 8002342:	4640      	mov	r0, r8
 8002344:	f7fe fd26 	bl	8000d94 <arm_copy_f32>
	// Calculate (x - mean) ^ 4
	arm_mult_f32(&x_1[0], &x_2[0], &temp_1[0], blockSize); // temp1 = (x - u)^2
 8002348:	4623      	mov	r3, r4
 800234a:	4632      	mov	r2, r6
 800234c:	4629      	mov	r1, r5
 800234e:	4640      	mov	r0, r8
 8002350:	f7fe fa68 	bl	8000824 <arm_mult_f32>
	arm_mult_f32(&temp_1[0], &x_2[0], &temp_2[0], blockSize); // temp2 = (x - u)^3
 8002354:	4623      	mov	r3, r4
 8002356:	f8d7 8000 	ldr.w	r8, [r7]
 800235a:	4642      	mov	r2, r8
 800235c:	4629      	mov	r1, r5
 800235e:	4630      	mov	r0, r6
 8002360:	f7fe fa60 	bl	8000824 <arm_mult_f32>
	arm_mult_f32(&temp_2[0], &x_2[0], &result[0], blockSize); // result = (x - u)^4
 8002364:	4623      	mov	r3, r4
 8002366:	465a      	mov	r2, fp
 8002368:	4629      	mov	r1, r5
 800236a:	4640      	mov	r0, r8
 800236c:	f7fe fa5a 	bl	8000824 <arm_mult_f32>
	// Calculate mean of (x - mean) ^ 4
	arm_mean_f32(&result[0], blockSize, &m4);
 8002370:	f107 0210 	add.w	r2, r7, #16
 8002374:	4621      	mov	r1, r4
 8002376:	4658      	mov	r0, fp
 8002378:	f7fe fc7a 	bl	8000c70 <arm_mean_f32>
	// Calculate mean of (x - mean) ^ 2
	arm_mean_f32(&temp_1[0], blockSize, &m2);
 800237c:	f107 020c 	add.w	r2, r7, #12
 8002380:	4621      	mov	r1, r4
 8002382:	4630      	mov	r0, r6
 8002384:	f7fe fc74 	bl	8000c70 <arm_mean_f32>
	*out = m4 / (m2*m2) - 3;
 8002388:	edd7 7a03 	vldr	s15, [r7, #12]
 800238c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002390:	edd7 6a04 	vldr	s13, [r7, #16]
 8002394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002398:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800239c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023a0:	edca 7a00 	vstr	s15, [sl]
}
 80023a4:	371c      	adds	r7, #28
 80023a6:	46bd      	mov	sp, r7
 80023a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080023ac <moment20>:

// Central moment definition
// Mpq = E[x^(p-q).x*^q]
void moment20(float32_t in[], float32_t *out){
 80023ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4681      	mov	r9, r0
 80023b4:	4688      	mov	r8, r1
	float32_t in_cp[frameSize*2];
 80023b6:	4b21      	ldr	r3, [pc, #132]	; (800243c <moment20+0x90>)
 80023b8:	881e      	ldrh	r6, [r3, #0]
 80023ba:	0075      	lsls	r5, r6, #1
 80023bc:	00f3      	lsls	r3, r6, #3
 80023be:	330a      	adds	r3, #10
 80023c0:	08db      	lsrs	r3, r3, #3
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	ebad 0d03 	sub.w	sp, sp, r3
 80023c8:	46ea      	mov	sl, sp
	float32_t m20[frameSize*2]; // in^2
 80023ca:	ebad 0d03 	sub.w	sp, sp, r3
 80023ce:	466c      	mov	r4, sp
	float32_t m20_real = 0, m20_imag = 0, m20_real_mean = 0, m20_imag_mean = 0;
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 80023d0:	462a      	mov	r2, r5
 80023d2:	4651      	mov	r1, sl
 80023d4:	f7fe fcde 	bl	8000d94 <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 80023d8:	4633      	mov	r3, r6
 80023da:	4622      	mov	r2, r4
 80023dc:	4651      	mov	r1, sl
 80023de:	4648      	mov	r0, r9
 80023e0:	f7fe fb62 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 80023e4:	2300      	movs	r3, #0
	float32_t m20_real = 0, m20_imag = 0, m20_real_mean = 0, m20_imag_mean = 0;
 80023e6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8002440 <moment20+0x94>
 80023ea:	eeb0 7a67 	vmov.f32	s14, s15
	for(int i = 0; i < frameSize*2; i+=2){
 80023ee:	e00d      	b.n	800240c <moment20+0x60>
		m20_real += m20[i];
 80023f0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80023f4:	edd2 6a00 	vldr	s13, [r2]
 80023f8:	ee37 7a26 	vadd.f32	s14, s14, s13
		m20_imag += m20[i+1];
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002402:	edd2 6a00 	vldr	s13, [r2]
 8002406:	ee77 7aa6 	vadd.f32	s15, s15, s13
	for(int i = 0; i < frameSize*2; i+=2){
 800240a:	3302      	adds	r3, #2
 800240c:	429d      	cmp	r5, r3
 800240e:	dcef      	bgt.n	80023f0 <moment20+0x44>
	}
	m20_real_mean = m20_real / frameSize;
 8002410:	ee06 6a90 	vmov	s13, r6
 8002414:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002418:	ee87 0a26 	vdiv.f32	s0, s14, s13
	m20_imag_mean = m20_imag / frameSize;
 800241c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	*out = sqrtf(m20_real_mean*m20_real_mean + m20_imag_mean*m20_imag_mean);
 8002420:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002424:	ee27 7a07 	vmul.f32	s14, s14, s14
 8002428:	ee30 0a07 	vadd.f32	s0, s0, s14
 800242c:	f005 fbf4 	bl	8007c18 <sqrtf>
 8002430:	ed88 0a00 	vstr	s0, [r8]
}
 8002434:	46bd      	mov	sp, r7
 8002436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800243a:	bf00      	nop
 800243c:	0800e1d4 	.word	0x0800e1d4
 8002440:	00000000 	.word	0x00000000

08002444 <moment21>:

void moment21(float32_t in[], float32_t *out){
 8002444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002448:	af00      	add	r7, sp, #0
 800244a:	4606      	mov	r6, r0
 800244c:	460d      	mov	r5, r1
	float32_t in_conj[frameSize*2];
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <moment21+0x60>)
 8002450:	881c      	ldrh	r4, [r3, #0]
 8002452:	00e3      	lsls	r3, r4, #3
 8002454:	330a      	adds	r3, #10
 8002456:	08db      	lsrs	r3, r3, #3
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	ebad 0d03 	sub.w	sp, sp, r3
 800245e:	46e8      	mov	r8, sp
	float32_t m21[frameSize*2];
 8002460:	ebad 0d03 	sub.w	sp, sp, r3
 8002464:	46e9      	mov	r9, sp
	float32_t in_mag[frameSize];
 8002466:	00a3      	lsls	r3, r4, #2
 8002468:	330a      	adds	r3, #10
 800246a:	08db      	lsrs	r3, r3, #3
 800246c:	eba9 03c3 	sub.w	r3, r9, r3, lsl #3
 8002470:	469d      	mov	sp, r3
 8002472:	46ea      	mov	sl, sp
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8002474:	4622      	mov	r2, r4
 8002476:	4641      	mov	r1, r8
 8002478:	f7fe fa4e 	bl	8000918 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_conj[0], &m21[0], frameSize);
 800247c:	4623      	mov	r3, r4
 800247e:	464a      	mov	r2, r9
 8002480:	4641      	mov	r1, r8
 8002482:	4630      	mov	r0, r6
 8002484:	f7fe fb10 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mag_f32(&m21[0], &in_mag[0], frameSize);
 8002488:	4622      	mov	r2, r4
 800248a:	4651      	mov	r1, sl
 800248c:	4648      	mov	r0, r9
 800248e:	f7fe fa81 	bl	8000994 <arm_cmplx_mag_f32>
	arm_mean_f32(&in_mag[0], frameSize, out);
 8002492:	462a      	mov	r2, r5
 8002494:	4621      	mov	r1, r4
 8002496:	4650      	mov	r0, sl
 8002498:	f7fe fbea 	bl	8000c70 <arm_mean_f32>
	// Calculating the mean after the absolute value here works because there
	// is no imaginary part in the number M21, different from M20
}
 800249c:	46bd      	mov	sp, r7
 800249e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024a2:	bf00      	nop
 80024a4:	0800e1d4 	.word	0x0800e1d4

080024a8 <moment22>:

void moment22(float32_t in[], float32_t *out){
 80024a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4688      	mov	r8, r1
	float32_t in_conj[frameSize*2];
 80024b0:	4b24      	ldr	r3, [pc, #144]	; (8002544 <moment22+0x9c>)
 80024b2:	881d      	ldrh	r5, [r3, #0]
 80024b4:	006e      	lsls	r6, r5, #1
 80024b6:	00eb      	lsls	r3, r5, #3
 80024b8:	330a      	adds	r3, #10
 80024ba:	08db      	lsrs	r3, r3, #3
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	ebad 0d03 	sub.w	sp, sp, r3
 80024c2:	46e9      	mov	r9, sp
	float32_t in_conj_cp[frameSize*2];
 80024c4:	ebad 0d03 	sub.w	sp, sp, r3
 80024c8:	46ea      	mov	sl, sp
	float32_t m22[frameSize*2]; // in^2
 80024ca:	ebad 0d03 	sub.w	sp, sp, r3
 80024ce:	466c      	mov	r4, sp
	float32_t m22_real = 0, m22_imag = 0, m22_real_mean = 0, m22_imag_mean = 0;
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 80024d0:	462a      	mov	r2, r5
 80024d2:	4649      	mov	r1, r9
 80024d4:	f7fe fa20 	bl	8000918 <arm_cmplx_conj_f32>
	arm_copy_f32(&in_conj[0], &in_conj_cp[0], frameSize*2);
 80024d8:	4632      	mov	r2, r6
 80024da:	4651      	mov	r1, sl
 80024dc:	4648      	mov	r0, r9
 80024de:	f7fe fc59 	bl	8000d94 <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in_conj[0], &in_conj_cp[0], &m22[0], frameSize);
 80024e2:	462b      	mov	r3, r5
 80024e4:	4622      	mov	r2, r4
 80024e6:	4651      	mov	r1, sl
 80024e8:	4648      	mov	r0, r9
 80024ea:	f7fe fadd 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 80024ee:	2300      	movs	r3, #0
	float32_t m22_real = 0, m22_imag = 0, m22_real_mean = 0, m22_imag_mean = 0;
 80024f0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8002548 <moment22+0xa0>
 80024f4:	eeb0 7a67 	vmov.f32	s14, s15
	for(int i = 0; i < frameSize*2; i+=2){
 80024f8:	e00d      	b.n	8002516 <moment22+0x6e>
		m22_real += m22[i];
 80024fa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80024fe:	edd2 6a00 	vldr	s13, [r2]
 8002502:	ee37 7a26 	vadd.f32	s14, s14, s13
		m22_imag += m22[i+1];
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800250c:	edd2 6a00 	vldr	s13, [r2]
 8002510:	ee77 7aa6 	vadd.f32	s15, s15, s13
	for(int i = 0; i < frameSize*2; i+=2){
 8002514:	3302      	adds	r3, #2
 8002516:	429e      	cmp	r6, r3
 8002518:	dcef      	bgt.n	80024fa <moment22+0x52>
	}
	m22_real_mean = m22_real / frameSize;
 800251a:	ee06 5a90 	vmov	s13, r5
 800251e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002522:	ee87 0a26 	vdiv.f32	s0, s14, s13
	m22_imag_mean = m22_imag / frameSize;
 8002526:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	*out = sqrtf(m22_real_mean*m22_real_mean + m22_imag_mean*m22_imag_mean);
 800252a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800252e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8002532:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002536:	f005 fb6f 	bl	8007c18 <sqrtf>
 800253a:	ed88 0a00 	vstr	s0, [r8]
}
 800253e:	46bd      	mov	sp, r7
 8002540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002544:	0800e1d4 	.word	0x0800e1d4
 8002548:	00000000 	.word	0x00000000

0800254c <moment40>:

void moment40(float32_t in[], float32_t *out){
 800254c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	468a      	mov	sl, r1
	float32_t in_cp[frameSize*2];
 8002558:	4b2c      	ldr	r3, [pc, #176]	; (800260c <moment40+0xc0>)
 800255a:	881d      	ldrh	r5, [r3, #0]
 800255c:	006e      	lsls	r6, r5, #1
 800255e:	00eb      	lsls	r3, r5, #3
 8002560:	330a      	adds	r3, #10
 8002562:	08db      	lsrs	r3, r3, #3
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	ebad 0d03 	sub.w	sp, sp, r3
 800256a:	46e8      	mov	r8, sp
	float32_t m20[frameSize*2]; // in^2
 800256c:	ebad 0d03 	sub.w	sp, sp, r3
 8002570:	46e9      	mov	r9, sp
	float32_t m30[frameSize]; // in^3
 8002572:	00ab      	lsls	r3, r5, #2
 8002574:	330a      	adds	r3, #10
 8002576:	08db      	lsrs	r3, r3, #3
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	ebad 0d03 	sub.w	sp, sp, r3
 800257e:	46eb      	mov	fp, sp
	float32_t m40[frameSize]; // in^4
 8002580:	ebad 0d03 	sub.w	sp, sp, r3
 8002584:	466c      	mov	r4, sp
	float32_t m40_real = 0.0f, m40_imag = 0.0f;
	float32_t m40_real_mean = 0.0f, m40_imag_mean = 0.0f;
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8002586:	4632      	mov	r2, r6
 8002588:	4641      	mov	r1, r8
 800258a:	f7fe fc03 	bl	8000d94 <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 800258e:	462b      	mov	r3, r5
 8002590:	464a      	mov	r2, r9
 8002592:	4641      	mov	r1, r8
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7fe fa87 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 800259a:	462b      	mov	r3, r5
 800259c:	465a      	mov	r2, fp
 800259e:	4641      	mov	r1, r8
 80025a0:	4648      	mov	r0, r9
 80025a2:	f7fe fa81 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 80025a6:	462b      	mov	r3, r5
 80025a8:	4622      	mov	r2, r4
 80025aa:	4641      	mov	r1, r8
 80025ac:	4658      	mov	r0, fp
 80025ae:	f7fe fa7b 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 80025b2:	2300      	movs	r3, #0
	float32_t m40_real = 0.0f, m40_imag = 0.0f;
 80025b4:	eddf 7a16 	vldr	s15, [pc, #88]	; 8002610 <moment40+0xc4>
 80025b8:	eeb0 7a67 	vmov.f32	s14, s15
	for(int i = 0; i < frameSize*2; i+=2){
 80025bc:	e00d      	b.n	80025da <moment40+0x8e>
		m40_real += m40[i];
 80025be:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80025c2:	edd2 6a00 	vldr	s13, [r2]
 80025c6:	ee37 7a26 	vadd.f32	s14, s14, s13
		m40_imag += m40[i+1];
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80025d0:	edd2 6a00 	vldr	s13, [r2]
 80025d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
	for(int i = 0; i < frameSize*2; i+=2){
 80025d8:	3302      	adds	r3, #2
 80025da:	429e      	cmp	r6, r3
 80025dc:	dcef      	bgt.n	80025be <moment40+0x72>
	}
	m40_real_mean = m40_real / frameSize;
 80025de:	ee06 5a90 	vmov	s13, r5
 80025e2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80025e6:	ee87 0a26 	vdiv.f32	s0, s14, s13
	m40_imag_mean = m40_imag / frameSize;
 80025ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	*out = sqrtf(m40_real_mean*m40_real_mean + m40_imag_mean*m40_imag_mean);
 80025ee:	ee20 0a00 	vmul.f32	s0, s0, s0
 80025f2:	ee27 7a07 	vmul.f32	s14, s14, s14
 80025f6:	ee30 0a07 	vadd.f32	s0, s0, s14
 80025fa:	f005 fb0d 	bl	8007c18 <sqrtf>
 80025fe:	ed8a 0a00 	vstr	s0, [sl]
}
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800260a:	bf00      	nop
 800260c:	0800e1d4 	.word	0x0800e1d4
 8002610:	00000000 	.word	0x00000000

08002614 <moment41>:

void moment41(float32_t in[], float32_t *out){
 8002614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	4682      	mov	sl, r0
 800261e:	468b      	mov	fp, r1
	float32_t in_cp[frameSize*2];
 8002620:	4b32      	ldr	r3, [pc, #200]	; (80026ec <moment41+0xd8>)
 8002622:	881d      	ldrh	r5, [r3, #0]
 8002624:	006e      	lsls	r6, r5, #1
 8002626:	00eb      	lsls	r3, r5, #3
 8002628:	330a      	adds	r3, #10
 800262a:	08db      	lsrs	r3, r3, #3
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	ebad 0d03 	sub.w	sp, sp, r3
 8002632:	46e8      	mov	r8, sp
	float32_t in_conj[frameSize*2];
 8002634:	ebad 0d03 	sub.w	sp, sp, r3
 8002638:	46e9      	mov	r9, sp
	float32_t m20[frameSize*2]; // in^2
 800263a:	ebad 0d03 	sub.w	sp, sp, r3
 800263e:	f8c7 d004 	str.w	sp, [r7, #4]
	float32_t m30[frameSize]; // in^3
 8002642:	00ab      	lsls	r3, r5, #2
 8002644:	330a      	adds	r3, #10
 8002646:	08db      	lsrs	r3, r3, #3
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	ebad 0d03 	sub.w	sp, sp, r3
 800264e:	f8c7 d000 	str.w	sp, [r7]
	float32_t m41[frameSize]; // in^4
 8002652:	ebad 0d03 	sub.w	sp, sp, r3
 8002656:	466c      	mov	r4, sp
	float32_t m41_real = 0.0f, m41_imag = 0.0f;
	float32_t m41_real_mean = 0.0f, m41_imag_mean = 0.0f;
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8002658:	4632      	mov	r2, r6
 800265a:	4641      	mov	r1, r8
 800265c:	f7fe fb9a 	bl	8000d94 <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8002660:	462a      	mov	r2, r5
 8002662:	4649      	mov	r1, r9
 8002664:	4650      	mov	r0, sl
 8002666:	f7fe f957 	bl	8000918 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 800266a:	462b      	mov	r3, r5
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	4641      	mov	r1, r8
 8002670:	4650      	mov	r0, sl
 8002672:	f7fe fa19 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8002676:	462b      	mov	r3, r5
 8002678:	f8d7 a000 	ldr.w	sl, [r7]
 800267c:	4652      	mov	r2, sl
 800267e:	4641      	mov	r1, r8
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7fe fa11 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_conj[0], &m41[0], frameSize);
 8002686:	462b      	mov	r3, r5
 8002688:	4622      	mov	r2, r4
 800268a:	4649      	mov	r1, r9
 800268c:	4650      	mov	r0, sl
 800268e:	f7fe fa0b 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8002692:	2300      	movs	r3, #0
	float32_t m41_real = 0.0f, m41_imag = 0.0f;
 8002694:	eddf 7a16 	vldr	s15, [pc, #88]	; 80026f0 <moment41+0xdc>
 8002698:	eeb0 7a67 	vmov.f32	s14, s15
	for(int i = 0; i < frameSize*2; i+=2){
 800269c:	e00d      	b.n	80026ba <moment41+0xa6>
		m41_real += m41[i];
 800269e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80026a2:	edd2 6a00 	vldr	s13, [r2]
 80026a6:	ee37 7a26 	vadd.f32	s14, s14, s13
		m41_imag += m41[i+1];
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80026b0:	edd2 6a00 	vldr	s13, [r2]
 80026b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
	for(int i = 0; i < frameSize*2; i+=2){
 80026b8:	3302      	adds	r3, #2
 80026ba:	429e      	cmp	r6, r3
 80026bc:	dcef      	bgt.n	800269e <moment41+0x8a>
	}
	m41_real_mean = m41_real / frameSize;
 80026be:	ee06 5a90 	vmov	s13, r5
 80026c2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80026c6:	ee87 0a26 	vdiv.f32	s0, s14, s13
	m41_imag_mean = m41_imag / frameSize;
 80026ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	*out = sqrtf(m41_real_mean*m41_real_mean + m41_imag_mean*m41_imag_mean);
 80026ce:	ee20 0a00 	vmul.f32	s0, s0, s0
 80026d2:	ee27 7a07 	vmul.f32	s14, s14, s14
 80026d6:	ee30 0a07 	vadd.f32	s0, s0, s14
 80026da:	f005 fa9d 	bl	8007c18 <sqrtf>
 80026de:	ed8b 0a00 	vstr	s0, [fp]
}
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ea:	bf00      	nop
 80026ec:	0800e1d4 	.word	0x0800e1d4
 80026f0:	00000000 	.word	0x00000000

080026f4 <moment42>:

void moment42(float32_t in[], float32_t *out){
 80026f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4681      	mov	r9, r0
 80026fe:	468b      	mov	fp, r1
	float32_t in_cp[frameSize*2];
 8002700:	4b32      	ldr	r3, [pc, #200]	; (80027cc <moment42+0xd8>)
 8002702:	881d      	ldrh	r5, [r3, #0]
 8002704:	006e      	lsls	r6, r5, #1
 8002706:	00eb      	lsls	r3, r5, #3
 8002708:	330a      	adds	r3, #10
 800270a:	08db      	lsrs	r3, r3, #3
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	ebad 0d03 	sub.w	sp, sp, r3
 8002712:	46ea      	mov	sl, sp
	float32_t in_conj[frameSize*2];
 8002714:	ebad 0d03 	sub.w	sp, sp, r3
 8002718:	46e8      	mov	r8, sp
	float32_t m20[frameSize*2]; // in^2
 800271a:	ebad 0d03 	sub.w	sp, sp, r3
 800271e:	f8c7 d004 	str.w	sp, [r7, #4]
	float32_t m31[frameSize]; // in^3
 8002722:	00ab      	lsls	r3, r5, #2
 8002724:	330a      	adds	r3, #10
 8002726:	08db      	lsrs	r3, r3, #3
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	ebad 0d03 	sub.w	sp, sp, r3
 800272e:	f8c7 d000 	str.w	sp, [r7]
	float32_t m42[frameSize]; // in^4
 8002732:	ebad 0d03 	sub.w	sp, sp, r3
 8002736:	466c      	mov	r4, sp
	float32_t m42_real = 0.0f, m42_imag = 0.0f;
	float32_t m42_real_mean = 0.0f, m42_imag_mean = 0.0f;
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8002738:	4632      	mov	r2, r6
 800273a:	4651      	mov	r1, sl
 800273c:	f7fe fb2a 	bl	8000d94 <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8002740:	462a      	mov	r2, r5
 8002742:	4641      	mov	r1, r8
 8002744:	4648      	mov	r0, r9
 8002746:	f7fe f8e7 	bl	8000918 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 800274a:	462b      	mov	r3, r5
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	4651      	mov	r1, sl
 8002750:	4648      	mov	r0, r9
 8002752:	f7fe f9a9 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_conj[0], &m31[0], frameSize);
 8002756:	462b      	mov	r3, r5
 8002758:	f8d7 9000 	ldr.w	r9, [r7]
 800275c:	464a      	mov	r2, r9
 800275e:	4641      	mov	r1, r8
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7fe f9a1 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m31[0], &in_conj[0], &m42[0], frameSize);
 8002766:	462b      	mov	r3, r5
 8002768:	4622      	mov	r2, r4
 800276a:	4641      	mov	r1, r8
 800276c:	4648      	mov	r0, r9
 800276e:	f7fe f99b 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8002772:	2300      	movs	r3, #0
	float32_t m42_real = 0.0f, m42_imag = 0.0f;
 8002774:	eddf 7a16 	vldr	s15, [pc, #88]	; 80027d0 <moment42+0xdc>
 8002778:	eeb0 7a67 	vmov.f32	s14, s15
	for(int i = 0; i < frameSize*2; i+=2){
 800277c:	e00d      	b.n	800279a <moment42+0xa6>
		m42_real += m42[i];
 800277e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8002782:	edd2 6a00 	vldr	s13, [r2]
 8002786:	ee37 7a26 	vadd.f32	s14, s14, s13
		m42_imag += m42[i+1];
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002790:	edd2 6a00 	vldr	s13, [r2]
 8002794:	ee77 7aa6 	vadd.f32	s15, s15, s13
	for(int i = 0; i < frameSize*2; i+=2){
 8002798:	3302      	adds	r3, #2
 800279a:	429e      	cmp	r6, r3
 800279c:	dcef      	bgt.n	800277e <moment42+0x8a>
	}
	m42_real_mean = m42_real / frameSize;
 800279e:	ee06 5a90 	vmov	s13, r5
 80027a2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80027a6:	ee87 0a26 	vdiv.f32	s0, s14, s13
	m42_imag_mean = m42_imag / frameSize;
 80027aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	*out = sqrtf(m42_real_mean*m42_real_mean + m42_imag_mean*m42_imag_mean);
 80027ae:	ee20 0a00 	vmul.f32	s0, s0, s0
 80027b2:	ee27 7a07 	vmul.f32	s14, s14, s14
 80027b6:	ee30 0a07 	vadd.f32	s0, s0, s14
 80027ba:	f005 fa2d 	bl	8007c18 <sqrtf>
 80027be:	ed8b 0a00 	vstr	s0, [fp]
}
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027ca:	bf00      	nop
 80027cc:	0800e1d4 	.word	0x0800e1d4
 80027d0:	00000000 	.word	0x00000000

080027d4 <moment43>:

void moment43(float32_t in[], float32_t *out){
 80027d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4682      	mov	sl, r0
 80027de:	468b      	mov	fp, r1
	float32_t in_cp[frameSize*2];
 80027e0:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <moment43+0xd4>)
 80027e2:	881d      	ldrh	r5, [r3, #0]
 80027e4:	006e      	lsls	r6, r5, #1
 80027e6:	00eb      	lsls	r3, r5, #3
 80027e8:	330a      	adds	r3, #10
 80027ea:	08db      	lsrs	r3, r3, #3
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	ebad 0d03 	sub.w	sp, sp, r3
 80027f2:	4669      	mov	r1, sp
	float32_t in_conj[frameSize*2];
 80027f4:	ebad 0d03 	sub.w	sp, sp, r3
 80027f8:	46e8      	mov	r8, sp
	float32_t m21[frameSize*2]; // in^2
 80027fa:	ebad 0d03 	sub.w	sp, sp, r3
 80027fe:	46e9      	mov	r9, sp
	float32_t m32[frameSize]; // in^3
 8002800:	00ab      	lsls	r3, r5, #2
 8002802:	330a      	adds	r3, #10
 8002804:	08db      	lsrs	r3, r3, #3
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	ebad 0d03 	sub.w	sp, sp, r3
 800280c:	f8c7 d004 	str.w	sp, [r7, #4]
	float32_t m43[frameSize]; // in^4
 8002810:	ebad 0d03 	sub.w	sp, sp, r3
 8002814:	466c      	mov	r4, sp
	float32_t m43_real = 0.0f, m43_imag = 0.0f;
	float32_t m43_real_mean = 0.0f, m43_imag_mean = 0.0f;
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8002816:	4632      	mov	r2, r6
 8002818:	f7fe fabc 	bl	8000d94 <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 800281c:	462a      	mov	r2, r5
 800281e:	4641      	mov	r1, r8
 8002820:	4650      	mov	r0, sl
 8002822:	f7fe f879 	bl	8000918 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_conj[0], &m21[0], frameSize);
 8002826:	462b      	mov	r3, r5
 8002828:	464a      	mov	r2, r9
 800282a:	4641      	mov	r1, r8
 800282c:	4650      	mov	r0, sl
 800282e:	f7fe f93b 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m21[0], &in_conj[0], &m32[0], frameSize);
 8002832:	462b      	mov	r3, r5
 8002834:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8002838:	4652      	mov	r2, sl
 800283a:	4641      	mov	r1, r8
 800283c:	4648      	mov	r0, r9
 800283e:	f7fe f933 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m32[0], &in_conj[0], &m43[0], frameSize);
 8002842:	462b      	mov	r3, r5
 8002844:	4622      	mov	r2, r4
 8002846:	4641      	mov	r1, r8
 8002848:	4650      	mov	r0, sl
 800284a:	f7fe f92d 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 800284e:	2300      	movs	r3, #0
	float32_t m43_real = 0.0f, m43_imag = 0.0f;
 8002850:	eddf 7a16 	vldr	s15, [pc, #88]	; 80028ac <moment43+0xd8>
 8002854:	eeb0 7a67 	vmov.f32	s14, s15
	for(int i = 0; i < frameSize*2; i+=2){
 8002858:	e00d      	b.n	8002876 <moment43+0xa2>
		m43_real += m43[i];
 800285a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800285e:	edd2 6a00 	vldr	s13, [r2]
 8002862:	ee37 7a26 	vadd.f32	s14, s14, s13
		m43_imag += m43[i+1];
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800286c:	edd2 6a00 	vldr	s13, [r2]
 8002870:	ee77 7aa6 	vadd.f32	s15, s15, s13
	for(int i = 0; i < frameSize*2; i+=2){
 8002874:	3302      	adds	r3, #2
 8002876:	429e      	cmp	r6, r3
 8002878:	dcef      	bgt.n	800285a <moment43+0x86>
	}
	m43_real_mean = m43_real / frameSize;
 800287a:	ee06 5a90 	vmov	s13, r5
 800287e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002882:	ee87 0a26 	vdiv.f32	s0, s14, s13
	m43_imag_mean = m43_imag / frameSize;
 8002886:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	*out = sqrtf(m43_real_mean*m43_real_mean + m43_imag_mean*m43_imag_mean);
 800288a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800288e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8002892:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002896:	f005 f9bf 	bl	8007c18 <sqrtf>
 800289a:	ed8b 0a00 	vstr	s0, [fp]
}
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028a6:	bf00      	nop
 80028a8:	0800e1d4 	.word	0x0800e1d4
 80028ac:	00000000 	.word	0x00000000

080028b0 <moment60>:

void moment60(float32_t in[], float32_t *out){
 80028b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028b4:	b085      	sub	sp, #20
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60b8      	str	r0, [r7, #8]
 80028ba:	468a      	mov	sl, r1
	float32_t in_cp[frameSize*2];
 80028bc:	4b37      	ldr	r3, [pc, #220]	; (800299c <moment60+0xec>)
 80028be:	881d      	ldrh	r5, [r3, #0]
 80028c0:	006e      	lsls	r6, r5, #1
 80028c2:	00eb      	lsls	r3, r5, #3
 80028c4:	330a      	adds	r3, #10
 80028c6:	08db      	lsrs	r3, r3, #3
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	ebad 0d03 	sub.w	sp, sp, r3
 80028ce:	46e8      	mov	r8, sp
	float32_t m20[frameSize*2]; // in^2
 80028d0:	ebad 0d03 	sub.w	sp, sp, r3
 80028d4:	46e9      	mov	r9, sp
	float32_t m30[frameSize]; // in^3
 80028d6:	00ab      	lsls	r3, r5, #2
 80028d8:	330a      	adds	r3, #10
 80028da:	08db      	lsrs	r3, r3, #3
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	ebad 0d03 	sub.w	sp, sp, r3
 80028e2:	f8c7 d00c 	str.w	sp, [r7, #12]
	float32_t m40[frameSize]; // in^4
 80028e6:	ebad 0d03 	sub.w	sp, sp, r3
 80028ea:	f8c7 d004 	str.w	sp, [r7, #4]
	float32_t m50[frameSize]; // in^5
 80028ee:	ebad 0d03 	sub.w	sp, sp, r3
 80028f2:	46eb      	mov	fp, sp
	float32_t m60[frameSize]; // in^6
 80028f4:	ebad 0d03 	sub.w	sp, sp, r3
 80028f8:	466c      	mov	r4, sp
	float32_t m60_real = 0.0f, m60_imag = 0.0f;
	float32_t m60_real_mean = 0.0f, m60_imag_mean = 0.0f;
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 80028fa:	4632      	mov	r2, r6
 80028fc:	4641      	mov	r1, r8
 80028fe:	f7fe fa49 	bl	8000d94 <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8002902:	462b      	mov	r3, r5
 8002904:	464a      	mov	r2, r9
 8002906:	4641      	mov	r1, r8
 8002908:	68b8      	ldr	r0, [r7, #8]
 800290a:	f7fe f8cd 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 800290e:	462b      	mov	r3, r5
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4641      	mov	r1, r8
 8002914:	4648      	mov	r0, r9
 8002916:	f7fe f8c7 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 800291a:	462b      	mov	r3, r5
 800291c:	f8d7 9004 	ldr.w	r9, [r7, #4]
 8002920:	464a      	mov	r2, r9
 8002922:	4641      	mov	r1, r8
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f7fe f8bf 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m40[0], &in_cp[0], &m50[0], frameSize);
 800292a:	462b      	mov	r3, r5
 800292c:	465a      	mov	r2, fp
 800292e:	4641      	mov	r1, r8
 8002930:	4648      	mov	r0, r9
 8002932:	f7fe f8b9 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m50[0], &in_cp[0], &m60[0], frameSize);
 8002936:	462b      	mov	r3, r5
 8002938:	4622      	mov	r2, r4
 800293a:	4641      	mov	r1, r8
 800293c:	4658      	mov	r0, fp
 800293e:	f7fe f8b3 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8002942:	2300      	movs	r3, #0
	float32_t m60_real = 0.0f, m60_imag = 0.0f;
 8002944:	eddf 7a16 	vldr	s15, [pc, #88]	; 80029a0 <moment60+0xf0>
 8002948:	eeb0 7a67 	vmov.f32	s14, s15
	for(int i = 0; i < frameSize*2; i+=2){
 800294c:	e00d      	b.n	800296a <moment60+0xba>
		m60_real += m60[i];
 800294e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8002952:	edd2 6a00 	vldr	s13, [r2]
 8002956:	ee37 7a26 	vadd.f32	s14, s14, s13
		m60_imag += m60[i+1];
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002960:	edd2 6a00 	vldr	s13, [r2]
 8002964:	ee77 7aa6 	vadd.f32	s15, s15, s13
	for(int i = 0; i < frameSize*2; i+=2){
 8002968:	3302      	adds	r3, #2
 800296a:	429e      	cmp	r6, r3
 800296c:	dcef      	bgt.n	800294e <moment60+0x9e>
	}
	m60_real_mean = m60_real / frameSize;
 800296e:	ee06 5a90 	vmov	s13, r5
 8002972:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002976:	ee87 0a26 	vdiv.f32	s0, s14, s13
	m60_imag_mean = m60_imag / frameSize;
 800297a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	*out = sqrtf(m60_real_mean*m60_real_mean + m60_imag_mean*m60_imag_mean);
 800297e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002982:	ee27 7a07 	vmul.f32	s14, s14, s14
 8002986:	ee30 0a07 	vadd.f32	s0, s0, s14
 800298a:	f005 f945 	bl	8007c18 <sqrtf>
 800298e:	ed8a 0a00 	vstr	s0, [sl]
}
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800299a:	bf00      	nop
 800299c:	0800e1d4 	.word	0x0800e1d4
 80029a0:	00000000 	.word	0x00000000

080029a4 <moment61>:

void moment61(float32_t in[], float32_t *out){
 80029a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029a8:	b085      	sub	sp, #20
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	4682      	mov	sl, r0
 80029ae:	468b      	mov	fp, r1
	float32_t in_cp[frameSize*2];
 80029b0:	4b3d      	ldr	r3, [pc, #244]	; (8002aa8 <moment61+0x104>)
 80029b2:	881c      	ldrh	r4, [r3, #0]
 80029b4:	0066      	lsls	r6, r4, #1
 80029b6:	00e3      	lsls	r3, r4, #3
 80029b8:	330a      	adds	r3, #10
 80029ba:	08db      	lsrs	r3, r3, #3
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	ebad 0d03 	sub.w	sp, sp, r3
 80029c2:	46e8      	mov	r8, sp
	float32_t in_conj[frameSize*2];
 80029c4:	ebad 0d03 	sub.w	sp, sp, r3
 80029c8:	46e9      	mov	r9, sp
	float32_t m20[frameSize*2]; // in^2
 80029ca:	ebad 0d03 	sub.w	sp, sp, r3
 80029ce:	f8c7 d00c 	str.w	sp, [r7, #12]
	float32_t m30[frameSize]; // in^3
 80029d2:	00a3      	lsls	r3, r4, #2
 80029d4:	330a      	adds	r3, #10
 80029d6:	08db      	lsrs	r3, r3, #3
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	ebad 0d03 	sub.w	sp, sp, r3
 80029de:	f8c7 d004 	str.w	sp, [r7, #4]
	float32_t m40[frameSize]; // in^4
 80029e2:	ebad 0d03 	sub.w	sp, sp, r3
 80029e6:	f8c7 d008 	str.w	sp, [r7, #8]
	float32_t m50[frameSize]; // in^5
 80029ea:	ebad 0d03 	sub.w	sp, sp, r3
 80029ee:	f8c7 d000 	str.w	sp, [r7]
	float32_t m61[frameSize]; // in^6
 80029f2:	ebad 0d03 	sub.w	sp, sp, r3
 80029f6:	466d      	mov	r5, sp
	float32_t m61_real = 0.0f, m61_imag = 0.0f;
	float32_t m61_real_mean = 0.0f, m61_imag_mean = 0.0f;
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 80029f8:	4632      	mov	r2, r6
 80029fa:	4641      	mov	r1, r8
 80029fc:	f7fe f9ca 	bl	8000d94 <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8002a00:	4622      	mov	r2, r4
 8002a02:	4649      	mov	r1, r9
 8002a04:	4650      	mov	r0, sl
 8002a06:	f7fd ff87 	bl	8000918 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8002a0a:	4623      	mov	r3, r4
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4641      	mov	r1, r8
 8002a10:	4650      	mov	r0, sl
 8002a12:	f7fe f849 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8002a16:	4623      	mov	r3, r4
 8002a18:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8002a1c:	4652      	mov	r2, sl
 8002a1e:	4641      	mov	r1, r8
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f7fe f841 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 8002a26:	4623      	mov	r3, r4
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	4641      	mov	r1, r8
 8002a2c:	4650      	mov	r0, sl
 8002a2e:	f7fe f83b 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m40[0], &in_cp[0], &m50[0], frameSize);
 8002a32:	4623      	mov	r3, r4
 8002a34:	f8d7 a000 	ldr.w	sl, [r7]
 8002a38:	4652      	mov	r2, sl
 8002a3a:	4641      	mov	r1, r8
 8002a3c:	68b8      	ldr	r0, [r7, #8]
 8002a3e:	f7fe f833 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m50[0], &in_conj[0], &m61[0], frameSize);
 8002a42:	4623      	mov	r3, r4
 8002a44:	462a      	mov	r2, r5
 8002a46:	4649      	mov	r1, r9
 8002a48:	4650      	mov	r0, sl
 8002a4a:	f7fe f82d 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8002a4e:	2300      	movs	r3, #0
	float32_t m61_real = 0.0f, m61_imag = 0.0f;
 8002a50:	eddf 7a16 	vldr	s15, [pc, #88]	; 8002aac <moment61+0x108>
 8002a54:	eef0 6a67 	vmov.f32	s13, s15
	for(int i = 0; i < frameSize*2; i+=2){
 8002a58:	e00d      	b.n	8002a76 <moment61+0xd2>
		m61_real += m61[i];
 8002a5a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8002a5e:	ed92 7a00 	vldr	s14, [r2]
 8002a62:	ee76 6a87 	vadd.f32	s13, s13, s14
		m61_imag += m61[i+1];
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8002a6c:	ed92 7a00 	vldr	s14, [r2]
 8002a70:	ee77 7a87 	vadd.f32	s15, s15, s14
	for(int i = 0; i < frameSize*2; i+=2){
 8002a74:	3302      	adds	r3, #2
 8002a76:	429e      	cmp	r6, r3
 8002a78:	dcef      	bgt.n	8002a5a <moment61+0xb6>
	}
	m61_real_mean = m61_real / frameSize;
 8002a7a:	ee07 4a10 	vmov	s14, r4
 8002a7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002a82:	ee86 0a87 	vdiv.f32	s0, s13, s14
	m61_imag_mean = m61_imag / frameSize;
 8002a86:	eec7 6a87 	vdiv.f32	s13, s15, s14
	*out = sqrtf(m61_real_mean*m61_real_mean + m61_imag_mean*m61_imag_mean);
 8002a8a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002a8e:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8002a92:	ee30 0a26 	vadd.f32	s0, s0, s13
 8002a96:	f005 f8bf 	bl	8007c18 <sqrtf>
 8002a9a:	ed8b 0a00 	vstr	s0, [fp]
}
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aa6:	bf00      	nop
 8002aa8:	0800e1d4 	.word	0x0800e1d4
 8002aac:	00000000 	.word	0x00000000

08002ab0 <moment62>:

void moment62(float32_t in[], float32_t *out){
 8002ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ab4:	b085      	sub	sp, #20
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	4682      	mov	sl, r0
 8002aba:	468b      	mov	fp, r1
	float32_t in_cp[frameSize*2];
 8002abc:	4b3d      	ldr	r3, [pc, #244]	; (8002bb4 <moment62+0x104>)
 8002abe:	881c      	ldrh	r4, [r3, #0]
 8002ac0:	0066      	lsls	r6, r4, #1
 8002ac2:	00e3      	lsls	r3, r4, #3
 8002ac4:	330a      	adds	r3, #10
 8002ac6:	08db      	lsrs	r3, r3, #3
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	ebad 0d03 	sub.w	sp, sp, r3
 8002ace:	46e8      	mov	r8, sp
	float32_t in_conj[frameSize*2];
 8002ad0:	ebad 0d03 	sub.w	sp, sp, r3
 8002ad4:	46e9      	mov	r9, sp
	float32_t m20[frameSize*2]; // in^2
 8002ad6:	ebad 0d03 	sub.w	sp, sp, r3
 8002ada:	f8c7 d00c 	str.w	sp, [r7, #12]
	float32_t m30[frameSize]; // in^3
 8002ade:	00a3      	lsls	r3, r4, #2
 8002ae0:	330a      	adds	r3, #10
 8002ae2:	08db      	lsrs	r3, r3, #3
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	ebad 0d03 	sub.w	sp, sp, r3
 8002aea:	f8c7 d008 	str.w	sp, [r7, #8]
	float32_t m40[frameSize]; // in^4
 8002aee:	ebad 0d03 	sub.w	sp, sp, r3
 8002af2:	f8c7 d004 	str.w	sp, [r7, #4]
	float32_t m51[frameSize]; // in^5
 8002af6:	ebad 0d03 	sub.w	sp, sp, r3
 8002afa:	f8c7 d000 	str.w	sp, [r7]
	float32_t m62[frameSize]; // in^6
 8002afe:	ebad 0d03 	sub.w	sp, sp, r3
 8002b02:	466d      	mov	r5, sp
	float32_t m62_real = 0.0f, m62_imag = 0.0f;
	float32_t m62_real_mean = 0.0f, m62_imag_mean = 0.0f;
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8002b04:	4632      	mov	r2, r6
 8002b06:	4641      	mov	r1, r8
 8002b08:	f7fe f944 	bl	8000d94 <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8002b0c:	4622      	mov	r2, r4
 8002b0e:	4649      	mov	r1, r9
 8002b10:	4650      	mov	r0, sl
 8002b12:	f7fd ff01 	bl	8000918 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8002b16:	4623      	mov	r3, r4
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4641      	mov	r1, r8
 8002b1c:	4650      	mov	r0, sl
 8002b1e:	f7fd ffc3 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8002b22:	4623      	mov	r3, r4
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	4641      	mov	r1, r8
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f7fd ffbd 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 8002b2e:	4623      	mov	r3, r4
 8002b30:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8002b34:	4652      	mov	r2, sl
 8002b36:	4641      	mov	r1, r8
 8002b38:	68b8      	ldr	r0, [r7, #8]
 8002b3a:	f7fd ffb5 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m40[0], &in_conj[0], &m51[0], frameSize);
 8002b3e:	4623      	mov	r3, r4
 8002b40:	f8d7 8000 	ldr.w	r8, [r7]
 8002b44:	4642      	mov	r2, r8
 8002b46:	4649      	mov	r1, r9
 8002b48:	4650      	mov	r0, sl
 8002b4a:	f7fd ffad 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m51[0], &in_conj[0], &m62[0], frameSize);
 8002b4e:	4623      	mov	r3, r4
 8002b50:	462a      	mov	r2, r5
 8002b52:	4649      	mov	r1, r9
 8002b54:	4640      	mov	r0, r8
 8002b56:	f7fd ffa7 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8002b5a:	2300      	movs	r3, #0
	float32_t m62_real = 0.0f, m62_imag = 0.0f;
 8002b5c:	eddf 7a16 	vldr	s15, [pc, #88]	; 8002bb8 <moment62+0x108>
 8002b60:	eef0 6a67 	vmov.f32	s13, s15
	for(int i = 0; i < frameSize*2; i+=2){
 8002b64:	e00d      	b.n	8002b82 <moment62+0xd2>
		m62_real += m62[i];
 8002b66:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8002b6a:	ed92 7a00 	vldr	s14, [r2]
 8002b6e:	ee76 6a87 	vadd.f32	s13, s13, s14
		m62_imag += m62[i+1];
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8002b78:	ed92 7a00 	vldr	s14, [r2]
 8002b7c:	ee77 7a87 	vadd.f32	s15, s15, s14
	for(int i = 0; i < frameSize*2; i+=2){
 8002b80:	3302      	adds	r3, #2
 8002b82:	429e      	cmp	r6, r3
 8002b84:	dcef      	bgt.n	8002b66 <moment62+0xb6>
	}
	m62_real_mean = m62_real / frameSize;
 8002b86:	ee07 4a10 	vmov	s14, r4
 8002b8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002b8e:	ee86 0a87 	vdiv.f32	s0, s13, s14
	m62_imag_mean = m62_imag / frameSize;
 8002b92:	eec7 6a87 	vdiv.f32	s13, s15, s14
	*out = sqrtf(m62_real_mean*m62_real_mean + m62_imag_mean*m62_imag_mean);
 8002b96:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002b9a:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8002b9e:	ee30 0a26 	vadd.f32	s0, s0, s13
 8002ba2:	f005 f839 	bl	8007c18 <sqrtf>
 8002ba6:	ed8b 0a00 	vstr	s0, [fp]
}
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bb2:	bf00      	nop
 8002bb4:	0800e1d4 	.word	0x0800e1d4
 8002bb8:	00000000 	.word	0x00000000

08002bbc <moment63>:

void moment63(float32_t in[], float32_t *out){
 8002bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bc0:	b085      	sub	sp, #20
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	4682      	mov	sl, r0
 8002bc6:	468b      	mov	fp, r1
	float32_t in_cp[frameSize*2];
 8002bc8:	4b3d      	ldr	r3, [pc, #244]	; (8002cc0 <moment63+0x104>)
 8002bca:	881c      	ldrh	r4, [r3, #0]
 8002bcc:	0066      	lsls	r6, r4, #1
 8002bce:	00e3      	lsls	r3, r4, #3
 8002bd0:	330a      	adds	r3, #10
 8002bd2:	08db      	lsrs	r3, r3, #3
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	ebad 0d03 	sub.w	sp, sp, r3
 8002bda:	46e9      	mov	r9, sp
	float32_t in_conj[frameSize*2];
 8002bdc:	ebad 0d03 	sub.w	sp, sp, r3
 8002be0:	46e8      	mov	r8, sp
	float32_t m20[frameSize*2]; // in^2
 8002be2:	ebad 0d03 	sub.w	sp, sp, r3
 8002be6:	f8c7 d00c 	str.w	sp, [r7, #12]
	float32_t m30[frameSize]; // in^3
 8002bea:	00a3      	lsls	r3, r4, #2
 8002bec:	330a      	adds	r3, #10
 8002bee:	08db      	lsrs	r3, r3, #3
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	ebad 0d03 	sub.w	sp, sp, r3
 8002bf6:	f8c7 d008 	str.w	sp, [r7, #8]
	float32_t m41[frameSize]; // in^4
 8002bfa:	ebad 0d03 	sub.w	sp, sp, r3
 8002bfe:	f8c7 d004 	str.w	sp, [r7, #4]
	float32_t m52[frameSize]; // in^5
 8002c02:	ebad 0d03 	sub.w	sp, sp, r3
 8002c06:	f8c7 d000 	str.w	sp, [r7]
	float32_t m63[frameSize]; // in^6
 8002c0a:	ebad 0d03 	sub.w	sp, sp, r3
 8002c0e:	466d      	mov	r5, sp
	float32_t m63_real = 0.0f, m63_imag = 0.0f;
	float32_t m63_real_mean = 0.0f, m63_imag_mean = 0.0f;
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8002c10:	4632      	mov	r2, r6
 8002c12:	4649      	mov	r1, r9
 8002c14:	f7fe f8be 	bl	8000d94 <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8002c18:	4622      	mov	r2, r4
 8002c1a:	4641      	mov	r1, r8
 8002c1c:	4650      	mov	r0, sl
 8002c1e:	f7fd fe7b 	bl	8000918 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8002c22:	4623      	mov	r3, r4
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4649      	mov	r1, r9
 8002c28:	4650      	mov	r0, sl
 8002c2a:	f7fd ff3d 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8002c2e:	4623      	mov	r3, r4
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	4649      	mov	r1, r9
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f7fd ff37 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_conj[0], &m41[0], frameSize);
 8002c3a:	4623      	mov	r3, r4
 8002c3c:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8002c40:	4652      	mov	r2, sl
 8002c42:	4641      	mov	r1, r8
 8002c44:	68b8      	ldr	r0, [r7, #8]
 8002c46:	f7fd ff2f 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m41[0], &in_conj[0], &m52[0], frameSize);
 8002c4a:	4623      	mov	r3, r4
 8002c4c:	f8d7 9000 	ldr.w	r9, [r7]
 8002c50:	464a      	mov	r2, r9
 8002c52:	4641      	mov	r1, r8
 8002c54:	4650      	mov	r0, sl
 8002c56:	f7fd ff27 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m52[0], &in_conj[0], &m63[0], frameSize);
 8002c5a:	4623      	mov	r3, r4
 8002c5c:	462a      	mov	r2, r5
 8002c5e:	4641      	mov	r1, r8
 8002c60:	4648      	mov	r0, r9
 8002c62:	f7fd ff21 	bl	8000aa8 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8002c66:	2300      	movs	r3, #0
	float32_t m63_real = 0.0f, m63_imag = 0.0f;
 8002c68:	eddf 7a16 	vldr	s15, [pc, #88]	; 8002cc4 <moment63+0x108>
 8002c6c:	eef0 6a67 	vmov.f32	s13, s15
	for(int i = 0; i < frameSize*2; i+=2){
 8002c70:	e00d      	b.n	8002c8e <moment63+0xd2>
		m63_real += m63[i];
 8002c72:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8002c76:	ed92 7a00 	vldr	s14, [r2]
 8002c7a:	ee76 6a87 	vadd.f32	s13, s13, s14
		m63_imag += m63[i+1];
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8002c84:	ed92 7a00 	vldr	s14, [r2]
 8002c88:	ee77 7a87 	vadd.f32	s15, s15, s14
	for(int i = 0; i < frameSize*2; i+=2){
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	429e      	cmp	r6, r3
 8002c90:	dcef      	bgt.n	8002c72 <moment63+0xb6>
	}
	m63_real_mean = m63_real / frameSize;
 8002c92:	ee07 4a10 	vmov	s14, r4
 8002c96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002c9a:	ee86 0a87 	vdiv.f32	s0, s13, s14
	m63_imag_mean = m63_imag / frameSize;
 8002c9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
	*out = sqrtf(m63_real_mean*m63_real_mean + m63_imag_mean*m63_imag_mean);
 8002ca2:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002ca6:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8002caa:	ee30 0a26 	vadd.f32	s0, s0, s13
 8002cae:	f004 ffb3 	bl	8007c18 <sqrtf>
 8002cb2:	ed8b 0a00 	vstr	s0, [fp]
}
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cbe:	bf00      	nop
 8002cc0:	0800e1d4 	.word	0x0800e1d4
 8002cc4:	00000000 	.word	0x00000000

08002cc8 <cumulant_20>:

// Features no 13, 14, 15, 16, 17, 18, 19, 20 and 21
void cumulant_20(float32_t in[], float32_t *out){
 8002cc8:	b508      	push	{r3, lr}
	moment20(&in[0], out);
 8002cca:	f7ff fb6f 	bl	80023ac <moment20>
};
 8002cce:	bd08      	pop	{r3, pc}

08002cd0 <cumulant_21>:
void cumulant_21(float32_t in[], float32_t *out){
 8002cd0:	b508      	push	{r3, lr}
	moment21(&in[0], out);
 8002cd2:	f7ff fbb7 	bl	8002444 <moment21>
};
 8002cd6:	bd08      	pop	{r3, pc}

08002cd8 <cumulant_40>:

void cumulant_40(float32_t in[], float32_t *out){
 8002cd8:	b530      	push	{r4, r5, lr}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	4605      	mov	r5, r0
 8002cde:	460c      	mov	r4, r1
	float32_t m40, m20;
	moment20(&in[0], &m20);
 8002ce0:	4669      	mov	r1, sp
 8002ce2:	f7ff fb63 	bl	80023ac <moment20>
	moment40(&in[0], &m40);
 8002ce6:	a901      	add	r1, sp, #4
 8002ce8:	4628      	mov	r0, r5
 8002cea:	f7ff fc2f 	bl	800254c <moment40>
	*out = fabsf(m40 - 3*m20*m20);
 8002cee:	eddd 7a00 	vldr	s15, [sp]
 8002cf2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002cf6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cfa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cfe:	eddd 7a01 	vldr	s15, [sp, #4]
 8002d02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d06:	eef0 7ae7 	vabs.f32	s15, s15
 8002d0a:	edc4 7a00 	vstr	s15, [r4]
};
 8002d0e:	b003      	add	sp, #12
 8002d10:	bd30      	pop	{r4, r5, pc}

08002d12 <cumulant_41>:
void cumulant_41(float32_t in[], float32_t *out){
 8002d12:	b530      	push	{r4, r5, lr}
 8002d14:	b085      	sub	sp, #20
 8002d16:	4604      	mov	r4, r0
 8002d18:	460d      	mov	r5, r1
	float32_t m41, m20, m21;
	moment41(&in[0], &m41);
 8002d1a:	a903      	add	r1, sp, #12
 8002d1c:	f7ff fc7a 	bl	8002614 <moment41>
	moment20(&in[0], &m20);
 8002d20:	a902      	add	r1, sp, #8
 8002d22:	4620      	mov	r0, r4
 8002d24:	f7ff fb42 	bl	80023ac <moment20>
	moment21(&in[0], &m21);
 8002d28:	a901      	add	r1, sp, #4
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f7ff fb8a 	bl	8002444 <moment21>
	*out = fabsf(m41 - 3*m20*m21);
 8002d30:	eddd 7a02 	vldr	s15, [sp, #8]
 8002d34:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d3c:	ed9d 7a01 	vldr	s14, [sp, #4]
 8002d40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d44:	eddd 7a03 	vldr	s15, [sp, #12]
 8002d48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d4c:	eef0 7ae7 	vabs.f32	s15, s15
 8002d50:	edc5 7a00 	vstr	s15, [r5]
};
 8002d54:	b005      	add	sp, #20
 8002d56:	bd30      	pop	{r4, r5, pc}

08002d58 <cumulant_42>:
void cumulant_42(float32_t in[], float32_t *out){
 8002d58:	b530      	push	{r4, r5, lr}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	4604      	mov	r4, r0
 8002d5e:	460d      	mov	r5, r1
	float32_t m42, m20, m21, temp;
	moment42(&in[0], &m42);
 8002d60:	a903      	add	r1, sp, #12
 8002d62:	f7ff fcc7 	bl	80026f4 <moment42>
	moment20(&in[0], &m20);
 8002d66:	a902      	add	r1, sp, #8
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f7ff fb1f 	bl	80023ac <moment20>
	moment21(&in[0], &m21);
 8002d6e:	a901      	add	r1, sp, #4
 8002d70:	4620      	mov	r0, r4
 8002d72:	f7ff fb67 	bl	8002444 <moment21>
	temp = fabsf(m20);
 8002d76:	eddd 7a02 	vldr	s15, [sp, #8]
	*out = fabsf(m42 - temp*temp - 2*m21*m21);
 8002d7a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002d7e:	eddd 7a03 	vldr	s15, [sp, #12]
 8002d82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d86:	ed9d 7a01 	vldr	s14, [sp, #4]
 8002d8a:	ee77 6a07 	vadd.f32	s13, s14, s14
 8002d8e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002d92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d96:	eef0 7ae7 	vabs.f32	s15, s15
 8002d9a:	edc5 7a00 	vstr	s15, [r5]
};
 8002d9e:	b005      	add	sp, #20
 8002da0:	bd30      	pop	{r4, r5, pc}

08002da2 <cumulant_60>:
void cumulant_60(float32_t in[], float32_t *out){
 8002da2:	b530      	push	{r4, r5, lr}
 8002da4:	b085      	sub	sp, #20
 8002da6:	4604      	mov	r4, r0
 8002da8:	460d      	mov	r5, r1
	float32_t m60, m40, m20;
	moment20(&in[0], &m20);
 8002daa:	a901      	add	r1, sp, #4
 8002dac:	f7ff fafe 	bl	80023ac <moment20>
	moment40(&in[0], &m40);
 8002db0:	a902      	add	r1, sp, #8
 8002db2:	4620      	mov	r0, r4
 8002db4:	f7ff fbca 	bl	800254c <moment40>
	moment60(&in[0], &m60);
 8002db8:	a903      	add	r1, sp, #12
 8002dba:	4620      	mov	r0, r4
 8002dbc:	f7ff fd78 	bl	80028b0 <moment60>
	*out = fabsf(m60 - 15*m20*m40 + 30*m20*m20*m20);
 8002dc0:	ed9d 7a01 	vldr	s14, [sp, #4]
 8002dc4:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8002dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dcc:	eddd 6a02 	vldr	s13, [sp, #8]
 8002dd0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002dd4:	eddd 7a03 	vldr	s15, [sp, #12]
 8002dd8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ddc:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8002de0:	ee67 6a26 	vmul.f32	s13, s14, s13
 8002de4:	ee67 6a26 	vmul.f32	s13, s14, s13
 8002de8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002dec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002df0:	eef0 7ae7 	vabs.f32	s15, s15
 8002df4:	edc5 7a00 	vstr	s15, [r5]
};
 8002df8:	b005      	add	sp, #20
 8002dfa:	bd30      	pop	{r4, r5, pc}

08002dfc <cumulant_61>:
void cumulant_61(float32_t in[], float32_t *out){
 8002dfc:	b530      	push	{r4, r5, lr}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	4604      	mov	r4, r0
 8002e02:	460d      	mov	r5, r1
	//M61 - 5 M21 M40 - 10 M20 M41 + 30 M20 M20 M21
	float32_t m61, m21, m40, m20, m41;
	moment20(&in[0], &m20);
 8002e04:	a902      	add	r1, sp, #8
 8002e06:	f7ff fad1 	bl	80023ac <moment20>
	moment21(&in[0], &m21);
 8002e0a:	a904      	add	r1, sp, #16
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	f7ff fb19 	bl	8002444 <moment21>
	moment40(&in[0], &m40);
 8002e12:	a903      	add	r1, sp, #12
 8002e14:	4620      	mov	r0, r4
 8002e16:	f7ff fb99 	bl	800254c <moment40>
	moment41(&in[0], &m41);
 8002e1a:	a901      	add	r1, sp, #4
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	f7ff fbf9 	bl	8002614 <moment41>
	moment61(&in[0], &m61);
 8002e22:	a905      	add	r1, sp, #20
 8002e24:	4620      	mov	r0, r4
 8002e26:	f7ff fdbd 	bl	80029a4 <moment61>
	*out = fabsf(m61 - 5*m21*m40 - 10*m20*m41 + 30*m20*m20*m21);
 8002e2a:	ed9d 6a04 	vldr	s12, [sp, #16]
 8002e2e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002e32:	ee66 7a26 	vmul.f32	s15, s12, s13
 8002e36:	eddd 6a03 	vldr	s13, [sp, #12]
 8002e3a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002e3e:	eddd 7a05 	vldr	s15, [sp, #20]
 8002e42:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e46:	ed9d 7a02 	vldr	s14, [sp, #8]
 8002e4a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002e4e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8002e52:	eddd 5a01 	vldr	s11, [sp, #4]
 8002e56:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8002e5a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e5e:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8002e62:	ee67 6a26 	vmul.f32	s13, s14, s13
 8002e66:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002e6a:	ee26 7a07 	vmul.f32	s14, s12, s14
 8002e6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e72:	eef0 7ae7 	vabs.f32	s15, s15
 8002e76:	edc5 7a00 	vstr	s15, [r5]
};
 8002e7a:	b007      	add	sp, #28
 8002e7c:	bd30      	pop	{r4, r5, pc}

08002e7e <cumulant_62>:
void cumulant_62(float32_t in[], float32_t *out){
 8002e7e:	b530      	push	{r4, r5, lr}
 8002e80:	b089      	sub	sp, #36	; 0x24
 8002e82:	4604      	mov	r4, r0
 8002e84:	460d      	mov	r5, r1
	// M62 - 6 M20 M42 - 8 M21 M41 - M22 M40 + 6 M20 M20 M22 + 24 M21 M21 M22
	float32_t m62, m20, m42, m21, m41, m22, m40;
	moment20(&in[0], &m20);
 8002e86:	a906      	add	r1, sp, #24
 8002e88:	f7ff fa90 	bl	80023ac <moment20>
	moment21(&in[0], &m21);
 8002e8c:	a904      	add	r1, sp, #16
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f7ff fad8 	bl	8002444 <moment21>
	moment22(&in[0], &m22);
 8002e94:	a902      	add	r1, sp, #8
 8002e96:	4620      	mov	r0, r4
 8002e98:	f7ff fb06 	bl	80024a8 <moment22>
	moment40(&in[0], &m40);
 8002e9c:	a901      	add	r1, sp, #4
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f7ff fb54 	bl	800254c <moment40>
	moment41(&in[0], &m41);
 8002ea4:	a903      	add	r1, sp, #12
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	f7ff fbb4 	bl	8002614 <moment41>
	moment42(&in[0], &m42);
 8002eac:	a905      	add	r1, sp, #20
 8002eae:	4620      	mov	r0, r4
 8002eb0:	f7ff fc20 	bl	80026f4 <moment42>
	moment62(&in[0], &m62);
 8002eb4:	a907      	add	r1, sp, #28
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	f7ff fdfa 	bl	8002ab0 <moment62>
	*out = fabsf(m62 - 6*m20*m42 - 8*m21*m41 - m22*m40 + 6*m20*m20*m22 + 24*m21*m21*m22);
 8002ebc:	ed9d 7a06 	vldr	s14, [sp, #24]
 8002ec0:	eef1 5a08 	vmov.f32	s11, #24	; 0x40c00000  6.0
 8002ec4:	ee67 5a25 	vmul.f32	s11, s14, s11
 8002ec8:	eddd 7a05 	vldr	s15, [sp, #20]
 8002ecc:	ee65 6aa7 	vmul.f32	s13, s11, s15
 8002ed0:	eddd 7a07 	vldr	s15, [sp, #28]
 8002ed4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ed8:	ed9d 6a04 	vldr	s12, [sp, #16]
 8002edc:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002ee0:	ee66 6a26 	vmul.f32	s13, s12, s13
 8002ee4:	ed9d 5a03 	vldr	s10, [sp, #12]
 8002ee8:	ee66 6a85 	vmul.f32	s13, s13, s10
 8002eec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ef0:	eddd 6a02 	vldr	s13, [sp, #8]
 8002ef4:	ed9d 5a01 	vldr	s10, [sp, #4]
 8002ef8:	ee26 5a85 	vmul.f32	s10, s13, s10
 8002efc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8002f00:	ee27 7a25 	vmul.f32	s14, s14, s11
 8002f04:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002f08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f0c:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8002f10:	ee26 7a07 	vmul.f32	s14, s12, s14
 8002f14:	ee26 6a07 	vmul.f32	s12, s12, s14
 8002f18:	ee66 6a86 	vmul.f32	s13, s13, s12
 8002f1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f20:	eef0 7ae7 	vabs.f32	s15, s15
 8002f24:	edc5 7a00 	vstr	s15, [r5]
};
 8002f28:	b009      	add	sp, #36	; 0x24
 8002f2a:	bd30      	pop	{r4, r5, pc}

08002f2c <cumulant_63>:
void cumulant_63(float32_t in[], float32_t *out){
 8002f2c:	b530      	push	{r4, r5, lr}
 8002f2e:	b089      	sub	sp, #36	; 0x24
 8002f30:	4604      	mov	r4, r0
 8002f32:	460d      	mov	r5, r1
	// M63 - 9 M21 M42 + 12 M21 M21 M21 - 3 M20 M43 - 3 M22 M41 + 18 M20 M21 M22
	float32_t m63, m21, m42, m20, m43, m22, m41;
	moment20(&in[0], &m20);
 8002f34:	a904      	add	r1, sp, #16
 8002f36:	f7ff fa39 	bl	80023ac <moment20>
	moment21(&in[0], &m21);
 8002f3a:	a906      	add	r1, sp, #24
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	f7ff fa81 	bl	8002444 <moment21>
	moment22(&in[0], &m22);
 8002f42:	a902      	add	r1, sp, #8
 8002f44:	4620      	mov	r0, r4
 8002f46:	f7ff faaf 	bl	80024a8 <moment22>
	moment41(&in[0], &m41);
 8002f4a:	a901      	add	r1, sp, #4
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	f7ff fb61 	bl	8002614 <moment41>
	moment42(&in[0], &m42);
 8002f52:	a905      	add	r1, sp, #20
 8002f54:	4620      	mov	r0, r4
 8002f56:	f7ff fbcd 	bl	80026f4 <moment42>
	moment43(&in[0], &m43);
 8002f5a:	a903      	add	r1, sp, #12
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f7ff fc39 	bl	80027d4 <moment43>
	moment63(&in[0], &m63);
 8002f62:	a907      	add	r1, sp, #28
 8002f64:	4620      	mov	r0, r4
 8002f66:	f7ff fe29 	bl	8002bbc <moment63>
	*out = fabsf(m63 - 9*m21*m42 + 12*m21*m21*m21 - 3*m20*m43 - 3*m22*m41 + 18*m20*m21*m22);
 8002f6a:	ed9d 7a06 	vldr	s14, [sp, #24]
 8002f6e:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
 8002f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f76:	eddd 6a05 	vldr	s13, [sp, #20]
 8002f7a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002f7e:	eddd 7a07 	vldr	s15, [sp, #28]
 8002f82:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f86:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8002f8a:	ee67 6a26 	vmul.f32	s13, s14, s13
 8002f8e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8002f92:	ee67 6a26 	vmul.f32	s13, s14, s13
 8002f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f9a:	eddd 5a04 	vldr	s11, [sp, #16]
 8002f9e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002fa2:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8002fa6:	ed9d 5a03 	vldr	s10, [sp, #12]
 8002faa:	ee26 6a05 	vmul.f32	s12, s12, s10
 8002fae:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002fb2:	ed9d 6a02 	vldr	s12, [sp, #8]
 8002fb6:	ee66 6a26 	vmul.f32	s13, s12, s13
 8002fba:	ed9d 5a01 	vldr	s10, [sp, #4]
 8002fbe:	ee66 6a85 	vmul.f32	s13, s13, s10
 8002fc2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fc6:	eef3 6a02 	vmov.f32	s13, #50	; 0x41900000  18.0
 8002fca:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8002fce:	ee27 7a25 	vmul.f32	s14, s14, s11
 8002fd2:	ee26 7a07 	vmul.f32	s14, s12, s14
 8002fd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fda:	eef0 7ae7 	vabs.f32	s15, s15
 8002fde:	edc5 7a00 	vstr	s15, [r5]
};
 8002fe2:	b009      	add	sp, #36	; 0x24
 8002fe4:	bd30      	pop	{r4, r5, pc}
	...

08002fe8 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8002fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fea:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fec:	2400      	movs	r4, #0
 8002fee:	9407      	str	r4, [sp, #28]
 8002ff0:	9408      	str	r4, [sp, #32]
 8002ff2:	9409      	str	r4, [sp, #36]	; 0x24
 8002ff4:	940a      	str	r4, [sp, #40]	; 0x28
 8002ff6:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ff8:	4b3b      	ldr	r3, [pc, #236]	; (80030e8 <MX_GPIO_Init+0x100>)
 8002ffa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002ffe:	f042 0204 	orr.w	r2, r2, #4
 8003002:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003006:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800300a:	f002 0204 	and.w	r2, r2, #4
 800300e:	9201      	str	r2, [sp, #4]
 8003010:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003012:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003016:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800301a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800301e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003022:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003026:	9202      	str	r2, [sp, #8]
 8003028:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800302a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800302e:	f042 0202 	orr.w	r2, r2, #2
 8003032:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003036:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800303a:	f002 0202 	and.w	r2, r2, #2
 800303e:	9203      	str	r2, [sp, #12]
 8003040:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003042:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003046:	f042 0208 	orr.w	r2, r2, #8
 800304a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800304e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003052:	f002 0208 	and.w	r2, r2, #8
 8003056:	9204      	str	r2, [sp, #16]
 8003058:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800305a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003066:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800306a:	f002 0201 	and.w	r2, r2, #1
 800306e:	9205      	str	r2, [sp, #20]
 8003070:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003072:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003076:	f042 0210 	orr.w	r2, r2, #16
 800307a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800307e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	9306      	str	r3, [sp, #24]
 8003088:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800308a:	4f18      	ldr	r7, [pc, #96]	; (80030ec <MX_GPIO_Init+0x104>)
 800308c:	4622      	mov	r2, r4
 800308e:	f244 0101 	movw	r1, #16385	; 0x4001
 8003092:	4638      	mov	r0, r7
 8003094:	f001 f94c 	bl	8004330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003098:	4d15      	ldr	r5, [pc, #84]	; (80030f0 <MX_GPIO_Init+0x108>)
 800309a:	4622      	mov	r2, r4
 800309c:	2102      	movs	r1, #2
 800309e:	4628      	mov	r0, r5
 80030a0:	f001 f946 	bl	8004330 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80030a4:	f244 0301 	movw	r3, #16385	; 0x4001
 80030a8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030aa:	2601      	movs	r6, #1
 80030ac:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b2:	a907      	add	r1, sp, #28
 80030b4:	4638      	mov	r0, r7
 80030b6:	f001 f84b 	bl	8004150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80030ba:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80030be:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c0:	2702      	movs	r7, #2
 80030c2:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80030c8:	230a      	movs	r3, #10
 80030ca:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030cc:	a907      	add	r1, sp, #28
 80030ce:	4809      	ldr	r0, [pc, #36]	; (80030f4 <MX_GPIO_Init+0x10c>)
 80030d0:	f001 f83e 	bl	8004150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80030d4:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030da:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80030dc:	a907      	add	r1, sp, #28
 80030de:	4628      	mov	r0, r5
 80030e0:	f001 f836 	bl	8004150 <HAL_GPIO_Init>

}
 80030e4:	b00d      	add	sp, #52	; 0x34
 80030e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e8:	58024400 	.word	0x58024400
 80030ec:	58020400 	.word	0x58020400
 80030f0:	58021000 	.word	0x58021000
 80030f4:	58020000 	.word	0x58020000

080030f8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80030f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030fa:	b0cd      	sub	sp, #308	; 0x134
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030fc:	224c      	movs	r2, #76	; 0x4c
 80030fe:	2100      	movs	r1, #0
 8003100:	a839      	add	r0, sp, #228	; 0xe4
 8003102:	f004 fbc9 	bl	8007898 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003106:	2220      	movs	r2, #32
 8003108:	2100      	movs	r1, #0
 800310a:	a831      	add	r0, sp, #196	; 0xc4
 800310c:	f004 fbc4 	bl	8007898 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003110:	22bc      	movs	r2, #188	; 0xbc
 8003112:	2100      	movs	r1, #0
 8003114:	a802      	add	r0, sp, #8
 8003116:	f004 fbbf 	bl	8007898 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800311a:	2004      	movs	r0, #4
 800311c:	f001 f926 	bl	800436c <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003120:	2300      	movs	r3, #0
 8003122:	9301      	str	r3, [sp, #4]
 8003124:	4b23      	ldr	r3, [pc, #140]	; (80031b4 <SystemClock_Config+0xbc>)
 8003126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003128:	f022 0201 	bic.w	r2, r2, #1
 800312c:	62da      	str	r2, [r3, #44]	; 0x2c
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	9301      	str	r3, [sp, #4]
 8003136:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <SystemClock_Config+0xc0>)
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800313e:	619a      	str	r2, [r3, #24]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003146:	9301      	str	r3, [sp, #4]
 8003148:	9b01      	ldr	r3, [sp, #4]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800314a:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <SystemClock_Config+0xc0>)
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003152:	d0fa      	beq.n	800314a <SystemClock_Config+0x52>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003154:	2402      	movs	r4, #2
 8003156:	9439      	str	r4, [sp, #228]	; 0xe4
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003158:	2301      	movs	r3, #1
 800315a:	933c      	str	r3, [sp, #240]	; 0xf0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800315c:	2540      	movs	r5, #64	; 0x40
 800315e:	953d      	str	r5, [sp, #244]	; 0xf4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003160:	9442      	str	r4, [sp, #264]	; 0x108
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003162:	2600      	movs	r6, #0
 8003164:	9643      	str	r6, [sp, #268]	; 0x10c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8003166:	2304      	movs	r3, #4
 8003168:	9344      	str	r3, [sp, #272]	; 0x110
	RCC_OscInitStruct.PLL.PLLN = 50;
 800316a:	2332      	movs	r3, #50	; 0x32
 800316c:	9345      	str	r3, [sp, #276]	; 0x114
	RCC_OscInitStruct.PLL.PLLP = 2;
 800316e:	9446      	str	r4, [sp, #280]	; 0x118
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8003170:	9447      	str	r4, [sp, #284]	; 0x11c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8003172:	9448      	str	r4, [sp, #288]	; 0x120
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003174:	230c      	movs	r3, #12
 8003176:	9349      	str	r3, [sp, #292]	; 0x124
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003178:	964a      	str	r6, [sp, #296]	; 0x128
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800317a:	964b      	str	r6, [sp, #300]	; 0x12c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800317c:	a839      	add	r0, sp, #228	; 0xe4
 800317e:	f001 f93f 	bl	8004400 <HAL_RCC_OscConfig>
	{
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003182:	233f      	movs	r3, #63	; 0x3f
 8003184:	9331      	str	r3, [sp, #196]	; 0xc4
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003186:	2703      	movs	r7, #3
 8003188:	9732      	str	r7, [sp, #200]	; 0xc8
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800318a:	9633      	str	r6, [sp, #204]	; 0xcc
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800318c:	2308      	movs	r3, #8
 800318e:	9334      	str	r3, [sp, #208]	; 0xd0
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003190:	9535      	str	r5, [sp, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003192:	9536      	str	r5, [sp, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003198:	9337      	str	r3, [sp, #220]	; 0xdc
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800319a:	9538      	str	r5, [sp, #224]	; 0xe0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800319c:	4621      	mov	r1, r4
 800319e:	a831      	add	r0, sp, #196	; 0xc4
 80031a0:	f001 fd48 	bl	8004c34 <HAL_RCC_ClockConfig>
	{
		Error_Handler();
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80031a4:	9402      	str	r4, [sp, #8]
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 80031a6:	971f      	str	r7, [sp, #124]	; 0x7c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031a8:	a802      	add	r0, sp, #8
 80031aa:	f001 ffdf 	bl	800516c <HAL_RCCEx_PeriphCLKConfig>
	{
		Error_Handler();
	}
}
 80031ae:	b04d      	add	sp, #308	; 0x134
 80031b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031b2:	bf00      	nop
 80031b4:	58000400 	.word	0x58000400
 80031b8:	58024800 	.word	0x58024800

080031bc <clear_leds>:

/* USER CODE BEGIN 4 */
void clear_leds(){
 80031bc:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 80031be:	4c09      	ldr	r4, [pc, #36]	; (80031e4 <clear_leds+0x28>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	2101      	movs	r1, #1
 80031c4:	4620      	mov	r0, r4
 80031c6:	f001 f8b3 	bl	8004330 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2102      	movs	r1, #2
 80031ce:	4806      	ldr	r0, [pc, #24]	; (80031e8 <clear_leds+0x2c>)
 80031d0:	f001 f8ae 	bl	8004330 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80031d4:	2200      	movs	r2, #0
 80031d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031da:	4620      	mov	r0, r4
 80031dc:	f001 f8a8 	bl	8004330 <HAL_GPIO_WritePin>
}
 80031e0:	bd10      	pop	{r4, pc}
 80031e2:	bf00      	nop
 80031e4:	58020400 	.word	0x58020400
 80031e8:	58021000 	.word	0x58021000

080031ec <blink_red_fast>:
void light_leds(){
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
}
void blink_red_fast(){
 80031ec:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80031ee:	4c0a      	ldr	r4, [pc, #40]	; (8003218 <blink_red_fast+0x2c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031f6:	4620      	mov	r0, r4
 80031f8:	f001 f89a 	bl	8004330 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80031fc:	2032      	movs	r0, #50	; 0x32
 80031fe:	f000 fddb 	bl	8003db8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8003202:	2201      	movs	r2, #1
 8003204:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003208:	4620      	mov	r0, r4
 800320a:	f001 f891 	bl	8004330 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800320e:	2032      	movs	r0, #50	; 0x32
 8003210:	f000 fdd2 	bl	8003db8 <HAL_Delay>
}
 8003214:	bd10      	pop	{r4, pc}
 8003216:	bf00      	nop
 8003218:	58020400 	.word	0x58020400

0800321c <blink_orange_slow>:
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_orange_slow(){
 800321c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 800321e:	4c0a      	ldr	r4, [pc, #40]	; (8003248 <blink_orange_slow+0x2c>)
 8003220:	2200      	movs	r2, #0
 8003222:	2102      	movs	r1, #2
 8003224:	4620      	mov	r0, r4
 8003226:	f001 f883 	bl	8004330 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800322a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800322e:	f000 fdc3 	bl	8003db8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 8003232:	2201      	movs	r2, #1
 8003234:	2102      	movs	r1, #2
 8003236:	4620      	mov	r0, r4
 8003238:	f001 f87a 	bl	8004330 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800323c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003240:	f000 fdba 	bl	8003db8 <HAL_Delay>
}
 8003244:	bd10      	pop	{r4, pc}
 8003246:	bf00      	nop
 8003248:	58021000 	.word	0x58021000

0800324c <blink_green>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_green(){
 800324c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 800324e:	4c09      	ldr	r4, [pc, #36]	; (8003274 <blink_green+0x28>)
 8003250:	2200      	movs	r2, #0
 8003252:	2101      	movs	r1, #1
 8003254:	4620      	mov	r0, r4
 8003256:	f001 f86b 	bl	8004330 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800325a:	20c8      	movs	r0, #200	; 0xc8
 800325c:	f000 fdac 	bl	8003db8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8003260:	2201      	movs	r2, #1
 8003262:	4611      	mov	r1, r2
 8003264:	4620      	mov	r0, r4
 8003266:	f001 f863 	bl	8004330 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800326a:	20c8      	movs	r0, #200	; 0xc8
 800326c:	f000 fda4 	bl	8003db8 <HAL_Delay>
}
 8003270:	bd10      	pop	{r4, pc}
 8003272:	bf00      	nop
 8003274:	58020400 	.word	0x58020400

08003278 <transmit_features>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(500);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(500);
}
void transmit_features(uint8_t *value, uint8_t *counter){
 8003278:	b538      	push	{r3, r4, r5, lr}
 800327a:	4605      	mov	r5, r0
 800327c:	460c      	mov	r4, r1
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800327e:	4823      	ldr	r0, [pc, #140]	; (800330c <transmit_features+0x94>)
 8003280:	f003 ff88 	bl	8007194 <UART_CheckIdleState>
 8003284:	b100      	cbz	r0, 8003288 <transmit_features+0x10>
		while(UartReady != SET){
			blink_red_fast();
		}
		UartReady = RESET;
	}
}
 8003286:	bd38      	pop	{r3, r4, r5, pc}
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8003288:	2204      	movs	r2, #4
 800328a:	4921      	ldr	r1, [pc, #132]	; (8003310 <transmit_features+0x98>)
 800328c:	481f      	ldr	r0, [pc, #124]	; (800330c <transmit_features+0x94>)
 800328e:	f003 f8a5 	bl	80063dc <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8003292:	e001      	b.n	8003298 <transmit_features+0x20>
			blink_red_fast();
 8003294:	f7ff ffaa 	bl	80031ec <blink_red_fast>
		while(UartReady != SET){
 8003298:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <transmit_features+0x9c>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d1f8      	bne.n	8003294 <transmit_features+0x1c>
		UartReady = RESET;
 80032a2:	4b1c      	ldr	r3, [pc, #112]	; (8003314 <transmit_features+0x9c>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &value[0], 4);
 80032a8:	2204      	movs	r2, #4
 80032aa:	4629      	mov	r1, r5
 80032ac:	4817      	ldr	r0, [pc, #92]	; (800330c <transmit_features+0x94>)
 80032ae:	f003 f895 	bl	80063dc <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80032b2:	e001      	b.n	80032b8 <transmit_features+0x40>
			blink_red_fast();
 80032b4:	f7ff ff9a 	bl	80031ec <blink_red_fast>
		while(UartReady != SET){
 80032b8:	4b16      	ldr	r3, [pc, #88]	; (8003314 <transmit_features+0x9c>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d1f8      	bne.n	80032b4 <transmit_features+0x3c>
		UartReady = RESET;
 80032c2:	4b14      	ldr	r3, [pc, #80]	; (8003314 <transmit_features+0x9c>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &counter[0], 4);
 80032c8:	2204      	movs	r2, #4
 80032ca:	4621      	mov	r1, r4
 80032cc:	480f      	ldr	r0, [pc, #60]	; (800330c <transmit_features+0x94>)
 80032ce:	f003 f885 	bl	80063dc <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80032d2:	e001      	b.n	80032d8 <transmit_features+0x60>
			blink_red_fast();
 80032d4:	f7ff ff8a 	bl	80031ec <blink_red_fast>
		while(UartReady != SET){
 80032d8:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <transmit_features+0x9c>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d1f8      	bne.n	80032d4 <transmit_features+0x5c>
		UartReady = RESET;
 80032e2:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <transmit_features+0x9c>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 80032e8:	2204      	movs	r2, #4
 80032ea:	490b      	ldr	r1, [pc, #44]	; (8003318 <transmit_features+0xa0>)
 80032ec:	4807      	ldr	r0, [pc, #28]	; (800330c <transmit_features+0x94>)
 80032ee:	f003 f875 	bl	80063dc <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80032f2:	e001      	b.n	80032f8 <transmit_features+0x80>
			blink_red_fast();
 80032f4:	f7ff ff7a 	bl	80031ec <blink_red_fast>
		while(UartReady != SET){
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <transmit_features+0x9c>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d1f8      	bne.n	80032f4 <transmit_features+0x7c>
		UartReady = RESET;
 8003302:	4b04      	ldr	r3, [pc, #16]	; (8003314 <transmit_features+0x9c>)
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]
}
 8003308:	e7bd      	b.n	8003286 <transmit_features+0xe>
 800330a:	bf00      	nop
 800330c:	24015568 	.word	0x24015568
 8003310:	0800e1d8 	.word	0x0800e1d8
 8003314:	2400147c 	.word	0x2400147c
 8003318:	0800e1dc 	.word	0x0800e1dc

0800331c <transmit_array>:
void transmit_array(uint8_t *array, uint16_t size, uint8_t *counter){
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	4605      	mov	r5, r0
 8003320:	460e      	mov	r6, r1
 8003322:	4614      	mov	r4, r2
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8003324:	4823      	ldr	r0, [pc, #140]	; (80033b4 <transmit_array+0x98>)
 8003326:	f003 ff35 	bl	8007194 <UART_CheckIdleState>
 800332a:	b110      	cbz	r0, 8003332 <transmit_array+0x16>
		while(UartReady != SET){
			blink_red_fast();
		}
		UartReady = RESET;
	}
	blink_orange_slow();
 800332c:	f7ff ff76 	bl	800321c <blink_orange_slow>
}
 8003330:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8003332:	2204      	movs	r2, #4
 8003334:	4920      	ldr	r1, [pc, #128]	; (80033b8 <transmit_array+0x9c>)
 8003336:	481f      	ldr	r0, [pc, #124]	; (80033b4 <transmit_array+0x98>)
 8003338:	f003 f850 	bl	80063dc <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800333c:	e001      	b.n	8003342 <transmit_array+0x26>
			blink_red_fast();
 800333e:	f7ff ff55 	bl	80031ec <blink_red_fast>
		while(UartReady != SET){
 8003342:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <transmit_array+0xa0>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b01      	cmp	r3, #1
 800334a:	d1f8      	bne.n	800333e <transmit_array+0x22>
		UartReady = RESET;
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <transmit_array+0xa0>)
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &array[0], size);
 8003352:	4632      	mov	r2, r6
 8003354:	4629      	mov	r1, r5
 8003356:	4817      	ldr	r0, [pc, #92]	; (80033b4 <transmit_array+0x98>)
 8003358:	f003 f840 	bl	80063dc <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800335c:	e001      	b.n	8003362 <transmit_array+0x46>
			blink_red_fast();
 800335e:	f7ff ff45 	bl	80031ec <blink_red_fast>
		while(UartReady != SET){
 8003362:	4b16      	ldr	r3, [pc, #88]	; (80033bc <transmit_array+0xa0>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d1f8      	bne.n	800335e <transmit_array+0x42>
		UartReady = RESET;
 800336c:	4b13      	ldr	r3, [pc, #76]	; (80033bc <transmit_array+0xa0>)
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &counter[0], 4);
 8003372:	2204      	movs	r2, #4
 8003374:	4621      	mov	r1, r4
 8003376:	480f      	ldr	r0, [pc, #60]	; (80033b4 <transmit_array+0x98>)
 8003378:	f003 f830 	bl	80063dc <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800337c:	e001      	b.n	8003382 <transmit_array+0x66>
			blink_red_fast();
 800337e:	f7ff ff35 	bl	80031ec <blink_red_fast>
		while(UartReady != SET){
 8003382:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <transmit_array+0xa0>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	d1f8      	bne.n	800337e <transmit_array+0x62>
		UartReady = RESET;
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <transmit_array+0xa0>)
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8003392:	2204      	movs	r2, #4
 8003394:	490a      	ldr	r1, [pc, #40]	; (80033c0 <transmit_array+0xa4>)
 8003396:	4807      	ldr	r0, [pc, #28]	; (80033b4 <transmit_array+0x98>)
 8003398:	f003 f820 	bl	80063dc <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800339c:	e001      	b.n	80033a2 <transmit_array+0x86>
			blink_red_fast();
 800339e:	f7ff ff25 	bl	80031ec <blink_red_fast>
		while(UartReady != SET){
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <transmit_array+0xa0>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d1f8      	bne.n	800339e <transmit_array+0x82>
		UartReady = RESET;
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <transmit_array+0xa0>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	701a      	strb	r2, [r3, #0]
 80033b2:	e7bb      	b.n	800332c <transmit_array+0x10>
 80033b4:	24015568 	.word	0x24015568
 80033b8:	0800e1d8 	.word	0x0800e1d8
 80033bc:	2400147c 	.word	0x2400147c
 80033c0:	0800e1dc 	.word	0x0800e1dc

080033c4 <merge_features>:
void merge_features(float32_t out[]){
	out[0] = ft0.number;
 80033c4:	4b21      	ldr	r3, [pc, #132]	; (800344c <merge_features+0x88>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6003      	str	r3, [r0, #0]
	out[1] = ft1.number;
 80033ca:	4b21      	ldr	r3, [pc, #132]	; (8003450 <merge_features+0x8c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6043      	str	r3, [r0, #4]
	out[2] = ft2.number;
 80033d0:	4b20      	ldr	r3, [pc, #128]	; (8003454 <merge_features+0x90>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6083      	str	r3, [r0, #8]
	out[3] = ft3.number;
 80033d6:	4b20      	ldr	r3, [pc, #128]	; (8003458 <merge_features+0x94>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60c3      	str	r3, [r0, #12]
	out[4] = ft4.number;
 80033dc:	4b1f      	ldr	r3, [pc, #124]	; (800345c <merge_features+0x98>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6103      	str	r3, [r0, #16]
	out[5] = ft5.number;
 80033e2:	4b1f      	ldr	r3, [pc, #124]	; (8003460 <merge_features+0x9c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6143      	str	r3, [r0, #20]
	out[6] = ft6.number;
 80033e8:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <merge_features+0xa0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6183      	str	r3, [r0, #24]
	out[7] = ft7.number;
 80033ee:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <merge_features+0xa4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	61c3      	str	r3, [r0, #28]
	out[8] = ft8.number;
 80033f4:	4b1d      	ldr	r3, [pc, #116]	; (800346c <merge_features+0xa8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6203      	str	r3, [r0, #32]
	out[9] = ft9.number;
 80033fa:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <merge_features+0xac>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6243      	str	r3, [r0, #36]	; 0x24
	out[10] = ft10.number;
 8003400:	4b1c      	ldr	r3, [pc, #112]	; (8003474 <merge_features+0xb0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6283      	str	r3, [r0, #40]	; 0x28
	out[11] = ft11.number;
 8003406:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <merge_features+0xb4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	62c3      	str	r3, [r0, #44]	; 0x2c
	out[12] = ft12.number;
 800340c:	4b1b      	ldr	r3, [pc, #108]	; (800347c <merge_features+0xb8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6303      	str	r3, [r0, #48]	; 0x30
	out[13] = ft13.number;
 8003412:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <merge_features+0xbc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6343      	str	r3, [r0, #52]	; 0x34
	out[14] = ft14.number;
 8003418:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <merge_features+0xc0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6383      	str	r3, [r0, #56]	; 0x38
	out[15] = ft15.number;
 800341e:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <merge_features+0xc4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	63c3      	str	r3, [r0, #60]	; 0x3c
	out[16] = ft16.number;
 8003424:	4b19      	ldr	r3, [pc, #100]	; (800348c <merge_features+0xc8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6403      	str	r3, [r0, #64]	; 0x40
	out[17] = ft17.number;
 800342a:	4b19      	ldr	r3, [pc, #100]	; (8003490 <merge_features+0xcc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6443      	str	r3, [r0, #68]	; 0x44
	out[18] = ft18.number;
 8003430:	4b18      	ldr	r3, [pc, #96]	; (8003494 <merge_features+0xd0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6483      	str	r3, [r0, #72]	; 0x48
	out[19] = ft19.number;
 8003436:	4b18      	ldr	r3, [pc, #96]	; (8003498 <merge_features+0xd4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	64c3      	str	r3, [r0, #76]	; 0x4c
	out[20] = ft20.number;
 800343c:	4b17      	ldr	r3, [pc, #92]	; (800349c <merge_features+0xd8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6503      	str	r3, [r0, #80]	; 0x50
	out[21] = ft21.number;
 8003442:	4b17      	ldr	r3, [pc, #92]	; (80034a0 <merge_features+0xdc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6543      	str	r3, [r0, #84]	; 0x54
}
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	240154d8 	.word	0x240154d8
 8003450:	24015504 	.word	0x24015504
 8003454:	240154dc 	.word	0x240154dc
 8003458:	240154c0 	.word	0x240154c0
 800345c:	240154bc 	.word	0x240154bc
 8003460:	240154cc 	.word	0x240154cc
 8003464:	24015518 	.word	0x24015518
 8003468:	240154e4 	.word	0x240154e4
 800346c:	24015500 	.word	0x24015500
 8003470:	240154f0 	.word	0x240154f0
 8003474:	240154c4 	.word	0x240154c4
 8003478:	240154ec 	.word	0x240154ec
 800347c:	2401550c 	.word	0x2401550c
 8003480:	240154c8 	.word	0x240154c8
 8003484:	240154d4 	.word	0x240154d4
 8003488:	240154f4 	.word	0x240154f4
 800348c:	240154e8 	.word	0x240154e8
 8003490:	24015508 	.word	0x24015508
 8003494:	240154e0 	.word	0x240154e0
 8003498:	240154fc 	.word	0x240154fc
 800349c:	24015510 	.word	0x24015510
 80034a0:	240154d0 	.word	0x240154d0

080034a4 <main>:
{
 80034a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a8:	b0a3      	sub	sp, #140	; 0x8c
	float32_t input_vector[22] = {0};
 80034aa:	2258      	movs	r2, #88	; 0x58
 80034ac:	2100      	movs	r1, #0
 80034ae:	a80c      	add	r0, sp, #48	; 0x30
 80034b0:	f004 f9f2 	bl	8007898 <memset>
	q15_t q15_input_vector[22] = {0};
 80034b4:	222c      	movs	r2, #44	; 0x2c
 80034b6:	2100      	movs	r1, #0
 80034b8:	a801      	add	r0, sp, #4
 80034ba:	f004 f9ed 	bl	8007898 <memset>
  __ASM volatile ("dsb 0xF":::"memory");
 80034be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80034c2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80034c6:	4b42      	ldr	r3, [pc, #264]	; (80035d0 <main+0x12c>)
 80034c8:	2100      	movs	r1, #0
 80034ca:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80034ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80034d2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80034dc:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80034de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80034e2:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80034e6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80034ea:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80034ee:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80034f2:	f3c4 314e 	ubfx	r1, r4, #13, #15
 80034f6:	e00f      	b.n	8003518 <main+0x74>
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80034f8:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80034fa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80034fe:	ea03 1341 	and.w	r3, r3, r1, lsl #5
 8003502:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8003506:	4832      	ldr	r0, [pc, #200]	; (80035d0 <main+0x12c>)
 8003508:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 800350c:	1e53      	subs	r3, r2, #1
 800350e:	2a00      	cmp	r2, #0
 8003510:	d1f2      	bne.n	80034f8 <main+0x54>
    } while(sets-- != 0U);
 8003512:	1e4b      	subs	r3, r1, #1
 8003514:	b119      	cbz	r1, 800351e <main+0x7a>
 8003516:	4619      	mov	r1, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003518:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 800351c:	e7ed      	b.n	80034fa <main+0x56>
 800351e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003522:	6943      	ldr	r3, [r0, #20]
 8003524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003528:	6143      	str	r3, [r0, #20]
 800352a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800352e:	f3bf 8f6f 	isb	sy
	timeout = 0xFFFF;
 8003532:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003536:	e000      	b.n	800353a <main+0x96>
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8003538:	4613      	mov	r3, r2
 800353a:	4a26      	ldr	r2, [pc, #152]	; (80035d4 <main+0x130>)
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003542:	d002      	beq.n	800354a <main+0xa6>
 8003544:	1e5a      	subs	r2, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	dcf6      	bgt.n	8003538 <main+0x94>
	HAL_Init();
 800354a:	f000 fbf5 	bl	8003d38 <HAL_Init>
	SystemClock_Config();
 800354e:	f7ff fdd3 	bl	80030f8 <SystemClock_Config>
	__HAL_RCC_HSEM_CLK_ENABLE();
 8003552:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <main+0x130>)
 8003554:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003558:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800355c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	9b00      	ldr	r3, [sp, #0]
	HAL_HSEM_FastTake(HSEM_ID_0);
 800356c:	2000      	movs	r0, #0
 800356e:	f000 fee5 	bl	800433c <HAL_HSEM_FastTake>
	HAL_HSEM_Release(HSEM_ID_0,0);
 8003572:	2100      	movs	r1, #0
 8003574:	4608      	mov	r0, r1
 8003576:	f000 fef1 	bl	800435c <HAL_HSEM_Release>
	timeout = 0xFFFF;
 800357a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800357e:	e000      	b.n	8003582 <main+0xde>
 8003580:	4613      	mov	r3, r2
 8003582:	4a14      	ldr	r2, [pc, #80]	; (80035d4 <main+0x130>)
 8003584:	6812      	ldr	r2, [r2, #0]
 8003586:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800358a:	d102      	bne.n	8003592 <main+0xee>
 800358c:	1e5a      	subs	r2, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	dcf6      	bgt.n	8003580 <main+0xdc>
	MX_GPIO_Init();
 8003592:	f7ff fd29 	bl	8002fe8 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8003596:	f000 fb07 	bl	8003ba8 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 800359a:	f000 fab5 	bl	8003b08 <MX_TIM2_Init>
	__HAL_TIM_ENABLE(&htim2);
 800359e:	4c0e      	ldr	r4, [pc, #56]	; (80035d8 <main+0x134>)
 80035a0:	6822      	ldr	r2, [r4, #0]
 80035a2:	6813      	ldr	r3, [r2, #0]
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6013      	str	r3, [r2, #0]
	__HAL_TIM_UIFREMAP_DISABLE(&htim2);
 80035aa:	6822      	ldr	r2, [r4, #0]
 80035ac:	6813      	ldr	r3, [r2, #0]
 80035ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035b2:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(&htim2);
 80035b4:	4620      	mov	r0, r4
 80035b6:	f002 fcb5 	bl	8005f24 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	2200      	movs	r2, #0
 80035be:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_UART_Receive_IT(&huart3, &rxBuffer.bytes[0], RX_DATA_SIZE*4) != HAL_OK)
 80035c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035c4:	4905      	ldr	r1, [pc, #20]	; (80035dc <main+0x138>)
 80035c6:	4806      	ldr	r0, [pc, #24]	; (80035e0 <main+0x13c>)
 80035c8:	f002 ff66 	bl	8006498 <HAL_UART_Receive_IT>
 80035cc:	e012      	b.n	80035f4 <main+0x150>
 80035ce:	bf00      	nop
 80035d0:	e000ed00 	.word	0xe000ed00
 80035d4:	58024400 	.word	0x58024400
 80035d8:	2401551c 	.word	0x2401551c
 80035dc:	24011484 	.word	0x24011484
 80035e0:	24015568 	.word	0x24015568
		HAL_Delay(500);
 80035e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035e8:	f000 fbe6 	bl	8003db8 <HAL_Delay>
		blink_green();
 80035ec:	f7ff fe2e 	bl	800324c <blink_green>
		blink_green();
 80035f0:	f7ff fe2c 	bl	800324c <blink_green>
	while (UartReady != SET)
 80035f4:	4bbd      	ldr	r3, [pc, #756]	; (80038ec <main+0x448>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d1f2      	bne.n	80035e4 <main+0x140>
	UartReady = RESET;
 80035fe:	4bbb      	ldr	r3, [pc, #748]	; (80038ec <main+0x448>)
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8003604:	2201      	movs	r2, #1
 8003606:	4611      	mov	r1, r2
 8003608:	48b9      	ldr	r0, [pc, #740]	; (80038f0 <main+0x44c>)
 800360a:	f000 fe91 	bl	8004330 <HAL_GPIO_WritePin>
	if(rxBuffer.bytes[8191] != 0 && (processed == 0)){
 800360e:	4ab9      	ldr	r2, [pc, #740]	; (80038f4 <main+0x450>)
 8003610:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8003614:	5cd3      	ldrb	r3, [r2, r3]
 8003616:	b13b      	cbz	r3, 8003628 <main+0x184>
 8003618:	4bb7      	ldr	r3, [pc, #732]	; (80038f8 <main+0x454>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	b923      	cbnz	r3, 8003628 <main+0x184>
		HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 800361e:	2201      	movs	r2, #1
 8003620:	2102      	movs	r1, #2
 8003622:	48b6      	ldr	r0, [pc, #728]	; (80038fc <main+0x458>)
 8003624:	f000 fe84 	bl	8004330 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003628:	4db5      	ldr	r5, [pc, #724]	; (8003900 <main+0x45c>)
 800362a:	682b      	ldr	r3, [r5, #0]
 800362c:	2600      	movs	r6, #0
 800362e:	625e      	str	r6, [r3, #36]	; 0x24
	complex_inst_absolute(&rxBuffer.number[0], &instAbs.number[0]);
 8003630:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8003910 <main+0x46c>
 8003634:	4faf      	ldr	r7, [pc, #700]	; (80038f4 <main+0x450>)
 8003636:	4641      	mov	r1, r8
 8003638:	4638      	mov	r0, r7
 800363a:	f7fe fc05 	bl	8001e48 <complex_inst_absolute>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 800363e:	682b      	ldr	r3, [r5, #0]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	4cb0      	ldr	r4, [pc, #704]	; (8003904 <main+0x460>)
 8003644:	6023      	str	r3, [r4, #0]
	transmit_array(&instAbs.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter.bytes[0]);
 8003646:	4622      	mov	r2, r4
 8003648:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800364c:	4640      	mov	r0, r8
 800364e:	f7ff fe65 	bl	800331c <transmit_array>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003652:	682b      	ldr	r3, [r5, #0]
 8003654:	625e      	str	r6, [r3, #36]	; 0x24
	inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 8003656:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 8003914 <main+0x470>
 800365a:	4649      	mov	r1, r9
 800365c:	4638      	mov	r0, r7
 800365e:	f7fe fbfb 	bl	8001e58 <inst_phase>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003662:	682b      	ldr	r3, [r5, #0]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	6023      	str	r3, [r4, #0]
	transmit_array(&instPhase.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter.bytes[0]);
 8003668:	4622      	mov	r2, r4
 800366a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800366e:	4648      	mov	r0, r9
 8003670:	f7ff fe54 	bl	800331c <transmit_array>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003674:	682b      	ldr	r3, [r5, #0]
 8003676:	625e      	str	r6, [r3, #36]	; 0x24
	inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 8003678:	4649      	mov	r1, r9
 800367a:	4638      	mov	r0, r7
 800367c:	f7fe fbec 	bl	8001e58 <inst_phase>
	unwrap(&instPhase.number[0], &instUnwrappedPhase.number[0]);
 8003680:	f8df a294 	ldr.w	sl, [pc, #660]	; 8003918 <main+0x474>
 8003684:	4651      	mov	r1, sl
 8003686:	4648      	mov	r0, r9
 8003688:	f7fe fc0a 	bl	8001ea0 <unwrap>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 800368c:	682b      	ldr	r3, [r5, #0]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	6023      	str	r3, [r4, #0]
	transmit_array(&instUnwrappedPhase.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter.bytes[0]);
 8003692:	4622      	mov	r2, r4
 8003694:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003698:	4650      	mov	r0, sl
 800369a:	f7ff fe3f 	bl	800331c <transmit_array>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800369e:	682b      	ldr	r3, [r5, #0]
 80036a0:	625e      	str	r6, [r3, #36]	; 0x24
	inst_frequency(&rxBuffer.number[0], &instFreq.number[0]);
 80036a2:	f8df b278 	ldr.w	fp, [pc, #632]	; 800391c <main+0x478>
 80036a6:	4659      	mov	r1, fp
 80036a8:	4638      	mov	r0, r7
 80036aa:	f7fe fc59 	bl	8001f60 <inst_frequency>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80036ae:	682b      	ldr	r3, [r5, #0]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	6023      	str	r3, [r4, #0]
	transmit_array(&instFreq.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter.bytes[0]);
 80036b4:	4622      	mov	r2, r4
 80036b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036ba:	4658      	mov	r0, fp
 80036bc:	f7ff fe2e 	bl	800331c <transmit_array>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80036c0:	682b      	ldr	r3, [r5, #0]
 80036c2:	625e      	str	r6, [r3, #36]	; 0x24
	inst_centralized_normalized_absolute(&rxBuffer.number[0], &instCNAbs.number[0]);
 80036c4:	f8df a258 	ldr.w	sl, [pc, #600]	; 8003920 <main+0x47c>
 80036c8:	4651      	mov	r1, sl
 80036ca:	4638      	mov	r0, r7
 80036cc:	f7fe fc8e 	bl	8001fec <inst_centralized_normalized_absolute>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80036d0:	682b      	ldr	r3, [r5, #0]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	6023      	str	r3, [r4, #0]
	transmit_array(&instCNAbs.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter.bytes[0]);
 80036d6:	4622      	mov	r2, r4
 80036d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036dc:	4650      	mov	r0, sl
 80036de:	f7ff fe1d 	bl	800331c <transmit_array>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80036e2:	682b      	ldr	r3, [r5, #0]
 80036e4:	625e      	str	r6, [r3, #36]	; 0x24
	std_dev(&instPhase.number[0], &ft0.number);
 80036e6:	4988      	ldr	r1, [pc, #544]	; (8003908 <main+0x464>)
 80036e8:	4648      	mov	r0, r9
 80036ea:	f7fe fcd9 	bl	80020a0 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80036ee:	682b      	ldr	r3, [r5, #0]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	6023      	str	r3, [r4, #0]
	transmit_features(&ft0.bytes[0], &counter.bytes[0]);
 80036f4:	4621      	mov	r1, r4
 80036f6:	4884      	ldr	r0, [pc, #528]	; (8003908 <main+0x464>)
 80036f8:	f7ff fdbe 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80036fc:	682b      	ldr	r3, [r5, #0]
 80036fe:	625e      	str	r6, [r3, #36]	; 0x24
	inst_absolute(&instPhase.number[0], &instAbsPhase.number[0]);
 8003700:	4982      	ldr	r1, [pc, #520]	; (800390c <main+0x468>)
 8003702:	4648      	mov	r0, r9
 8003704:	f7fe fb98 	bl	8001e38 <inst_absolute>
	std_dev(&instAbsPhase.number[0], &ft1.number);
 8003708:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8003924 <main+0x480>
 800370c:	4649      	mov	r1, r9
 800370e:	487f      	ldr	r0, [pc, #508]	; (800390c <main+0x468>)
 8003710:	f7fe fcc6 	bl	80020a0 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003714:	682b      	ldr	r3, [r5, #0]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	6023      	str	r3, [r4, #0]
	transmit_features(&ft1.bytes[0], &counter.bytes[0]);
 800371a:	4621      	mov	r1, r4
 800371c:	4648      	mov	r0, r9
 800371e:	f7ff fdab 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003722:	682b      	ldr	r3, [r5, #0]
 8003724:	625e      	str	r6, [r3, #36]	; 0x24
	std_dev(&instFreq.number[0], &ft2.number);
 8003726:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8003928 <main+0x484>
 800372a:	4649      	mov	r1, r9
 800372c:	4658      	mov	r0, fp
 800372e:	f7fe fcb7 	bl	80020a0 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003732:	682b      	ldr	r3, [r5, #0]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	6023      	str	r3, [r4, #0]
	transmit_features(&ft2.bytes[0], &counter.bytes[0]);
 8003738:	4621      	mov	r1, r4
 800373a:	4648      	mov	r0, r9
 800373c:	f7ff fd9c 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003740:	682b      	ldr	r3, [r5, #0]
 8003742:	625e      	str	r6, [r3, #36]	; 0x24
	inst_absolute(&instFreq.number[0], &instAbsFreq.number[0]);
 8003744:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 800392c <main+0x488>
 8003748:	4649      	mov	r1, r9
 800374a:	4658      	mov	r0, fp
 800374c:	f7fe fb74 	bl	8001e38 <inst_absolute>
	std_dev(&instAbsFreq.number[0], &ft3.number);
 8003750:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 8003930 <main+0x48c>
 8003754:	4659      	mov	r1, fp
 8003756:	4648      	mov	r0, r9
 8003758:	f7fe fca2 	bl	80020a0 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 800375c:	682b      	ldr	r3, [r5, #0]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	6023      	str	r3, [r4, #0]
	transmit_features(&ft3.bytes[0], &counter.bytes[0]);
 8003762:	4621      	mov	r1, r4
 8003764:	4658      	mov	r0, fp
 8003766:	f7ff fd87 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800376a:	682b      	ldr	r3, [r5, #0]
 800376c:	625e      	str	r6, [r3, #36]	; 0x24
	std_dev(&instCNAbs.number[0], &ft4.number);
 800376e:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 8003934 <main+0x490>
 8003772:	4659      	mov	r1, fp
 8003774:	4650      	mov	r0, sl
 8003776:	f7fe fc93 	bl	80020a0 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 800377a:	682b      	ldr	r3, [r5, #0]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	6023      	str	r3, [r4, #0]
	transmit_features(&ft4.bytes[0], &counter.bytes[0]);
 8003780:	4621      	mov	r1, r4
 8003782:	4658      	mov	r0, fp
 8003784:	f7ff fd78 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003788:	682b      	ldr	r3, [r5, #0]
 800378a:	625e      	str	r6, [r3, #36]	; 0x24
	inst_absolute(&instCNAbs.number[0], &instAbsCNAbs.number[0]);
 800378c:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 8003938 <main+0x494>
 8003790:	4659      	mov	r1, fp
 8003792:	4650      	mov	r0, sl
 8003794:	f7fe fb50 	bl	8001e38 <inst_absolute>
	std_dev(&instAbsCNAbs.number[0], &ft5.number);
 8003798:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 800393c <main+0x498>
 800379c:	4651      	mov	r1, sl
 800379e:	4658      	mov	r0, fp
 80037a0:	f7fe fc7e 	bl	80020a0 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	6023      	str	r3, [r4, #0]
	transmit_features(&ft5.bytes[0], &counter.bytes[0]);
 80037aa:	4621      	mov	r1, r4
 80037ac:	4650      	mov	r0, sl
 80037ae:	f7ff fd63 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80037b2:	682b      	ldr	r3, [r5, #0]
 80037b4:	625e      	str	r6, [r3, #36]	; 0x24
	mean_of_signal_magnitude(&instAbs.number[0], &ft6.number);
 80037b6:	f8df a188 	ldr.w	sl, [pc, #392]	; 8003940 <main+0x49c>
 80037ba:	4651      	mov	r1, sl
 80037bc:	4640      	mov	r0, r8
 80037be:	f7fe fc79 	bl	80020b4 <mean_of_signal_magnitude>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80037c2:	682b      	ldr	r3, [r5, #0]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	6023      	str	r3, [r4, #0]
	transmit_features(&ft6.bytes[0], &counter.bytes[0]);
 80037c8:	4621      	mov	r1, r4
 80037ca:	4650      	mov	r0, sl
 80037cc:	f7ff fd54 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	625e      	str	r6, [r3, #36]	; 0x24
	squared_mean_of_signal_magnitude(&instAbs.number[0], &ft7.number);
 80037d4:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8003944 <main+0x4a0>
 80037d8:	4651      	mov	r1, sl
 80037da:	4640      	mov	r0, r8
 80037dc:	f7fe fc74 	bl	80020c8 <squared_mean_of_signal_magnitude>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80037e0:	682b      	ldr	r3, [r5, #0]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	6023      	str	r3, [r4, #0]
	transmit_features(&ft7.bytes[0], &counter.bytes[0]);
 80037e6:	4621      	mov	r1, r4
 80037e8:	4650      	mov	r0, sl
 80037ea:	f7ff fd45 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80037ee:	682b      	ldr	r3, [r5, #0]
 80037f0:	625e      	str	r6, [r3, #36]	; 0x24
	normalized_sqrt_of_sum_of_amp(&instAbs.number[0], &ft8.number);
 80037f2:	f8df a154 	ldr.w	sl, [pc, #340]	; 8003948 <main+0x4a4>
 80037f6:	4651      	mov	r1, sl
 80037f8:	4640      	mov	r0, r8
 80037fa:	f7fe fc77 	bl	80020ec <normalized_sqrt_of_sum_of_amp>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80037fe:	682b      	ldr	r3, [r5, #0]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	6023      	str	r3, [r4, #0]
	transmit_features(&ft8.bytes[0], &counter.bytes[0]);
 8003804:	4621      	mov	r1, r4
 8003806:	4650      	mov	r0, sl
 8003808:	f7ff fd36 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	625e      	str	r6, [r3, #36]	; 0x24
	ratio_iq(&rxBuffer.number[0], &ft9.number);
 8003810:	f8df a138 	ldr.w	sl, [pc, #312]	; 800394c <main+0x4a8>
 8003814:	4651      	mov	r1, sl
 8003816:	4638      	mov	r0, r7
 8003818:	f7fe fc88 	bl	800212c <ratio_iq>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 800381c:	682b      	ldr	r3, [r5, #0]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	6023      	str	r3, [r4, #0]
	transmit_features(&ft9.bytes[0], &counter.bytes[0]);
 8003822:	4621      	mov	r1, r4
 8003824:	4650      	mov	r0, sl
 8003826:	f7ff fd27 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800382a:	682b      	ldr	r3, [r5, #0]
 800382c:	625e      	str	r6, [r3, #36]	; 0x24
	gmax(&rxBuffer.number[0], &ft10.number);
 800382e:	f8df a120 	ldr.w	sl, [pc, #288]	; 8003950 <main+0x4ac>
 8003832:	4651      	mov	r1, sl
 8003834:	4638      	mov	r0, r7
 8003836:	f7fe fc9f 	bl	8002178 <gmax>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 800383a:	682b      	ldr	r3, [r5, #0]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	6023      	str	r3, [r4, #0]
	transmit_features(&ft10.bytes[0], &counter.bytes[0]);
 8003840:	4621      	mov	r1, r4
 8003842:	4650      	mov	r0, sl
 8003844:	f7ff fd18 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	625e      	str	r6, [r3, #36]	; 0x24
	kurtosis_of_abs_amplitude(&instAbs.number[0], &ft11.number, frameSize);
 800384c:	f8df a104 	ldr.w	sl, [pc, #260]	; 8003954 <main+0x4b0>
 8003850:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003854:	4651      	mov	r1, sl
 8003856:	4640      	mov	r0, r8
 8003858:	f7fe fcdc 	bl	8002214 <kurtosis_of_abs_amplitude>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	6023      	str	r3, [r4, #0]
	transmit_features(&ft11.bytes[0], &counter.bytes[0]);
 8003862:	4621      	mov	r1, r4
 8003864:	4650      	mov	r0, sl
 8003866:	f7ff fd07 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800386a:	682b      	ldr	r3, [r5, #0]
 800386c:	625e      	str	r6, [r3, #36]	; 0x24
	kurtosis_of_abs_freq(&instAbsFreq.number[0], &ft12.number, frameSize - 1);
 800386e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8003958 <main+0x4b4>
 8003872:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003876:	4641      	mov	r1, r8
 8003878:	4648      	mov	r0, r9
 800387a:	f7fe fd31 	bl	80022e0 <kurtosis_of_abs_freq>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 800387e:	682b      	ldr	r3, [r5, #0]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	6023      	str	r3, [r4, #0]
	transmit_features(&ft12.bytes[0], &counter.bytes[0]);
 8003884:	4621      	mov	r1, r4
 8003886:	4640      	mov	r0, r8
 8003888:	f7ff fcf6 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800388c:	682b      	ldr	r3, [r5, #0]
 800388e:	625e      	str	r6, [r3, #36]	; 0x24
	cumulant_20(&rxBuffer.number[0], &ft13.number);
 8003890:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800395c <main+0x4b8>
 8003894:	4641      	mov	r1, r8
 8003896:	4638      	mov	r0, r7
 8003898:	f7ff fa16 	bl	8002cc8 <cumulant_20>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 800389c:	682b      	ldr	r3, [r5, #0]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	6023      	str	r3, [r4, #0]
	transmit_features(&ft13.bytes[0], &counter.bytes[0]);
 80038a2:	4621      	mov	r1, r4
 80038a4:	4640      	mov	r0, r8
 80038a6:	f7ff fce7 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80038aa:	682b      	ldr	r3, [r5, #0]
 80038ac:	625e      	str	r6, [r3, #36]	; 0x24
	cumulant_21(&rxBuffer.number[0], &ft14.number);
 80038ae:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8003960 <main+0x4bc>
 80038b2:	4641      	mov	r1, r8
 80038b4:	4638      	mov	r0, r7
 80038b6:	f7ff fa0b 	bl	8002cd0 <cumulant_21>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80038ba:	682b      	ldr	r3, [r5, #0]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	6023      	str	r3, [r4, #0]
	transmit_features(&ft14.bytes[0], &counter.bytes[0]);
 80038c0:	4621      	mov	r1, r4
 80038c2:	4640      	mov	r0, r8
 80038c4:	f7ff fcd8 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80038c8:	682b      	ldr	r3, [r5, #0]
 80038ca:	625e      	str	r6, [r3, #36]	; 0x24
	cumulant_40(&rxBuffer.number[0], &ft15.number);
 80038cc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8003964 <main+0x4c0>
 80038d0:	4641      	mov	r1, r8
 80038d2:	4638      	mov	r0, r7
 80038d4:	f7ff fa00 	bl	8002cd8 <cumulant_40>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80038d8:	682b      	ldr	r3, [r5, #0]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	6023      	str	r3, [r4, #0]
	transmit_features(&ft15.bytes[0], &counter.bytes[0]);
 80038de:	4621      	mov	r1, r4
 80038e0:	4640      	mov	r0, r8
 80038e2:	f7ff fcc9 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80038e6:	682b      	ldr	r3, [r5, #0]
 80038e8:	e03e      	b.n	8003968 <main+0x4c4>
 80038ea:	bf00      	nop
 80038ec:	2400147c 	.word	0x2400147c
 80038f0:	58020400 	.word	0x58020400
 80038f4:	24011484 	.word	0x24011484
 80038f8:	24011480 	.word	0x24011480
 80038fc:	58021000 	.word	0x58021000
 8003900:	2401551c 	.word	0x2401551c
 8003904:	240154f8 	.word	0x240154f8
 8003908:	240154d8 	.word	0x240154d8
 800390c:	24007480 	.word	0x24007480
 8003910:	24001480 	.word	0x24001480
 8003914:	2400d480 	.word	0x2400d480
 8003918:	2400f480 	.word	0x2400f480
 800391c:	2400b480 	.word	0x2400b480
 8003920:	24009480 	.word	0x24009480
 8003924:	24015504 	.word	0x24015504
 8003928:	240154dc 	.word	0x240154dc
 800392c:	24005480 	.word	0x24005480
 8003930:	240154c0 	.word	0x240154c0
 8003934:	240154bc 	.word	0x240154bc
 8003938:	24003480 	.word	0x24003480
 800393c:	240154cc 	.word	0x240154cc
 8003940:	24015518 	.word	0x24015518
 8003944:	240154e4 	.word	0x240154e4
 8003948:	24015500 	.word	0x24015500
 800394c:	240154f0 	.word	0x240154f0
 8003950:	240154c4 	.word	0x240154c4
 8003954:	240154ec 	.word	0x240154ec
 8003958:	2401550c 	.word	0x2401550c
 800395c:	240154c8 	.word	0x240154c8
 8003960:	240154d4 	.word	0x240154d4
 8003964:	240154f4 	.word	0x240154f4
 8003968:	625e      	str	r6, [r3, #36]	; 0x24
	cumulant_41(&rxBuffer.number[0], &ft16.number);
 800396a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8003a4c <main+0x5a8>
 800396e:	4641      	mov	r1, r8
 8003970:	4638      	mov	r0, r7
 8003972:	f7ff f9ce 	bl	8002d12 <cumulant_41>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003976:	682b      	ldr	r3, [r5, #0]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	6023      	str	r3, [r4, #0]
	transmit_features(&ft16.bytes[0], &counter.bytes[0]);
 800397c:	4621      	mov	r1, r4
 800397e:	4640      	mov	r0, r8
 8003980:	f7ff fc7a 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003984:	682b      	ldr	r3, [r5, #0]
 8003986:	625e      	str	r6, [r3, #36]	; 0x24
	cumulant_42(&rxBuffer.number[0], &ft17.number);
 8003988:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8003a50 <main+0x5ac>
 800398c:	4641      	mov	r1, r8
 800398e:	4638      	mov	r0, r7
 8003990:	f7ff f9e2 	bl	8002d58 <cumulant_42>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003994:	682b      	ldr	r3, [r5, #0]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	6023      	str	r3, [r4, #0]
	transmit_features(&ft17.bytes[0], &counter.bytes[0]);
 800399a:	4621      	mov	r1, r4
 800399c:	4640      	mov	r0, r8
 800399e:	f7ff fc6b 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80039a2:	682b      	ldr	r3, [r5, #0]
 80039a4:	625e      	str	r6, [r3, #36]	; 0x24
	cumulant_60(&rxBuffer.number[0], &ft18.number);
 80039a6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8003a54 <main+0x5b0>
 80039aa:	4641      	mov	r1, r8
 80039ac:	4638      	mov	r0, r7
 80039ae:	f7ff f9f8 	bl	8002da2 <cumulant_60>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80039b2:	682b      	ldr	r3, [r5, #0]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	6023      	str	r3, [r4, #0]
	transmit_features(&ft18.bytes[0], &counter.bytes[0]);
 80039b8:	4621      	mov	r1, r4
 80039ba:	4640      	mov	r0, r8
 80039bc:	f7ff fc5c 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80039c0:	682b      	ldr	r3, [r5, #0]
 80039c2:	625e      	str	r6, [r3, #36]	; 0x24
	cumulant_61(&rxBuffer.number[0], &ft19.number);
 80039c4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8003a58 <main+0x5b4>
 80039c8:	4641      	mov	r1, r8
 80039ca:	4638      	mov	r0, r7
 80039cc:	f7ff fa16 	bl	8002dfc <cumulant_61>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80039d0:	682b      	ldr	r3, [r5, #0]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	6023      	str	r3, [r4, #0]
	transmit_features(&ft19.bytes[0], &counter.bytes[0]);
 80039d6:	4621      	mov	r1, r4
 80039d8:	4640      	mov	r0, r8
 80039da:	f7ff fc4d 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80039de:	682b      	ldr	r3, [r5, #0]
 80039e0:	625e      	str	r6, [r3, #36]	; 0x24
	cumulant_62(&rxBuffer.number[0], &ft20.number);
 80039e2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8003a5c <main+0x5b8>
 80039e6:	4641      	mov	r1, r8
 80039e8:	4638      	mov	r0, r7
 80039ea:	f7ff fa48 	bl	8002e7e <cumulant_62>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80039ee:	682b      	ldr	r3, [r5, #0]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	6023      	str	r3, [r4, #0]
	transmit_features(&ft20.bytes[0], &counter.bytes[0]);
 80039f4:	4621      	mov	r1, r4
 80039f6:	4640      	mov	r0, r8
 80039f8:	f7ff fc3e 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80039fc:	682b      	ldr	r3, [r5, #0]
 80039fe:	625e      	str	r6, [r3, #36]	; 0x24
	cumulant_63(&rxBuffer.number[0], &ft21.number);
 8003a00:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8003a60 <main+0x5bc>
 8003a04:	4641      	mov	r1, r8
 8003a06:	4638      	mov	r0, r7
 8003a08:	f7ff fa90 	bl	8002f2c <cumulant_63>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003a0c:	682b      	ldr	r3, [r5, #0]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	6023      	str	r3, [r4, #0]
	transmit_features(&ft21.bytes[0], &counter.bytes[0]);
 8003a12:	4621      	mov	r1, r4
 8003a14:	4640      	mov	r0, r8
 8003a16:	f7ff fc2f 	bl	8003278 <transmit_features>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003a1a:	682b      	ldr	r3, [r5, #0]
 8003a1c:	625e      	str	r6, [r3, #36]	; 0x24
	merge_features(&input_vector[0]);
 8003a1e:	a80c      	add	r0, sp, #48	; 0x30
 8003a20:	f7ff fcd0 	bl	80033c4 <merge_features>
	fully_connected_run(&q15_input_vector[0], &predicted.number);
 8003a24:	4e08      	ldr	r6, [pc, #32]	; (8003a48 <main+0x5a4>)
 8003a26:	4631      	mov	r1, r6
 8003a28:	a801      	add	r0, sp, #4
 8003a2a:	f7fe f977 	bl	8001d1c <fully_connected_run>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003a2e:	682b      	ldr	r3, [r5, #0]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	6023      	str	r3, [r4, #0]
	transmit_features(&predicted.bytes[0], &counter.bytes[0]);
 8003a34:	4621      	mov	r1, r4
 8003a36:	4630      	mov	r0, r6
 8003a38:	f7ff fc1e 	bl	8003278 <transmit_features>
	clear_leds();
 8003a3c:	f7ff fbbe 	bl	80031bc <clear_leds>
		blink_orange_slow();
 8003a40:	f7ff fbec 	bl	800321c <blink_orange_slow>
 8003a44:	e7fc      	b.n	8003a40 <main+0x59c>
 8003a46:	bf00      	nop
 8003a48:	24015514 	.word	0x24015514
 8003a4c:	240154e8 	.word	0x240154e8
 8003a50:	24015508 	.word	0x24015508
 8003a54:	240154e0 	.word	0x240154e0
 8003a58:	240154fc 	.word	0x240154fc
 8003a5c:	24015510 	.word	0x24015510
 8003a60:	240154d0 	.word	0x240154d0

08003a64 <HAL_UART_TxCpltCallback>:
void quantize_features(float32_t in[], q15_t out[]){

}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart3){
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8003a64:	4b01      	ldr	r3, [pc, #4]	; (8003a6c <HAL_UART_TxCpltCallback+0x8>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	701a      	strb	r2, [r3, #0]
}
 8003a6a:	4770      	bx	lr
 8003a6c:	2400147c 	.word	0x2400147c

08003a70 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart3){
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8003a70:	4b01      	ldr	r3, [pc, #4]	; (8003a78 <HAL_UART_RxCpltCallback+0x8>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]
}
 8003a76:	4770      	bx	lr
 8003a78:	2400147c 	.word	0x2400147c

08003a7c <Error_Handler>:
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003a7c:	4770      	bx	lr
	...

08003a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a80:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a82:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <HAL_MspInit+0x20>)
 8003a84:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003a88:	f042 0202 	orr.w	r2, r2, #2
 8003a8c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003a90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a9c:	b002      	add	sp, #8
 8003a9e:	4770      	bx	lr
 8003aa0:	58024400 	.word	0x58024400

08003aa4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003aa4:	4770      	bx	lr

08003aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003aa6:	e7fe      	b.n	8003aa6 <HardFault_Handler>

08003aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003aa8:	e7fe      	b.n	8003aa8 <MemManage_Handler>

08003aaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aaa:	e7fe      	b.n	8003aaa <BusFault_Handler>

08003aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aac:	e7fe      	b.n	8003aac <UsageFault_Handler>

08003aae <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003aae:	4770      	bx	lr

08003ab0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ab0:	4770      	bx	lr

08003ab2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ab2:	4770      	bx	lr

08003ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ab4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ab6:	f000 f96d 	bl	8003d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003aba:	bd08      	pop	{r3, pc}

08003abc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003abc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003abe:	4802      	ldr	r0, [pc, #8]	; (8003ac8 <USART3_IRQHandler+0xc>)
 8003ac0:	f002 fea2 	bl	8006808 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003ac4:	bd08      	pop	{r3, pc}
 8003ac6:	bf00      	nop
 8003ac8:	24015568 	.word	0x24015568

08003acc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003acc:	b508      	push	{r3, lr}
 8003ace:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003ad0:	4a0b      	ldr	r2, [pc, #44]	; (8003b00 <_sbrk+0x34>)
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	b142      	cbz	r2, 8003ae8 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	; (8003b00 <_sbrk+0x34>)
 8003ad8:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003ada:	4403      	add	r3, r0
 8003adc:	466a      	mov	r2, sp
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d806      	bhi.n	8003af0 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8003ae2:	4a07      	ldr	r2, [pc, #28]	; (8003b00 <_sbrk+0x34>)
 8003ae4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8003ae6:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8003ae8:	4a05      	ldr	r2, [pc, #20]	; (8003b00 <_sbrk+0x34>)
 8003aea:	4906      	ldr	r1, [pc, #24]	; (8003b04 <_sbrk+0x38>)
 8003aec:	6011      	str	r1, [r2, #0]
 8003aee:	e7f2      	b.n	8003ad6 <_sbrk+0xa>
		errno = ENOMEM;
 8003af0:	f003 fc62 	bl	80073b8 <__errno>
 8003af4:	230c      	movs	r3, #12
 8003af6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003af8:	f04f 30ff 	mov.w	r0, #4294967295
 8003afc:	e7f3      	b.n	8003ae6 <_sbrk+0x1a>
 8003afe:	bf00      	nop
 8003b00:	24015484 	.word	0x24015484
 8003b04:	24015608 	.word	0x24015608

08003b08 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003b08:	b500      	push	{lr}
 8003b0a:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	9304      	str	r3, [sp, #16]
 8003b10:	9305      	str	r3, [sp, #20]
 8003b12:	9306      	str	r3, [sp, #24]
 8003b14:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b16:	9301      	str	r3, [sp, #4]
 8003b18:	9302      	str	r3, [sp, #8]
 8003b1a:	9303      	str	r3, [sp, #12]

  htim2.Instance = TIM2;
 8003b1c:	4815      	ldr	r0, [pc, #84]	; (8003b74 <MX_TIM2_Init+0x6c>)
 8003b1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b22:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8003b24:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b26:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 8003b28:	f04f 32ff 	mov.w	r2, #4294967295
 8003b2c:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b2e:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b30:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b32:	f002 fa95 	bl	8006060 <HAL_TIM_Base_Init>
 8003b36:	b998      	cbnz	r0, 8003b60 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b38:	a908      	add	r1, sp, #32
 8003b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b3e:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b42:	480c      	ldr	r0, [pc, #48]	; (8003b74 <MX_TIM2_Init+0x6c>)
 8003b44:	f002 fac8 	bl	80060d8 <HAL_TIM_ConfigClockSource>
 8003b48:	b968      	cbnz	r0, 8003b66 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b4e:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b50:	a901      	add	r1, sp, #4
 8003b52:	4808      	ldr	r0, [pc, #32]	; (8003b74 <MX_TIM2_Init+0x6c>)
 8003b54:	f002 fb40 	bl	80061d8 <HAL_TIMEx_MasterConfigSynchronization>
 8003b58:	b940      	cbnz	r0, 8003b6c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
  }

}
 8003b5a:	b009      	add	sp, #36	; 0x24
 8003b5c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003b60:	f7ff ff8c 	bl	8003a7c <Error_Handler>
 8003b64:	e7e8      	b.n	8003b38 <MX_TIM2_Init+0x30>
    Error_Handler();
 8003b66:	f7ff ff89 	bl	8003a7c <Error_Handler>
 8003b6a:	e7ee      	b.n	8003b4a <MX_TIM2_Init+0x42>
    Error_Handler();
 8003b6c:	f7ff ff86 	bl	8003a7c <Error_Handler>
}
 8003b70:	e7f3      	b.n	8003b5a <MX_TIM2_Init+0x52>
 8003b72:	bf00      	nop
 8003b74:	2401551c 	.word	0x2401551c

08003b78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8003b78:	6803      	ldr	r3, [r0, #0]
 8003b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7e:	d000      	beq.n	8003b82 <HAL_TIM_Base_MspInit+0xa>
 8003b80:	4770      	bx	lr
{
 8003b82:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b84:	4b07      	ldr	r3, [pc, #28]	; (8003ba4 <HAL_TIM_Base_MspInit+0x2c>)
 8003b86:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003b92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003b9e:	b002      	add	sp, #8
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	58024400 	.word	0x58024400

08003ba8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003ba8:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8003baa:	4817      	ldr	r0, [pc, #92]	; (8003c08 <MX_USART3_UART_Init+0x60>)
 8003bac:	4b17      	ldr	r3, [pc, #92]	; (8003c0c <MX_USART3_UART_Init+0x64>)
 8003bae:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8003bb0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003bb4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003bba:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003bbc:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003bbe:	220c      	movs	r2, #12
 8003bc0:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bc2:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bc4:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bc6:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003bc8:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bca:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003bcc:	f003 fb1b 	bl	8007206 <HAL_UART_Init>
 8003bd0:	b970      	cbnz	r0, 8003bf0 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	480c      	ldr	r0, [pc, #48]	; (8003c08 <MX_USART3_UART_Init+0x60>)
 8003bd6:	f003 fba5 	bl	8007324 <HAL_UARTEx_SetTxFifoThreshold>
 8003bda:	b960      	cbnz	r0, 8003bf6 <MX_USART3_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bdc:	2100      	movs	r1, #0
 8003bde:	480a      	ldr	r0, [pc, #40]	; (8003c08 <MX_USART3_UART_Init+0x60>)
 8003be0:	f003 fbc5 	bl	800736e <HAL_UARTEx_SetRxFifoThreshold>
 8003be4:	b950      	cbnz	r0, 8003bfc <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003be6:	4808      	ldr	r0, [pc, #32]	; (8003c08 <MX_USART3_UART_Init+0x60>)
 8003be8:	f003 fb7d 	bl	80072e6 <HAL_UARTEx_DisableFifoMode>
 8003bec:	b948      	cbnz	r0, 8003c02 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
  }

}
 8003bee:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003bf0:	f7ff ff44 	bl	8003a7c <Error_Handler>
 8003bf4:	e7ed      	b.n	8003bd2 <MX_USART3_UART_Init+0x2a>
    Error_Handler();
 8003bf6:	f7ff ff41 	bl	8003a7c <Error_Handler>
 8003bfa:	e7ef      	b.n	8003bdc <MX_USART3_UART_Init+0x34>
    Error_Handler();
 8003bfc:	f7ff ff3e 	bl	8003a7c <Error_Handler>
 8003c00:	e7f1      	b.n	8003be6 <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 8003c02:	f7ff ff3b 	bl	8003a7c <Error_Handler>
}
 8003c06:	e7f2      	b.n	8003bee <MX_USART3_UART_Init+0x46>
 8003c08:	24015568 	.word	0x24015568
 8003c0c:	40004800 	.word	0x40004800

08003c10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c10:	b500      	push	{lr}
 8003c12:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c14:	2300      	movs	r3, #0
 8003c16:	9303      	str	r3, [sp, #12]
 8003c18:	9304      	str	r3, [sp, #16]
 8003c1a:	9305      	str	r3, [sp, #20]
 8003c1c:	9306      	str	r3, [sp, #24]
 8003c1e:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART3)
 8003c20:	6802      	ldr	r2, [r0, #0]
 8003c22:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <HAL_UART_MspInit+0x78>)
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d002      	beq.n	8003c2e <HAL_UART_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003c28:	b009      	add	sp, #36	; 0x24
 8003c2a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c2e:	4b17      	ldr	r3, [pc, #92]	; (8003c8c <HAL_UART_MspInit+0x7c>)
 8003c30:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003c34:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003c38:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003c3c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003c40:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003c44:	9201      	str	r2, [sp, #4]
 8003c46:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003c4c:	f042 0208 	orr.w	r2, r2, #8
 8003c50:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	9302      	str	r3, [sp, #8]
 8003c5e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c64:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c66:	2302      	movs	r3, #2
 8003c68:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c6a:	2307      	movs	r3, #7
 8003c6c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c6e:	a903      	add	r1, sp, #12
 8003c70:	4807      	ldr	r0, [pc, #28]	; (8003c90 <HAL_UART_MspInit+0x80>)
 8003c72:	f000 fa6d 	bl	8004150 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003c76:	2200      	movs	r2, #0
 8003c78:	4611      	mov	r1, r2
 8003c7a:	2027      	movs	r0, #39	; 0x27
 8003c7c:	f000 f8c8 	bl	8003e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003c80:	2027      	movs	r0, #39	; 0x27
 8003c82:	f000 f8f7 	bl	8003e74 <HAL_NVIC_EnableIRQ>
}
 8003c86:	e7cf      	b.n	8003c28 <HAL_UART_MspInit+0x18>
 8003c88:	40004800 	.word	0x40004800
 8003c8c:	58024400 	.word	0x58024400
 8003c90:	58020c00 	.word	0x58020c00

08003c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ccc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c9a:	e003      	b.n	8003ca4 <LoopCopyDataInit>

08003c9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ca0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ca2:	3104      	adds	r1, #4

08003ca4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ca4:	480b      	ldr	r0, [pc, #44]	; (8003cd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ca8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003caa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003cac:	d3f6      	bcc.n	8003c9c <CopyDataInit>
  ldr  r2, =_sbss
 8003cae:	4a0b      	ldr	r2, [pc, #44]	; (8003cdc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003cb0:	e002      	b.n	8003cb8 <LoopFillZerobss>

08003cb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003cb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003cb4:	f842 3b04 	str.w	r3, [r2], #4

08003cb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003cb8:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003cba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003cbc:	d3f9      	bcc.n	8003cb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003cbe:	f7fc fd3b 	bl	8000738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cc2:	f003 fb7f 	bl	80073c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cc6:	f7ff fbed 	bl	80034a4 <main>
  bx  lr    
 8003cca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ccc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003cd0:	0800e238 	.word	0x0800e238
  ldr  r0, =_sdata
 8003cd4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8003cd8:	24000858 	.word	0x24000858
  ldr  r2, =_sbss
 8003cdc:	24000858 	.word	0x24000858
  ldr  r3, = _ebss
 8003ce0:	24015608 	.word	0x24015608

08003ce4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ce4:	e7fe      	b.n	8003ce4 <ADC3_IRQHandler>
	...

08003ce8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003ce8:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <HAL_InitTick+0x44>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	b90b      	cbnz	r3, 8003cf2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8003cee:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003cf0:	4770      	bx	lr
{
 8003cf2:	b510      	push	{r4, lr}
 8003cf4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003cf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cfe:	4a0c      	ldr	r2, [pc, #48]	; (8003d30 <HAL_InitTick+0x48>)
 8003d00:	6810      	ldr	r0, [r2, #0]
 8003d02:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d06:	f000 f8c3 	bl	8003e90 <HAL_SYSTICK_Config>
 8003d0a:	b968      	cbnz	r0, 8003d28 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d0c:	2c0f      	cmp	r4, #15
 8003d0e:	d901      	bls.n	8003d14 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8003d10:	2001      	movs	r0, #1
 8003d12:	e00a      	b.n	8003d2a <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d14:	2200      	movs	r2, #0
 8003d16:	4621      	mov	r1, r4
 8003d18:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1c:	f000 f878 	bl	8003e10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <HAL_InitTick+0x4c>)
 8003d22:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8003d24:	2000      	movs	r0, #0
 8003d26:	e000      	b.n	8003d2a <HAL_InitTick+0x42>
      return HAL_ERROR;
 8003d28:	2001      	movs	r0, #1
}
 8003d2a:	bd10      	pop	{r4, pc}
 8003d2c:	24000008 	.word	0x24000008
 8003d30:	24000000 	.word	0x24000000
 8003d34:	2400000c 	.word	0x2400000c

08003d38 <HAL_Init>:
{
 8003d38:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d3a:	2003      	movs	r0, #3
 8003d3c:	f000 f856 	bl	8003dec <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d40:	f000 fe82 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 8003d44:	490f      	ldr	r1, [pc, #60]	; (8003d84 <HAL_Init+0x4c>)
 8003d46:	698b      	ldr	r3, [r1, #24]
 8003d48:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003d4c:	4a0e      	ldr	r2, [pc, #56]	; (8003d88 <HAL_Init+0x50>)
 8003d4e:	5cd3      	ldrb	r3, [r2, r3]
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d56:	698b      	ldr	r3, [r1, #24]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	5cd3      	ldrb	r3, [r2, r3]
 8003d5e:	f003 031f 	and.w	r3, r3, #31
 8003d62:	fa20 f303 	lsr.w	r3, r0, r3
 8003d66:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <HAL_Init+0x54>)
 8003d68:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8003d6a:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <HAL_Init+0x58>)
 8003d6c:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d6e:	2000      	movs	r0, #0
 8003d70:	f7ff ffba 	bl	8003ce8 <HAL_InitTick>
 8003d74:	b110      	cbz	r0, 8003d7c <HAL_Init+0x44>
    return HAL_ERROR;
 8003d76:	2401      	movs	r4, #1
}
 8003d78:	4620      	mov	r0, r4
 8003d7a:	bd10      	pop	{r4, pc}
 8003d7c:	4604      	mov	r4, r0
  HAL_MspInit();
 8003d7e:	f7ff fe7f 	bl	8003a80 <HAL_MspInit>
  return HAL_OK;
 8003d82:	e7f9      	b.n	8003d78 <HAL_Init+0x40>
 8003d84:	58024400 	.word	0x58024400
 8003d88:	08007ff4 	.word	0x08007ff4
 8003d8c:	24000004 	.word	0x24000004
 8003d90:	24000000 	.word	0x24000000

08003d94 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003d94:	4b03      	ldr	r3, [pc, #12]	; (8003da4 <HAL_IncTick+0x10>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	4a03      	ldr	r2, [pc, #12]	; (8003da8 <HAL_IncTick+0x14>)
 8003d9a:	6811      	ldr	r1, [r2, #0]
 8003d9c:	440b      	add	r3, r1
 8003d9e:	6013      	str	r3, [r2, #0]
}
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	24000008 	.word	0x24000008
 8003da8:	240155f4 	.word	0x240155f4

08003dac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003dac:	4b01      	ldr	r3, [pc, #4]	; (8003db4 <HAL_GetTick+0x8>)
 8003dae:	6818      	ldr	r0, [r3, #0]
}
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	240155f4 	.word	0x240155f4

08003db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003db8:	b538      	push	{r3, r4, r5, lr}
 8003dba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003dbc:	f7ff fff6 	bl	8003dac <HAL_GetTick>
 8003dc0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dc2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003dc6:	d002      	beq.n	8003dce <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <HAL_Delay+0x24>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003dce:	f7ff ffed 	bl	8003dac <HAL_GetTick>
 8003dd2:	1b40      	subs	r0, r0, r5
 8003dd4:	42a0      	cmp	r0, r4
 8003dd6:	d3fa      	bcc.n	8003dce <HAL_Delay+0x16>
  {
  }
}
 8003dd8:	bd38      	pop	{r3, r4, r5, pc}
 8003dda:	bf00      	nop
 8003ddc:	24000008 	.word	0x24000008

08003de0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8003de0:	4b01      	ldr	r3, [pc, #4]	; (8003de8 <HAL_GetREVID+0x8>)
 8003de2:	6818      	ldr	r0, [r3, #0]
}
 8003de4:	0c00      	lsrs	r0, r0, #16
 8003de6:	4770      	bx	lr
 8003de8:	5c001000 	.word	0x5c001000

08003dec <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dec:	4906      	ldr	r1, [pc, #24]	; (8003e08 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8003dee:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003df0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003df4:	041b      	lsls	r3, r3, #16
 8003df6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003df8:	0200      	lsls	r0, r0, #8
 8003dfa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dfe:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003e00:	4a02      	ldr	r2, [pc, #8]	; (8003e0c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003e02:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8003e04:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003e06:	4770      	bx	lr
 8003e08:	e000ed00 	.word	0xe000ed00
 8003e0c:	05fa0000 	.word	0x05fa0000

08003e10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e10:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e12:	4b15      	ldr	r3, [pc, #84]	; (8003e68 <HAL_NVIC_SetPriority+0x58>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e1a:	f1c3 0407 	rsb	r4, r3, #7
 8003e1e:	2c04      	cmp	r4, #4
 8003e20:	bf28      	it	cs
 8003e22:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e24:	1d1d      	adds	r5, r3, #4
 8003e26:	2d06      	cmp	r5, #6
 8003e28:	d914      	bls.n	8003e54 <HAL_NVIC_SetPriority+0x44>
 8003e2a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e2c:	f04f 35ff 	mov.w	r5, #4294967295
 8003e30:	fa05 f404 	lsl.w	r4, r5, r4
 8003e34:	ea21 0104 	bic.w	r1, r1, r4
 8003e38:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e3a:	fa05 f303 	lsl.w	r3, r5, r3
 8003e3e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e42:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003e44:	2800      	cmp	r0, #0
 8003e46:	db07      	blt.n	8003e58 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e48:	0109      	lsls	r1, r1, #4
 8003e4a:	b2c9      	uxtb	r1, r1
 8003e4c:	4b07      	ldr	r3, [pc, #28]	; (8003e6c <HAL_NVIC_SetPriority+0x5c>)
 8003e4e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003e50:	bc30      	pop	{r4, r5}
 8003e52:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e54:	2300      	movs	r3, #0
 8003e56:	e7e9      	b.n	8003e2c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e58:	f000 000f 	and.w	r0, r0, #15
 8003e5c:	0109      	lsls	r1, r1, #4
 8003e5e:	b2c9      	uxtb	r1, r1
 8003e60:	4b03      	ldr	r3, [pc, #12]	; (8003e70 <HAL_NVIC_SetPriority+0x60>)
 8003e62:	5419      	strb	r1, [r3, r0]
 8003e64:	e7f4      	b.n	8003e50 <HAL_NVIC_SetPriority+0x40>
 8003e66:	bf00      	nop
 8003e68:	e000ed00 	.word	0xe000ed00
 8003e6c:	e000e400 	.word	0xe000e400
 8003e70:	e000ed14 	.word	0xe000ed14

08003e74 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e74:	2800      	cmp	r0, #0
 8003e76:	db07      	blt.n	8003e88 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e78:	f000 021f 	and.w	r2, r0, #31
 8003e7c:	0940      	lsrs	r0, r0, #5
 8003e7e:	2301      	movs	r3, #1
 8003e80:	4093      	lsls	r3, r2
 8003e82:	4a02      	ldr	r2, [pc, #8]	; (8003e8c <HAL_NVIC_EnableIRQ+0x18>)
 8003e84:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	e000e100 	.word	0xe000e100

08003e90 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e90:	3801      	subs	r0, #1
 8003e92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003e96:	d20a      	bcs.n	8003eae <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e98:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_SYSTICK_Config+0x24>)
 8003e9a:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e9c:	4a06      	ldr	r2, [pc, #24]	; (8003eb8 <HAL_SYSTICK_Config+0x28>)
 8003e9e:	21f0      	movs	r1, #240	; 0xf0
 8003ea0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ea8:	2207      	movs	r2, #7
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003eae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	e000e010 	.word	0xe000e010
 8003eb8:	e000ed00 	.word	0xe000ed00

08003ebc <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	f000 813a 	beq.w	8004136 <HAL_DMA_Abort_IT+0x27a>
{
 8003ec2:	b508      	push	{r3, lr}
 8003ec4:	4602      	mov	r2, r0
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ec6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d003      	beq.n	8003ed8 <HAL_DMA_Abort_IT+0x1c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ed0:	2380      	movs	r3, #128	; 0x80
 8003ed2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8003ed4:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8003ed6:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ed8:	6803      	ldr	r3, [r0, #0]
 8003eda:	4899      	ldr	r0, [pc, #612]	; (8004140 <HAL_DMA_Abort_IT+0x284>)
 8003edc:	4999      	ldr	r1, [pc, #612]	; (8004144 <HAL_DMA_Abort_IT+0x288>)
 8003ede:	428b      	cmp	r3, r1
 8003ee0:	bf18      	it	ne
 8003ee2:	4283      	cmpne	r3, r0
 8003ee4:	bf0c      	ite	eq
 8003ee6:	2101      	moveq	r1, #1
 8003ee8:	2100      	movne	r1, #0
 8003eea:	f000 80e4 	beq.w	80040b6 <HAL_DMA_Abort_IT+0x1fa>
 8003eee:	3030      	adds	r0, #48	; 0x30
 8003ef0:	4283      	cmp	r3, r0
 8003ef2:	f000 80e0 	beq.w	80040b6 <HAL_DMA_Abort_IT+0x1fa>
 8003ef6:	3018      	adds	r0, #24
 8003ef8:	4283      	cmp	r3, r0
 8003efa:	f000 80dc 	beq.w	80040b6 <HAL_DMA_Abort_IT+0x1fa>
 8003efe:	3018      	adds	r0, #24
 8003f00:	4283      	cmp	r3, r0
 8003f02:	f000 80d8 	beq.w	80040b6 <HAL_DMA_Abort_IT+0x1fa>
 8003f06:	3018      	adds	r0, #24
 8003f08:	4283      	cmp	r3, r0
 8003f0a:	f000 80d4 	beq.w	80040b6 <HAL_DMA_Abort_IT+0x1fa>
 8003f0e:	3018      	adds	r0, #24
 8003f10:	4283      	cmp	r3, r0
 8003f12:	f000 80d0 	beq.w	80040b6 <HAL_DMA_Abort_IT+0x1fa>
 8003f16:	3018      	adds	r0, #24
 8003f18:	4283      	cmp	r3, r0
 8003f1a:	f000 80cc 	beq.w	80040b6 <HAL_DMA_Abort_IT+0x1fa>
 8003f1e:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8003f22:	4283      	cmp	r3, r0
 8003f24:	f000 80c7 	beq.w	80040b6 <HAL_DMA_Abort_IT+0x1fa>
 8003f28:	3018      	adds	r0, #24
 8003f2a:	4283      	cmp	r3, r0
 8003f2c:	f000 80c3 	beq.w	80040b6 <HAL_DMA_Abort_IT+0x1fa>
 8003f30:	3018      	adds	r0, #24
 8003f32:	4283      	cmp	r3, r0
 8003f34:	f000 80bf 	beq.w	80040b6 <HAL_DMA_Abort_IT+0x1fa>
 8003f38:	3018      	adds	r0, #24
 8003f3a:	4283      	cmp	r3, r0
 8003f3c:	f000 80bb 	beq.w	80040b6 <HAL_DMA_Abort_IT+0x1fa>
 8003f40:	3018      	adds	r0, #24
 8003f42:	4283      	cmp	r3, r0
 8003f44:	f000 80b7 	beq.w	80040b6 <HAL_DMA_Abort_IT+0x1fa>
 8003f48:	3018      	adds	r0, #24
 8003f4a:	4283      	cmp	r3, r0
 8003f4c:	f000 80b3 	beq.w	80040b6 <HAL_DMA_Abort_IT+0x1fa>
 8003f50:	3018      	adds	r0, #24
 8003f52:	4283      	cmp	r3, r0
 8003f54:	f000 80af 	beq.w	80040b6 <HAL_DMA_Abort_IT+0x1fa>
 8003f58:	3018      	adds	r0, #24
 8003f5a:	4283      	cmp	r3, r0
 8003f5c:	f000 80ab 	beq.w	80040b6 <HAL_DMA_Abort_IT+0x1fa>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003f60:	6819      	ldr	r1, [r3, #0]
 8003f62:	f021 010e 	bic.w	r1, r1, #14
 8003f66:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8003f68:	6813      	ldr	r3, [r2, #0]
 8003f6a:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 8003f6e:	4975      	ldr	r1, [pc, #468]	; (8004144 <HAL_DMA_Abort_IT+0x288>)
 8003f70:	428b      	cmp	r3, r1
 8003f72:	bf18      	it	ne
 8003f74:	4283      	cmpne	r3, r0
 8003f76:	d02b      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0x114>
 8003f78:	4973      	ldr	r1, [pc, #460]	; (8004148 <HAL_DMA_Abort_IT+0x28c>)
 8003f7a:	428b      	cmp	r3, r1
 8003f7c:	d028      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0x114>
 8003f7e:	3118      	adds	r1, #24
 8003f80:	428b      	cmp	r3, r1
 8003f82:	d025      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0x114>
 8003f84:	3118      	adds	r1, #24
 8003f86:	428b      	cmp	r3, r1
 8003f88:	d022      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0x114>
 8003f8a:	3118      	adds	r1, #24
 8003f8c:	428b      	cmp	r3, r1
 8003f8e:	d01f      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0x114>
 8003f90:	3118      	adds	r1, #24
 8003f92:	428b      	cmp	r3, r1
 8003f94:	d01c      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0x114>
 8003f96:	3118      	adds	r1, #24
 8003f98:	428b      	cmp	r3, r1
 8003f9a:	d019      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0x114>
 8003f9c:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003fa0:	428b      	cmp	r3, r1
 8003fa2:	d015      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0x114>
 8003fa4:	3118      	adds	r1, #24
 8003fa6:	428b      	cmp	r3, r1
 8003fa8:	d012      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0x114>
 8003faa:	3118      	adds	r1, #24
 8003fac:	428b      	cmp	r3, r1
 8003fae:	d00f      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0x114>
 8003fb0:	3118      	adds	r1, #24
 8003fb2:	428b      	cmp	r3, r1
 8003fb4:	d00c      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0x114>
 8003fb6:	3118      	adds	r1, #24
 8003fb8:	428b      	cmp	r3, r1
 8003fba:	d009      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0x114>
 8003fbc:	3118      	adds	r1, #24
 8003fbe:	428b      	cmp	r3, r1
 8003fc0:	d006      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0x114>
 8003fc2:	3118      	adds	r1, #24
 8003fc4:	428b      	cmp	r3, r1
 8003fc6:	d003      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0x114>
 8003fc8:	3118      	adds	r1, #24
 8003fca:	428b      	cmp	r3, r1
 8003fcc:	f040 80ae 	bne.w	800412c <HAL_DMA_Abort_IT+0x270>
 8003fd0:	6819      	ldr	r1, [r3, #0]
 8003fd2:	f021 0101 	bic.w	r1, r1, #1
 8003fd6:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fd8:	6813      	ldr	r3, [r2, #0]
 8003fda:	4859      	ldr	r0, [pc, #356]	; (8004140 <HAL_DMA_Abort_IT+0x284>)
 8003fdc:	4959      	ldr	r1, [pc, #356]	; (8004144 <HAL_DMA_Abort_IT+0x288>)
 8003fde:	428b      	cmp	r3, r1
 8003fe0:	bf18      	it	ne
 8003fe2:	4283      	cmpne	r3, r0
 8003fe4:	d042      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 8003fe6:	3118      	adds	r1, #24
 8003fe8:	428b      	cmp	r3, r1
 8003fea:	d03f      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 8003fec:	3118      	adds	r1, #24
 8003fee:	428b      	cmp	r3, r1
 8003ff0:	d03c      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 8003ff2:	3118      	adds	r1, #24
 8003ff4:	428b      	cmp	r3, r1
 8003ff6:	d039      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 8003ff8:	3118      	adds	r1, #24
 8003ffa:	428b      	cmp	r3, r1
 8003ffc:	d036      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 8003ffe:	3118      	adds	r1, #24
 8004000:	428b      	cmp	r3, r1
 8004002:	d033      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 8004004:	3118      	adds	r1, #24
 8004006:	428b      	cmp	r3, r1
 8004008:	d030      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 800400a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800400e:	428b      	cmp	r3, r1
 8004010:	d02c      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 8004012:	3118      	adds	r1, #24
 8004014:	428b      	cmp	r3, r1
 8004016:	d029      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 8004018:	3118      	adds	r1, #24
 800401a:	428b      	cmp	r3, r1
 800401c:	d026      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 800401e:	3118      	adds	r1, #24
 8004020:	428b      	cmp	r3, r1
 8004022:	d023      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 8004024:	3118      	adds	r1, #24
 8004026:	428b      	cmp	r3, r1
 8004028:	d020      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 800402a:	3118      	adds	r1, #24
 800402c:	428b      	cmp	r3, r1
 800402e:	d01d      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 8004030:	3118      	adds	r1, #24
 8004032:	428b      	cmp	r3, r1
 8004034:	d01a      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 8004036:	3118      	adds	r1, #24
 8004038:	428b      	cmp	r3, r1
 800403a:	d017      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 800403c:	4943      	ldr	r1, [pc, #268]	; (800414c <HAL_DMA_Abort_IT+0x290>)
 800403e:	428b      	cmp	r3, r1
 8004040:	d014      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 8004042:	3114      	adds	r1, #20
 8004044:	428b      	cmp	r3, r1
 8004046:	d011      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 8004048:	3114      	adds	r1, #20
 800404a:	428b      	cmp	r3, r1
 800404c:	d00e      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 800404e:	3114      	adds	r1, #20
 8004050:	428b      	cmp	r3, r1
 8004052:	d00b      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 8004054:	3114      	adds	r1, #20
 8004056:	428b      	cmp	r3, r1
 8004058:	d008      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 800405a:	3114      	adds	r1, #20
 800405c:	428b      	cmp	r3, r1
 800405e:	d005      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 8004060:	3114      	adds	r1, #20
 8004062:	428b      	cmp	r3, r1
 8004064:	d002      	beq.n	800406c <HAL_DMA_Abort_IT+0x1b0>
 8004066:	3114      	adds	r1, #20
 8004068:	428b      	cmp	r3, r1
 800406a:	d117      	bne.n	800409c <HAL_DMA_Abort_IT+0x1e0>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800406c:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800406e:	680b      	ldr	r3, [r1, #0]
 8004070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004074:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004076:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004078:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800407a:	f003 011f 	and.w	r1, r3, #31
 800407e:	2301      	movs	r3, #1
 8004080:	408b      	lsls	r3, r1
 8004082:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004084:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8004086:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8004088:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800408a:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 800408c:	b133      	cbz	r3, 800409c <HAL_DMA_Abort_IT+0x1e0>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800408e:	6819      	ldr	r1, [r3, #0]
 8004090:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004094:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004096:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004098:	6f51      	ldr	r1, [r2, #116]	; 0x74
 800409a:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 800409c:	2300      	movs	r3, #0
 800409e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80040a2:	2301      	movs	r3, #1
 80040a4:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 80040a8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d045      	beq.n	800413a <HAL_DMA_Abort_IT+0x27e>
 80040ae:	4610      	mov	r0, r2
        hdma->XferAbortCallback(hdma);
 80040b0:	4798      	blx	r3
  return HAL_OK;
 80040b2:	2000      	movs	r0, #0
 80040b4:	e70f      	b.n	8003ed6 <HAL_DMA_Abort_IT+0x1a>
      hdma->State = HAL_DMA_STATE_ABORT;
 80040b6:	2004      	movs	r0, #4
 80040b8:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80040bc:	bb81      	cbnz	r1, 8004120 <HAL_DMA_Abort_IT+0x264>
 80040be:	4a22      	ldr	r2, [pc, #136]	; (8004148 <HAL_DMA_Abort_IT+0x28c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d02d      	beq.n	8004120 <HAL_DMA_Abort_IT+0x264>
 80040c4:	3218      	adds	r2, #24
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d02a      	beq.n	8004120 <HAL_DMA_Abort_IT+0x264>
 80040ca:	3218      	adds	r2, #24
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d027      	beq.n	8004120 <HAL_DMA_Abort_IT+0x264>
 80040d0:	3218      	adds	r2, #24
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d024      	beq.n	8004120 <HAL_DMA_Abort_IT+0x264>
 80040d6:	3218      	adds	r2, #24
 80040d8:	4293      	cmp	r3, r2
 80040da:	d021      	beq.n	8004120 <HAL_DMA_Abort_IT+0x264>
 80040dc:	3218      	adds	r2, #24
 80040de:	4293      	cmp	r3, r2
 80040e0:	d01e      	beq.n	8004120 <HAL_DMA_Abort_IT+0x264>
 80040e2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d01a      	beq.n	8004120 <HAL_DMA_Abort_IT+0x264>
 80040ea:	3218      	adds	r2, #24
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d017      	beq.n	8004120 <HAL_DMA_Abort_IT+0x264>
 80040f0:	3218      	adds	r2, #24
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d014      	beq.n	8004120 <HAL_DMA_Abort_IT+0x264>
 80040f6:	3218      	adds	r2, #24
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d011      	beq.n	8004120 <HAL_DMA_Abort_IT+0x264>
 80040fc:	3218      	adds	r2, #24
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00e      	beq.n	8004120 <HAL_DMA_Abort_IT+0x264>
 8004102:	3218      	adds	r2, #24
 8004104:	4293      	cmp	r3, r2
 8004106:	d00b      	beq.n	8004120 <HAL_DMA_Abort_IT+0x264>
 8004108:	3218      	adds	r2, #24
 800410a:	4293      	cmp	r3, r2
 800410c:	d008      	beq.n	8004120 <HAL_DMA_Abort_IT+0x264>
 800410e:	3218      	adds	r2, #24
 8004110:	4293      	cmp	r3, r2
 8004112:	d005      	beq.n	8004120 <HAL_DMA_Abort_IT+0x264>
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	f022 0201 	bic.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800411c:	2000      	movs	r0, #0
 800411e:	e6da      	b.n	8003ed6 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004128:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 800412a:	e6d4      	b.n	8003ed6 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 800412c:	6819      	ldr	r1, [r3, #0]
 800412e:	f021 0101 	bic.w	r1, r1, #1
 8004132:	6019      	str	r1, [r3, #0]
 8004134:	e750      	b.n	8003fd8 <HAL_DMA_Abort_IT+0x11c>
    return HAL_ERROR;
 8004136:	2001      	movs	r0, #1
}
 8004138:	4770      	bx	lr
  return HAL_OK;
 800413a:	2000      	movs	r0, #0
 800413c:	e6cb      	b.n	8003ed6 <HAL_DMA_Abort_IT+0x1a>
 800413e:	bf00      	nop
 8004140:	40020010 	.word	0x40020010
 8004144:	40020028 	.word	0x40020028
 8004148:	40020040 	.word	0x40020040
 800414c:	58025408 	.word	0x58025408

08004150 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004152:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8004154:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004156:	e03a      	b.n	80041ce <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004158:	2409      	movs	r4, #9
 800415a:	e000      	b.n	800415e <HAL_GPIO_Init+0xe>
 800415c:	2400      	movs	r4, #0
 800415e:	40b4      	lsls	r4, r6
 8004160:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004162:	3502      	adds	r5, #2
 8004164:	4e6e      	ldr	r6, [pc, #440]	; (8004320 <HAL_GPIO_Init+0x1d0>)
 8004166:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800416a:	4c6e      	ldr	r4, [pc, #440]	; (8004324 <HAL_GPIO_Init+0x1d4>)
 800416c:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800416e:	43d4      	mvns	r4, r2
 8004170:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004174:	684f      	ldr	r7, [r1, #4]
 8004176:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800417a:	d001      	beq.n	8004180 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 800417c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004180:	4d68      	ldr	r5, [pc, #416]	; (8004324 <HAL_GPIO_Init+0x1d4>)
 8004182:	602e      	str	r6, [r5, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004184:	686e      	ldr	r6, [r5, #4]
        temp &= ~(iocurrent);
 8004186:	ea04 0506 	and.w	r5, r4, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800418a:	684f      	ldr	r7, [r1, #4]
 800418c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8004190:	d001      	beq.n	8004196 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8004192:	ea42 0506 	orr.w	r5, r2, r6
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004196:	4e63      	ldr	r6, [pc, #396]	; (8004324 <HAL_GPIO_Init+0x1d4>)
 8004198:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800419a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800419e:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80041a0:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041a4:	684f      	ldr	r7, [r1, #4]
 80041a6:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80041aa:	d001      	beq.n	80041b0 <HAL_GPIO_Init+0x60>
        {
          temp |= iocurrent;
 80041ac:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80041b0:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80041b4:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80041b6:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80041b8:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041ba:	684e      	ldr	r6, [r1, #4]
 80041bc:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80041c0:	d001      	beq.n	80041c6 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80041c2:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80041c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041ca:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 80041cc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041ce:	680a      	ldr	r2, [r1, #0]
 80041d0:	fa32 f403 	lsrs.w	r4, r2, r3
 80041d4:	f000 80a2 	beq.w	800431c <HAL_GPIO_Init+0x1cc>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041d8:	2401      	movs	r4, #1
 80041da:	409c      	lsls	r4, r3
    if (iocurrent != 0x00U)
 80041dc:	4022      	ands	r2, r4
 80041de:	d0f5      	beq.n	80041cc <HAL_GPIO_Init+0x7c>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041e0:	684d      	ldr	r5, [r1, #4]
 80041e2:	1e6e      	subs	r6, r5, #1
 80041e4:	2d11      	cmp	r5, #17
 80041e6:	bf18      	it	ne
 80041e8:	2e01      	cmpne	r6, #1
 80041ea:	d901      	bls.n	80041f0 <HAL_GPIO_Init+0xa0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041ec:	2d12      	cmp	r5, #18
 80041ee:	d112      	bne.n	8004216 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR;
 80041f0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041f2:	005f      	lsls	r7, r3, #1
 80041f4:	2503      	movs	r5, #3
 80041f6:	40bd      	lsls	r5, r7
 80041f8:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041fc:	68cd      	ldr	r5, [r1, #12]
 80041fe:	40bd      	lsls	r5, r7
 8004200:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8004202:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8004204:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004206:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800420a:	684d      	ldr	r5, [r1, #4]
 800420c:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8004210:	409c      	lsls	r4, r3
 8004212:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8004214:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8004216:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004218:	005f      	lsls	r7, r3, #1
 800421a:	2503      	movs	r5, #3
 800421c:	40bd      	lsls	r5, r7
 800421e:	43ec      	mvns	r4, r5
 8004220:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004222:	688d      	ldr	r5, [r1, #8]
 8004224:	40bd      	lsls	r5, r7
 8004226:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8004228:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800422a:	684d      	ldr	r5, [r1, #4]
 800422c:	2d12      	cmp	r5, #18
 800422e:	bf18      	it	ne
 8004230:	2d02      	cmpne	r5, #2
 8004232:	d113      	bne.n	800425c <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8004234:	08de      	lsrs	r6, r3, #3
 8004236:	3608      	adds	r6, #8
 8004238:	f850 e026 	ldr.w	lr, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800423c:	f003 0507 	and.w	r5, r3, #7
 8004240:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8004244:	250f      	movs	r5, #15
 8004246:	fa05 f50c 	lsl.w	r5, r5, ip
 800424a:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800424e:	690d      	ldr	r5, [r1, #16]
 8004250:	fa05 f50c 	lsl.w	r5, r5, ip
 8004254:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004258:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 800425c:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800425e:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004260:	684c      	ldr	r4, [r1, #4]
 8004262:	f004 0403 	and.w	r4, r4, #3
 8004266:	40bc      	lsls	r4, r7
 8004268:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 800426a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800426c:	684c      	ldr	r4, [r1, #4]
 800426e:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8004272:	d0ab      	beq.n	80041cc <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004274:	4c2c      	ldr	r4, [pc, #176]	; (8004328 <HAL_GPIO_Init+0x1d8>)
 8004276:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 800427a:	f045 0502 	orr.w	r5, r5, #2
 800427e:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 8004282:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8004286:	f004 0402 	and.w	r4, r4, #2
 800428a:	9401      	str	r4, [sp, #4]
 800428c:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800428e:	089d      	lsrs	r5, r3, #2
 8004290:	1cae      	adds	r6, r5, #2
 8004292:	4c23      	ldr	r4, [pc, #140]	; (8004320 <HAL_GPIO_Init+0x1d0>)
 8004294:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004298:	f003 0403 	and.w	r4, r3, #3
 800429c:	00a6      	lsls	r6, r4, #2
 800429e:	240f      	movs	r4, #15
 80042a0:	40b4      	lsls	r4, r6
 80042a2:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042a6:	4c21      	ldr	r4, [pc, #132]	; (800432c <HAL_GPIO_Init+0x1dc>)
 80042a8:	42a0      	cmp	r0, r4
 80042aa:	f43f af57 	beq.w	800415c <HAL_GPIO_Init+0xc>
 80042ae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80042b2:	42a0      	cmp	r0, r4
 80042b4:	d022      	beq.n	80042fc <HAL_GPIO_Init+0x1ac>
 80042b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80042ba:	42a0      	cmp	r0, r4
 80042bc:	d020      	beq.n	8004300 <HAL_GPIO_Init+0x1b0>
 80042be:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80042c2:	42a0      	cmp	r0, r4
 80042c4:	d01e      	beq.n	8004304 <HAL_GPIO_Init+0x1b4>
 80042c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80042ca:	42a0      	cmp	r0, r4
 80042cc:	d01c      	beq.n	8004308 <HAL_GPIO_Init+0x1b8>
 80042ce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80042d2:	42a0      	cmp	r0, r4
 80042d4:	d01a      	beq.n	800430c <HAL_GPIO_Init+0x1bc>
 80042d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80042da:	42a0      	cmp	r0, r4
 80042dc:	d018      	beq.n	8004310 <HAL_GPIO_Init+0x1c0>
 80042de:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80042e2:	42a0      	cmp	r0, r4
 80042e4:	d016      	beq.n	8004314 <HAL_GPIO_Init+0x1c4>
 80042e6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80042ea:	42a0      	cmp	r0, r4
 80042ec:	d014      	beq.n	8004318 <HAL_GPIO_Init+0x1c8>
 80042ee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80042f2:	42a0      	cmp	r0, r4
 80042f4:	f43f af30 	beq.w	8004158 <HAL_GPIO_Init+0x8>
 80042f8:	240a      	movs	r4, #10
 80042fa:	e730      	b.n	800415e <HAL_GPIO_Init+0xe>
 80042fc:	2401      	movs	r4, #1
 80042fe:	e72e      	b.n	800415e <HAL_GPIO_Init+0xe>
 8004300:	2402      	movs	r4, #2
 8004302:	e72c      	b.n	800415e <HAL_GPIO_Init+0xe>
 8004304:	2403      	movs	r4, #3
 8004306:	e72a      	b.n	800415e <HAL_GPIO_Init+0xe>
 8004308:	2404      	movs	r4, #4
 800430a:	e728      	b.n	800415e <HAL_GPIO_Init+0xe>
 800430c:	2405      	movs	r4, #5
 800430e:	e726      	b.n	800415e <HAL_GPIO_Init+0xe>
 8004310:	2406      	movs	r4, #6
 8004312:	e724      	b.n	800415e <HAL_GPIO_Init+0xe>
 8004314:	2407      	movs	r4, #7
 8004316:	e722      	b.n	800415e <HAL_GPIO_Init+0xe>
 8004318:	2408      	movs	r4, #8
 800431a:	e720      	b.n	800415e <HAL_GPIO_Init+0xe>
  }
}
 800431c:	b003      	add	sp, #12
 800431e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004320:	58000400 	.word	0x58000400
 8004324:	58000080 	.word	0x58000080
 8004328:	58024400 	.word	0x58024400
 800432c:	58020000 	.word	0x58020000

08004330 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004330:	b912      	cbnz	r2, 8004338 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004332:	0409      	lsls	r1, r1, #16
 8004334:	6181      	str	r1, [r0, #24]
  }
}
 8004336:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8004338:	6181      	str	r1, [r0, #24]
 800433a:	4770      	bx	lr

0800433c <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800433c:	3020      	adds	r0, #32
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_HSEM_FastTake+0x18>)
 8004340:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8004344:	4b04      	ldr	r3, [pc, #16]	; (8004358 <HAL_HSEM_FastTake+0x1c>)
 8004346:	429a      	cmp	r2, r3
 8004348:	d001      	beq.n	800434e <HAL_HSEM_FastTake+0x12>
    return HAL_OK;
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800434a:	2001      	movs	r0, #1
}
 800434c:	4770      	bx	lr
    return HAL_OK;
 800434e:	2000      	movs	r0, #0
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	58026400 	.word	0x58026400
 8004358:	80000300 	.word	0x80000300

0800435c <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800435c:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8004360:	4b01      	ldr	r3, [pc, #4]	; (8004368 <HAL_HSEM_Release+0xc>)
 8004362:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8004366:	4770      	bx	lr
 8004368:	58026400 	.word	0x58026400

0800436c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800436c:	b538      	push	{r3, r4, r5, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800436e:	4b23      	ldr	r3, [pc, #140]	; (80043fc <HAL_PWREx_ConfigSupply+0x90>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	2b06      	cmp	r3, #6
 8004378:	d007      	beq.n	800438a <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800437a:	4b20      	ldr	r3, [pc, #128]	; (80043fc <HAL_PWREx_ConfigSupply+0x90>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004382:	4283      	cmp	r3, r0
 8004384:	d037      	beq.n	80043f6 <HAL_PWREx_ConfigSupply+0x8a>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004386:	2001      	movs	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8004388:	bd38      	pop	{r3, r4, r5, pc}
 800438a:	4604      	mov	r4, r0
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800438c:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <HAL_PWREx_ConfigSupply+0x90>)
 800438e:	68d3      	ldr	r3, [r2, #12]
 8004390:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004394:	4303      	orrs	r3, r0
 8004396:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 8004398:	f7ff fd08 	bl	8003dac <HAL_GetTick>
 800439c:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800439e:	4b17      	ldr	r3, [pc, #92]	; (80043fc <HAL_PWREx_ConfigSupply+0x90>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80043a6:	d107      	bne.n	80043b8 <HAL_PWREx_ConfigSupply+0x4c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043a8:	f7ff fd00 	bl	8003dac <HAL_GetTick>
 80043ac:	1b40      	subs	r0, r0, r5
 80043ae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80043b2:	d9f4      	bls.n	800439e <HAL_PWREx_ConfigSupply+0x32>
      return HAL_ERROR;
 80043b4:	2001      	movs	r0, #1
 80043b6:	e7e7      	b.n	8004388 <HAL_PWREx_ConfigSupply+0x1c>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80043b8:	2c2e      	cmp	r4, #46	; 0x2e
 80043ba:	bf18      	it	ne
 80043bc:	2c1e      	cmpne	r4, #30
 80043be:	d008      	beq.n	80043d2 <HAL_PWREx_ConfigSupply+0x66>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 80043c0:	2c2d      	cmp	r4, #45	; 0x2d
 80043c2:	bf14      	ite	ne
 80043c4:	2300      	movne	r3, #0
 80043c6:	2301      	moveq	r3, #1
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80043c8:	2c1d      	cmp	r4, #29
 80043ca:	d002      	beq.n	80043d2 <HAL_PWREx_ConfigSupply+0x66>
 80043cc:	b90b      	cbnz	r3, 80043d2 <HAL_PWREx_ConfigSupply+0x66>
  return HAL_OK;
 80043ce:	2000      	movs	r0, #0
 80043d0:	e7da      	b.n	8004388 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 80043d2:	f7ff fceb 	bl	8003dac <HAL_GetTick>
 80043d6:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80043d8:	4b08      	ldr	r3, [pc, #32]	; (80043fc <HAL_PWREx_ConfigSupply+0x90>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80043e0:	d107      	bne.n	80043f2 <HAL_PWREx_ConfigSupply+0x86>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043e2:	f7ff fce3 	bl	8003dac <HAL_GetTick>
 80043e6:	1b00      	subs	r0, r0, r4
 80043e8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80043ec:	d9f4      	bls.n	80043d8 <HAL_PWREx_ConfigSupply+0x6c>
        return HAL_ERROR;
 80043ee:	2001      	movs	r0, #1
 80043f0:	e7ca      	b.n	8004388 <HAL_PWREx_ConfigSupply+0x1c>
  return HAL_OK;
 80043f2:	2000      	movs	r0, #0
 80043f4:	e7c8      	b.n	8004388 <HAL_PWREx_ConfigSupply+0x1c>
      return HAL_OK;
 80043f6:	2000      	movs	r0, #0
 80043f8:	e7c6      	b.n	8004388 <HAL_PWREx_ConfigSupply+0x1c>
 80043fa:	bf00      	nop
 80043fc:	58024800 	.word	0x58024800

08004400 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004400:	2800      	cmp	r0, #0
 8004402:	f000 830c 	beq.w	8004a1e <HAL_RCC_OscConfig+0x61e>
{
 8004406:	b538      	push	{r3, r4, r5, lr}
 8004408:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800440a:	6803      	ldr	r3, [r0, #0]
 800440c:	f013 0f01 	tst.w	r3, #1
 8004410:	d025      	beq.n	800445e <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004412:	4a9d      	ldr	r2, [pc, #628]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 8004414:	6913      	ldr	r3, [r2, #16]
 8004416:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800441a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800441c:	2b10      	cmp	r3, #16
 800441e:	d015      	beq.n	800444c <HAL_RCC_OscConfig+0x4c>
 8004420:	2b18      	cmp	r3, #24
 8004422:	d00f      	beq.n	8004444 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004424:	6863      	ldr	r3, [r4, #4]
 8004426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800442a:	d03f      	beq.n	80044ac <HAL_RCC_OscConfig+0xac>
 800442c:	2b00      	cmp	r3, #0
 800442e:	d153      	bne.n	80044d8 <HAL_RCC_OscConfig+0xd8>
 8004430:	4b95      	ldr	r3, [pc, #596]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	e038      	b.n	80044b6 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004444:	f002 0203 	and.w	r2, r2, #3
 8004448:	2a02      	cmp	r2, #2
 800444a:	d1eb      	bne.n	8004424 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444c:	4b8e      	ldr	r3, [pc, #568]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004454:	d003      	beq.n	800445e <HAL_RCC_OscConfig+0x5e>
 8004456:	6863      	ldr	r3, [r4, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 82e2 	beq.w	8004a22 <HAL_RCC_OscConfig+0x622>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	f013 0f02 	tst.w	r3, #2
 8004464:	f000 808b 	beq.w	800457e <HAL_RCC_OscConfig+0x17e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004468:	4a87      	ldr	r2, [pc, #540]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 800446a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800446c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800446e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8004472:	d05a      	beq.n	800452a <HAL_RCC_OscConfig+0x12a>
 8004474:	2b18      	cmp	r3, #24
 8004476:	d055      	beq.n	8004524 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004478:	68e3      	ldr	r3, [r4, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 80c8 	beq.w	8004610 <HAL_RCC_OscConfig+0x210>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004480:	4981      	ldr	r1, [pc, #516]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 8004482:	680a      	ldr	r2, [r1, #0]
 8004484:	f022 0219 	bic.w	r2, r2, #25
 8004488:	4313      	orrs	r3, r2
 800448a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448c:	f7ff fc8e 	bl	8003dac <HAL_GetTick>
 8004490:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004492:	4b7d      	ldr	r3, [pc, #500]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f013 0f04 	tst.w	r3, #4
 800449a:	f040 8097 	bne.w	80045cc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800449e:	f7ff fc85 	bl	8003dac <HAL_GetTick>
 80044a2:	1b40      	subs	r0, r0, r5
 80044a4:	2802      	cmp	r0, #2
 80044a6:	d9f4      	bls.n	8004492 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 80044a8:	2003      	movs	r0, #3
 80044aa:	e2bf      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ac:	4a76      	ldr	r2, [pc, #472]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 80044ae:	6813      	ldr	r3, [r2, #0]
 80044b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b4:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044b6:	6863      	ldr	r3, [r4, #4]
 80044b8:	b32b      	cbz	r3, 8004506 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 80044ba:	f7ff fc77 	bl	8003dac <HAL_GetTick>
 80044be:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044c0:	4b71      	ldr	r3, [pc, #452]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80044c8:	d1c9      	bne.n	800445e <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ca:	f7ff fc6f 	bl	8003dac <HAL_GetTick>
 80044ce:	1b40      	subs	r0, r0, r5
 80044d0:	2864      	cmp	r0, #100	; 0x64
 80044d2:	d9f5      	bls.n	80044c0 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 80044d4:	2003      	movs	r0, #3
 80044d6:	e2a9      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044dc:	d009      	beq.n	80044f2 <HAL_RCC_OscConfig+0xf2>
 80044de:	4b6a      	ldr	r3, [pc, #424]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	e7e1      	b.n	80044b6 <HAL_RCC_OscConfig+0xb6>
 80044f2:	4b65      	ldr	r3, [pc, #404]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	e7d7      	b.n	80044b6 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8004506:	f7ff fc51 	bl	8003dac <HAL_GetTick>
 800450a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800450c:	4b5e      	ldr	r3, [pc, #376]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004514:	d0a3      	beq.n	800445e <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004516:	f7ff fc49 	bl	8003dac <HAL_GetTick>
 800451a:	1b40      	subs	r0, r0, r5
 800451c:	2864      	cmp	r0, #100	; 0x64
 800451e:	d9f5      	bls.n	800450c <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8004520:	2003      	movs	r0, #3
 8004522:	e283      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004524:	f012 0f03 	tst.w	r2, #3
 8004528:	d1a6      	bne.n	8004478 <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800452a:	4b57      	ldr	r3, [pc, #348]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f013 0f04 	tst.w	r3, #4
 8004532:	d003      	beq.n	800453c <HAL_RCC_OscConfig+0x13c>
 8004534:	68e3      	ldr	r3, [r4, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 8275 	beq.w	8004a26 <HAL_RCC_OscConfig+0x626>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453c:	f7ff fc50 	bl	8003de0 <HAL_GetREVID>
 8004540:	f241 0303 	movw	r3, #4099	; 0x1003
 8004544:	4298      	cmp	r0, r3
 8004546:	d812      	bhi.n	800456e <HAL_RCC_OscConfig+0x16e>
 8004548:	6922      	ldr	r2, [r4, #16]
 800454a:	2a40      	cmp	r2, #64	; 0x40
 800454c:	d007      	beq.n	800455e <HAL_RCC_OscConfig+0x15e>
 800454e:	494e      	ldr	r1, [pc, #312]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 8004550:	684b      	ldr	r3, [r1, #4]
 8004552:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004556:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800455a:	604b      	str	r3, [r1, #4]
 800455c:	e00f      	b.n	800457e <HAL_RCC_OscConfig+0x17e>
 800455e:	4a4a      	ldr	r2, [pc, #296]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 8004560:	6853      	ldr	r3, [r2, #4]
 8004562:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800456a:	6053      	str	r3, [r2, #4]
 800456c:	e007      	b.n	800457e <HAL_RCC_OscConfig+0x17e>
 800456e:	4a46      	ldr	r2, [pc, #280]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 8004570:	6853      	ldr	r3, [r2, #4]
 8004572:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004576:	6921      	ldr	r1, [r4, #16]
 8004578:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800457c:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	f013 0f10 	tst.w	r3, #16
 8004584:	f000 808a 	beq.w	800469c <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004588:	4a3f      	ldr	r2, [pc, #252]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 800458a:	6913      	ldr	r3, [r2, #16]
 800458c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004590:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004592:	2b08      	cmp	r3, #8
 8004594:	d054      	beq.n	8004640 <HAL_RCC_OscConfig+0x240>
 8004596:	2b18      	cmp	r3, #24
 8004598:	d04e      	beq.n	8004638 <HAL_RCC_OscConfig+0x238>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800459a:	69e3      	ldr	r3, [r4, #28]
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80ba 	beq.w	8004716 <HAL_RCC_OscConfig+0x316>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80045a2:	4a39      	ldr	r2, [pc, #228]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 80045a4:	6813      	ldr	r3, [r2, #0]
 80045a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7ff fbfe 	bl	8003dac <HAL_GetTick>
 80045b0:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045b2:	4b35      	ldr	r3, [pc, #212]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80045ba:	f040 808a 	bne.w	80046d2 <HAL_RCC_OscConfig+0x2d2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80045be:	f7ff fbf5 	bl	8003dac <HAL_GetTick>
 80045c2:	1b40      	subs	r0, r0, r5
 80045c4:	2802      	cmp	r0, #2
 80045c6:	d9f4      	bls.n	80045b2 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 80045c8:	2003      	movs	r0, #3
 80045ca:	e22f      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045cc:	f7ff fc08 	bl	8003de0 <HAL_GetREVID>
 80045d0:	f241 0303 	movw	r3, #4099	; 0x1003
 80045d4:	4298      	cmp	r0, r3
 80045d6:	d812      	bhi.n	80045fe <HAL_RCC_OscConfig+0x1fe>
 80045d8:	6922      	ldr	r2, [r4, #16]
 80045da:	2a40      	cmp	r2, #64	; 0x40
 80045dc:	d007      	beq.n	80045ee <HAL_RCC_OscConfig+0x1ee>
 80045de:	492a      	ldr	r1, [pc, #168]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 80045e0:	684b      	ldr	r3, [r1, #4]
 80045e2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045e6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80045ea:	604b      	str	r3, [r1, #4]
 80045ec:	e7c7      	b.n	800457e <HAL_RCC_OscConfig+0x17e>
 80045ee:	4a26      	ldr	r2, [pc, #152]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 80045f0:	6853      	ldr	r3, [r2, #4]
 80045f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045fa:	6053      	str	r3, [r2, #4]
 80045fc:	e7bf      	b.n	800457e <HAL_RCC_OscConfig+0x17e>
 80045fe:	4a22      	ldr	r2, [pc, #136]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 8004600:	6853      	ldr	r3, [r2, #4]
 8004602:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004606:	6921      	ldr	r1, [r4, #16]
 8004608:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800460c:	6053      	str	r3, [r2, #4]
 800460e:	e7b6      	b.n	800457e <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 8004610:	4a1d      	ldr	r2, [pc, #116]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 8004612:	6813      	ldr	r3, [r2, #0]
 8004614:	f023 0301 	bic.w	r3, r3, #1
 8004618:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800461a:	f7ff fbc7 	bl	8003dac <HAL_GetTick>
 800461e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004620:	4b19      	ldr	r3, [pc, #100]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f013 0f04 	tst.w	r3, #4
 8004628:	d0a9      	beq.n	800457e <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800462a:	f7ff fbbf 	bl	8003dac <HAL_GetTick>
 800462e:	1b40      	subs	r0, r0, r5
 8004630:	2802      	cmp	r0, #2
 8004632:	d9f5      	bls.n	8004620 <HAL_RCC_OscConfig+0x220>
            return HAL_TIMEOUT;
 8004634:	2003      	movs	r0, #3
 8004636:	e1f9      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004638:	f002 0203 	and.w	r2, r2, #3
 800463c:	2a01      	cmp	r2, #1
 800463e:	d1ac      	bne.n	800459a <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004640:	4b11      	ldr	r3, [pc, #68]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004648:	d004      	beq.n	8004654 <HAL_RCC_OscConfig+0x254>
 800464a:	69e3      	ldr	r3, [r4, #28]
 800464c:	2b80      	cmp	r3, #128	; 0x80
 800464e:	d001      	beq.n	8004654 <HAL_RCC_OscConfig+0x254>
        return HAL_ERROR;
 8004650:	2001      	movs	r0, #1
 8004652:	e1eb      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004654:	f7ff fbc4 	bl	8003de0 <HAL_GetREVID>
 8004658:	f241 0303 	movw	r3, #4099	; 0x1003
 800465c:	4298      	cmp	r0, r3
 800465e:	d815      	bhi.n	800468c <HAL_RCC_OscConfig+0x28c>
 8004660:	6a22      	ldr	r2, [r4, #32]
 8004662:	2a20      	cmp	r2, #32
 8004664:	d007      	beq.n	8004676 <HAL_RCC_OscConfig+0x276>
 8004666:	4908      	ldr	r1, [pc, #32]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 8004668:	684b      	ldr	r3, [r1, #4]
 800466a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800466e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8004672:	604b      	str	r3, [r1, #4]
 8004674:	e012      	b.n	800469c <HAL_RCC_OscConfig+0x29c>
 8004676:	4a04      	ldr	r2, [pc, #16]	; (8004688 <HAL_RCC_OscConfig+0x288>)
 8004678:	6853      	ldr	r3, [r2, #4]
 800467a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800467e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004682:	6053      	str	r3, [r2, #4]
 8004684:	e00a      	b.n	800469c <HAL_RCC_OscConfig+0x29c>
 8004686:	bf00      	nop
 8004688:	58024400 	.word	0x58024400
 800468c:	4a9a      	ldr	r2, [pc, #616]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 800468e:	68d3      	ldr	r3, [r2, #12]
 8004690:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004694:	6a21      	ldr	r1, [r4, #32]
 8004696:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800469a:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	f013 0f08 	tst.w	r3, #8
 80046a2:	d060      	beq.n	8004766 <HAL_RCC_OscConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046a4:	6963      	ldr	r3, [r4, #20]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d049      	beq.n	800473e <HAL_RCC_OscConfig+0x33e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046aa:	4a93      	ldr	r2, [pc, #588]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 80046ac:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80046ae:	f043 0301 	orr.w	r3, r3, #1
 80046b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b4:	f7ff fb7a 	bl	8003dac <HAL_GetTick>
 80046b8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046ba:	4b8f      	ldr	r3, [pc, #572]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 80046bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046be:	f013 0f02 	tst.w	r3, #2
 80046c2:	d150      	bne.n	8004766 <HAL_RCC_OscConfig+0x366>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046c4:	f7ff fb72 	bl	8003dac <HAL_GetTick>
 80046c8:	1b40      	subs	r0, r0, r5
 80046ca:	2802      	cmp	r0, #2
 80046cc:	d9f5      	bls.n	80046ba <HAL_RCC_OscConfig+0x2ba>
        {
          return HAL_TIMEOUT;
 80046ce:	2003      	movs	r0, #3
 80046d0:	e1ac      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046d2:	f7ff fb85 	bl	8003de0 <HAL_GetREVID>
 80046d6:	f241 0303 	movw	r3, #4099	; 0x1003
 80046da:	4298      	cmp	r0, r3
 80046dc:	d812      	bhi.n	8004704 <HAL_RCC_OscConfig+0x304>
 80046de:	6a22      	ldr	r2, [r4, #32]
 80046e0:	2a20      	cmp	r2, #32
 80046e2:	d007      	beq.n	80046f4 <HAL_RCC_OscConfig+0x2f4>
 80046e4:	4984      	ldr	r1, [pc, #528]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 80046e6:	684b      	ldr	r3, [r1, #4]
 80046e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80046ec:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80046f0:	604b      	str	r3, [r1, #4]
 80046f2:	e7d3      	b.n	800469c <HAL_RCC_OscConfig+0x29c>
 80046f4:	4a80      	ldr	r2, [pc, #512]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 80046f6:	6853      	ldr	r3, [r2, #4]
 80046f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80046fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004700:	6053      	str	r3, [r2, #4]
 8004702:	e7cb      	b.n	800469c <HAL_RCC_OscConfig+0x29c>
 8004704:	4a7c      	ldr	r2, [pc, #496]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 8004706:	68d3      	ldr	r3, [r2, #12]
 8004708:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800470c:	6a21      	ldr	r1, [r4, #32]
 800470e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004712:	60d3      	str	r3, [r2, #12]
 8004714:	e7c2      	b.n	800469c <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_CSI_DISABLE();
 8004716:	4a78      	ldr	r2, [pc, #480]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 8004718:	6813      	ldr	r3, [r2, #0]
 800471a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800471e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004720:	f7ff fb44 	bl	8003dac <HAL_GetTick>
 8004724:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004726:	4b74      	ldr	r3, [pc, #464]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800472e:	d0b5      	beq.n	800469c <HAL_RCC_OscConfig+0x29c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004730:	f7ff fb3c 	bl	8003dac <HAL_GetTick>
 8004734:	1b40      	subs	r0, r0, r5
 8004736:	2802      	cmp	r0, #2
 8004738:	d9f5      	bls.n	8004726 <HAL_RCC_OscConfig+0x326>
            return HAL_TIMEOUT;
 800473a:	2003      	movs	r0, #3
 800473c:	e176      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800473e:	4a6e      	ldr	r2, [pc, #440]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 8004740:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004742:	f023 0301 	bic.w	r3, r3, #1
 8004746:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004748:	f7ff fb30 	bl	8003dac <HAL_GetTick>
 800474c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800474e:	4b6a      	ldr	r3, [pc, #424]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 8004750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004752:	f013 0f02 	tst.w	r3, #2
 8004756:	d006      	beq.n	8004766 <HAL_RCC_OscConfig+0x366>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004758:	f7ff fb28 	bl	8003dac <HAL_GetTick>
 800475c:	1b40      	subs	r0, r0, r5
 800475e:	2802      	cmp	r0, #2
 8004760:	d9f5      	bls.n	800474e <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 8004762:	2003      	movs	r0, #3
 8004764:	e162      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	f013 0f20 	tst.w	r3, #32
 800476c:	d029      	beq.n	80047c2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800476e:	69a3      	ldr	r3, [r4, #24]
 8004770:	b19b      	cbz	r3, 800479a <HAL_RCC_OscConfig+0x39a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004772:	4a61      	ldr	r2, [pc, #388]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 8004774:	6813      	ldr	r3, [r2, #0]
 8004776:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800477a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800477c:	f7ff fb16 	bl	8003dac <HAL_GetTick>
 8004780:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004782:	4b5d      	ldr	r3, [pc, #372]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800478a:	d11a      	bne.n	80047c2 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800478c:	f7ff fb0e 	bl	8003dac <HAL_GetTick>
 8004790:	1b40      	subs	r0, r0, r5
 8004792:	2802      	cmp	r0, #2
 8004794:	d9f5      	bls.n	8004782 <HAL_RCC_OscConfig+0x382>
        {
          return HAL_TIMEOUT;
 8004796:	2003      	movs	r0, #3
 8004798:	e148      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800479a:	4a57      	ldr	r2, [pc, #348]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 800479c:	6813      	ldr	r3, [r2, #0]
 800479e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80047a4:	f7ff fb02 	bl	8003dac <HAL_GetTick>
 80047a8:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047aa:	4b53      	ldr	r3, [pc, #332]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80047b2:	d006      	beq.n	80047c2 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80047b4:	f7ff fafa 	bl	8003dac <HAL_GetTick>
 80047b8:	1b40      	subs	r0, r0, r5
 80047ba:	2802      	cmp	r0, #2
 80047bc:	d9f5      	bls.n	80047aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80047be:	2003      	movs	r0, #3
 80047c0:	e134      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	f013 0f04 	tst.w	r3, #4
 80047c8:	d121      	bne.n	800480e <HAL_RCC_OscConfig+0x40e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 812c 	beq.w	8004a2a <HAL_RCC_OscConfig+0x62a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80047d2:	4a49      	ldr	r2, [pc, #292]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 80047d4:	6912      	ldr	r2, [r2, #16]
 80047d6:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80047da:	2a18      	cmp	r2, #24
 80047dc:	f000 80ee 	beq.w	80049bc <HAL_RCC_OscConfig+0x5bc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d075      	beq.n	80048d0 <HAL_RCC_OscConfig+0x4d0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e4:	4a44      	ldr	r2, [pc, #272]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 80047e6:	6813      	ldr	r3, [r2, #0]
 80047e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ee:	f7ff fadd 	bl	8003dac <HAL_GetTick>
 80047f2:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047f4:	4b40      	ldr	r3, [pc, #256]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80047fc:	f000 80dc 	beq.w	80049b8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004800:	f7ff fad4 	bl	8003dac <HAL_GetTick>
 8004804:	1b00      	subs	r0, r0, r4
 8004806:	2802      	cmp	r0, #2
 8004808:	d9f4      	bls.n	80047f4 <HAL_RCC_OscConfig+0x3f4>
          {
            return HAL_TIMEOUT;
 800480a:	2003      	movs	r0, #3
 800480c:	e10e      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
    PWR->CR1 |= PWR_CR1_DBP;
 800480e:	4a3b      	ldr	r2, [pc, #236]	; (80048fc <HAL_RCC_OscConfig+0x4fc>)
 8004810:	6813      	ldr	r3, [r2, #0]
 8004812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004816:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004818:	f7ff fac8 	bl	8003dac <HAL_GetTick>
 800481c:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800481e:	4b37      	ldr	r3, [pc, #220]	; (80048fc <HAL_RCC_OscConfig+0x4fc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004826:	d106      	bne.n	8004836 <HAL_RCC_OscConfig+0x436>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004828:	f7ff fac0 	bl	8003dac <HAL_GetTick>
 800482c:	1b40      	subs	r0, r0, r5
 800482e:	2864      	cmp	r0, #100	; 0x64
 8004830:	d9f5      	bls.n	800481e <HAL_RCC_OscConfig+0x41e>
        return HAL_TIMEOUT;
 8004832:	2003      	movs	r0, #3
 8004834:	e0fa      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004836:	68a3      	ldr	r3, [r4, #8]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d00a      	beq.n	8004852 <HAL_RCC_OscConfig+0x452>
 800483c:	bb0b      	cbnz	r3, 8004882 <HAL_RCC_OscConfig+0x482>
 800483e:	4b2e      	ldr	r3, [pc, #184]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 8004840:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004842:	f022 0201 	bic.w	r2, r2, #1
 8004846:	671a      	str	r2, [r3, #112]	; 0x70
 8004848:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800484a:	f022 0204 	bic.w	r2, r2, #4
 800484e:	671a      	str	r2, [r3, #112]	; 0x70
 8004850:	e004      	b.n	800485c <HAL_RCC_OscConfig+0x45c>
 8004852:	4a29      	ldr	r2, [pc, #164]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 8004854:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800485c:	68a3      	ldr	r3, [r4, #8]
 800485e:	b333      	cbz	r3, 80048ae <HAL_RCC_OscConfig+0x4ae>
      tickstart = HAL_GetTick();
 8004860:	f7ff faa4 	bl	8003dac <HAL_GetTick>
 8004864:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004866:	4b24      	ldr	r3, [pc, #144]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 8004868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486a:	f013 0f02 	tst.w	r3, #2
 800486e:	d1ac      	bne.n	80047ca <HAL_RCC_OscConfig+0x3ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004870:	f7ff fa9c 	bl	8003dac <HAL_GetTick>
 8004874:	1b40      	subs	r0, r0, r5
 8004876:	f241 3388 	movw	r3, #5000	; 0x1388
 800487a:	4298      	cmp	r0, r3
 800487c:	d9f3      	bls.n	8004866 <HAL_RCC_OscConfig+0x466>
          return HAL_TIMEOUT;
 800487e:	2003      	movs	r0, #3
 8004880:	e0d4      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004882:	2b05      	cmp	r3, #5
 8004884:	d009      	beq.n	800489a <HAL_RCC_OscConfig+0x49a>
 8004886:	4b1c      	ldr	r3, [pc, #112]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 8004888:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800488a:	f022 0201 	bic.w	r2, r2, #1
 800488e:	671a      	str	r2, [r3, #112]	; 0x70
 8004890:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004892:	f022 0204 	bic.w	r2, r2, #4
 8004896:	671a      	str	r2, [r3, #112]	; 0x70
 8004898:	e7e0      	b.n	800485c <HAL_RCC_OscConfig+0x45c>
 800489a:	4b17      	ldr	r3, [pc, #92]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 800489c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800489e:	f042 0204 	orr.w	r2, r2, #4
 80048a2:	671a      	str	r2, [r3, #112]	; 0x70
 80048a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	671a      	str	r2, [r3, #112]	; 0x70
 80048ac:	e7d6      	b.n	800485c <HAL_RCC_OscConfig+0x45c>
      tickstart = HAL_GetTick();
 80048ae:	f7ff fa7d 	bl	8003dac <HAL_GetTick>
 80048b2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048b4:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 80048b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b8:	f013 0f02 	tst.w	r3, #2
 80048bc:	d085      	beq.n	80047ca <HAL_RCC_OscConfig+0x3ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048be:	f7ff fa75 	bl	8003dac <HAL_GetTick>
 80048c2:	1b40      	subs	r0, r0, r5
 80048c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80048c8:	4298      	cmp	r0, r3
 80048ca:	d9f3      	bls.n	80048b4 <HAL_RCC_OscConfig+0x4b4>
          return HAL_TIMEOUT;
 80048cc:	2003      	movs	r0, #3
 80048ce:	e0ad      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
        __HAL_RCC_PLL_DISABLE();
 80048d0:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 80048d2:	6813      	ldr	r3, [r2, #0]
 80048d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048d8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80048da:	f7ff fa67 	bl	8003dac <HAL_GetTick>
 80048de:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80048e8:	d00a      	beq.n	8004900 <HAL_RCC_OscConfig+0x500>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ea:	f7ff fa5f 	bl	8003dac <HAL_GetTick>
 80048ee:	1b40      	subs	r0, r0, r5
 80048f0:	2802      	cmp	r0, #2
 80048f2:	d9f5      	bls.n	80048e0 <HAL_RCC_OscConfig+0x4e0>
            return HAL_TIMEOUT;
 80048f4:	2003      	movs	r0, #3
 80048f6:	e099      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
 80048f8:	58024400 	.word	0x58024400
 80048fc:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004900:	4b4e      	ldr	r3, [pc, #312]	; (8004a3c <HAL_RCC_OscConfig+0x63c>)
 8004902:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004904:	4a4e      	ldr	r2, [pc, #312]	; (8004a40 <HAL_RCC_OscConfig+0x640>)
 8004906:	400a      	ands	r2, r1
 8004908:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800490a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800490c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8004910:	430a      	orrs	r2, r1
 8004912:	629a      	str	r2, [r3, #40]	; 0x28
 8004914:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004916:	3a01      	subs	r2, #1
 8004918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800491c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800491e:	3901      	subs	r1, #1
 8004920:	0249      	lsls	r1, r1, #9
 8004922:	b289      	uxth	r1, r1
 8004924:	430a      	orrs	r2, r1
 8004926:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004928:	3901      	subs	r1, #1
 800492a:	0409      	lsls	r1, r1, #16
 800492c:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8004930:	430a      	orrs	r2, r1
 8004932:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004934:	3901      	subs	r1, #1
 8004936:	0609      	lsls	r1, r1, #24
 8004938:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800493c:	430a      	orrs	r2, r1
 800493e:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8004940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004942:	f022 0201 	bic.w	r2, r2, #1
 8004946:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004948:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800494a:	4a3e      	ldr	r2, [pc, #248]	; (8004a44 <HAL_RCC_OscConfig+0x644>)
 800494c:	400a      	ands	r2, r1
 800494e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004950:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004954:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004958:	f022 020c 	bic.w	r2, r2, #12
 800495c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800495e:	430a      	orrs	r2, r1
 8004960:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004964:	f022 0202 	bic.w	r2, r2, #2
 8004968:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800496a:	430a      	orrs	r2, r1
 800496c:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800496e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004970:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004974:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004978:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800497c:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800497e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004980:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004984:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8004986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004988:	f042 0201 	orr.w	r2, r2, #1
 800498c:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004994:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004996:	f7ff fa09 	bl	8003dac <HAL_GetTick>
 800499a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800499c:	4b27      	ldr	r3, [pc, #156]	; (8004a3c <HAL_RCC_OscConfig+0x63c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80049a4:	d106      	bne.n	80049b4 <HAL_RCC_OscConfig+0x5b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a6:	f7ff fa01 	bl	8003dac <HAL_GetTick>
 80049aa:	1b00      	subs	r0, r0, r4
 80049ac:	2802      	cmp	r0, #2
 80049ae:	d9f5      	bls.n	800499c <HAL_RCC_OscConfig+0x59c>
            return HAL_TIMEOUT;
 80049b0:	2003      	movs	r0, #3
 80049b2:	e03b      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80049b4:	2000      	movs	r0, #0
 80049b6:	e039      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
 80049b8:	2000      	movs	r0, #0
 80049ba:	e037      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
      temp1_pllckcfg = RCC->PLLCKSELR;
 80049bc:	4a1f      	ldr	r2, [pc, #124]	; (8004a3c <HAL_RCC_OscConfig+0x63c>)
 80049be:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80049c0:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d033      	beq.n	8004a2e <HAL_RCC_OscConfig+0x62e>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c6:	f001 0303 	and.w	r3, r1, #3
 80049ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d001      	beq.n	80049d4 <HAL_RCC_OscConfig+0x5d4>
        return HAL_ERROR;
 80049d0:	2001      	movs	r0, #1
 80049d2:	e02b      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049d4:	f3c1 1105 	ubfx	r1, r1, #4, #6
 80049d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049da:	4299      	cmp	r1, r3
 80049dc:	d001      	beq.n	80049e2 <HAL_RCC_OscConfig+0x5e2>
        return HAL_ERROR;
 80049de:	2001      	movs	r0, #1
 80049e0:	e024      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049e2:	f3c0 0208 	ubfx	r2, r0, #0, #9
 80049e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d001      	beq.n	80049f2 <HAL_RCC_OscConfig+0x5f2>
        return HAL_ERROR;
 80049ee:	2001      	movs	r0, #1
 80049f0:	e01c      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049f2:	f3c0 2246 	ubfx	r2, r0, #9, #7
 80049f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049f8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d001      	beq.n	8004a02 <HAL_RCC_OscConfig+0x602>
        return HAL_ERROR;
 80049fe:	2001      	movs	r0, #1
 8004a00:	e014      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a02:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8004a06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a08:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d111      	bne.n	8004a32 <HAL_RCC_OscConfig+0x632>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a0e:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8004a12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a14:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a16:	4298      	cmp	r0, r3
 8004a18:	d00d      	beq.n	8004a36 <HAL_RCC_OscConfig+0x636>
        return HAL_ERROR;
 8004a1a:	2001      	movs	r0, #1
 8004a1c:	e006      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
    return HAL_ERROR;
 8004a1e:	2001      	movs	r0, #1
}
 8004a20:	4770      	bx	lr
        return HAL_ERROR;
 8004a22:	2001      	movs	r0, #1
 8004a24:	e002      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
        return HAL_ERROR;
 8004a26:	2001      	movs	r0, #1
 8004a28:	e000      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
  return HAL_OK;
 8004a2a:	2000      	movs	r0, #0
}
 8004a2c:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8004a2e:	2001      	movs	r0, #1
 8004a30:	e7fc      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
 8004a32:	2001      	movs	r0, #1
 8004a34:	e7fa      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
  return HAL_OK;
 8004a36:	2000      	movs	r0, #0
 8004a38:	e7f8      	b.n	8004a2c <HAL_RCC_OscConfig+0x62c>
 8004a3a:	bf00      	nop
 8004a3c:	58024400 	.word	0x58024400
 8004a40:	fffffc0c 	.word	0xfffffc0c
 8004a44:	ffff0007 	.word	0xffff0007

08004a48 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a48:	4b72      	ldr	r3, [pc, #456]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	f000 80db 	beq.w	8004c0c <HAL_RCC_GetSysClockFreq+0x1c4>
 8004a56:	2b18      	cmp	r3, #24
 8004a58:	d010      	beq.n	8004a7c <HAL_RCC_GetSysClockFreq+0x34>
 8004a5a:	b10b      	cbz	r3, 8004a60 <HAL_RCC_GetSysClockFreq+0x18>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004a5c:	486e      	ldr	r0, [pc, #440]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x1d0>)
 8004a5e:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a60:	4b6c      	ldr	r3, [pc, #432]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f013 0f20 	tst.w	r3, #32
 8004a68:	f000 80d2 	beq.w	8004c10 <HAL_RCC_GetSysClockFreq+0x1c8>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a6c:	4b69      	ldr	r3, [pc, #420]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8004a74:	4b69      	ldr	r3, [pc, #420]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004a76:	fa23 f000 	lsr.w	r0, r3, r0
 8004a7a:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a7c:	4a65      	ldr	r2, [pc, #404]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8004a7e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004a80:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004a84:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004a86:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a8a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004a8c:	f003 0301 	and.w	r3, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004a90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a92:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8004a96:	fb03 f302 	mul.w	r3, r3, r2
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	f000 80b5 	beq.w	8004c12 <HAL_RCC_GetSysClockFreq+0x1ca>
    {
      switch (pllsource)
 8004aa8:	2901      	cmp	r1, #1
 8004aaa:	d066      	beq.n	8004b7a <HAL_RCC_GetSysClockFreq+0x132>
 8004aac:	b1f9      	cbz	r1, 8004aee <HAL_RCC_GetSysClockFreq+0xa6>
 8004aae:	2902      	cmp	r1, #2
 8004ab0:	f000 808f 	beq.w	8004bd2 <HAL_RCC_GetSysClockFreq+0x18a>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ab4:	ee07 0a10 	vmov	s14, r0
 8004ab8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004abc:	ed9f 6a58 	vldr	s12, [pc, #352]	; 8004c20 <HAL_RCC_GetSysClockFreq+0x1d8>
 8004ac0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004ac4:	4b53      	ldr	r3, [pc, #332]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004acc:	ee06 3a90 	vmov	s13, r3
 8004ad0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004ad4:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8004c24 <HAL_RCC_GetSysClockFreq+0x1dc>
 8004ad8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004adc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8004aec:	e061      	b.n	8004bb2 <HAL_RCC_GetSysClockFreq+0x16a>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aee:	4b49      	ldr	r3, [pc, #292]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f013 0f20 	tst.w	r3, #32
 8004af6:	d023      	beq.n	8004b40 <HAL_RCC_GetSysClockFreq+0xf8>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004af8:	4946      	ldr	r1, [pc, #280]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8004afa:	680a      	ldr	r2, [r1, #0]
 8004afc:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004b00:	4b46      	ldr	r3, [pc, #280]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004b02:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b04:	ee07 3a10 	vmov	s14, r3
 8004b08:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004b0c:	ee07 0a10 	vmov	s14, r0
 8004b10:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8004b14:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8004b18:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8004b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1e:	ee06 3a90 	vmov	s13, r3
 8004b22:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004b26:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8004c24 <HAL_RCC_GetSysClockFreq+0x1dc>
 8004b2a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b3e:	e038      	b.n	8004bb2 <HAL_RCC_GetSysClockFreq+0x16a>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b40:	ee07 0a10 	vmov	s14, r0
 8004b44:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004b48:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8004c28 <HAL_RCC_GetSysClockFreq+0x1e0>
 8004b4c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004b50:	4b30      	ldr	r3, [pc, #192]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b58:	ee06 3a90 	vmov	s13, r3
 8004b5c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004b60:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8004c24 <HAL_RCC_GetSysClockFreq+0x1dc>
 8004b64:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004b68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b78:	e01b      	b.n	8004bb2 <HAL_RCC_GetSysClockFreq+0x16a>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b7a:	ee07 0a10 	vmov	s14, r0
 8004b7e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004b82:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8004c20 <HAL_RCC_GetSysClockFreq+0x1d8>
 8004b86:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004b8a:	4b22      	ldr	r3, [pc, #136]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b92:	ee06 3a90 	vmov	s13, r3
 8004b96:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004b9a:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8004c24 <HAL_RCC_GetSysClockFreq+0x1dc>
 8004b9e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bae:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004bb2:	4b18      	ldr	r3, [pc, #96]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004bba:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004bbc:	ee07 3a90 	vmov	s15, r3
 8004bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004bc8:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8004bcc:	ee17 0a90 	vmov	r0, s15
 8004bd0:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bd2:	ee07 0a10 	vmov	s14, r0
 8004bd6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004bda:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004c2c <HAL_RCC_GetSysClockFreq+0x1e4>
 8004bde:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004be2:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bea:	ee06 3a90 	vmov	s13, r3
 8004bee:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004bf2:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8004c24 <HAL_RCC_GetSysClockFreq+0x1dc>
 8004bf6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c06:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8004c0a:	e7d2      	b.n	8004bb2 <HAL_RCC_GetSysClockFreq+0x16a>
    sysclockfreq = HSE_VALUE;
 8004c0c:	4808      	ldr	r0, [pc, #32]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8004c0e:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004c10:	4802      	ldr	r0, [pc, #8]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x1d4>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8004c12:	4770      	bx	lr
 8004c14:	58024400 	.word	0x58024400
 8004c18:	003d0900 	.word	0x003d0900
 8004c1c:	03d09000 	.word	0x03d09000
 8004c20:	4a742400 	.word	0x4a742400
 8004c24:	39000000 	.word	0x39000000
 8004c28:	4c742400 	.word	0x4c742400
 8004c2c:	4c189680 	.word	0x4c189680
 8004c30:	02625a00 	.word	0x02625a00

08004c34 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004c34:	2800      	cmp	r0, #0
 8004c36:	f000 8136 	beq.w	8004ea6 <HAL_RCC_ClockConfig+0x272>
 8004c3a:	4603      	mov	r3, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c3c:	4a9c      	ldr	r2, [pc, #624]	; (8004eb0 <HAL_RCC_ClockConfig+0x27c>)
 8004c3e:	6812      	ldr	r2, [r2, #0]
 8004c40:	f002 020f 	and.w	r2, r2, #15
 8004c44:	428a      	cmp	r2, r1
 8004c46:	d20c      	bcs.n	8004c62 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c48:	4899      	ldr	r0, [pc, #612]	; (8004eb0 <HAL_RCC_ClockConfig+0x27c>)
 8004c4a:	6802      	ldr	r2, [r0, #0]
 8004c4c:	f022 020f 	bic.w	r2, r2, #15
 8004c50:	430a      	orrs	r2, r1
 8004c52:	6002      	str	r2, [r0, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c54:	6802      	ldr	r2, [r0, #0]
 8004c56:	f002 020f 	and.w	r2, r2, #15
 8004c5a:	428a      	cmp	r2, r1
 8004c5c:	d001      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x2e>
      return HAL_ERROR;
 8004c5e:	2001      	movs	r0, #1
}
 8004c60:	4770      	bx	lr
{
 8004c62:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	f012 0f04 	tst.w	r2, #4
 8004c6a:	d00c      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c6c:	6918      	ldr	r0, [r3, #16]
 8004c6e:	4a91      	ldr	r2, [pc, #580]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004c70:	6992      	ldr	r2, [r2, #24]
 8004c72:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004c76:	4290      	cmp	r0, r2
 8004c78:	d905      	bls.n	8004c86 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c7a:	4c8e      	ldr	r4, [pc, #568]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004c7c:	69a2      	ldr	r2, [r4, #24]
 8004c7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c82:	4310      	orrs	r0, r2
 8004c84:	61a0      	str	r0, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	f012 0f08 	tst.w	r2, #8
 8004c8c:	d00c      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c8e:	6958      	ldr	r0, [r3, #20]
 8004c90:	4a88      	ldr	r2, [pc, #544]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004c92:	69d2      	ldr	r2, [r2, #28]
 8004c94:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004c98:	4290      	cmp	r0, r2
 8004c9a:	d905      	bls.n	8004ca8 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c9c:	4c85      	ldr	r4, [pc, #532]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004c9e:	69e2      	ldr	r2, [r4, #28]
 8004ca0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ca4:	4310      	orrs	r0, r2
 8004ca6:	61e0      	str	r0, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	f012 0f10 	tst.w	r2, #16
 8004cae:	d00c      	beq.n	8004cca <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004cb0:	6998      	ldr	r0, [r3, #24]
 8004cb2:	4a80      	ldr	r2, [pc, #512]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004cb4:	69d2      	ldr	r2, [r2, #28]
 8004cb6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004cba:	4290      	cmp	r0, r2
 8004cbc:	d905      	bls.n	8004cca <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004cbe:	4c7d      	ldr	r4, [pc, #500]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004cc0:	69e2      	ldr	r2, [r4, #28]
 8004cc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cc6:	4310      	orrs	r0, r2
 8004cc8:	61e0      	str	r0, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	f012 0f20 	tst.w	r2, #32
 8004cd0:	d00c      	beq.n	8004cec <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004cd2:	69d8      	ldr	r0, [r3, #28]
 8004cd4:	4a77      	ldr	r2, [pc, #476]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004cd6:	6a12      	ldr	r2, [r2, #32]
 8004cd8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004cdc:	4290      	cmp	r0, r2
 8004cde:	d905      	bls.n	8004cec <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004ce0:	4c74      	ldr	r4, [pc, #464]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004ce2:	6a22      	ldr	r2, [r4, #32]
 8004ce4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ce8:	4310      	orrs	r0, r2
 8004cea:	6220      	str	r0, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	f012 0f02 	tst.w	r2, #2
 8004cf2:	d00c      	beq.n	8004d0e <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cf4:	68d8      	ldr	r0, [r3, #12]
 8004cf6:	4a6f      	ldr	r2, [pc, #444]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004cf8:	6992      	ldr	r2, [r2, #24]
 8004cfa:	f002 020f 	and.w	r2, r2, #15
 8004cfe:	4290      	cmp	r0, r2
 8004d00:	d905      	bls.n	8004d0e <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d02:	4c6c      	ldr	r4, [pc, #432]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004d04:	69a2      	ldr	r2, [r4, #24]
 8004d06:	f022 020f 	bic.w	r2, r2, #15
 8004d0a:	4310      	orrs	r0, r2
 8004d0c:	61a0      	str	r0, [r4, #24]
 8004d0e:	461c      	mov	r4, r3
 8004d10:	460d      	mov	r5, r1
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f013 0f01 	tst.w	r3, #1
 8004d18:	d041      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x16a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004d1a:	4a66      	ldr	r2, [pc, #408]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004d1c:	6993      	ldr	r3, [r2, #24]
 8004d1e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d22:	68a1      	ldr	r1, [r4, #8]
 8004d24:	430b      	orrs	r3, r1
 8004d26:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d28:	6863      	ldr	r3, [r4, #4]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d00a      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x110>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d027      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x14e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d02c      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x15c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d36:	4a5f      	ldr	r2, [pc, #380]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004d38:	6812      	ldr	r2, [r2, #0]
 8004d3a:	f012 0f04 	tst.w	r2, #4
 8004d3e:	d106      	bne.n	8004d4e <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 8004d40:	2001      	movs	r0, #1
 8004d42:	e0af      	b.n	8004ea4 <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d44:	6812      	ldr	r2, [r2, #0]
 8004d46:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004d4a:	f000 80ae 	beq.w	8004eaa <HAL_RCC_ClockConfig+0x276>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d4e:	4959      	ldr	r1, [pc, #356]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004d50:	690a      	ldr	r2, [r1, #16]
 8004d52:	f022 0207 	bic.w	r2, r2, #7
 8004d56:	4313      	orrs	r3, r2
 8004d58:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8004d5a:	f7ff f827 	bl	8003dac <HAL_GetTick>
 8004d5e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d60:	4b54      	ldr	r3, [pc, #336]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d68:	6862      	ldr	r2, [r4, #4]
 8004d6a:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004d6e:	d016      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d70:	f7ff f81c 	bl	8003dac <HAL_GetTick>
 8004d74:	1b80      	subs	r0, r0, r6
 8004d76:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d7a:	4298      	cmp	r0, r3
 8004d7c:	d9f0      	bls.n	8004d60 <HAL_RCC_ClockConfig+0x12c>
            return HAL_TIMEOUT;
 8004d7e:	2003      	movs	r0, #3
 8004d80:	e090      	b.n	8004ea4 <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d82:	4a4c      	ldr	r2, [pc, #304]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004d84:	6812      	ldr	r2, [r2, #0]
 8004d86:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004d8a:	d1e0      	bne.n	8004d4e <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	e089      	b.n	8004ea4 <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d90:	4a48      	ldr	r2, [pc, #288]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004d92:	6812      	ldr	r2, [r2, #0]
 8004d94:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004d98:	d1d9      	bne.n	8004d4e <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 8004d9a:	2001      	movs	r0, #1
 8004d9c:	e082      	b.n	8004ea4 <HAL_RCC_ClockConfig+0x270>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	f013 0f02 	tst.w	r3, #2
 8004da4:	d00c      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x18c>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004da6:	68e2      	ldr	r2, [r4, #12]
 8004da8:	4b42      	ldr	r3, [pc, #264]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d205      	bcs.n	8004dc0 <HAL_RCC_ClockConfig+0x18c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db4:	493f      	ldr	r1, [pc, #252]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004db6:	698b      	ldr	r3, [r1, #24]
 8004db8:	f023 030f 	bic.w	r3, r3, #15
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc0:	4b3b      	ldr	r3, [pc, #236]	; (8004eb0 <HAL_RCC_ClockConfig+0x27c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	42ab      	cmp	r3, r5
 8004dca:	d90c      	bls.n	8004de6 <HAL_RCC_ClockConfig+0x1b2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dcc:	4a38      	ldr	r2, [pc, #224]	; (8004eb0 <HAL_RCC_ClockConfig+0x27c>)
 8004dce:	6813      	ldr	r3, [r2, #0]
 8004dd0:	f023 030f 	bic.w	r3, r3, #15
 8004dd4:	432b      	orrs	r3, r5
 8004dd6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd8:	6813      	ldr	r3, [r2, #0]
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	42ab      	cmp	r3, r5
 8004de0:	d001      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x1b2>
      return HAL_ERROR;
 8004de2:	2001      	movs	r0, #1
 8004de4:	e05e      	b.n	8004ea4 <HAL_RCC_ClockConfig+0x270>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	f013 0f04 	tst.w	r3, #4
 8004dec:	d00c      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x1d4>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004dee:	6922      	ldr	r2, [r4, #16]
 8004df0:	4b30      	ldr	r3, [pc, #192]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d205      	bcs.n	8004e08 <HAL_RCC_ClockConfig+0x1d4>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004dfc:	492d      	ldr	r1, [pc, #180]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004dfe:	698b      	ldr	r3, [r1, #24]
 8004e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e04:	431a      	orrs	r2, r3
 8004e06:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	f013 0f08 	tst.w	r3, #8
 8004e0e:	d00c      	beq.n	8004e2a <HAL_RCC_ClockConfig+0x1f6>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e10:	6962      	ldr	r2, [r4, #20]
 8004e12:	4b28      	ldr	r3, [pc, #160]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d205      	bcs.n	8004e2a <HAL_RCC_ClockConfig+0x1f6>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e1e:	4925      	ldr	r1, [pc, #148]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004e20:	69cb      	ldr	r3, [r1, #28]
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	431a      	orrs	r2, r3
 8004e28:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	f013 0f10 	tst.w	r3, #16
 8004e30:	d00c      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x218>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e32:	69a2      	ldr	r2, [r4, #24]
 8004e34:	4b1f      	ldr	r3, [pc, #124]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d205      	bcs.n	8004e4c <HAL_RCC_ClockConfig+0x218>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e40:	491c      	ldr	r1, [pc, #112]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004e42:	69cb      	ldr	r3, [r1, #28]
 8004e44:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	f013 0f20 	tst.w	r3, #32
 8004e52:	d00c      	beq.n	8004e6e <HAL_RCC_ClockConfig+0x23a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e54:	69e2      	ldr	r2, [r4, #28]
 8004e56:	4b17      	ldr	r3, [pc, #92]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d205      	bcs.n	8004e6e <HAL_RCC_ClockConfig+0x23a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004e62:	4914      	ldr	r1, [pc, #80]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004e64:	6a0b      	ldr	r3, [r1, #32]
 8004e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e6e:	f7ff fdeb 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 8004e72:	4910      	ldr	r1, [pc, #64]	; (8004eb4 <HAL_RCC_ClockConfig+0x280>)
 8004e74:	698b      	ldr	r3, [r1, #24]
 8004e76:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004e7a:	4a0f      	ldr	r2, [pc, #60]	; (8004eb8 <HAL_RCC_ClockConfig+0x284>)
 8004e7c:	5cd3      	ldrb	r3, [r2, r3]
 8004e7e:	f003 031f 	and.w	r3, r3, #31
 8004e82:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e84:	698b      	ldr	r3, [r1, #24]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	5cd3      	ldrb	r3, [r2, r3]
 8004e8c:	f003 031f 	and.w	r3, r3, #31
 8004e90:	fa20 f303 	lsr.w	r3, r0, r3
 8004e94:	4a09      	ldr	r2, [pc, #36]	; (8004ebc <HAL_RCC_ClockConfig+0x288>)
 8004e96:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8004e98:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <HAL_RCC_ClockConfig+0x28c>)
 8004e9a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8004e9c:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <HAL_RCC_ClockConfig+0x290>)
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	f7fe ff22 	bl	8003ce8 <HAL_InitTick>
}
 8004ea4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004ea6:	2001      	movs	r0, #1
 8004ea8:	4770      	bx	lr
          return HAL_ERROR;
 8004eaa:	2001      	movs	r0, #1
 8004eac:	e7fa      	b.n	8004ea4 <HAL_RCC_ClockConfig+0x270>
 8004eae:	bf00      	nop
 8004eb0:	52002000 	.word	0x52002000
 8004eb4:	58024400 	.word	0x58024400
 8004eb8:	08007ff4 	.word	0x08007ff4
 8004ebc:	24000004 	.word	0x24000004
 8004ec0:	24000000 	.word	0x24000000
 8004ec4:	2400000c 	.word	0x2400000c

08004ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec8:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004eca:	f7ff fdbd 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 8004ece:	4a0b      	ldr	r2, [pc, #44]	; (8004efc <HAL_RCC_GetHCLKFreq+0x34>)
 8004ed0:	6993      	ldr	r3, [r2, #24]
 8004ed2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004ed6:	490a      	ldr	r1, [pc, #40]	; (8004f00 <HAL_RCC_GetHCLKFreq+0x38>)
 8004ed8:	5ccb      	ldrb	r3, [r1, r3]
 8004eda:	f003 031f 	and.w	r3, r3, #31
 8004ede:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ee2:	6992      	ldr	r2, [r2, #24]
 8004ee4:	f002 020f 	and.w	r2, r2, #15
 8004ee8:	5c88      	ldrb	r0, [r1, r2]
 8004eea:	f000 001f 	and.w	r0, r0, #31
 8004eee:	fa23 f000 	lsr.w	r0, r3, r0
 8004ef2:	4a04      	ldr	r2, [pc, #16]	; (8004f04 <HAL_RCC_GetHCLKFreq+0x3c>)
 8004ef4:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ef6:	4a04      	ldr	r2, [pc, #16]	; (8004f08 <HAL_RCC_GetHCLKFreq+0x40>)
 8004ef8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004efa:	bd08      	pop	{r3, pc}
 8004efc:	58024400 	.word	0x58024400
 8004f00:	08007ff4 	.word	0x08007ff4
 8004f04:	24000004 	.word	0x24000004
 8004f08:	24000000 	.word	0x24000000

08004f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f0c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004f0e:	f7ff ffdb 	bl	8004ec8 <HAL_RCC_GetHCLKFreq>
 8004f12:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004f1a:	4a04      	ldr	r2, [pc, #16]	; (8004f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f1c:	5cd3      	ldrb	r3, [r2, r3]
 8004f1e:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004f22:	40d8      	lsrs	r0, r3
 8004f24:	bd08      	pop	{r3, pc}
 8004f26:	bf00      	nop
 8004f28:	58024400 	.word	0x58024400
 8004f2c:	08007ff4 	.word	0x08007ff4

08004f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f30:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004f32:	f7ff ffc9 	bl	8004ec8 <HAL_RCC_GetHCLKFreq>
 8004f36:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004f3e:	4a04      	ldr	r2, [pc, #16]	; (8004f50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f40:	5cd3      	ldrb	r3, [r2, r3]
 8004f42:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004f46:	40d8      	lsrs	r0, r3
 8004f48:	bd08      	pop	{r3, pc}
 8004f4a:	bf00      	nop
 8004f4c:	58024400 	.word	0x58024400
 8004f50:	08007ff4 	.word	0x08007ff4

08004f54 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f54:	4b40      	ldr	r3, [pc, #256]	; (8005058 <RCCEx_PLL2_Config+0x104>)
 8004f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d079      	beq.n	8005054 <RCCEx_PLL2_Config+0x100>
{
 8004f60:	b570      	push	{r4, r5, r6, lr}
 8004f62:	460e      	mov	r6, r1
 8004f64:	4604      	mov	r4, r0


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f66:	4a3c      	ldr	r2, [pc, #240]	; (8005058 <RCCEx_PLL2_Config+0x104>)
 8004f68:	6813      	ldr	r3, [r2, #0]
 8004f6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f70:	f7fe ff1c 	bl	8003dac <HAL_GetTick>
 8004f74:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f76:	4b38      	ldr	r3, [pc, #224]	; (8005058 <RCCEx_PLL2_Config+0x104>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004f7e:	d006      	beq.n	8004f8e <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004f80:	f7fe ff14 	bl	8003dac <HAL_GetTick>
 8004f84:	1b40      	subs	r0, r0, r5
 8004f86:	2802      	cmp	r0, #2
 8004f88:	d9f5      	bls.n	8004f76 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8004f8a:	2003      	movs	r0, #3

  }


  return status;
}
 8004f8c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f8e:	4b32      	ldr	r3, [pc, #200]	; (8005058 <RCCEx_PLL2_Config+0x104>)
 8004f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f92:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8004f96:	6821      	ldr	r1, [r4, #0]
 8004f98:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8004f9c:	629a      	str	r2, [r3, #40]	; 0x28
 8004f9e:	6862      	ldr	r2, [r4, #4]
 8004fa0:	3a01      	subs	r2, #1
 8004fa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fa6:	68a1      	ldr	r1, [r4, #8]
 8004fa8:	3901      	subs	r1, #1
 8004faa:	0249      	lsls	r1, r1, #9
 8004fac:	b289      	uxth	r1, r1
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	68e1      	ldr	r1, [r4, #12]
 8004fb2:	3901      	subs	r1, #1
 8004fb4:	0409      	lsls	r1, r1, #16
 8004fb6:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	6921      	ldr	r1, [r4, #16]
 8004fbe:	3901      	subs	r1, #1
 8004fc0:	0609      	lsls	r1, r1, #24
 8004fc2:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fcc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004fd0:	6961      	ldr	r1, [r4, #20]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd8:	f022 0220 	bic.w	r2, r2, #32
 8004fdc:	69a1      	ldr	r1, [r4, #24]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe4:	f022 0210 	bic.w	r2, r2, #16
 8004fe8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004fea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004fec:	4a1b      	ldr	r2, [pc, #108]	; (800505c <RCCEx_PLL2_Config+0x108>)
 8004fee:	400a      	ands	r2, r1
 8004ff0:	69e1      	ldr	r1, [r4, #28]
 8004ff2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004ff6:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffa:	f042 0210 	orr.w	r2, r2, #16
 8004ffe:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8005000:	b9c6      	cbnz	r6, 8005034 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005002:	461a      	mov	r2, r3
 8005004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005006:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800500a:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 800500c:	4a12      	ldr	r2, [pc, #72]	; (8005058 <RCCEx_PLL2_Config+0x104>)
 800500e:	6813      	ldr	r3, [r2, #0]
 8005010:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005014:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005016:	f7fe fec9 	bl	8003dac <HAL_GetTick>
 800501a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800501c:	4b0e      	ldr	r3, [pc, #56]	; (8005058 <RCCEx_PLL2_Config+0x104>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005024:	d114      	bne.n	8005050 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005026:	f7fe fec1 	bl	8003dac <HAL_GetTick>
 800502a:	1b00      	subs	r0, r0, r4
 800502c:	2802      	cmp	r0, #2
 800502e:	d9f5      	bls.n	800501c <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8005030:	2003      	movs	r0, #3
 8005032:	e7ab      	b.n	8004f8c <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8005034:	2e01      	cmp	r6, #1
 8005036:	d005      	beq.n	8005044 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005038:	4a07      	ldr	r2, [pc, #28]	; (8005058 <RCCEx_PLL2_Config+0x104>)
 800503a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800503c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005040:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005042:	e7e3      	b.n	800500c <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005044:	4a04      	ldr	r2, [pc, #16]	; (8005058 <RCCEx_PLL2_Config+0x104>)
 8005046:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005048:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800504c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800504e:	e7dd      	b.n	800500c <RCCEx_PLL2_Config+0xb8>
  return status;
 8005050:	2000      	movs	r0, #0
 8005052:	e79b      	b.n	8004f8c <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8005054:	2001      	movs	r0, #1
}
 8005056:	4770      	bx	lr
 8005058:	58024400 	.word	0x58024400
 800505c:	ffff0007 	.word	0xffff0007

08005060 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005060:	4b40      	ldr	r3, [pc, #256]	; (8005164 <RCCEx_PLL3_Config+0x104>)
 8005062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005064:	f003 0303 	and.w	r3, r3, #3
 8005068:	2b03      	cmp	r3, #3
 800506a:	d079      	beq.n	8005160 <RCCEx_PLL3_Config+0x100>
{
 800506c:	b570      	push	{r4, r5, r6, lr}
 800506e:	460e      	mov	r6, r1
 8005070:	4604      	mov	r4, r0


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005072:	4a3c      	ldr	r2, [pc, #240]	; (8005164 <RCCEx_PLL3_Config+0x104>)
 8005074:	6813      	ldr	r3, [r2, #0]
 8005076:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800507a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800507c:	f7fe fe96 	bl	8003dac <HAL_GetTick>
 8005080:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005082:	4b38      	ldr	r3, [pc, #224]	; (8005164 <RCCEx_PLL3_Config+0x104>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800508a:	d006      	beq.n	800509a <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800508c:	f7fe fe8e 	bl	8003dac <HAL_GetTick>
 8005090:	1b40      	subs	r0, r0, r5
 8005092:	2802      	cmp	r0, #2
 8005094:	d9f5      	bls.n	8005082 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8005096:	2003      	movs	r0, #3

  }


  return status;
}
 8005098:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800509a:	4b32      	ldr	r3, [pc, #200]	; (8005164 <RCCEx_PLL3_Config+0x104>)
 800509c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800509e:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 80050a2:	6821      	ldr	r1, [r4, #0]
 80050a4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80050a8:	629a      	str	r2, [r3, #40]	; 0x28
 80050aa:	6862      	ldr	r2, [r4, #4]
 80050ac:	3a01      	subs	r2, #1
 80050ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050b2:	68a1      	ldr	r1, [r4, #8]
 80050b4:	3901      	subs	r1, #1
 80050b6:	0249      	lsls	r1, r1, #9
 80050b8:	b289      	uxth	r1, r1
 80050ba:	430a      	orrs	r2, r1
 80050bc:	68e1      	ldr	r1, [r4, #12]
 80050be:	3901      	subs	r1, #1
 80050c0:	0409      	lsls	r1, r1, #16
 80050c2:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80050c6:	430a      	orrs	r2, r1
 80050c8:	6921      	ldr	r1, [r4, #16]
 80050ca:	3901      	subs	r1, #1
 80050cc:	0609      	lsls	r1, r1, #24
 80050ce:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80050d2:	430a      	orrs	r2, r1
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80050d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80050dc:	6961      	ldr	r1, [r4, #20]
 80050de:	430a      	orrs	r2, r1
 80050e0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80050e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80050e8:	69a1      	ldr	r1, [r4, #24]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80050ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050f4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80050f6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80050f8:	4a1b      	ldr	r2, [pc, #108]	; (8005168 <RCCEx_PLL3_Config+0x108>)
 80050fa:	400a      	ands	r2, r1
 80050fc:	69e1      	ldr	r1, [r4, #28]
 80050fe:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8005102:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005106:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800510a:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800510c:	b9c6      	cbnz	r6, 8005140 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800510e:	461a      	mov	r2, r3
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005116:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8005118:	4a12      	ldr	r2, [pc, #72]	; (8005164 <RCCEx_PLL3_Config+0x104>)
 800511a:	6813      	ldr	r3, [r2, #0]
 800511c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005120:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005122:	f7fe fe43 	bl	8003dac <HAL_GetTick>
 8005126:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005128:	4b0e      	ldr	r3, [pc, #56]	; (8005164 <RCCEx_PLL3_Config+0x104>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005130:	d114      	bne.n	800515c <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005132:	f7fe fe3b 	bl	8003dac <HAL_GetTick>
 8005136:	1b00      	subs	r0, r0, r4
 8005138:	2802      	cmp	r0, #2
 800513a:	d9f5      	bls.n	8005128 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 800513c:	2003      	movs	r0, #3
 800513e:	e7ab      	b.n	8005098 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8005140:	2e01      	cmp	r6, #1
 8005142:	d005      	beq.n	8005150 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005144:	4a07      	ldr	r2, [pc, #28]	; (8005164 <RCCEx_PLL3_Config+0x104>)
 8005146:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005148:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800514c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800514e:	e7e3      	b.n	8005118 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005150:	4a04      	ldr	r2, [pc, #16]	; (8005164 <RCCEx_PLL3_Config+0x104>)
 8005152:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005154:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005158:	62d3      	str	r3, [r2, #44]	; 0x2c
 800515a:	e7dd      	b.n	8005118 <RCCEx_PLL3_Config+0xb8>
  return status;
 800515c:	2000      	movs	r0, #0
 800515e:	e79b      	b.n	8005098 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8005160:	2001      	movs	r0, #1
}
 8005162:	4770      	bx	lr
 8005164:	58024400 	.word	0x58024400
 8005168:	ffff0007 	.word	0xffff0007

0800516c <HAL_RCCEx_PeriphCLKConfig>:
{
 800516c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005170:	6803      	ldr	r3, [r0, #0]
 8005172:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005176:	d02b      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8005178:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800517a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800517e:	d018      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8005180:	d907      	bls.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005182:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005186:	d01d      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8005188:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800518c:	d12e      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x80>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800518e:	2500      	movs	r5, #0
 8005190:	e006      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x34>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8005192:	bb5b      	cbnz	r3, 80051ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005194:	4a93      	ldr	r2, [pc, #588]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005196:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800519c:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800519e:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80051a0:	4a90      	ldr	r2, [pc, #576]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80051a2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80051a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80051a8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80051aa:	430b      	orrs	r3, r1
 80051ac:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051ae:	2600      	movs	r6, #0
 80051b0:	e010      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051b2:	2102      	movs	r1, #2
 80051b4:	3004      	adds	r0, #4
 80051b6:	f7ff fecd 	bl	8004f54 <RCCEx_PLL2_Config>
 80051ba:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80051bc:	2d00      	cmp	r5, #0
 80051be:	d0ef      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80051c0:	462e      	mov	r6, r5
 80051c2:	e007      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051c4:	2102      	movs	r1, #2
 80051c6:	3024      	adds	r0, #36	; 0x24
 80051c8:	f7ff ff4a 	bl	8005060 <RCCEx_PLL3_Config>
 80051cc:	4605      	mov	r5, r0
      break;
 80051ce:	e7f5      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x50>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051d0:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051d2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80051da:	d017      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai1ClockSelection)
 80051dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d832      	bhi.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80051e2:	e8df f003 	tbb	[pc, r3]
 80051e6:	2406      	.short	0x2406
 80051e8:	0b2a      	.short	0x0b2a
 80051ea:	0b          	.byte	0x0b
 80051eb:	00          	.byte	0x00
      ret = HAL_ERROR;
 80051ec:	2601      	movs	r6, #1
 80051ee:	4635      	mov	r5, r6
 80051f0:	e7f0      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051f2:	4a7c      	ldr	r2, [pc, #496]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80051f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80051f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051fa:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80051fc:	bb3d      	cbnz	r5, 800524e <HAL_RCCEx_PeriphCLKConfig+0xe2>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051fe:	4a79      	ldr	r2, [pc, #484]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005200:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005202:	f023 0307 	bic.w	r3, r3, #7
 8005206:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005208:	430b      	orrs	r3, r1
 800520a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005212:	d033      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai23ClockSelection)
 8005214:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005216:	2b80      	cmp	r3, #128	; 0x80
 8005218:	d044      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
 800521a:	d81a      	bhi.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 800521c:	b30b      	cbz	r3, 8005262 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 800521e:	2b40      	cmp	r3, #64	; 0x40
 8005220:	d11c      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xf0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005222:	2100      	movs	r1, #0
 8005224:	1d20      	adds	r0, r4, #4
 8005226:	f7ff fe95 	bl	8004f54 <RCCEx_PLL2_Config>
 800522a:	4605      	mov	r5, r0
      break;
 800522c:	e01e      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800522e:	2100      	movs	r1, #0
 8005230:	1d20      	adds	r0, r4, #4
 8005232:	f7ff fe8f 	bl	8004f54 <RCCEx_PLL2_Config>
 8005236:	4605      	mov	r5, r0
      break;
 8005238:	e7e0      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800523a:	2100      	movs	r1, #0
 800523c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005240:	f7ff ff0e 	bl	8005060 <RCCEx_PLL3_Config>
 8005244:	4605      	mov	r5, r0
      break;
 8005246:	e7d9      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = HAL_ERROR;
 8005248:	2601      	movs	r6, #1
 800524a:	4635      	mov	r5, r6
 800524c:	e7de      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800524e:	462e      	mov	r6, r5
 8005250:	e7dc      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai23ClockSelection)
 8005252:	2bc0      	cmp	r3, #192	; 0xc0
 8005254:	d00a      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8005256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800525a:	d007      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = HAL_ERROR;
 800525c:	2601      	movs	r6, #1
 800525e:	4635      	mov	r5, r6
 8005260:	e00c      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x110>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005262:	4a60      	ldr	r2, [pc, #384]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005264:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800526a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800526c:	bb0d      	cbnz	r5, 80052b2 <HAL_RCCEx_PeriphCLKConfig+0x146>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800526e:	4a5d      	ldr	r2, [pc, #372]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005270:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005272:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8005276:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005278:	430b      	orrs	r3, r1
 800527a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005282:	d02f      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
    switch(PeriphClkInit->Sai4AClockSelection)
 8005284:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8005288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800528c:	d03e      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800528e:	d812      	bhi.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005290:	b1d3      	cbz	r3, 80052c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005292:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005296:	d114      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005298:	2100      	movs	r1, #0
 800529a:	1d20      	adds	r0, r4, #4
 800529c:	f7ff fe5a 	bl	8004f54 <RCCEx_PLL2_Config>
 80052a0:	4605      	mov	r5, r0
      break;
 80052a2:	e016      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80052a4:	2100      	movs	r1, #0
 80052a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80052aa:	f7ff fed9 	bl	8005060 <RCCEx_PLL3_Config>
 80052ae:	4605      	mov	r5, r0
      break;
 80052b0:	e7dc      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x100>
 80052b2:	462e      	mov	r6, r5
 80052b4:	e7e2      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai4AClockSelection)
 80052b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80052ba:	d00a      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80052bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052c0:	d007      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 80052c2:	2601      	movs	r6, #1
 80052c4:	4635      	mov	r5, r6
 80052c6:	e00d      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052c8:	4a46      	ldr	r2, [pc, #280]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80052ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80052cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80052d2:	bb15      	cbnz	r5, 800531a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80052d4:	4a43      	ldr	r2, [pc, #268]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80052d6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80052d8:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80052dc:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80052e0:	430b      	orrs	r3, r1
 80052e2:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80052ea:	d02f      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai4BClockSelection)
 80052ec:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80052f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052f4:	d037      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80052f6:	d812      	bhi.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80052f8:	b1d3      	cbz	r3, 8005330 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 80052fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052fe:	d114      	bne.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x1be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005300:	2100      	movs	r1, #0
 8005302:	1d20      	adds	r0, r4, #4
 8005304:	f7ff fe26 	bl	8004f54 <RCCEx_PLL2_Config>
 8005308:	4605      	mov	r5, r0
      break;
 800530a:	e016      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800530c:	2100      	movs	r1, #0
 800530e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005312:	f7ff fea5 	bl	8005060 <RCCEx_PLL3_Config>
 8005316:	4605      	mov	r5, r0
      break;
 8005318:	e7db      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800531a:	462e      	mov	r6, r5
 800531c:	e7e2      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
    switch(PeriphClkInit->Sai4BClockSelection)
 800531e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005322:	d00a      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005324:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005328:	d007      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      ret = HAL_ERROR;
 800532a:	2601      	movs	r6, #1
 800532c:	4635      	mov	r5, r6
 800532e:	e00d      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005330:	4a2c      	ldr	r2, [pc, #176]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005332:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005338:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800533a:	b9dd      	cbnz	r5, 8005374 <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800533c:	4a29      	ldr	r2, [pc, #164]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800533e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005340:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005344:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8005348:	430b      	orrs	r3, r1
 800534a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005352:	d02a      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x23e>
    switch(PeriphClkInit->QspiClockSelection)
 8005354:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005356:	2b10      	cmp	r3, #16
 8005358:	d012      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x214>
 800535a:	d90d      	bls.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800535c:	2b20      	cmp	r3, #32
 800535e:	d01d      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005360:	2b30      	cmp	r3, #48	; 0x30
 8005362:	d012      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005364:	e009      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005366:	2100      	movs	r1, #0
 8005368:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800536c:	f7ff fe78 	bl	8005060 <RCCEx_PLL3_Config>
 8005370:	4605      	mov	r5, r0
      break;
 8005372:	e7e2      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005374:	462e      	mov	r6, r5
 8005376:	e7e9      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->QspiClockSelection)
 8005378:	b13b      	cbz	r3, 800538a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      ret = HAL_ERROR;
 800537a:	2601      	movs	r6, #1
 800537c:	4635      	mov	r5, r6
 800537e:	e014      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005380:	4a18      	ldr	r2, [pc, #96]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005382:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005388:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800538a:	b96d      	cbnz	r5, 80053a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800538c:	4a15      	ldr	r2, [pc, #84]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800538e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005390:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005394:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005396:	430b      	orrs	r3, r1
 8005398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800539a:	e006      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x23e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800539c:	2102      	movs	r1, #2
 800539e:	1d20      	adds	r0, r4, #4
 80053a0:	f7ff fdd8 	bl	8004f54 <RCCEx_PLL2_Config>
 80053a4:	4605      	mov	r5, r0
      break;
 80053a6:	e7f0      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80053a8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80053b0:	d027      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->Spi123ClockSelection)
 80053b2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80053b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b8:	d03e      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80053ba:	d809      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80053bc:	b1a3      	cbz	r3, 80053e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80053be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c2:	d10b      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x270>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053c4:	2100      	movs	r1, #0
 80053c6:	1d20      	adds	r0, r4, #4
 80053c8:	f7ff fdc4 	bl	8004f54 <RCCEx_PLL2_Config>
 80053cc:	4605      	mov	r5, r0
      break;
 80053ce:	e010      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Spi123ClockSelection)
 80053d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053d4:	d00d      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80053d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053da:	d00a      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = HAL_ERROR;
 80053dc:	2601      	movs	r6, #1
 80053de:	4635      	mov	r5, r6
 80053e0:	e00f      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80053e2:	bf00      	nop
 80053e4:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e8:	4a93      	ldr	r2, [pc, #588]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80053ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80053ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80053f2:	bb45      	cbnz	r5, 8005446 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80053f4:	4a90      	ldr	r2, [pc, #576]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80053f6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80053f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80053fe:	430b      	orrs	r3, r1
 8005400:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005408:	d033      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Spi45ClockSelection)
 800540a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800540c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005410:	d027      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8005412:	d81a      	bhi.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005414:	b13b      	cbz	r3, 8005426 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800541a:	d11f      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800541c:	2101      	movs	r1, #1
 800541e:	1d20      	adds	r0, r4, #4
 8005420:	f7ff fd98 	bl	8004f54 <RCCEx_PLL2_Config>
 8005424:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005426:	bb1d      	cbnz	r5, 8005470 <HAL_RCCEx_PeriphCLKConfig+0x304>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005428:	4a83      	ldr	r2, [pc, #524]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800542a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800542c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005430:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005432:	430b      	orrs	r3, r1
 8005434:	6513      	str	r3, [r2, #80]	; 0x50
 8005436:	e01c      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005438:	2100      	movs	r1, #0
 800543a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800543e:	f7ff fe0f 	bl	8005060 <RCCEx_PLL3_Config>
 8005442:	4605      	mov	r5, r0
      break;
 8005444:	e7d5      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005446:	462e      	mov	r6, r5
 8005448:	e7db      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->Spi45ClockSelection)
 800544a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800544e:	d0ea      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005454:	d0e7      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005456:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800545a:	d0e4      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      ret = HAL_ERROR;
 800545c:	2601      	movs	r6, #1
 800545e:	4635      	mov	r5, r6
 8005460:	e007      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005462:	2101      	movs	r1, #1
 8005464:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005468:	f7ff fdfa 	bl	8005060 <RCCEx_PLL3_Config>
 800546c:	4605      	mov	r5, r0
      break;
 800546e:	e7da      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005470:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005478:	d02c      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Spi6ClockSelection)
 800547a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800547e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005482:	d01f      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8005484:	d812      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x340>
 8005486:	b13b      	cbz	r3, 8005498 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8005488:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800548c:	d117      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x352>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800548e:	2101      	movs	r1, #1
 8005490:	1d20      	adds	r0, r4, #4
 8005492:	f7ff fd5f 	bl	8004f54 <RCCEx_PLL2_Config>
 8005496:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005498:	b9dd      	cbnz	r5, 80054d2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800549a:	4a67      	ldr	r2, [pc, #412]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800549c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800549e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80054a2:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80054a6:	430b      	orrs	r3, r1
 80054a8:	6593      	str	r3, [r2, #88]	; 0x58
 80054aa:	e013      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Spi6ClockSelection)
 80054ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b0:	d0f2      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 80054b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054b6:	d0ef      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 80054b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054bc:	d0ec      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = HAL_ERROR;
 80054be:	2601      	movs	r6, #1
 80054c0:	4635      	mov	r5, r6
 80054c2:	e007      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054c4:	2101      	movs	r1, #1
 80054c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80054ca:	f7ff fdc9 	bl	8005060 <RCCEx_PLL3_Config>
 80054ce:	4605      	mov	r5, r0
      break;
 80054d0:	e7e2      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 80054d2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80054da:	d01f      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FdcanClockSelection)
 80054dc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80054de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054e2:	d006      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80054e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054e8:	d011      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80054ea:	b13b      	cbz	r3, 80054fc <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = HAL_ERROR;
 80054ec:	2601      	movs	r6, #1
 80054ee:	4635      	mov	r5, r6
 80054f0:	e014      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054f2:	4a51      	ldr	r2, [pc, #324]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80054f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80054f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054fa:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80054fc:	b96d      	cbnz	r5, 800551a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054fe:	4a4e      	ldr	r2, [pc, #312]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8005500:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005502:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005506:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005508:	430b      	orrs	r3, r1
 800550a:	6513      	str	r3, [r2, #80]	; 0x50
 800550c:	e006      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800550e:	2101      	movs	r1, #1
 8005510:	1d20      	adds	r0, r4, #4
 8005512:	f7ff fd1f 	bl	8004f54 <RCCEx_PLL2_Config>
 8005516:	4605      	mov	r5, r0
      break;
 8005518:	e7f0      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x390>
 800551a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005522:	d01e      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    switch(PeriphClkInit->FmcClockSelection)
 8005524:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005526:	2b03      	cmp	r3, #3
 8005528:	d817      	bhi.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800552a:	e8df f003 	tbb	[pc, r3]
 800552e:	0207      	.short	0x0207
 8005530:	0710      	.short	0x0710
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005532:	4a41      	ldr	r2, [pc, #260]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8005534:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800553a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800553c:	b985      	cbnz	r5, 8005560 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800553e:	4a3e      	ldr	r2, [pc, #248]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8005540:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005542:	f023 0303 	bic.w	r3, r3, #3
 8005546:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005548:	430b      	orrs	r3, r1
 800554a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800554c:	e009      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800554e:	2102      	movs	r1, #2
 8005550:	1d20      	adds	r0, r4, #4
 8005552:	f7ff fcff 	bl	8004f54 <RCCEx_PLL2_Config>
 8005556:	4605      	mov	r5, r0
      break;
 8005558:	e7f0      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
      ret = HAL_ERROR;
 800555a:	2601      	movs	r6, #1
 800555c:	4635      	mov	r5, r6
 800555e:	e000      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8005560:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005568:	d11f      	bne.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x43e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	f013 0f01 	tst.w	r3, #1
 8005570:	f000 809e 	beq.w	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch(PeriphClkInit->Usart16ClockSelection)
 8005574:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005576:	2b28      	cmp	r3, #40	; 0x28
 8005578:	f200 8096 	bhi.w	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 800557c:	e8df f003 	tbb	[pc, r3]
 8005580:	94949484 	.word	0x94949484
 8005584:	94949494 	.word	0x94949494
 8005588:	9494947f 	.word	0x9494947f
 800558c:	94949494 	.word	0x94949494
 8005590:	9494948d 	.word	0x9494948d
 8005594:	94949494 	.word	0x94949494
 8005598:	94949484 	.word	0x94949484
 800559c:	94949494 	.word	0x94949494
 80055a0:	94949484 	.word	0x94949484
 80055a4:	94949494 	.word	0x94949494
 80055a8:	84          	.byte	0x84
 80055a9:	00          	.byte	0x00
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055aa:	4a24      	ldr	r2, [pc, #144]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80055ac:	6813      	ldr	r3, [r2, #0]
 80055ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80055b4:	f7fe fbfa 	bl	8003dac <HAL_GetTick>
 80055b8:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055ba:	4b20      	ldr	r3, [pc, #128]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80055c2:	d105      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x464>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c4:	f7fe fbf2 	bl	8003dac <HAL_GetTick>
 80055c8:	1bc0      	subs	r0, r0, r7
 80055ca:	2864      	cmp	r0, #100	; 0x64
 80055cc:	d9f5      	bls.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x44e>
        ret = HAL_TIMEOUT;
 80055ce:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 80055d0:	2d00      	cmp	r5, #0
 80055d2:	d150      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80055d4:	4b18      	ldr	r3, [pc, #96]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80055d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d8:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80055dc:	4053      	eors	r3, r2
 80055de:	f413 7f40 	tst.w	r3, #768	; 0x300
 80055e2:	d00c      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x492>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055e4:	4b14      	ldr	r3, [pc, #80]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80055e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80055ec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80055ee:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80055f2:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055f4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80055f6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80055fa:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80055fc:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80055fe:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8005602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005606:	d01b      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if(ret == HAL_OK)
 8005608:	2d00      	cmp	r5, #0
 800560a:	d136      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x50e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800560c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8005610:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005614:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005618:	d023      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800561a:	4a07      	ldr	r2, [pc, #28]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800561c:	6913      	ldr	r3, [r2, #16]
 800561e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005622:	6113      	str	r3, [r2, #16]
 8005624:	4904      	ldr	r1, [pc, #16]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8005626:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8005628:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800562c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005630:	4313      	orrs	r3, r2
 8005632:	670b      	str	r3, [r1, #112]	; 0x70
 8005634:	e799      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8005636:	bf00      	nop
 8005638:	58024400 	.word	0x58024400
 800563c:	58024800 	.word	0x58024800
        tickstart = HAL_GetTick();
 8005640:	f7fe fbb4 	bl	8003dac <HAL_GetTick>
 8005644:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005646:	4bac      	ldr	r3, [pc, #688]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8005648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564a:	f013 0f02 	tst.w	r3, #2
 800564e:	d1db      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x49c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005650:	f7fe fbac 	bl	8003dac <HAL_GetTick>
 8005654:	1bc0      	subs	r0, r0, r7
 8005656:	f241 3388 	movw	r3, #5000	; 0x1388
 800565a:	4298      	cmp	r0, r3
 800565c:	d9f3      	bls.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x4da>
            ret = HAL_TIMEOUT;
 800565e:	2503      	movs	r5, #3
 8005660:	e7d2      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x49c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005662:	48a5      	ldr	r0, [pc, #660]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8005664:	6902      	ldr	r2, [r0, #16]
 8005666:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800566a:	49a4      	ldr	r1, [pc, #656]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x790>)
 800566c:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8005670:	4313      	orrs	r3, r2
 8005672:	6103      	str	r3, [r0, #16]
 8005674:	e7d6      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      status = ret;
 8005676:	462e      	mov	r6, r5
 8005678:	e777      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
        status = ret;
 800567a:	462e      	mov	r6, r5
 800567c:	e775      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800567e:	2101      	movs	r1, #1
 8005680:	1d20      	adds	r0, r4, #4
 8005682:	f7ff fc67 	bl	8004f54 <RCCEx_PLL2_Config>
 8005686:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005688:	b98d      	cbnz	r5, 80056ae <HAL_RCCEx_PeriphCLKConfig+0x542>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800568a:	4a9b      	ldr	r2, [pc, #620]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800568c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800568e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8005692:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8005694:	430b      	orrs	r3, r1
 8005696:	6553      	str	r3, [r2, #84]	; 0x54
 8005698:	e00a      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800569a:	2101      	movs	r1, #1
 800569c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80056a0:	f7ff fcde 	bl	8005060 <RCCEx_PLL3_Config>
 80056a4:	4605      	mov	r5, r0
      break;
 80056a6:	e7ef      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x51c>
      ret = HAL_ERROR;
 80056a8:	2601      	movs	r6, #1
 80056aa:	4635      	mov	r5, r6
 80056ac:	e000      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
 80056ae:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	f013 0f02 	tst.w	r3, #2
 80056b6:	d020      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x58e>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80056b8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80056ba:	2b05      	cmp	r3, #5
 80056bc:	d819      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80056be:	e8df f003 	tbb	[pc, r3]
 80056c2:	0308      	.short	0x0308
 80056c4:	08080811 	.word	0x08080811
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056c8:	2101      	movs	r1, #1
 80056ca:	1d20      	adds	r0, r4, #4
 80056cc:	f7ff fc42 	bl	8004f54 <RCCEx_PLL2_Config>
 80056d0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80056d2:	b98d      	cbnz	r5, 80056f8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80056d4:	4a88      	ldr	r2, [pc, #544]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80056d6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80056d8:	f023 0307 	bic.w	r3, r3, #7
 80056dc:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80056de:	430b      	orrs	r3, r1
 80056e0:	6553      	str	r3, [r2, #84]	; 0x54
 80056e2:	e00a      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x58e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056e4:	2101      	movs	r1, #1
 80056e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80056ea:	f7ff fcb9 	bl	8005060 <RCCEx_PLL3_Config>
 80056ee:	4605      	mov	r5, r0
      break;
 80056f0:	e7ef      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x566>
      ret = HAL_ERROR;
 80056f2:	2601      	movs	r6, #1
 80056f4:	4635      	mov	r5, r6
 80056f6:	e000      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80056f8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	f013 0f04 	tst.w	r3, #4
 8005700:	d022      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005702:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005706:	2b05      	cmp	r3, #5
 8005708:	d81a      	bhi.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800570a:	e8df f003 	tbb	[pc, r3]
 800570e:	0308      	.short	0x0308
 8005710:	08080812 	.word	0x08080812
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005714:	2101      	movs	r1, #1
 8005716:	1d20      	adds	r0, r4, #4
 8005718:	f7ff fc1c 	bl	8004f54 <RCCEx_PLL2_Config>
 800571c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800571e:	b995      	cbnz	r5, 8005746 <HAL_RCCEx_PeriphCLKConfig+0x5da>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005720:	4a75      	ldr	r2, [pc, #468]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8005722:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005724:	f023 0307 	bic.w	r3, r3, #7
 8005728:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800572c:	430b      	orrs	r3, r1
 800572e:	6593      	str	r3, [r2, #88]	; 0x58
 8005730:	e00a      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005732:	2101      	movs	r1, #1
 8005734:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005738:	f7ff fc92 	bl	8005060 <RCCEx_PLL3_Config>
 800573c:	4605      	mov	r5, r0
      break;
 800573e:	e7ee      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
      ret = HAL_ERROR;
 8005740:	2601      	movs	r6, #1
 8005742:	4635      	mov	r5, r6
 8005744:	e000      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
 8005746:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	f013 0f20 	tst.w	r3, #32
 800574e:	d02c      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005750:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005758:	d01f      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x62e>
 800575a:	d812      	bhi.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x616>
 800575c:	b13b      	cbz	r3, 800576e <HAL_RCCEx_PeriphCLKConfig+0x602>
 800575e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005762:	d117      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x628>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005764:	2100      	movs	r1, #0
 8005766:	1d20      	adds	r0, r4, #4
 8005768:	f7ff fbf4 	bl	8004f54 <RCCEx_PLL2_Config>
 800576c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800576e:	b9dd      	cbnz	r5, 80057a8 <HAL_RCCEx_PeriphCLKConfig+0x63c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005770:	4a61      	ldr	r2, [pc, #388]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8005772:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005774:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8005778:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800577c:	430b      	orrs	r3, r1
 800577e:	6553      	str	r3, [r2, #84]	; 0x54
 8005780:	e013      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005786:	d0f2      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x602>
 8005788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800578c:	d0ef      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x602>
 800578e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005792:	d0ec      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = HAL_ERROR;
 8005794:	2601      	movs	r6, #1
 8005796:	4635      	mov	r5, r6
 8005798:	e007      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x63e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800579a:	2102      	movs	r1, #2
 800579c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80057a0:	f7ff fc5e 	bl	8005060 <RCCEx_PLL3_Config>
 80057a4:	4605      	mov	r5, r0
      break;
 80057a6:	e7e2      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x602>
 80057a8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80057b0:	d02c      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80057b2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80057b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ba:	d01f      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x690>
 80057bc:	d812      	bhi.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80057be:	b13b      	cbz	r3, 80057d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80057c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c4:	d117      	bne.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057c6:	2100      	movs	r1, #0
 80057c8:	1d20      	adds	r0, r4, #4
 80057ca:	f7ff fbc3 	bl	8004f54 <RCCEx_PLL2_Config>
 80057ce:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80057d0:	b9dd      	cbnz	r5, 800580a <HAL_RCCEx_PeriphCLKConfig+0x69e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057d2:	4a49      	ldr	r2, [pc, #292]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80057d4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80057d6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80057da:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80057de:	430b      	orrs	r3, r1
 80057e0:	6593      	str	r3, [r2, #88]	; 0x58
 80057e2:	e013      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80057e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e8:	d0f2      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80057ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80057ee:	d0ef      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80057f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057f4:	d0ec      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      ret = HAL_ERROR;
 80057f6:	2601      	movs	r6, #1
 80057f8:	4635      	mov	r5, r6
 80057fa:	e007      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057fc:	2102      	movs	r1, #2
 80057fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005802:	f7ff fc2d 	bl	8005060 <RCCEx_PLL3_Config>
 8005806:	4605      	mov	r5, r0
      break;
 8005808:	e7e2      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800580a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005812:	d02c      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005814:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8005818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800581c:	d01f      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800581e:	d812      	bhi.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8005820:	b13b      	cbz	r3, 8005832 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8005822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005826:	d117      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005828:	2100      	movs	r1, #0
 800582a:	1d20      	adds	r0, r4, #4
 800582c:	f7ff fb92 	bl	8004f54 <RCCEx_PLL2_Config>
 8005830:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005832:	b9dd      	cbnz	r5, 800586c <HAL_RCCEx_PeriphCLKConfig+0x700>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005834:	4a30      	ldr	r2, [pc, #192]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8005836:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005838:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800583c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8005840:	430b      	orrs	r3, r1
 8005842:	6593      	str	r3, [r2, #88]	; 0x58
 8005844:	e013      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800584a:	d0f2      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 800584c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005850:	d0ef      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8005852:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005856:	d0ec      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      ret = HAL_ERROR;
 8005858:	2601      	movs	r6, #1
 800585a:	4635      	mov	r5, r6
 800585c:	e007      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x702>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800585e:	2102      	movs	r1, #2
 8005860:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005864:	f7ff fbfc 	bl	8005060 <RCCEx_PLL3_Config>
 8005868:	4605      	mov	r5, r0
      break;
 800586a:	e7e2      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 800586c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	f013 0f08 	tst.w	r3, #8
 8005874:	d00c      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x724>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005876:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800587a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587e:	d028      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x766>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005880:	4a1d      	ldr	r2, [pc, #116]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8005882:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005884:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005888:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800588c:	430b      	orrs	r3, r1
 800588e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	f013 0f10 	tst.w	r3, #16
 8005896:	d00c      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x746>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005898:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800589c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058a0:	d020      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058a2:	4a15      	ldr	r2, [pc, #84]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80058a4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80058a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058aa:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80058ae:	430b      	orrs	r3, r1
 80058b0:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80058b8:	d039      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch(PeriphClkInit->AdcClockSelection)
 80058ba:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80058be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c2:	d02c      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x7b2>
 80058c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058c8:	d01f      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x79e>
 80058ca:	b1cb      	cbz	r3, 8005900 <HAL_RCCEx_PeriphCLKConfig+0x794>
      ret = HAL_ERROR;
 80058cc:	2601      	movs	r6, #1
 80058ce:	4635      	mov	r5, r6
 80058d0:	e02d      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80058d2:	2102      	movs	r1, #2
 80058d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80058d8:	f7ff fbc2 	bl	8005060 <RCCEx_PLL3_Config>
 80058dc:	2800      	cmp	r0, #0
 80058de:	d0cf      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x714>
          status = HAL_ERROR;
 80058e0:	2601      	movs	r6, #1
 80058e2:	e7cd      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x714>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80058e4:	2102      	movs	r1, #2
 80058e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80058ea:	f7ff fbb9 	bl	8005060 <RCCEx_PLL3_Config>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d0d7      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x736>
        status = HAL_ERROR;
 80058f2:	2601      	movs	r6, #1
 80058f4:	e7d5      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x736>
 80058f6:	bf00      	nop
 80058f8:	58024400 	.word	0x58024400
 80058fc:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005900:	2100      	movs	r1, #0
 8005902:	1d20      	adds	r0, r4, #4
 8005904:	f7ff fb26 	bl	8004f54 <RCCEx_PLL2_Config>
 8005908:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800590a:	b97d      	cbnz	r5, 800592c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800590c:	4a64      	ldr	r2, [pc, #400]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 800590e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005910:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005914:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8005918:	430b      	orrs	r3, r1
 800591a:	6593      	str	r3, [r2, #88]	; 0x58
 800591c:	e007      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800591e:	2102      	movs	r1, #2
 8005920:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005924:	f7ff fb9c 	bl	8005060 <RCCEx_PLL3_Config>
 8005928:	4605      	mov	r5, r0
      break;
 800592a:	e7ee      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x79e>
 800592c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005934:	d024      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x814>
    switch(PeriphClkInit->UsbClockSelection)
 8005936:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800593a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800593e:	d017      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x804>
 8005940:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005944:	d00a      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 8005946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800594a:	d002      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
      ret = HAL_ERROR;
 800594c:	2601      	movs	r6, #1
 800594e:	4635      	mov	r5, r6
 8005950:	e016      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x814>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005952:	4a53      	ldr	r2, [pc, #332]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8005954:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800595a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800595c:	b97d      	cbnz	r5, 800597e <HAL_RCCEx_PeriphCLKConfig+0x812>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800595e:	4a50      	ldr	r2, [pc, #320]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8005960:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005962:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005966:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800596a:	430b      	orrs	r3, r1
 800596c:	6553      	str	r3, [r2, #84]	; 0x54
 800596e:	e007      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x814>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005970:	2101      	movs	r1, #1
 8005972:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005976:	f7ff fb73 	bl	8005060 <RCCEx_PLL3_Config>
 800597a:	4605      	mov	r5, r0
      break;
 800597c:	e7ee      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 800597e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005986:	d014      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x846>
    switch(PeriphClkInit->SdmmcClockSelection)
 8005988:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800598a:	b12b      	cbz	r3, 8005998 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800598c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005990:	d023      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x86e>
      ret = HAL_ERROR;
 8005992:	2601      	movs	r6, #1
 8005994:	4635      	mov	r5, r6
 8005996:	e00c      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005998:	4a41      	ldr	r2, [pc, #260]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 800599a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800599c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80059a2:	bb05      	cbnz	r5, 80059e6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80059a4:	4a3e      	ldr	r2, [pc, #248]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 80059a6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80059a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ac:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80059ae:	430b      	orrs	r3, r1
 80059b0:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80059b8:	d117      	bne.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x87e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80059c0:	d02d      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
    switch(PeriphClkInit->RngClockSelection)
 80059c2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80059c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c8:	d01b      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x896>
 80059ca:	d917      	bls.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x890>
 80059cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059d0:	d01c      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 80059d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059d6:	d112      	bne.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x892>
 80059d8:	e018      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80059da:	2102      	movs	r1, #2
 80059dc:	1d20      	adds	r0, r4, #4
 80059de:	f7ff fab9 	bl	8004f54 <RCCEx_PLL2_Config>
 80059e2:	4605      	mov	r5, r0
      break;
 80059e4:	e7dd      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x836>
 80059e6:	462e      	mov	r6, r5
 80059e8:	e7e3      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x846>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80059ea:	2102      	movs	r1, #2
 80059ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80059f0:	f7ff fb36 	bl	8005060 <RCCEx_PLL3_Config>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	d0e0      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x84e>
      status=HAL_ERROR;
 80059f8:	2601      	movs	r6, #1
 80059fa:	e7de      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x84e>
    switch(PeriphClkInit->RngClockSelection)
 80059fc:	b133      	cbz	r3, 8005a0c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      ret = HAL_ERROR;
 80059fe:	2601      	movs	r6, #1
 8005a00:	e00d      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a02:	4a27      	ldr	r2, [pc, #156]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8005a04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a0a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8005a0c:	2d00      	cmp	r5, #0
 8005a0e:	d13d      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x920>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a10:	4a23      	ldr	r2, [pc, #140]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8005a12:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a18:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005a1a:	430b      	orrs	r3, r1
 8005a1c:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005a24:	d006      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a26:	4a1e      	ldr	r2, [pc, #120]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8005a28:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005a2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a2e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005a30:	430b      	orrs	r3, r1
 8005a32:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005a3a:	d007      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e0>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005a3c:	4a18      	ldr	r2, [pc, #96]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8005a3e:	6913      	ldr	r3, [r2, #16]
 8005a40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a44:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8005a48:	430b      	orrs	r3, r1
 8005a4a:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005a52:	d006      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a54:	4a12      	ldr	r2, [pc, #72]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8005a56:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005a58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a5c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005a5e:	430b      	orrs	r3, r1
 8005a60:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005a68:	d009      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x912>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a6a:	4b0d      	ldr	r3, [pc, #52]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8005a6c:	691a      	ldr	r2, [r3, #16]
 8005a6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a72:	611a      	str	r2, [r3, #16]
 8005a74:	691a      	ldr	r2, [r3, #16]
 8005a76:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	db05      	blt.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x924>
  if (status == HAL_OK)
 8005a84:	b106      	cbz	r6, 8005a88 <HAL_RCCEx_PeriphCLKConfig+0x91c>
  return HAL_ERROR;
 8005a86:	2601      	movs	r6, #1
}
 8005a88:	4630      	mov	r0, r6
 8005a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a8c:	462e      	mov	r6, r5
 8005a8e:	e7c6      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a90:	4a03      	ldr	r2, [pc, #12]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8005a92:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005a94:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005a98:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005a9a:	430b      	orrs	r3, r1
 8005a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a9e:	e7f1      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x918>
 8005aa0:	58024400 	.word	0x58024400

08005aa4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8005aa4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005aa6:	f7ff fa0f 	bl	8004ec8 <HAL_RCC_GetHCLKFreq>
 8005aaa:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005ab2:	4a04      	ldr	r2, [pc, #16]	; (8005ac4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8005ab4:	5cd3      	ldrb	r3, [r2, r3]
 8005ab6:	f003 031f 	and.w	r3, r3, #31
}
 8005aba:	40d8      	lsrs	r0, r3
 8005abc:	bd08      	pop	{r3, pc}
 8005abe:	bf00      	nop
 8005ac0:	58024400 	.word	0x58024400
 8005ac4:	08007ff4 	.word	0x08007ff4

08005ac8 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8005ac8:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005aca:	4978      	ldr	r1, [pc, #480]	; (8005cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005acc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005ace:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005ad0:	f3c2 3205 	ubfx	r2, r2, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ad4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005ad6:	f3c3 1300 	ubfx	r3, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005ada:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005adc:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8005ae0:	fb03 f301 	mul.w	r3, r3, r1
  if (pll2m != 0U)
 8005ae4:	2a00      	cmp	r2, #0
 8005ae6:	f000 80db 	beq.w	8005ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
 8005aea:	f004 0403 	and.w	r4, r4, #3
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8005af6:	2c01      	cmp	r4, #1
 8005af8:	d066      	beq.n	8005bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8005afa:	b1fc      	cbz	r4, 8005b3c <HAL_RCCEx_GetPLL2ClockFreq+0x74>
 8005afc:	2c02      	cmp	r4, #2
 8005afe:	f000 80b2 	beq.w	8005c66 <HAL_RCCEx_GetPLL2ClockFreq+0x19e>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b02:	ee07 2a10 	vmov	s14, r2
 8005b06:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005b0a:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8005cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8005b0e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005b12:	4b66      	ldr	r3, [pc, #408]	; (8005cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1a:	ee07 3a10 	vmov	s14, r3
 8005b1e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005b22:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8005b26:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b36:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8005b3a:	e061      	b.n	8005c00 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b3c:	4b5b      	ldr	r3, [pc, #364]	; (8005cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f013 0f20 	tst.w	r3, #32
 8005b44:	d023      	beq.n	8005b8e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b46:	4c59      	ldr	r4, [pc, #356]	; (8005cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005b48:	6821      	ldr	r1, [r4, #0]
 8005b4a:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8005b4e:	4b5a      	ldr	r3, [pc, #360]	; (8005cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 8005b50:	40cb      	lsrs	r3, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b52:	ee07 3a10 	vmov	s14, r3
 8005b56:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005b5a:	ee06 2a90 	vmov	s13, r2
 8005b5e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8005b62:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8005b66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b6c:	ee07 3a10 	vmov	s14, r3
 8005b70:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005b74:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8005b78:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b8c:	e038      	b.n	8005c00 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b8e:	ee07 2a10 	vmov	s14, r2
 8005b92:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005b96:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 8005b9a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005b9e:	4b43      	ldr	r3, [pc, #268]	; (8005cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba6:	ee07 3a10 	vmov	s14, r3
 8005baa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005bae:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8005bb2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bc2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005bc6:	e01b      	b.n	8005c00 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005bc8:	ee07 2a10 	vmov	s14, r2
 8005bcc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005bd0:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8005cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8005bd4:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005bd8:	4b34      	ldr	r3, [pc, #208]	; (8005cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be0:	ee07 3a10 	vmov	s14, r3
 8005be4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005be8:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8005bec:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bfc:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005c00:	4a2a      	ldr	r2, [pc, #168]	; (8005cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005c02:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005c04:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005c08:	ee07 3a10 	vmov	s14, r3
 8005c0c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005c10:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005c14:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c20:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005c24:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005c26:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005c2a:	ee07 3a10 	vmov	s14, r3
 8005c2e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005c32:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c3e:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005c42:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005c44:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005c48:	ee07 3a90 	vmov	s15, r3
 8005c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c50:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005c54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c58:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005c5c:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005c60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c64:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c66:	ee07 2a10 	vmov	s14, r2
 8005c6a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005c6e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8005cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8005c72:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005c76:	4b0d      	ldr	r3, [pc, #52]	; (8005cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c7e:	ee07 3a10 	vmov	s14, r3
 8005c82:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005c86:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8005c8a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8005c9e:	e7af      	b.n	8005c00 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005ca4:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ca6:	6083      	str	r3, [r0, #8]
}
 8005ca8:	e7da      	b.n	8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x198>
 8005caa:	bf00      	nop
 8005cac:	58024400 	.word	0x58024400
 8005cb0:	4a742400 	.word	0x4a742400
 8005cb4:	39000000 	.word	0x39000000
 8005cb8:	03d09000 	.word	0x03d09000
 8005cbc:	4c742400 	.word	0x4c742400
 8005cc0:	4c189680 	.word	0x4c189680

08005cc4 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8005cc4:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cc6:	4978      	ldr	r1, [pc, #480]	; (8005ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005cc8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005cca:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005ccc:	f3c2 5205 	ubfx	r2, r2, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005cd0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005cd2:	f3c3 2300 	ubfx	r3, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005cd6:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005cd8:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8005cdc:	fb03 f301 	mul.w	r3, r3, r1
  if (pll3m != 0U)
 8005ce0:	2a00      	cmp	r2, #0
 8005ce2:	f000 80db 	beq.w	8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
 8005ce6:	f004 0403 	and.w	r4, r4, #3
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8005cf2:	2c01      	cmp	r4, #1
 8005cf4:	d066      	beq.n	8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8005cf6:	b1fc      	cbz	r4, 8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x74>
 8005cf8:	2c02      	cmp	r4, #2
 8005cfa:	f000 80b2 	beq.w	8005e62 <HAL_RCCEx_GetPLL3ClockFreq+0x19e>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005cfe:	ee07 2a10 	vmov	s14, r2
 8005d02:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005d06:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8005d0a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005d0e:	4b66      	ldr	r3, [pc, #408]	; (8005ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d16:	ee07 3a10 	vmov	s14, r3
 8005d1a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005d1e:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8005d22:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d32:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8005d36:	e061      	b.n	8005dfc <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d38:	4b5b      	ldr	r3, [pc, #364]	; (8005ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f013 0f20 	tst.w	r3, #32
 8005d40:	d023      	beq.n	8005d8a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d42:	4c59      	ldr	r4, [pc, #356]	; (8005ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005d44:	6821      	ldr	r1, [r4, #0]
 8005d46:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8005d4a:	4b5a      	ldr	r3, [pc, #360]	; (8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 8005d4c:	40cb      	lsrs	r3, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d4e:	ee07 3a10 	vmov	s14, r3
 8005d52:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005d56:	ee06 2a90 	vmov	s13, r2
 8005d5a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8005d5e:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8005d62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d68:	ee07 3a10 	vmov	s14, r3
 8005d6c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005d70:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8005d74:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005d88:	e038      	b.n	8005dfc <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d8a:	ee07 2a10 	vmov	s14, r2
 8005d8e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005d92:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8005eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8005d96:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005d9a:	4b43      	ldr	r3, [pc, #268]	; (8005ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da2:	ee07 3a10 	vmov	s14, r3
 8005da6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005daa:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8005dae:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005db6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dbe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005dc2:	e01b      	b.n	8005dfc <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005dc4:	ee07 2a10 	vmov	s14, r2
 8005dc8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005dcc:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8005dd0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005dd4:	4b34      	ldr	r3, [pc, #208]	; (8005ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ddc:	ee07 3a10 	vmov	s14, r3
 8005de0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005de4:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8005de8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005df0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005df4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005df8:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005dfc:	4a2a      	ldr	r2, [pc, #168]	; (8005ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005dfe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005e00:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005e04:	ee07 3a10 	vmov	s14, r3
 8005e08:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005e0c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005e10:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e1c:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005e20:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005e22:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005e26:	ee07 3a10 	vmov	s14, r3
 8005e2a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005e2e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e3a:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005e3e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005e40:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005e44:	ee07 3a90 	vmov	s15, r3
 8005e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005e50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e54:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005e58:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e60:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e62:	ee07 2a10 	vmov	s14, r2
 8005e66:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005e6a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8005e6e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005e72:	4b0d      	ldr	r3, [pc, #52]	; (8005ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7a:	ee07 3a10 	vmov	s14, r3
 8005e7e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005e82:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8005e86:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e96:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8005e9a:	e7af      	b.n	8005dfc <HAL_RCCEx_GetPLL3ClockFreq+0x138>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005ea0:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005ea2:	6083      	str	r3, [r0, #8]
}
 8005ea4:	e7da      	b.n	8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x198>
 8005ea6:	bf00      	nop
 8005ea8:	58024400 	.word	0x58024400
 8005eac:	4a742400 	.word	0x4a742400
 8005eb0:	39000000 	.word	0x39000000
 8005eb4:	03d09000 	.word	0x03d09000
 8005eb8:	4c742400 	.word	0x4c742400
 8005ebc:	4c189680 	.word	0x4c189680

08005ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ec0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ec2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ec4:	6a04      	ldr	r4, [r0, #32]
 8005ec6:	f024 0401 	bic.w	r4, r4, #1
 8005eca:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ecc:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ece:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ed2:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ed6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8005eda:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005edc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005ede:	6203      	str	r3, [r0, #32]
}
 8005ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ee6:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ee8:	6a03      	ldr	r3, [r0, #32]
 8005eea:	f023 0310 	bic.w	r3, r3, #16
 8005eee:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ef0:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8005ef2:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ef4:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ef8:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005efc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f00:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f04:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005f06:	6203      	str	r3, [r0, #32]
}
 8005f08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f0c:	4770      	bx	lr
	...

08005f10 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f10:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f12:	4b03      	ldr	r3, [pc, #12]	; (8005f20 <TIM_ITRx_SetConfig+0x10>)
 8005f14:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f16:	4319      	orrs	r1, r3
 8005f18:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f1c:	6081      	str	r1, [r0, #8]
}
 8005f1e:	4770      	bx	lr
 8005f20:	ffcfff8f 	.word	0xffcfff8f

08005f24 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005f24:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d001      	beq.n	8005f32 <HAL_TIM_Base_Start+0xe>
    return HAL_ERROR;
 8005f2e:	2001      	movs	r0, #1
 8005f30:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 8005f32:	2302      	movs	r3, #2
 8005f34:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f38:	6802      	ldr	r2, [r0, #0]
 8005f3a:	6891      	ldr	r1, [r2, #8]
 8005f3c:	4b07      	ldr	r3, [pc, #28]	; (8005f5c <HAL_TIM_Base_Start+0x38>)
 8005f3e:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f40:	2b06      	cmp	r3, #6
 8005f42:	bf18      	it	ne
 8005f44:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8005f48:	d005      	beq.n	8005f56 <HAL_TIM_Base_Start+0x32>
    __HAL_TIM_ENABLE(htim);
 8005f4a:	6813      	ldr	r3, [r2, #0]
 8005f4c:	f043 0301 	orr.w	r3, r3, #1
 8005f50:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005f52:	2000      	movs	r0, #0
 8005f54:	4770      	bx	lr
 8005f56:	2000      	movs	r0, #0
}
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	00010007 	.word	0x00010007

08005f60 <TIM_Base_SetConfig>:
{
 8005f60:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 8005f62:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f64:	4c37      	ldr	r4, [pc, #220]	; (8006044 <TIM_Base_SetConfig+0xe4>)
 8005f66:	42a0      	cmp	r0, r4
 8005f68:	bf14      	ite	ne
 8005f6a:	2400      	movne	r4, #0
 8005f6c:	2401      	moveq	r4, #1
 8005f6e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005f72:	bf14      	ite	ne
 8005f74:	4622      	movne	r2, r4
 8005f76:	f044 0201 	orreq.w	r2, r4, #1
 8005f7a:	b9aa      	cbnz	r2, 8005fa8 <TIM_Base_SetConfig+0x48>
 8005f7c:	4d32      	ldr	r5, [pc, #200]	; (8006048 <TIM_Base_SetConfig+0xe8>)
 8005f7e:	42a8      	cmp	r0, r5
 8005f80:	bf14      	ite	ne
 8005f82:	2500      	movne	r5, #0
 8005f84:	2501      	moveq	r5, #1
 8005f86:	4e31      	ldr	r6, [pc, #196]	; (800604c <TIM_Base_SetConfig+0xec>)
 8005f88:	42b0      	cmp	r0, r6
 8005f8a:	d00d      	beq.n	8005fa8 <TIM_Base_SetConfig+0x48>
 8005f8c:	b965      	cbnz	r5, 8005fa8 <TIM_Base_SetConfig+0x48>
 8005f8e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8005f92:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8005f96:	42a8      	cmp	r0, r5
 8005f98:	bf14      	ite	ne
 8005f9a:	2500      	movne	r5, #0
 8005f9c:	2501      	moveq	r5, #1
 8005f9e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005fa2:	42b0      	cmp	r0, r6
 8005fa4:	d000      	beq.n	8005fa8 <TIM_Base_SetConfig+0x48>
 8005fa6:	b11d      	cbz	r5, 8005fb0 <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005fac:	684d      	ldr	r5, [r1, #4]
 8005fae:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fb0:	bb12      	cbnz	r2, 8005ff8 <TIM_Base_SetConfig+0x98>
 8005fb2:	4a25      	ldr	r2, [pc, #148]	; (8006048 <TIM_Base_SetConfig+0xe8>)
 8005fb4:	4290      	cmp	r0, r2
 8005fb6:	bf14      	ite	ne
 8005fb8:	2200      	movne	r2, #0
 8005fba:	2201      	moveq	r2, #1
 8005fbc:	4d23      	ldr	r5, [pc, #140]	; (800604c <TIM_Base_SetConfig+0xec>)
 8005fbe:	42a8      	cmp	r0, r5
 8005fc0:	d01a      	beq.n	8005ff8 <TIM_Base_SetConfig+0x98>
 8005fc2:	b9ca      	cbnz	r2, 8005ff8 <TIM_Base_SetConfig+0x98>
 8005fc4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005fc8:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8005fcc:	4290      	cmp	r0, r2
 8005fce:	bf14      	ite	ne
 8005fd0:	2200      	movne	r2, #0
 8005fd2:	2201      	moveq	r2, #1
 8005fd4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005fd8:	42a8      	cmp	r0, r5
 8005fda:	d00d      	beq.n	8005ff8 <TIM_Base_SetConfig+0x98>
 8005fdc:	b962      	cbnz	r2, 8005ff8 <TIM_Base_SetConfig+0x98>
 8005fde:	4a1c      	ldr	r2, [pc, #112]	; (8006050 <TIM_Base_SetConfig+0xf0>)
 8005fe0:	4290      	cmp	r0, r2
 8005fe2:	bf14      	ite	ne
 8005fe4:	2200      	movne	r2, #0
 8005fe6:	2201      	moveq	r2, #1
 8005fe8:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8005fec:	42a8      	cmp	r0, r5
 8005fee:	d003      	beq.n	8005ff8 <TIM_Base_SetConfig+0x98>
 8005ff0:	b912      	cbnz	r2, 8005ff8 <TIM_Base_SetConfig+0x98>
 8005ff2:	4a18      	ldr	r2, [pc, #96]	; (8006054 <TIM_Base_SetConfig+0xf4>)
 8005ff4:	4290      	cmp	r0, r2
 8005ff6:	d103      	bne.n	8006000 <TIM_Base_SetConfig+0xa0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ffc:	68ca      	ldr	r2, [r1, #12]
 8005ffe:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006000:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006004:	694a      	ldr	r2, [r1, #20]
 8006006:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006008:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800600a:	688a      	ldr	r2, [r1, #8]
 800600c:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800600e:	680a      	ldr	r2, [r1, #0]
 8006010:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006012:	4b11      	ldr	r3, [pc, #68]	; (8006058 <TIM_Base_SetConfig+0xf8>)
 8006014:	4298      	cmp	r0, r3
 8006016:	bf14      	ite	ne
 8006018:	4623      	movne	r3, r4
 800601a:	f044 0301 	orreq.w	r3, r4, #1
 800601e:	b95b      	cbnz	r3, 8006038 <TIM_Base_SetConfig+0xd8>
 8006020:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <TIM_Base_SetConfig+0xf0>)
 8006022:	4298      	cmp	r0, r3
 8006024:	bf14      	ite	ne
 8006026:	2300      	movne	r3, #0
 8006028:	2301      	moveq	r3, #1
 800602a:	4a0c      	ldr	r2, [pc, #48]	; (800605c <TIM_Base_SetConfig+0xfc>)
 800602c:	4290      	cmp	r0, r2
 800602e:	d003      	beq.n	8006038 <TIM_Base_SetConfig+0xd8>
 8006030:	b913      	cbnz	r3, 8006038 <TIM_Base_SetConfig+0xd8>
 8006032:	4b08      	ldr	r3, [pc, #32]	; (8006054 <TIM_Base_SetConfig+0xf4>)
 8006034:	4298      	cmp	r0, r3
 8006036:	d101      	bne.n	800603c <TIM_Base_SetConfig+0xdc>
    TIMx->RCR = Structure->RepetitionCounter;
 8006038:	690b      	ldr	r3, [r1, #16]
 800603a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800603c:	2301      	movs	r3, #1
 800603e:	6143      	str	r3, [r0, #20]
}
 8006040:	bc70      	pop	{r4, r5, r6}
 8006042:	4770      	bx	lr
 8006044:	40010000 	.word	0x40010000
 8006048:	40000800 	.word	0x40000800
 800604c:	40000400 	.word	0x40000400
 8006050:	40014400 	.word	0x40014400
 8006054:	40014800 	.word	0x40014800
 8006058:	40010400 	.word	0x40010400
 800605c:	40014000 	.word	0x40014000

08006060 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006060:	b358      	cbz	r0, 80060ba <HAL_TIM_Base_Init+0x5a>
{
 8006062:	b510      	push	{r4, lr}
 8006064:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006066:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800606a:	b30b      	cbz	r3, 80060b0 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	2302      	movs	r3, #2
 800606e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006072:	1d21      	adds	r1, r4, #4
 8006074:	6820      	ldr	r0, [r4, #0]
 8006076:	f7ff ff73 	bl	8005f60 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800607a:	2301      	movs	r3, #1
 800607c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006080:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006084:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006088:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800608c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006098:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800609c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060a0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80060a4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80060a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80060ac:	2000      	movs	r0, #0
}
 80060ae:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80060b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80060b4:	f7fd fd60 	bl	8003b78 <HAL_TIM_Base_MspInit>
 80060b8:	e7d8      	b.n	800606c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80060ba:	2001      	movs	r0, #1
}
 80060bc:	4770      	bx	lr

080060be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060be:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060c0:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060c2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060c6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80060ca:	430b      	orrs	r3, r1
 80060cc:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ce:	6083      	str	r3, [r0, #8]
}
 80060d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060d4:	4770      	bx	lr
	...

080060d8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80060d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d074      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0xf2>
{
 80060e0:	b510      	push	{r4, lr}
 80060e2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80060e4:	2301      	movs	r3, #1
 80060e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80060ea:	2302      	movs	r3, #2
 80060ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80060f0:	6802      	ldr	r2, [r0, #0]
 80060f2:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f4:	4b36      	ldr	r3, [pc, #216]	; (80061d0 <HAL_TIM_ConfigClockSource+0xf8>)
 80060f6:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80060f8:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80060fa:	680b      	ldr	r3, [r1, #0]
 80060fc:	2b60      	cmp	r3, #96	; 0x60
 80060fe:	d050      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0xca>
 8006100:	d91d      	bls.n	800613e <HAL_TIM_ConfigClockSource+0x66>
 8006102:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006106:	d02e      	beq.n	8006166 <HAL_TIM_ConfigClockSource+0x8e>
 8006108:	d835      	bhi.n	8006176 <HAL_TIM_ConfigClockSource+0x9e>
 800610a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800610e:	d03c      	beq.n	800618a <HAL_TIM_ConfigClockSource+0xb2>
 8006110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006114:	d027      	beq.n	8006166 <HAL_TIM_ConfigClockSource+0x8e>
 8006116:	2b70      	cmp	r3, #112	; 0x70
 8006118:	d10a      	bne.n	8006130 <HAL_TIM_ConfigClockSource+0x58>
      TIM_ETR_SetConfig(htim->Instance,
 800611a:	68cb      	ldr	r3, [r1, #12]
 800611c:	684a      	ldr	r2, [r1, #4]
 800611e:	6889      	ldr	r1, [r1, #8]
 8006120:	6820      	ldr	r0, [r4, #0]
 8006122:	f7ff ffcc 	bl	80060be <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006126:	6822      	ldr	r2, [r4, #0]
 8006128:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800612a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800612e:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006130:	2301      	movs	r3, #1
 8006132:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006136:	2000      	movs	r0, #0
 8006138:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800613c:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800613e:	2b20      	cmp	r3, #32
 8006140:	d011      	beq.n	8006166 <HAL_TIM_ConfigClockSource+0x8e>
 8006142:	d90d      	bls.n	8006160 <HAL_TIM_ConfigClockSource+0x88>
 8006144:	2b40      	cmp	r3, #64	; 0x40
 8006146:	d036      	beq.n	80061b6 <HAL_TIM_ConfigClockSource+0xde>
 8006148:	2b50      	cmp	r3, #80	; 0x50
 800614a:	d111      	bne.n	8006170 <HAL_TIM_ConfigClockSource+0x98>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800614c:	68ca      	ldr	r2, [r1, #12]
 800614e:	6849      	ldr	r1, [r1, #4]
 8006150:	6820      	ldr	r0, [r4, #0]
 8006152:	f7ff feb5 	bl	8005ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006156:	2150      	movs	r1, #80	; 0x50
 8006158:	6820      	ldr	r0, [r4, #0]
 800615a:	f7ff fed9 	bl	8005f10 <TIM_ITRx_SetConfig>
      break;
 800615e:	e7e7      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8006160:	b10b      	cbz	r3, 8006166 <HAL_TIM_ConfigClockSource+0x8e>
 8006162:	2b10      	cmp	r3, #16
 8006164:	d1e4      	bne.n	8006130 <HAL_TIM_ConfigClockSource+0x58>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006166:	4619      	mov	r1, r3
 8006168:	6820      	ldr	r0, [r4, #0]
 800616a:	f7ff fed1 	bl	8005f10 <TIM_ITRx_SetConfig>
      break;
 800616e:	e7df      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8006170:	2b30      	cmp	r3, #48	; 0x30
 8006172:	d1dd      	bne.n	8006130 <HAL_TIM_ConfigClockSource+0x58>
 8006174:	e7f7      	b.n	8006166 <HAL_TIM_ConfigClockSource+0x8e>
 8006176:	4a17      	ldr	r2, [pc, #92]	; (80061d4 <HAL_TIM_ConfigClockSource+0xfc>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d0f4      	beq.n	8006166 <HAL_TIM_ConfigClockSource+0x8e>
 800617c:	3210      	adds	r2, #16
 800617e:	4293      	cmp	r3, r2
 8006180:	d0f1      	beq.n	8006166 <HAL_TIM_ConfigClockSource+0x8e>
 8006182:	3a20      	subs	r2, #32
 8006184:	4293      	cmp	r3, r2
 8006186:	d1d3      	bne.n	8006130 <HAL_TIM_ConfigClockSource+0x58>
 8006188:	e7ed      	b.n	8006166 <HAL_TIM_ConfigClockSource+0x8e>
      TIM_ETR_SetConfig(htim->Instance,
 800618a:	68cb      	ldr	r3, [r1, #12]
 800618c:	684a      	ldr	r2, [r1, #4]
 800618e:	6889      	ldr	r1, [r1, #8]
 8006190:	6820      	ldr	r0, [r4, #0]
 8006192:	f7ff ff94 	bl	80060be <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006196:	6822      	ldr	r2, [r4, #0]
 8006198:	6893      	ldr	r3, [r2, #8]
 800619a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800619e:	6093      	str	r3, [r2, #8]
      break;
 80061a0:	e7c6      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061a2:	68ca      	ldr	r2, [r1, #12]
 80061a4:	6849      	ldr	r1, [r1, #4]
 80061a6:	6820      	ldr	r0, [r4, #0]
 80061a8:	f7ff fe9d 	bl	8005ee6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061ac:	2160      	movs	r1, #96	; 0x60
 80061ae:	6820      	ldr	r0, [r4, #0]
 80061b0:	f7ff feae 	bl	8005f10 <TIM_ITRx_SetConfig>
      break;
 80061b4:	e7bc      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b6:	68ca      	ldr	r2, [r1, #12]
 80061b8:	6849      	ldr	r1, [r1, #4]
 80061ba:	6820      	ldr	r0, [r4, #0]
 80061bc:	f7ff fe80 	bl	8005ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061c0:	2140      	movs	r1, #64	; 0x40
 80061c2:	6820      	ldr	r0, [r4, #0]
 80061c4:	f7ff fea4 	bl	8005f10 <TIM_ITRx_SetConfig>
      break;
 80061c8:	e7b2      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x58>
  __HAL_LOCK(htim);
 80061ca:	2002      	movs	r0, #2
}
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	ffce0088 	.word	0xffce0088
 80061d4:	00100030 	.word	0x00100030

080061d8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d041      	beq.n	8006264 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
{
 80061e0:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80061e2:	2301      	movs	r3, #1
 80061e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e8:	2302      	movs	r3, #2
 80061ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061ee:	6803      	ldr	r3, [r0, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061f2:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061f4:	4e1c      	ldr	r6, [pc, #112]	; (8006268 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 80061f6:	4c1d      	ldr	r4, [pc, #116]	; (800626c <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 80061f8:	42a3      	cmp	r3, r4
 80061fa:	bf18      	it	ne
 80061fc:	42b3      	cmpne	r3, r6
 80061fe:	d103      	bne.n	8006208 <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006200:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006204:	684c      	ldr	r4, [r1, #4]
 8006206:	4322      	orrs	r2, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006208:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800620c:	680c      	ldr	r4, [r1, #0]
 800620e:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006210:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006212:	6803      	ldr	r3, [r0, #0]
 8006214:	4a14      	ldr	r2, [pc, #80]	; (8006268 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8006216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621a:	bf18      	it	ne
 800621c:	4293      	cmpne	r3, r2
 800621e:	d013      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006220:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006224:	4293      	cmp	r3, r2
 8006226:	d00f      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006228:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800622c:	4293      	cmp	r3, r2
 800622e:	d00b      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006230:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006234:	4293      	cmp	r3, r2
 8006236:	d007      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006238:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800623c:	4293      	cmp	r3, r2
 800623e:	d003      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006240:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8006244:	4293      	cmp	r3, r2
 8006246:	d104      	bne.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006248:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800624c:	688a      	ldr	r2, [r1, #8]
 800624e:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006250:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006252:	2301      	movs	r3, #1
 8006254:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006258:	2300      	movs	r3, #0
 800625a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800625e:	4618      	mov	r0, r3
}
 8006260:	bc70      	pop	{r4, r5, r6}
 8006262:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006264:	2002      	movs	r0, #2
}
 8006266:	4770      	bx	lr
 8006268:	40010000 	.word	0x40010000
 800626c:	40010400 	.word	0x40010400

08006270 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006270:	6802      	ldr	r2, [r0, #0]
 8006272:	6813      	ldr	r3, [r2, #0]
 8006274:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006278:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800627a:	6802      	ldr	r2, [r0, #0]
 800627c:	6891      	ldr	r1, [r2, #8]
 800627e:	4b04      	ldr	r3, [pc, #16]	; (8006290 <UART_EndRxTransfer+0x20>)
 8006280:	400b      	ands	r3, r1
 8006282:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006284:	2320      	movs	r3, #32
 8006286:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800628a:	2300      	movs	r3, #0
 800628c:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800628e:	4770      	bx	lr
 8006290:	effffffe 	.word	0xeffffffe

08006294 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006294:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8006298:	2b21      	cmp	r3, #33	; 0x21
 800629a:	d000      	beq.n	800629e <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800629c:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800629e:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	b16b      	cbz	r3, 80062c2 <UART_TxISR_8BIT+0x2e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80062a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80062a8:	781a      	ldrb	r2, [r3, #0]
 80062aa:	6803      	ldr	r3, [r0, #0]
 80062ac:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80062ae:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80062b0:	3301      	adds	r3, #1
 80062b2:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 80062b4:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 80062c0:	e7ec      	b.n	800629c <UART_TxISR_8BIT+0x8>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80062c2:	6802      	ldr	r2, [r0, #0]
 80062c4:	6813      	ldr	r3, [r2, #0]
 80062c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ca:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062cc:	6802      	ldr	r2, [r0, #0]
 80062ce:	6813      	ldr	r3, [r2, #0]
 80062d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	4770      	bx	lr

080062d8 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062d8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80062dc:	2b21      	cmp	r3, #33	; 0x21
 80062de:	d000      	beq.n	80062e2 <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80062e0:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 80062e2:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	b17b      	cbz	r3, 800630a <UART_TxISR_16BIT+0x32>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80062ea:	6d03      	ldr	r3, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	6802      	ldr	r2, [r0, #0]
 80062f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f4:	6293      	str	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80062f6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80062f8:	3302      	adds	r3, #2
 80062fa:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 80062fc:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8006300:	3b01      	subs	r3, #1
 8006302:	b29b      	uxth	r3, r3
 8006304:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 8006308:	e7ea      	b.n	80062e0 <UART_TxISR_16BIT+0x8>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800630a:	6802      	ldr	r2, [r0, #0]
 800630c:	6813      	ldr	r3, [r2, #0]
 800630e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006312:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006314:	6802      	ldr	r2, [r0, #0]
 8006316:	6813      	ldr	r3, [r2, #0]
 8006318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	4770      	bx	lr

08006320 <UART_TxISR_8BIT_FIFOEN>:
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006320:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8006324:	2b21      	cmp	r3, #33	; 0x21
 8006326:	d000      	beq.n	800632a <UART_TxISR_8BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 8006328:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800632a:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800632e:	e00c      	b.n	800634a <UART_TxISR_8BIT_FIFOEN+0x2a>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006330:	6802      	ldr	r2, [r0, #0]
 8006332:	6893      	ldr	r3, [r2, #8]
 8006334:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006338:	6093      	str	r3, [r2, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800633a:	6802      	ldr	r2, [r0, #0]
 800633c:	6813      	ldr	r3, [r2, #0]
 800633e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006342:	6013      	str	r3, [r2, #0]
        break; /* force exit loop */
 8006344:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006346:	3b01      	subs	r3, #1
 8006348:	b29b      	uxth	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d0ec      	beq.n	8006328 <UART_TxISR_8BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 800634e:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8006352:	b292      	uxth	r2, r2
 8006354:	2a00      	cmp	r2, #0
 8006356:	d0eb      	beq.n	8006330 <UART_TxISR_8BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006358:	6802      	ldr	r2, [r0, #0]
 800635a:	69d1      	ldr	r1, [r2, #28]
 800635c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006360:	d0f1      	beq.n	8006346 <UART_TxISR_8BIT_FIFOEN+0x26>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006362:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8006364:	7809      	ldrb	r1, [r1, #0]
 8006366:	6291      	str	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr++;
 8006368:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800636a:	3201      	adds	r2, #1
 800636c:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 800636e:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8006372:	3a01      	subs	r2, #1
 8006374:	b292      	uxth	r2, r2
 8006376:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 800637a:	e7e4      	b.n	8006346 <UART_TxISR_8BIT_FIFOEN+0x26>

0800637c <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800637c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8006380:	2b21      	cmp	r3, #33	; 0x21
 8006382:	d000      	beq.n	8006386 <UART_TxISR_16BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 8006384:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006386:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800638a:	e00c      	b.n	80063a6 <UART_TxISR_16BIT_FIFOEN+0x2a>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800638c:	6802      	ldr	r2, [r0, #0]
 800638e:	6893      	ldr	r3, [r2, #8]
 8006390:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006394:	6093      	str	r3, [r2, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006396:	6802      	ldr	r2, [r0, #0]
 8006398:	6813      	ldr	r3, [r2, #0]
 800639a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800639e:	6013      	str	r3, [r2, #0]
        break; /* force exit loop */
 80063a0:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0ec      	beq.n	8006384 <UART_TxISR_16BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 80063aa:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 80063ae:	b292      	uxth	r2, r2
 80063b0:	2a00      	cmp	r2, #0
 80063b2:	d0eb      	beq.n	800638c <UART_TxISR_16BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80063b4:	6802      	ldr	r2, [r0, #0]
 80063b6:	69d1      	ldr	r1, [r2, #28]
 80063b8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80063bc:	d0f1      	beq.n	80063a2 <UART_TxISR_16BIT_FIFOEN+0x26>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 80063be:	6d01      	ldr	r1, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80063c0:	8809      	ldrh	r1, [r1, #0]
 80063c2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80063c6:	6291      	str	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80063c8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80063ca:	3202      	adds	r2, #2
 80063cc:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 80063ce:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 80063d2:	3a01      	subs	r2, #1
 80063d4:	b292      	uxth	r2, r2
 80063d6:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 80063da:	e7e2      	b.n	80063a2 <UART_TxISR_16BIT_FIFOEN+0x26>

080063dc <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 80063dc:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	d14a      	bne.n	800647a <HAL_UART_Transmit_IT+0x9e>
    if ((pData == NULL) || (Size == 0U))
 80063e4:	fab2 f382 	clz	r3, r2
 80063e8:	095b      	lsrs	r3, r3, #5
 80063ea:	2900      	cmp	r1, #0
 80063ec:	bf08      	it	eq
 80063ee:	2301      	moveq	r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d144      	bne.n	800647e <HAL_UART_Transmit_IT+0xa2>
    __HAL_LOCK(huart);
 80063f4:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d042      	beq.n	8006482 <HAL_UART_Transmit_IT+0xa6>
 80063fc:	2301      	movs	r3, #1
 80063fe:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->pTxBuffPtr  = pData;
 8006402:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006404:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8006408:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->TxISR       = NULL;
 800640c:	2300      	movs	r3, #0
 800640e:	6703      	str	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006410:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006414:	2321      	movs	r3, #33	; 0x21
 8006416:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800641a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800641c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006420:	d00f      	beq.n	8006442 <HAL_UART_Transmit_IT+0x66>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006422:	6883      	ldr	r3, [r0, #8]
 8006424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006428:	d021      	beq.n	800646e <HAL_UART_Transmit_IT+0x92>
        huart->TxISR = UART_TxISR_8BIT;
 800642a:	4b17      	ldr	r3, [pc, #92]	; (8006488 <HAL_UART_Transmit_IT+0xac>)
 800642c:	6703      	str	r3, [r0, #112]	; 0x70
      __HAL_UNLOCK(huart);
 800642e:	2300      	movs	r3, #0
 8006430:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006434:	6801      	ldr	r1, [r0, #0]
 8006436:	680a      	ldr	r2, [r1, #0]
 8006438:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800643c:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 800643e:	4618      	mov	r0, r3
 8006440:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006442:	6883      	ldr	r3, [r0, #8]
 8006444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006448:	d00b      	beq.n	8006462 <HAL_UART_Transmit_IT+0x86>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800644a:	4b10      	ldr	r3, [pc, #64]	; (800648c <HAL_UART_Transmit_IT+0xb0>)
 800644c:	6703      	str	r3, [r0, #112]	; 0x70
      __HAL_UNLOCK(huart);
 800644e:	2300      	movs	r3, #0
 8006450:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006454:	6801      	ldr	r1, [r0, #0]
 8006456:	688a      	ldr	r2, [r1, #8]
 8006458:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800645c:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 800645e:	4618      	mov	r0, r3
 8006460:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006462:	6903      	ldr	r3, [r0, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1f0      	bne.n	800644a <HAL_UART_Transmit_IT+0x6e>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006468:	4b09      	ldr	r3, [pc, #36]	; (8006490 <HAL_UART_Transmit_IT+0xb4>)
 800646a:	6703      	str	r3, [r0, #112]	; 0x70
 800646c:	e7ef      	b.n	800644e <HAL_UART_Transmit_IT+0x72>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800646e:	6903      	ldr	r3, [r0, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1da      	bne.n	800642a <HAL_UART_Transmit_IT+0x4e>
        huart->TxISR = UART_TxISR_16BIT;
 8006474:	4b07      	ldr	r3, [pc, #28]	; (8006494 <HAL_UART_Transmit_IT+0xb8>)
 8006476:	6703      	str	r3, [r0, #112]	; 0x70
 8006478:	e7d9      	b.n	800642e <HAL_UART_Transmit_IT+0x52>
    return HAL_BUSY;
 800647a:	2002      	movs	r0, #2
 800647c:	4770      	bx	lr
      return HAL_ERROR;
 800647e:	2001      	movs	r0, #1
 8006480:	4770      	bx	lr
    __HAL_LOCK(huart);
 8006482:	2002      	movs	r0, #2
}
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	08006295 	.word	0x08006295
 800648c:	08006321 	.word	0x08006321
 8006490:	0800637d 	.word	0x0800637d
 8006494:	080062d9 	.word	0x080062d9

08006498 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8006498:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800649c:	2b20      	cmp	r3, #32
 800649e:	f040 8084 	bne.w	80065aa <HAL_UART_Receive_IT+0x112>
    if ((pData == NULL) || (Size == 0U))
 80064a2:	fab2 f382 	clz	r3, r2
 80064a6:	095b      	lsrs	r3, r3, #5
 80064a8:	2900      	cmp	r1, #0
 80064aa:	bf08      	it	eq
 80064ac:	2301      	moveq	r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d17d      	bne.n	80065ae <HAL_UART_Receive_IT+0x116>
    __HAL_LOCK(huart);
 80064b2:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d07b      	beq.n	80065b2 <HAL_UART_Receive_IT+0x11a>
 80064ba:	2301      	movs	r3, #1
 80064bc:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->pRxBuffPtr  = pData;
 80064c0:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferSize  = Size;
 80064c2:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 80064c6:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    huart->RxISR       = NULL;
 80064ca:	2300      	movs	r3, #0
 80064cc:	66c3      	str	r3, [r0, #108]	; 0x6c
    UART_MASK_COMPUTATION(huart);
 80064ce:	6883      	ldr	r3, [r0, #8]
 80064d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d4:	d006      	beq.n	80064e4 <HAL_UART_Receive_IT+0x4c>
 80064d6:	b9a3      	cbnz	r3, 8006502 <HAL_UART_Receive_IT+0x6a>
 80064d8:	6903      	ldr	r3, [r0, #16]
 80064da:	b973      	cbnz	r3, 80064fa <HAL_UART_Receive_IT+0x62>
 80064dc:	23ff      	movs	r3, #255	; 0xff
 80064de:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80064e2:	e014      	b.n	800650e <HAL_UART_Receive_IT+0x76>
 80064e4:	6903      	ldr	r3, [r0, #16]
 80064e6:	b923      	cbnz	r3, 80064f2 <HAL_UART_Receive_IT+0x5a>
 80064e8:	f240 13ff 	movw	r3, #511	; 0x1ff
 80064ec:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80064f0:	e00d      	b.n	800650e <HAL_UART_Receive_IT+0x76>
 80064f2:	23ff      	movs	r3, #255	; 0xff
 80064f4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80064f8:	e009      	b.n	800650e <HAL_UART_Receive_IT+0x76>
 80064fa:	237f      	movs	r3, #127	; 0x7f
 80064fc:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006500:	e005      	b.n	800650e <HAL_UART_Receive_IT+0x76>
 8006502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006506:	d021      	beq.n	800654c <HAL_UART_Receive_IT+0xb4>
 8006508:	2300      	movs	r3, #0
 800650a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650e:	2300      	movs	r3, #0
 8006510:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006514:	2322      	movs	r3, #34	; 0x22
 8006516:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800651a:	6801      	ldr	r1, [r0, #0]
 800651c:	688b      	ldr	r3, [r1, #8]
 800651e:	f043 0301 	orr.w	r3, r3, #1
 8006522:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006524:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800652a:	d019      	beq.n	8006560 <HAL_UART_Receive_IT+0xc8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800652c:	6883      	ldr	r3, [r0, #8]
 800652e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006532:	d034      	beq.n	800659e <HAL_UART_Receive_IT+0x106>
        huart->RxISR = UART_RxISR_8BIT;
 8006534:	4b20      	ldr	r3, [pc, #128]	; (80065b8 <HAL_UART_Receive_IT+0x120>)
 8006536:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 8006538:	2300      	movs	r3, #0
 800653a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800653e:	6801      	ldr	r1, [r0, #0]
 8006540:	680a      	ldr	r2, [r1, #0]
 8006542:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006546:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8006548:	4618      	mov	r0, r3
 800654a:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800654c:	6903      	ldr	r3, [r0, #16]
 800654e:	b91b      	cbnz	r3, 8006558 <HAL_UART_Receive_IT+0xc0>
 8006550:	237f      	movs	r3, #127	; 0x7f
 8006552:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006556:	e7da      	b.n	800650e <HAL_UART_Receive_IT+0x76>
 8006558:	233f      	movs	r3, #63	; 0x3f
 800655a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800655e:	e7d6      	b.n	800650e <HAL_UART_Receive_IT+0x76>
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006560:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8006564:	4293      	cmp	r3, r2
 8006566:	d8e1      	bhi.n	800652c <HAL_UART_Receive_IT+0x94>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006568:	6883      	ldr	r3, [r0, #8]
 800656a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656e:	d010      	beq.n	8006592 <HAL_UART_Receive_IT+0xfa>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006570:	4b12      	ldr	r3, [pc, #72]	; (80065bc <HAL_UART_Receive_IT+0x124>)
 8006572:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 8006574:	2300      	movs	r3, #0
 8006576:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800657a:	6801      	ldr	r1, [r0, #0]
 800657c:	680a      	ldr	r2, [r1, #0]
 800657e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006582:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006584:	6801      	ldr	r1, [r0, #0]
 8006586:	688a      	ldr	r2, [r1, #8]
 8006588:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800658c:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 800658e:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006590:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006592:	6903      	ldr	r3, [r0, #16]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1eb      	bne.n	8006570 <HAL_UART_Receive_IT+0xd8>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006598:	4b09      	ldr	r3, [pc, #36]	; (80065c0 <HAL_UART_Receive_IT+0x128>)
 800659a:	66c3      	str	r3, [r0, #108]	; 0x6c
 800659c:	e7ea      	b.n	8006574 <HAL_UART_Receive_IT+0xdc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800659e:	6903      	ldr	r3, [r0, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1c7      	bne.n	8006534 <HAL_UART_Receive_IT+0x9c>
        huart->RxISR = UART_RxISR_16BIT;
 80065a4:	4b07      	ldr	r3, [pc, #28]	; (80065c4 <HAL_UART_Receive_IT+0x12c>)
 80065a6:	66c3      	str	r3, [r0, #108]	; 0x6c
 80065a8:	e7c6      	b.n	8006538 <HAL_UART_Receive_IT+0xa0>
    return HAL_BUSY;
 80065aa:	2002      	movs	r0, #2
 80065ac:	4770      	bx	lr
      return HAL_ERROR;
 80065ae:	2001      	movs	r0, #1
 80065b0:	4770      	bx	lr
    __HAL_LOCK(huart);
 80065b2:	2002      	movs	r0, #2
}
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	080065e5 	.word	0x080065e5
 80065bc:	080066b1 	.word	0x080066b1
 80065c0:	0800675d 	.word	0x0800675d
 80065c4:	0800664b 	.word	0x0800664b

080065c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065c8:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065ca:	6801      	ldr	r1, [r0, #0]
 80065cc:	680a      	ldr	r2, [r1, #0]
 80065ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065d2:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065d4:	2220      	movs	r2, #32
 80065d6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065da:	2200      	movs	r2, #0
 80065dc:	6702      	str	r2, [r0, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065de:	f7fd fa41 	bl	8003a64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065e2:	bd08      	pop	{r3, pc}

080065e4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065e4:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80065e6:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065ea:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80065ee:	2a22      	cmp	r2, #34	; 0x22
 80065f0:	d005      	beq.n	80065fe <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065f2:	6802      	ldr	r2, [r0, #0]
 80065f4:	6993      	ldr	r3, [r2, #24]
 80065f6:	f043 0308 	orr.w	r3, r3, #8
 80065fa:	6193      	str	r3, [r2, #24]
  }
}
 80065fc:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065fe:	6802      	ldr	r2, [r0, #0]
 8006600:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006602:	b2db      	uxtb	r3, r3
 8006604:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8006606:	400b      	ands	r3, r1
 8006608:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800660a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800660c:	3301      	adds	r3, #1
 800660e:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8006610:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006614:	3b01      	subs	r3, #1
 8006616:	b29b      	uxth	r3, r3
 8006618:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800661c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006620:	b29b      	uxth	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1ea      	bne.n	80065fc <UART_RxISR_8BIT+0x18>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006626:	6802      	ldr	r2, [r0, #0]
 8006628:	6813      	ldr	r3, [r2, #0]
 800662a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800662e:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006630:	6802      	ldr	r2, [r0, #0]
 8006632:	6893      	ldr	r3, [r2, #8]
 8006634:	f023 0301 	bic.w	r3, r3, #1
 8006638:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800663a:	2320      	movs	r3, #32
 800663c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
      huart->RxISR = NULL;
 8006640:	2300      	movs	r3, #0
 8006642:	66c3      	str	r3, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 8006644:	f7fd fa14 	bl	8003a70 <HAL_UART_RxCpltCallback>
 8006648:	e7d8      	b.n	80065fc <UART_RxISR_8BIT+0x18>

0800664a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800664a:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800664c:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006650:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006654:	2b22      	cmp	r3, #34	; 0x22
 8006656:	d005      	beq.n	8006664 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006658:	6802      	ldr	r2, [r0, #0]
 800665a:	6993      	ldr	r3, [r2, #24]
 800665c:	f043 0308 	orr.w	r3, r3, #8
 8006660:	6193      	str	r3, [r2, #24]
  }
}
 8006662:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006664:	6803      	ldr	r3, [r0, #0]
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006668:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 800666a:	4013      	ands	r3, r2
 800666c:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 800666e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006670:	3302      	adds	r3, #2
 8006672:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8006674:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006678:	3b01      	subs	r3, #1
 800667a:	b29b      	uxth	r3, r3
 800667c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8006680:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1eb      	bne.n	8006662 <UART_RxISR_16BIT+0x18>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800668a:	6802      	ldr	r2, [r0, #0]
 800668c:	6813      	ldr	r3, [r2, #0]
 800668e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006692:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006694:	6802      	ldr	r2, [r0, #0]
 8006696:	6893      	ldr	r3, [r2, #8]
 8006698:	f023 0301 	bic.w	r3, r3, #1
 800669c:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800669e:	2320      	movs	r3, #32
 80066a0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
      huart->RxISR = NULL;
 80066a4:	2300      	movs	r3, #0
 80066a6:	66c3      	str	r3, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 80066a8:	f7fd f9e2 	bl	8003a70 <HAL_UART_RxCpltCallback>
 80066ac:	e7d9      	b.n	8006662 <UART_RxISR_16BIT+0x18>
	...

080066b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80066b0:	b570      	push	{r4, r5, r6, lr}
  uint16_t  uhMask = huart->Mask;
 80066b2:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066b6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80066ba:	2b22      	cmp	r3, #34	; 0x22
 80066bc:	d005      	beq.n	80066ca <UART_RxISR_8BIT_FIFOEN+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066be:	6802      	ldr	r2, [r0, #0]
 80066c0:	6993      	ldr	r3, [r2, #24]
 80066c2:	f043 0308 	orr.w	r3, r3, #8
 80066c6:	6193      	str	r3, [r2, #24]
  }
}
 80066c8:	bd70      	pop	{r4, r5, r6, pc}
 80066ca:	4604      	mov	r4, r0
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80066cc:	f8b0 6068 	ldrh.w	r6, [r0, #104]	; 0x68
 80066d0:	e001      	b.n	80066d6 <UART_RxISR_8BIT_FIFOEN+0x26>
 80066d2:	3e01      	subs	r6, #1
 80066d4:	b2b6      	uxth	r6, r6
 80066d6:	b336      	cbz	r6, 8006726 <UART_RxISR_8BIT_FIFOEN+0x76>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066dc:	b2eb      	uxtb	r3, r5
 80066de:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80066e0:	400b      	ands	r3, r1
 80066e2:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 80066e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066e6:	3301      	adds	r3, #1
 80066e8:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80066ea:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 80066f6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e8      	bne.n	80066d2 <UART_RxISR_8BIT_FIFOEN+0x22>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006700:	6822      	ldr	r2, [r4, #0]
 8006702:	6813      	ldr	r3, [r2, #0]
 8006704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006708:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800670a:	6822      	ldr	r2, [r4, #0]
 800670c:	6891      	ldr	r1, [r2, #8]
 800670e:	4b11      	ldr	r3, [pc, #68]	; (8006754 <UART_RxISR_8BIT_FIFOEN+0xa4>)
 8006710:	400b      	ands	r3, r1
 8006712:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8006714:	2320      	movs	r3, #32
 8006716:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 800671a:	2300      	movs	r3, #0
 800671c:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800671e:	4620      	mov	r0, r4
 8006720:	f7fd f9a6 	bl	8003a70 <HAL_UART_RxCpltCallback>
 8006724:	e7d5      	b.n	80066d2 <UART_RxISR_8BIT_FIFOEN+0x22>
    rxdatacount = huart->RxXferCount;
 8006726:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800672a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0cb      	beq.n	80066c8 <UART_RxISR_8BIT_FIFOEN+0x18>
 8006730:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8006734:	429a      	cmp	r2, r3
 8006736:	d9c7      	bls.n	80066c8 <UART_RxISR_8BIT_FIFOEN+0x18>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006738:	6822      	ldr	r2, [r4, #0]
 800673a:	6893      	ldr	r3, [r2, #8]
 800673c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006740:	6093      	str	r3, [r2, #8]
      huart->RxISR = UART_RxISR_8BIT;
 8006742:	4b05      	ldr	r3, [pc, #20]	; (8006758 <UART_RxISR_8BIT_FIFOEN+0xa8>)
 8006744:	66e3      	str	r3, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006746:	6822      	ldr	r2, [r4, #0]
 8006748:	6813      	ldr	r3, [r2, #0]
 800674a:	f043 0320 	orr.w	r3, r3, #32
 800674e:	6013      	str	r3, [r2, #0]
 8006750:	e7ba      	b.n	80066c8 <UART_RxISR_8BIT_FIFOEN+0x18>
 8006752:	bf00      	nop
 8006754:	effffffe 	.word	0xeffffffe
 8006758:	080065e5 	.word	0x080065e5

0800675c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800675c:	b570      	push	{r4, r5, r6, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800675e:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006762:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006766:	2b22      	cmp	r3, #34	; 0x22
 8006768:	d005      	beq.n	8006776 <UART_RxISR_16BIT_FIFOEN+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800676a:	6802      	ldr	r2, [r0, #0]
 800676c:	6993      	ldr	r3, [r2, #24]
 800676e:	f043 0308 	orr.w	r3, r3, #8
 8006772:	6193      	str	r3, [r2, #24]
  }
}
 8006774:	bd70      	pop	{r4, r5, r6, pc}
 8006776:	4604      	mov	r4, r0
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006778:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 800677c:	e001      	b.n	8006782 <UART_RxISR_16BIT_FIFOEN+0x26>
 800677e:	3d01      	subs	r5, #1
 8006780:	b2ad      	uxth	r5, r5
 8006782:	b32d      	cbz	r5, 80067d0 <UART_RxISR_16BIT_FIFOEN+0x74>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006788:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800678a:	4033      	ands	r3, r6
 800678c:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800678e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006790:	3302      	adds	r3, #2
 8006792:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8006794:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006798:	3b01      	subs	r3, #1
 800679a:	b29b      	uxth	r3, r3
 800679c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 80067a0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1e9      	bne.n	800677e <UART_RxISR_16BIT_FIFOEN+0x22>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067aa:	6822      	ldr	r2, [r4, #0]
 80067ac:	6813      	ldr	r3, [r2, #0]
 80067ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067b2:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067b4:	6822      	ldr	r2, [r4, #0]
 80067b6:	6891      	ldr	r1, [r2, #8]
 80067b8:	4b10      	ldr	r3, [pc, #64]	; (80067fc <UART_RxISR_16BIT_FIFOEN+0xa0>)
 80067ba:	400b      	ands	r3, r1
 80067bc:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80067be:	2320      	movs	r3, #32
 80067c0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 80067c4:	2300      	movs	r3, #0
 80067c6:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 80067c8:	4620      	mov	r0, r4
 80067ca:	f7fd f951 	bl	8003a70 <HAL_UART_RxCpltCallback>
 80067ce:	e7d6      	b.n	800677e <UART_RxISR_16BIT_FIFOEN+0x22>
    rxdatacount = huart->RxXferCount;
 80067d0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80067d4:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d0cc      	beq.n	8006774 <UART_RxISR_16BIT_FIFOEN+0x18>
 80067da:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80067de:	429a      	cmp	r2, r3
 80067e0:	d9c8      	bls.n	8006774 <UART_RxISR_16BIT_FIFOEN+0x18>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80067e2:	6822      	ldr	r2, [r4, #0]
 80067e4:	6893      	ldr	r3, [r2, #8]
 80067e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067ea:	6093      	str	r3, [r2, #8]
      huart->RxISR = UART_RxISR_16BIT;
 80067ec:	4b04      	ldr	r3, [pc, #16]	; (8006800 <UART_RxISR_16BIT_FIFOEN+0xa4>)
 80067ee:	66e3      	str	r3, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80067f0:	6822      	ldr	r2, [r4, #0]
 80067f2:	6813      	ldr	r3, [r2, #0]
 80067f4:	f043 0320 	orr.w	r3, r3, #32
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	e7bb      	b.n	8006774 <UART_RxISR_16BIT_FIFOEN+0x18>
 80067fc:	effffffe 	.word	0xeffffffe
 8006800:	0800664b 	.word	0x0800664b

08006804 <HAL_UART_ErrorCallback>:
}
 8006804:	4770      	bx	lr
	...

08006808 <HAL_UART_IRQHandler>:
{
 8006808:	b570      	push	{r4, r5, r6, lr}
 800680a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800680c:	6801      	ldr	r1, [r0, #0]
 800680e:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006810:	680d      	ldr	r5, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006812:	6888      	ldr	r0, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006814:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8006818:	401a      	ands	r2, r3
 800681a:	d10d      	bne.n	8006838 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800681c:	f013 0f20 	tst.w	r3, #32
 8006820:	d00a      	beq.n	8006838 <HAL_UART_IRQHandler+0x30>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006822:	f015 0f20 	tst.w	r5, #32
 8006826:	d102      	bne.n	800682e <HAL_UART_IRQHandler+0x26>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006828:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 800682c:	d004      	beq.n	8006838 <HAL_UART_IRQHandler+0x30>
      if (huart->RxISR != NULL)
 800682e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006830:	b10b      	cbz	r3, 8006836 <HAL_UART_IRQHandler+0x2e>
        huart->RxISR(huart);
 8006832:	4620      	mov	r0, r4
 8006834:	4798      	blx	r3
}
 8006836:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != 0U)
 8006838:	2a00      	cmp	r2, #0
 800683a:	f000 8095 	beq.w	8006968 <HAL_UART_IRQHandler+0x160>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800683e:	4a68      	ldr	r2, [pc, #416]	; (80069e0 <HAL_UART_IRQHandler+0x1d8>)
 8006840:	4002      	ands	r2, r0
 8006842:	d103      	bne.n	800684c <HAL_UART_IRQHandler+0x44>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006844:	4e67      	ldr	r6, [pc, #412]	; (80069e4 <HAL_UART_IRQHandler+0x1dc>)
 8006846:	4235      	tst	r5, r6
 8006848:	f000 808e 	beq.w	8006968 <HAL_UART_IRQHandler+0x160>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800684c:	f013 0f01 	tst.w	r3, #1
 8006850:	d009      	beq.n	8006866 <HAL_UART_IRQHandler+0x5e>
 8006852:	f415 7f80 	tst.w	r5, #256	; 0x100
 8006856:	d006      	beq.n	8006866 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006858:	2601      	movs	r6, #1
 800685a:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800685c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8006860:	4331      	orrs	r1, r6
 8006862:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006866:	f013 0f02 	tst.w	r3, #2
 800686a:	d00b      	beq.n	8006884 <HAL_UART_IRQHandler+0x7c>
 800686c:	f010 0f01 	tst.w	r0, #1
 8006870:	d008      	beq.n	8006884 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006872:	6821      	ldr	r1, [r4, #0]
 8006874:	2602      	movs	r6, #2
 8006876:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006878:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800687c:	f041 0104 	orr.w	r1, r1, #4
 8006880:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006884:	f013 0f04 	tst.w	r3, #4
 8006888:	d00b      	beq.n	80068a2 <HAL_UART_IRQHandler+0x9a>
 800688a:	f010 0f01 	tst.w	r0, #1
 800688e:	d008      	beq.n	80068a2 <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006890:	6821      	ldr	r1, [r4, #0]
 8006892:	2604      	movs	r6, #4
 8006894:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006896:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800689a:	f041 0102 	orr.w	r1, r1, #2
 800689e:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068a2:	f013 0f08 	tst.w	r3, #8
 80068a6:	d00b      	beq.n	80068c0 <HAL_UART_IRQHandler+0xb8>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068a8:	f015 0f20 	tst.w	r5, #32
 80068ac:	d100      	bne.n	80068b0 <HAL_UART_IRQHandler+0xa8>
 80068ae:	b13a      	cbz	r2, 80068c0 <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068b0:	6822      	ldr	r2, [r4, #0]
 80068b2:	2108      	movs	r1, #8
 80068b4:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068b6:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80068ba:	430a      	orrs	r2, r1
 80068bc:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068c0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80068c4:	d00c      	beq.n	80068e0 <HAL_UART_IRQHandler+0xd8>
 80068c6:	f015 6f80 	tst.w	r5, #67108864	; 0x4000000
 80068ca:	d009      	beq.n	80068e0 <HAL_UART_IRQHandler+0xd8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068cc:	6822      	ldr	r2, [r4, #0]
 80068ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80068d2:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80068d4:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80068d8:	f042 0220 	orr.w	r2, r2, #32
 80068dc:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068e0:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80068e4:	2a00      	cmp	r2, #0
 80068e6:	d0a6      	beq.n	8006836 <HAL_UART_IRQHandler+0x2e>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068e8:	f013 0f20 	tst.w	r3, #32
 80068ec:	d009      	beq.n	8006902 <HAL_UART_IRQHandler+0xfa>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068ee:	f015 0f20 	tst.w	r5, #32
 80068f2:	d102      	bne.n	80068fa <HAL_UART_IRQHandler+0xf2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068f4:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 80068f8:	d003      	beq.n	8006902 <HAL_UART_IRQHandler+0xfa>
        if (huart->RxISR != NULL)
 80068fa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80068fc:	b10b      	cbz	r3, 8006902 <HAL_UART_IRQHandler+0xfa>
          huart->RxISR(huart);
 80068fe:	4620      	mov	r0, r4
 8006900:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8006902:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800690e:	d102      	bne.n	8006916 <HAL_UART_IRQHandler+0x10e>
 8006910:	f012 0f28 	tst.w	r2, #40	; 0x28
 8006914:	d021      	beq.n	800695a <HAL_UART_IRQHandler+0x152>
        UART_EndRxTransfer(huart);
 8006916:	4620      	mov	r0, r4
 8006918:	f7ff fcaa 	bl	8006270 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006924:	d015      	beq.n	8006952 <HAL_UART_IRQHandler+0x14a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800692c:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800692e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006930:	b15b      	cbz	r3, 800694a <HAL_UART_IRQHandler+0x142>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006932:	4a2d      	ldr	r2, [pc, #180]	; (80069e8 <HAL_UART_IRQHandler+0x1e0>)
 8006934:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006936:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006938:	f7fd fac0 	bl	8003ebc <HAL_DMA_Abort_IT>
 800693c:	2800      	cmp	r0, #0
 800693e:	f43f af7a 	beq.w	8006836 <HAL_UART_IRQHandler+0x2e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006942:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006944:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006946:	4798      	blx	r3
 8006948:	e775      	b.n	8006836 <HAL_UART_IRQHandler+0x2e>
            HAL_UART_ErrorCallback(huart);
 800694a:	4620      	mov	r0, r4
 800694c:	f7ff ff5a 	bl	8006804 <HAL_UART_ErrorCallback>
 8006950:	e771      	b.n	8006836 <HAL_UART_IRQHandler+0x2e>
          HAL_UART_ErrorCallback(huart);
 8006952:	4620      	mov	r0, r4
 8006954:	f7ff ff56 	bl	8006804 <HAL_UART_ErrorCallback>
 8006958:	e76d      	b.n	8006836 <HAL_UART_IRQHandler+0x2e>
        HAL_UART_ErrorCallback(huart);
 800695a:	4620      	mov	r0, r4
 800695c:	f7ff ff52 	bl	8006804 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006960:	2300      	movs	r3, #0
 8006962:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8006966:	e766      	b.n	8006836 <HAL_UART_IRQHandler+0x2e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006968:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800696c:	d002      	beq.n	8006974 <HAL_UART_IRQHandler+0x16c>
 800696e:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8006972:	d10f      	bne.n	8006994 <HAL_UART_IRQHandler+0x18c>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006974:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006978:	d013      	beq.n	80069a2 <HAL_UART_IRQHandler+0x19a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800697a:	f015 0f80 	tst.w	r5, #128	; 0x80
 800697e:	d102      	bne.n	8006986 <HAL_UART_IRQHandler+0x17e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006980:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8006984:	d00d      	beq.n	80069a2 <HAL_UART_IRQHandler+0x19a>
    if (huart->TxISR != NULL)
 8006986:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006988:	2b00      	cmp	r3, #0
 800698a:	f43f af54 	beq.w	8006836 <HAL_UART_IRQHandler+0x2e>
      huart->TxISR(huart);
 800698e:	4620      	mov	r0, r4
 8006990:	4798      	blx	r3
 8006992:	e750      	b.n	8006836 <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006994:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006998:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800699a:	4620      	mov	r0, r4
 800699c:	f000 fca0 	bl	80072e0 <HAL_UARTEx_WakeupCallback>
    return;
 80069a0:	e749      	b.n	8006836 <HAL_UART_IRQHandler+0x2e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80069a6:	d002      	beq.n	80069ae <HAL_UART_IRQHandler+0x1a6>
 80069a8:	f015 0f40 	tst.w	r5, #64	; 0x40
 80069ac:	d110      	bne.n	80069d0 <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80069ae:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80069b2:	d002      	beq.n	80069ba <HAL_UART_IRQHandler+0x1b2>
 80069b4:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
 80069b8:	d10e      	bne.n	80069d8 <HAL_UART_IRQHandler+0x1d0>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80069ba:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80069be:	f43f af3a 	beq.w	8006836 <HAL_UART_IRQHandler+0x2e>
 80069c2:	2d00      	cmp	r5, #0
 80069c4:	f6bf af37 	bge.w	8006836 <HAL_UART_IRQHandler+0x2e>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80069c8:	4620      	mov	r0, r4
 80069ca:	f000 fc8a 	bl	80072e2 <HAL_UARTEx_RxFifoFullCallback>
    return;
 80069ce:	e732      	b.n	8006836 <HAL_UART_IRQHandler+0x2e>
    UART_EndTransmit_IT(huart);
 80069d0:	4620      	mov	r0, r4
 80069d2:	f7ff fdf9 	bl	80065c8 <UART_EndTransmit_IT>
    return;
 80069d6:	e72e      	b.n	8006836 <HAL_UART_IRQHandler+0x2e>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80069d8:	4620      	mov	r0, r4
 80069da:	f000 fc83 	bl	80072e4 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80069de:	e72a      	b.n	8006836 <HAL_UART_IRQHandler+0x2e>
 80069e0:	10000001 	.word	0x10000001
 80069e4:	04000120 	.word	0x04000120
 80069e8:	080069ed 	.word	0x080069ed

080069ec <UART_DMAAbortOnError>:
{
 80069ec:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80069f6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80069fa:	f7ff ff03 	bl	8006804 <HAL_UART_ErrorCallback>
}
 80069fe:	bd08      	pop	{r3, pc}

08006a00 <UART_SetConfig>:
{
 8006a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a04:	b087      	sub	sp, #28
 8006a06:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a08:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a0a:	6883      	ldr	r3, [r0, #8]
 8006a0c:	6902      	ldr	r2, [r0, #16]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	6942      	ldr	r2, [r0, #20]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	69c2      	ldr	r2, [r0, #28]
 8006a16:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)huart->FifoMode;
 8006a18:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006a1a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a1c:	6808      	ldr	r0, [r1, #0]
 8006a1e:	4a88      	ldr	r2, [pc, #544]	; (8006c40 <UART_SetConfig+0x240>)
 8006a20:	4002      	ands	r2, r0
 8006a22:	431a      	orrs	r2, r3
 8006a24:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a26:	6822      	ldr	r2, [r4, #0]
 8006a28:	6853      	ldr	r3, [r2, #4]
 8006a2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006a2e:	68e1      	ldr	r1, [r4, #12]
 8006a30:	430b      	orrs	r3, r1
 8006a32:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a34:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a36:	6822      	ldr	r2, [r4, #0]
 8006a38:	4b82      	ldr	r3, [pc, #520]	; (8006c44 <UART_SetConfig+0x244>)
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d001      	beq.n	8006a42 <UART_SetConfig+0x42>
    tmpreg |= huart->Init.OneBitSampling;
 8006a3e:	6a23      	ldr	r3, [r4, #32]
 8006a40:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a42:	6890      	ldr	r0, [r2, #8]
 8006a44:	4b80      	ldr	r3, [pc, #512]	; (8006c48 <UART_SetConfig+0x248>)
 8006a46:	4003      	ands	r3, r0
 8006a48:	430b      	orrs	r3, r1
 8006a4a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a4c:	6822      	ldr	r2, [r4, #0]
 8006a4e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006a50:	f023 030f 	bic.w	r3, r3, #15
 8006a54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006a56:	430b      	orrs	r3, r1
 8006a58:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	4a7b      	ldr	r2, [pc, #492]	; (8006c4c <UART_SetConfig+0x24c>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d01f      	beq.n	8006aa2 <UART_SetConfig+0xa2>
 8006a62:	4a7b      	ldr	r2, [pc, #492]	; (8006c50 <UART_SetConfig+0x250>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d059      	beq.n	8006b1c <UART_SetConfig+0x11c>
 8006a68:	4a7a      	ldr	r2, [pc, #488]	; (8006c54 <UART_SetConfig+0x254>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d070      	beq.n	8006b50 <UART_SetConfig+0x150>
 8006a6e:	4a7a      	ldr	r2, [pc, #488]	; (8006c58 <UART_SetConfig+0x258>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	f000 8087 	beq.w	8006b84 <UART_SetConfig+0x184>
 8006a76:	4a79      	ldr	r2, [pc, #484]	; (8006c5c <UART_SetConfig+0x25c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	f000 809d 	beq.w	8006bb8 <UART_SetConfig+0x1b8>
 8006a7e:	4a78      	ldr	r2, [pc, #480]	; (8006c60 <UART_SetConfig+0x260>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	f000 80b3 	beq.w	8006bec <UART_SetConfig+0x1ec>
 8006a86:	4a77      	ldr	r2, [pc, #476]	; (8006c64 <UART_SetConfig+0x264>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	f000 80f1 	beq.w	8006c70 <UART_SetConfig+0x270>
 8006a8e:	4a76      	ldr	r2, [pc, #472]	; (8006c68 <UART_SetConfig+0x268>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	f000 8104 	beq.w	8006c9e <UART_SetConfig+0x29e>
 8006a96:	4a6b      	ldr	r2, [pc, #428]	; (8006c44 <UART_SetConfig+0x244>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	f000 8117 	beq.w	8006ccc <UART_SetConfig+0x2cc>
 8006a9e:	2280      	movs	r2, #128	; 0x80
 8006aa0:	e12d      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006aa2:	4a72      	ldr	r2, [pc, #456]	; (8006c6c <UART_SetConfig+0x26c>)
 8006aa4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006aa6:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8006aaa:	2a28      	cmp	r2, #40	; 0x28
 8006aac:	d834      	bhi.n	8006b18 <UART_SetConfig+0x118>
 8006aae:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006ab2:	0029      	.short	0x0029
 8006ab4:	00330033 	.word	0x00330033
 8006ab8:	00330033 	.word	0x00330033
 8006abc:	00330033 	.word	0x00330033
 8006ac0:	01250033 	.word	0x01250033
 8006ac4:	00330033 	.word	0x00330033
 8006ac8:	00330033 	.word	0x00330033
 8006acc:	00330033 	.word	0x00330033
 8006ad0:	002b0033 	.word	0x002b0033
 8006ad4:	00330033 	.word	0x00330033
 8006ad8:	00330033 	.word	0x00330033
 8006adc:	00330033 	.word	0x00330033
 8006ae0:	002d0033 	.word	0x002d0033
 8006ae4:	00330033 	.word	0x00330033
 8006ae8:	00330033 	.word	0x00330033
 8006aec:	00330033 	.word	0x00330033
 8006af0:	002f0033 	.word	0x002f0033
 8006af4:	00330033 	.word	0x00330033
 8006af8:	00330033 	.word	0x00330033
 8006afc:	00330033 	.word	0x00330033
 8006b00:	00310033 	.word	0x00310033
 8006b04:	2201      	movs	r2, #1
 8006b06:	e0fa      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b08:	2208      	movs	r2, #8
 8006b0a:	e0f8      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b0c:	2210      	movs	r2, #16
 8006b0e:	e0f6      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b10:	2220      	movs	r2, #32
 8006b12:	e0f4      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b14:	2240      	movs	r2, #64	; 0x40
 8006b16:	e0f2      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b18:	2280      	movs	r2, #128	; 0x80
 8006b1a:	e0f0      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b1c:	4a53      	ldr	r2, [pc, #332]	; (8006c6c <UART_SetConfig+0x26c>)
 8006b1e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006b20:	f002 0207 	and.w	r2, r2, #7
 8006b24:	2a05      	cmp	r2, #5
 8006b26:	d811      	bhi.n	8006b4c <UART_SetConfig+0x14c>
 8006b28:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006b2c:	01370006 	.word	0x01370006
 8006b30:	000a0008 	.word	0x000a0008
 8006b34:	000e000c 	.word	0x000e000c
 8006b38:	2200      	movs	r2, #0
 8006b3a:	e0e0      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b3c:	2208      	movs	r2, #8
 8006b3e:	e0de      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b40:	2210      	movs	r2, #16
 8006b42:	e0dc      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b44:	2220      	movs	r2, #32
 8006b46:	e0da      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b48:	2240      	movs	r2, #64	; 0x40
 8006b4a:	e0d8      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b4c:	2280      	movs	r2, #128	; 0x80
 8006b4e:	e0d6      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b50:	4a46      	ldr	r2, [pc, #280]	; (8006c6c <UART_SetConfig+0x26c>)
 8006b52:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006b54:	f002 0207 	and.w	r2, r2, #7
 8006b58:	2a05      	cmp	r2, #5
 8006b5a:	d811      	bhi.n	8006b80 <UART_SetConfig+0x180>
 8006b5c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006b60:	011f0006 	.word	0x011f0006
 8006b64:	000a0008 	.word	0x000a0008
 8006b68:	000e000c 	.word	0x000e000c
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	e0c6      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b70:	2208      	movs	r2, #8
 8006b72:	e0c4      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b74:	2210      	movs	r2, #16
 8006b76:	e0c2      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b78:	2220      	movs	r2, #32
 8006b7a:	e0c0      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b7c:	2240      	movs	r2, #64	; 0x40
 8006b7e:	e0be      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b80:	2280      	movs	r2, #128	; 0x80
 8006b82:	e0bc      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b84:	4a39      	ldr	r2, [pc, #228]	; (8006c6c <UART_SetConfig+0x26c>)
 8006b86:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006b88:	f002 0207 	and.w	r2, r2, #7
 8006b8c:	2a05      	cmp	r2, #5
 8006b8e:	d811      	bhi.n	8006bb4 <UART_SetConfig+0x1b4>
 8006b90:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006b94:	01070006 	.word	0x01070006
 8006b98:	000a0008 	.word	0x000a0008
 8006b9c:	000e000c 	.word	0x000e000c
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	e0ac      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006ba4:	2208      	movs	r2, #8
 8006ba6:	e0aa      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006ba8:	2210      	movs	r2, #16
 8006baa:	e0a8      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006bac:	2220      	movs	r2, #32
 8006bae:	e0a6      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006bb0:	2240      	movs	r2, #64	; 0x40
 8006bb2:	e0a4      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006bb4:	2280      	movs	r2, #128	; 0x80
 8006bb6:	e0a2      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006bb8:	4a2c      	ldr	r2, [pc, #176]	; (8006c6c <UART_SetConfig+0x26c>)
 8006bba:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006bbc:	f002 0207 	and.w	r2, r2, #7
 8006bc0:	2a05      	cmp	r2, #5
 8006bc2:	d811      	bhi.n	8006be8 <UART_SetConfig+0x1e8>
 8006bc4:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006bc8:	00ef0006 	.word	0x00ef0006
 8006bcc:	000a0008 	.word	0x000a0008
 8006bd0:	000e000c 	.word	0x000e000c
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	e092      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006bd8:	2208      	movs	r2, #8
 8006bda:	e090      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006bdc:	2210      	movs	r2, #16
 8006bde:	e08e      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006be0:	2220      	movs	r2, #32
 8006be2:	e08c      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006be4:	2240      	movs	r2, #64	; 0x40
 8006be6:	e08a      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006be8:	2280      	movs	r2, #128	; 0x80
 8006bea:	e088      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006bec:	4a1f      	ldr	r2, [pc, #124]	; (8006c6c <UART_SetConfig+0x26c>)
 8006bee:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006bf0:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8006bf4:	2a28      	cmp	r2, #40	; 0x28
 8006bf6:	d820      	bhi.n	8006c3a <UART_SetConfig+0x23a>
 8006bf8:	e8df f002 	tbb	[pc, r2]
 8006bfc:	1f1f1f15 	.word	0x1f1f1f15
 8006c00:	1f1f1f1f 	.word	0x1f1f1f1f
 8006c04:	1f1f1fd7 	.word	0x1f1f1fd7
 8006c08:	1f1f1f1f 	.word	0x1f1f1f1f
 8006c0c:	1f1f1f17 	.word	0x1f1f1f17
 8006c10:	1f1f1f1f 	.word	0x1f1f1f1f
 8006c14:	1f1f1f19 	.word	0x1f1f1f19
 8006c18:	1f1f1f1f 	.word	0x1f1f1f1f
 8006c1c:	1f1f1f1b 	.word	0x1f1f1f1b
 8006c20:	1f1f1f1f 	.word	0x1f1f1f1f
 8006c24:	1d          	.byte	0x1d
 8006c25:	00          	.byte	0x00
 8006c26:	2201      	movs	r2, #1
 8006c28:	e069      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c2a:	2208      	movs	r2, #8
 8006c2c:	e067      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c2e:	2210      	movs	r2, #16
 8006c30:	e065      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c32:	2220      	movs	r2, #32
 8006c34:	e063      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c36:	2240      	movs	r2, #64	; 0x40
 8006c38:	e061      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c3a:	2280      	movs	r2, #128	; 0x80
 8006c3c:	e05f      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c3e:	bf00      	nop
 8006c40:	cfff69f3 	.word	0xcfff69f3
 8006c44:	58000c00 	.word	0x58000c00
 8006c48:	11fff4ff 	.word	0x11fff4ff
 8006c4c:	40011000 	.word	0x40011000
 8006c50:	40004400 	.word	0x40004400
 8006c54:	40004800 	.word	0x40004800
 8006c58:	40004c00 	.word	0x40004c00
 8006c5c:	40005000 	.word	0x40005000
 8006c60:	40011400 	.word	0x40011400
 8006c64:	40007800 	.word	0x40007800
 8006c68:	40007c00 	.word	0x40007c00
 8006c6c:	58024400 	.word	0x58024400
 8006c70:	4a82      	ldr	r2, [pc, #520]	; (8006e7c <UART_SetConfig+0x47c>)
 8006c72:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006c74:	f002 0207 	and.w	r2, r2, #7
 8006c78:	2a05      	cmp	r2, #5
 8006c7a:	d80e      	bhi.n	8006c9a <UART_SetConfig+0x29a>
 8006c7c:	e8df f002 	tbb	[pc, r2]
 8006c80:	07059703 	.word	0x07059703
 8006c84:	0b09      	.short	0x0b09
 8006c86:	2200      	movs	r2, #0
 8006c88:	e039      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c8a:	2208      	movs	r2, #8
 8006c8c:	e037      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c8e:	2210      	movs	r2, #16
 8006c90:	e035      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c92:	2220      	movs	r2, #32
 8006c94:	e033      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c96:	2240      	movs	r2, #64	; 0x40
 8006c98:	e031      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c9a:	2280      	movs	r2, #128	; 0x80
 8006c9c:	e02f      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c9e:	4a77      	ldr	r2, [pc, #476]	; (8006e7c <UART_SetConfig+0x47c>)
 8006ca0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006ca2:	f002 0207 	and.w	r2, r2, #7
 8006ca6:	2a05      	cmp	r2, #5
 8006ca8:	d80e      	bhi.n	8006cc8 <UART_SetConfig+0x2c8>
 8006caa:	e8df f002 	tbb	[pc, r2]
 8006cae:	8203      	.short	0x8203
 8006cb0:	0b090705 	.word	0x0b090705
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	e022      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006cb8:	2208      	movs	r2, #8
 8006cba:	e020      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006cbc:	2210      	movs	r2, #16
 8006cbe:	e01e      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	e01c      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006cc4:	2240      	movs	r2, #64	; 0x40
 8006cc6:	e01a      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006cc8:	2280      	movs	r2, #128	; 0x80
 8006cca:	e018      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006ccc:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8006cd0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006cd2:	f002 0207 	and.w	r2, r2, #7
 8006cd6:	2a05      	cmp	r2, #5
 8006cd8:	d80e      	bhi.n	8006cf8 <UART_SetConfig+0x2f8>
 8006cda:	e8df f002 	tbb	[pc, r2]
 8006cde:	6c03      	.short	0x6c03
 8006ce0:	0b090705 	.word	0x0b090705
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	e00a      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006ce8:	2208      	movs	r2, #8
 8006cea:	e008      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006cec:	2210      	movs	r2, #16
 8006cee:	e006      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	e004      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006cf4:	2240      	movs	r2, #64	; 0x40
 8006cf6:	e002      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006cf8:	2280      	movs	r2, #128	; 0x80
 8006cfa:	e000      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006cfc:	2204      	movs	r2, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cfe:	4960      	ldr	r1, [pc, #384]	; (8006e80 <UART_SetConfig+0x480>)
 8006d00:	428b      	cmp	r3, r1
 8006d02:	d05a      	beq.n	8006dba <UART_SetConfig+0x3ba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d04:	69e3      	ldr	r3, [r4, #28]
 8006d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d0a:	f000 80c3 	beq.w	8006e94 <UART_SetConfig+0x494>
    switch (clocksource)
 8006d0e:	2a40      	cmp	r2, #64	; 0x40
 8006d10:	f200 8179 	bhi.w	8007006 <UART_SetConfig+0x606>
 8006d14:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006d18:	014b0127 	.word	0x014b0127
 8006d1c:	01770177 	.word	0x01770177
 8006d20:	0177014e 	.word	0x0177014e
 8006d24:	01770177 	.word	0x01770177
 8006d28:	01770153 	.word	0x01770153
 8006d2c:	01770177 	.word	0x01770177
 8006d30:	01770177 	.word	0x01770177
 8006d34:	01770177 	.word	0x01770177
 8006d38:	01770158 	.word	0x01770158
 8006d3c:	01770177 	.word	0x01770177
 8006d40:	01770177 	.word	0x01770177
 8006d44:	01770177 	.word	0x01770177
 8006d48:	01770177 	.word	0x01770177
 8006d4c:	01770177 	.word	0x01770177
 8006d50:	01770177 	.word	0x01770177
 8006d54:	01770177 	.word	0x01770177
 8006d58:	01770125 	.word	0x01770125
 8006d5c:	01770177 	.word	0x01770177
 8006d60:	01770177 	.word	0x01770177
 8006d64:	01770177 	.word	0x01770177
 8006d68:	01770177 	.word	0x01770177
 8006d6c:	01770177 	.word	0x01770177
 8006d70:	01770177 	.word	0x01770177
 8006d74:	01770177 	.word	0x01770177
 8006d78:	01770177 	.word	0x01770177
 8006d7c:	01770177 	.word	0x01770177
 8006d80:	01770177 	.word	0x01770177
 8006d84:	01770177 	.word	0x01770177
 8006d88:	01770177 	.word	0x01770177
 8006d8c:	01770177 	.word	0x01770177
 8006d90:	01770177 	.word	0x01770177
 8006d94:	01770177 	.word	0x01770177
 8006d98:	0164      	.short	0x0164
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d9a:	2204      	movs	r2, #4
 8006d9c:	e7af      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006d9e:	2204      	movs	r2, #4
 8006da0:	e7ad      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006da2:	2204      	movs	r2, #4
 8006da4:	e7ab      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006da6:	2204      	movs	r2, #4
 8006da8:	e7a9      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006daa:	2204      	movs	r2, #4
 8006dac:	e7a7      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006dae:	2204      	movs	r2, #4
 8006db0:	e7a5      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006db2:	2204      	movs	r2, #4
 8006db4:	e7a3      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006db6:	2204      	movs	r2, #4
 8006db8:	e7a1      	b.n	8006cfe <UART_SetConfig+0x2fe>
    switch (clocksource)
 8006dba:	2a08      	cmp	r2, #8
 8006dbc:	d048      	beq.n	8006e50 <UART_SetConfig+0x450>
 8006dbe:	d907      	bls.n	8006dd0 <UART_SetConfig+0x3d0>
 8006dc0:	2a20      	cmp	r2, #32
 8006dc2:	d00e      	beq.n	8006de2 <UART_SetConfig+0x3e2>
 8006dc4:	2a40      	cmp	r2, #64	; 0x40
 8006dc6:	d054      	beq.n	8006e72 <UART_SetConfig+0x472>
 8006dc8:	2a10      	cmp	r2, #16
 8006dca:	d046      	beq.n	8006e5a <UART_SetConfig+0x45a>
        ret = HAL_ERROR;
 8006dcc:	2001      	movs	r0, #1
 8006dce:	e0e3      	b.n	8006f98 <UART_SetConfig+0x598>
    switch (clocksource)
 8006dd0:	2a02      	cmp	r2, #2
 8006dd2:	d008      	beq.n	8006de6 <UART_SetConfig+0x3e6>
 8006dd4:	2a04      	cmp	r2, #4
 8006dd6:	d1f9      	bne.n	8006dcc <UART_SetConfig+0x3cc>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dd8:	a803      	add	r0, sp, #12
 8006dda:	f7fe fe75 	bl	8005ac8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006dde:	9804      	ldr	r0, [sp, #16]
        break;
 8006de0:	e003      	b.n	8006dea <UART_SetConfig+0x3ea>
        pclk = (uint32_t) CSI_VALUE;
 8006de2:	4828      	ldr	r0, [pc, #160]	; (8006e84 <UART_SetConfig+0x484>)
 8006de4:	e004      	b.n	8006df0 <UART_SetConfig+0x3f0>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006de6:	f7fe fe5d 	bl	8005aa4 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8006dea:	2800      	cmp	r0, #0
 8006dec:	f000 80fd 	beq.w	8006fea <UART_SetConfig+0x5ea>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006df0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006df2:	4b25      	ldr	r3, [pc, #148]	; (8006e88 <UART_SetConfig+0x488>)
 8006df4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006df8:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006dfc:	6865      	ldr	r5, [r4, #4]
 8006dfe:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8006e02:	4299      	cmp	r1, r3
 8006e04:	f200 80f3 	bhi.w	8006fee <UART_SetConfig+0x5ee>
 8006e08:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006e0c:	f200 80f1 	bhi.w	8006ff2 <UART_SetConfig+0x5f2>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e10:	f04f 0800 	mov.w	r8, #0
 8006e14:	b292      	uxth	r2, r2
 8006e16:	2300      	movs	r3, #0
 8006e18:	4641      	mov	r1, r8
 8006e1a:	f7f9 fb0d 	bl	8000438 <__aeabi_uldivmod>
 8006e1e:	020f      	lsls	r7, r1, #8
 8006e20:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8006e24:	0206      	lsls	r6, r0, #8
 8006e26:	0868      	lsrs	r0, r5, #1
 8006e28:	462a      	mov	r2, r5
 8006e2a:	4643      	mov	r3, r8
 8006e2c:	eb16 0800 	adds.w	r8, r6, r0
 8006e30:	f147 0900 	adc.w	r9, r7, #0
 8006e34:	4640      	mov	r0, r8
 8006e36:	4649      	mov	r1, r9
 8006e38:	f7f9 fafe 	bl	8000438 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e3c:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006e40:	4b12      	ldr	r3, [pc, #72]	; (8006e8c <UART_SetConfig+0x48c>)
 8006e42:	429a      	cmp	r2, r3
 8006e44:	f200 80d7 	bhi.w	8006ff6 <UART_SetConfig+0x5f6>
          huart->Instance->BRR = usartdiv;
 8006e48:	6823      	ldr	r3, [r4, #0]
 8006e4a:	60d8      	str	r0, [r3, #12]
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	e0a3      	b.n	8006f98 <UART_SetConfig+0x598>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e50:	4668      	mov	r0, sp
 8006e52:	f7fe ff37 	bl	8005cc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e56:	9801      	ldr	r0, [sp, #4]
        break;
 8006e58:	e7c7      	b.n	8006dea <UART_SetConfig+0x3ea>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e5a:	4b08      	ldr	r3, [pc, #32]	; (8006e7c <UART_SetConfig+0x47c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f013 0f20 	tst.w	r3, #32
 8006e62:	d009      	beq.n	8006e78 <UART_SetConfig+0x478>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e64:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <UART_SetConfig+0x47c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006e6c:	4808      	ldr	r0, [pc, #32]	; (8006e90 <UART_SetConfig+0x490>)
 8006e6e:	40d8      	lsrs	r0, r3
 8006e70:	e7bb      	b.n	8006dea <UART_SetConfig+0x3ea>
        pclk = (uint32_t) LSE_VALUE;
 8006e72:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006e76:	e7bb      	b.n	8006df0 <UART_SetConfig+0x3f0>
          pclk = (uint32_t) HSI_VALUE;
 8006e78:	4805      	ldr	r0, [pc, #20]	; (8006e90 <UART_SetConfig+0x490>)
 8006e7a:	e7b9      	b.n	8006df0 <UART_SetConfig+0x3f0>
 8006e7c:	58024400 	.word	0x58024400
 8006e80:	58000c00 	.word	0x58000c00
 8006e84:	003d0900 	.word	0x003d0900
 8006e88:	0800e1e0 	.word	0x0800e1e0
 8006e8c:	000ffcff 	.word	0x000ffcff
 8006e90:	03d09000 	.word	0x03d09000
    switch (clocksource)
 8006e94:	2a40      	cmp	r2, #64	; 0x40
 8006e96:	f200 80b0 	bhi.w	8006ffa <UART_SetConfig+0x5fa>
 8006e9a:	e8df f002 	tbb	[pc, r2]
 8006e9e:	4423      	.short	0x4423
 8006ea0:	ae47aeae 	.word	0xae47aeae
 8006ea4:	ae4caeae 	.word	0xae4caeae
 8006ea8:	aeaeaeae 	.word	0xaeaeaeae
 8006eac:	ae51aeae 	.word	0xae51aeae
 8006eb0:	aeaeaeae 	.word	0xaeaeaeae
 8006eb4:	aeaeaeae 	.word	0xaeaeaeae
 8006eb8:	aeaeaeae 	.word	0xaeaeaeae
 8006ebc:	ae21aeae 	.word	0xae21aeae
 8006ec0:	aeaeaeae 	.word	0xaeaeaeae
 8006ec4:	aeaeaeae 	.word	0xaeaeaeae
 8006ec8:	aeaeaeae 	.word	0xaeaeaeae
 8006ecc:	aeaeaeae 	.word	0xaeaeaeae
 8006ed0:	aeaeaeae 	.word	0xaeaeaeae
 8006ed4:	aeaeaeae 	.word	0xaeaeaeae
 8006ed8:	aeaeaeae 	.word	0xaeaeaeae
 8006edc:	aeae      	.short	0xaeae
 8006ede:	5d          	.byte	0x5d
 8006edf:	00          	.byte	0x00
        pclk = (uint32_t) CSI_VALUE;
 8006ee0:	484c      	ldr	r0, [pc, #304]	; (8007014 <UART_SetConfig+0x614>)
 8006ee2:	e004      	b.n	8006eee <UART_SetConfig+0x4ee>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ee4:	f7fe f812 	bl	8004f0c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	f000 8088 	beq.w	8006ffe <UART_SetConfig+0x5fe>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006ef0:	4b49      	ldr	r3, [pc, #292]	; (8007018 <UART_SetConfig+0x618>)
 8006ef2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006ef6:	fbb0 f0f3 	udiv	r0, r0, r3
 8006efa:	6862      	ldr	r2, [r4, #4]
 8006efc:	0853      	lsrs	r3, r2, #1
 8006efe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006f02:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f06:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f08:	f1a3 0110 	sub.w	r1, r3, #16
 8006f0c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006f10:	4291      	cmp	r1, r2
 8006f12:	d876      	bhi.n	8007002 <UART_SetConfig+0x602>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f14:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f18:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8006f1c:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8006f1e:	6822      	ldr	r2, [r4, #0]
 8006f20:	60d3      	str	r3, [r2, #12]
 8006f22:	2000      	movs	r0, #0
 8006f24:	e038      	b.n	8006f98 <UART_SetConfig+0x598>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f26:	f7fe f803 	bl	8004f30 <HAL_RCC_GetPCLK2Freq>
        break;
 8006f2a:	e7dd      	b.n	8006ee8 <UART_SetConfig+0x4e8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f2c:	a803      	add	r0, sp, #12
 8006f2e:	f7fe fdcb 	bl	8005ac8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f32:	9804      	ldr	r0, [sp, #16]
        break;
 8006f34:	e7d8      	b.n	8006ee8 <UART_SetConfig+0x4e8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f36:	4668      	mov	r0, sp
 8006f38:	f7fe fec4 	bl	8005cc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f3c:	9801      	ldr	r0, [sp, #4]
        break;
 8006f3e:	e7d3      	b.n	8006ee8 <UART_SetConfig+0x4e8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f40:	4b36      	ldr	r3, [pc, #216]	; (800701c <UART_SetConfig+0x61c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f013 0f20 	tst.w	r3, #32
 8006f48:	d009      	beq.n	8006f5e <UART_SetConfig+0x55e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f4a:	4b34      	ldr	r3, [pc, #208]	; (800701c <UART_SetConfig+0x61c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006f52:	4833      	ldr	r0, [pc, #204]	; (8007020 <UART_SetConfig+0x620>)
 8006f54:	40d8      	lsrs	r0, r3
 8006f56:	e7c7      	b.n	8006ee8 <UART_SetConfig+0x4e8>
        pclk = (uint32_t) LSE_VALUE;
 8006f58:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006f5c:	e7c7      	b.n	8006eee <UART_SetConfig+0x4ee>
          pclk = (uint32_t) HSI_VALUE;
 8006f5e:	4830      	ldr	r0, [pc, #192]	; (8007020 <UART_SetConfig+0x620>)
 8006f60:	e7c5      	b.n	8006eee <UART_SetConfig+0x4ee>
        pclk = (uint32_t) CSI_VALUE;
 8006f62:	482c      	ldr	r0, [pc, #176]	; (8007014 <UART_SetConfig+0x614>)
 8006f64:	e003      	b.n	8006f6e <UART_SetConfig+0x56e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f66:	f7fd ffd1 	bl	8004f0c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d04d      	beq.n	800700a <UART_SetConfig+0x60a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006f70:	4b29      	ldr	r3, [pc, #164]	; (8007018 <UART_SetConfig+0x618>)
 8006f72:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006f76:	fbb0 f0f3 	udiv	r0, r0, r3
 8006f7a:	6863      	ldr	r3, [r4, #4]
 8006f7c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006f80:	fbb0 f0f3 	udiv	r0, r0, r3
 8006f84:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f86:	f1a0 0210 	sub.w	r2, r0, #16
 8006f8a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d83d      	bhi.n	800700e <UART_SetConfig+0x60e>
        huart->Instance->BRR = usartdiv;
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	60d8      	str	r0, [r3, #12]
 8006f96:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006f9e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8006fa6:	6723      	str	r3, [r4, #112]	; 0x70
}
 8006fa8:	b007      	add	sp, #28
 8006faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fae:	f7fd ffbf 	bl	8004f30 <HAL_RCC_GetPCLK2Freq>
        break;
 8006fb2:	e7da      	b.n	8006f6a <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fb4:	a803      	add	r0, sp, #12
 8006fb6:	f7fe fd87 	bl	8005ac8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006fba:	9804      	ldr	r0, [sp, #16]
        break;
 8006fbc:	e7d5      	b.n	8006f6a <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fbe:	4668      	mov	r0, sp
 8006fc0:	f7fe fe80 	bl	8005cc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006fc4:	9801      	ldr	r0, [sp, #4]
        break;
 8006fc6:	e7d0      	b.n	8006f6a <UART_SetConfig+0x56a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fc8:	4b14      	ldr	r3, [pc, #80]	; (800701c <UART_SetConfig+0x61c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f013 0f20 	tst.w	r3, #32
 8006fd0:	d009      	beq.n	8006fe6 <UART_SetConfig+0x5e6>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006fd2:	4b12      	ldr	r3, [pc, #72]	; (800701c <UART_SetConfig+0x61c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006fda:	4811      	ldr	r0, [pc, #68]	; (8007020 <UART_SetConfig+0x620>)
 8006fdc:	40d8      	lsrs	r0, r3
 8006fde:	e7c4      	b.n	8006f6a <UART_SetConfig+0x56a>
        pclk = (uint32_t) LSE_VALUE;
 8006fe0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006fe4:	e7c3      	b.n	8006f6e <UART_SetConfig+0x56e>
          pclk = (uint32_t) HSI_VALUE;
 8006fe6:	480e      	ldr	r0, [pc, #56]	; (8007020 <UART_SetConfig+0x620>)
 8006fe8:	e7c1      	b.n	8006f6e <UART_SetConfig+0x56e>
 8006fea:	2000      	movs	r0, #0
 8006fec:	e7d4      	b.n	8006f98 <UART_SetConfig+0x598>
        ret = HAL_ERROR;
 8006fee:	2001      	movs	r0, #1
 8006ff0:	e7d2      	b.n	8006f98 <UART_SetConfig+0x598>
 8006ff2:	2001      	movs	r0, #1
 8006ff4:	e7d0      	b.n	8006f98 <UART_SetConfig+0x598>
          ret = HAL_ERROR;
 8006ff6:	2001      	movs	r0, #1
 8006ff8:	e7ce      	b.n	8006f98 <UART_SetConfig+0x598>
        ret = HAL_ERROR;
 8006ffa:	2001      	movs	r0, #1
 8006ffc:	e7cc      	b.n	8006f98 <UART_SetConfig+0x598>
 8006ffe:	2000      	movs	r0, #0
 8007000:	e7ca      	b.n	8006f98 <UART_SetConfig+0x598>
        ret = HAL_ERROR;
 8007002:	2001      	movs	r0, #1
 8007004:	e7c8      	b.n	8006f98 <UART_SetConfig+0x598>
        ret = HAL_ERROR;
 8007006:	2001      	movs	r0, #1
 8007008:	e7c6      	b.n	8006f98 <UART_SetConfig+0x598>
 800700a:	2000      	movs	r0, #0
 800700c:	e7c4      	b.n	8006f98 <UART_SetConfig+0x598>
        ret = HAL_ERROR;
 800700e:	2001      	movs	r0, #1
 8007010:	e7c2      	b.n	8006f98 <UART_SetConfig+0x598>
 8007012:	bf00      	nop
 8007014:	003d0900 	.word	0x003d0900
 8007018:	0800e1e0 	.word	0x0800e1e0
 800701c:	58024400 	.word	0x58024400
 8007020:	03d09000 	.word	0x03d09000

08007024 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007024:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007026:	f013 0f01 	tst.w	r3, #1
 800702a:	d006      	beq.n	800703a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800702c:	6802      	ldr	r2, [r0, #0]
 800702e:	6853      	ldr	r3, [r2, #4]
 8007030:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007034:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007036:	430b      	orrs	r3, r1
 8007038:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800703a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800703c:	f013 0f02 	tst.w	r3, #2
 8007040:	d006      	beq.n	8007050 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007042:	6802      	ldr	r2, [r0, #0]
 8007044:	6853      	ldr	r3, [r2, #4]
 8007046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800704a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800704c:	430b      	orrs	r3, r1
 800704e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007050:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007052:	f013 0f04 	tst.w	r3, #4
 8007056:	d006      	beq.n	8007066 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007058:	6802      	ldr	r2, [r0, #0]
 800705a:	6853      	ldr	r3, [r2, #4]
 800705c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007060:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007062:	430b      	orrs	r3, r1
 8007064:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007066:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007068:	f013 0f08 	tst.w	r3, #8
 800706c:	d006      	beq.n	800707c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800706e:	6802      	ldr	r2, [r0, #0]
 8007070:	6853      	ldr	r3, [r2, #4]
 8007072:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007076:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007078:	430b      	orrs	r3, r1
 800707a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800707c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800707e:	f013 0f10 	tst.w	r3, #16
 8007082:	d006      	beq.n	8007092 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007084:	6802      	ldr	r2, [r0, #0]
 8007086:	6893      	ldr	r3, [r2, #8]
 8007088:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800708c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800708e:	430b      	orrs	r3, r1
 8007090:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007092:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007094:	f013 0f20 	tst.w	r3, #32
 8007098:	d006      	beq.n	80070a8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800709a:	6802      	ldr	r2, [r0, #0]
 800709c:	6893      	ldr	r3, [r2, #8]
 800709e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070a2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80070a4:	430b      	orrs	r3, r1
 80070a6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80070aa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80070ae:	d00a      	beq.n	80070c6 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070b0:	6802      	ldr	r2, [r0, #0]
 80070b2:	6853      	ldr	r3, [r2, #4]
 80070b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80070b8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80070ba:	430b      	orrs	r3, r1
 80070bc:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80070c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070c4:	d00b      	beq.n	80070de <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80070c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80070cc:	d006      	beq.n	80070dc <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070ce:	6802      	ldr	r2, [r0, #0]
 80070d0:	6853      	ldr	r3, [r2, #4]
 80070d2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80070d6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80070d8:	430b      	orrs	r3, r1
 80070da:	6053      	str	r3, [r2, #4]
}
 80070dc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070de:	6802      	ldr	r2, [r0, #0]
 80070e0:	6853      	ldr	r3, [r2, #4]
 80070e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80070e6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80070e8:	430b      	orrs	r3, r1
 80070ea:	6053      	str	r3, [r2, #4]
 80070ec:	e7eb      	b.n	80070c6 <UART_AdvFeatureConfig+0xa2>

080070ee <UART_WaitOnFlagUntilTimeout>:
{
 80070ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070f2:	4604      	mov	r4, r0
 80070f4:	460f      	mov	r7, r1
 80070f6:	4616      	mov	r6, r2
 80070f8:	4698      	mov	r8, r3
 80070fa:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	69db      	ldr	r3, [r3, #28]
 8007100:	ea37 0303 	bics.w	r3, r7, r3
 8007104:	bf0c      	ite	eq
 8007106:	2301      	moveq	r3, #1
 8007108:	2300      	movne	r3, #0
 800710a:	42b3      	cmp	r3, r6
 800710c:	d13f      	bne.n	800718e <UART_WaitOnFlagUntilTimeout+0xa0>
    if (Timeout != HAL_MAX_DELAY)
 800710e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007112:	d0f3      	beq.n	80070fc <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007114:	f7fc fe4a 	bl	8003dac <HAL_GetTick>
 8007118:	eba0 0008 	sub.w	r0, r0, r8
 800711c:	42a8      	cmp	r0, r5
 800711e:	d822      	bhi.n	8007166 <UART_WaitOnFlagUntilTimeout+0x78>
 8007120:	b30d      	cbz	r5, 8007166 <UART_WaitOnFlagUntilTimeout+0x78>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	f012 0f04 	tst.w	r2, #4
 800712a:	d0e7      	beq.n	80070fc <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800712c:	69da      	ldr	r2, [r3, #28]
 800712e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007132:	d0e3      	beq.n	80070fc <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007138:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800713a:	6822      	ldr	r2, [r4, #0]
 800713c:	6813      	ldr	r3, [r2, #0]
 800713e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007142:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007144:	6822      	ldr	r2, [r4, #0]
 8007146:	6893      	ldr	r3, [r2, #8]
 8007148:	f023 0301 	bic.w	r3, r3, #1
 800714c:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 800714e:	2320      	movs	r3, #32
 8007150:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007154:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007158:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 800715c:	2300      	movs	r3, #0
 800715e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8007162:	2003      	movs	r0, #3
 8007164:	e014      	b.n	8007190 <UART_WaitOnFlagUntilTimeout+0xa2>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007166:	6822      	ldr	r2, [r4, #0]
 8007168:	6813      	ldr	r3, [r2, #0]
 800716a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800716e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007170:	6822      	ldr	r2, [r4, #0]
 8007172:	6893      	ldr	r3, [r2, #8]
 8007174:	f023 0301 	bic.w	r3, r3, #1
 8007178:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800717a:	2320      	movs	r3, #32
 800717c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007180:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8007184:	2300      	movs	r3, #0
 8007186:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
        return HAL_TIMEOUT;
 800718a:	2003      	movs	r0, #3
 800718c:	e000      	b.n	8007190 <UART_WaitOnFlagUntilTimeout+0xa2>
  return HAL_OK;
 800718e:	2000      	movs	r0, #0
}
 8007190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007194 <UART_CheckIdleState>:
{
 8007194:	b530      	push	{r4, r5, lr}
 8007196:	b083      	sub	sp, #12
 8007198:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800719a:	2300      	movs	r3, #0
 800719c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 80071a0:	f7fc fe04 	bl	8003dac <HAL_GetTick>
 80071a4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f013 0f08 	tst.w	r3, #8
 80071ae:	d10e      	bne.n	80071ce <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f013 0f04 	tst.w	r3, #4
 80071b8:	d117      	bne.n	80071ea <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 80071ba:	2320      	movs	r3, #32
 80071bc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80071c0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80071c4:	2000      	movs	r0, #0
 80071c6:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80071ca:	b003      	add	sp, #12
 80071cc:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	4603      	mov	r3, r0
 80071d6:	2200      	movs	r2, #0
 80071d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071dc:	4620      	mov	r0, r4
 80071de:	f7ff ff86 	bl	80070ee <UART_WaitOnFlagUntilTimeout>
 80071e2:	2800      	cmp	r0, #0
 80071e4:	d0e4      	beq.n	80071b0 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80071e6:	2003      	movs	r0, #3
 80071e8:	e7ef      	b.n	80071ca <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	462b      	mov	r3, r5
 80071f2:	2200      	movs	r2, #0
 80071f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071f8:	4620      	mov	r0, r4
 80071fa:	f7ff ff78 	bl	80070ee <UART_WaitOnFlagUntilTimeout>
 80071fe:	2800      	cmp	r0, #0
 8007200:	d0db      	beq.n	80071ba <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8007202:	2003      	movs	r0, #3
 8007204:	e7e1      	b.n	80071ca <UART_CheckIdleState+0x36>

08007206 <HAL_UART_Init>:
  if (huart == NULL)
 8007206:	b378      	cbz	r0, 8007268 <HAL_UART_Init+0x62>
{
 8007208:	b510      	push	{r4, lr}
 800720a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800720c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8007210:	b30b      	cbz	r3, 8007256 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8007212:	2324      	movs	r3, #36	; 0x24
 8007214:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 8007218:	6822      	ldr	r2, [r4, #0]
 800721a:	6813      	ldr	r3, [r2, #0]
 800721c:	f023 0301 	bic.w	r3, r3, #1
 8007220:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007222:	4620      	mov	r0, r4
 8007224:	f7ff fbec 	bl	8006a00 <UART_SetConfig>
 8007228:	2801      	cmp	r0, #1
 800722a:	d013      	beq.n	8007254 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800722c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800722e:	b9bb      	cbnz	r3, 8007260 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007230:	6822      	ldr	r2, [r4, #0]
 8007232:	6853      	ldr	r3, [r2, #4]
 8007234:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007238:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800723a:	6822      	ldr	r2, [r4, #0]
 800723c:	6893      	ldr	r3, [r2, #8]
 800723e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007242:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007244:	6822      	ldr	r2, [r4, #0]
 8007246:	6813      	ldr	r3, [r2, #0]
 8007248:	f043 0301 	orr.w	r3, r3, #1
 800724c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800724e:	4620      	mov	r0, r4
 8007250:	f7ff ffa0 	bl	8007194 <UART_CheckIdleState>
}
 8007254:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007256:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 800725a:	f7fc fcd9 	bl	8003c10 <HAL_UART_MspInit>
 800725e:	e7d8      	b.n	8007212 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8007260:	4620      	mov	r0, r4
 8007262:	f7ff fedf 	bl	8007024 <UART_AdvFeatureConfig>
 8007266:	e7e3      	b.n	8007230 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8007268:	2001      	movs	r0, #1
}
 800726a:	4770      	bx	lr

0800726c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800726c:	b410      	push	{r4}
 800726e:	b085      	sub	sp, #20
 8007270:	4602      	mov	r2, r0
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007272:	4b1a      	ldr	r3, [pc, #104]	; (80072dc <UARTEx_SetNbDataToProcess+0x70>)
 8007274:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007278:	ac04      	add	r4, sp, #16
 800727a:	e904 0003 	stmdb	r4, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800727e:	466c      	mov	r4, sp
 8007280:	3308      	adds	r3, #8
 8007282:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007286:	e884 0003 	stmia.w	r4, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800728a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800728c:	b1fb      	cbz	r3, 80072ce <UARTEx_SetNbDataToProcess+0x62>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800728e:	6811      	ldr	r1, [r2, #0]
 8007290:	688b      	ldr	r3, [r1, #8]
 8007292:	f3c3 6342 	ubfx	r3, r3, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007296:	6888      	ldr	r0, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007298:	a904      	add	r1, sp, #16
 800729a:	eb01 7050 	add.w	r0, r1, r0, lsr #29
 800729e:	f810 1c08 	ldrb.w	r1, [r0, #-8]
 80072a2:	0109      	lsls	r1, r1, #4
 80072a4:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 80072a8:	fb91 f1f0 	sdiv	r1, r1, r0
 80072ac:	f8a2 106a 	strh.w	r1, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80072b0:	a904      	add	r1, sp, #16
 80072b2:	440b      	add	r3, r1
 80072b4:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 80072b8:	0109      	lsls	r1, r1, #4
 80072ba:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80072be:	fb91 f3f3 	sdiv	r3, r1, r3
 80072c2:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
  }
}
 80072c6:	b005      	add	sp, #20
 80072c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072cc:	4770      	bx	lr
    huart->NbTxDataToProcess = 1U;
 80072ce:	2301      	movs	r3, #1
 80072d0:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80072d4:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
 80072d8:	e7f5      	b.n	80072c6 <UARTEx_SetNbDataToProcess+0x5a>
 80072da:	bf00      	nop
 80072dc:	08007fe4 	.word	0x08007fe4

080072e0 <HAL_UARTEx_WakeupCallback>:
}
 80072e0:	4770      	bx	lr

080072e2 <HAL_UARTEx_RxFifoFullCallback>:
}
 80072e2:	4770      	bx	lr

080072e4 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 80072e4:	4770      	bx	lr

080072e6 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80072e6:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d018      	beq.n	8007320 <HAL_UARTEx_DisableFifoMode+0x3a>
 80072ee:	2301      	movs	r3, #1
 80072f0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80072f4:	2324      	movs	r3, #36	; 0x24
 80072f6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072fa:	6803      	ldr	r3, [r0, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80072fe:	6819      	ldr	r1, [r3, #0]
 8007300:	f021 0101 	bic.w	r1, r1, #1
 8007304:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007306:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800730a:	2300      	movs	r3, #0
 800730c:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800730e:	6801      	ldr	r1, [r0, #0]
 8007310:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007312:	2220      	movs	r2, #32
 8007314:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8007318:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 800731c:	4618      	mov	r0, r3
 800731e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007320:	2002      	movs	r0, #2
}
 8007322:	4770      	bx	lr

08007324 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8007324:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007326:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800732a:	2b01      	cmp	r3, #1
 800732c:	d01d      	beq.n	800736a <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800732e:	4604      	mov	r4, r0
 8007330:	2301      	movs	r3, #1
 8007332:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8007336:	2324      	movs	r3, #36	; 0x24
 8007338:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800733c:	6803      	ldr	r3, [r0, #0]
 800733e:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	f022 0201 	bic.w	r2, r2, #1
 8007346:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007348:	6802      	ldr	r2, [r0, #0]
 800734a:	6893      	ldr	r3, [r2, #8]
 800734c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8007350:	4319      	orrs	r1, r3
 8007352:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007354:	f7ff ff8a 	bl	800726c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800735c:	2320      	movs	r3, #32
 800735e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8007362:	2000      	movs	r0, #0
 8007364:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8007368:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800736a:	2002      	movs	r0, #2
 800736c:	e7fc      	b.n	8007368 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800736e <HAL_UARTEx_SetRxFifoThreshold>:
{
 800736e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007370:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8007374:	2b01      	cmp	r3, #1
 8007376:	d01d      	beq.n	80073b4 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8007378:	4604      	mov	r4, r0
 800737a:	2301      	movs	r3, #1
 800737c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8007380:	2324      	movs	r3, #36	; 0x24
 8007382:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007386:	6803      	ldr	r3, [r0, #0]
 8007388:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	f022 0201 	bic.w	r2, r2, #1
 8007390:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007392:	6802      	ldr	r2, [r0, #0]
 8007394:	6893      	ldr	r3, [r2, #8]
 8007396:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800739a:	4319      	orrs	r1, r3
 800739c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800739e:	f7ff ff65 	bl	800726c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80073a6:	2320      	movs	r3, #32
 80073a8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80073ac:	2000      	movs	r0, #0
 80073ae:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80073b4:	2002      	movs	r0, #2
 80073b6:	e7fc      	b.n	80073b2 <HAL_UARTEx_SetRxFifoThreshold+0x44>

080073b8 <__errno>:
 80073b8:	4b01      	ldr	r3, [pc, #4]	; (80073c0 <__errno+0x8>)
 80073ba:	6818      	ldr	r0, [r3, #0]
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	24000010 	.word	0x24000010

080073c4 <__libc_init_array>:
 80073c4:	b570      	push	{r4, r5, r6, lr}
 80073c6:	4e0d      	ldr	r6, [pc, #52]	; (80073fc <__libc_init_array+0x38>)
 80073c8:	4c0d      	ldr	r4, [pc, #52]	; (8007400 <__libc_init_array+0x3c>)
 80073ca:	1ba4      	subs	r4, r4, r6
 80073cc:	10a4      	asrs	r4, r4, #2
 80073ce:	2500      	movs	r5, #0
 80073d0:	42a5      	cmp	r5, r4
 80073d2:	d109      	bne.n	80073e8 <__libc_init_array+0x24>
 80073d4:	4e0b      	ldr	r6, [pc, #44]	; (8007404 <__libc_init_array+0x40>)
 80073d6:	4c0c      	ldr	r4, [pc, #48]	; (8007408 <__libc_init_array+0x44>)
 80073d8:	f000 fdf8 	bl	8007fcc <_init>
 80073dc:	1ba4      	subs	r4, r4, r6
 80073de:	10a4      	asrs	r4, r4, #2
 80073e0:	2500      	movs	r5, #0
 80073e2:	42a5      	cmp	r5, r4
 80073e4:	d105      	bne.n	80073f2 <__libc_init_array+0x2e>
 80073e6:	bd70      	pop	{r4, r5, r6, pc}
 80073e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073ec:	4798      	blx	r3
 80073ee:	3501      	adds	r5, #1
 80073f0:	e7ee      	b.n	80073d0 <__libc_init_array+0xc>
 80073f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073f6:	4798      	blx	r3
 80073f8:	3501      	adds	r5, #1
 80073fa:	e7f2      	b.n	80073e2 <__libc_init_array+0x1e>
 80073fc:	0800e22c 	.word	0x0800e22c
 8007400:	0800e22c 	.word	0x0800e22c
 8007404:	0800e22c 	.word	0x0800e22c
 8007408:	0800e234 	.word	0x0800e234

0800740c <malloc>:
 800740c:	4b02      	ldr	r3, [pc, #8]	; (8007418 <malloc+0xc>)
 800740e:	4601      	mov	r1, r0
 8007410:	6818      	ldr	r0, [r3, #0]
 8007412:	f000 b80b 	b.w	800742c <_malloc_r>
 8007416:	bf00      	nop
 8007418:	24000010 	.word	0x24000010

0800741c <free>:
 800741c:	4b02      	ldr	r3, [pc, #8]	; (8007428 <free+0xc>)
 800741e:	4601      	mov	r1, r0
 8007420:	6818      	ldr	r0, [r3, #0]
 8007422:	f000 bae3 	b.w	80079ec <_free_r>
 8007426:	bf00      	nop
 8007428:	24000010 	.word	0x24000010

0800742c <_malloc_r>:
 800742c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007430:	f101 050b 	add.w	r5, r1, #11
 8007434:	2d16      	cmp	r5, #22
 8007436:	4606      	mov	r6, r0
 8007438:	d906      	bls.n	8007448 <_malloc_r+0x1c>
 800743a:	f035 0507 	bics.w	r5, r5, #7
 800743e:	d504      	bpl.n	800744a <_malloc_r+0x1e>
 8007440:	230c      	movs	r3, #12
 8007442:	6033      	str	r3, [r6, #0]
 8007444:	2400      	movs	r4, #0
 8007446:	e1a8      	b.n	800779a <_malloc_r+0x36e>
 8007448:	2510      	movs	r5, #16
 800744a:	428d      	cmp	r5, r1
 800744c:	d3f8      	bcc.n	8007440 <_malloc_r+0x14>
 800744e:	4630      	mov	r0, r6
 8007450:	f000 fa2a 	bl	80078a8 <__malloc_lock>
 8007454:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8007458:	4fc0      	ldr	r7, [pc, #768]	; (800775c <_malloc_r+0x330>)
 800745a:	d238      	bcs.n	80074ce <_malloc_r+0xa2>
 800745c:	f105 0208 	add.w	r2, r5, #8
 8007460:	443a      	add	r2, r7
 8007462:	f1a2 0108 	sub.w	r1, r2, #8
 8007466:	6854      	ldr	r4, [r2, #4]
 8007468:	428c      	cmp	r4, r1
 800746a:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 800746e:	d102      	bne.n	8007476 <_malloc_r+0x4a>
 8007470:	68d4      	ldr	r4, [r2, #12]
 8007472:	42a2      	cmp	r2, r4
 8007474:	d010      	beq.n	8007498 <_malloc_r+0x6c>
 8007476:	6863      	ldr	r3, [r4, #4]
 8007478:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800747c:	f023 0303 	bic.w	r3, r3, #3
 8007480:	60ca      	str	r2, [r1, #12]
 8007482:	4423      	add	r3, r4
 8007484:	6091      	str	r1, [r2, #8]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	f042 0201 	orr.w	r2, r2, #1
 800748c:	605a      	str	r2, [r3, #4]
 800748e:	4630      	mov	r0, r6
 8007490:	f000 fa10 	bl	80078b4 <__malloc_unlock>
 8007494:	3408      	adds	r4, #8
 8007496:	e180      	b.n	800779a <_malloc_r+0x36e>
 8007498:	3302      	adds	r3, #2
 800749a:	4ab1      	ldr	r2, [pc, #708]	; (8007760 <_malloc_r+0x334>)
 800749c:	693c      	ldr	r4, [r7, #16]
 800749e:	4294      	cmp	r4, r2
 80074a0:	4611      	mov	r1, r2
 80074a2:	d075      	beq.n	8007590 <_malloc_r+0x164>
 80074a4:	6860      	ldr	r0, [r4, #4]
 80074a6:	f020 0c03 	bic.w	ip, r0, #3
 80074aa:	ebac 0005 	sub.w	r0, ip, r5
 80074ae:	280f      	cmp	r0, #15
 80074b0:	dd48      	ble.n	8007544 <_malloc_r+0x118>
 80074b2:	1963      	adds	r3, r4, r5
 80074b4:	f045 0501 	orr.w	r5, r5, #1
 80074b8:	6065      	str	r5, [r4, #4]
 80074ba:	e9c7 3304 	strd	r3, r3, [r7, #16]
 80074be:	e9c3 2202 	strd	r2, r2, [r3, #8]
 80074c2:	f040 0201 	orr.w	r2, r0, #1
 80074c6:	605a      	str	r2, [r3, #4]
 80074c8:	f844 000c 	str.w	r0, [r4, ip]
 80074cc:	e7df      	b.n	800748e <_malloc_r+0x62>
 80074ce:	0a6b      	lsrs	r3, r5, #9
 80074d0:	d02a      	beq.n	8007528 <_malloc_r+0xfc>
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	d812      	bhi.n	80074fc <_malloc_r+0xd0>
 80074d6:	09ab      	lsrs	r3, r5, #6
 80074d8:	3338      	adds	r3, #56	; 0x38
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 80074e0:	f1a2 0c08 	sub.w	ip, r2, #8
 80074e4:	6854      	ldr	r4, [r2, #4]
 80074e6:	4564      	cmp	r4, ip
 80074e8:	d006      	beq.n	80074f8 <_malloc_r+0xcc>
 80074ea:	6862      	ldr	r2, [r4, #4]
 80074ec:	f022 0203 	bic.w	r2, r2, #3
 80074f0:	1b50      	subs	r0, r2, r5
 80074f2:	280f      	cmp	r0, #15
 80074f4:	dd1c      	ble.n	8007530 <_malloc_r+0x104>
 80074f6:	3b01      	subs	r3, #1
 80074f8:	3301      	adds	r3, #1
 80074fa:	e7ce      	b.n	800749a <_malloc_r+0x6e>
 80074fc:	2b14      	cmp	r3, #20
 80074fe:	d801      	bhi.n	8007504 <_malloc_r+0xd8>
 8007500:	335b      	adds	r3, #91	; 0x5b
 8007502:	e7ea      	b.n	80074da <_malloc_r+0xae>
 8007504:	2b54      	cmp	r3, #84	; 0x54
 8007506:	d802      	bhi.n	800750e <_malloc_r+0xe2>
 8007508:	0b2b      	lsrs	r3, r5, #12
 800750a:	336e      	adds	r3, #110	; 0x6e
 800750c:	e7e5      	b.n	80074da <_malloc_r+0xae>
 800750e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007512:	d802      	bhi.n	800751a <_malloc_r+0xee>
 8007514:	0beb      	lsrs	r3, r5, #15
 8007516:	3377      	adds	r3, #119	; 0x77
 8007518:	e7df      	b.n	80074da <_malloc_r+0xae>
 800751a:	f240 5254 	movw	r2, #1364	; 0x554
 800751e:	4293      	cmp	r3, r2
 8007520:	d804      	bhi.n	800752c <_malloc_r+0x100>
 8007522:	0cab      	lsrs	r3, r5, #18
 8007524:	337c      	adds	r3, #124	; 0x7c
 8007526:	e7d8      	b.n	80074da <_malloc_r+0xae>
 8007528:	233f      	movs	r3, #63	; 0x3f
 800752a:	e7d6      	b.n	80074da <_malloc_r+0xae>
 800752c:	237e      	movs	r3, #126	; 0x7e
 800752e:	e7d4      	b.n	80074da <_malloc_r+0xae>
 8007530:	2800      	cmp	r0, #0
 8007532:	68e1      	ldr	r1, [r4, #12]
 8007534:	db04      	blt.n	8007540 <_malloc_r+0x114>
 8007536:	68a3      	ldr	r3, [r4, #8]
 8007538:	60d9      	str	r1, [r3, #12]
 800753a:	608b      	str	r3, [r1, #8]
 800753c:	18a3      	adds	r3, r4, r2
 800753e:	e7a2      	b.n	8007486 <_malloc_r+0x5a>
 8007540:	460c      	mov	r4, r1
 8007542:	e7d0      	b.n	80074e6 <_malloc_r+0xba>
 8007544:	2800      	cmp	r0, #0
 8007546:	e9c7 2204 	strd	r2, r2, [r7, #16]
 800754a:	db07      	blt.n	800755c <_malloc_r+0x130>
 800754c:	44a4      	add	ip, r4
 800754e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8007552:	f043 0301 	orr.w	r3, r3, #1
 8007556:	f8cc 3004 	str.w	r3, [ip, #4]
 800755a:	e798      	b.n	800748e <_malloc_r+0x62>
 800755c:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f080 8099 	bcs.w	8007698 <_malloc_r+0x26c>
 8007566:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800756a:	ea4f 0eac 	mov.w	lr, ip, asr #2
 800756e:	2201      	movs	r2, #1
 8007570:	f10c 0c01 	add.w	ip, ip, #1
 8007574:	fa02 f20e 	lsl.w	r2, r2, lr
 8007578:	4310      	orrs	r0, r2
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8007580:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 8007584:	3a08      	subs	r2, #8
 8007586:	e9c4 0202 	strd	r0, r2, [r4, #8]
 800758a:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 800758e:	60c4      	str	r4, [r0, #12]
 8007590:	2001      	movs	r0, #1
 8007592:	109a      	asrs	r2, r3, #2
 8007594:	fa00 f202 	lsl.w	r2, r0, r2
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	4290      	cmp	r0, r2
 800759c:	d326      	bcc.n	80075ec <_malloc_r+0x1c0>
 800759e:	4210      	tst	r0, r2
 80075a0:	d106      	bne.n	80075b0 <_malloc_r+0x184>
 80075a2:	f023 0303 	bic.w	r3, r3, #3
 80075a6:	0052      	lsls	r2, r2, #1
 80075a8:	4210      	tst	r0, r2
 80075aa:	f103 0304 	add.w	r3, r3, #4
 80075ae:	d0fa      	beq.n	80075a6 <_malloc_r+0x17a>
 80075b0:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 80075b4:	46e1      	mov	r9, ip
 80075b6:	4698      	mov	r8, r3
 80075b8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80075bc:	454c      	cmp	r4, r9
 80075be:	f040 80af 	bne.w	8007720 <_malloc_r+0x2f4>
 80075c2:	f108 0801 	add.w	r8, r8, #1
 80075c6:	f018 0f03 	tst.w	r8, #3
 80075ca:	f109 0908 	add.w	r9, r9, #8
 80075ce:	d1f3      	bne.n	80075b8 <_malloc_r+0x18c>
 80075d0:	0798      	lsls	r0, r3, #30
 80075d2:	f040 80e8 	bne.w	80077a6 <_malloc_r+0x37a>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	ea23 0302 	bic.w	r3, r3, r2
 80075dc:	607b      	str	r3, [r7, #4]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	0052      	lsls	r2, r2, #1
 80075e2:	4290      	cmp	r0, r2
 80075e4:	d302      	bcc.n	80075ec <_malloc_r+0x1c0>
 80075e6:	2a00      	cmp	r2, #0
 80075e8:	f040 80ec 	bne.w	80077c4 <_malloc_r+0x398>
 80075ec:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80075f0:	f8da 4004 	ldr.w	r4, [sl, #4]
 80075f4:	f024 0203 	bic.w	r2, r4, #3
 80075f8:	42aa      	cmp	r2, r5
 80075fa:	d303      	bcc.n	8007604 <_malloc_r+0x1d8>
 80075fc:	1b53      	subs	r3, r2, r5
 80075fe:	2b0f      	cmp	r3, #15
 8007600:	f300 8140 	bgt.w	8007884 <_malloc_r+0x458>
 8007604:	4b57      	ldr	r3, [pc, #348]	; (8007764 <_malloc_r+0x338>)
 8007606:	9200      	str	r2, [sp, #0]
 8007608:	2008      	movs	r0, #8
 800760a:	681c      	ldr	r4, [r3, #0]
 800760c:	f000 f968 	bl	80078e0 <sysconf>
 8007610:	4b55      	ldr	r3, [pc, #340]	; (8007768 <_malloc_r+0x33c>)
 8007612:	9a00      	ldr	r2, [sp, #0]
 8007614:	6819      	ldr	r1, [r3, #0]
 8007616:	3410      	adds	r4, #16
 8007618:	3101      	adds	r1, #1
 800761a:	442c      	add	r4, r5
 800761c:	bf1f      	itttt	ne
 800761e:	f104 34ff 	addne.w	r4, r4, #4294967295
 8007622:	1824      	addne	r4, r4, r0
 8007624:	4241      	negne	r1, r0
 8007626:	400c      	andne	r4, r1
 8007628:	4680      	mov	r8, r0
 800762a:	4621      	mov	r1, r4
 800762c:	4630      	mov	r0, r6
 800762e:	e9cd 2300 	strd	r2, r3, [sp]
 8007632:	f000 f945 	bl	80078c0 <_sbrk_r>
 8007636:	f1b0 3fff 	cmp.w	r0, #4294967295
 800763a:	4683      	mov	fp, r0
 800763c:	f000 80fb 	beq.w	8007836 <_malloc_r+0x40a>
 8007640:	9a00      	ldr	r2, [sp, #0]
 8007642:	9b01      	ldr	r3, [sp, #4]
 8007644:	eb0a 0102 	add.w	r1, sl, r2
 8007648:	4281      	cmp	r1, r0
 800764a:	d902      	bls.n	8007652 <_malloc_r+0x226>
 800764c:	45ba      	cmp	sl, r7
 800764e:	f040 80f2 	bne.w	8007836 <_malloc_r+0x40a>
 8007652:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8007774 <_malloc_r+0x348>
 8007656:	f8d9 0000 	ldr.w	r0, [r9]
 800765a:	4559      	cmp	r1, fp
 800765c:	eb00 0e04 	add.w	lr, r0, r4
 8007660:	f8c9 e000 	str.w	lr, [r9]
 8007664:	f108 3cff 	add.w	ip, r8, #4294967295
 8007668:	f040 80ae 	bne.w	80077c8 <_malloc_r+0x39c>
 800766c:	ea11 0f0c 	tst.w	r1, ip
 8007670:	f040 80aa 	bne.w	80077c8 <_malloc_r+0x39c>
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	4414      	add	r4, r2
 8007678:	f044 0401 	orr.w	r4, r4, #1
 800767c:	605c      	str	r4, [r3, #4]
 800767e:	4a3b      	ldr	r2, [pc, #236]	; (800776c <_malloc_r+0x340>)
 8007680:	f8d9 3000 	ldr.w	r3, [r9]
 8007684:	6811      	ldr	r1, [r2, #0]
 8007686:	428b      	cmp	r3, r1
 8007688:	bf88      	it	hi
 800768a:	6013      	strhi	r3, [r2, #0]
 800768c:	4a38      	ldr	r2, [pc, #224]	; (8007770 <_malloc_r+0x344>)
 800768e:	6811      	ldr	r1, [r2, #0]
 8007690:	428b      	cmp	r3, r1
 8007692:	bf88      	it	hi
 8007694:	6013      	strhi	r3, [r2, #0]
 8007696:	e0ce      	b.n	8007836 <_malloc_r+0x40a>
 8007698:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800769c:	2a04      	cmp	r2, #4
 800769e:	d818      	bhi.n	80076d2 <_malloc_r+0x2a6>
 80076a0:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80076a4:	3238      	adds	r2, #56	; 0x38
 80076a6:	f102 0e01 	add.w	lr, r2, #1
 80076aa:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 80076ae:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 80076b2:	45f0      	cmp	r8, lr
 80076b4:	d12b      	bne.n	800770e <_malloc_r+0x2e2>
 80076b6:	1092      	asrs	r2, r2, #2
 80076b8:	f04f 0c01 	mov.w	ip, #1
 80076bc:	fa0c f202 	lsl.w	r2, ip, r2
 80076c0:	4310      	orrs	r0, r2
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80076c8:	f8c8 4008 	str.w	r4, [r8, #8]
 80076cc:	f8ce 400c 	str.w	r4, [lr, #12]
 80076d0:	e75e      	b.n	8007590 <_malloc_r+0x164>
 80076d2:	2a14      	cmp	r2, #20
 80076d4:	d801      	bhi.n	80076da <_malloc_r+0x2ae>
 80076d6:	325b      	adds	r2, #91	; 0x5b
 80076d8:	e7e5      	b.n	80076a6 <_malloc_r+0x27a>
 80076da:	2a54      	cmp	r2, #84	; 0x54
 80076dc:	d803      	bhi.n	80076e6 <_malloc_r+0x2ba>
 80076de:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80076e2:	326e      	adds	r2, #110	; 0x6e
 80076e4:	e7df      	b.n	80076a6 <_malloc_r+0x27a>
 80076e6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80076ea:	d803      	bhi.n	80076f4 <_malloc_r+0x2c8>
 80076ec:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80076f0:	3277      	adds	r2, #119	; 0x77
 80076f2:	e7d8      	b.n	80076a6 <_malloc_r+0x27a>
 80076f4:	f240 5e54 	movw	lr, #1364	; 0x554
 80076f8:	4572      	cmp	r2, lr
 80076fa:	bf9a      	itte	ls
 80076fc:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8007700:	327c      	addls	r2, #124	; 0x7c
 8007702:	227e      	movhi	r2, #126	; 0x7e
 8007704:	e7cf      	b.n	80076a6 <_malloc_r+0x27a>
 8007706:	f8de e008 	ldr.w	lr, [lr, #8]
 800770a:	45f0      	cmp	r8, lr
 800770c:	d005      	beq.n	800771a <_malloc_r+0x2ee>
 800770e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8007712:	f022 0203 	bic.w	r2, r2, #3
 8007716:	4562      	cmp	r2, ip
 8007718:	d8f5      	bhi.n	8007706 <_malloc_r+0x2da>
 800771a:	f8de 800c 	ldr.w	r8, [lr, #12]
 800771e:	e7d1      	b.n	80076c4 <_malloc_r+0x298>
 8007720:	6860      	ldr	r0, [r4, #4]
 8007722:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8007726:	f020 0003 	bic.w	r0, r0, #3
 800772a:	eba0 0a05 	sub.w	sl, r0, r5
 800772e:	f1ba 0f0f 	cmp.w	sl, #15
 8007732:	dd21      	ble.n	8007778 <_malloc_r+0x34c>
 8007734:	68a2      	ldr	r2, [r4, #8]
 8007736:	1963      	adds	r3, r4, r5
 8007738:	f045 0501 	orr.w	r5, r5, #1
 800773c:	6065      	str	r5, [r4, #4]
 800773e:	f8c2 e00c 	str.w	lr, [r2, #12]
 8007742:	f8ce 2008 	str.w	r2, [lr, #8]
 8007746:	f04a 0201 	orr.w	r2, sl, #1
 800774a:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800774e:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8007752:	605a      	str	r2, [r3, #4]
 8007754:	f844 a000 	str.w	sl, [r4, r0]
 8007758:	e699      	b.n	800748e <_malloc_r+0x62>
 800775a:	bf00      	nop
 800775c:	24000440 	.word	0x24000440
 8007760:	24000448 	.word	0x24000448
 8007764:	240154b8 	.word	0x240154b8
 8007768:	24000848 	.word	0x24000848
 800776c:	240154b0 	.word	0x240154b0
 8007770:	240154b4 	.word	0x240154b4
 8007774:	24015488 	.word	0x24015488
 8007778:	f1ba 0f00 	cmp.w	sl, #0
 800777c:	db11      	blt.n	80077a2 <_malloc_r+0x376>
 800777e:	4420      	add	r0, r4
 8007780:	6843      	ldr	r3, [r0, #4]
 8007782:	f043 0301 	orr.w	r3, r3, #1
 8007786:	6043      	str	r3, [r0, #4]
 8007788:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800778c:	4630      	mov	r0, r6
 800778e:	f8c3 e00c 	str.w	lr, [r3, #12]
 8007792:	f8ce 3008 	str.w	r3, [lr, #8]
 8007796:	f000 f88d 	bl	80078b4 <__malloc_unlock>
 800779a:	4620      	mov	r0, r4
 800779c:	b003      	add	sp, #12
 800779e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a2:	4674      	mov	r4, lr
 80077a4:	e70a      	b.n	80075bc <_malloc_r+0x190>
 80077a6:	f1ac 0008 	sub.w	r0, ip, #8
 80077aa:	f8dc c000 	ldr.w	ip, [ip]
 80077ae:	4584      	cmp	ip, r0
 80077b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80077b4:	f43f af0c 	beq.w	80075d0 <_malloc_r+0x1a4>
 80077b8:	e711      	b.n	80075de <_malloc_r+0x1b2>
 80077ba:	3304      	adds	r3, #4
 80077bc:	0052      	lsls	r2, r2, #1
 80077be:	4210      	tst	r0, r2
 80077c0:	d0fb      	beq.n	80077ba <_malloc_r+0x38e>
 80077c2:	e6f5      	b.n	80075b0 <_malloc_r+0x184>
 80077c4:	4643      	mov	r3, r8
 80077c6:	e7fa      	b.n	80077be <_malloc_r+0x392>
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	9200      	str	r2, [sp, #0]
 80077cc:	3001      	adds	r0, #1
 80077ce:	bf1b      	ittet	ne
 80077d0:	ebab 0101 	subne.w	r1, fp, r1
 80077d4:	4471      	addne	r1, lr
 80077d6:	f8c3 b000 	streq.w	fp, [r3]
 80077da:	f8c9 1000 	strne.w	r1, [r9]
 80077de:	f01b 0307 	ands.w	r3, fp, #7
 80077e2:	bf1c      	itt	ne
 80077e4:	f1c3 0308 	rsbne	r3, r3, #8
 80077e8:	449b      	addne	fp, r3
 80077ea:	445c      	add	r4, fp
 80077ec:	4498      	add	r8, r3
 80077ee:	ea04 030c 	and.w	r3, r4, ip
 80077f2:	eba8 0803 	sub.w	r8, r8, r3
 80077f6:	4641      	mov	r1, r8
 80077f8:	4630      	mov	r0, r6
 80077fa:	f000 f861 	bl	80078c0 <_sbrk_r>
 80077fe:	1c43      	adds	r3, r0, #1
 8007800:	bf04      	itt	eq
 8007802:	4658      	moveq	r0, fp
 8007804:	f04f 0800 	moveq.w	r8, #0
 8007808:	f8d9 3000 	ldr.w	r3, [r9]
 800780c:	f8c7 b008 	str.w	fp, [r7, #8]
 8007810:	eba0 000b 	sub.w	r0, r0, fp
 8007814:	4440      	add	r0, r8
 8007816:	4443      	add	r3, r8
 8007818:	f040 0001 	orr.w	r0, r0, #1
 800781c:	45ba      	cmp	sl, r7
 800781e:	9a00      	ldr	r2, [sp, #0]
 8007820:	f8c9 3000 	str.w	r3, [r9]
 8007824:	f8cb 0004 	str.w	r0, [fp, #4]
 8007828:	f43f af29 	beq.w	800767e <_malloc_r+0x252>
 800782c:	2a0f      	cmp	r2, #15
 800782e:	d810      	bhi.n	8007852 <_malloc_r+0x426>
 8007830:	2301      	movs	r3, #1
 8007832:	f8cb 3004 	str.w	r3, [fp, #4]
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	f022 0203 	bic.w	r2, r2, #3
 800783e:	42aa      	cmp	r2, r5
 8007840:	eba2 0305 	sub.w	r3, r2, r5
 8007844:	d301      	bcc.n	800784a <_malloc_r+0x41e>
 8007846:	2b0f      	cmp	r3, #15
 8007848:	dc1c      	bgt.n	8007884 <_malloc_r+0x458>
 800784a:	4630      	mov	r0, r6
 800784c:	f000 f832 	bl	80078b4 <__malloc_unlock>
 8007850:	e5f8      	b.n	8007444 <_malloc_r+0x18>
 8007852:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007856:	f1a2 040c 	sub.w	r4, r2, #12
 800785a:	f024 0407 	bic.w	r4, r4, #7
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	4323      	orrs	r3, r4
 8007864:	f8ca 3004 	str.w	r3, [sl, #4]
 8007868:	2205      	movs	r2, #5
 800786a:	eb0a 0304 	add.w	r3, sl, r4
 800786e:	2c0f      	cmp	r4, #15
 8007870:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8007874:	f67f af03 	bls.w	800767e <_malloc_r+0x252>
 8007878:	f10a 0108 	add.w	r1, sl, #8
 800787c:	4630      	mov	r0, r6
 800787e:	f000 f8b5 	bl	80079ec <_free_r>
 8007882:	e6fc      	b.n	800767e <_malloc_r+0x252>
 8007884:	68bc      	ldr	r4, [r7, #8]
 8007886:	f045 0201 	orr.w	r2, r5, #1
 800788a:	4425      	add	r5, r4
 800788c:	f043 0301 	orr.w	r3, r3, #1
 8007890:	6062      	str	r2, [r4, #4]
 8007892:	60bd      	str	r5, [r7, #8]
 8007894:	606b      	str	r3, [r5, #4]
 8007896:	e5fa      	b.n	800748e <_malloc_r+0x62>

08007898 <memset>:
 8007898:	4402      	add	r2, r0
 800789a:	4603      	mov	r3, r0
 800789c:	4293      	cmp	r3, r2
 800789e:	d100      	bne.n	80078a2 <memset+0xa>
 80078a0:	4770      	bx	lr
 80078a2:	f803 1b01 	strb.w	r1, [r3], #1
 80078a6:	e7f9      	b.n	800789c <memset+0x4>

080078a8 <__malloc_lock>:
 80078a8:	4801      	ldr	r0, [pc, #4]	; (80078b0 <__malloc_lock+0x8>)
 80078aa:	f000 b95b 	b.w	8007b64 <__retarget_lock_acquire_recursive>
 80078ae:	bf00      	nop
 80078b0:	240155fc 	.word	0x240155fc

080078b4 <__malloc_unlock>:
 80078b4:	4801      	ldr	r0, [pc, #4]	; (80078bc <__malloc_unlock+0x8>)
 80078b6:	f000 b956 	b.w	8007b66 <__retarget_lock_release_recursive>
 80078ba:	bf00      	nop
 80078bc:	240155fc 	.word	0x240155fc

080078c0 <_sbrk_r>:
 80078c0:	b538      	push	{r3, r4, r5, lr}
 80078c2:	4c06      	ldr	r4, [pc, #24]	; (80078dc <_sbrk_r+0x1c>)
 80078c4:	2300      	movs	r3, #0
 80078c6:	4605      	mov	r5, r0
 80078c8:	4608      	mov	r0, r1
 80078ca:	6023      	str	r3, [r4, #0]
 80078cc:	f7fc f8fe 	bl	8003acc <_sbrk>
 80078d0:	1c43      	adds	r3, r0, #1
 80078d2:	d102      	bne.n	80078da <_sbrk_r+0x1a>
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	b103      	cbz	r3, 80078da <_sbrk_r+0x1a>
 80078d8:	602b      	str	r3, [r5, #0]
 80078da:	bd38      	pop	{r3, r4, r5, pc}
 80078dc:	24015604 	.word	0x24015604

080078e0 <sysconf>:
 80078e0:	2808      	cmp	r0, #8
 80078e2:	b508      	push	{r3, lr}
 80078e4:	d006      	beq.n	80078f4 <sysconf+0x14>
 80078e6:	f7ff fd67 	bl	80073b8 <__errno>
 80078ea:	2316      	movs	r3, #22
 80078ec:	6003      	str	r3, [r0, #0]
 80078ee:	f04f 30ff 	mov.w	r0, #4294967295
 80078f2:	bd08      	pop	{r3, pc}
 80078f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80078f8:	e7fb      	b.n	80078f2 <sysconf+0x12>
	...

080078fc <register_fini>:
 80078fc:	4b02      	ldr	r3, [pc, #8]	; (8007908 <register_fini+0xc>)
 80078fe:	b113      	cbz	r3, 8007906 <register_fini+0xa>
 8007900:	4802      	ldr	r0, [pc, #8]	; (800790c <register_fini+0x10>)
 8007902:	f000 b805 	b.w	8007910 <atexit>
 8007906:	4770      	bx	lr
 8007908:	00000000 	.word	0x00000000
 800790c:	0800791d 	.word	0x0800791d

08007910 <atexit>:
 8007910:	2300      	movs	r3, #0
 8007912:	4601      	mov	r1, r0
 8007914:	461a      	mov	r2, r3
 8007916:	4618      	mov	r0, r3
 8007918:	f000 b926 	b.w	8007b68 <__register_exitproc>

0800791c <__libc_fini_array>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	4d07      	ldr	r5, [pc, #28]	; (800793c <__libc_fini_array+0x20>)
 8007920:	4c07      	ldr	r4, [pc, #28]	; (8007940 <__libc_fini_array+0x24>)
 8007922:	1b64      	subs	r4, r4, r5
 8007924:	10a4      	asrs	r4, r4, #2
 8007926:	b91c      	cbnz	r4, 8007930 <__libc_fini_array+0x14>
 8007928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800792c:	f000 bb54 	b.w	8007fd8 <_fini>
 8007930:	3c01      	subs	r4, #1
 8007932:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007936:	4798      	blx	r3
 8007938:	e7f5      	b.n	8007926 <__libc_fini_array+0xa>
 800793a:	bf00      	nop
 800793c:	0800e234 	.word	0x0800e234
 8007940:	0800e238 	.word	0x0800e238

08007944 <_malloc_trim_r>:
 8007944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007948:	4605      	mov	r5, r0
 800794a:	2008      	movs	r0, #8
 800794c:	460c      	mov	r4, r1
 800794e:	f7ff ffc7 	bl	80078e0 <sysconf>
 8007952:	4f23      	ldr	r7, [pc, #140]	; (80079e0 <_malloc_trim_r+0x9c>)
 8007954:	4680      	mov	r8, r0
 8007956:	4628      	mov	r0, r5
 8007958:	f7ff ffa6 	bl	80078a8 <__malloc_lock>
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	685e      	ldr	r6, [r3, #4]
 8007960:	f026 0603 	bic.w	r6, r6, #3
 8007964:	1b34      	subs	r4, r6, r4
 8007966:	3c11      	subs	r4, #17
 8007968:	4444      	add	r4, r8
 800796a:	fbb4 f4f8 	udiv	r4, r4, r8
 800796e:	3c01      	subs	r4, #1
 8007970:	fb08 f404 	mul.w	r4, r8, r4
 8007974:	45a0      	cmp	r8, r4
 8007976:	dd05      	ble.n	8007984 <_malloc_trim_r+0x40>
 8007978:	4628      	mov	r0, r5
 800797a:	f7ff ff9b 	bl	80078b4 <__malloc_unlock>
 800797e:	2000      	movs	r0, #0
 8007980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007984:	2100      	movs	r1, #0
 8007986:	4628      	mov	r0, r5
 8007988:	f7ff ff9a 	bl	80078c0 <_sbrk_r>
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	4433      	add	r3, r6
 8007990:	4298      	cmp	r0, r3
 8007992:	d1f1      	bne.n	8007978 <_malloc_trim_r+0x34>
 8007994:	4261      	negs	r1, r4
 8007996:	4628      	mov	r0, r5
 8007998:	f7ff ff92 	bl	80078c0 <_sbrk_r>
 800799c:	3001      	adds	r0, #1
 800799e:	d110      	bne.n	80079c2 <_malloc_trim_r+0x7e>
 80079a0:	2100      	movs	r1, #0
 80079a2:	4628      	mov	r0, r5
 80079a4:	f7ff ff8c 	bl	80078c0 <_sbrk_r>
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	1a83      	subs	r3, r0, r2
 80079ac:	2b0f      	cmp	r3, #15
 80079ae:	dde3      	ble.n	8007978 <_malloc_trim_r+0x34>
 80079b0:	490c      	ldr	r1, [pc, #48]	; (80079e4 <_malloc_trim_r+0xa0>)
 80079b2:	6809      	ldr	r1, [r1, #0]
 80079b4:	1a40      	subs	r0, r0, r1
 80079b6:	490c      	ldr	r1, [pc, #48]	; (80079e8 <_malloc_trim_r+0xa4>)
 80079b8:	f043 0301 	orr.w	r3, r3, #1
 80079bc:	6008      	str	r0, [r1, #0]
 80079be:	6053      	str	r3, [r2, #4]
 80079c0:	e7da      	b.n	8007978 <_malloc_trim_r+0x34>
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	4a08      	ldr	r2, [pc, #32]	; (80079e8 <_malloc_trim_r+0xa4>)
 80079c6:	1b36      	subs	r6, r6, r4
 80079c8:	f046 0601 	orr.w	r6, r6, #1
 80079cc:	605e      	str	r6, [r3, #4]
 80079ce:	6813      	ldr	r3, [r2, #0]
 80079d0:	4628      	mov	r0, r5
 80079d2:	1b1c      	subs	r4, r3, r4
 80079d4:	6014      	str	r4, [r2, #0]
 80079d6:	f7ff ff6d 	bl	80078b4 <__malloc_unlock>
 80079da:	2001      	movs	r0, #1
 80079dc:	e7d0      	b.n	8007980 <_malloc_trim_r+0x3c>
 80079de:	bf00      	nop
 80079e0:	24000440 	.word	0x24000440
 80079e4:	24000848 	.word	0x24000848
 80079e8:	24015488 	.word	0x24015488

080079ec <_free_r>:
 80079ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f0:	4604      	mov	r4, r0
 80079f2:	4688      	mov	r8, r1
 80079f4:	2900      	cmp	r1, #0
 80079f6:	f000 80ab 	beq.w	8007b50 <_free_r+0x164>
 80079fa:	f7ff ff55 	bl	80078a8 <__malloc_lock>
 80079fe:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8007a02:	4d54      	ldr	r5, [pc, #336]	; (8007b54 <_free_r+0x168>)
 8007a04:	f022 0001 	bic.w	r0, r2, #1
 8007a08:	f1a8 0308 	sub.w	r3, r8, #8
 8007a0c:	181f      	adds	r7, r3, r0
 8007a0e:	68a9      	ldr	r1, [r5, #8]
 8007a10:	687e      	ldr	r6, [r7, #4]
 8007a12:	42b9      	cmp	r1, r7
 8007a14:	f026 0603 	bic.w	r6, r6, #3
 8007a18:	f002 0201 	and.w	r2, r2, #1
 8007a1c:	d11b      	bne.n	8007a56 <_free_r+0x6a>
 8007a1e:	4430      	add	r0, r6
 8007a20:	b93a      	cbnz	r2, 8007a32 <_free_r+0x46>
 8007a22:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8007a26:	1a9b      	subs	r3, r3, r2
 8007a28:	4410      	add	r0, r2
 8007a2a:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8007a2e:	60ca      	str	r2, [r1, #12]
 8007a30:	6091      	str	r1, [r2, #8]
 8007a32:	f040 0201 	orr.w	r2, r0, #1
 8007a36:	605a      	str	r2, [r3, #4]
 8007a38:	60ab      	str	r3, [r5, #8]
 8007a3a:	4b47      	ldr	r3, [pc, #284]	; (8007b58 <_free_r+0x16c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4283      	cmp	r3, r0
 8007a40:	d804      	bhi.n	8007a4c <_free_r+0x60>
 8007a42:	4b46      	ldr	r3, [pc, #280]	; (8007b5c <_free_r+0x170>)
 8007a44:	4620      	mov	r0, r4
 8007a46:	6819      	ldr	r1, [r3, #0]
 8007a48:	f7ff ff7c 	bl	8007944 <_malloc_trim_r>
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a52:	f7ff bf2f 	b.w	80078b4 <__malloc_unlock>
 8007a56:	607e      	str	r6, [r7, #4]
 8007a58:	2a00      	cmp	r2, #0
 8007a5a:	d139      	bne.n	8007ad0 <_free_r+0xe4>
 8007a5c:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8007a60:	1a5b      	subs	r3, r3, r1
 8007a62:	4408      	add	r0, r1
 8007a64:	6899      	ldr	r1, [r3, #8]
 8007a66:	f105 0c08 	add.w	ip, r5, #8
 8007a6a:	4561      	cmp	r1, ip
 8007a6c:	d032      	beq.n	8007ad4 <_free_r+0xe8>
 8007a6e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8007a72:	f8c1 c00c 	str.w	ip, [r1, #12]
 8007a76:	f8cc 1008 	str.w	r1, [ip, #8]
 8007a7a:	19b9      	adds	r1, r7, r6
 8007a7c:	6849      	ldr	r1, [r1, #4]
 8007a7e:	07c9      	lsls	r1, r1, #31
 8007a80:	d40a      	bmi.n	8007a98 <_free_r+0xac>
 8007a82:	4430      	add	r0, r6
 8007a84:	68b9      	ldr	r1, [r7, #8]
 8007a86:	bb3a      	cbnz	r2, 8007ad8 <_free_r+0xec>
 8007a88:	4e35      	ldr	r6, [pc, #212]	; (8007b60 <_free_r+0x174>)
 8007a8a:	42b1      	cmp	r1, r6
 8007a8c:	d124      	bne.n	8007ad8 <_free_r+0xec>
 8007a8e:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8007a92:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f040 0101 	orr.w	r1, r0, #1
 8007a9c:	6059      	str	r1, [r3, #4]
 8007a9e:	5018      	str	r0, [r3, r0]
 8007aa0:	2a00      	cmp	r2, #0
 8007aa2:	d1d3      	bne.n	8007a4c <_free_r+0x60>
 8007aa4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007aa8:	d21a      	bcs.n	8007ae0 <_free_r+0xf4>
 8007aaa:	08c0      	lsrs	r0, r0, #3
 8007aac:	1081      	asrs	r1, r0, #2
 8007aae:	2201      	movs	r2, #1
 8007ab0:	408a      	lsls	r2, r1
 8007ab2:	6869      	ldr	r1, [r5, #4]
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	430a      	orrs	r2, r1
 8007ab8:	606a      	str	r2, [r5, #4]
 8007aba:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8007abe:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8007ac2:	3a08      	subs	r2, #8
 8007ac4:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8007ac8:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8007acc:	60cb      	str	r3, [r1, #12]
 8007ace:	e7bd      	b.n	8007a4c <_free_r+0x60>
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	e7d2      	b.n	8007a7a <_free_r+0x8e>
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	e7d0      	b.n	8007a7a <_free_r+0x8e>
 8007ad8:	68fe      	ldr	r6, [r7, #12]
 8007ada:	60ce      	str	r6, [r1, #12]
 8007adc:	60b1      	str	r1, [r6, #8]
 8007ade:	e7db      	b.n	8007a98 <_free_r+0xac>
 8007ae0:	0a42      	lsrs	r2, r0, #9
 8007ae2:	2a04      	cmp	r2, #4
 8007ae4:	d813      	bhi.n	8007b0e <_free_r+0x122>
 8007ae6:	0982      	lsrs	r2, r0, #6
 8007ae8:	3238      	adds	r2, #56	; 0x38
 8007aea:	1c51      	adds	r1, r2, #1
 8007aec:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8007af0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8007af4:	428e      	cmp	r6, r1
 8007af6:	d124      	bne.n	8007b42 <_free_r+0x156>
 8007af8:	2001      	movs	r0, #1
 8007afa:	1092      	asrs	r2, r2, #2
 8007afc:	fa00 f202 	lsl.w	r2, r0, r2
 8007b00:	6868      	ldr	r0, [r5, #4]
 8007b02:	4302      	orrs	r2, r0
 8007b04:	606a      	str	r2, [r5, #4]
 8007b06:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8007b0a:	60b3      	str	r3, [r6, #8]
 8007b0c:	e7de      	b.n	8007acc <_free_r+0xe0>
 8007b0e:	2a14      	cmp	r2, #20
 8007b10:	d801      	bhi.n	8007b16 <_free_r+0x12a>
 8007b12:	325b      	adds	r2, #91	; 0x5b
 8007b14:	e7e9      	b.n	8007aea <_free_r+0xfe>
 8007b16:	2a54      	cmp	r2, #84	; 0x54
 8007b18:	d802      	bhi.n	8007b20 <_free_r+0x134>
 8007b1a:	0b02      	lsrs	r2, r0, #12
 8007b1c:	326e      	adds	r2, #110	; 0x6e
 8007b1e:	e7e4      	b.n	8007aea <_free_r+0xfe>
 8007b20:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007b24:	d802      	bhi.n	8007b2c <_free_r+0x140>
 8007b26:	0bc2      	lsrs	r2, r0, #15
 8007b28:	3277      	adds	r2, #119	; 0x77
 8007b2a:	e7de      	b.n	8007aea <_free_r+0xfe>
 8007b2c:	f240 5154 	movw	r1, #1364	; 0x554
 8007b30:	428a      	cmp	r2, r1
 8007b32:	bf9a      	itte	ls
 8007b34:	0c82      	lsrls	r2, r0, #18
 8007b36:	327c      	addls	r2, #124	; 0x7c
 8007b38:	227e      	movhi	r2, #126	; 0x7e
 8007b3a:	e7d6      	b.n	8007aea <_free_r+0xfe>
 8007b3c:	6889      	ldr	r1, [r1, #8]
 8007b3e:	428e      	cmp	r6, r1
 8007b40:	d004      	beq.n	8007b4c <_free_r+0x160>
 8007b42:	684a      	ldr	r2, [r1, #4]
 8007b44:	f022 0203 	bic.w	r2, r2, #3
 8007b48:	4282      	cmp	r2, r0
 8007b4a:	d8f7      	bhi.n	8007b3c <_free_r+0x150>
 8007b4c:	68ce      	ldr	r6, [r1, #12]
 8007b4e:	e7da      	b.n	8007b06 <_free_r+0x11a>
 8007b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b54:	24000440 	.word	0x24000440
 8007b58:	2400084c 	.word	0x2400084c
 8007b5c:	240154b8 	.word	0x240154b8
 8007b60:	24000448 	.word	0x24000448

08007b64 <__retarget_lock_acquire_recursive>:
 8007b64:	4770      	bx	lr

08007b66 <__retarget_lock_release_recursive>:
 8007b66:	4770      	bx	lr

08007b68 <__register_exitproc>:
 8007b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b6c:	4c26      	ldr	r4, [pc, #152]	; (8007c08 <__register_exitproc+0xa0>)
 8007b6e:	4606      	mov	r6, r0
 8007b70:	6820      	ldr	r0, [r4, #0]
 8007b72:	4698      	mov	r8, r3
 8007b74:	460f      	mov	r7, r1
 8007b76:	4691      	mov	r9, r2
 8007b78:	f7ff fff4 	bl	8007b64 <__retarget_lock_acquire_recursive>
 8007b7c:	4b23      	ldr	r3, [pc, #140]	; (8007c0c <__register_exitproc+0xa4>)
 8007b7e:	681d      	ldr	r5, [r3, #0]
 8007b80:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8007b84:	b918      	cbnz	r0, 8007b8e <__register_exitproc+0x26>
 8007b86:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8007b8a:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8007b8e:	6843      	ldr	r3, [r0, #4]
 8007b90:	2b1f      	cmp	r3, #31
 8007b92:	dd19      	ble.n	8007bc8 <__register_exitproc+0x60>
 8007b94:	4b1e      	ldr	r3, [pc, #120]	; (8007c10 <__register_exitproc+0xa8>)
 8007b96:	b933      	cbnz	r3, 8007ba6 <__register_exitproc+0x3e>
 8007b98:	6820      	ldr	r0, [r4, #0]
 8007b9a:	f7ff ffe4 	bl	8007b66 <__retarget_lock_release_recursive>
 8007b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ba6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007baa:	f7ff fc2f 	bl	800740c <malloc>
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	d0f2      	beq.n	8007b98 <__register_exitproc+0x30>
 8007bb2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8007bb6:	6003      	str	r3, [r0, #0]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	6042      	str	r2, [r0, #4]
 8007bbc:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8007bc0:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8007bc4:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8007bc8:	6843      	ldr	r3, [r0, #4]
 8007bca:	b19e      	cbz	r6, 8007bf4 <__register_exitproc+0x8c>
 8007bcc:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8007bd6:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8007bda:	409a      	lsls	r2, r3
 8007bdc:	4311      	orrs	r1, r2
 8007bde:	2e02      	cmp	r6, #2
 8007be0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8007be4:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8007be8:	bf02      	ittt	eq
 8007bea:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8007bee:	430a      	orreq	r2, r1
 8007bf0:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8007bf4:	1c5a      	adds	r2, r3, #1
 8007bf6:	3302      	adds	r3, #2
 8007bf8:	6042      	str	r2, [r0, #4]
 8007bfa:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8007bfe:	6820      	ldr	r0, [r4, #0]
 8007c00:	f7ff ffb1 	bl	8007b66 <__retarget_lock_release_recursive>
 8007c04:	2000      	movs	r0, #0
 8007c06:	e7cc      	b.n	8007ba2 <__register_exitproc+0x3a>
 8007c08:	24000850 	.word	0x24000850
 8007c0c:	0800e1f8 	.word	0x0800e1f8
 8007c10:	0800740d 	.word	0x0800740d

08007c14 <atan2f>:
 8007c14:	f000 b850 	b.w	8007cb8 <__ieee754_atan2f>

08007c18 <sqrtf>:
 8007c18:	b500      	push	{lr}
 8007c1a:	ed2d 8b02 	vpush	{d8}
 8007c1e:	b08b      	sub	sp, #44	; 0x2c
 8007c20:	eeb0 8a40 	vmov.f32	s16, s0
 8007c24:	f000 f8f2 	bl	8007e0c <__ieee754_sqrtf>
 8007c28:	4b21      	ldr	r3, [pc, #132]	; (8007cb0 <sqrtf+0x98>)
 8007c2a:	f993 3000 	ldrsb.w	r3, [r3]
 8007c2e:	1c5a      	adds	r2, r3, #1
 8007c30:	d028      	beq.n	8007c84 <sqrtf+0x6c>
 8007c32:	eeb4 8a48 	vcmp.f32	s16, s16
 8007c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c3a:	d623      	bvs.n	8007c84 <sqrtf+0x6c>
 8007c3c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c44:	d51e      	bpl.n	8007c84 <sqrtf+0x6c>
 8007c46:	2201      	movs	r2, #1
 8007c48:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8007c4c:	9200      	str	r2, [sp, #0]
 8007c4e:	4a19      	ldr	r2, [pc, #100]	; (8007cb4 <sqrtf+0x9c>)
 8007c50:	9201      	str	r2, [sp, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	9208      	str	r2, [sp, #32]
 8007c56:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007c5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007c5e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8007ca8 <sqrtf+0x90>
 8007c62:	b9a3      	cbnz	r3, 8007c8e <sqrtf+0x76>
 8007c64:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007c68:	4668      	mov	r0, sp
 8007c6a:	f000 f8d2 	bl	8007e12 <matherr>
 8007c6e:	b1a0      	cbz	r0, 8007c9a <sqrtf+0x82>
 8007c70:	9b08      	ldr	r3, [sp, #32]
 8007c72:	b11b      	cbz	r3, 8007c7c <sqrtf+0x64>
 8007c74:	f7ff fba0 	bl	80073b8 <__errno>
 8007c78:	9b08      	ldr	r3, [sp, #32]
 8007c7a:	6003      	str	r3, [r0, #0]
 8007c7c:	ed9d 0b06 	vldr	d0, [sp, #24]
 8007c80:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007c84:	b00b      	add	sp, #44	; 0x2c
 8007c86:	ecbd 8b02 	vpop	{d8}
 8007c8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8007c94:	ed8d 6b06 	vstr	d6, [sp, #24]
 8007c98:	d1e6      	bne.n	8007c68 <sqrtf+0x50>
 8007c9a:	f7ff fb8d 	bl	80073b8 <__errno>
 8007c9e:	2321      	movs	r3, #33	; 0x21
 8007ca0:	6003      	str	r3, [r0, #0]
 8007ca2:	e7e5      	b.n	8007c70 <sqrtf+0x58>
 8007ca4:	f3af 8000 	nop.w
	...
 8007cb0:	24000854 	.word	0x24000854
 8007cb4:	0800e1fc 	.word	0x0800e1fc

08007cb8 <__ieee754_atan2f>:
 8007cb8:	ee10 2a90 	vmov	r2, s1
 8007cbc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007cc0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007cc4:	b510      	push	{r4, lr}
 8007cc6:	eef0 7a40 	vmov.f32	s15, s0
 8007cca:	dc06      	bgt.n	8007cda <__ieee754_atan2f+0x22>
 8007ccc:	ee10 0a10 	vmov	r0, s0
 8007cd0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8007cd4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007cd8:	dd04      	ble.n	8007ce4 <__ieee754_atan2f+0x2c>
 8007cda:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007cde:	eeb0 0a67 	vmov.f32	s0, s15
 8007ce2:	bd10      	pop	{r4, pc}
 8007ce4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8007ce8:	d103      	bne.n	8007cf2 <__ieee754_atan2f+0x3a>
 8007cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cee:	f000 b893 	b.w	8007e18 <atanf>
 8007cf2:	1794      	asrs	r4, r2, #30
 8007cf4:	f004 0402 	and.w	r4, r4, #2
 8007cf8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007cfc:	b93b      	cbnz	r3, 8007d0e <__ieee754_atan2f+0x56>
 8007cfe:	2c02      	cmp	r4, #2
 8007d00:	d06b      	beq.n	8007dda <__ieee754_atan2f+0x122>
 8007d02:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8007de0 <__ieee754_atan2f+0x128>
 8007d06:	2c03      	cmp	r4, #3
 8007d08:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8007d0c:	e7e7      	b.n	8007cde <__ieee754_atan2f+0x26>
 8007d0e:	b939      	cbnz	r1, 8007d20 <__ieee754_atan2f+0x68>
 8007d10:	eddf 7a34 	vldr	s15, [pc, #208]	; 8007de4 <__ieee754_atan2f+0x12c>
 8007d14:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007de8 <__ieee754_atan2f+0x130>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	fe67 7a87 	vselge.f32	s15, s15, s14
 8007d1e:	e7de      	b.n	8007cde <__ieee754_atan2f+0x26>
 8007d20:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007d24:	d121      	bne.n	8007d6a <__ieee754_atan2f+0xb2>
 8007d26:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007d2a:	d111      	bne.n	8007d50 <__ieee754_atan2f+0x98>
 8007d2c:	2c02      	cmp	r4, #2
 8007d2e:	d009      	beq.n	8007d44 <__ieee754_atan2f+0x8c>
 8007d30:	2c03      	cmp	r4, #3
 8007d32:	d00a      	beq.n	8007d4a <__ieee754_atan2f+0x92>
 8007d34:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8007dec <__ieee754_atan2f+0x134>
 8007d38:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8007df0 <__ieee754_atan2f+0x138>
 8007d3c:	2c01      	cmp	r4, #1
 8007d3e:	fe47 7a87 	vseleq.f32	s15, s15, s14
 8007d42:	e7cc      	b.n	8007cde <__ieee754_atan2f+0x26>
 8007d44:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007df4 <__ieee754_atan2f+0x13c>
 8007d48:	e7c9      	b.n	8007cde <__ieee754_atan2f+0x26>
 8007d4a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007df8 <__ieee754_atan2f+0x140>
 8007d4e:	e7c6      	b.n	8007cde <__ieee754_atan2f+0x26>
 8007d50:	2c02      	cmp	r4, #2
 8007d52:	d042      	beq.n	8007dda <__ieee754_atan2f+0x122>
 8007d54:	2c03      	cmp	r4, #3
 8007d56:	d005      	beq.n	8007d64 <__ieee754_atan2f+0xac>
 8007d58:	2c01      	cmp	r4, #1
 8007d5a:	eddf 7a28 	vldr	s15, [pc, #160]	; 8007dfc <__ieee754_atan2f+0x144>
 8007d5e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8007e00 <__ieee754_atan2f+0x148>
 8007d62:	e7ec      	b.n	8007d3e <__ieee754_atan2f+0x86>
 8007d64:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007de0 <__ieee754_atan2f+0x128>
 8007d68:	e7b9      	b.n	8007cde <__ieee754_atan2f+0x26>
 8007d6a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007d6e:	d0cf      	beq.n	8007d10 <__ieee754_atan2f+0x58>
 8007d70:	1a5b      	subs	r3, r3, r1
 8007d72:	15db      	asrs	r3, r3, #23
 8007d74:	2b3c      	cmp	r3, #60	; 0x3c
 8007d76:	dc1a      	bgt.n	8007dae <__ieee754_atan2f+0xf6>
 8007d78:	2a00      	cmp	r2, #0
 8007d7a:	da01      	bge.n	8007d80 <__ieee754_atan2f+0xc8>
 8007d7c:	333c      	adds	r3, #60	; 0x3c
 8007d7e:	db19      	blt.n	8007db4 <__ieee754_atan2f+0xfc>
 8007d80:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8007d84:	f000 f91a 	bl	8007fbc <fabsf>
 8007d88:	f000 f846 	bl	8007e18 <atanf>
 8007d8c:	eef0 7a40 	vmov.f32	s15, s0
 8007d90:	2c01      	cmp	r4, #1
 8007d92:	d012      	beq.n	8007dba <__ieee754_atan2f+0x102>
 8007d94:	2c02      	cmp	r4, #2
 8007d96:	d017      	beq.n	8007dc8 <__ieee754_atan2f+0x110>
 8007d98:	2c00      	cmp	r4, #0
 8007d9a:	d0a0      	beq.n	8007cde <__ieee754_atan2f+0x26>
 8007d9c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007e04 <__ieee754_atan2f+0x14c>
 8007da0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007da4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007e08 <__ieee754_atan2f+0x150>
 8007da8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007dac:	e797      	b.n	8007cde <__ieee754_atan2f+0x26>
 8007dae:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007de4 <__ieee754_atan2f+0x12c>
 8007db2:	e7ed      	b.n	8007d90 <__ieee754_atan2f+0xd8>
 8007db4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007e00 <__ieee754_atan2f+0x148>
 8007db8:	e7ea      	b.n	8007d90 <__ieee754_atan2f+0xd8>
 8007dba:	ee17 3a90 	vmov	r3, s15
 8007dbe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007dc2:	ee07 3a90 	vmov	s15, r3
 8007dc6:	e78a      	b.n	8007cde <__ieee754_atan2f+0x26>
 8007dc8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007e04 <__ieee754_atan2f+0x14c>
 8007dcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007dd0:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007e08 <__ieee754_atan2f+0x150>
 8007dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dd8:	e781      	b.n	8007cde <__ieee754_atan2f+0x26>
 8007dda:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8007e08 <__ieee754_atan2f+0x150>
 8007dde:	e77e      	b.n	8007cde <__ieee754_atan2f+0x26>
 8007de0:	c0490fdb 	.word	0xc0490fdb
 8007de4:	3fc90fdb 	.word	0x3fc90fdb
 8007de8:	bfc90fdb 	.word	0xbfc90fdb
 8007dec:	bf490fdb 	.word	0xbf490fdb
 8007df0:	3f490fdb 	.word	0x3f490fdb
 8007df4:	4016cbe4 	.word	0x4016cbe4
 8007df8:	c016cbe4 	.word	0xc016cbe4
 8007dfc:	80000000 	.word	0x80000000
 8007e00:	00000000 	.word	0x00000000
 8007e04:	33bbbd2e 	.word	0x33bbbd2e
 8007e08:	40490fdb 	.word	0x40490fdb

08007e0c <__ieee754_sqrtf>:
 8007e0c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007e10:	4770      	bx	lr

08007e12 <matherr>:
 8007e12:	2000      	movs	r0, #0
 8007e14:	4770      	bx	lr
	...

08007e18 <atanf>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	ee10 5a10 	vmov	r5, s0
 8007e1e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007e22:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8007e26:	eef0 7a40 	vmov.f32	s15, s0
 8007e2a:	db0f      	blt.n	8007e4c <atanf+0x34>
 8007e2c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007e30:	dd04      	ble.n	8007e3c <atanf+0x24>
 8007e32:	ee70 7a00 	vadd.f32	s15, s0, s0
 8007e36:	eeb0 0a67 	vmov.f32	s0, s15
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
 8007e3c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007f70 <atanf+0x158>
 8007e40:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8007f74 <atanf+0x15c>
 8007e44:	2d00      	cmp	r5, #0
 8007e46:	fe77 7a87 	vselgt.f32	s15, s15, s14
 8007e4a:	e7f4      	b.n	8007e36 <atanf+0x1e>
 8007e4c:	4b4a      	ldr	r3, [pc, #296]	; (8007f78 <atanf+0x160>)
 8007e4e:	429c      	cmp	r4, r3
 8007e50:	dc10      	bgt.n	8007e74 <atanf+0x5c>
 8007e52:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8007e56:	da0a      	bge.n	8007e6e <atanf+0x56>
 8007e58:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8007f7c <atanf+0x164>
 8007e5c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007e60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e64:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e6c:	dce3      	bgt.n	8007e36 <atanf+0x1e>
 8007e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e72:	e013      	b.n	8007e9c <atanf+0x84>
 8007e74:	f000 f8a2 	bl	8007fbc <fabsf>
 8007e78:	4b41      	ldr	r3, [pc, #260]	; (8007f80 <atanf+0x168>)
 8007e7a:	429c      	cmp	r4, r3
 8007e7c:	dc4f      	bgt.n	8007f1e <atanf+0x106>
 8007e7e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007e82:	429c      	cmp	r4, r3
 8007e84:	dc41      	bgt.n	8007f0a <atanf+0xf2>
 8007e86:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007e8a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007e8e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007e92:	2300      	movs	r3, #0
 8007e94:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007e98:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007e9c:	1c5a      	adds	r2, r3, #1
 8007e9e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007ea2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007f84 <atanf+0x16c>
 8007ea6:	eddf 5a38 	vldr	s11, [pc, #224]	; 8007f88 <atanf+0x170>
 8007eaa:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8007f8c <atanf+0x174>
 8007eae:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007eb2:	eee6 5a87 	vfma.f32	s11, s13, s14
 8007eb6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007f90 <atanf+0x178>
 8007eba:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007ebe:	eddf 5a35 	vldr	s11, [pc, #212]	; 8007f94 <atanf+0x17c>
 8007ec2:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007ec6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007f98 <atanf+0x180>
 8007eca:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007ece:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007f9c <atanf+0x184>
 8007ed2:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007ed6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007fa0 <atanf+0x188>
 8007eda:	eea6 5a87 	vfma.f32	s10, s13, s14
 8007ede:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007fa4 <atanf+0x18c>
 8007ee2:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007ee6:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8007fa8 <atanf+0x190>
 8007eea:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007eee:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007fac <atanf+0x194>
 8007ef2:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007ef6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007efa:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007efe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f02:	d121      	bne.n	8007f48 <atanf+0x130>
 8007f04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f08:	e795      	b.n	8007e36 <atanf+0x1e>
 8007f0a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007f0e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007f12:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007f16:	2301      	movs	r3, #1
 8007f18:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007f1c:	e7be      	b.n	8007e9c <atanf+0x84>
 8007f1e:	4b24      	ldr	r3, [pc, #144]	; (8007fb0 <atanf+0x198>)
 8007f20:	429c      	cmp	r4, r3
 8007f22:	dc0b      	bgt.n	8007f3c <atanf+0x124>
 8007f24:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8007f28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f2c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007f30:	2302      	movs	r3, #2
 8007f32:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f3a:	e7af      	b.n	8007e9c <atanf+0x84>
 8007f3c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007f40:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007f44:	2303      	movs	r3, #3
 8007f46:	e7a9      	b.n	8007e9c <atanf+0x84>
 8007f48:	4a1a      	ldr	r2, [pc, #104]	; (8007fb4 <atanf+0x19c>)
 8007f4a:	491b      	ldr	r1, [pc, #108]	; (8007fb8 <atanf+0x1a0>)
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	441a      	add	r2, r3
 8007f50:	440b      	add	r3, r1
 8007f52:	edd3 6a00 	vldr	s13, [r3]
 8007f56:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007f5a:	2d00      	cmp	r5, #0
 8007f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f60:	ed92 7a00 	vldr	s14, [r2]
 8007f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f68:	bfb8      	it	lt
 8007f6a:	eef1 7a67 	vneglt.f32	s15, s15
 8007f6e:	e762      	b.n	8007e36 <atanf+0x1e>
 8007f70:	bfc90fdb 	.word	0xbfc90fdb
 8007f74:	3fc90fdb 	.word	0x3fc90fdb
 8007f78:	3edfffff 	.word	0x3edfffff
 8007f7c:	7149f2ca 	.word	0x7149f2ca
 8007f80:	3f97ffff 	.word	0x3f97ffff
 8007f84:	3c8569d7 	.word	0x3c8569d7
 8007f88:	3d4bda59 	.word	0x3d4bda59
 8007f8c:	bd6ef16b 	.word	0xbd6ef16b
 8007f90:	3d886b35 	.word	0x3d886b35
 8007f94:	3dba2e6e 	.word	0x3dba2e6e
 8007f98:	3e124925 	.word	0x3e124925
 8007f9c:	3eaaaaab 	.word	0x3eaaaaab
 8007fa0:	bd15a221 	.word	0xbd15a221
 8007fa4:	bd9d8795 	.word	0xbd9d8795
 8007fa8:	bde38e38 	.word	0xbde38e38
 8007fac:	be4ccccd 	.word	0xbe4ccccd
 8007fb0:	401bffff 	.word	0x401bffff
 8007fb4:	0800e204 	.word	0x0800e204
 8007fb8:	0800e214 	.word	0x0800e214

08007fbc <fabsf>:
 8007fbc:	ee10 3a10 	vmov	r3, s0
 8007fc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fc4:	ee00 3a10 	vmov	s0, r3
 8007fc8:	4770      	bx	lr
	...

08007fcc <_init>:
 8007fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fce:	bf00      	nop
 8007fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fd2:	bc08      	pop	{r3}
 8007fd4:	469e      	mov	lr, r3
 8007fd6:	4770      	bx	lr

08007fd8 <_fini>:
 8007fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fda:	bf00      	nop
 8007fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fde:	bc08      	pop	{r3}
 8007fe0:	469e      	mov	lr, r3
 8007fe2:	4770      	bx	lr
