
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098dc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08009b80  08009b80  00019b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009ef8  08009ef8  00019ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009f00  08009f00  00019f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009f04  08009f04  00019f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  20000000  08009f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006548  200001e8  0800a0f0  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20006730  0800a0f0  00026730  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027e80  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004130  00000000  00000000  00048096  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000015a8  00000000  00000000  0004c1c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000013f0  00000000  00000000  0004d770  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003c1d5  00000000  00000000  0004eb60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00015c76  00000000  00000000  0008ad35  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00186139  00000000  00000000  000a09ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000e9  00000000  00000000  00226ae4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000063c0  00000000  00000000  00226bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00000339  00000000  00000000  0022cf90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001e8 	.word	0x200001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009b64 	.word	0x08009b64

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001ec 	.word	0x200001ec
 80002dc:	08009b64 	.word	0x08009b64

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <SystemInit+0xc4>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <SystemInit+0xc4>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <SystemInit+0xc4>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <SystemInit+0xc4>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemInit+0xc8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <SystemInit+0xc8>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <SystemInit+0xc8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemInit+0xc8>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4924      	ldr	r1, [pc, #144]	; (8000758 <SystemInit+0xc8>)
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <SystemInit+0xcc>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemInit+0xc8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006d4:	4b20      	ldr	r3, [pc, #128]	; (8000758 <SystemInit+0xc8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemInit+0xc8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <SystemInit+0xc8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <SystemInit+0xc8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <SystemInit+0xc8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <SystemInit+0xc8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <SystemInit+0xc8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <SystemInit+0xc8>)
 8000700:	2200      	movs	r2, #0
 8000702:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <SystemInit+0xc8>)
 8000706:	2200      	movs	r2, #0
 8000708:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <SystemInit+0xc8>)
 800070c:	2200      	movs	r2, #0
 800070e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <SystemInit+0xc8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a10      	ldr	r2, [pc, #64]	; (8000758 <SystemInit+0xc8>)
 8000716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800071a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <SystemInit+0xc8>)
 800071e:	2200      	movs	r2, #0
 8000720:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <SystemInit+0xd0>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <SystemInit+0xd0>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <SystemInit+0xd4>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <SystemInit+0xd8>)
 8000734:	4013      	ands	r3, r2
 8000736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800073a:	d202      	bcs.n	8000742 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <SystemInit+0xdc>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SystemInit+0xc4>)
 8000744:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000748:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	58024400 	.word	0x58024400
 800075c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000760:	580000c0 	.word	0x580000c0
 8000764:	5c001000 	.word	0x5c001000
 8000768:	ffff0000 	.word	0xffff0000
 800076c:	51008108 	.word	0x51008108

08000770 <inst_absolute>:
static float32_t pi = 3.141592654f;
extern uint16_t frameSize;

// Preprocessing

void inst_absolute(float32_t in[], float32_t out[]){
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	int j = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	e031      	b.n	80007e8 <inst_absolute+0x78>
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	ed93 7a00 	vldr	s14, [r3]
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	4413      	add	r3, r2
 8000798:	edd3 7a00 	vldr	s15, [r3]
 800079c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	3301      	adds	r3, #1
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	edd3 6a00 	vldr	s13, [r3]
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	3301      	adds	r3, #1
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	4413      	add	r3, r2
 80007b8:	edd3 7a00 	vldr	s15, [r3]
 80007bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	683a      	ldr	r2, [r7, #0]
 80007ca:	18d4      	adds	r4, r2, r3
 80007cc:	eeb0 0a67 	vmov.f32	s0, s15
 80007d0:	f008 ff8a 	bl	80096e8 <sqrtf>
 80007d4:	eef0 7a40 	vmov.f32	s15, s0
 80007d8:	edc4 7a00 	vstr	s15, [r4]
		j++;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3301      	adds	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	3302      	adds	r3, #2
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <inst_absolute+0x8c>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	dbc7      	blt.n	8000784 <inst_absolute+0x14>
	}
}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd90      	pop	{r4, r7, pc}
 80007fc:	08009c2c 	.word	0x08009c2c

08000800 <inst_phase>:

void inst_phase(float32_t in[], float32_t out[]){
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
	int j = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	e026      	b.n	8000862 <inst_phase+0x62>
		out[j] = atan2(in[i+1], in[i]);
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	3301      	adds	r3, #1
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	edd3 7a00 	vldr	s15, [r3]
 8000822:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	4413      	add	r3, r2
 800082e:	edd3 6a00 	vldr	s13, [r3]
 8000832:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000836:	eeb0 1b46 	vmov.f64	d1, d6
 800083a:	eeb0 0b47 	vmov.f64	d0, d7
 800083e:	f008 ff4f 	bl	80096e0 <atan2>
 8000842:	eeb0 7b40 	vmov.f64	d7, d0
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	683a      	ldr	r2, [r7, #0]
 800084c:	4413      	add	r3, r2
 800084e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000852:	edc3 7a00 	vstr	s15, [r3]
		j++;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	3301      	adds	r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	3302      	adds	r3, #2
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <inst_phase+0x78>)
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	68ba      	ldr	r2, [r7, #8]
 800086a:	429a      	cmp	r2, r3
 800086c:	dbd2      	blt.n	8000814 <inst_phase+0x14>
	}
}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	08009c2c 	.word	0x08009c2c

0800087c <unwrap>:

void unwrap(float32_t in[], float32_t out[]){
 800087c:	b480      	push	{r7}
 800087e:	b087      	sub	sp, #28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
	        end
	    end
	end
	yout((i+1),:)=u(i+1)+(2*pi*k); % add 2*pi*k to the last element of the input
	*/
	uint16_t k = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	82fb      	strh	r3, [r7, #22]
	float32_t alpha = pi;
 800088a:	4b47      	ldr	r3, [pc, #284]	; (80009a8 <unwrap+0x12c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < (frameSize - 1); i++){
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	e057      	b.n	8000946 <unwrap+0xca>
		out[i] = in[i] + 2*pi*k;
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	ed93 7a00 	vldr	s14, [r3]
 80008a2:	4b41      	ldr	r3, [pc, #260]	; (80009a8 <unwrap+0x12c>)
 80008a4:	edd3 7a00 	vldr	s15, [r3]
 80008a8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80008ac:	8afb      	ldrh	r3, [r7, #22]
 80008ae:	ee07 3a90 	vmov	s15, r3
 80008b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	683a      	ldr	r2, [r7, #0]
 80008c0:	4413      	add	r3, r2
 80008c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008c6:	edc3 7a00 	vstr	s15, [r3]
		if(abs(in[i+1] - in[i]) > abs(alpha)){
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	3301      	adds	r3, #1
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	4413      	add	r3, r2
 80008d4:	ed93 7a00 	vldr	s14, [r3]
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	4413      	add	r3, r2
 80008e0:	edd3 7a00 	vldr	s15, [r3]
 80008e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ec:	ee17 3a90 	vmov	r3, s15
 80008f0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80008f4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80008f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80008fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000900:	ee17 3a90 	vmov	r3, s15
 8000904:	2b00      	cmp	r3, #0
 8000906:	bfb8      	it	lt
 8000908:	425b      	neglt	r3, r3
 800090a:	429a      	cmp	r2, r3
 800090c:	dd18      	ble.n	8000940 <unwrap+0xc4>
			if(in[i+1] < in[i]){
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	3301      	adds	r3, #1
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	4413      	add	r3, r2
 8000918:	ed93 7a00 	vldr	s14, [r3]
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	4413      	add	r3, r2
 8000924:	edd3 7a00 	vldr	s15, [r3]
 8000928:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800092c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000930:	d503      	bpl.n	800093a <unwrap+0xbe>
				k++;
 8000932:	8afb      	ldrh	r3, [r7, #22]
 8000934:	3301      	adds	r3, #1
 8000936:	82fb      	strh	r3, [r7, #22]
 8000938:	e002      	b.n	8000940 <unwrap+0xc4>
			} else {
				k--;
 800093a:	8afb      	ldrh	r3, [r7, #22]
 800093c:	3b01      	subs	r3, #1
 800093e:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (frameSize - 1); i++){
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	3301      	adds	r3, #1
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <unwrap+0x130>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	3b01      	subs	r3, #1
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	429a      	cmp	r2, r3
 8000950:	dba1      	blt.n	8000896 <unwrap+0x1a>
			}
		}
	}
	out[frameSize-1] = in[frameSize-1] + 2*pi*k;
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <unwrap+0x130>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800095c:	4413      	add	r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	4413      	add	r3, r2
 8000964:	ed93 7a00 	vldr	s14, [r3]
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <unwrap+0x12c>)
 800096a:	edd3 7a00 	vldr	s15, [r3]
 800096e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000972:	8afb      	ldrh	r3, [r7, #22]
 8000974:	ee07 3a90 	vmov	s15, r3
 8000978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800097c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <unwrap+0x130>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800098a:	4413      	add	r3, r2
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	683a      	ldr	r2, [r7, #0]
 8000990:	4413      	add	r3, r2
 8000992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000996:	edc3 7a00 	vstr	s15, [r3]
}
 800099a:	bf00      	nop
 800099c:	371c      	adds	r7, #28
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000008 	.word	0x20000008
 80009ac:	08009c2c 	.word	0x08009c2c

080009b0 <inst_frequency>:

void inst_frequency(float32_t in[], float32_t out[]){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
	float32_t *inst_phase, *unwrapped_phase;
	inst_phase = (float32_t *) malloc(frameSize * sizeof(float32_t));
 80009ba:	4b50      	ldr	r3, [pc, #320]	; (8000afc <inst_frequency+0x14c>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f006 fecd 	bl	8007760 <malloc>
 80009c6:	4603      	mov	r3, r0
 80009c8:	613b      	str	r3, [r7, #16]
	unwrapped_phase = (float32_t *) malloc(frameSize * sizeof(float32_t));
 80009ca:	4b4c      	ldr	r3, [pc, #304]	; (8000afc <inst_frequency+0x14c>)
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f006 fec5 	bl	8007760 <malloc>
 80009d6:	4603      	mov	r3, r0
 80009d8:	60fb      	str	r3, [r7, #12]
	int j = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
 80009e2:	e026      	b.n	8000a32 <inst_frequency+0x82>
		inst_phase[j] = atan2(in[i], in[i+1]);
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	4413      	add	r3, r2
 80009ec:	edd3 7a00 	vldr	s15, [r3]
 80009f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	3301      	adds	r3, #1
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	edd3 6a00 	vldr	s13, [r3]
 8000a02:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000a06:	eeb0 1b46 	vmov.f64	d1, d6
 8000a0a:	eeb0 0b47 	vmov.f64	d0, d7
 8000a0e:	f008 fe67 	bl	80096e0 <atan2>
 8000a12:	eeb0 7b40 	vmov.f64	d7, d0
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a22:	edc3 7a00 	vstr	s15, [r3]
		j++;
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	3302      	adds	r3, #2
 8000a30:	61bb      	str	r3, [r7, #24]
 8000a32:	4b32      	ldr	r3, [pc, #200]	; (8000afc <inst_frequency+0x14c>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	dbd2      	blt.n	80009e4 <inst_frequency+0x34>
	}
	unwrap(inst_phase, unwrapped_phase);
 8000a3e:	68f9      	ldr	r1, [r7, #12]
 8000a40:	6938      	ldr	r0, [r7, #16]
 8000a42:	f7ff ff1b 	bl	800087c <unwrap>
	for(int i = 0; i < frameSize - 1; i++){
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	e022      	b.n	8000a92 <inst_frequency+0xe2>
		out[i] = (1/(2*pi))*(unwrapped_phase[i+1] - unwrapped_phase[i]);
 8000a4c:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <inst_frequency+0x150>)
 8000a4e:	edd3 7a00 	vldr	s15, [r3]
 8000a52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	4413      	add	r3, r2
 8000a68:	edd3 6a00 	vldr	s13, [r3]
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	edd3 7a00 	vldr	s15, [r3]
 8000a78:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	683a      	ldr	r2, [r7, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a88:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < frameSize - 1; i++){
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <inst_frequency+0x14c>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	dbd6      	blt.n	8000a4c <inst_frequency+0x9c>
	}
	out[frameSize - 1] = (1/(2*pi))*(0 - unwrapped_phase[frameSize - 1]);
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <inst_frequency+0x150>)
 8000aa0:	edd3 7a00 	vldr	s15, [r3]
 8000aa4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000aa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000aac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <inst_frequency+0x14c>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000aba:	4413      	add	r3, r2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	edd3 7a00 	vldr	s15, [r3]
 8000ac6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000b04 <inst_frequency+0x154>
 8000aca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <inst_frequency+0x14c>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000ad8:	4413      	add	r3, r2
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ae4:	edc3 7a00 	vstr	s15, [r3]
	free(inst_phase);
 8000ae8:	6938      	ldr	r0, [r7, #16]
 8000aea:	f006 fe41 	bl	8007770 <free>
	free(unwrapped_phase);
 8000aee:	68f8      	ldr	r0, [r7, #12]
 8000af0:	f006 fe3e 	bl	8007770 <free>
}
 8000af4:	bf00      	nop
 8000af6:	3720      	adds	r7, #32
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	08009c2c 	.word	0x08009c2c
 8000b00:	20000008 	.word	0x20000008
 8000b04:	00000000 	.word	0x00000000

08000b08 <inst_centralized_normalized_absolute>:

void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
	float32_t mean = 0, max = 0;
 8000b12:	f04f 0300 	mov.w	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	f04f 0300 	mov.w	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
	uint32_t max_index = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
	float32_t *absolute, *normalized;
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000b22:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <inst_centralized_normalized_absolute+0xf4>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f006 fe19 	bl	8007760 <malloc>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	61fb      	str	r3, [r7, #28]
	normalized = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000b32:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <inst_centralized_normalized_absolute+0xf4>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f006 fe11 	bl	8007760 <malloc>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	61bb      	str	r3, [r7, #24]
	inst_absolute(in, &absolute[0]);
 8000b42:	69f9      	ldr	r1, [r7, #28]
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff fe13 	bl	8000770 <inst_absolute>
	arm_max_f32(absolute, frameSize, &max, &max_index);
 8000b4a:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <inst_centralized_normalized_absolute+0xf4>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	f107 0210 	add.w	r2, r7, #16
 8000b58:	69f8      	ldr	r0, [r7, #28]
 8000b5a:	f006 fd71 	bl	8007640 <arm_max_f32>
	for(int a = 0; a < frameSize; a++){
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
 8000b62:	e012      	b.n	8000b8a <inst_centralized_normalized_absolute+0x82>
		normalized[a] = absolute[a] / max;
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	69fa      	ldr	r2, [r7, #28]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	edd3 6a00 	vldr	s13, [r3]
 8000b70:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b80:	edc3 7a00 	vstr	s15, [r3]
	for(int a = 0; a < frameSize; a++){
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	3301      	adds	r3, #1
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <inst_centralized_normalized_absolute+0xf4>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b92:	4293      	cmp	r3, r2
 8000b94:	dbe6      	blt.n	8000b64 <inst_centralized_normalized_absolute+0x5c>
	}
	arm_mean_f32(&normalized[0], frameSize, &mean);
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <inst_centralized_normalized_absolute+0xf4>)
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	69b8      	ldr	r0, [r7, #24]
 8000ba4:	f006 fd16 	bl	80075d4 <arm_mean_f32>
	for(int i = 0; i < frameSize; i++){
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
 8000bac:	e016      	b.n	8000bdc <inst_centralized_normalized_absolute+0xd4>
		out[i] = normalized[i] / mean - 1;
 8000bae:	6a3b      	ldr	r3, [r7, #32]
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	edd3 6a00 	vldr	s13, [r3]
 8000bba:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bc2:	6a3b      	ldr	r3, [r7, #32]
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	4413      	add	r3, r2
 8000bca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bd2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < frameSize; i++){
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	623b      	str	r3, [r7, #32]
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <inst_centralized_normalized_absolute+0xf4>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	6a3b      	ldr	r3, [r7, #32]
 8000be4:	4293      	cmp	r3, r2
 8000be6:	dbe2      	blt.n	8000bae <inst_centralized_normalized_absolute+0xa6>
	}
	free(absolute);
 8000be8:	69f8      	ldr	r0, [r7, #28]
 8000bea:	f006 fdc1 	bl	8007770 <free>
	free(normalized);
 8000bee:	69b8      	ldr	r0, [r7, #24]
 8000bf0:	f006 fdbe 	bl	8007770 <free>
}
 8000bf4:	bf00      	nop
 8000bf6:	3728      	adds	r7, #40	; 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	08009c2c 	.word	0x08009c2c

08000c00 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08c      	sub	sp, #48	; 0x30
 8000c04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	4b43      	ldr	r3, [pc, #268]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	4a41      	ldr	r2, [pc, #260]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c1e:	f043 0304 	orr.w	r3, r3, #4
 8000c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c26:	4b3f      	ldr	r3, [pc, #252]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	61bb      	str	r3, [r7, #24]
 8000c32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c34:	4b3b      	ldr	r3, [pc, #236]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	4a3a      	ldr	r2, [pc, #232]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c44:	4b37      	ldr	r3, [pc, #220]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	4b34      	ldr	r3, [pc, #208]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	4a32      	ldr	r2, [pc, #200]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c5a:	f043 0302 	orr.w	r3, r3, #2
 8000c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c62:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	f003 0302 	and.w	r3, r3, #2
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c70:	4b2c      	ldr	r3, [pc, #176]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	4a2b      	ldr	r2, [pc, #172]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c80:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	4a23      	ldr	r2, [pc, #140]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9e:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	4a1c      	ldr	r2, [pc, #112]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000cb4:	f043 0310 	orr.w	r3, r3, #16
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbc:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	f003 0310 	and.w	r3, r3, #16
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cd0:	4815      	ldr	r0, [pc, #84]	; (8000d28 <MX_GPIO_Init+0x128>)
 8000cd2:	f001 fc8d 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2102      	movs	r1, #2
 8000cda:	4814      	ldr	r0, [pc, #80]	; (8000d2c <MX_GPIO_Init+0x12c>)
 8000cdc:	f001 fc88 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ce0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480b      	ldr	r0, [pc, #44]	; (8000d28 <MX_GPIO_Init+0x128>)
 8000cfa:	f001 fab1 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	2301      	movs	r3, #1
 8000d04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_GPIO_Init+0x12c>)
 8000d16:	f001 faa3 	bl	8002260 <HAL_GPIO_Init>

}
 8000d1a:	bf00      	nop
 8000d1c:	3730      	adds	r7, #48	; 0x30
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	58024400 	.word	0x58024400
 8000d28:	58020400 	.word	0x58020400
 8000d2c:	58021000 	.word	0x58021000

08000d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	f5ad 4da0 	sub.w	sp, sp, #20480	; 0x5000
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// char hello_world[50] = {"\r\nHello World!\r\n"};
	uint32_t counter = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f245 0208 	movw	r2, #20488	; 0x5008
 8000d40:	443a      	add	r2, r7
 8000d42:	6013      	str	r3, [r2, #0]
    int32_t timeout; 
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d48:	f245 020c 	movw	r2, #20492	; 0x500c
 8000d4c:	443a      	add	r2, r7
 8000d4e:	6013      	str	r3, [r2, #0]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d50:	bf00      	nop
 8000d52:	4b39      	ldr	r3, [pc, #228]	; (8000e38 <main+0x108>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00a      	beq.n	8000d74 <main+0x44>
 8000d5e:	f245 030c 	movw	r3, #20492	; 0x500c
 8000d62:	443b      	add	r3, r7
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	1e5a      	subs	r2, r3, #1
 8000d68:	f245 010c 	movw	r1, #20492	; 0x500c
 8000d6c:	4439      	add	r1, r7
 8000d6e:	600a      	str	r2, [r1, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	dcee      	bgt.n	8000d52 <main+0x22>
  if ( timeout < 0 )
 8000d74:	f245 030c 	movw	r3, #20492	; 0x500c
 8000d78:	443b      	add	r3, r7
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	da01      	bge.n	8000d84 <main+0x54>
  {
  Error_Handler();
 8000d80:	f000 fc14 	bl	80015ac <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d84:	f000 fe58 	bl	8001a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d88:	f000 fa80 	bl	800128c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d8c:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <main+0x108>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d92:	4a29      	ldr	r2, [pc, #164]	; (8000e38 <main+0x108>)
 8000d94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9c:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <main+0x108>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da2:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8000da6:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <main+0x10c>)
 8000da8:	f245 0110 	movw	r1, #20496	; 0x5010
 8000dac:	4439      	add	r1, r7
 8000dae:	440b      	add	r3, r1
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <main+0x10c>)
 8000db4:	f245 0210 	movw	r2, #20496	; 0x5010
 8000db8:	443a      	add	r2, r7
 8000dba:	4413      	add	r3, r2
 8000dbc:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f001 fc30 	bl	8002624 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f001 fc46 	bl	8002658 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000dcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dd0:	f245 020c 	movw	r2, #20492	; 0x500c
 8000dd4:	443a      	add	r2, r7
 8000dd6:	6013      	str	r3, [r2, #0]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000dd8:	bf00      	nop
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <main+0x108>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10a      	bne.n	8000dfc <main+0xcc>
 8000de6:	f245 030c 	movw	r3, #20492	; 0x500c
 8000dea:	443b      	add	r3, r7
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	1e5a      	subs	r2, r3, #1
 8000df0:	f245 010c 	movw	r1, #20492	; 0x500c
 8000df4:	4439      	add	r1, r7
 8000df6:	600a      	str	r2, [r1, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	dcee      	bgt.n	8000dda <main+0xaa>
if ( timeout < 0 )
 8000dfc:	f245 030c 	movw	r3, #20492	; 0x500c
 8000e00:	443b      	add	r3, r7
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	da01      	bge.n	8000e0c <main+0xdc>
{
Error_Handler();
 8000e08:	f000 fbd0 	bl	80015ac <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0c:	f7ff fef8 	bl	8000c00 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e10:	f000 fcc0 	bl	8001794 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e14:	f000 fd5c 	bl	80018d0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000e18:	f000 fc4e 	bl	80016b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Put UART peripheral in reception process
  if(HAL_UART_Receive_IT(&huart3, &rxDataBuffer[0], bufferSize) != HAL_OK)
 8000e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e20:	461a      	mov	r2, r3
 8000e22:	4907      	ldr	r1, [pc, #28]	; (8000e40 <main+0x110>)
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <main+0x114>)
 8000e26:	f004 fc6d 	bl	8005704 <HAL_UART_Receive_IT>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d02c      	beq.n	8000e8a <main+0x15a>
  {
    Error_Handler();
 8000e30:	f000 fbbc 	bl	80015ac <Error_Handler>
  }
  // Wait for message
  while (UartReady != SET)
 8000e34:	e029      	b.n	8000e8a <main+0x15a>
 8000e36:	bf00      	nop
 8000e38:	58024400 	.word	0x58024400
 8000e3c:	ffffaff4 	.word	0xffffaff4
 8000e40:	20000208 	.word	0x20000208
 8000e44:	20006294 	.word	0x20006294
  {
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	48b7      	ldr	r0, [pc, #732]	; (800112c <main+0x3fc>)
 8000e4e:	f001 fbcf 	bl	80025f0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000e52:	2064      	movs	r0, #100	; 0x64
 8000e54:	f000 fe82 	bl	8001b5c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	48b3      	ldr	r0, [pc, #716]	; (800112c <main+0x3fc>)
 8000e5e:	f001 fbc7 	bl	80025f0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000e62:	2064      	movs	r0, #100	; 0x64
 8000e64:	f000 fe7a 	bl	8001b5c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	48af      	ldr	r0, [pc, #700]	; (800112c <main+0x3fc>)
 8000e6e:	f001 fbbf 	bl	80025f0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000e72:	2064      	movs	r0, #100	; 0x64
 8000e74:	f000 fe72 	bl	8001b5c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	48ab      	ldr	r0, [pc, #684]	; (800112c <main+0x3fc>)
 8000e7e:	f001 fbb7 	bl	80025f0 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000e82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e86:	f000 fe69 	bl	8001b5c <HAL_Delay>
  while (UartReady != SET)
 8000e8a:	4ba9      	ldr	r3, [pc, #676]	; (8001130 <main+0x400>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d1d9      	bne.n	8000e48 <main+0x118>
  }
  UartReady = RESET;
 8000e94:	4ba6      	ldr	r3, [pc, #664]	; (8001130 <main+0x400>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]

  // HAL_UART_Transmit(&huart3, (uint8_t*) &hello_world[0], sizeof(hello_world), 100);
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	48a3      	ldr	r0, [pc, #652]	; (800112c <main+0x3fc>)
 8000ea0:	f001 fba6 	bl	80025f0 <HAL_GPIO_WritePin>

  if(rxDataBuffer[8191] != 0 && (processed == 0)){
 8000ea4:	4aa3      	ldr	r2, [pc, #652]	; (8001134 <main+0x404>)
 8000ea6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000eaa:	4413      	add	r3, r2
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00c      	beq.n	8000ecc <main+0x19c>
 8000eb2:	4ba1      	ldr	r3, [pc, #644]	; (8001138 <main+0x408>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d108      	bne.n	8000ecc <main+0x19c>
	  byte2float(rxDataBuffer, processedData, 2*frameSize);
 8000eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	499d      	ldr	r1, [pc, #628]	; (800113c <main+0x40c>)
 8000ec6:	489b      	ldr	r0, [pc, #620]	; (8001134 <main+0x404>)
 8000ec8:	f000 fad0 	bl	800146c <byte2float>
  }

  // HRTimer enable
  __HAL_TIM_ENABLE(&htim2);
 8000ecc:	4b9c      	ldr	r3, [pc, #624]	; (8001140 <main+0x410>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4b9b      	ldr	r3, [pc, #620]	; (8001140 <main+0x410>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f042 0201 	orr.w	r2, r2, #1
 8000eda:	601a      	str	r2, [r3, #0]
  __HAL_TIM_UIFREMAP_DISABLE(&htim2);
 8000edc:	4b98      	ldr	r3, [pc, #608]	; (8001140 <main+0x410>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4b97      	ldr	r3, [pc, #604]	; (8001140 <main+0x410>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000eea:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim2);
 8000eec:	4894      	ldr	r0, [pc, #592]	; (8001140 <main+0x410>)
 8000eee:	f004 f865 	bl	8004fbc <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000ef2:	4b93      	ldr	r3, [pc, #588]	; (8001140 <main+0x410>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24

  	/*****************************************************************************************************/
    // Instantaneous absolute value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000efa:	4b91      	ldr	r3, [pc, #580]	; (8001140 <main+0x410>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(&processedData[0], &instAbs[0]);
 8000f02:	4b90      	ldr	r3, [pc, #576]	; (8001144 <main+0x414>)
 8000f04:	f245 0210 	movw	r2, #20496	; 0x5010
 8000f08:	443a      	add	r2, r7
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	488b      	ldr	r0, [pc, #556]	; (800113c <main+0x40c>)
 8000f10:	f7ff fc2e 	bl	8000770 <inst_absolute>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000f14:	4b8a      	ldr	r3, [pc, #552]	; (8001140 <main+0x410>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1a:	f245 0208 	movw	r2, #20488	; 0x5008
 8000f1e:	443a      	add	r2, r7
 8000f20:	6013      	str	r3, [r2, #0]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8000f22:	4889      	ldr	r0, [pc, #548]	; (8001148 <main+0x418>)
 8000f24:	f000 fa70 	bl	8001408 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst abs counter = %ld\r\n&", counter);
 8000f28:	f245 0308 	movw	r3, #20488	; 0x5008
 8000f2c:	443b      	add	r3, r7
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4986      	ldr	r1, [pc, #536]	; (800114c <main+0x41c>)
 8000f32:	4885      	ldr	r0, [pc, #532]	; (8001148 <main+0x418>)
 8000f34:	f007 f920 	bl	8008178 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000f38:	4885      	ldr	r0, [pc, #532]	; (8001150 <main+0x420>)
 8000f3a:	f005 fc97 	bl	800686c <UART_CheckIdleState>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d105      	bne.n	8000f50 <main+0x220>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txStringBuffer[0], sizeof(txStringBuffer), 100);
 8000f44:	2364      	movs	r3, #100	; 0x64
 8000f46:	2232      	movs	r2, #50	; 0x32
 8000f48:	497f      	ldr	r1, [pc, #508]	; (8001148 <main+0x418>)
 8000f4a:	4881      	ldr	r0, [pc, #516]	; (8001150 <main+0x420>)
 8000f4c:	f004 fb44 	bl	80055d8 <HAL_UART_Transmit>
	}
	HAL_Delay(2000);
 8000f50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f54:	f000 fe02 	bl	8001b5c <HAL_Delay>
	resetDataBuffer(txDataBuffer);
 8000f58:	487e      	ldr	r0, [pc, #504]	; (8001154 <main+0x424>)
 8000f5a:	f000 fa6d 	bl	8001438 <resetDataBuffer>
	float2byte(txDataBuffer, instAbs, 2*frameSize);
 8000f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	4b77      	ldr	r3, [pc, #476]	; (8001144 <main+0x414>)
 8000f68:	f245 0110 	movw	r1, #20496	; 0x5010
 8000f6c:	4439      	add	r1, r7
 8000f6e:	440b      	add	r3, r1
 8000f70:	4619      	mov	r1, r3
 8000f72:	4878      	ldr	r0, [pc, #480]	; (8001154 <main+0x424>)
 8000f74:	f000 faba 	bl	80014ec <float2byte>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000f78:	4875      	ldr	r0, [pc, #468]	; (8001150 <main+0x420>)
 8000f7a:	f005 fc77 	bl	800686c <UART_CheckIdleState>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d113      	bne.n	8000fac <main+0x27c>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txHead[0], 4, 100);
 8000f84:	2364      	movs	r3, #100	; 0x64
 8000f86:	2204      	movs	r2, #4
 8000f88:	4973      	ldr	r1, [pc, #460]	; (8001158 <main+0x428>)
 8000f8a:	4871      	ldr	r0, [pc, #452]	; (8001150 <main+0x420>)
 8000f8c:	f004 fb24 	bl	80055d8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txDataBuffer[0], 4096, 2000);
 8000f90:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f98:	496e      	ldr	r1, [pc, #440]	; (8001154 <main+0x424>)
 8000f9a:	486d      	ldr	r0, [pc, #436]	; (8001150 <main+0x420>)
 8000f9c:	f004 fb1c 	bl	80055d8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txTail[0], 4, 100);
 8000fa0:	2364      	movs	r3, #100	; 0x64
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	496d      	ldr	r1, [pc, #436]	; (800115c <main+0x42c>)
 8000fa6:	486a      	ldr	r0, [pc, #424]	; (8001150 <main+0x420>)
 8000fa8:	f004 fb16 	bl	80055d8 <HAL_UART_Transmit>
	}
	/*****************************************************************************************************/
	// Instantaneous phase value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000fac:	4b64      	ldr	r3, [pc, #400]	; (8001140 <main+0x410>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24
	inst_phase(&processedData[0], &instPhase[0]);
 8000fb4:	4b6a      	ldr	r3, [pc, #424]	; (8001160 <main+0x430>)
 8000fb6:	f245 0210 	movw	r2, #20496	; 0x5010
 8000fba:	443a      	add	r2, r7
 8000fbc:	4413      	add	r3, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	485e      	ldr	r0, [pc, #376]	; (800113c <main+0x40c>)
 8000fc2:	f7ff fc1d 	bl	8000800 <inst_phase>
	unwrap(&instPhase[0], &unwrappedPhase[0]);
 8000fc6:	4a67      	ldr	r2, [pc, #412]	; (8001164 <main+0x434>)
 8000fc8:	f245 0310 	movw	r3, #20496	; 0x5010
 8000fcc:	443b      	add	r3, r7
 8000fce:	441a      	add	r2, r3
 8000fd0:	4b63      	ldr	r3, [pc, #396]	; (8001160 <main+0x430>)
 8000fd2:	f245 0110 	movw	r1, #20496	; 0x5010
 8000fd6:	4439      	add	r1, r7
 8000fd8:	440b      	add	r3, r1
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fc4d 	bl	800087c <unwrap>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000fe2:	4b57      	ldr	r3, [pc, #348]	; (8001140 <main+0x410>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	f245 0208 	movw	r2, #20488	; 0x5008
 8000fec:	443a      	add	r2, r7
 8000fee:	6013      	str	r3, [r2, #0]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8000ff0:	4855      	ldr	r0, [pc, #340]	; (8001148 <main+0x418>)
 8000ff2:	f000 fa09 	bl	8001408 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst phase counter = %ld\r\n", counter);
 8000ff6:	f245 0308 	movw	r3, #20488	; 0x5008
 8000ffa:	443b      	add	r3, r7
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	495a      	ldr	r1, [pc, #360]	; (8001168 <main+0x438>)
 8001000:	4851      	ldr	r0, [pc, #324]	; (8001148 <main+0x418>)
 8001002:	f007 f8b9 	bl	8008178 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001006:	4852      	ldr	r0, [pc, #328]	; (8001150 <main+0x420>)
 8001008:	f005 fc30 	bl	800686c <UART_CheckIdleState>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d105      	bne.n	800101e <main+0x2ee>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txStringBuffer[0], sizeof(txStringBuffer), 100);
 8001012:	2364      	movs	r3, #100	; 0x64
 8001014:	2232      	movs	r2, #50	; 0x32
 8001016:	494c      	ldr	r1, [pc, #304]	; (8001148 <main+0x418>)
 8001018:	484d      	ldr	r0, [pc, #308]	; (8001150 <main+0x420>)
 800101a:	f004 fadd 	bl	80055d8 <HAL_UART_Transmit>
	}
	resetDataBuffer(txDataBuffer);
 800101e:	484d      	ldr	r0, [pc, #308]	; (8001154 <main+0x424>)
 8001020:	f000 fa0a 	bl	8001438 <resetDataBuffer>
	float2byte(txDataBuffer, unwrappedPhase, 2*frameSize);
 8001024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <main+0x434>)
 800102e:	f245 0110 	movw	r1, #20496	; 0x5010
 8001032:	4439      	add	r1, r7
 8001034:	440b      	add	r3, r1
 8001036:	4619      	mov	r1, r3
 8001038:	4846      	ldr	r0, [pc, #280]	; (8001154 <main+0x424>)
 800103a:	f000 fa57 	bl	80014ec <float2byte>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800103e:	4844      	ldr	r0, [pc, #272]	; (8001150 <main+0x420>)
 8001040:	f005 fc14 	bl	800686c <UART_CheckIdleState>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d107      	bne.n	800105a <main+0x32a>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txDataBuffer[0], 4096, 2000);
 800104a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800104e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001052:	4940      	ldr	r1, [pc, #256]	; (8001154 <main+0x424>)
 8001054:	483e      	ldr	r0, [pc, #248]	; (8001150 <main+0x420>)
 8001056:	f004 fabf 	bl	80055d8 <HAL_UART_Transmit>
	}
	/*****************************************************************************************************/
	// Instantaneous frequency value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800105a:	4b39      	ldr	r3, [pc, #228]	; (8001140 <main+0x410>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	; 0x24
	inst_frequency(&processedData[0], &instFreq[0]);
 8001062:	4b42      	ldr	r3, [pc, #264]	; (800116c <main+0x43c>)
 8001064:	f245 0210 	movw	r2, #20496	; 0x5010
 8001068:	443a      	add	r2, r7
 800106a:	4413      	add	r3, r2
 800106c:	4619      	mov	r1, r3
 800106e:	4833      	ldr	r0, [pc, #204]	; (800113c <main+0x40c>)
 8001070:	f7ff fc9e 	bl	80009b0 <inst_frequency>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001074:	4b32      	ldr	r3, [pc, #200]	; (8001140 <main+0x410>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107a:	f245 0208 	movw	r2, #20488	; 0x5008
 800107e:	443a      	add	r2, r7
 8001080:	6013      	str	r3, [r2, #0]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001082:	4831      	ldr	r0, [pc, #196]	; (8001148 <main+0x418>)
 8001084:	f000 f9c0 	bl	8001408 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst freq counter = %ld\r\n", counter);
 8001088:	f245 0308 	movw	r3, #20488	; 0x5008
 800108c:	443b      	add	r3, r7
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4937      	ldr	r1, [pc, #220]	; (8001170 <main+0x440>)
 8001092:	482d      	ldr	r0, [pc, #180]	; (8001148 <main+0x418>)
 8001094:	f007 f870 	bl	8008178 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001098:	482d      	ldr	r0, [pc, #180]	; (8001150 <main+0x420>)
 800109a:	f005 fbe7 	bl	800686c <UART_CheckIdleState>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d105      	bne.n	80010b0 <main+0x380>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txStringBuffer[0], sizeof(txStringBuffer), 100);
 80010a4:	2364      	movs	r3, #100	; 0x64
 80010a6:	2232      	movs	r2, #50	; 0x32
 80010a8:	4927      	ldr	r1, [pc, #156]	; (8001148 <main+0x418>)
 80010aa:	4829      	ldr	r0, [pc, #164]	; (8001150 <main+0x420>)
 80010ac:	f004 fa94 	bl	80055d8 <HAL_UART_Transmit>
	}
	resetDataBuffer(txDataBuffer);
 80010b0:	4828      	ldr	r0, [pc, #160]	; (8001154 <main+0x424>)
 80010b2:	f000 f9c1 	bl	8001438 <resetDataBuffer>
	float2byte(txDataBuffer, instFreq, 2*frameSize);
 80010b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	b29a      	uxth	r2, r3
 80010be:	4b2b      	ldr	r3, [pc, #172]	; (800116c <main+0x43c>)
 80010c0:	f245 0110 	movw	r1, #20496	; 0x5010
 80010c4:	4439      	add	r1, r7
 80010c6:	440b      	add	r3, r1
 80010c8:	4619      	mov	r1, r3
 80010ca:	4822      	ldr	r0, [pc, #136]	; (8001154 <main+0x424>)
 80010cc:	f000 fa0e 	bl	80014ec <float2byte>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80010d0:	481f      	ldr	r0, [pc, #124]	; (8001150 <main+0x420>)
 80010d2:	f005 fbcb 	bl	800686c <UART_CheckIdleState>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d113      	bne.n	8001104 <main+0x3d4>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txHead[0], 4, 100);
 80010dc:	2364      	movs	r3, #100	; 0x64
 80010de:	2204      	movs	r2, #4
 80010e0:	491d      	ldr	r1, [pc, #116]	; (8001158 <main+0x428>)
 80010e2:	481b      	ldr	r0, [pc, #108]	; (8001150 <main+0x420>)
 80010e4:	f004 fa78 	bl	80055d8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txDataBuffer[0], 4096, 2000);
 80010e8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010f0:	4918      	ldr	r1, [pc, #96]	; (8001154 <main+0x424>)
 80010f2:	4817      	ldr	r0, [pc, #92]	; (8001150 <main+0x420>)
 80010f4:	f004 fa70 	bl	80055d8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txTail[0], 4, 100);
 80010f8:	2364      	movs	r3, #100	; 0x64
 80010fa:	2204      	movs	r2, #4
 80010fc:	4917      	ldr	r1, [pc, #92]	; (800115c <main+0x42c>)
 80010fe:	4814      	ldr	r0, [pc, #80]	; (8001150 <main+0x420>)
 8001100:	f004 fa6a 	bl	80055d8 <HAL_UART_Transmit>
	}
	/*****************************************************************************************************/
	// Instantaneous centered normalized absolute value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <main+0x410>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2200      	movs	r2, #0
 800110a:	625a      	str	r2, [r3, #36]	; 0x24
	inst_centralized_normalized_absolute(&processedData[0], &instCNA[0]);
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <main+0x444>)
 800110e:	f245 0210 	movw	r2, #20496	; 0x5010
 8001112:	443a      	add	r2, r7
 8001114:	4413      	add	r3, r2
 8001116:	4619      	mov	r1, r3
 8001118:	4808      	ldr	r0, [pc, #32]	; (800113c <main+0x40c>)
 800111a:	f7ff fcf5 	bl	8000b08 <inst_centralized_normalized_absolute>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <main+0x410>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	f245 0208 	movw	r2, #20488	; 0x5008
 8001128:	e026      	b.n	8001178 <main+0x448>
 800112a:	bf00      	nop
 800112c:	58020400 	.word	0x58020400
 8001130:	2000623a 	.word	0x2000623a
 8001134:	20000208 	.word	0x20000208
 8001138:	20000205 	.word	0x20000205
 800113c:	20004208 	.word	0x20004208
 8001140:	20006248 	.word	0x20006248
 8001144:	ffffeff8 	.word	0xffffeff8
 8001148:	20006208 	.word	0x20006208
 800114c:	08009b80 	.word	0x08009b80
 8001150:	20006294 	.word	0x20006294
 8001154:	20002208 	.word	0x20002208
 8001158:	08009c30 	.word	0x08009c30
 800115c:	08009c34 	.word	0x08009c34
 8001160:	ffffdff8 	.word	0xffffdff8
 8001164:	ffffaff8 	.word	0xffffaff8
 8001168:	08009b9c 	.word	0x08009b9c
 800116c:	ffffcff8 	.word	0xffffcff8
 8001170:	08009bb8 	.word	0x08009bb8
 8001174:	ffffbff8 	.word	0xffffbff8
 8001178:	443a      	add	r2, r7
 800117a:	6013      	str	r3, [r2, #0]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 800117c:	4838      	ldr	r0, [pc, #224]	; (8001260 <main+0x530>)
 800117e:	f000 f943 	bl	8001408 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst CNA counter = %ld\r\n&", counter);
 8001182:	f245 0308 	movw	r3, #20488	; 0x5008
 8001186:	443b      	add	r3, r7
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4936      	ldr	r1, [pc, #216]	; (8001264 <main+0x534>)
 800118c:	4834      	ldr	r0, [pc, #208]	; (8001260 <main+0x530>)
 800118e:	f006 fff3 	bl	8008178 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001192:	4835      	ldr	r0, [pc, #212]	; (8001268 <main+0x538>)
 8001194:	f005 fb6a 	bl	800686c <UART_CheckIdleState>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d105      	bne.n	80011aa <main+0x47a>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txStringBuffer[0], sizeof(txStringBuffer), 100);
 800119e:	2364      	movs	r3, #100	; 0x64
 80011a0:	2232      	movs	r2, #50	; 0x32
 80011a2:	492f      	ldr	r1, [pc, #188]	; (8001260 <main+0x530>)
 80011a4:	4830      	ldr	r0, [pc, #192]	; (8001268 <main+0x538>)
 80011a6:	f004 fa17 	bl	80055d8 <HAL_UART_Transmit>
	}
	resetDataBuffer(txDataBuffer);
 80011aa:	4830      	ldr	r0, [pc, #192]	; (800126c <main+0x53c>)
 80011ac:	f000 f944 	bl	8001438 <resetDataBuffer>
	float2byte(txDataBuffer, instCNA, 2*frameSize);
 80011b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <main+0x540>)
 80011ba:	f245 0110 	movw	r1, #20496	; 0x5010
 80011be:	4439      	add	r1, r7
 80011c0:	440b      	add	r3, r1
 80011c2:	4619      	mov	r1, r3
 80011c4:	4829      	ldr	r0, [pc, #164]	; (800126c <main+0x53c>)
 80011c6:	f000 f991 	bl	80014ec <float2byte>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80011ca:	4827      	ldr	r0, [pc, #156]	; (8001268 <main+0x538>)
 80011cc:	f005 fb4e 	bl	800686c <UART_CheckIdleState>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d113      	bne.n	80011fe <main+0x4ce>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txHead[0], 4, 100);
 80011d6:	2364      	movs	r3, #100	; 0x64
 80011d8:	2204      	movs	r2, #4
 80011da:	4926      	ldr	r1, [pc, #152]	; (8001274 <main+0x544>)
 80011dc:	4822      	ldr	r0, [pc, #136]	; (8001268 <main+0x538>)
 80011de:	f004 f9fb 	bl	80055d8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txDataBuffer[0], 4096, 2000);
 80011e2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ea:	4920      	ldr	r1, [pc, #128]	; (800126c <main+0x53c>)
 80011ec:	481e      	ldr	r0, [pc, #120]	; (8001268 <main+0x538>)
 80011ee:	f004 f9f3 	bl	80055d8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txTail[0], 4, 100);
 80011f2:	2364      	movs	r3, #100	; 0x64
 80011f4:	2204      	movs	r2, #4
 80011f6:	4920      	ldr	r1, [pc, #128]	; (8001278 <main+0x548>)
 80011f8:	481b      	ldr	r0, [pc, #108]	; (8001268 <main+0x538>)
 80011fa:	f004 f9ed 	bl	80055d8 <HAL_UART_Transmit>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <main+0x54c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	2101      	movs	r1, #1
 800120a:	481d      	ldr	r0, [pc, #116]	; (8001280 <main+0x550>)
 800120c:	f001 f9f0 	bl	80025f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	2102      	movs	r1, #2
 8001214:	481b      	ldr	r0, [pc, #108]	; (8001284 <main+0x554>)
 8001216:	f001 f9eb 	bl	80025f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001220:	4817      	ldr	r0, [pc, #92]	; (8001280 <main+0x550>)
 8001222:	f001 f9e5 	bl	80025f0 <HAL_GPIO_WritePin>
  while (1)
  {
	if(__HAL_TIM_GET_COUNTER(&htim2) >= 240000000){
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <main+0x54c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122c:	4a16      	ldr	r2, [pc, #88]	; (8001288 <main+0x558>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d9f9      	bls.n	8001226 <main+0x4f6>
		if((HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin))){
 8001232:	2102      	movs	r1, #2
 8001234:	4813      	ldr	r0, [pc, #76]	; (8001284 <main+0x554>)
 8001236:	f001 f9c3 	bl	80025c0 <HAL_GPIO_ReadPin>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <main+0x51c>
			HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	2102      	movs	r1, #2
 8001244:	480f      	ldr	r0, [pc, #60]	; (8001284 <main+0x554>)
 8001246:	f001 f9d3 	bl	80025f0 <HAL_GPIO_WritePin>
 800124a:	e004      	b.n	8001256 <main+0x526>
		} else {
			HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 800124c:	2201      	movs	r2, #1
 800124e:	2102      	movs	r1, #2
 8001250:	480c      	ldr	r0, [pc, #48]	; (8001284 <main+0x554>)
 8001252:	f001 f9cd 	bl	80025f0 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <main+0x54c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2200      	movs	r2, #0
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
	if(__HAL_TIM_GET_COUNTER(&htim2) >= 240000000){
 800125e:	e7e2      	b.n	8001226 <main+0x4f6>
 8001260:	20006208 	.word	0x20006208
 8001264:	08009bd4 	.word	0x08009bd4
 8001268:	20006294 	.word	0x20006294
 800126c:	20002208 	.word	0x20002208
 8001270:	ffffbff8 	.word	0xffffbff8
 8001274:	08009c30 	.word	0x08009c30
 8001278:	08009c34 	.word	0x08009c34
 800127c:	20006248 	.word	0x20006248
 8001280:	58020400 	.word	0x58020400
 8001284:	58021000 	.word	0x58021000
 8001288:	0e4e1bff 	.word	0x0e4e1bff

0800128c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b0cc      	sub	sp, #304	; 0x130
 8001290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001292:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001296:	224c      	movs	r2, #76	; 0x4c
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f006 fa70 	bl	8007780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012a4:	2220      	movs	r2, #32
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f006 fa69 	bl	8007780 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4618      	mov	r0, r3
 80012b4:	23bc      	movs	r3, #188	; 0xbc
 80012b6:	461a      	mov	r2, r3
 80012b8:	2100      	movs	r1, #0
 80012ba:	f006 fa61 	bl	8007780 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80012be:	2004      	movs	r0, #4
 80012c0:	f001 fb26 	bl	8002910 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	4b4c      	ldr	r3, [pc, #304]	; (80013fc <SystemClock_Config+0x170>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	4a4b      	ldr	r2, [pc, #300]	; (80013fc <SystemClock_Config+0x170>)
 80012d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012d4:	6193      	str	r3, [r2, #24]
 80012d6:	4b49      	ldr	r3, [pc, #292]	; (80013fc <SystemClock_Config+0x170>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	4b47      	ldr	r3, [pc, #284]	; (8001400 <SystemClock_Config+0x174>)
 80012e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e6:	4a46      	ldr	r2, [pc, #280]	; (8001400 <SystemClock_Config+0x174>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	62d3      	str	r3, [r2, #44]	; 0x2c
 80012ee:	4b44      	ldr	r3, [pc, #272]	; (8001400 <SystemClock_Config+0x174>)
 80012f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f2:	f003 0201 	and.w	r2, r3, #1
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012fe:	bf00      	nop
 8001300:	4b3e      	ldr	r3, [pc, #248]	; (80013fc <SystemClock_Config+0x170>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800130c:	d1f8      	bne.n	8001300 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800130e:	2322      	movs	r3, #34	; 0x22
 8001310:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001314:	2301      	movs	r3, #1
 8001316:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800131a:	2340      	movs	r3, #64	; 0x40
 800131c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001320:	2301      	movs	r3, #1
 8001322:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001326:	2302      	movs	r3, #2
 8001328:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001332:	2304      	movs	r3, #4
 8001334:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001338:	233c      	movs	r3, #60	; 0x3c
 800133a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800133e:	2302      	movs	r3, #2
 8001340:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001344:	2302      	movs	r3, #2
 8001346:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001350:	230c      	movs	r3, #12
 8001352:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001362:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001366:	4618      	mov	r0, r3
 8001368:	f001 fb3c 	bl	80029e4 <HAL_RCC_OscConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001372:	f000 f91b 	bl	80015ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001376:	233f      	movs	r3, #63	; 0x3f
 8001378:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137c:	2303      	movs	r3, #3
 800137e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001388:	2308      	movs	r3, #8
 800138a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800138e:	2340      	movs	r3, #64	; 0x40
 8001390:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001394:	2340      	movs	r3, #64	; 0x40
 8001396:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800139a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800139e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013a2:	2340      	movs	r3, #64	; 0x40
 80013a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013ac:	2104      	movs	r1, #4
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 ff28 	bl	8003204 <HAL_RCC_ClockConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SystemClock_Config+0x132>
  {
    Error_Handler();
 80013ba:	f000 f8f7 	bl	80015ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 80013be:	f107 0308 	add.w	r3, r7, #8
 80013c2:	4a10      	ldr	r2, [pc, #64]	; (8001404 <SystemClock_Config+0x178>)
 80013c4:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	2203      	movs	r2, #3
 80013cc:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80013d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 fa94 	bl	800390c <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0x162>
  {
    Error_Handler();
 80013ea:	f000 f8df 	bl	80015ac <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80013ee:	f001 fae9 	bl	80029c4 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80013f2:	bf00      	nop
 80013f4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	58024800 	.word	0x58024800
 8001400:	58000400 	.word	0x58000400
 8001404:	00040002 	.word	0x00040002

08001408 <reset_buffer>:

/* USER CODE BEGIN 4 */
void reset_buffer(char *stringBuffer){
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 1; i < 50; i++){
 8001410:	2301      	movs	r3, #1
 8001412:	81fb      	strh	r3, [r7, #14]
 8001414:	e007      	b.n	8001426 <reset_buffer+0x1e>
		stringBuffer[i] = '\0';
 8001416:	89fb      	ldrh	r3, [r7, #14]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 1; i < 50; i++){
 8001420:	89fb      	ldrh	r3, [r7, #14]
 8001422:	3301      	adds	r3, #1
 8001424:	81fb      	strh	r3, [r7, #14]
 8001426:	89fb      	ldrh	r3, [r7, #14]
 8001428:	2b31      	cmp	r3, #49	; 0x31
 800142a:	d9f4      	bls.n	8001416 <reset_buffer+0xe>
	}
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <resetDataBuffer>:
void resetDataBuffer(uint8_t *dataBuffer){
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 1; i < 8192; i++){
 8001440:	2301      	movs	r3, #1
 8001442:	81fb      	strh	r3, [r7, #14]
 8001444:	e007      	b.n	8001456 <resetDataBuffer+0x1e>
		dataBuffer[i] = 0;
 8001446:	89fb      	ldrh	r3, [r7, #14]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 1; i < 8192; i++){
 8001450:	89fb      	ldrh	r3, [r7, #14]
 8001452:	3301      	adds	r3, #1
 8001454:	81fb      	strh	r3, [r7, #14]
 8001456:	89fb      	ldrh	r3, [r7, #14]
 8001458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800145c:	d3f3      	bcc.n	8001446 <resetDataBuffer+0xe>
	}
}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <byte2float>:
void byte2float(uint8_t *rxDataBuffer, float32_t *processedData, uint16_t arraySize){
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	4613      	mov	r3, r2
 8001478:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800147a:	2201      	movs	r2, #1
 800147c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001480:	4817      	ldr	r0, [pc, #92]	; (80014e0 <byte2float+0x74>)
 8001482:	f001 f8b5 	bl	80025f0 <HAL_GPIO_WritePin>
	for(int i = 0; i < arraySize*4; i = i + 4){
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	e00f      	b.n	80014ac <byte2float+0x40>
		memcpy(&processedData[i / 4], &rxDataBuffer[i], 4);
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	2b00      	cmp	r3, #0
 8001490:	da00      	bge.n	8001494 <byte2float+0x28>
 8001492:	3303      	adds	r3, #3
 8001494:	109b      	asrs	r3, r3, #2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	4413      	add	r3, r2
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	68f9      	ldr	r1, [r7, #12]
 80014a0:	440a      	add	r2, r1
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < arraySize*4; i = i + 4){
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3304      	adds	r3, #4
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	dbea      	blt.n	800148c <byte2float+0x20>
	}
	processed = 1;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <byte2float+0x78>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
	received = 1;
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <byte2float+0x7c>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
	// memcpy(&processedBuffer[0], &receiveBuffer[0], 4);
	HAL_Delay(500);
 80014c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014c6:	f000 fb49 	bl	8001b5c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <byte2float+0x74>)
 80014d2:	f001 f88d 	bl	80025f0 <HAL_GPIO_WritePin>
}
 80014d6:	bf00      	nop
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	58020400 	.word	0x58020400
 80014e4:	20000205 	.word	0x20000205
 80014e8:	20000204 	.word	0x20000204

080014ec <float2byte>:
void float2byte(uint8_t *txDataBuffer, float *processedData, uint16_t arraySize){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	4613      	mov	r3, r2
 80014f8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001500:	4817      	ldr	r0, [pc, #92]	; (8001560 <float2byte+0x74>)
 8001502:	f001 f875 	bl	80025f0 <HAL_GPIO_WritePin>
	for(int i = 0; i < arraySize*4; i = i + 4){
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	e00f      	b.n	800152c <float2byte+0x40>
		memcpy(&txDataBuffer[i], &processedData[i / 4], 4);
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	441a      	add	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2b00      	cmp	r3, #0
 8001516:	da00      	bge.n	800151a <float2byte+0x2e>
 8001518:	3303      	adds	r3, #3
 800151a:	109b      	asrs	r3, r3, #2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	68b9      	ldr	r1, [r7, #8]
 8001520:	440b      	add	r3, r1
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < arraySize*4; i = i + 4){
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3304      	adds	r3, #4
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	429a      	cmp	r2, r3
 8001534:	dbea      	blt.n	800150c <float2byte+0x20>
	}
	processed = 1;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <float2byte+0x78>)
 8001538:	2201      	movs	r2, #1
 800153a:	701a      	strb	r2, [r3, #0]
	received = 1;
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <float2byte+0x7c>)
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]
	// memcpy(&processedBuffer[0], &receiveBuffer[0], 4);
	HAL_Delay(500);
 8001542:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001546:	f000 fb09 	bl	8001b5c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <float2byte+0x74>)
 8001552:	f001 f84d 	bl	80025f0 <HAL_GPIO_WritePin>
}
 8001556:	bf00      	nop
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	58020400 	.word	0x58020400
 8001564:	20000205 	.word	0x20000205
 8001568:	20000204 	.word	0x20000204

0800156c <HAL_UART_TxCpltCallback>:
	}
	received = 0;
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart3)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <HAL_UART_TxCpltCallback+0x1c>)
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	2000623a 	.word	0x2000623a

0800158c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart3){
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <HAL_UART_RxCpltCallback+0x1c>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	2000623a 	.word	0x2000623a

080015ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_MspInit+0x30>)
 80015c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015c8:	4a08      	ldr	r2, [pc, #32]	; (80015ec <HAL_MspInit+0x30>)
 80015ca:	f043 0302 	orr.w	r3, r3, #2
 80015ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_MspInit+0x30>)
 80015d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	58024400 	.word	0x58024400

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler+0x4>

08001604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <MemManage_Handler+0x4>

0800160a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <BusFault_Handler+0x4>

08001610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <UsageFault_Handler+0x4>

08001616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001644:	f000 fa6a 	bl	8001b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}

0800164c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <USART3_IRQHandler+0x10>)
 8001652:	f004 f92f 	bl	80058b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20006294 	.word	0x20006294

08001660 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <_sbrk+0x50>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <_sbrk+0x16>
		heap_end = &end;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <_sbrk+0x50>)
 8001672:	4a10      	ldr	r2, [pc, #64]	; (80016b4 <_sbrk+0x54>)
 8001674:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <_sbrk+0x50>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <_sbrk+0x50>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4413      	add	r3, r2
 8001684:	466a      	mov	r2, sp
 8001686:	4293      	cmp	r3, r2
 8001688:	d907      	bls.n	800169a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800168a:	f006 f83f 	bl	800770c <__errno>
 800168e:	4602      	mov	r2, r0
 8001690:	230c      	movs	r3, #12
 8001692:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
 8001698:	e006      	b.n	80016a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <_sbrk+0x50>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a03      	ldr	r2, [pc, #12]	; (80016b0 <_sbrk+0x50>)
 80016a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000623c 	.word	0x2000623c
 80016b4:	20006730 	.word	0x20006730

080016b8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016be:	f107 0310 	add.w	r3, r7, #16
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_TIM2_Init+0x98>)
 80016d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016de:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <MX_TIM2_Init+0x98>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e4:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <MX_TIM2_Init+0x98>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <MX_TIM2_Init+0x98>)
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295
 80016f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MX_TIM2_Init+0x98>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f8:	4b15      	ldr	r3, [pc, #84]	; (8001750 <MX_TIM2_Init+0x98>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016fe:	4814      	ldr	r0, [pc, #80]	; (8001750 <MX_TIM2_Init+0x98>)
 8001700:	f003 fc04 	bl	8004f0c <HAL_TIM_Base_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800170a:	f7ff ff4f 	bl	80015ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800170e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001712:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4619      	mov	r1, r3
 800171a:	480d      	ldr	r0, [pc, #52]	; (8001750 <MX_TIM2_Init+0x98>)
 800171c:	f003 fc7c 	bl	8005018 <HAL_TIM_ConfigClockSource>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001726:	f7ff ff41 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	4619      	mov	r1, r3
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <MX_TIM2_Init+0x98>)
 8001738:	f003 fe76 	bl	8005428 <HAL_TIMEx_MasterConfigSynchronization>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001742:	f7ff ff33 	bl	80015ac <Error_Handler>
  }

}
 8001746:	bf00      	nop
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20006248 	.word	0x20006248

08001754 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001764:	d10e      	bne.n	8001784 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_TIM_Base_MspInit+0x3c>)
 8001768:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800176c:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_TIM_Base_MspInit+0x3c>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_TIM_Base_MspInit+0x3c>)
 8001778:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	58024400 	.word	0x58024400

08001794 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <MX_USART3_UART_Init+0x90>)
 800179a:	4a23      	ldr	r2, [pc, #140]	; (8001828 <MX_USART3_UART_Init+0x94>)
 800179c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800179e:	4b21      	ldr	r3, [pc, #132]	; (8001824 <MX_USART3_UART_Init+0x90>)
 80017a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <MX_USART3_UART_Init+0x90>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <MX_USART3_UART_Init+0x90>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <MX_USART3_UART_Init+0x90>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MX_USART3_UART_Init+0x90>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <MX_USART3_UART_Init+0x90>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b17      	ldr	r3, [pc, #92]	; (8001824 <MX_USART3_UART_Init+0x90>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <MX_USART3_UART_Init+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <MX_USART3_UART_Init+0x90>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <MX_USART3_UART_Init+0x90>)
 80017d8:	2200      	movs	r2, #0
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017dc:	4811      	ldr	r0, [pc, #68]	; (8001824 <MX_USART3_UART_Init+0x90>)
 80017de:	f003 feab 	bl	8005538 <HAL_UART_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80017e8:	f7ff fee0 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ec:	2100      	movs	r1, #0
 80017ee:	480d      	ldr	r0, [pc, #52]	; (8001824 <MX_USART3_UART_Init+0x90>)
 80017f0:	f005 fb61 	bl	8006eb6 <HAL_UARTEx_SetTxFifoThreshold>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80017fa:	f7ff fed7 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017fe:	2100      	movs	r1, #0
 8001800:	4808      	ldr	r0, [pc, #32]	; (8001824 <MX_USART3_UART_Init+0x90>)
 8001802:	f005 fb96 	bl	8006f32 <HAL_UARTEx_SetRxFifoThreshold>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800180c:	f7ff fece 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001810:	4804      	ldr	r0, [pc, #16]	; (8001824 <MX_USART3_UART_Init+0x90>)
 8001812:	f005 fb17 	bl	8006e44 <HAL_UARTEx_DisableFifoMode>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800181c:	f7ff fec6 	bl	80015ac <Error_Handler>
  }

}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20006294 	.word	0x20006294
 8001828:	40004800 	.word	0x40004800

0800182c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a1e      	ldr	r2, [pc, #120]	; (80018c4 <HAL_UART_MspInit+0x98>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d136      	bne.n	80018bc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <HAL_UART_MspInit+0x9c>)
 8001850:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001854:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <HAL_UART_MspInit+0x9c>)
 8001856:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800185a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <HAL_UART_MspInit+0x9c>)
 8001860:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800186c:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <HAL_UART_MspInit+0x9c>)
 800186e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001872:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <HAL_UART_MspInit+0x9c>)
 8001874:	f043 0308 	orr.w	r3, r3, #8
 8001878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_UART_MspInit+0x9c>)
 800187e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800188a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800188e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800189c:	2307      	movs	r3, #7
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4809      	ldr	r0, [pc, #36]	; (80018cc <HAL_UART_MspInit+0xa0>)
 80018a8:	f000 fcda 	bl	8002260 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2100      	movs	r1, #0
 80018b0:	2027      	movs	r0, #39	; 0x27
 80018b2:	f000 fa5c 	bl	8001d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018b6:	2027      	movs	r0, #39	; 0x27
 80018b8:	f000 fa73 	bl	8001da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	; 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40004800 	.word	0x40004800
 80018c8:	58024400 	.word	0x58024400
 80018cc:	58020c00 	.word	0x58020c00

080018d0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018d6:	4a16      	ldr	r2, [pc, #88]	; (8001930 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80018d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018dc:	2209      	movs	r2, #9
 80018de:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018e2:	2202      	movs	r2, #2
 80018e4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018ee:	2202      	movs	r2, #2
 80018f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001900:	2200      	movs	r2, #0
 8001902:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001906:	2201      	movs	r2, #1
 8001908:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800190c:	2201      	movs	r2, #1
 800190e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001912:	2200      	movs	r2, #0
 8001914:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001918:	f000 feb2 	bl	8002680 <HAL_PCD_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001922:	f7ff fe43 	bl	80015ac <Error_Handler>
  }

}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20006320 	.word	0x20006320
 8001930:	40080000 	.word	0x40080000

08001934 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a21      	ldr	r2, [pc, #132]	; (80019d8 <HAL_PCD_MspInit+0xa4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d13b      	bne.n	80019ce <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	4b21      	ldr	r3, [pc, #132]	; (80019dc <HAL_PCD_MspInit+0xa8>)
 8001958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195c:	4a1f      	ldr	r2, [pc, #124]	; (80019dc <HAL_PCD_MspInit+0xa8>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001966:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <HAL_PCD_MspInit+0xa8>)
 8001968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001974:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001986:	230a      	movs	r3, #10
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4813      	ldr	r0, [pc, #76]	; (80019e0 <HAL_PCD_MspInit+0xac>)
 8001992:	f000 fc65 	bl	8002260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800199a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199c:	2300      	movs	r3, #0
 800199e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4619      	mov	r1, r3
 80019aa:	480d      	ldr	r0, [pc, #52]	; (80019e0 <HAL_PCD_MspInit+0xac>)
 80019ac:	f000 fc58 	bl	8002260 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_PCD_MspInit+0xa8>)
 80019b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019b6:	4a09      	ldr	r2, [pc, #36]	; (80019dc <HAL_PCD_MspInit+0xa8>)
 80019b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_PCD_MspInit+0xa8>)
 80019c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40080000 	.word	0x40080000
 80019dc:	58024400 	.word	0x58024400
 80019e0:	58020000 	.word	0x58020000

080019e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019ea:	e003      	b.n	80019f4 <LoopCopyDataInit>

080019ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019f2:	3104      	adds	r1, #4

080019f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019f4:	480b      	ldr	r0, [pc, #44]	; (8001a24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019fc:	d3f6      	bcc.n	80019ec <CopyDataInit>
  ldr  r2, =_sbss
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a00:	e002      	b.n	8001a08 <LoopFillZerobss>

08001a02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a04:	f842 3b04 	str.w	r3, [r2], #4

08001a08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a0c:	d3f9      	bcc.n	8001a02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a0e:	f7fe fe3f 	bl	8000690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a12:	f005 fe81 	bl	8007718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a16:	f7ff f98b 	bl	8000d30 <main>
  bx  lr    
 8001a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a1c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a20:	08009f08 	.word	0x08009f08
  ldr  r0, =_sdata
 8001a24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a28:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8001a2c:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8001a30:	20006730 	.word	0x20006730

08001a34 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC3_IRQHandler>
	...

08001a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a3e:	2003      	movs	r0, #3
 8001a40:	f000 f98a 	bl	8001d58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a44:	f001 fd94 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 8001a48:	4601      	mov	r1, r0
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_Init+0x68>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	0a1b      	lsrs	r3, r3, #8
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	4a13      	ldr	r2, [pc, #76]	; (8001aa4 <HAL_Init+0x6c>)
 8001a56:	5cd3      	ldrb	r3, [r2, r3]
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	fa21 f303 	lsr.w	r3, r1, r3
 8001a60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_Init+0x68>)
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <HAL_Init+0x6c>)
 8001a6c:	5cd3      	ldrb	r3, [r2, r3]
 8001a6e:	f003 031f 	and.w	r3, r3, #31
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	fa22 f303 	lsr.w	r3, r2, r3
 8001a78:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <HAL_Init+0x70>)
 8001a7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a7c:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <HAL_Init+0x74>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a82:	2000      	movs	r0, #0
 8001a84:	f000 f814 	bl	8001ab0 <HAL_InitTick>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e002      	b.n	8001a98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a92:	f7ff fd93 	bl	80015bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	58024400 	.word	0x58024400
 8001aa4:	08009c1c 	.word	0x08009c1c
 8001aa8:	20000004 	.word	0x20000004
 8001aac:	20000000 	.word	0x20000000

08001ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ab8:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <HAL_InitTick+0x60>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e021      	b.n	8001b08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <HAL_InitTick+0x64>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <HAL_InitTick+0x60>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	4619      	mov	r1, r3
 8001ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f96f 	bl	8001dbe <HAL_SYSTICK_Config>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e00e      	b.n	8001b08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b0f      	cmp	r3, #15
 8001aee:	d80a      	bhi.n	8001b06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af0:	2200      	movs	r2, #0
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	f04f 30ff 	mov.w	r0, #4294967295
 8001af8:	f000 f939 	bl	8001d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001afc:	4a06      	ldr	r2, [pc, #24]	; (8001b18 <HAL_InitTick+0x68>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	e000      	b.n	8001b08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000010 	.word	0x20000010
 8001b14:	20000000 	.word	0x20000000
 8001b18:	2000000c 	.word	0x2000000c

08001b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x20>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_IncTick+0x24>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <HAL_IncTick+0x24>)
 8001b2e:	6013      	str	r3, [r2, #0]
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000010 	.word	0x20000010
 8001b40:	20006728 	.word	0x20006728

08001b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return uwTick;
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <HAL_GetTick+0x14>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20006728 	.word	0x20006728

08001b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b64:	f7ff ffee 	bl	8001b44 <HAL_GetTick>
 8001b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b74:	d005      	beq.n	8001b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_Delay+0x40>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4413      	add	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b82:	bf00      	nop
 8001b84:	f7ff ffde 	bl	8001b44 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d8f7      	bhi.n	8001b84 <HAL_Delay+0x28>
  {
  }
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000010 	.word	0x20000010

08001ba0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <HAL_GetREVID+0x14>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	0c1b      	lsrs	r3, r3, #16
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	5c001000 	.word	0x5c001000

08001bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be6:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	60d3      	str	r3, [r2, #12]
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00
 8001bfc:	05fa0000 	.word	0x05fa0000

08001c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <__NVIC_GetPriorityGrouping+0x18>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	0a1b      	lsrs	r3, r3, #8
 8001c0a:	f003 0307 	and.w	r3, r3, #7
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	db0b      	blt.n	8001c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	f003 021f 	and.w	r2, r3, #31
 8001c34:	4907      	ldr	r1, [pc, #28]	; (8001c54 <__NVIC_EnableIRQ+0x38>)
 8001c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000e100 	.word	0xe000e100

08001c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	db0a      	blt.n	8001c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	490c      	ldr	r1, [pc, #48]	; (8001ca4 <__NVIC_SetPriority+0x4c>)
 8001c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c76:	0112      	lsls	r2, r2, #4
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c80:	e00a      	b.n	8001c98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4908      	ldr	r1, [pc, #32]	; (8001ca8 <__NVIC_SetPriority+0x50>)
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	3b04      	subs	r3, #4
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	440b      	add	r3, r1
 8001c96:	761a      	strb	r2, [r3, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000e100 	.word	0xe000e100
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f1c3 0307 	rsb	r3, r3, #7
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	bf28      	it	cs
 8001cca:	2304      	movcs	r3, #4
 8001ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d902      	bls.n	8001cdc <NVIC_EncodePriority+0x30>
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3b03      	subs	r3, #3
 8001cda:	e000      	b.n	8001cde <NVIC_EncodePriority+0x32>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	401a      	ands	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	43d9      	mvns	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	4313      	orrs	r3, r2
         );
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3724      	adds	r7, #36	; 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d24:	d301      	bcc.n	8001d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00f      	b.n	8001d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <SysTick_Config+0x40>)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d32:	210f      	movs	r1, #15
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295
 8001d38:	f7ff ff8e 	bl	8001c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <SysTick_Config+0x40>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d42:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <SysTick_Config+0x40>)
 8001d44:	2207      	movs	r2, #7
 8001d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	e000e010 	.word	0xe000e010

08001d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ff29 	bl	8001bb8 <__NVIC_SetPriorityGrouping>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d7c:	f7ff ff40 	bl	8001c00 <__NVIC_GetPriorityGrouping>
 8001d80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6978      	ldr	r0, [r7, #20]
 8001d88:	f7ff ff90 	bl	8001cac <NVIC_EncodePriority>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff5f 	bl	8001c58 <__NVIC_SetPriority>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff33 	bl	8001c1c <__NVIC_EnableIRQ>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffa4 	bl	8001d14 <SysTick_Config>
 8001dcc:	4603      	mov	r3, r0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e205      	b.n	80021f6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d004      	beq.n	8001e00 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e1fa      	b.n	80021f6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a8c      	ldr	r2, [pc, #560]	; (8002038 <HAL_DMA_Abort_IT+0x260>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d04a      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0xc8>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a8b      	ldr	r2, [pc, #556]	; (800203c <HAL_DMA_Abort_IT+0x264>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d045      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0xc8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a89      	ldr	r2, [pc, #548]	; (8002040 <HAL_DMA_Abort_IT+0x268>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d040      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0xc8>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a88      	ldr	r2, [pc, #544]	; (8002044 <HAL_DMA_Abort_IT+0x26c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d03b      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0xc8>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a86      	ldr	r2, [pc, #536]	; (8002048 <HAL_DMA_Abort_IT+0x270>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d036      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0xc8>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a85      	ldr	r2, [pc, #532]	; (800204c <HAL_DMA_Abort_IT+0x274>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d031      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0xc8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a83      	ldr	r2, [pc, #524]	; (8002050 <HAL_DMA_Abort_IT+0x278>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d02c      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0xc8>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a82      	ldr	r2, [pc, #520]	; (8002054 <HAL_DMA_Abort_IT+0x27c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d027      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0xc8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a80      	ldr	r2, [pc, #512]	; (8002058 <HAL_DMA_Abort_IT+0x280>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d022      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0xc8>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a7f      	ldr	r2, [pc, #508]	; (800205c <HAL_DMA_Abort_IT+0x284>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d01d      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0xc8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a7d      	ldr	r2, [pc, #500]	; (8002060 <HAL_DMA_Abort_IT+0x288>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d018      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0xc8>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a7c      	ldr	r2, [pc, #496]	; (8002064 <HAL_DMA_Abort_IT+0x28c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d013      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0xc8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a7a      	ldr	r2, [pc, #488]	; (8002068 <HAL_DMA_Abort_IT+0x290>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00e      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0xc8>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a79      	ldr	r2, [pc, #484]	; (800206c <HAL_DMA_Abort_IT+0x294>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d009      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0xc8>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a77      	ldr	r2, [pc, #476]	; (8002070 <HAL_DMA_Abort_IT+0x298>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d004      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0xc8>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a76      	ldr	r2, [pc, #472]	; (8002074 <HAL_DMA_Abort_IT+0x29c>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d101      	bne.n	8001ea4 <HAL_DMA_Abort_IT+0xcc>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_DMA_Abort_IT+0xce>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d065      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2204      	movs	r2, #4
 8001eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a60      	ldr	r2, [pc, #384]	; (8002038 <HAL_DMA_Abort_IT+0x260>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d04a      	beq.n	8001f52 <HAL_DMA_Abort_IT+0x17a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a5e      	ldr	r2, [pc, #376]	; (800203c <HAL_DMA_Abort_IT+0x264>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d045      	beq.n	8001f52 <HAL_DMA_Abort_IT+0x17a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a5d      	ldr	r2, [pc, #372]	; (8002040 <HAL_DMA_Abort_IT+0x268>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d040      	beq.n	8001f52 <HAL_DMA_Abort_IT+0x17a>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a5b      	ldr	r2, [pc, #364]	; (8002044 <HAL_DMA_Abort_IT+0x26c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d03b      	beq.n	8001f52 <HAL_DMA_Abort_IT+0x17a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a5a      	ldr	r2, [pc, #360]	; (8002048 <HAL_DMA_Abort_IT+0x270>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d036      	beq.n	8001f52 <HAL_DMA_Abort_IT+0x17a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a58      	ldr	r2, [pc, #352]	; (800204c <HAL_DMA_Abort_IT+0x274>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d031      	beq.n	8001f52 <HAL_DMA_Abort_IT+0x17a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a57      	ldr	r2, [pc, #348]	; (8002050 <HAL_DMA_Abort_IT+0x278>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d02c      	beq.n	8001f52 <HAL_DMA_Abort_IT+0x17a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a55      	ldr	r2, [pc, #340]	; (8002054 <HAL_DMA_Abort_IT+0x27c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d027      	beq.n	8001f52 <HAL_DMA_Abort_IT+0x17a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a54      	ldr	r2, [pc, #336]	; (8002058 <HAL_DMA_Abort_IT+0x280>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d022      	beq.n	8001f52 <HAL_DMA_Abort_IT+0x17a>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a52      	ldr	r2, [pc, #328]	; (800205c <HAL_DMA_Abort_IT+0x284>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01d      	beq.n	8001f52 <HAL_DMA_Abort_IT+0x17a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a51      	ldr	r2, [pc, #324]	; (8002060 <HAL_DMA_Abort_IT+0x288>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d018      	beq.n	8001f52 <HAL_DMA_Abort_IT+0x17a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a4f      	ldr	r2, [pc, #316]	; (8002064 <HAL_DMA_Abort_IT+0x28c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <HAL_DMA_Abort_IT+0x17a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a4e      	ldr	r2, [pc, #312]	; (8002068 <HAL_DMA_Abort_IT+0x290>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00e      	beq.n	8001f52 <HAL_DMA_Abort_IT+0x17a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a4c      	ldr	r2, [pc, #304]	; (800206c <HAL_DMA_Abort_IT+0x294>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d009      	beq.n	8001f52 <HAL_DMA_Abort_IT+0x17a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a4b      	ldr	r2, [pc, #300]	; (8002070 <HAL_DMA_Abort_IT+0x298>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d004      	beq.n	8001f52 <HAL_DMA_Abort_IT+0x17a>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a49      	ldr	r2, [pc, #292]	; (8002074 <HAL_DMA_Abort_IT+0x29c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d108      	bne.n	8001f64 <HAL_DMA_Abort_IT+0x18c>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0201 	bic.w	r2, r2, #1
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e147      	b.n	80021f4 <HAL_DMA_Abort_IT+0x41c>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0201 	bic.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	e13e      	b.n	80021f4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 020e 	bic.w	r2, r2, #14
 8001f84:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a2b      	ldr	r2, [pc, #172]	; (8002038 <HAL_DMA_Abort_IT+0x260>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d04a      	beq.n	8002026 <HAL_DMA_Abort_IT+0x24e>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a29      	ldr	r2, [pc, #164]	; (800203c <HAL_DMA_Abort_IT+0x264>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d045      	beq.n	8002026 <HAL_DMA_Abort_IT+0x24e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a28      	ldr	r2, [pc, #160]	; (8002040 <HAL_DMA_Abort_IT+0x268>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d040      	beq.n	8002026 <HAL_DMA_Abort_IT+0x24e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a26      	ldr	r2, [pc, #152]	; (8002044 <HAL_DMA_Abort_IT+0x26c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d03b      	beq.n	8002026 <HAL_DMA_Abort_IT+0x24e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a25      	ldr	r2, [pc, #148]	; (8002048 <HAL_DMA_Abort_IT+0x270>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d036      	beq.n	8002026 <HAL_DMA_Abort_IT+0x24e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a23      	ldr	r2, [pc, #140]	; (800204c <HAL_DMA_Abort_IT+0x274>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d031      	beq.n	8002026 <HAL_DMA_Abort_IT+0x24e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a22      	ldr	r2, [pc, #136]	; (8002050 <HAL_DMA_Abort_IT+0x278>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d02c      	beq.n	8002026 <HAL_DMA_Abort_IT+0x24e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a20      	ldr	r2, [pc, #128]	; (8002054 <HAL_DMA_Abort_IT+0x27c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d027      	beq.n	8002026 <HAL_DMA_Abort_IT+0x24e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1f      	ldr	r2, [pc, #124]	; (8002058 <HAL_DMA_Abort_IT+0x280>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d022      	beq.n	8002026 <HAL_DMA_Abort_IT+0x24e>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1d      	ldr	r2, [pc, #116]	; (800205c <HAL_DMA_Abort_IT+0x284>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01d      	beq.n	8002026 <HAL_DMA_Abort_IT+0x24e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1c      	ldr	r2, [pc, #112]	; (8002060 <HAL_DMA_Abort_IT+0x288>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d018      	beq.n	8002026 <HAL_DMA_Abort_IT+0x24e>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1a      	ldr	r2, [pc, #104]	; (8002064 <HAL_DMA_Abort_IT+0x28c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_DMA_Abort_IT+0x24e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a19      	ldr	r2, [pc, #100]	; (8002068 <HAL_DMA_Abort_IT+0x290>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00e      	beq.n	8002026 <HAL_DMA_Abort_IT+0x24e>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a17      	ldr	r2, [pc, #92]	; (800206c <HAL_DMA_Abort_IT+0x294>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d009      	beq.n	8002026 <HAL_DMA_Abort_IT+0x24e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a16      	ldr	r2, [pc, #88]	; (8002070 <HAL_DMA_Abort_IT+0x298>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d004      	beq.n	8002026 <HAL_DMA_Abort_IT+0x24e>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a14      	ldr	r2, [pc, #80]	; (8002074 <HAL_DMA_Abort_IT+0x29c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d128      	bne.n	8002078 <HAL_DMA_Abort_IT+0x2a0>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0201 	bic.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	e027      	b.n	8002088 <HAL_DMA_Abort_IT+0x2b0>
 8002038:	40020010 	.word	0x40020010
 800203c:	40020028 	.word	0x40020028
 8002040:	40020040 	.word	0x40020040
 8002044:	40020058 	.word	0x40020058
 8002048:	40020070 	.word	0x40020070
 800204c:	40020088 	.word	0x40020088
 8002050:	400200a0 	.word	0x400200a0
 8002054:	400200b8 	.word	0x400200b8
 8002058:	40020410 	.word	0x40020410
 800205c:	40020428 	.word	0x40020428
 8002060:	40020440 	.word	0x40020440
 8002064:	40020458 	.word	0x40020458
 8002068:	40020470 	.word	0x40020470
 800206c:	40020488 	.word	0x40020488
 8002070:	400204a0 	.word	0x400204a0
 8002074:	400204b8 	.word	0x400204b8
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0201 	bic.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a5c      	ldr	r2, [pc, #368]	; (8002200 <HAL_DMA_Abort_IT+0x428>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d072      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a5b      	ldr	r2, [pc, #364]	; (8002204 <HAL_DMA_Abort_IT+0x42c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d06d      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a59      	ldr	r2, [pc, #356]	; (8002208 <HAL_DMA_Abort_IT+0x430>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d068      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a58      	ldr	r2, [pc, #352]	; (800220c <HAL_DMA_Abort_IT+0x434>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d063      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a56      	ldr	r2, [pc, #344]	; (8002210 <HAL_DMA_Abort_IT+0x438>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d05e      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a55      	ldr	r2, [pc, #340]	; (8002214 <HAL_DMA_Abort_IT+0x43c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d059      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a53      	ldr	r2, [pc, #332]	; (8002218 <HAL_DMA_Abort_IT+0x440>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d054      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a52      	ldr	r2, [pc, #328]	; (800221c <HAL_DMA_Abort_IT+0x444>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d04f      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a50      	ldr	r2, [pc, #320]	; (8002220 <HAL_DMA_Abort_IT+0x448>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d04a      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a4f      	ldr	r2, [pc, #316]	; (8002224 <HAL_DMA_Abort_IT+0x44c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d045      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a4d      	ldr	r2, [pc, #308]	; (8002228 <HAL_DMA_Abort_IT+0x450>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d040      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a4c      	ldr	r2, [pc, #304]	; (800222c <HAL_DMA_Abort_IT+0x454>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d03b      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a4a      	ldr	r2, [pc, #296]	; (8002230 <HAL_DMA_Abort_IT+0x458>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d036      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a49      	ldr	r2, [pc, #292]	; (8002234 <HAL_DMA_Abort_IT+0x45c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d031      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a47      	ldr	r2, [pc, #284]	; (8002238 <HAL_DMA_Abort_IT+0x460>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d02c      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a46      	ldr	r2, [pc, #280]	; (800223c <HAL_DMA_Abort_IT+0x464>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d027      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a44      	ldr	r2, [pc, #272]	; (8002240 <HAL_DMA_Abort_IT+0x468>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d022      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a43      	ldr	r2, [pc, #268]	; (8002244 <HAL_DMA_Abort_IT+0x46c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d01d      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a41      	ldr	r2, [pc, #260]	; (8002248 <HAL_DMA_Abort_IT+0x470>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d018      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a40      	ldr	r2, [pc, #256]	; (800224c <HAL_DMA_Abort_IT+0x474>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d013      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a3e      	ldr	r2, [pc, #248]	; (8002250 <HAL_DMA_Abort_IT+0x478>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00e      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a3d      	ldr	r2, [pc, #244]	; (8002254 <HAL_DMA_Abort_IT+0x47c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d009      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a3b      	ldr	r2, [pc, #236]	; (8002258 <HAL_DMA_Abort_IT+0x480>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d004      	beq.n	8002178 <HAL_DMA_Abort_IT+0x3a0>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a3a      	ldr	r2, [pc, #232]	; (800225c <HAL_DMA_Abort_IT+0x484>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d101      	bne.n	800217c <HAL_DMA_Abort_IT+0x3a4>
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <HAL_DMA_Abort_IT+0x3a6>
 800217c:	2300      	movs	r3, #0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d028      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002190:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	2201      	movs	r2, #1
 80021a2:	409a      	lsls	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80021b0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00c      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021c8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021d2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40020010 	.word	0x40020010
 8002204:	40020028 	.word	0x40020028
 8002208:	40020040 	.word	0x40020040
 800220c:	40020058 	.word	0x40020058
 8002210:	40020070 	.word	0x40020070
 8002214:	40020088 	.word	0x40020088
 8002218:	400200a0 	.word	0x400200a0
 800221c:	400200b8 	.word	0x400200b8
 8002220:	40020410 	.word	0x40020410
 8002224:	40020428 	.word	0x40020428
 8002228:	40020440 	.word	0x40020440
 800222c:	40020458 	.word	0x40020458
 8002230:	40020470 	.word	0x40020470
 8002234:	40020488 	.word	0x40020488
 8002238:	400204a0 	.word	0x400204a0
 800223c:	400204b8 	.word	0x400204b8
 8002240:	58025408 	.word	0x58025408
 8002244:	5802541c 	.word	0x5802541c
 8002248:	58025430 	.word	0x58025430
 800224c:	58025444 	.word	0x58025444
 8002250:	58025458 	.word	0x58025458
 8002254:	5802546c 	.word	0x5802546c
 8002258:	58025480 	.word	0x58025480
 800225c:	58025494 	.word	0x58025494

08002260 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800226e:	4b89      	ldr	r3, [pc, #548]	; (8002494 <HAL_GPIO_Init+0x234>)
 8002270:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002272:	e194      	b.n	800259e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	2101      	movs	r1, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa01 f303 	lsl.w	r3, r1, r3
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 8186 	beq.w	8002598 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d00b      	beq.n	80022ac <HAL_GPIO_Init+0x4c>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d007      	beq.n	80022ac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022a0:	2b11      	cmp	r3, #17
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b12      	cmp	r3, #18
 80022aa:	d130      	bne.n	800230e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022e2:	2201      	movs	r2, #1
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	f003 0201 	and.w	r2, r3, #1
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	2203      	movs	r2, #3
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0xee>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b12      	cmp	r3, #18
 800234c:	d123      	bne.n	8002396 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	08da      	lsrs	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3208      	adds	r2, #8
 8002356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	220f      	movs	r2, #15
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	691a      	ldr	r2, [r3, #16]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	08da      	lsrs	r2, r3, #3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3208      	adds	r2, #8
 8002390:	69b9      	ldr	r1, [r7, #24]
 8002392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	2203      	movs	r2, #3
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0203 	and.w	r2, r3, #3
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 80e0 	beq.w	8002598 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d8:	4b2f      	ldr	r3, [pc, #188]	; (8002498 <HAL_GPIO_Init+0x238>)
 80023da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023de:	4a2e      	ldr	r2, [pc, #184]	; (8002498 <HAL_GPIO_Init+0x238>)
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023e8:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <HAL_GPIO_Init+0x238>)
 80023ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023f6:	4a29      	ldr	r2, [pc, #164]	; (800249c <HAL_GPIO_Init+0x23c>)
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	3302      	adds	r3, #2
 80023fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	220f      	movs	r2, #15
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a20      	ldr	r2, [pc, #128]	; (80024a0 <HAL_GPIO_Init+0x240>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d052      	beq.n	80024c8 <HAL_GPIO_Init+0x268>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a1f      	ldr	r2, [pc, #124]	; (80024a4 <HAL_GPIO_Init+0x244>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d031      	beq.n	800248e <HAL_GPIO_Init+0x22e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a1e      	ldr	r2, [pc, #120]	; (80024a8 <HAL_GPIO_Init+0x248>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d02b      	beq.n	800248a <HAL_GPIO_Init+0x22a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a1d      	ldr	r2, [pc, #116]	; (80024ac <HAL_GPIO_Init+0x24c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d025      	beq.n	8002486 <HAL_GPIO_Init+0x226>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a1c      	ldr	r2, [pc, #112]	; (80024b0 <HAL_GPIO_Init+0x250>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d01f      	beq.n	8002482 <HAL_GPIO_Init+0x222>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <HAL_GPIO_Init+0x254>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d019      	beq.n	800247e <HAL_GPIO_Init+0x21e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a1a      	ldr	r2, [pc, #104]	; (80024b8 <HAL_GPIO_Init+0x258>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d013      	beq.n	800247a <HAL_GPIO_Init+0x21a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a19      	ldr	r2, [pc, #100]	; (80024bc <HAL_GPIO_Init+0x25c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00d      	beq.n	8002476 <HAL_GPIO_Init+0x216>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a18      	ldr	r2, [pc, #96]	; (80024c0 <HAL_GPIO_Init+0x260>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d007      	beq.n	8002472 <HAL_GPIO_Init+0x212>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a17      	ldr	r2, [pc, #92]	; (80024c4 <HAL_GPIO_Init+0x264>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d101      	bne.n	800246e <HAL_GPIO_Init+0x20e>
 800246a:	2309      	movs	r3, #9
 800246c:	e02d      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 800246e:	230a      	movs	r3, #10
 8002470:	e02b      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 8002472:	2308      	movs	r3, #8
 8002474:	e029      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 8002476:	2307      	movs	r3, #7
 8002478:	e027      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 800247a:	2306      	movs	r3, #6
 800247c:	e025      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 800247e:	2305      	movs	r3, #5
 8002480:	e023      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 8002482:	2304      	movs	r3, #4
 8002484:	e021      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 8002486:	2303      	movs	r3, #3
 8002488:	e01f      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 800248a:	2302      	movs	r3, #2
 800248c:	e01d      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 800248e:	2301      	movs	r3, #1
 8002490:	e01b      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 8002492:	bf00      	nop
 8002494:	58000080 	.word	0x58000080
 8002498:	58024400 	.word	0x58024400
 800249c:	58000400 	.word	0x58000400
 80024a0:	58020000 	.word	0x58020000
 80024a4:	58020400 	.word	0x58020400
 80024a8:	58020800 	.word	0x58020800
 80024ac:	58020c00 	.word	0x58020c00
 80024b0:	58021000 	.word	0x58021000
 80024b4:	58021400 	.word	0x58021400
 80024b8:	58021800 	.word	0x58021800
 80024bc:	58021c00 	.word	0x58021c00
 80024c0:	58022000 	.word	0x58022000
 80024c4:	58022400 	.word	0x58022400
 80024c8:	2300      	movs	r3, #0
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	f002 0203 	and.w	r2, r2, #3
 80024d0:	0092      	lsls	r2, r2, #2
 80024d2:	4093      	lsls	r3, r2
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024da:	4938      	ldr	r1, [pc, #224]	; (80025bc <HAL_GPIO_Init+0x35c>)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	3302      	adds	r3, #2
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800253c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800256a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002590:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	3301      	adds	r3, #1
 800259c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f47f ae63 	bne.w	8002274 <HAL_GPIO_Init+0x14>
  }
}
 80025ae:	bf00      	nop
 80025b0:	3724      	adds	r7, #36	; 0x24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	58000400 	.word	0x58000400

080025c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	887b      	ldrh	r3, [r7, #2]
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
 80025dc:	e001      	b.n	80025e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025de:	2300      	movs	r3, #0
 80025e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]
 80025fc:	4613      	mov	r3, r2
 80025fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002600:	787b      	ldrb	r3, [r7, #1]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800260c:	e003      	b.n	8002616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800260e:	887b      	ldrh	r3, [r7, #2]
 8002610:	041a      	lsls	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	619a      	str	r2, [r3, #24]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800262c:	4a08      	ldr	r2, [pc, #32]	; (8002650 <HAL_HSEM_FastTake+0x2c>)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3320      	adds	r3, #32
 8002632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002636:	4a07      	ldr	r2, [pc, #28]	; (8002654 <HAL_HSEM_FastTake+0x30>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d101      	bne.n	8002640 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	e000      	b.n	8002642 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	58026400 	.word	0x58026400
 8002654:	80000300 	.word	0x80000300

08002658 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002662:	4906      	ldr	r1, [pc, #24]	; (800267c <HAL_HSEM_Release+0x24>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	58026400 	.word	0x58026400

08002680 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002682:	b08f      	sub	sp, #60	; 0x3c
 8002684:	af0a      	add	r7, sp, #40	; 0x28
 8002686:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e116      	b.n	80028c0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d106      	bne.n	80026b2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff f941 	bl	8001934 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2203      	movs	r2, #3
 80026b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d102      	bne.n	80026cc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f004 fd37 	bl	8007144 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	687e      	ldr	r6, [r7, #4]
 80026de:	466d      	mov	r5, sp
 80026e0:	f106 0410 	add.w	r4, r6, #16
 80026e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80026f4:	1d33      	adds	r3, r6, #4
 80026f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026f8:	6838      	ldr	r0, [r7, #0]
 80026fa:	f004 fcc1 	bl	8007080 <USB_CoreInit>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0d7      	b.n	80028c0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2100      	movs	r1, #0
 8002716:	4618      	mov	r0, r3
 8002718:	f004 fd25 	bl	8007166 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800271c:	2300      	movs	r3, #0
 800271e:	73fb      	strb	r3, [r7, #15]
 8002720:	e04a      	b.n	80027b8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	333d      	adds	r3, #61	; 0x3d
 8002732:	2201      	movs	r2, #1
 8002734:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	333c      	adds	r3, #60	; 0x3c
 8002746:	7bfa      	ldrb	r2, [r7, #15]
 8002748:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	b298      	uxth	r0, r3
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	3342      	adds	r3, #66	; 0x42
 800275e:	4602      	mov	r2, r0
 8002760:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	1a9b      	subs	r3, r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	333f      	adds	r3, #63	; 0x3f
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002776:	7bfa      	ldrb	r2, [r7, #15]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	3344      	adds	r3, #68	; 0x44
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	1a9b      	subs	r3, r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	3348      	adds	r3, #72	; 0x48
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800279e:	7bfa      	ldrb	r2, [r7, #15]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	3350      	adds	r3, #80	; 0x50
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	3301      	adds	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d3af      	bcc.n	8002722 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	73fb      	strb	r3, [r7, #15]
 80027c6:	e044      	b.n	8002852 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80027f0:	7bfa      	ldrb	r2, [r7, #15]
 80027f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027f4:	7bfa      	ldrb	r2, [r7, #15]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800280a:	7bfa      	ldrb	r2, [r7, #15]
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	1a9b      	subs	r3, r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002820:	7bfa      	ldrb	r2, [r7, #15]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002836:	7bfa      	ldrb	r2, [r7, #15]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	3301      	adds	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
 8002852:	7bfa      	ldrb	r2, [r7, #15]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	429a      	cmp	r2, r3
 800285a:	d3b5      	bcc.n	80027c8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	687e      	ldr	r6, [r7, #4]
 8002864:	466d      	mov	r5, sp
 8002866:	f106 0410 	add.w	r4, r6, #16
 800286a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002872:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002876:	e885 0003 	stmia.w	r5, {r0, r1}
 800287a:	1d33      	adds	r3, r6, #4
 800287c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800287e:	6838      	ldr	r0, [r7, #0]
 8002880:	f004 fc9c 	bl	80071bc <USB_DevInit>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2202      	movs	r2, #2
 800288e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e014      	b.n	80028c0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d102      	bne.n	80028b4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f80a 	bl	80028c8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f004 fe3e 	bl	800753a <USB_DevDisconnect>

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_PCDEx_ActivateLPM+0x44>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	10000003 	.word	0x10000003

08002910 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002918:	4b29      	ldr	r3, [pc, #164]	; (80029c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	2b06      	cmp	r3, #6
 8002922:	d00a      	beq.n	800293a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002924:	4b26      	ldr	r3, [pc, #152]	; (80029c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	429a      	cmp	r2, r3
 8002930:	d001      	beq.n	8002936 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e040      	b.n	80029b8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	e03e      	b.n	80029b8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800293a:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002942:	491f      	ldr	r1, [pc, #124]	; (80029c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4313      	orrs	r3, r2
 8002948:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800294a:	f7ff f8fb 	bl	8001b44 <HAL_GetTick>
 800294e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002950:	e009      	b.n	8002966 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002952:	f7ff f8f7 	bl	8001b44 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002960:	d901      	bls.n	8002966 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e028      	b.n	80029b8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002966:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800296e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002972:	d1ee      	bne.n	8002952 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b1e      	cmp	r3, #30
 8002978:	d008      	beq.n	800298c <HAL_PWREx_ConfigSupply+0x7c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b2e      	cmp	r3, #46	; 0x2e
 800297e:	d005      	beq.n	800298c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b1d      	cmp	r3, #29
 8002984:	d002      	beq.n	800298c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b2d      	cmp	r3, #45	; 0x2d
 800298a:	d114      	bne.n	80029b6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800298c:	f7ff f8da 	bl	8001b44 <HAL_GetTick>
 8002990:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002992:	e009      	b.n	80029a8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002994:	f7ff f8d6 	bl	8001b44 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029a2:	d901      	bls.n	80029a8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e007      	b.n	80029b8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_PWREx_ConfigSupply+0xb0>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b4:	d1ee      	bne.n	8002994 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	58024800 	.word	0x58024800

080029c4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80029ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d2:	60d3      	str	r3, [r2, #12]
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	58024800 	.word	0x58024800

080029e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08c      	sub	sp, #48	; 0x30
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e3ff      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 8087 	beq.w	8002b12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a04:	4b99      	ldr	r3, [pc, #612]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a0e:	4b97      	ldr	r3, [pc, #604]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a16:	2b10      	cmp	r3, #16
 8002a18:	d007      	beq.n	8002a2a <HAL_RCC_OscConfig+0x46>
 8002a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1c:	2b18      	cmp	r3, #24
 8002a1e:	d110      	bne.n	8002a42 <HAL_RCC_OscConfig+0x5e>
 8002a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d10b      	bne.n	8002a42 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2a:	4b90      	ldr	r3, [pc, #576]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d06c      	beq.n	8002b10 <HAL_RCC_OscConfig+0x12c>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d168      	bne.n	8002b10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e3d9      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a4a:	d106      	bne.n	8002a5a <HAL_RCC_OscConfig+0x76>
 8002a4c:	4b87      	ldr	r3, [pc, #540]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a86      	ldr	r2, [pc, #536]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	e02e      	b.n	8002ab8 <HAL_RCC_OscConfig+0xd4>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x98>
 8002a62:	4b82      	ldr	r3, [pc, #520]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a81      	ldr	r2, [pc, #516]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	4b7f      	ldr	r3, [pc, #508]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a7e      	ldr	r2, [pc, #504]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002a74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	e01d      	b.n	8002ab8 <HAL_RCC_OscConfig+0xd4>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0xbc>
 8002a86:	4b79      	ldr	r3, [pc, #484]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a78      	ldr	r2, [pc, #480]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b76      	ldr	r3, [pc, #472]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a75      	ldr	r2, [pc, #468]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e00b      	b.n	8002ab8 <HAL_RCC_OscConfig+0xd4>
 8002aa0:	4b72      	ldr	r3, [pc, #456]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a71      	ldr	r2, [pc, #452]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	4b6f      	ldr	r3, [pc, #444]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a6e      	ldr	r2, [pc, #440]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d013      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7ff f840 	bl	8001b44 <HAL_GetTick>
 8002ac4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac8:	f7ff f83c 	bl	8001b44 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b64      	cmp	r3, #100	; 0x64
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e38d      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ada:	4b64      	ldr	r3, [pc, #400]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0xe4>
 8002ae6:	e014      	b.n	8002b12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae8:	f7ff f82c 	bl	8001b44 <HAL_GetTick>
 8002aec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af0:	f7ff f828 	bl	8001b44 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b64      	cmp	r3, #100	; 0x64
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e379      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b02:	4b5a      	ldr	r3, [pc, #360]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x10c>
 8002b0e:	e000      	b.n	8002b12 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 80ae 	beq.w	8002c7c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b20:	4b52      	ldr	r3, [pc, #328]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b28:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b2a:	4b50      	ldr	r3, [pc, #320]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d007      	beq.n	8002b46 <HAL_RCC_OscConfig+0x162>
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	2b18      	cmp	r3, #24
 8002b3a:	d13a      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x1ce>
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d135      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b46:	4b49      	ldr	r3, [pc, #292]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <HAL_RCC_OscConfig+0x17a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e34b      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5e:	f7ff f81f 	bl	8001ba0 <HAL_GetREVID>
 8002b62:	4602      	mov	r2, r0
 8002b64:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d817      	bhi.n	8002b9c <HAL_RCC_OscConfig+0x1b8>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	2b40      	cmp	r3, #64	; 0x40
 8002b72:	d108      	bne.n	8002b86 <HAL_RCC_OscConfig+0x1a2>
 8002b74:	4b3d      	ldr	r3, [pc, #244]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b7c:	4a3b      	ldr	r2, [pc, #236]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b82:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b84:	e07a      	b.n	8002c7c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b86:	4b39      	ldr	r3, [pc, #228]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	031b      	lsls	r3, r3, #12
 8002b94:	4935      	ldr	r1, [pc, #212]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b9a:	e06f      	b.n	8002c7c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9c:	4b33      	ldr	r3, [pc, #204]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	061b      	lsls	r3, r3, #24
 8002baa:	4930      	ldr	r1, [pc, #192]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bb0:	e064      	b.n	8002c7c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d045      	beq.n	8002c46 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002bba:	4b2c      	ldr	r3, [pc, #176]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 0219 	bic.w	r2, r3, #25
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	4929      	ldr	r1, [pc, #164]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bcc:	f7fe ffba 	bl	8001b44 <HAL_GetTick>
 8002bd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd4:	f7fe ffb6 	bl	8001b44 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e307      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002be6:	4b21      	ldr	r3, [pc, #132]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf2:	f7fe ffd5 	bl	8001ba0 <HAL_GetREVID>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	f241 0303 	movw	r3, #4099	; 0x1003
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d817      	bhi.n	8002c30 <HAL_RCC_OscConfig+0x24c>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b40      	cmp	r3, #64	; 0x40
 8002c06:	d108      	bne.n	8002c1a <HAL_RCC_OscConfig+0x236>
 8002c08:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002c10:	4a16      	ldr	r2, [pc, #88]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c16:	6053      	str	r3, [r2, #4]
 8002c18:	e030      	b.n	8002c7c <HAL_RCC_OscConfig+0x298>
 8002c1a:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	031b      	lsls	r3, r3, #12
 8002c28:	4910      	ldr	r1, [pc, #64]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	604b      	str	r3, [r1, #4]
 8002c2e:	e025      	b.n	8002c7c <HAL_RCC_OscConfig+0x298>
 8002c30:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	061b      	lsls	r3, r3, #24
 8002c3e:	490b      	ldr	r1, [pc, #44]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
 8002c44:	e01a      	b.n	8002c7c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c46:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a08      	ldr	r2, [pc, #32]	; (8002c6c <HAL_RCC_OscConfig+0x288>)
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c52:	f7fe ff77 	bl	8001b44 <HAL_GetTick>
 8002c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c5a:	f7fe ff73 	bl	8001b44 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d903      	bls.n	8002c70 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e2c4      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
 8002c6c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c70:	4ba4      	ldr	r3, [pc, #656]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1ee      	bne.n	8002c5a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80a9 	beq.w	8002ddc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c8a:	4b9e      	ldr	r3, [pc, #632]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c94:	4b9b      	ldr	r3, [pc, #620]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c98:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d007      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x2cc>
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2b18      	cmp	r3, #24
 8002ca4:	d13a      	bne.n	8002d1c <HAL_RCC_OscConfig+0x338>
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d135      	bne.n	8002d1c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cb0:	4b94      	ldr	r3, [pc, #592]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x2e4>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	2b80      	cmp	r3, #128	; 0x80
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e296      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cc8:	f7fe ff6a 	bl	8001ba0 <HAL_GetREVID>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	f241 0303 	movw	r3, #4099	; 0x1003
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d817      	bhi.n	8002d06 <HAL_RCC_OscConfig+0x322>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d108      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x30c>
 8002cde:	4b89      	ldr	r3, [pc, #548]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002ce6:	4a87      	ldr	r2, [pc, #540]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002ce8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cec:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cee:	e075      	b.n	8002ddc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cf0:	4b84      	ldr	r3, [pc, #528]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	069b      	lsls	r3, r3, #26
 8002cfe:	4981      	ldr	r1, [pc, #516]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d04:	e06a      	b.n	8002ddc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d06:	4b7f      	ldr	r3, [pc, #508]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	061b      	lsls	r3, r3, #24
 8002d14:	497b      	ldr	r1, [pc, #492]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d1a:	e05f      	b.n	8002ddc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d042      	beq.n	8002daa <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d24:	4b77      	ldr	r3, [pc, #476]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a76      	ldr	r2, [pc, #472]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7fe ff08 	bl	8001b44 <HAL_GetTick>
 8002d34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d38:	f7fe ff04 	bl	8001b44 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e255      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d4a:	4b6e      	ldr	r3, [pc, #440]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d56:	f7fe ff23 	bl	8001ba0 <HAL_GetREVID>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d817      	bhi.n	8002d94 <HAL_RCC_OscConfig+0x3b0>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d108      	bne.n	8002d7e <HAL_RCC_OscConfig+0x39a>
 8002d6c:	4b65      	ldr	r3, [pc, #404]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002d74:	4a63      	ldr	r2, [pc, #396]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002d76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d7a:	6053      	str	r3, [r2, #4]
 8002d7c:	e02e      	b.n	8002ddc <HAL_RCC_OscConfig+0x3f8>
 8002d7e:	4b61      	ldr	r3, [pc, #388]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	069b      	lsls	r3, r3, #26
 8002d8c:	495d      	ldr	r1, [pc, #372]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	604b      	str	r3, [r1, #4]
 8002d92:	e023      	b.n	8002ddc <HAL_RCC_OscConfig+0x3f8>
 8002d94:	4b5b      	ldr	r3, [pc, #364]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	4958      	ldr	r1, [pc, #352]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60cb      	str	r3, [r1, #12]
 8002da8:	e018      	b.n	8002ddc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002daa:	4b56      	ldr	r3, [pc, #344]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a55      	ldr	r2, [pc, #340]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002db0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f7fe fec5 	bl	8001b44 <HAL_GetTick>
 8002dba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002dbe:	f7fe fec1 	bl	8001b44 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e212      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002dd0:	4b4c      	ldr	r3, [pc, #304]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f0      	bne.n	8002dbe <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d036      	beq.n	8002e56 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d019      	beq.n	8002e24 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df0:	4b44      	ldr	r3, [pc, #272]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df4:	4a43      	ldr	r2, [pc, #268]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f7fe fea2 	bl	8001b44 <HAL_GetTick>
 8002e00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e04:	f7fe fe9e 	bl	8001b44 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e1ef      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e16:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x420>
 8002e22:	e018      	b.n	8002e56 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e24:	4b37      	ldr	r3, [pc, #220]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e28:	4a36      	ldr	r2, [pc, #216]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002e2a:	f023 0301 	bic.w	r3, r3, #1
 8002e2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7fe fe88 	bl	8001b44 <HAL_GetTick>
 8002e34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e38:	f7fe fe84 	bl	8001b44 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e1d5      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e4a:	4b2e      	ldr	r3, [pc, #184]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d036      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d019      	beq.n	8002e9e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e6a:	4b26      	ldr	r3, [pc, #152]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a25      	ldr	r2, [pc, #148]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002e70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e76:	f7fe fe65 	bl	8001b44 <HAL_GetTick>
 8002e7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e7e:	f7fe fe61 	bl	8001b44 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e1b2      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e90:	4b1c      	ldr	r3, [pc, #112]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x49a>
 8002e9c:	e018      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e9e:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002ea4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ea8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002eaa:	f7fe fe4b 	bl	8001b44 <HAL_GetTick>
 8002eae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002eb2:	f7fe fe47 	bl	8001b44 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e198      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <HAL_RCC_OscConfig+0x520>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f0      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 8085 	beq.w	8002fe8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ede:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <HAL_RCC_OscConfig+0x524>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a09      	ldr	r2, [pc, #36]	; (8002f08 <HAL_RCC_OscConfig+0x524>)
 8002ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002eea:	f7fe fe2b 	bl	8001b44 <HAL_GetTick>
 8002eee:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ef0:	e00c      	b.n	8002f0c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ef2:	f7fe fe27 	bl	8001b44 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b64      	cmp	r3, #100	; 0x64
 8002efe:	d905      	bls.n	8002f0c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e178      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
 8002f04:	58024400 	.word	0x58024400
 8002f08:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f0c:	4b96      	ldr	r3, [pc, #600]	; (8003168 <HAL_RCC_OscConfig+0x784>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0ec      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x54a>
 8002f20:	4b92      	ldr	r3, [pc, #584]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	4a91      	ldr	r2, [pc, #580]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2c:	e02d      	b.n	8002f8a <HAL_RCC_OscConfig+0x5a6>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x56c>
 8002f36:	4b8d      	ldr	r3, [pc, #564]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	4a8c      	ldr	r2, [pc, #560]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	6713      	str	r3, [r2, #112]	; 0x70
 8002f42:	4b8a      	ldr	r3, [pc, #552]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	4a89      	ldr	r2, [pc, #548]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8002f48:	f023 0304 	bic.w	r3, r3, #4
 8002f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4e:	e01c      	b.n	8002f8a <HAL_RCC_OscConfig+0x5a6>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b05      	cmp	r3, #5
 8002f56:	d10c      	bne.n	8002f72 <HAL_RCC_OscConfig+0x58e>
 8002f58:	4b84      	ldr	r3, [pc, #528]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5c:	4a83      	ldr	r2, [pc, #524]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	6713      	str	r3, [r2, #112]	; 0x70
 8002f64:	4b81      	ldr	r3, [pc, #516]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	4a80      	ldr	r2, [pc, #512]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f70:	e00b      	b.n	8002f8a <HAL_RCC_OscConfig+0x5a6>
 8002f72:	4b7e      	ldr	r3, [pc, #504]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	4a7d      	ldr	r2, [pc, #500]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7e:	4b7b      	ldr	r3, [pc, #492]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	4a7a      	ldr	r2, [pc, #488]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8002f84:	f023 0304 	bic.w	r3, r3, #4
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d015      	beq.n	8002fbe <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f92:	f7fe fdd7 	bl	8001b44 <HAL_GetTick>
 8002f96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f98:	e00a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f9a:	f7fe fdd3 	bl	8001b44 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e122      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fb0:	4b6e      	ldr	r3, [pc, #440]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0ee      	beq.n	8002f9a <HAL_RCC_OscConfig+0x5b6>
 8002fbc:	e014      	b.n	8002fe8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbe:	f7fe fdc1 	bl	8001b44 <HAL_GetTick>
 8002fc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fe fdbd 	bl	8001b44 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e10c      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fdc:	4b63      	ldr	r3, [pc, #396]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1ee      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 8101 	beq.w	80031f4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ff2:	4b5e      	ldr	r3, [pc, #376]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ffa:	2b18      	cmp	r3, #24
 8002ffc:	f000 80bc 	beq.w	8003178 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	2b02      	cmp	r3, #2
 8003006:	f040 8095 	bne.w	8003134 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300a:	4b58      	ldr	r3, [pc, #352]	; (800316c <HAL_RCC_OscConfig+0x788>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a57      	ldr	r2, [pc, #348]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8003010:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003016:	f7fe fd95 	bl	8001b44 <HAL_GetTick>
 800301a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301e:	f7fe fd91 	bl	8001b44 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e0e2      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003030:	4b4e      	ldr	r3, [pc, #312]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f0      	bne.n	800301e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800303c:	4b4b      	ldr	r3, [pc, #300]	; (800316c <HAL_RCC_OscConfig+0x788>)
 800303e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003040:	4b4b      	ldr	r3, [pc, #300]	; (8003170 <HAL_RCC_OscConfig+0x78c>)
 8003042:	4013      	ands	r3, r2
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800304c:	0112      	lsls	r2, r2, #4
 800304e:	430a      	orrs	r2, r1
 8003050:	4946      	ldr	r1, [pc, #280]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8003052:	4313      	orrs	r3, r2
 8003054:	628b      	str	r3, [r1, #40]	; 0x28
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	3b01      	subs	r3, #1
 800305c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003064:	3b01      	subs	r3, #1
 8003066:	025b      	lsls	r3, r3, #9
 8003068:	b29b      	uxth	r3, r3
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	3b01      	subs	r3, #1
 8003072:	041b      	lsls	r3, r3, #16
 8003074:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307e:	3b01      	subs	r3, #1
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003086:	4939      	ldr	r1, [pc, #228]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8003088:	4313      	orrs	r3, r2
 800308a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800308c:	4b37      	ldr	r3, [pc, #220]	; (800316c <HAL_RCC_OscConfig+0x788>)
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	4a36      	ldr	r2, [pc, #216]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8003092:	f023 0301 	bic.w	r3, r3, #1
 8003096:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003098:	4b34      	ldr	r3, [pc, #208]	; (800316c <HAL_RCC_OscConfig+0x788>)
 800309a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800309c:	4b35      	ldr	r3, [pc, #212]	; (8003174 <HAL_RCC_OscConfig+0x790>)
 800309e:	4013      	ands	r3, r2
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030a4:	00d2      	lsls	r2, r2, #3
 80030a6:	4931      	ldr	r1, [pc, #196]	; (800316c <HAL_RCC_OscConfig+0x788>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80030ac:	4b2f      	ldr	r3, [pc, #188]	; (800316c <HAL_RCC_OscConfig+0x788>)
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	f023 020c 	bic.w	r2, r3, #12
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	492c      	ldr	r1, [pc, #176]	; (800316c <HAL_RCC_OscConfig+0x788>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80030be:	4b2b      	ldr	r3, [pc, #172]	; (800316c <HAL_RCC_OscConfig+0x788>)
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	f023 0202 	bic.w	r2, r3, #2
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	4928      	ldr	r1, [pc, #160]	; (800316c <HAL_RCC_OscConfig+0x788>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030d0:	4b26      	ldr	r3, [pc, #152]	; (800316c <HAL_RCC_OscConfig+0x788>)
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	4a25      	ldr	r2, [pc, #148]	; (800316c <HAL_RCC_OscConfig+0x788>)
 80030d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030dc:	4b23      	ldr	r3, [pc, #140]	; (800316c <HAL_RCC_OscConfig+0x788>)
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	4a22      	ldr	r2, [pc, #136]	; (800316c <HAL_RCC_OscConfig+0x788>)
 80030e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80030e8:	4b20      	ldr	r3, [pc, #128]	; (800316c <HAL_RCC_OscConfig+0x788>)
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	4a1f      	ldr	r2, [pc, #124]	; (800316c <HAL_RCC_OscConfig+0x788>)
 80030ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80030f4:	4b1d      	ldr	r3, [pc, #116]	; (800316c <HAL_RCC_OscConfig+0x788>)
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	4a1c      	ldr	r2, [pc, #112]	; (800316c <HAL_RCC_OscConfig+0x788>)
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003100:	4b1a      	ldr	r3, [pc, #104]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a19      	ldr	r2, [pc, #100]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8003106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800310a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310c:	f7fe fd1a 	bl	8001b44 <HAL_GetTick>
 8003110:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003114:	f7fe fd16 	bl	8001b44 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e067      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x730>
 8003132:	e05f      	b.n	80031f4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003134:	4b0d      	ldr	r3, [pc, #52]	; (800316c <HAL_RCC_OscConfig+0x788>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a0c      	ldr	r2, [pc, #48]	; (800316c <HAL_RCC_OscConfig+0x788>)
 800313a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800313e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fe fd00 	bl	8001b44 <HAL_GetTick>
 8003144:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe fcfc 	bl	8001b44 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e04d      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800315a:	4b04      	ldr	r3, [pc, #16]	; (800316c <HAL_RCC_OscConfig+0x788>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x764>
 8003166:	e045      	b.n	80031f4 <HAL_RCC_OscConfig+0x810>
 8003168:	58024800 	.word	0x58024800
 800316c:	58024400 	.word	0x58024400
 8003170:	fffffc0c 	.word	0xfffffc0c
 8003174:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003178:	4b21      	ldr	r3, [pc, #132]	; (8003200 <HAL_RCC_OscConfig+0x81c>)
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800317e:	4b20      	ldr	r3, [pc, #128]	; (8003200 <HAL_RCC_OscConfig+0x81c>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	2b01      	cmp	r3, #1
 800318a:	d031      	beq.n	80031f0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f003 0203 	and.w	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003196:	429a      	cmp	r2, r3
 8003198:	d12a      	bne.n	80031f0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	091b      	lsrs	r3, r3, #4
 800319e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d122      	bne.n	80031f0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d11a      	bne.n	80031f0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	0a5b      	lsrs	r3, r3, #9
 80031be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d111      	bne.n	80031f0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	0c1b      	lsrs	r3, r3, #16
 80031d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d108      	bne.n	80031f0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	0e1b      	lsrs	r3, r3, #24
 80031e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3730      	adds	r7, #48	; 0x30
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	58024400 	.word	0x58024400

08003204 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e19c      	b.n	8003552 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003218:	4b8a      	ldr	r3, [pc, #552]	; (8003444 <HAL_RCC_ClockConfig+0x240>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d910      	bls.n	8003248 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003226:	4b87      	ldr	r3, [pc, #540]	; (8003444 <HAL_RCC_ClockConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 020f 	bic.w	r2, r3, #15
 800322e:	4985      	ldr	r1, [pc, #532]	; (8003444 <HAL_RCC_ClockConfig+0x240>)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003236:	4b83      	ldr	r3, [pc, #524]	; (8003444 <HAL_RCC_ClockConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e184      	b.n	8003552 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d010      	beq.n	8003276 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	4b7b      	ldr	r3, [pc, #492]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003260:	429a      	cmp	r2, r3
 8003262:	d908      	bls.n	8003276 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003264:	4b78      	ldr	r3, [pc, #480]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	4975      	ldr	r1, [pc, #468]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 8003272:	4313      	orrs	r3, r2
 8003274:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d010      	beq.n	80032a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	4b70      	ldr	r3, [pc, #448]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800328e:	429a      	cmp	r2, r3
 8003290:	d908      	bls.n	80032a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003292:	4b6d      	ldr	r3, [pc, #436]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	496a      	ldr	r1, [pc, #424]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d010      	beq.n	80032d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699a      	ldr	r2, [r3, #24]
 80032b4:	4b64      	ldr	r3, [pc, #400]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032bc:	429a      	cmp	r2, r3
 80032be:	d908      	bls.n	80032d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032c0:	4b61      	ldr	r3, [pc, #388]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	495e      	ldr	r1, [pc, #376]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d010      	beq.n	8003300 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69da      	ldr	r2, [r3, #28]
 80032e2:	4b59      	ldr	r3, [pc, #356]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d908      	bls.n	8003300 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80032ee:	4b56      	ldr	r3, [pc, #344]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	4953      	ldr	r1, [pc, #332]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d010      	beq.n	800332e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	4b4d      	ldr	r3, [pc, #308]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	429a      	cmp	r2, r3
 800331a:	d908      	bls.n	800332e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800331c:	4b4a      	ldr	r3, [pc, #296]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	f023 020f 	bic.w	r2, r3, #15
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4947      	ldr	r1, [pc, #284]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 800332a:	4313      	orrs	r3, r2
 800332c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d055      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800333a:	4b43      	ldr	r3, [pc, #268]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	4940      	ldr	r1, [pc, #256]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 8003348:	4313      	orrs	r3, r2
 800334a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d107      	bne.n	8003364 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003354:	4b3c      	ldr	r3, [pc, #240]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d121      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0f6      	b.n	8003552 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b03      	cmp	r3, #3
 800336a:	d107      	bne.n	800337c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800336c:	4b36      	ldr	r3, [pc, #216]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d115      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0ea      	b.n	8003552 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d107      	bne.n	8003394 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003384:	4b30      	ldr	r3, [pc, #192]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d109      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0de      	b.n	8003552 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003394:	4b2c      	ldr	r3, [pc, #176]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0d6      	b.n	8003552 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033a4:	4b28      	ldr	r3, [pc, #160]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	f023 0207 	bic.w	r2, r3, #7
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4925      	ldr	r1, [pc, #148]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b6:	f7fe fbc5 	bl	8001b44 <HAL_GetTick>
 80033ba:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033bc:	e00a      	b.n	80033d4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033be:	f7fe fbc1 	bl	8001b44 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e0be      	b.n	8003552 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d4:	4b1c      	ldr	r3, [pc, #112]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d1eb      	bne.n	80033be <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d010      	beq.n	8003414 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	4b14      	ldr	r3, [pc, #80]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	429a      	cmp	r2, r3
 8003400:	d208      	bcs.n	8003414 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	f023 020f 	bic.w	r2, r3, #15
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	490e      	ldr	r1, [pc, #56]	; (8003448 <HAL_RCC_ClockConfig+0x244>)
 8003410:	4313      	orrs	r3, r2
 8003412:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCC_ClockConfig+0x240>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d214      	bcs.n	800344c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b08      	ldr	r3, [pc, #32]	; (8003444 <HAL_RCC_ClockConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 020f 	bic.w	r2, r3, #15
 800342a:	4906      	ldr	r1, [pc, #24]	; (8003444 <HAL_RCC_ClockConfig+0x240>)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	4313      	orrs	r3, r2
 8003430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b04      	ldr	r3, [pc, #16]	; (8003444 <HAL_RCC_ClockConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d005      	beq.n	800344c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e086      	b.n	8003552 <HAL_RCC_ClockConfig+0x34e>
 8003444:	52002000 	.word	0x52002000
 8003448:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d010      	beq.n	800347a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	4b3f      	ldr	r3, [pc, #252]	; (800355c <HAL_RCC_ClockConfig+0x358>)
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003464:	429a      	cmp	r2, r3
 8003466:	d208      	bcs.n	800347a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003468:	4b3c      	ldr	r3, [pc, #240]	; (800355c <HAL_RCC_ClockConfig+0x358>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	4939      	ldr	r1, [pc, #228]	; (800355c <HAL_RCC_ClockConfig+0x358>)
 8003476:	4313      	orrs	r3, r2
 8003478:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d010      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	4b34      	ldr	r3, [pc, #208]	; (800355c <HAL_RCC_ClockConfig+0x358>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003492:	429a      	cmp	r2, r3
 8003494:	d208      	bcs.n	80034a8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003496:	4b31      	ldr	r3, [pc, #196]	; (800355c <HAL_RCC_ClockConfig+0x358>)
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	492e      	ldr	r1, [pc, #184]	; (800355c <HAL_RCC_ClockConfig+0x358>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d010      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699a      	ldr	r2, [r3, #24]
 80034b8:	4b28      	ldr	r3, [pc, #160]	; (800355c <HAL_RCC_ClockConfig+0x358>)
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d208      	bcs.n	80034d6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034c4:	4b25      	ldr	r3, [pc, #148]	; (800355c <HAL_RCC_ClockConfig+0x358>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	4922      	ldr	r1, [pc, #136]	; (800355c <HAL_RCC_ClockConfig+0x358>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d010      	beq.n	8003504 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69da      	ldr	r2, [r3, #28]
 80034e6:	4b1d      	ldr	r3, [pc, #116]	; (800355c <HAL_RCC_ClockConfig+0x358>)
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d208      	bcs.n	8003504 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80034f2:	4b1a      	ldr	r3, [pc, #104]	; (800355c <HAL_RCC_ClockConfig+0x358>)
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	4917      	ldr	r1, [pc, #92]	; (800355c <HAL_RCC_ClockConfig+0x358>)
 8003500:	4313      	orrs	r3, r2
 8003502:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003504:	f000 f834 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 8003508:	4601      	mov	r1, r0
 800350a:	4b14      	ldr	r3, [pc, #80]	; (800355c <HAL_RCC_ClockConfig+0x358>)
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	0a1b      	lsrs	r3, r3, #8
 8003510:	f003 030f 	and.w	r3, r3, #15
 8003514:	4a12      	ldr	r2, [pc, #72]	; (8003560 <HAL_RCC_ClockConfig+0x35c>)
 8003516:	5cd3      	ldrb	r3, [r2, r3]
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	fa21 f303 	lsr.w	r3, r1, r3
 8003520:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003522:	4b0e      	ldr	r3, [pc, #56]	; (800355c <HAL_RCC_ClockConfig+0x358>)
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	4a0d      	ldr	r2, [pc, #52]	; (8003560 <HAL_RCC_ClockConfig+0x35c>)
 800352c:	5cd3      	ldrb	r3, [r2, r3]
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
 8003538:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <HAL_RCC_ClockConfig+0x360>)
 800353a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800353c:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <HAL_RCC_ClockConfig+0x364>)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003542:	4b0a      	ldr	r3, [pc, #40]	; (800356c <HAL_RCC_ClockConfig+0x368>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fe fab2 	bl	8001ab0 <HAL_InitTick>
 800354c:	4603      	mov	r3, r0
 800354e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003550:	7bfb      	ldrb	r3, [r7, #15]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	58024400 	.word	0x58024400
 8003560:	08009c1c 	.word	0x08009c1c
 8003564:	20000004 	.word	0x20000004
 8003568:	20000000 	.word	0x20000000
 800356c:	2000000c 	.word	0x2000000c

08003570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003570:	b480      	push	{r7}
 8003572:	b089      	sub	sp, #36	; 0x24
 8003574:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003576:	4baf      	ldr	r3, [pc, #700]	; (8003834 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800357e:	2b18      	cmp	r3, #24
 8003580:	f200 814e 	bhi.w	8003820 <HAL_RCC_GetSysClockFreq+0x2b0>
 8003584:	a201      	add	r2, pc, #4	; (adr r2, 800358c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	080035f1 	.word	0x080035f1
 8003590:	08003821 	.word	0x08003821
 8003594:	08003821 	.word	0x08003821
 8003598:	08003821 	.word	0x08003821
 800359c:	08003821 	.word	0x08003821
 80035a0:	08003821 	.word	0x08003821
 80035a4:	08003821 	.word	0x08003821
 80035a8:	08003821 	.word	0x08003821
 80035ac:	08003617 	.word	0x08003617
 80035b0:	08003821 	.word	0x08003821
 80035b4:	08003821 	.word	0x08003821
 80035b8:	08003821 	.word	0x08003821
 80035bc:	08003821 	.word	0x08003821
 80035c0:	08003821 	.word	0x08003821
 80035c4:	08003821 	.word	0x08003821
 80035c8:	08003821 	.word	0x08003821
 80035cc:	0800361d 	.word	0x0800361d
 80035d0:	08003821 	.word	0x08003821
 80035d4:	08003821 	.word	0x08003821
 80035d8:	08003821 	.word	0x08003821
 80035dc:	08003821 	.word	0x08003821
 80035e0:	08003821 	.word	0x08003821
 80035e4:	08003821 	.word	0x08003821
 80035e8:	08003821 	.word	0x08003821
 80035ec:	08003623 	.word	0x08003623
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035f0:	4b90      	ldr	r3, [pc, #576]	; (8003834 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d009      	beq.n	8003610 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035fc:	4b8d      	ldr	r3, [pc, #564]	; (8003834 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	08db      	lsrs	r3, r3, #3
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	4a8c      	ldr	r2, [pc, #560]	; (8003838 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
 800360c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800360e:	e10a      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003610:	4b89      	ldr	r3, [pc, #548]	; (8003838 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003612:	61bb      	str	r3, [r7, #24]
    break;
 8003614:	e107      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003616:	4b89      	ldr	r3, [pc, #548]	; (800383c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003618:	61bb      	str	r3, [r7, #24]
    break;
 800361a:	e104      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800361c:	4b88      	ldr	r3, [pc, #544]	; (8003840 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800361e:	61bb      	str	r3, [r7, #24]
    break;
 8003620:	e101      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003622:	4b84      	ldr	r3, [pc, #528]	; (8003834 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800362c:	4b81      	ldr	r3, [pc, #516]	; (8003834 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800362e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003636:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003638:	4b7e      	ldr	r3, [pc, #504]	; (8003834 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003642:	4b7c      	ldr	r3, [pc, #496]	; (8003834 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003646:	08db      	lsrs	r3, r3, #3
 8003648:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	fb02 f303 	mul.w	r3, r2, r3
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800365a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80da 	beq.w	800381a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d05a      	beq.n	8003722 <HAL_RCC_GetSysClockFreq+0x1b2>
 800366c:	2b01      	cmp	r3, #1
 800366e:	d302      	bcc.n	8003676 <HAL_RCC_GetSysClockFreq+0x106>
 8003670:	2b02      	cmp	r3, #2
 8003672:	d078      	beq.n	8003766 <HAL_RCC_GetSysClockFreq+0x1f6>
 8003674:	e099      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003676:	4b6f      	ldr	r3, [pc, #444]	; (8003834 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b00      	cmp	r3, #0
 8003680:	d02d      	beq.n	80036de <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003682:	4b6c      	ldr	r3, [pc, #432]	; (8003834 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	08db      	lsrs	r3, r3, #3
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	4a6a      	ldr	r2, [pc, #424]	; (8003838 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800368e:	fa22 f303 	lsr.w	r3, r2, r3
 8003692:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	ee07 3a90 	vmov	s15, r3
 800369a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	ee07 3a90 	vmov	s15, r3
 80036a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ac:	4b61      	ldr	r3, [pc, #388]	; (8003834 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b4:	ee07 3a90 	vmov	s15, r3
 80036b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80036c0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003844 <HAL_RCC_GetSysClockFreq+0x2d4>
 80036c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80036dc:	e087      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	ee07 3a90 	vmov	s15, r3
 80036e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003848 <HAL_RCC_GetSysClockFreq+0x2d8>
 80036ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036f0:	4b50      	ldr	r3, [pc, #320]	; (8003834 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f8:	ee07 3a90 	vmov	s15, r3
 80036fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003700:	ed97 6a02 	vldr	s12, [r7, #8]
 8003704:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003844 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003708:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800370c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003710:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003714:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003720:	e065      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	ee07 3a90 	vmov	s15, r3
 8003728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800384c <HAL_RCC_GetSysClockFreq+0x2dc>
 8003730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003734:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373c:	ee07 3a90 	vmov	s15, r3
 8003740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003744:	ed97 6a02 	vldr	s12, [r7, #8]
 8003748:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003844 <HAL_RCC_GetSysClockFreq+0x2d4>
 800374c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003750:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003754:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003758:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800375c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003760:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003764:	e043      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	ee07 3a90 	vmov	s15, r3
 800376c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003770:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003850 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003774:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003778:	4b2e      	ldr	r3, [pc, #184]	; (8003834 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003780:	ee07 3a90 	vmov	s15, r3
 8003784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003788:	ed97 6a02 	vldr	s12, [r7, #8]
 800378c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003844 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003790:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003794:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003798:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800379c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037a8:	e021      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	ee07 3a90 	vmov	s15, r3
 80037b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800384c <HAL_RCC_GetSysClockFreq+0x2dc>
 80037b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037bc:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c4:	ee07 3a90 	vmov	s15, r3
 80037c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80037d0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003844 <HAL_RCC_GetSysClockFreq+0x2d4>
 80037d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037ec:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80037ee:	4b11      	ldr	r3, [pc, #68]	; (8003834 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	0a5b      	lsrs	r3, r3, #9
 80037f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037f8:	3301      	adds	r3, #1
 80037fa:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003806:	edd7 6a07 	vldr	s13, [r7, #28]
 800380a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800380e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003812:	ee17 3a90 	vmov	r3, s15
 8003816:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003818:	e005      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
    break;
 800381e:	e002      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003822:	61bb      	str	r3, [r7, #24]
    break;
 8003824:	bf00      	nop
  }

  return sysclockfreq;
 8003826:	69bb      	ldr	r3, [r7, #24]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3724      	adds	r7, #36	; 0x24
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	58024400 	.word	0x58024400
 8003838:	03d09000 	.word	0x03d09000
 800383c:	003d0900 	.word	0x003d0900
 8003840:	02625a00 	.word	0x02625a00
 8003844:	46000000 	.word	0x46000000
 8003848:	4c742400 	.word	0x4c742400
 800384c:	4a742400 	.word	0x4a742400
 8003850:	4c189680 	.word	0x4c189680

08003854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800385a:	f7ff fe89 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 800385e:	4601      	mov	r1, r0
 8003860:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	0a1b      	lsrs	r3, r3, #8
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	4a0f      	ldr	r2, [pc, #60]	; (80038a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800386c:	5cd3      	ldrb	r3, [r2, r3]
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	fa21 f303 	lsr.w	r3, r1, r3
 8003876:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003882:	5cd3      	ldrb	r3, [r2, r3]
 8003884:	f003 031f 	and.w	r3, r3, #31
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	fa22 f303 	lsr.w	r3, r2, r3
 800388e:	4a07      	ldr	r2, [pc, #28]	; (80038ac <HAL_RCC_GetHCLKFreq+0x58>)
 8003890:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003892:	4a07      	ldr	r2, [pc, #28]	; (80038b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <HAL_RCC_GetHCLKFreq+0x58>)
 800389a:	681b      	ldr	r3, [r3, #0]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	58024400 	.word	0x58024400
 80038a8:	08009c1c 	.word	0x08009c1c
 80038ac:	20000004 	.word	0x20000004
 80038b0:	20000000 	.word	0x20000000

080038b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80038b8:	f7ff ffcc 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 80038bc:	4601      	mov	r1, r0
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	091b      	lsrs	r3, r3, #4
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4a04      	ldr	r2, [pc, #16]	; (80038dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80038ca:	5cd3      	ldrb	r3, [r2, r3]
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	58024400 	.word	0x58024400
 80038dc:	08009c1c 	.word	0x08009c1c

080038e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80038e4:	f7ff ffb6 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 80038e8:	4601      	mov	r1, r0
 80038ea:	4b06      	ldr	r3, [pc, #24]	; (8003904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	0a1b      	lsrs	r3, r3, #8
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	4a04      	ldr	r2, [pc, #16]	; (8003908 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038f6:	5cd3      	ldrb	r3, [r2, r3]
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003900:	4618      	mov	r0, r3
 8003902:	bd80      	pop	{r7, pc}
 8003904:	58024400 	.word	0x58024400
 8003908:	08009c1c 	.word	0x08009c1c

0800390c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003914:	2300      	movs	r3, #0
 8003916:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003918:	2300      	movs	r3, #0
 800391a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d03d      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800392c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003930:	d013      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003936:	d802      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800393c:	e01f      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800393e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003942:	d013      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003944:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003948:	d01c      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800394a:	e018      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800394c:	4baf      	ldr	r3, [pc, #700]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	4aae      	ldr	r2, [pc, #696]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003956:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003958:	e015      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3304      	adds	r3, #4
 800395e:	2102      	movs	r1, #2
 8003960:	4618      	mov	r0, r3
 8003962:	f001 f96f 	bl	8004c44 <RCCEx_PLL2_Config>
 8003966:	4603      	mov	r3, r0
 8003968:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800396a:	e00c      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3324      	adds	r3, #36	; 0x24
 8003970:	2102      	movs	r1, #2
 8003972:	4618      	mov	r0, r3
 8003974:	f001 fa18 	bl	8004da8 <RCCEx_PLL3_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800397c:	e003      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	75fb      	strb	r3, [r7, #23]
      break;
 8003982:	e000      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003984:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003986:	7dfb      	ldrb	r3, [r7, #23]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d109      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800398c:	4b9f      	ldr	r3, [pc, #636]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800398e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003990:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003998:	499c      	ldr	r1, [pc, #624]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800399a:	4313      	orrs	r3, r2
 800399c:	650b      	str	r3, [r1, #80]	; 0x50
 800399e:	e001      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a0:	7dfb      	ldrb	r3, [r7, #23]
 80039a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d03d      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d826      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80039b8:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80039ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039be:	bf00      	nop
 80039c0:	080039d5 	.word	0x080039d5
 80039c4:	080039e3 	.word	0x080039e3
 80039c8:	080039f5 	.word	0x080039f5
 80039cc:	08003a0d 	.word	0x08003a0d
 80039d0:	08003a0d 	.word	0x08003a0d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d4:	4b8d      	ldr	r3, [pc, #564]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	4a8c      	ldr	r2, [pc, #560]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039e0:	e015      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3304      	adds	r3, #4
 80039e6:	2100      	movs	r1, #0
 80039e8:	4618      	mov	r0, r3
 80039ea:	f001 f92b 	bl	8004c44 <RCCEx_PLL2_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039f2:	e00c      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3324      	adds	r3, #36	; 0x24
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 f9d4 	bl	8004da8 <RCCEx_PLL3_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a04:	e003      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	75fb      	strb	r3, [r7, #23]
      break;
 8003a0a:	e000      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a0e:	7dfb      	ldrb	r3, [r7, #23]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d109      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a14:	4b7d      	ldr	r3, [pc, #500]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a18:	f023 0207 	bic.w	r2, r3, #7
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	497a      	ldr	r1, [pc, #488]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	650b      	str	r3, [r1, #80]	; 0x50
 8003a26:	e001      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d03e      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	2b80      	cmp	r3, #128	; 0x80
 8003a3e:	d01c      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003a40:	2b80      	cmp	r3, #128	; 0x80
 8003a42:	d804      	bhi.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a48:	2b40      	cmp	r3, #64	; 0x40
 8003a4a:	d00d      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003a4c:	e01e      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003a4e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a50:	d01f      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a56:	d01e      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003a58:	e018      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a5a:	4b6c      	ldr	r3, [pc, #432]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	4a6b      	ldr	r2, [pc, #428]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a66:	e017      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f001 f8e8 	bl	8004c44 <RCCEx_PLL2_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a78:	e00e      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3324      	adds	r3, #36	; 0x24
 8003a7e:	2100      	movs	r1, #0
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 f991 	bl	8004da8 <RCCEx_PLL3_Config>
 8003a86:	4603      	mov	r3, r0
 8003a88:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a8a:	e005      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a90:	e002      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003a92:	bf00      	nop
 8003a94:	e000      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003a96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003a9e:	4b5b      	ldr	r3, [pc, #364]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aaa:	4958      	ldr	r1, [pc, #352]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	650b      	str	r3, [r1, #80]	; 0x50
 8003ab0:	e001      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab2:	7dfb      	ldrb	r3, [r7, #23]
 8003ab4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d044      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ac8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003acc:	d01f      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ad2:	d805      	bhi.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ad8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003adc:	d00e      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003ade:	e01f      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003ae0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003ae4:	d01f      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003ae6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003aea:	d01e      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003aec:	e018      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aee:	4b47      	ldr	r3, [pc, #284]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	4a46      	ldr	r2, [pc, #280]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003afa:	e017      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3304      	adds	r3, #4
 8003b00:	2100      	movs	r1, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 f89e 	bl	8004c44 <RCCEx_PLL2_Config>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b0c:	e00e      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3324      	adds	r3, #36	; 0x24
 8003b12:	2100      	movs	r1, #0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f001 f947 	bl	8004da8 <RCCEx_PLL3_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b1e:	e005      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	75fb      	strb	r3, [r7, #23]
      break;
 8003b24:	e002      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003b26:	bf00      	nop
 8003b28:	e000      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10a      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b32:	4b36      	ldr	r3, [pc, #216]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b40:	4932      	ldr	r1, [pc, #200]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	658b      	str	r3, [r1, #88]	; 0x58
 8003b46:	e001      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
 8003b4a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d044      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b62:	d01f      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003b64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b68:	d805      	bhi.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003b6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b72:	d00e      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003b74:	e01f      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003b76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b7a:	d01f      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003b7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b80:	d01e      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003b82:	e018      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b84:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	4a20      	ldr	r2, [pc, #128]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b90:	e017      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3304      	adds	r3, #4
 8003b96:	2100      	movs	r1, #0
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f001 f853 	bl	8004c44 <RCCEx_PLL2_Config>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003ba2:	e00e      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3324      	adds	r3, #36	; 0x24
 8003ba8:	2100      	movs	r1, #0
 8003baa:	4618      	mov	r0, r3
 8003bac:	f001 f8fc 	bl	8004da8 <RCCEx_PLL3_Config>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bb4:	e005      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003bba:	e002      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003bbc:	bf00      	nop
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10a      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003bc8:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bcc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003bd6:	490d      	ldr	r1, [pc, #52]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	658b      	str	r3, [r1, #88]	; 0x58
 8003bdc:	e001      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
 8003be0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d035      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf2:	2b10      	cmp	r3, #16
 8003bf4:	d00c      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003bf6:	2b10      	cmp	r3, #16
 8003bf8:	d802      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d01b      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003bfe:	e017      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d00c      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003c04:	2b30      	cmp	r3, #48	; 0x30
 8003c06:	d018      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003c08:	e012      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003c0a:	bf00      	nop
 8003c0c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c10:	4baf      	ldr	r3, [pc, #700]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	4aae      	ldr	r2, [pc, #696]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003c1c:	e00e      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3304      	adds	r3, #4
 8003c22:	2102      	movs	r1, #2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f001 f80d 	bl	8004c44 <RCCEx_PLL2_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003c2e:	e005      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	75fb      	strb	r3, [r7, #23]
      break;
 8003c34:	e002      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003c36:	bf00      	nop
 8003c38:	e000      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d109      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c42:	4ba3      	ldr	r3, [pc, #652]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c46:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4e:	49a0      	ldr	r1, [pc, #640]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c54:	e001      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c56:	7dfb      	ldrb	r3, [r7, #23]
 8003c58:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d042      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c6e:	d01f      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c74:	d805      	bhi.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7e:	d00e      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003c80:	e01f      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003c82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c86:	d01f      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c8c:	d01e      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003c8e:	e018      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c90:	4b8f      	ldr	r3, [pc, #572]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	4a8e      	ldr	r2, [pc, #568]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c9c:	e017      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 ffcd 	bl	8004c44 <RCCEx_PLL2_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003cae:	e00e      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3324      	adds	r3, #36	; 0x24
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f001 f876 	bl	8004da8 <RCCEx_PLL3_Config>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003cc0:	e005      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8003cc6:	e002      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003cc8:	bf00      	nop
 8003cca:	e000      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cce:	7dfb      	ldrb	r3, [r7, #23]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d109      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003cd4:	4b7e      	ldr	r3, [pc, #504]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce0:	497b      	ldr	r1, [pc, #492]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	650b      	str	r3, [r1, #80]	; 0x50
 8003ce6:	e001      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d042      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d00:	d01b      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003d02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d06:	d805      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d022      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d10:	d00a      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003d12:	e01b      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003d14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d18:	d01d      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003d1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d1e:	d01c      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003d20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d24:	d01b      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003d26:	e011      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 ff88 	bl	8004c44 <RCCEx_PLL2_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d38:	e012      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3324      	adds	r3, #36	; 0x24
 8003d3e:	2101      	movs	r1, #1
 8003d40:	4618      	mov	r0, r3
 8003d42:	f001 f831 	bl	8004da8 <RCCEx_PLL3_Config>
 8003d46:	4603      	mov	r3, r0
 8003d48:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d4a:	e009      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d50:	e006      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003d52:	bf00      	nop
 8003d54:	e004      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003d56:	bf00      	nop
 8003d58:	e002      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003d5a:	bf00      	nop
 8003d5c:	e000      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d66:	4b5a      	ldr	r3, [pc, #360]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d72:	4957      	ldr	r1, [pc, #348]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	650b      	str	r3, [r1, #80]	; 0x50
 8003d78:	e001      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7a:	7dfb      	ldrb	r3, [r7, #23]
 8003d7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d044      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d94:	d01b      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d9a:	d805      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d022      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003da4:	d00a      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003da6:	e01b      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dac:	d01d      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003db2:	d01c      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003db4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003db8:	d01b      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003dba:	e011      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 ff3e 	bl	8004c44 <RCCEx_PLL2_Config>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003dcc:	e012      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3324      	adds	r3, #36	; 0x24
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 ffe7 	bl	8004da8 <RCCEx_PLL3_Config>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003dde:	e009      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	75fb      	strb	r3, [r7, #23]
      break;
 8003de4:	e006      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003de6:	bf00      	nop
 8003de8:	e004      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003dea:	bf00      	nop
 8003dec:	e002      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003dee:	bf00      	nop
 8003df0:	e000      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003df2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10a      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003dfa:	4b35      	ldr	r3, [pc, #212]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e08:	4931      	ldr	r1, [pc, #196]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	658b      	str	r3, [r1, #88]	; 0x58
 8003e0e:	e001      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
 8003e12:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d02d      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e28:	d005      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e2e:	d009      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d013      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003e34:	e00f      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e36:	4b26      	ldr	r3, [pc, #152]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	4a25      	ldr	r2, [pc, #148]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e42:	e00c      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3304      	adds	r3, #4
 8003e48:	2101      	movs	r1, #1
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fefa 	bl	8004c44 <RCCEx_PLL2_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e54:	e003      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	75fb      	strb	r3, [r7, #23]
      break;
 8003e5a:	e000      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d109      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e64:	4b1a      	ldr	r3, [pc, #104]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e70:	4917      	ldr	r1, [pc, #92]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	650b      	str	r3, [r1, #80]	; 0x50
 8003e76:	e001      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d035      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d81b      	bhi.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003e90:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003ed5 	.word	0x08003ed5
 8003e9c:	08003ea9 	.word	0x08003ea9
 8003ea0:	08003eb7 	.word	0x08003eb7
 8003ea4:	08003ed5 	.word	0x08003ed5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea8:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	4a08      	ldr	r2, [pc, #32]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003eb4:	e00f      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2102      	movs	r1, #2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fec1 	bl	8004c44 <RCCEx_PLL2_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ec6:	e006      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	75fb      	strb	r3, [r7, #23]
      break;
 8003ecc:	e003      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003ece:	bf00      	nop
 8003ed0:	58024400 	.word	0x58024400
      break;
 8003ed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003edc:	4bba      	ldr	r3, [pc, #744]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee0:	f023 0203 	bic.w	r2, r3, #3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee8:	49b7      	ldr	r1, [pc, #732]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003eee:	e001      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
 8003ef2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 8086 	beq.w	800400e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f02:	4bb2      	ldr	r3, [pc, #712]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4ab1      	ldr	r2, [pc, #708]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f0e:	f7fd fe19 	bl	8001b44 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f14:	e009      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f16:	f7fd fe15 	bl	8001b44 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b64      	cmp	r3, #100	; 0x64
 8003f22:	d902      	bls.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	75fb      	strb	r3, [r7, #23]
        break;
 8003f28:	e005      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f2a:	4ba8      	ldr	r3, [pc, #672]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0ef      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003f36:	7dfb      	ldrb	r3, [r7, #23]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d166      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f3c:	4ba2      	ldr	r3, [pc, #648]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f46:	4053      	eors	r3, r2
 8003f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d013      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f50:	4b9d      	ldr	r3, [pc, #628]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f58:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f5a:	4b9b      	ldr	r3, [pc, #620]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5e:	4a9a      	ldr	r2, [pc, #616]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f64:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f66:	4b98      	ldr	r3, [pc, #608]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6a:	4a97      	ldr	r2, [pc, #604]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f70:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f72:	4a95      	ldr	r2, [pc, #596]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f82:	d115      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fd fdde 	bl	8001b44 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f8a:	e00b      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8c:	f7fd fdda 	bl	8001b44 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d902      	bls.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	75fb      	strb	r3, [r7, #23]
            break;
 8003fa2:	e005      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fa4:	4b88      	ldr	r3, [pc, #544]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0ed      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003fb0:	7dfb      	ldrb	r3, [r7, #23]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d126      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fc4:	d10d      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003fc6:	4b80      	ldr	r3, [pc, #512]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fd4:	0919      	lsrs	r1, r3, #4
 8003fd6:	4b7e      	ldr	r3, [pc, #504]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003fd8:	400b      	ands	r3, r1
 8003fda:	497b      	ldr	r1, [pc, #492]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	610b      	str	r3, [r1, #16]
 8003fe0:	e005      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003fe2:	4b79      	ldr	r3, [pc, #484]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	4a78      	ldr	r2, [pc, #480]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003fe8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003fec:	6113      	str	r3, [r2, #16]
 8003fee:	4b76      	ldr	r3, [pc, #472]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ff0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ffc:	4972      	ldr	r1, [pc, #456]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	670b      	str	r3, [r1, #112]	; 0x70
 8004002:	e004      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004004:	7dfb      	ldrb	r3, [r7, #23]
 8004006:	75bb      	strb	r3, [r7, #22]
 8004008:	e001      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400a:	7dfb      	ldrb	r3, [r7, #23]
 800400c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d07d      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800401e:	2b28      	cmp	r3, #40	; 0x28
 8004020:	d866      	bhi.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004022:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004028:	080040f7 	.word	0x080040f7
 800402c:	080040f1 	.word	0x080040f1
 8004030:	080040f1 	.word	0x080040f1
 8004034:	080040f1 	.word	0x080040f1
 8004038:	080040f1 	.word	0x080040f1
 800403c:	080040f1 	.word	0x080040f1
 8004040:	080040f1 	.word	0x080040f1
 8004044:	080040f1 	.word	0x080040f1
 8004048:	080040cd 	.word	0x080040cd
 800404c:	080040f1 	.word	0x080040f1
 8004050:	080040f1 	.word	0x080040f1
 8004054:	080040f1 	.word	0x080040f1
 8004058:	080040f1 	.word	0x080040f1
 800405c:	080040f1 	.word	0x080040f1
 8004060:	080040f1 	.word	0x080040f1
 8004064:	080040f1 	.word	0x080040f1
 8004068:	080040df 	.word	0x080040df
 800406c:	080040f1 	.word	0x080040f1
 8004070:	080040f1 	.word	0x080040f1
 8004074:	080040f1 	.word	0x080040f1
 8004078:	080040f1 	.word	0x080040f1
 800407c:	080040f1 	.word	0x080040f1
 8004080:	080040f1 	.word	0x080040f1
 8004084:	080040f1 	.word	0x080040f1
 8004088:	080040f7 	.word	0x080040f7
 800408c:	080040f1 	.word	0x080040f1
 8004090:	080040f1 	.word	0x080040f1
 8004094:	080040f1 	.word	0x080040f1
 8004098:	080040f1 	.word	0x080040f1
 800409c:	080040f1 	.word	0x080040f1
 80040a0:	080040f1 	.word	0x080040f1
 80040a4:	080040f1 	.word	0x080040f1
 80040a8:	080040f7 	.word	0x080040f7
 80040ac:	080040f1 	.word	0x080040f1
 80040b0:	080040f1 	.word	0x080040f1
 80040b4:	080040f1 	.word	0x080040f1
 80040b8:	080040f1 	.word	0x080040f1
 80040bc:	080040f1 	.word	0x080040f1
 80040c0:	080040f1 	.word	0x080040f1
 80040c4:	080040f1 	.word	0x080040f1
 80040c8:	080040f7 	.word	0x080040f7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3304      	adds	r3, #4
 80040d0:	2101      	movs	r1, #1
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fdb6 	bl	8004c44 <RCCEx_PLL2_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80040dc:	e00c      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3324      	adds	r3, #36	; 0x24
 80040e2:	2101      	movs	r1, #1
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fe5f 	bl	8004da8 <RCCEx_PLL3_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80040ee:	e003      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	75fb      	strb	r3, [r7, #23]
      break;
 80040f4:	e000      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80040f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f8:	7dfb      	ldrb	r3, [r7, #23]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80040fe:	4b32      	ldr	r3, [pc, #200]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004102:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800410a:	492f      	ldr	r1, [pc, #188]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800410c:	4313      	orrs	r3, r2
 800410e:	654b      	str	r3, [r1, #84]	; 0x54
 8004110:	e001      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004112:	7dfb      	ldrb	r3, [r7, #23]
 8004114:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d037      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004126:	2b05      	cmp	r3, #5
 8004128:	d820      	bhi.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x860>
 800412a:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	08004173 	.word	0x08004173
 8004134:	08004149 	.word	0x08004149
 8004138:	0800415b 	.word	0x0800415b
 800413c:	08004173 	.word	0x08004173
 8004140:	08004173 	.word	0x08004173
 8004144:	08004173 	.word	0x08004173
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	2101      	movs	r1, #1
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fd78 	bl	8004c44 <RCCEx_PLL2_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004158:	e00c      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3324      	adds	r3, #36	; 0x24
 800415e:	2101      	movs	r1, #1
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fe21 	bl	8004da8 <RCCEx_PLL3_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800416a:	e003      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	75fb      	strb	r3, [r7, #23]
      break;
 8004170:	e000      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004174:	7dfb      	ldrb	r3, [r7, #23]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800417a:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	f023 0207 	bic.w	r2, r3, #7
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004186:	4910      	ldr	r1, [pc, #64]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004188:	4313      	orrs	r3, r2
 800418a:	654b      	str	r3, [r1, #84]	; 0x54
 800418c:	e001      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418e:	7dfb      	ldrb	r3, [r7, #23]
 8004190:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d040      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a4:	2b05      	cmp	r3, #5
 80041a6:	d827      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80041a8:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80041aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ae:	bf00      	nop
 80041b0:	080041ff 	.word	0x080041ff
 80041b4:	080041d5 	.word	0x080041d5
 80041b8:	080041e7 	.word	0x080041e7
 80041bc:	080041ff 	.word	0x080041ff
 80041c0:	080041ff 	.word	0x080041ff
 80041c4:	080041ff 	.word	0x080041ff
 80041c8:	58024400 	.word	0x58024400
 80041cc:	58024800 	.word	0x58024800
 80041d0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3304      	adds	r3, #4
 80041d8:	2101      	movs	r1, #1
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fd32 	bl	8004c44 <RCCEx_PLL2_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80041e4:	e00c      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3324      	adds	r3, #36	; 0x24
 80041ea:	2101      	movs	r1, #1
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fddb 	bl	8004da8 <RCCEx_PLL3_Config>
 80041f2:	4603      	mov	r3, r0
 80041f4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80041f6:	e003      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	75fb      	strb	r3, [r7, #23]
      break;
 80041fc:	e000      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80041fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004200:	7dfb      	ldrb	r3, [r7, #23]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10a      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004206:	4bb2      	ldr	r3, [pc, #712]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420a:	f023 0207 	bic.w	r2, r3, #7
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004214:	49ae      	ldr	r1, [pc, #696]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004216:	4313      	orrs	r3, r2
 8004218:	658b      	str	r3, [r1, #88]	; 0x58
 800421a:	e001      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421c:	7dfb      	ldrb	r3, [r7, #23]
 800421e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b00      	cmp	r3, #0
 800422a:	d044      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004236:	d01b      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800423c:	d805      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800423e:	2b00      	cmp	r3, #0
 8004240:	d022      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004242:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004248:	e01b      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800424a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424e:	d01d      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004250:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004254:	d01c      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004256:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800425a:	d01b      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800425c:	e011      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3304      	adds	r3, #4
 8004262:	2100      	movs	r1, #0
 8004264:	4618      	mov	r0, r3
 8004266:	f000 fced 	bl	8004c44 <RCCEx_PLL2_Config>
 800426a:	4603      	mov	r3, r0
 800426c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800426e:	e012      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3324      	adds	r3, #36	; 0x24
 8004274:	2102      	movs	r1, #2
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fd96 	bl	8004da8 <RCCEx_PLL3_Config>
 800427c:	4603      	mov	r3, r0
 800427e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004280:	e009      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	75fb      	strb	r3, [r7, #23]
      break;
 8004286:	e006      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004288:	bf00      	nop
 800428a:	e004      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800428c:	bf00      	nop
 800428e:	e002      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004290:	bf00      	nop
 8004292:	e000      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004296:	7dfb      	ldrb	r3, [r7, #23]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10a      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800429c:	4b8c      	ldr	r3, [pc, #560]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800429e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042aa:	4989      	ldr	r1, [pc, #548]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	654b      	str	r3, [r1, #84]	; 0x54
 80042b0:	e001      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
 80042b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d044      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042cc:	d01b      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80042ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d2:	d805      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d022      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80042d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80042de:	e01b      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80042e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e4:	d01d      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80042e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042ea:	d01c      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80042ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042f0:	d01b      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80042f2:	e011      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3304      	adds	r3, #4
 80042f8:	2100      	movs	r1, #0
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fca2 	bl	8004c44 <RCCEx_PLL2_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004304:	e012      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3324      	adds	r3, #36	; 0x24
 800430a:	2102      	movs	r1, #2
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fd4b 	bl	8004da8 <RCCEx_PLL3_Config>
 8004312:	4603      	mov	r3, r0
 8004314:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004316:	e009      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	75fb      	strb	r3, [r7, #23]
      break;
 800431c:	e006      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800431e:	bf00      	nop
 8004320:	e004      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004322:	bf00      	nop
 8004324:	e002      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004326:	bf00      	nop
 8004328:	e000      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800432a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004332:	4b67      	ldr	r3, [pc, #412]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004336:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004340:	4963      	ldr	r1, [pc, #396]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004342:	4313      	orrs	r3, r2
 8004344:	658b      	str	r3, [r1, #88]	; 0x58
 8004346:	e001      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004354:	2b00      	cmp	r3, #0
 8004356:	d044      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800435e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004362:	d01b      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004368:	d805      	bhi.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800436a:	2b00      	cmp	r3, #0
 800436c:	d022      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800436e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004372:	d00a      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004374:	e01b      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8004376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437a:	d01d      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800437c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004380:	d01c      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8004382:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004386:	d01b      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004388:	e011      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3304      	adds	r3, #4
 800438e:	2100      	movs	r1, #0
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fc57 	bl	8004c44 <RCCEx_PLL2_Config>
 8004396:	4603      	mov	r3, r0
 8004398:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800439a:	e012      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3324      	adds	r3, #36	; 0x24
 80043a0:	2102      	movs	r1, #2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fd00 	bl	8004da8 <RCCEx_PLL3_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80043ac:	e009      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	75fb      	strb	r3, [r7, #23]
      break;
 80043b2:	e006      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80043b4:	bf00      	nop
 80043b6:	e004      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80043b8:	bf00      	nop
 80043ba:	e002      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80043bc:	bf00      	nop
 80043be:	e000      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80043c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043c2:	7dfb      	ldrb	r3, [r7, #23]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043c8:	4b41      	ldr	r3, [pc, #260]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043d6:	493e      	ldr	r1, [pc, #248]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	658b      	str	r3, [r1, #88]	; 0x58
 80043dc:	e001      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043de:	7dfb      	ldrb	r3, [r7, #23]
 80043e0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01a      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f8:	d10a      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3324      	adds	r3, #36	; 0x24
 80043fe:	2102      	movs	r1, #2
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fcd1 	bl	8004da8 <RCCEx_PLL3_Config>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004410:	4b2f      	ldr	r3, [pc, #188]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004414:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800441e:	492c      	ldr	r1, [pc, #176]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004420:	4313      	orrs	r3, r2
 8004422:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800443a:	d10a      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3324      	adds	r3, #36	; 0x24
 8004440:	2102      	movs	r1, #2
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fcb0 	bl	8004da8 <RCCEx_PLL3_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004452:	4b1f      	ldr	r3, [pc, #124]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004456:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004460:	491b      	ldr	r1, [pc, #108]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004462:	4313      	orrs	r3, r2
 8004464:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d032      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800447c:	d00d      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800447e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004482:	d016      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8004484:	2b00      	cmp	r3, #0
 8004486:	d111      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3304      	adds	r3, #4
 800448c:	2100      	movs	r1, #0
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fbd8 	bl	8004c44 <RCCEx_PLL2_Config>
 8004494:	4603      	mov	r3, r0
 8004496:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004498:	e00c      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3324      	adds	r3, #36	; 0x24
 800449e:	2102      	movs	r1, #2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fc81 	bl	8004da8 <RCCEx_PLL3_Config>
 80044a6:	4603      	mov	r3, r0
 80044a8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80044aa:	e003      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	75fb      	strb	r3, [r7, #23]
      break;
 80044b0:	e000      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80044b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10c      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044c8:	4901      	ldr	r1, [pc, #4]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	658b      	str	r3, [r1, #88]	; 0x58
 80044ce:	e003      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80044d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d02f      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044ee:	d00c      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80044f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044f4:	d015      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80044f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044fa:	d10f      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044fc:	4b79      	ldr	r3, [pc, #484]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	4a78      	ldr	r2, [pc, #480]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004506:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004508:	e00c      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	3324      	adds	r3, #36	; 0x24
 800450e:	2101      	movs	r1, #1
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fc49 	bl	8004da8 <RCCEx_PLL3_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800451a:	e003      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	75fb      	strb	r3, [r7, #23]
      break;
 8004520:	e000      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004524:	7dfb      	ldrb	r3, [r7, #23]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10a      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800452a:	4b6e      	ldr	r3, [pc, #440]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800452c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004538:	496a      	ldr	r1, [pc, #424]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800453a:	4313      	orrs	r3, r2
 800453c:	654b      	str	r3, [r1, #84]	; 0x54
 800453e:	e001      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004540:	7dfb      	ldrb	r3, [r7, #23]
 8004542:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d029      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800455c:	d007      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800455e:	e00f      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004560:	4b60      	ldr	r3, [pc, #384]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	4a5f      	ldr	r2, [pc, #380]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800456a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800456c:	e00b      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3304      	adds	r3, #4
 8004572:	2102      	movs	r1, #2
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fb65 	bl	8004c44 <RCCEx_PLL2_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800457e:	e002      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	75fb      	strb	r3, [r7, #23]
      break;
 8004584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004586:	7dfb      	ldrb	r3, [r7, #23]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d109      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800458c:	4b55      	ldr	r3, [pc, #340]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800458e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004590:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004598:	4952      	ldr	r1, [pc, #328]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800459a:	4313      	orrs	r3, r2
 800459c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800459e:	e001      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
 80045a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3324      	adds	r3, #36	; 0x24
 80045b4:	2102      	movs	r1, #2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fbf6 	bl	8004da8 <RCCEx_PLL3_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d02f      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045da:	d00c      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80045dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045e0:	d802      	bhi.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d011      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80045e6:	e00d      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80045e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ec:	d00f      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80045ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045f2:	d00e      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80045f4:	e006      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f6:	4b3b      	ldr	r3, [pc, #236]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	4a3a      	ldr	r2, [pc, #232]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80045fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004600:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004602:	e007      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	75fb      	strb	r3, [r7, #23]
      break;
 8004608:	e004      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800460a:	bf00      	nop
 800460c:	e002      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800460e:	bf00      	nop
 8004610:	e000      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004614:	7dfb      	ldrb	r3, [r7, #23]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d109      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800461a:	4b32      	ldr	r3, [pc, #200]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800461c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004626:	492f      	ldr	r1, [pc, #188]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004628:	4313      	orrs	r3, r2
 800462a:	654b      	str	r3, [r1, #84]	; 0x54
 800462c:	e001      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462e:	7dfb      	ldrb	r3, [r7, #23]
 8004630:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d008      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800463e:	4b29      	ldr	r3, [pc, #164]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004642:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464a:	4926      	ldr	r1, [pc, #152]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800464c:	4313      	orrs	r3, r2
 800464e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d009      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800465c:	4b21      	ldr	r3, [pc, #132]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800466a:	491e      	ldr	r1, [pc, #120]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800466c:	4313      	orrs	r3, r2
 800466e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800467c:	4b19      	ldr	r3, [pc, #100]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800467e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004680:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004688:	4916      	ldr	r1, [pc, #88]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800468a:	4313      	orrs	r3, r2
 800468c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00d      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800469a:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	4a11      	ldr	r2, [pc, #68]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80046a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046a4:	6113      	str	r3, [r2, #16]
 80046a6:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80046a8:	691a      	ldr	r2, [r3, #16]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80046b0:	490c      	ldr	r1, [pc, #48]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	da08      	bge.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046be:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80046c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ca:	4906      	ldr	r1, [pc, #24]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80046d0:	7dbb      	ldrb	r3, [r7, #22]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	e000      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	58024400 	.word	0x58024400

080046e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80046ec:	f7ff f8b2 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 80046f0:	4601      	mov	r1, r0
 80046f2:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	091b      	lsrs	r3, r3, #4
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4a04      	ldr	r2, [pc, #16]	; (8004710 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80046fe:	5cd3      	ldrb	r3, [r2, r3]
 8004700:	f003 031f 	and.w	r3, r3, #31
 8004704:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004708:	4618      	mov	r0, r3
 800470a:	bd80      	pop	{r7, pc}
 800470c:	58024400 	.word	0x58024400
 8004710:	08009c1c 	.word	0x08009c1c

08004714 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004714:	b480      	push	{r7}
 8004716:	b089      	sub	sp, #36	; 0x24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800471c:	4b9d      	ldr	r3, [pc, #628]	; (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004726:	4b9b      	ldr	r3, [pc, #620]	; (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	0b1b      	lsrs	r3, r3, #12
 800472c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004730:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004732:	4b98      	ldr	r3, [pc, #608]	; (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	091b      	lsrs	r3, r3, #4
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800473e:	4b95      	ldr	r3, [pc, #596]	; (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	08db      	lsrs	r3, r3, #3
 8004744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	fb02 f303 	mul.w	r3, r2, r3
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004756:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 810a 	beq.w	8004976 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d05a      	beq.n	800481e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004768:	2b01      	cmp	r3, #1
 800476a:	d302      	bcc.n	8004772 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800476c:	2b02      	cmp	r3, #2
 800476e:	d078      	beq.n	8004862 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004770:	e099      	b.n	80048a6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004772:	4b88      	ldr	r3, [pc, #544]	; (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	d02d      	beq.n	80047da <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800477e:	4b85      	ldr	r3, [pc, #532]	; (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	08db      	lsrs	r3, r3, #3
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	4a83      	ldr	r2, [pc, #524]	; (8004998 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800478a:	fa22 f303 	lsr.w	r3, r2, r3
 800478e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	ee07 3a90 	vmov	s15, r3
 80047a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a8:	4b7a      	ldr	r3, [pc, #488]	; (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b0:	ee07 3a90 	vmov	s15, r3
 80047b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80047bc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800499c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80047c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80047d8:	e087      	b.n	80048ea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	ee07 3a90 	vmov	s15, r3
 80047e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80049a0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80047e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ec:	4b69      	ldr	r3, [pc, #420]	; (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f4:	ee07 3a90 	vmov	s15, r3
 80047f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8004800:	eddf 5a66 	vldr	s11, [pc, #408]	; 800499c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004804:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004808:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800480c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004818:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800481c:	e065      	b.n	80048ea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	ee07 3a90 	vmov	s15, r3
 8004824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004828:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800482c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004830:	4b58      	ldr	r3, [pc, #352]	; (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004838:	ee07 3a90 	vmov	s15, r3
 800483c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004840:	ed97 6a03 	vldr	s12, [r7, #12]
 8004844:	eddf 5a55 	vldr	s11, [pc, #340]	; 800499c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004848:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800484c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004850:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004854:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004860:	e043      	b.n	80048ea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	ee07 3a90 	vmov	s15, r3
 8004868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004874:	4b47      	ldr	r3, [pc, #284]	; (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487c:	ee07 3a90 	vmov	s15, r3
 8004880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004884:	ed97 6a03 	vldr	s12, [r7, #12]
 8004888:	eddf 5a44 	vldr	s11, [pc, #272]	; 800499c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800488c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004890:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004894:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004898:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800489c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048a4:	e021      	b.n	80048ea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	ee07 3a90 	vmov	s15, r3
 80048ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80048b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b8:	4b36      	ldr	r3, [pc, #216]	; (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80048ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c0:	ee07 3a90 	vmov	s15, r3
 80048c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80048cc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800499c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80048d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048e8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80048ea:	4b2a      	ldr	r3, [pc, #168]	; (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	0a5b      	lsrs	r3, r3, #9
 80048f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048f4:	ee07 3a90 	vmov	s15, r3
 80048f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004900:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004904:	edd7 6a07 	vldr	s13, [r7, #28]
 8004908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800490c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004910:	ee17 2a90 	vmov	r2, s15
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004918:	4b1e      	ldr	r3, [pc, #120]	; (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800491a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491c:	0c1b      	lsrs	r3, r3, #16
 800491e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800492e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004932:	edd7 6a07 	vldr	s13, [r7, #28]
 8004936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800493a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800493e:	ee17 2a90 	vmov	r2, s15
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004946:	4b13      	ldr	r3, [pc, #76]	; (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	0e1b      	lsrs	r3, r3, #24
 800494c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004950:	ee07 3a90 	vmov	s15, r3
 8004954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004958:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800495c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004960:	edd7 6a07 	vldr	s13, [r7, #28]
 8004964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800496c:	ee17 2a90 	vmov	r2, s15
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004974:	e008      	b.n	8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	609a      	str	r2, [r3, #8]
}
 8004988:	bf00      	nop
 800498a:	3724      	adds	r7, #36	; 0x24
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	58024400 	.word	0x58024400
 8004998:	03d09000 	.word	0x03d09000
 800499c:	46000000 	.word	0x46000000
 80049a0:	4c742400 	.word	0x4c742400
 80049a4:	4a742400 	.word	0x4a742400
 80049a8:	4c189680 	.word	0x4c189680

080049ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b089      	sub	sp, #36	; 0x24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049b4:	4b9d      	ldr	r3, [pc, #628]	; (8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80049be:	4b9b      	ldr	r3, [pc, #620]	; (8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c2:	0d1b      	lsrs	r3, r3, #20
 80049c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049ca:	4b98      	ldr	r3, [pc, #608]	; (8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ce:	0a1b      	lsrs	r3, r3, #8
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80049d6:	4b95      	ldr	r3, [pc, #596]	; (8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049da:	08db      	lsrs	r3, r3, #3
 80049dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	fb02 f303 	mul.w	r3, r2, r3
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 810a 	beq.w	8004c0e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d05a      	beq.n	8004ab6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d302      	bcc.n	8004a0a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d078      	beq.n	8004afa <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004a08:	e099      	b.n	8004b3e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a0a:	4b88      	ldr	r3, [pc, #544]	; (8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d02d      	beq.n	8004a72 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a16:	4b85      	ldr	r3, [pc, #532]	; (8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	08db      	lsrs	r3, r3, #3
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	4a83      	ldr	r2, [pc, #524]	; (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004a22:	fa22 f303 	lsr.w	r3, r2, r3
 8004a26:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	ee07 3a90 	vmov	s15, r3
 8004a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a40:	4b7a      	ldr	r3, [pc, #488]	; (8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a48:	ee07 3a90 	vmov	s15, r3
 8004a4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a50:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a54:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004a58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a6c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004a70:	e087      	b.n	8004b82 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	ee07 3a90 	vmov	s15, r3
 8004a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004a80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a84:	4b69      	ldr	r3, [pc, #420]	; (8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8c:	ee07 3a90 	vmov	s15, r3
 8004a90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a94:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a98:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004a9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ab4:	e065      	b.n	8004b82 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	ee07 3a90 	vmov	s15, r3
 8004abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004ac4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac8:	4b58      	ldr	r3, [pc, #352]	; (8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad0:	ee07 3a90 	vmov	s15, r3
 8004ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad8:	ed97 6a03 	vldr	s12, [r7, #12]
 8004adc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004ae0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ae4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004af4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004af8:	e043      	b.n	8004b82 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	ee07 3a90 	vmov	s15, r3
 8004b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b04:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004c40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004b08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b0c:	4b47      	ldr	r3, [pc, #284]	; (8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b14:	ee07 3a90 	vmov	s15, r3
 8004b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b20:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004b24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b3c:	e021      	b.n	8004b82 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	ee07 3a90 	vmov	s15, r3
 8004b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b48:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004b4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b50:	4b36      	ldr	r3, [pc, #216]	; (8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b60:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b64:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004b68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b80:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004b82:	4b2a      	ldr	r3, [pc, #168]	; (8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	0a5b      	lsrs	r3, r3, #9
 8004b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b8c:	ee07 3a90 	vmov	s15, r3
 8004b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ba8:	ee17 2a90 	vmov	r2, s15
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004bb0:	4b1e      	ldr	r3, [pc, #120]	; (8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	0c1b      	lsrs	r3, r3, #16
 8004bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bca:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd6:	ee17 2a90 	vmov	r2, s15
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004bde:	4b13      	ldr	r3, [pc, #76]	; (8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	0e1b      	lsrs	r3, r3, #24
 8004be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be8:	ee07 3a90 	vmov	s15, r3
 8004bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c04:	ee17 2a90 	vmov	r2, s15
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c0c:	e008      	b.n	8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	609a      	str	r2, [r3, #8]
}
 8004c20:	bf00      	nop
 8004c22:	3724      	adds	r7, #36	; 0x24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	58024400 	.word	0x58024400
 8004c30:	03d09000 	.word	0x03d09000
 8004c34:	46000000 	.word	0x46000000
 8004c38:	4c742400 	.word	0x4c742400
 8004c3c:	4a742400 	.word	0x4a742400
 8004c40:	4c189680 	.word	0x4c189680

08004c44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c52:	4b53      	ldr	r3, [pc, #332]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d101      	bne.n	8004c62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e099      	b.n	8004d96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c62:	4b4f      	ldr	r3, [pc, #316]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a4e      	ldr	r2, [pc, #312]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004c68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c6e:	f7fc ff69 	bl	8001b44 <HAL_GetTick>
 8004c72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c74:	e008      	b.n	8004c88 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004c76:	f7fc ff65 	bl	8001b44 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e086      	b.n	8004d96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c88:	4b45      	ldr	r3, [pc, #276]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1f0      	bne.n	8004c76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c94:	4b42      	ldr	r3, [pc, #264]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	031b      	lsls	r3, r3, #12
 8004ca2:	493f      	ldr	r1, [pc, #252]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	628b      	str	r3, [r1, #40]	; 0x28
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	025b      	lsls	r3, r3, #9
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	041b      	lsls	r3, r3, #16
 8004cc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	061b      	lsls	r3, r3, #24
 8004cd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004cd8:	4931      	ldr	r1, [pc, #196]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004cde:	4b30      	ldr	r3, [pc, #192]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	492d      	ldr	r1, [pc, #180]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004cf0:	4b2b      	ldr	r3, [pc, #172]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	f023 0220 	bic.w	r2, r3, #32
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	4928      	ldr	r1, [pc, #160]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d02:	4b27      	ldr	r3, [pc, #156]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	4a26      	ldr	r2, [pc, #152]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004d08:	f023 0310 	bic.w	r3, r3, #16
 8004d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d0e:	4b24      	ldr	r3, [pc, #144]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004d10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d12:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <RCCEx_PLL2_Config+0x160>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	69d2      	ldr	r2, [r2, #28]
 8004d1a:	00d2      	lsls	r2, r2, #3
 8004d1c:	4920      	ldr	r1, [pc, #128]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d22:	4b1f      	ldr	r3, [pc, #124]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d26:	4a1e      	ldr	r2, [pc, #120]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004d28:	f043 0310 	orr.w	r3, r3, #16
 8004d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d106      	bne.n	8004d42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d34:	4b1a      	ldr	r3, [pc, #104]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	4a19      	ldr	r2, [pc, #100]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004d3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d40:	e00f      	b.n	8004d62 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d106      	bne.n	8004d56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d48:	4b15      	ldr	r3, [pc, #84]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4c:	4a14      	ldr	r2, [pc, #80]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d54:	e005      	b.n	8004d62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d56:	4b12      	ldr	r3, [pc, #72]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	4a11      	ldr	r2, [pc, #68]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004d5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d62:	4b0f      	ldr	r3, [pc, #60]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a0e      	ldr	r2, [pc, #56]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004d68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d6e:	f7fc fee9 	bl	8001b44 <HAL_GetTick>
 8004d72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d74:	e008      	b.n	8004d88 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004d76:	f7fc fee5 	bl	8001b44 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e006      	b.n	8004d96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d88:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <RCCEx_PLL2_Config+0x15c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0f0      	beq.n	8004d76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	58024400 	.word	0x58024400
 8004da4:	ffff0007 	.word	0xffff0007

08004da8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004db6:	4b53      	ldr	r3, [pc, #332]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	2b03      	cmp	r3, #3
 8004dc0:	d101      	bne.n	8004dc6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e099      	b.n	8004efa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004dc6:	4b4f      	ldr	r3, [pc, #316]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a4e      	ldr	r2, [pc, #312]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd2:	f7fc feb7 	bl	8001b44 <HAL_GetTick>
 8004dd6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dd8:	e008      	b.n	8004dec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004dda:	f7fc feb3 	bl	8001b44 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e086      	b.n	8004efa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dec:	4b45      	ldr	r3, [pc, #276]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1f0      	bne.n	8004dda <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004df8:	4b42      	ldr	r3, [pc, #264]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	051b      	lsls	r3, r3, #20
 8004e06:	493f      	ldr	r1, [pc, #252]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	628b      	str	r3, [r1, #40]	; 0x28
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	025b      	lsls	r3, r3, #9
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	041b      	lsls	r3, r3, #16
 8004e2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	061b      	lsls	r3, r3, #24
 8004e38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e3c:	4931      	ldr	r1, [pc, #196]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e42:	4b30      	ldr	r3, [pc, #192]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	492d      	ldr	r1, [pc, #180]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e54:	4b2b      	ldr	r3, [pc, #172]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	4928      	ldr	r1, [pc, #160]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e66:	4b27      	ldr	r3, [pc, #156]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6a:	4a26      	ldr	r2, [pc, #152]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e72:	4b24      	ldr	r3, [pc, #144]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e76:	4b24      	ldr	r3, [pc, #144]	; (8004f08 <RCCEx_PLL3_Config+0x160>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	69d2      	ldr	r2, [r2, #28]
 8004e7e:	00d2      	lsls	r2, r2, #3
 8004e80:	4920      	ldr	r1, [pc, #128]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e86:	4b1f      	ldr	r3, [pc, #124]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	4a1e      	ldr	r2, [pc, #120]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d106      	bne.n	8004ea6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e98:	4b1a      	ldr	r3, [pc, #104]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	4a19      	ldr	r2, [pc, #100]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004e9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ea2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ea4:	e00f      	b.n	8004ec6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d106      	bne.n	8004eba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004eac:	4b15      	ldr	r3, [pc, #84]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	4a14      	ldr	r2, [pc, #80]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004eb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004eb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004eb8:	e005      	b.n	8004ec6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004eba:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	4a11      	ldr	r2, [pc, #68]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004ec0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ec4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ec6:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a0e      	ldr	r2, [pc, #56]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed2:	f7fc fe37 	bl	8001b44 <HAL_GetTick>
 8004ed6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ed8:	e008      	b.n	8004eec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004eda:	f7fc fe33 	bl	8001b44 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e006      	b.n	8004efa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004eec:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <RCCEx_PLL3_Config+0x15c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0f0      	beq.n	8004eda <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	58024400 	.word	0x58024400
 8004f08:	ffff0007 	.word	0xffff0007

08004f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e049      	b.n	8004fb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fc fc0e 	bl	8001754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3304      	adds	r3, #4
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	f000 f934 	bl	80051b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d001      	beq.n	8004fd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e019      	b.n	8005008 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	4b0c      	ldr	r3, [pc, #48]	; (8005014 <HAL_TIM_Base_Start+0x58>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b06      	cmp	r3, #6
 8004fec:	d00b      	beq.n	8005006 <HAL_TIM_Base_Start+0x4a>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff4:	d007      	beq.n	8005006 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0201 	orr.w	r2, r2, #1
 8005004:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	00010007 	.word	0x00010007

08005018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_TIM_ConfigClockSource+0x18>
 800502c:	2302      	movs	r3, #2
 800502e:	e0b7      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x188>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4b57      	ldr	r3, [pc, #348]	; (80051a8 <HAL_TIM_ConfigClockSource+0x190>)
 800504c:	4013      	ands	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005056:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b70      	cmp	r3, #112	; 0x70
 8005066:	d02e      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0xae>
 8005068:	2b70      	cmp	r3, #112	; 0x70
 800506a:	d812      	bhi.n	8005092 <HAL_TIM_ConfigClockSource+0x7a>
 800506c:	2b30      	cmp	r3, #48	; 0x30
 800506e:	f000 8084 	beq.w	800517a <HAL_TIM_ConfigClockSource+0x162>
 8005072:	2b30      	cmp	r3, #48	; 0x30
 8005074:	d806      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x6c>
 8005076:	2b10      	cmp	r3, #16
 8005078:	d07f      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x162>
 800507a:	2b20      	cmp	r3, #32
 800507c:	d07d      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x162>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d07b      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005082:	e084      	b.n	800518e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005084:	2b50      	cmp	r3, #80	; 0x50
 8005086:	d048      	beq.n	800511a <HAL_TIM_ConfigClockSource+0x102>
 8005088:	2b60      	cmp	r3, #96	; 0x60
 800508a:	d056      	beq.n	800513a <HAL_TIM_ConfigClockSource+0x122>
 800508c:	2b40      	cmp	r3, #64	; 0x40
 800508e:	d064      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x142>
      break;
 8005090:	e07d      	b.n	800518e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005092:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005096:	d070      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x162>
 8005098:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800509c:	d809      	bhi.n	80050b2 <HAL_TIM_ConfigClockSource+0x9a>
 800509e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a2:	d027      	beq.n	80050f4 <HAL_TIM_ConfigClockSource+0xdc>
 80050a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050a8:	d067      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x162>
 80050aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ae:	d06d      	beq.n	800518c <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050b0:	e06d      	b.n	800518e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80050b2:	4a3e      	ldr	r2, [pc, #248]	; (80051ac <HAL_TIM_ConfigClockSource+0x194>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d060      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x162>
 80050b8:	4a3d      	ldr	r2, [pc, #244]	; (80051b0 <HAL_TIM_ConfigClockSource+0x198>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d05d      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x162>
 80050be:	4a3d      	ldr	r2, [pc, #244]	; (80051b4 <HAL_TIM_ConfigClockSource+0x19c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d05a      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x162>
      break;
 80050c4:	e063      	b.n	800518e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	6899      	ldr	r1, [r3, #8]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f000 f987 	bl	80053e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	609a      	str	r2, [r3, #8]
      break;
 80050f2:	e04c      	b.n	800518e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	6899      	ldr	r1, [r3, #8]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f000 f970 	bl	80053e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005116:	609a      	str	r2, [r3, #8]
      break;
 8005118:	e039      	b.n	800518e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6859      	ldr	r1, [r3, #4]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	461a      	mov	r2, r3
 8005128:	f000 f8e0 	bl	80052ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2150      	movs	r1, #80	; 0x50
 8005132:	4618      	mov	r0, r3
 8005134:	f000 f93a 	bl	80053ac <TIM_ITRx_SetConfig>
      break;
 8005138:	e029      	b.n	800518e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	6859      	ldr	r1, [r3, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	461a      	mov	r2, r3
 8005148:	f000 f8ff 	bl	800534a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2160      	movs	r1, #96	; 0x60
 8005152:	4618      	mov	r0, r3
 8005154:	f000 f92a 	bl	80053ac <TIM_ITRx_SetConfig>
      break;
 8005158:	e019      	b.n	800518e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	6859      	ldr	r1, [r3, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	461a      	mov	r2, r3
 8005168:	f000 f8c0 	bl	80052ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2140      	movs	r1, #64	; 0x40
 8005172:	4618      	mov	r0, r3
 8005174:	f000 f91a 	bl	80053ac <TIM_ITRx_SetConfig>
      break;
 8005178:	e009      	b.n	800518e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4619      	mov	r1, r3
 8005184:	4610      	mov	r0, r2
 8005186:	f000 f911 	bl	80053ac <TIM_ITRx_SetConfig>
      break;
 800518a:	e000      	b.n	800518e <HAL_TIM_ConfigClockSource+0x176>
      break;
 800518c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	ffceff88 	.word	0xffceff88
 80051ac:	00100030 	.word	0x00100030
 80051b0:	00100040 	.word	0x00100040
 80051b4:	00100020 	.word	0x00100020

080051b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a40      	ldr	r2, [pc, #256]	; (80052cc <TIM_Base_SetConfig+0x114>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d013      	beq.n	80051f8 <TIM_Base_SetConfig+0x40>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d6:	d00f      	beq.n	80051f8 <TIM_Base_SetConfig+0x40>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a3d      	ldr	r2, [pc, #244]	; (80052d0 <TIM_Base_SetConfig+0x118>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00b      	beq.n	80051f8 <TIM_Base_SetConfig+0x40>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a3c      	ldr	r2, [pc, #240]	; (80052d4 <TIM_Base_SetConfig+0x11c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d007      	beq.n	80051f8 <TIM_Base_SetConfig+0x40>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a3b      	ldr	r2, [pc, #236]	; (80052d8 <TIM_Base_SetConfig+0x120>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d003      	beq.n	80051f8 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a3a      	ldr	r2, [pc, #232]	; (80052dc <TIM_Base_SetConfig+0x124>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d108      	bne.n	800520a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a2f      	ldr	r2, [pc, #188]	; (80052cc <TIM_Base_SetConfig+0x114>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d01f      	beq.n	8005252 <TIM_Base_SetConfig+0x9a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005218:	d01b      	beq.n	8005252 <TIM_Base_SetConfig+0x9a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a2c      	ldr	r2, [pc, #176]	; (80052d0 <TIM_Base_SetConfig+0x118>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d017      	beq.n	8005252 <TIM_Base_SetConfig+0x9a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a2b      	ldr	r2, [pc, #172]	; (80052d4 <TIM_Base_SetConfig+0x11c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d013      	beq.n	8005252 <TIM_Base_SetConfig+0x9a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2a      	ldr	r2, [pc, #168]	; (80052d8 <TIM_Base_SetConfig+0x120>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00f      	beq.n	8005252 <TIM_Base_SetConfig+0x9a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a29      	ldr	r2, [pc, #164]	; (80052dc <TIM_Base_SetConfig+0x124>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00b      	beq.n	8005252 <TIM_Base_SetConfig+0x9a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a28      	ldr	r2, [pc, #160]	; (80052e0 <TIM_Base_SetConfig+0x128>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d007      	beq.n	8005252 <TIM_Base_SetConfig+0x9a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a27      	ldr	r2, [pc, #156]	; (80052e4 <TIM_Base_SetConfig+0x12c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d003      	beq.n	8005252 <TIM_Base_SetConfig+0x9a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a26      	ldr	r2, [pc, #152]	; (80052e8 <TIM_Base_SetConfig+0x130>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d108      	bne.n	8005264 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4313      	orrs	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a10      	ldr	r2, [pc, #64]	; (80052cc <TIM_Base_SetConfig+0x114>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00f      	beq.n	80052b0 <TIM_Base_SetConfig+0xf8>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a12      	ldr	r2, [pc, #72]	; (80052dc <TIM_Base_SetConfig+0x124>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00b      	beq.n	80052b0 <TIM_Base_SetConfig+0xf8>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a11      	ldr	r2, [pc, #68]	; (80052e0 <TIM_Base_SetConfig+0x128>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d007      	beq.n	80052b0 <TIM_Base_SetConfig+0xf8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a10      	ldr	r2, [pc, #64]	; (80052e4 <TIM_Base_SetConfig+0x12c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d003      	beq.n	80052b0 <TIM_Base_SetConfig+0xf8>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a0f      	ldr	r2, [pc, #60]	; (80052e8 <TIM_Base_SetConfig+0x130>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d103      	bne.n	80052b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	615a      	str	r2, [r3, #20]
}
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40010000 	.word	0x40010000
 80052d0:	40000400 	.word	0x40000400
 80052d4:	40000800 	.word	0x40000800
 80052d8:	40000c00 	.word	0x40000c00
 80052dc:	40010400 	.word	0x40010400
 80052e0:	40014000 	.word	0x40014000
 80052e4:	40014400 	.word	0x40014400
 80052e8:	40014800 	.word	0x40014800

080052ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	f023 0201 	bic.w	r2, r3, #1
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f023 030a 	bic.w	r3, r3, #10
 8005328:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4313      	orrs	r3, r2
 8005330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	621a      	str	r2, [r3, #32]
}
 800533e:	bf00      	nop
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800534a:	b480      	push	{r7}
 800534c:	b087      	sub	sp, #28
 800534e:	af00      	add	r7, sp, #0
 8005350:	60f8      	str	r0, [r7, #12]
 8005352:	60b9      	str	r1, [r7, #8]
 8005354:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f023 0210 	bic.w	r2, r3, #16
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005374:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	031b      	lsls	r3, r3, #12
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005386:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	621a      	str	r2, [r3, #32]
}
 800539e:	bf00      	nop
 80053a0:	371c      	adds	r7, #28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
	...

080053ac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <TIM_ITRx_SetConfig+0x38>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f043 0307 	orr.w	r3, r3, #7
 80053ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	609a      	str	r2, [r3, #8]
}
 80053d6:	bf00      	nop
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	ffcfff8f 	.word	0xffcfff8f

080053e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005402:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	021a      	lsls	r2, r3, #8
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	431a      	orrs	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4313      	orrs	r3, r2
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	609a      	str	r2, [r3, #8]
}
 800541c:	bf00      	nop
 800541e:	371c      	adds	r7, #28
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800543c:	2302      	movs	r3, #2
 800543e:	e068      	b.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a2e      	ldr	r2, [pc, #184]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d004      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a2d      	ldr	r2, [pc, #180]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d108      	bne.n	8005486 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800547a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a1e      	ldr	r2, [pc, #120]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d01d      	beq.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b2:	d018      	beq.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a1b      	ldr	r2, [pc, #108]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d013      	beq.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a1a      	ldr	r2, [pc, #104]	; (800552c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d00e      	beq.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a18      	ldr	r2, [pc, #96]	; (8005530 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d009      	beq.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a13      	ldr	r2, [pc, #76]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d004      	beq.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a14      	ldr	r2, [pc, #80]	; (8005534 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d10c      	bne.n	8005500 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40010000 	.word	0x40010000
 8005524:	40010400 	.word	0x40010400
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800
 8005530:	40000c00 	.word	0x40000c00
 8005534:	40001800 	.word	0x40001800

08005538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e042      	b.n	80055d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005550:	2b00      	cmp	r3, #0
 8005552:	d106      	bne.n	8005562 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7fc f965 	bl	800182c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2224      	movs	r2, #36	; 0x24
 8005566:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0201 	bic.w	r2, r2, #1
 8005578:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fb24 	bl	8005bc8 <UART_SetConfig>
 8005580:	4603      	mov	r3, r0
 8005582:	2b01      	cmp	r3, #1
 8005584:	d101      	bne.n	800558a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e022      	b.n	80055d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f001 f8c8 	bl	8006728 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0201 	orr.w	r2, r2, #1
 80055c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f001 f94f 	bl	800686c <UART_CheckIdleState>
 80055ce:	4603      	mov	r3, r0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08a      	sub	sp, #40	; 0x28
 80055dc:	af02      	add	r7, sp, #8
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	f040 8083 	bne.w	80056fa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_UART_Transmit+0x28>
 80055fa:	88fb      	ldrh	r3, [r7, #6]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e07b      	b.n	80056fc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800560a:	2b01      	cmp	r3, #1
 800560c:	d101      	bne.n	8005612 <HAL_UART_Transmit+0x3a>
 800560e:	2302      	movs	r3, #2
 8005610:	e074      	b.n	80056fc <HAL_UART_Transmit+0x124>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2221      	movs	r2, #33	; 0x21
 8005626:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800562a:	f7fc fa8b 	bl	8001b44 <HAL_GetTick>
 800562e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	88fa      	ldrh	r2, [r7, #6]
 8005634:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	88fa      	ldrh	r2, [r7, #6]
 800563c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005648:	d108      	bne.n	800565c <HAL_UART_Transmit+0x84>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d104      	bne.n	800565c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005652:	2300      	movs	r3, #0
 8005654:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	61bb      	str	r3, [r7, #24]
 800565a:	e003      	b.n	8005664 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005660:	2300      	movs	r3, #0
 8005662:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800566c:	e02c      	b.n	80056c8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2200      	movs	r2, #0
 8005676:	2180      	movs	r1, #128	; 0x80
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f001 f93f 	bl	80068fc <UART_WaitOnFlagUntilTimeout>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e039      	b.n	80056fc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10b      	bne.n	80056a6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800569c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	3302      	adds	r3, #2
 80056a2:	61bb      	str	r3, [r7, #24]
 80056a4:	e007      	b.n	80056b6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	781a      	ldrb	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	3301      	adds	r3, #1
 80056b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056bc:	b29b      	uxth	r3, r3
 80056be:	3b01      	subs	r3, #1
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1cc      	bne.n	800566e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	2200      	movs	r2, #0
 80056dc:	2140      	movs	r1, #64	; 0x40
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f001 f90c 	bl	80068fc <UART_WaitOnFlagUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e006      	b.n	80056fc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	e000      	b.n	80056fc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80056fa:	2302      	movs	r3, #2
  }
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3720      	adds	r7, #32
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	4613      	mov	r3, r2
 8005710:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005718:	2b20      	cmp	r3, #32
 800571a:	f040 80bc 	bne.w	8005896 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <HAL_UART_Receive_IT+0x26>
 8005724:	88fb      	ldrh	r3, [r7, #6]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e0b4      	b.n	8005898 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_UART_Receive_IT+0x38>
 8005738:	2302      	movs	r3, #2
 800573a:	e0ad      	b.n	8005898 <HAL_UART_Receive_IT+0x194>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	88fa      	ldrh	r2, [r7, #6]
 800574e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	88fa      	ldrh	r2, [r7, #6]
 8005756:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005768:	d10e      	bne.n	8005788 <HAL_UART_Receive_IT+0x84>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d105      	bne.n	800577e <HAL_UART_Receive_IT+0x7a>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005778:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800577c:	e02d      	b.n	80057da <HAL_UART_Receive_IT+0xd6>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	22ff      	movs	r2, #255	; 0xff
 8005782:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005786:	e028      	b.n	80057da <HAL_UART_Receive_IT+0xd6>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10d      	bne.n	80057ac <HAL_UART_Receive_IT+0xa8>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d104      	bne.n	80057a2 <HAL_UART_Receive_IT+0x9e>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	22ff      	movs	r2, #255	; 0xff
 800579c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057a0:	e01b      	b.n	80057da <HAL_UART_Receive_IT+0xd6>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	227f      	movs	r2, #127	; 0x7f
 80057a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057aa:	e016      	b.n	80057da <HAL_UART_Receive_IT+0xd6>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057b4:	d10d      	bne.n	80057d2 <HAL_UART_Receive_IT+0xce>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d104      	bne.n	80057c8 <HAL_UART_Receive_IT+0xc4>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	227f      	movs	r2, #127	; 0x7f
 80057c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057c6:	e008      	b.n	80057da <HAL_UART_Receive_IT+0xd6>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	223f      	movs	r2, #63	; 0x3f
 80057cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057d0:	e003      	b.n	80057da <HAL_UART_Receive_IT+0xd6>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2222      	movs	r2, #34	; 0x22
 80057e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0201 	orr.w	r2, r2, #1
 80057f8:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005802:	d12a      	bne.n	800585a <HAL_UART_Receive_IT+0x156>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800580a:	88fa      	ldrh	r2, [r7, #6]
 800580c:	429a      	cmp	r2, r3
 800580e:	d324      	bcc.n	800585a <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005818:	d107      	bne.n	800582a <HAL_UART_Receive_IT+0x126>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d103      	bne.n	800582a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4a1f      	ldr	r2, [pc, #124]	; (80058a4 <HAL_UART_Receive_IT+0x1a0>)
 8005826:	66da      	str	r2, [r3, #108]	; 0x6c
 8005828:	e002      	b.n	8005830 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4a1e      	ldr	r2, [pc, #120]	; (80058a8 <HAL_UART_Receive_IT+0x1a4>)
 800582e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005846:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689a      	ldr	r2, [r3, #8]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005856:	609a      	str	r2, [r3, #8]
 8005858:	e01b      	b.n	8005892 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005862:	d107      	bne.n	8005874 <HAL_UART_Receive_IT+0x170>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d103      	bne.n	8005874 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4a0f      	ldr	r2, [pc, #60]	; (80058ac <HAL_UART_Receive_IT+0x1a8>)
 8005870:	66da      	str	r2, [r3, #108]	; 0x6c
 8005872:	e002      	b.n	800587a <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4a0e      	ldr	r2, [pc, #56]	; (80058b0 <HAL_UART_Receive_IT+0x1ac>)
 8005878:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005890:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	e000      	b.n	8005898 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8005896:	2302      	movs	r3, #2
  }
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	08006d01 	.word	0x08006d01
 80058a8:	08006bf9 	.word	0x08006bf9
 80058ac:	08006b4f 	.word	0x08006b4f
 80058b0:	08006aa5 	.word	0x08006aa5

080058b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058d4:	69fa      	ldr	r2, [r7, #28]
 80058d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80058da:	4013      	ands	r3, r2
 80058dc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d118      	bne.n	8005916 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d013      	beq.n	8005916 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	f003 0320 	and.w	r3, r3, #32
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d104      	bne.n	8005902 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d009      	beq.n	8005916 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 8145 	beq.w	8005b96 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	4798      	blx	r3
      }
      return;
 8005914:	e13f      	b.n	8005b96 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 80e8 	beq.w	8005aee <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	4ba1      	ldr	r3, [pc, #644]	; (8005ba8 <HAL_UART_IRQHandler+0x2f4>)
 8005922:	4013      	ands	r3, r2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d105      	bne.n	8005934 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	4ba0      	ldr	r3, [pc, #640]	; (8005bac <HAL_UART_IRQHandler+0x2f8>)
 800592c:	4013      	ands	r3, r2
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 80dd 	beq.w	8005aee <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d010      	beq.n	8005960 <HAL_UART_IRQHandler+0xac>
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00b      	beq.n	8005960 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2201      	movs	r2, #1
 800594e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005956:	f043 0201 	orr.w	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d010      	beq.n	800598c <HAL_UART_IRQHandler+0xd8>
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00b      	beq.n	800598c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2202      	movs	r2, #2
 800597a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005982:	f043 0204 	orr.w	r2, r3, #4
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b00      	cmp	r3, #0
 8005994:	d010      	beq.n	80059b8 <HAL_UART_IRQHandler+0x104>
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00b      	beq.n	80059b8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2204      	movs	r2, #4
 80059a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ae:	f043 0202 	orr.w	r2, r3, #2
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	f003 0308 	and.w	r3, r3, #8
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d015      	beq.n	80059ee <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	f003 0320 	and.w	r3, r3, #32
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d104      	bne.n	80059d6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4b76      	ldr	r3, [pc, #472]	; (8005ba8 <HAL_UART_IRQHandler+0x2f4>)
 80059d0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00b      	beq.n	80059ee <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2208      	movs	r2, #8
 80059dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e4:	f043 0208 	orr.w	r2, r3, #8
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d011      	beq.n	8005a1c <HAL_UART_IRQHandler+0x168>
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00c      	beq.n	8005a1c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a12:	f043 0220 	orr.w	r2, r3, #32
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 80b9 	beq.w	8005b9a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	f003 0320 	and.w	r3, r3, #32
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d011      	beq.n	8005a56 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d104      	bne.n	8005a46 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d007      	beq.n	8005a56 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a68:	2b40      	cmp	r3, #64	; 0x40
 8005a6a:	d004      	beq.n	8005a76 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d031      	beq.n	8005ada <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 ffc0 	bl	80069fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	d123      	bne.n	8005ad2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a98:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d013      	beq.n	8005aca <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aa6:	4a42      	ldr	r2, [pc, #264]	; (8005bb0 <HAL_UART_IRQHandler+0x2fc>)
 8005aa8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fc f992 	bl	8001dd8 <HAL_DMA_Abort_IT>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d017      	beq.n	8005aea <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac8:	e00f      	b.n	8005aea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f872 	bl	8005bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad0:	e00b      	b.n	8005aea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f86e 	bl	8005bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad8:	e007      	b.n	8005aea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f86a 	bl	8005bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005ae8:	e057      	b.n	8005b9a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aea:	bf00      	nop
    return;
 8005aec:	e055      	b.n	8005b9a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00d      	beq.n	8005b14 <HAL_UART_IRQHandler+0x260>
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d008      	beq.n	8005b14 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f001 f97b 	bl	8006e08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b12:	e045      	b.n	8005ba0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d012      	beq.n	8005b44 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d104      	bne.n	8005b32 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d008      	beq.n	8005b44 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d031      	beq.n	8005b9e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3
    }
    return;
 8005b42:	e02c      	b.n	8005b9e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d008      	beq.n	8005b60 <HAL_UART_IRQHandler+0x2ac>
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 ff89 	bl	8006a70 <UART_EndTransmit_IT>
    return;
 8005b5e:	e01f      	b.n	8005ba0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d008      	beq.n	8005b7c <HAL_UART_IRQHandler+0x2c8>
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f001 f95b 	bl	8006e30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b7a:	e011      	b.n	8005ba0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00c      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x2ec>
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	da09      	bge.n	8005ba0 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f001 f945 	bl	8006e1c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b92:	bf00      	nop
 8005b94:	e004      	b.n	8005ba0 <HAL_UART_IRQHandler+0x2ec>
      return;
 8005b96:	bf00      	nop
 8005b98:	e002      	b.n	8005ba0 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005b9a:	bf00      	nop
 8005b9c:	e000      	b.n	8005ba0 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005b9e:	bf00      	nop
  }
}
 8005ba0:	3720      	adds	r7, #32
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	10000001 	.word	0x10000001
 8005bac:	04000120 	.word	0x04000120
 8005bb0:	08006a45 	.word	0x08006a45

08005bb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bc8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005bcc:	b08e      	sub	sp, #56	; 0x38
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	431a      	orrs	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	4bc1      	ldr	r3, [pc, #772]	; (8005f08 <UART_SetConfig+0x340>)
 8005c02:	4013      	ands	r3, r2
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	6812      	ldr	r2, [r2, #0]
 8005c08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4ab7      	ldr	r2, [pc, #732]	; (8005f0c <UART_SetConfig+0x344>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d004      	beq.n	8005c3e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	4bb2      	ldr	r3, [pc, #712]	; (8005f10 <UART_SetConfig+0x348>)
 8005c46:	4013      	ands	r3, r2
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	6812      	ldr	r2, [r2, #0]
 8005c4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c4e:	430b      	orrs	r3, r1
 8005c50:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	f023 010f 	bic.w	r1, r3, #15
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4aa9      	ldr	r2, [pc, #676]	; (8005f14 <UART_SetConfig+0x34c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d177      	bne.n	8005d62 <UART_SetConfig+0x19a>
 8005c72:	4ba9      	ldr	r3, [pc, #676]	; (8005f18 <UART_SetConfig+0x350>)
 8005c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c7a:	2b28      	cmp	r3, #40	; 0x28
 8005c7c:	d86c      	bhi.n	8005d58 <UART_SetConfig+0x190>
 8005c7e:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <UART_SetConfig+0xbc>)
 8005c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c84:	08005d29 	.word	0x08005d29
 8005c88:	08005d59 	.word	0x08005d59
 8005c8c:	08005d59 	.word	0x08005d59
 8005c90:	08005d59 	.word	0x08005d59
 8005c94:	08005d59 	.word	0x08005d59
 8005c98:	08005d59 	.word	0x08005d59
 8005c9c:	08005d59 	.word	0x08005d59
 8005ca0:	08005d59 	.word	0x08005d59
 8005ca4:	08005d31 	.word	0x08005d31
 8005ca8:	08005d59 	.word	0x08005d59
 8005cac:	08005d59 	.word	0x08005d59
 8005cb0:	08005d59 	.word	0x08005d59
 8005cb4:	08005d59 	.word	0x08005d59
 8005cb8:	08005d59 	.word	0x08005d59
 8005cbc:	08005d59 	.word	0x08005d59
 8005cc0:	08005d59 	.word	0x08005d59
 8005cc4:	08005d39 	.word	0x08005d39
 8005cc8:	08005d59 	.word	0x08005d59
 8005ccc:	08005d59 	.word	0x08005d59
 8005cd0:	08005d59 	.word	0x08005d59
 8005cd4:	08005d59 	.word	0x08005d59
 8005cd8:	08005d59 	.word	0x08005d59
 8005cdc:	08005d59 	.word	0x08005d59
 8005ce0:	08005d59 	.word	0x08005d59
 8005ce4:	08005d41 	.word	0x08005d41
 8005ce8:	08005d59 	.word	0x08005d59
 8005cec:	08005d59 	.word	0x08005d59
 8005cf0:	08005d59 	.word	0x08005d59
 8005cf4:	08005d59 	.word	0x08005d59
 8005cf8:	08005d59 	.word	0x08005d59
 8005cfc:	08005d59 	.word	0x08005d59
 8005d00:	08005d59 	.word	0x08005d59
 8005d04:	08005d49 	.word	0x08005d49
 8005d08:	08005d59 	.word	0x08005d59
 8005d0c:	08005d59 	.word	0x08005d59
 8005d10:	08005d59 	.word	0x08005d59
 8005d14:	08005d59 	.word	0x08005d59
 8005d18:	08005d59 	.word	0x08005d59
 8005d1c:	08005d59 	.word	0x08005d59
 8005d20:	08005d59 	.word	0x08005d59
 8005d24:	08005d51 	.word	0x08005d51
 8005d28:	2301      	movs	r3, #1
 8005d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d2e:	e233      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005d30:	2304      	movs	r3, #4
 8005d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d36:	e22f      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005d38:	2308      	movs	r3, #8
 8005d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d3e:	e22b      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005d40:	2310      	movs	r3, #16
 8005d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d46:	e227      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005d48:	2320      	movs	r3, #32
 8005d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d4e:	e223      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005d50:	2340      	movs	r3, #64	; 0x40
 8005d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d56:	e21f      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005d58:	2380      	movs	r3, #128	; 0x80
 8005d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d5e:	bf00      	nop
 8005d60:	e21a      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a6d      	ldr	r2, [pc, #436]	; (8005f1c <UART_SetConfig+0x354>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d132      	bne.n	8005dd2 <UART_SetConfig+0x20a>
 8005d6c:	4b6a      	ldr	r3, [pc, #424]	; (8005f18 <UART_SetConfig+0x350>)
 8005d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	2b05      	cmp	r3, #5
 8005d76:	d827      	bhi.n	8005dc8 <UART_SetConfig+0x200>
 8005d78:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <UART_SetConfig+0x1b8>)
 8005d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7e:	bf00      	nop
 8005d80:	08005d99 	.word	0x08005d99
 8005d84:	08005da1 	.word	0x08005da1
 8005d88:	08005da9 	.word	0x08005da9
 8005d8c:	08005db1 	.word	0x08005db1
 8005d90:	08005db9 	.word	0x08005db9
 8005d94:	08005dc1 	.word	0x08005dc1
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d9e:	e1fb      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005da0:	2304      	movs	r3, #4
 8005da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005da6:	e1f7      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005da8:	2308      	movs	r3, #8
 8005daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dae:	e1f3      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005db0:	2310      	movs	r3, #16
 8005db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005db6:	e1ef      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005db8:	2320      	movs	r3, #32
 8005dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dbe:	e1eb      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005dc0:	2340      	movs	r3, #64	; 0x40
 8005dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dc6:	e1e7      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005dc8:	2380      	movs	r3, #128	; 0x80
 8005dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dce:	bf00      	nop
 8005dd0:	e1e2      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a52      	ldr	r2, [pc, #328]	; (8005f20 <UART_SetConfig+0x358>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d132      	bne.n	8005e42 <UART_SetConfig+0x27a>
 8005ddc:	4b4e      	ldr	r3, [pc, #312]	; (8005f18 <UART_SetConfig+0x350>)
 8005dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	2b05      	cmp	r3, #5
 8005de6:	d827      	bhi.n	8005e38 <UART_SetConfig+0x270>
 8005de8:	a201      	add	r2, pc, #4	; (adr r2, 8005df0 <UART_SetConfig+0x228>)
 8005dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dee:	bf00      	nop
 8005df0:	08005e09 	.word	0x08005e09
 8005df4:	08005e11 	.word	0x08005e11
 8005df8:	08005e19 	.word	0x08005e19
 8005dfc:	08005e21 	.word	0x08005e21
 8005e00:	08005e29 	.word	0x08005e29
 8005e04:	08005e31 	.word	0x08005e31
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e0e:	e1c3      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005e10:	2304      	movs	r3, #4
 8005e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e16:	e1bf      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005e18:	2308      	movs	r3, #8
 8005e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e1e:	e1bb      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005e20:	2310      	movs	r3, #16
 8005e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e26:	e1b7      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005e28:	2320      	movs	r3, #32
 8005e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2e:	e1b3      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005e30:	2340      	movs	r3, #64	; 0x40
 8005e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e36:	e1af      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005e38:	2380      	movs	r3, #128	; 0x80
 8005e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3e:	bf00      	nop
 8005e40:	e1aa      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a37      	ldr	r2, [pc, #220]	; (8005f24 <UART_SetConfig+0x35c>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d132      	bne.n	8005eb2 <UART_SetConfig+0x2ea>
 8005e4c:	4b32      	ldr	r3, [pc, #200]	; (8005f18 <UART_SetConfig+0x350>)
 8005e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	2b05      	cmp	r3, #5
 8005e56:	d827      	bhi.n	8005ea8 <UART_SetConfig+0x2e0>
 8005e58:	a201      	add	r2, pc, #4	; (adr r2, 8005e60 <UART_SetConfig+0x298>)
 8005e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5e:	bf00      	nop
 8005e60:	08005e79 	.word	0x08005e79
 8005e64:	08005e81 	.word	0x08005e81
 8005e68:	08005e89 	.word	0x08005e89
 8005e6c:	08005e91 	.word	0x08005e91
 8005e70:	08005e99 	.word	0x08005e99
 8005e74:	08005ea1 	.word	0x08005ea1
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e7e:	e18b      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005e80:	2304      	movs	r3, #4
 8005e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e86:	e187      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005e88:	2308      	movs	r3, #8
 8005e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e8e:	e183      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005e90:	2310      	movs	r3, #16
 8005e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e96:	e17f      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005e98:	2320      	movs	r3, #32
 8005e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9e:	e17b      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005ea0:	2340      	movs	r3, #64	; 0x40
 8005ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea6:	e177      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005ea8:	2380      	movs	r3, #128	; 0x80
 8005eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eae:	bf00      	nop
 8005eb0:	e172      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a1c      	ldr	r2, [pc, #112]	; (8005f28 <UART_SetConfig+0x360>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d144      	bne.n	8005f46 <UART_SetConfig+0x37e>
 8005ebc:	4b16      	ldr	r3, [pc, #88]	; (8005f18 <UART_SetConfig+0x350>)
 8005ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec0:	f003 0307 	and.w	r3, r3, #7
 8005ec4:	2b05      	cmp	r3, #5
 8005ec6:	d839      	bhi.n	8005f3c <UART_SetConfig+0x374>
 8005ec8:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <UART_SetConfig+0x308>)
 8005eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ece:	bf00      	nop
 8005ed0:	08005ee9 	.word	0x08005ee9
 8005ed4:	08005ef1 	.word	0x08005ef1
 8005ed8:	08005ef9 	.word	0x08005ef9
 8005edc:	08005f01 	.word	0x08005f01
 8005ee0:	08005f2d 	.word	0x08005f2d
 8005ee4:	08005f35 	.word	0x08005f35
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eee:	e153      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ef6:	e14f      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005ef8:	2308      	movs	r3, #8
 8005efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005efe:	e14b      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005f00:	2310      	movs	r3, #16
 8005f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f06:	e147      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005f08:	cfff69f3 	.word	0xcfff69f3
 8005f0c:	58000c00 	.word	0x58000c00
 8005f10:	11fff4ff 	.word	0x11fff4ff
 8005f14:	40011000 	.word	0x40011000
 8005f18:	58024400 	.word	0x58024400
 8005f1c:	40004400 	.word	0x40004400
 8005f20:	40004800 	.word	0x40004800
 8005f24:	40004c00 	.word	0x40004c00
 8005f28:	40005000 	.word	0x40005000
 8005f2c:	2320      	movs	r3, #32
 8005f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f32:	e131      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005f34:	2340      	movs	r3, #64	; 0x40
 8005f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f3a:	e12d      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005f3c:	2380      	movs	r3, #128	; 0x80
 8005f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f42:	bf00      	nop
 8005f44:	e128      	b.n	8006198 <UART_SetConfig+0x5d0>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4ab6      	ldr	r2, [pc, #728]	; (8006224 <UART_SetConfig+0x65c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d178      	bne.n	8006042 <UART_SetConfig+0x47a>
 8005f50:	4bb5      	ldr	r3, [pc, #724]	; (8006228 <UART_SetConfig+0x660>)
 8005f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f58:	2b28      	cmp	r3, #40	; 0x28
 8005f5a:	d86d      	bhi.n	8006038 <UART_SetConfig+0x470>
 8005f5c:	a201      	add	r2, pc, #4	; (adr r2, 8005f64 <UART_SetConfig+0x39c>)
 8005f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f62:	bf00      	nop
 8005f64:	08006009 	.word	0x08006009
 8005f68:	08006039 	.word	0x08006039
 8005f6c:	08006039 	.word	0x08006039
 8005f70:	08006039 	.word	0x08006039
 8005f74:	08006039 	.word	0x08006039
 8005f78:	08006039 	.word	0x08006039
 8005f7c:	08006039 	.word	0x08006039
 8005f80:	08006039 	.word	0x08006039
 8005f84:	08006011 	.word	0x08006011
 8005f88:	08006039 	.word	0x08006039
 8005f8c:	08006039 	.word	0x08006039
 8005f90:	08006039 	.word	0x08006039
 8005f94:	08006039 	.word	0x08006039
 8005f98:	08006039 	.word	0x08006039
 8005f9c:	08006039 	.word	0x08006039
 8005fa0:	08006039 	.word	0x08006039
 8005fa4:	08006019 	.word	0x08006019
 8005fa8:	08006039 	.word	0x08006039
 8005fac:	08006039 	.word	0x08006039
 8005fb0:	08006039 	.word	0x08006039
 8005fb4:	08006039 	.word	0x08006039
 8005fb8:	08006039 	.word	0x08006039
 8005fbc:	08006039 	.word	0x08006039
 8005fc0:	08006039 	.word	0x08006039
 8005fc4:	08006021 	.word	0x08006021
 8005fc8:	08006039 	.word	0x08006039
 8005fcc:	08006039 	.word	0x08006039
 8005fd0:	08006039 	.word	0x08006039
 8005fd4:	08006039 	.word	0x08006039
 8005fd8:	08006039 	.word	0x08006039
 8005fdc:	08006039 	.word	0x08006039
 8005fe0:	08006039 	.word	0x08006039
 8005fe4:	08006029 	.word	0x08006029
 8005fe8:	08006039 	.word	0x08006039
 8005fec:	08006039 	.word	0x08006039
 8005ff0:	08006039 	.word	0x08006039
 8005ff4:	08006039 	.word	0x08006039
 8005ff8:	08006039 	.word	0x08006039
 8005ffc:	08006039 	.word	0x08006039
 8006000:	08006039 	.word	0x08006039
 8006004:	08006031 	.word	0x08006031
 8006008:	2301      	movs	r3, #1
 800600a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800600e:	e0c3      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006010:	2304      	movs	r3, #4
 8006012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006016:	e0bf      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006018:	2308      	movs	r3, #8
 800601a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800601e:	e0bb      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006020:	2310      	movs	r3, #16
 8006022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006026:	e0b7      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006028:	2320      	movs	r3, #32
 800602a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800602e:	e0b3      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006030:	2340      	movs	r3, #64	; 0x40
 8006032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006036:	e0af      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006038:	2380      	movs	r3, #128	; 0x80
 800603a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800603e:	bf00      	nop
 8006040:	e0aa      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a79      	ldr	r2, [pc, #484]	; (800622c <UART_SetConfig+0x664>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d132      	bne.n	80060b2 <UART_SetConfig+0x4ea>
 800604c:	4b76      	ldr	r3, [pc, #472]	; (8006228 <UART_SetConfig+0x660>)
 800604e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	2b05      	cmp	r3, #5
 8006056:	d827      	bhi.n	80060a8 <UART_SetConfig+0x4e0>
 8006058:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <UART_SetConfig+0x498>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	08006079 	.word	0x08006079
 8006064:	08006081 	.word	0x08006081
 8006068:	08006089 	.word	0x08006089
 800606c:	08006091 	.word	0x08006091
 8006070:	08006099 	.word	0x08006099
 8006074:	080060a1 	.word	0x080060a1
 8006078:	2300      	movs	r3, #0
 800607a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800607e:	e08b      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006080:	2304      	movs	r3, #4
 8006082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006086:	e087      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006088:	2308      	movs	r3, #8
 800608a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800608e:	e083      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006090:	2310      	movs	r3, #16
 8006092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006096:	e07f      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006098:	2320      	movs	r3, #32
 800609a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800609e:	e07b      	b.n	8006198 <UART_SetConfig+0x5d0>
 80060a0:	2340      	movs	r3, #64	; 0x40
 80060a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060a6:	e077      	b.n	8006198 <UART_SetConfig+0x5d0>
 80060a8:	2380      	movs	r3, #128	; 0x80
 80060aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ae:	bf00      	nop
 80060b0:	e072      	b.n	8006198 <UART_SetConfig+0x5d0>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a5e      	ldr	r2, [pc, #376]	; (8006230 <UART_SetConfig+0x668>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d132      	bne.n	8006122 <UART_SetConfig+0x55a>
 80060bc:	4b5a      	ldr	r3, [pc, #360]	; (8006228 <UART_SetConfig+0x660>)
 80060be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c0:	f003 0307 	and.w	r3, r3, #7
 80060c4:	2b05      	cmp	r3, #5
 80060c6:	d827      	bhi.n	8006118 <UART_SetConfig+0x550>
 80060c8:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <UART_SetConfig+0x508>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	080060e9 	.word	0x080060e9
 80060d4:	080060f1 	.word	0x080060f1
 80060d8:	080060f9 	.word	0x080060f9
 80060dc:	08006101 	.word	0x08006101
 80060e0:	08006109 	.word	0x08006109
 80060e4:	08006111 	.word	0x08006111
 80060e8:	2300      	movs	r3, #0
 80060ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ee:	e053      	b.n	8006198 <UART_SetConfig+0x5d0>
 80060f0:	2304      	movs	r3, #4
 80060f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060f6:	e04f      	b.n	8006198 <UART_SetConfig+0x5d0>
 80060f8:	2308      	movs	r3, #8
 80060fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060fe:	e04b      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006100:	2310      	movs	r3, #16
 8006102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006106:	e047      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006108:	2320      	movs	r3, #32
 800610a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800610e:	e043      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006110:	2340      	movs	r3, #64	; 0x40
 8006112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006116:	e03f      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006118:	2380      	movs	r3, #128	; 0x80
 800611a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800611e:	bf00      	nop
 8006120:	e03a      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a43      	ldr	r2, [pc, #268]	; (8006234 <UART_SetConfig+0x66c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d132      	bne.n	8006192 <UART_SetConfig+0x5ca>
 800612c:	4b3e      	ldr	r3, [pc, #248]	; (8006228 <UART_SetConfig+0x660>)
 800612e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	2b05      	cmp	r3, #5
 8006136:	d827      	bhi.n	8006188 <UART_SetConfig+0x5c0>
 8006138:	a201      	add	r2, pc, #4	; (adr r2, 8006140 <UART_SetConfig+0x578>)
 800613a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613e:	bf00      	nop
 8006140:	08006159 	.word	0x08006159
 8006144:	08006161 	.word	0x08006161
 8006148:	08006169 	.word	0x08006169
 800614c:	08006171 	.word	0x08006171
 8006150:	08006179 	.word	0x08006179
 8006154:	08006181 	.word	0x08006181
 8006158:	2302      	movs	r3, #2
 800615a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800615e:	e01b      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006160:	2304      	movs	r3, #4
 8006162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006166:	e017      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006168:	2308      	movs	r3, #8
 800616a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800616e:	e013      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006170:	2310      	movs	r3, #16
 8006172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006176:	e00f      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006178:	2320      	movs	r3, #32
 800617a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800617e:	e00b      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006180:	2340      	movs	r3, #64	; 0x40
 8006182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006186:	e007      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006188:	2380      	movs	r3, #128	; 0x80
 800618a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800618e:	bf00      	nop
 8006190:	e002      	b.n	8006198 <UART_SetConfig+0x5d0>
 8006192:	2380      	movs	r3, #128	; 0x80
 8006194:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a25      	ldr	r2, [pc, #148]	; (8006234 <UART_SetConfig+0x66c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	f040 80b8 	bne.w	8006314 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d019      	beq.n	80061e0 <UART_SetConfig+0x618>
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	dc04      	bgt.n	80061ba <UART_SetConfig+0x5f2>
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d009      	beq.n	80061c8 <UART_SetConfig+0x600>
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d00b      	beq.n	80061d0 <UART_SetConfig+0x608>
 80061b8:	e042      	b.n	8006240 <UART_SetConfig+0x678>
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	d02b      	beq.n	8006216 <UART_SetConfig+0x64e>
 80061be:	2b40      	cmp	r3, #64	; 0x40
 80061c0:	d02c      	beq.n	800621c <UART_SetConfig+0x654>
 80061c2:	2b10      	cmp	r3, #16
 80061c4:	d014      	beq.n	80061f0 <UART_SetConfig+0x628>
 80061c6:	e03b      	b.n	8006240 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80061c8:	f7fe fa8e 	bl	80046e8 <HAL_RCCEx_GetD3PCLK1Freq>
 80061cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80061ce:	e03d      	b.n	800624c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061d0:	f107 0314 	add.w	r3, r7, #20
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fe fa9d 	bl	8004714 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061de:	e035      	b.n	800624c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061e0:	f107 0308 	add.w	r3, r7, #8
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7fe fbe1 	bl	80049ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061ee:	e02d      	b.n	800624c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061f0:	4b0d      	ldr	r3, [pc, #52]	; (8006228 <UART_SetConfig+0x660>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d009      	beq.n	8006210 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061fc:	4b0a      	ldr	r3, [pc, #40]	; (8006228 <UART_SetConfig+0x660>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	08db      	lsrs	r3, r3, #3
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	4a0c      	ldr	r2, [pc, #48]	; (8006238 <UART_SetConfig+0x670>)
 8006208:	fa22 f303 	lsr.w	r3, r2, r3
 800620c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800620e:	e01d      	b.n	800624c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8006210:	4b09      	ldr	r3, [pc, #36]	; (8006238 <UART_SetConfig+0x670>)
 8006212:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006214:	e01a      	b.n	800624c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006216:	4b09      	ldr	r3, [pc, #36]	; (800623c <UART_SetConfig+0x674>)
 8006218:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800621a:	e017      	b.n	800624c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800621c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006220:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006222:	e013      	b.n	800624c <UART_SetConfig+0x684>
 8006224:	40011400 	.word	0x40011400
 8006228:	58024400 	.word	0x58024400
 800622c:	40007800 	.word	0x40007800
 8006230:	40007c00 	.word	0x40007c00
 8006234:	58000c00 	.word	0x58000c00
 8006238:	03d09000 	.word	0x03d09000
 800623c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800624a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800624c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 824d 	beq.w	80066ee <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	4aad      	ldr	r2, [pc, #692]	; (8006510 <UART_SetConfig+0x948>)
 800625a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800625e:	461a      	mov	r2, r3
 8006260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006262:	fbb3 f3f2 	udiv	r3, r3, r2
 8006266:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	4613      	mov	r3, r2
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	4413      	add	r3, r2
 8006272:	6a3a      	ldr	r2, [r7, #32]
 8006274:	429a      	cmp	r2, r3
 8006276:	d305      	bcc.n	8006284 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800627e:	6a3a      	ldr	r2, [r7, #32]
 8006280:	429a      	cmp	r2, r3
 8006282:	d903      	bls.n	800628c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800628a:	e230      	b.n	80066ee <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	4618      	mov	r0, r3
 8006290:	f04f 0100 	mov.w	r1, #0
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	4a9d      	ldr	r2, [pc, #628]	; (8006510 <UART_SetConfig+0x948>)
 800629a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f04f 0400 	mov.w	r4, #0
 80062a4:	461a      	mov	r2, r3
 80062a6:	4623      	mov	r3, r4
 80062a8:	f7fa f872 	bl	8000390 <__aeabi_uldivmod>
 80062ac:	4603      	mov	r3, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	4619      	mov	r1, r3
 80062b2:	4622      	mov	r2, r4
 80062b4:	f04f 0300 	mov.w	r3, #0
 80062b8:	f04f 0400 	mov.w	r4, #0
 80062bc:	0214      	lsls	r4, r2, #8
 80062be:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80062c2:	020b      	lsls	r3, r1, #8
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	6852      	ldr	r2, [r2, #4]
 80062c8:	0852      	lsrs	r2, r2, #1
 80062ca:	4611      	mov	r1, r2
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	eb13 0b01 	adds.w	fp, r3, r1
 80062d4:	eb44 0c02 	adc.w	ip, r4, r2
 80062d8:	4658      	mov	r0, fp
 80062da:	4661      	mov	r1, ip
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f04f 0400 	mov.w	r4, #0
 80062e4:	461a      	mov	r2, r3
 80062e6:	4623      	mov	r3, r4
 80062e8:	f7fa f852 	bl	8000390 <__aeabi_uldivmod>
 80062ec:	4603      	mov	r3, r0
 80062ee:	460c      	mov	r4, r1
 80062f0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062f8:	d308      	bcc.n	800630c <UART_SetConfig+0x744>
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006300:	d204      	bcs.n	800630c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006308:	60da      	str	r2, [r3, #12]
 800630a:	e1f0      	b.n	80066ee <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006312:	e1ec      	b.n	80066ee <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800631c:	f040 8100 	bne.w	8006520 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8006320:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006324:	2b40      	cmp	r3, #64	; 0x40
 8006326:	f200 80b7 	bhi.w	8006498 <UART_SetConfig+0x8d0>
 800632a:	a201      	add	r2, pc, #4	; (adr r2, 8006330 <UART_SetConfig+0x768>)
 800632c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006330:	08006435 	.word	0x08006435
 8006334:	0800643d 	.word	0x0800643d
 8006338:	08006499 	.word	0x08006499
 800633c:	08006499 	.word	0x08006499
 8006340:	08006445 	.word	0x08006445
 8006344:	08006499 	.word	0x08006499
 8006348:	08006499 	.word	0x08006499
 800634c:	08006499 	.word	0x08006499
 8006350:	08006455 	.word	0x08006455
 8006354:	08006499 	.word	0x08006499
 8006358:	08006499 	.word	0x08006499
 800635c:	08006499 	.word	0x08006499
 8006360:	08006499 	.word	0x08006499
 8006364:	08006499 	.word	0x08006499
 8006368:	08006499 	.word	0x08006499
 800636c:	08006499 	.word	0x08006499
 8006370:	08006465 	.word	0x08006465
 8006374:	08006499 	.word	0x08006499
 8006378:	08006499 	.word	0x08006499
 800637c:	08006499 	.word	0x08006499
 8006380:	08006499 	.word	0x08006499
 8006384:	08006499 	.word	0x08006499
 8006388:	08006499 	.word	0x08006499
 800638c:	08006499 	.word	0x08006499
 8006390:	08006499 	.word	0x08006499
 8006394:	08006499 	.word	0x08006499
 8006398:	08006499 	.word	0x08006499
 800639c:	08006499 	.word	0x08006499
 80063a0:	08006499 	.word	0x08006499
 80063a4:	08006499 	.word	0x08006499
 80063a8:	08006499 	.word	0x08006499
 80063ac:	08006499 	.word	0x08006499
 80063b0:	0800648b 	.word	0x0800648b
 80063b4:	08006499 	.word	0x08006499
 80063b8:	08006499 	.word	0x08006499
 80063bc:	08006499 	.word	0x08006499
 80063c0:	08006499 	.word	0x08006499
 80063c4:	08006499 	.word	0x08006499
 80063c8:	08006499 	.word	0x08006499
 80063cc:	08006499 	.word	0x08006499
 80063d0:	08006499 	.word	0x08006499
 80063d4:	08006499 	.word	0x08006499
 80063d8:	08006499 	.word	0x08006499
 80063dc:	08006499 	.word	0x08006499
 80063e0:	08006499 	.word	0x08006499
 80063e4:	08006499 	.word	0x08006499
 80063e8:	08006499 	.word	0x08006499
 80063ec:	08006499 	.word	0x08006499
 80063f0:	08006499 	.word	0x08006499
 80063f4:	08006499 	.word	0x08006499
 80063f8:	08006499 	.word	0x08006499
 80063fc:	08006499 	.word	0x08006499
 8006400:	08006499 	.word	0x08006499
 8006404:	08006499 	.word	0x08006499
 8006408:	08006499 	.word	0x08006499
 800640c:	08006499 	.word	0x08006499
 8006410:	08006499 	.word	0x08006499
 8006414:	08006499 	.word	0x08006499
 8006418:	08006499 	.word	0x08006499
 800641c:	08006499 	.word	0x08006499
 8006420:	08006499 	.word	0x08006499
 8006424:	08006499 	.word	0x08006499
 8006428:	08006499 	.word	0x08006499
 800642c:	08006499 	.word	0x08006499
 8006430:	08006491 	.word	0x08006491
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006434:	f7fd fa3e 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8006438:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800643a:	e033      	b.n	80064a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800643c:	f7fd fa50 	bl	80038e0 <HAL_RCC_GetPCLK2Freq>
 8006440:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006442:	e02f      	b.n	80064a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006444:	f107 0314 	add.w	r3, r7, #20
 8006448:	4618      	mov	r0, r3
 800644a:	f7fe f963 	bl	8004714 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006452:	e027      	b.n	80064a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006454:	f107 0308 	add.w	r3, r7, #8
 8006458:	4618      	mov	r0, r3
 800645a:	f7fe faa7 	bl	80049ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006462:	e01f      	b.n	80064a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006464:	4b2b      	ldr	r3, [pc, #172]	; (8006514 <UART_SetConfig+0x94c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b00      	cmp	r3, #0
 800646e:	d009      	beq.n	8006484 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006470:	4b28      	ldr	r3, [pc, #160]	; (8006514 <UART_SetConfig+0x94c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	08db      	lsrs	r3, r3, #3
 8006476:	f003 0303 	and.w	r3, r3, #3
 800647a:	4a27      	ldr	r2, [pc, #156]	; (8006518 <UART_SetConfig+0x950>)
 800647c:	fa22 f303 	lsr.w	r3, r2, r3
 8006480:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006482:	e00f      	b.n	80064a4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8006484:	4b24      	ldr	r3, [pc, #144]	; (8006518 <UART_SetConfig+0x950>)
 8006486:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006488:	e00c      	b.n	80064a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800648a:	4b24      	ldr	r3, [pc, #144]	; (800651c <UART_SetConfig+0x954>)
 800648c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800648e:	e009      	b.n	80064a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006494:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006496:	e005      	b.n	80064a4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80064a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 8121 	beq.w	80066ee <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	4a17      	ldr	r2, [pc, #92]	; (8006510 <UART_SetConfig+0x948>)
 80064b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064b6:	461a      	mov	r2, r3
 80064b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80064be:	005a      	lsls	r2, r3, #1
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	085b      	lsrs	r3, r3, #1
 80064c6:	441a      	add	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	2b0f      	cmp	r3, #15
 80064d8:	d916      	bls.n	8006508 <UART_SetConfig+0x940>
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e0:	d212      	bcs.n	8006508 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	f023 030f 	bic.w	r3, r3, #15
 80064ea:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	085b      	lsrs	r3, r3, #1
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064fa:	4313      	orrs	r3, r2
 80064fc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006504:	60da      	str	r2, [r3, #12]
 8006506:	e0f2      	b.n	80066ee <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800650e:	e0ee      	b.n	80066ee <UART_SetConfig+0xb26>
 8006510:	08009c38 	.word	0x08009c38
 8006514:	58024400 	.word	0x58024400
 8006518:	03d09000 	.word	0x03d09000
 800651c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8006520:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006524:	2b40      	cmp	r3, #64	; 0x40
 8006526:	f200 80b7 	bhi.w	8006698 <UART_SetConfig+0xad0>
 800652a:	a201      	add	r2, pc, #4	; (adr r2, 8006530 <UART_SetConfig+0x968>)
 800652c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006530:	08006635 	.word	0x08006635
 8006534:	0800663d 	.word	0x0800663d
 8006538:	08006699 	.word	0x08006699
 800653c:	08006699 	.word	0x08006699
 8006540:	08006645 	.word	0x08006645
 8006544:	08006699 	.word	0x08006699
 8006548:	08006699 	.word	0x08006699
 800654c:	08006699 	.word	0x08006699
 8006550:	08006655 	.word	0x08006655
 8006554:	08006699 	.word	0x08006699
 8006558:	08006699 	.word	0x08006699
 800655c:	08006699 	.word	0x08006699
 8006560:	08006699 	.word	0x08006699
 8006564:	08006699 	.word	0x08006699
 8006568:	08006699 	.word	0x08006699
 800656c:	08006699 	.word	0x08006699
 8006570:	08006665 	.word	0x08006665
 8006574:	08006699 	.word	0x08006699
 8006578:	08006699 	.word	0x08006699
 800657c:	08006699 	.word	0x08006699
 8006580:	08006699 	.word	0x08006699
 8006584:	08006699 	.word	0x08006699
 8006588:	08006699 	.word	0x08006699
 800658c:	08006699 	.word	0x08006699
 8006590:	08006699 	.word	0x08006699
 8006594:	08006699 	.word	0x08006699
 8006598:	08006699 	.word	0x08006699
 800659c:	08006699 	.word	0x08006699
 80065a0:	08006699 	.word	0x08006699
 80065a4:	08006699 	.word	0x08006699
 80065a8:	08006699 	.word	0x08006699
 80065ac:	08006699 	.word	0x08006699
 80065b0:	0800668b 	.word	0x0800668b
 80065b4:	08006699 	.word	0x08006699
 80065b8:	08006699 	.word	0x08006699
 80065bc:	08006699 	.word	0x08006699
 80065c0:	08006699 	.word	0x08006699
 80065c4:	08006699 	.word	0x08006699
 80065c8:	08006699 	.word	0x08006699
 80065cc:	08006699 	.word	0x08006699
 80065d0:	08006699 	.word	0x08006699
 80065d4:	08006699 	.word	0x08006699
 80065d8:	08006699 	.word	0x08006699
 80065dc:	08006699 	.word	0x08006699
 80065e0:	08006699 	.word	0x08006699
 80065e4:	08006699 	.word	0x08006699
 80065e8:	08006699 	.word	0x08006699
 80065ec:	08006699 	.word	0x08006699
 80065f0:	08006699 	.word	0x08006699
 80065f4:	08006699 	.word	0x08006699
 80065f8:	08006699 	.word	0x08006699
 80065fc:	08006699 	.word	0x08006699
 8006600:	08006699 	.word	0x08006699
 8006604:	08006699 	.word	0x08006699
 8006608:	08006699 	.word	0x08006699
 800660c:	08006699 	.word	0x08006699
 8006610:	08006699 	.word	0x08006699
 8006614:	08006699 	.word	0x08006699
 8006618:	08006699 	.word	0x08006699
 800661c:	08006699 	.word	0x08006699
 8006620:	08006699 	.word	0x08006699
 8006624:	08006699 	.word	0x08006699
 8006628:	08006699 	.word	0x08006699
 800662c:	08006699 	.word	0x08006699
 8006630:	08006691 	.word	0x08006691
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006634:	f7fd f93e 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8006638:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800663a:	e033      	b.n	80066a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800663c:	f7fd f950 	bl	80038e0 <HAL_RCC_GetPCLK2Freq>
 8006640:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006642:	e02f      	b.n	80066a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006644:	f107 0314 	add.w	r3, r7, #20
 8006648:	4618      	mov	r0, r3
 800664a:	f7fe f863 	bl	8004714 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006652:	e027      	b.n	80066a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006654:	f107 0308 	add.w	r3, r7, #8
 8006658:	4618      	mov	r0, r3
 800665a:	f7fe f9a7 	bl	80049ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006662:	e01f      	b.n	80066a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006664:	4b2c      	ldr	r3, [pc, #176]	; (8006718 <UART_SetConfig+0xb50>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0320 	and.w	r3, r3, #32
 800666c:	2b00      	cmp	r3, #0
 800666e:	d009      	beq.n	8006684 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006670:	4b29      	ldr	r3, [pc, #164]	; (8006718 <UART_SetConfig+0xb50>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	08db      	lsrs	r3, r3, #3
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	4a28      	ldr	r2, [pc, #160]	; (800671c <UART_SetConfig+0xb54>)
 800667c:	fa22 f303 	lsr.w	r3, r2, r3
 8006680:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006682:	e00f      	b.n	80066a4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8006684:	4b25      	ldr	r3, [pc, #148]	; (800671c <UART_SetConfig+0xb54>)
 8006686:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006688:	e00c      	b.n	80066a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800668a:	4b25      	ldr	r3, [pc, #148]	; (8006720 <UART_SetConfig+0xb58>)
 800668c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800668e:	e009      	b.n	80066a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006690:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006694:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006696:	e005      	b.n	80066a4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8006698:	2300      	movs	r3, #0
 800669a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80066a2:	bf00      	nop
    }

    if (pclk != 0U)
 80066a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d021      	beq.n	80066ee <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	4a1d      	ldr	r2, [pc, #116]	; (8006724 <UART_SetConfig+0xb5c>)
 80066b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066b4:	461a      	mov	r2, r3
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	085b      	lsrs	r3, r3, #1
 80066c2:	441a      	add	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d2:	2b0f      	cmp	r3, #15
 80066d4:	d908      	bls.n	80066e8 <UART_SetConfig+0xb20>
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066dc:	d204      	bcs.n	80066e8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066e4:	60da      	str	r2, [r3, #12]
 80066e6:	e002      	b.n	80066ee <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800670a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800670e:	4618      	mov	r0, r3
 8006710:	3738      	adds	r7, #56	; 0x38
 8006712:	46bd      	mov	sp, r7
 8006714:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006718:	58024400 	.word	0x58024400
 800671c:	03d09000 	.word	0x03d09000
 8006720:	003d0900 	.word	0x003d0900
 8006724:	08009c38 	.word	0x08009c38

08006728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00a      	beq.n	8006752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00a      	beq.n	8006774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00a      	beq.n	8006796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	f003 0308 	and.w	r3, r3, #8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067bc:	f003 0310 	and.w	r3, r3, #16
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00a      	beq.n	80067da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067de:	f003 0320 	and.w	r3, r3, #32
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006804:	2b00      	cmp	r3, #0
 8006806:	d01a      	beq.n	800683e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006826:	d10a      	bne.n	800683e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	605a      	str	r2, [r3, #4]
  }
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af02      	add	r7, sp, #8
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800687c:	f7fb f962 	bl	8001b44 <HAL_GetTick>
 8006880:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0308 	and.w	r3, r3, #8
 800688c:	2b08      	cmp	r3, #8
 800688e:	d10e      	bne.n	80068ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f82c 	bl	80068fc <UART_WaitOnFlagUntilTimeout>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e022      	b.n	80068f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	d10e      	bne.n	80068da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f816 	bl	80068fc <UART_WaitOnFlagUntilTimeout>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e00c      	b.n	80068f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2220      	movs	r2, #32
 80068de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2220      	movs	r2, #32
 80068e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	603b      	str	r3, [r7, #0]
 8006908:	4613      	mov	r3, r2
 800690a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800690c:	e062      	b.n	80069d4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006914:	d05e      	beq.n	80069d4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006916:	f7fb f915 	bl	8001b44 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	429a      	cmp	r2, r3
 8006924:	d302      	bcc.n	800692c <UART_WaitOnFlagUntilTimeout+0x30>
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d11d      	bne.n	8006968 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800693a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689a      	ldr	r2, [r3, #8]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0201 	bic.w	r2, r2, #1
 800694a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2220      	movs	r2, #32
 8006950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2220      	movs	r2, #32
 8006958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e045      	b.n	80069f4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0304 	and.w	r3, r3, #4
 8006972:	2b00      	cmp	r3, #0
 8006974:	d02e      	beq.n	80069d4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006984:	d126      	bne.n	80069d4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800698e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800699e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689a      	ldr	r2, [r3, #8]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f022 0201 	bic.w	r2, r2, #1
 80069ae:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2220      	movs	r2, #32
 80069b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2220      	movs	r2, #32
 80069c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e00f      	b.n	80069f4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	69da      	ldr	r2, [r3, #28]
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	4013      	ands	r3, r2
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	bf0c      	ite	eq
 80069e4:	2301      	moveq	r3, #1
 80069e6:	2300      	movne	r3, #0
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	461a      	mov	r2, r3
 80069ec:	79fb      	ldrb	r3, [r7, #7]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d08d      	beq.n	800690e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a12:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6899      	ldr	r1, [r3, #8]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	4b08      	ldr	r3, [pc, #32]	; (8006a40 <UART_EndRxTransfer+0x44>)
 8006a20:	400b      	ands	r3, r1
 8006a22:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	effffffe 	.word	0xeffffffe

08006a44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f7ff f8a6 	bl	8005bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a68:	bf00      	nop
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a86:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7fa fd68 	bl	800156c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a9c:	bf00      	nop
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ab2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aba:	2b22      	cmp	r3, #34	; 0x22
 8006abc:	d13b      	bne.n	8006b36 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ac6:	89bb      	ldrh	r3, [r7, #12]
 8006ac8:	b2d9      	uxtb	r1, r3
 8006aca:	89fb      	ldrh	r3, [r7, #14]
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad2:	400a      	ands	r2, r1
 8006ad4:	b2d2      	uxtb	r2, r2
 8006ad6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	3b01      	subs	r3, #1
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d122      	bne.n	8006b46 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b0e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f022 0201 	bic.w	r2, r2, #1
 8006b1e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7fa fd2c 	bl	800158c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b34:	e007      	b.n	8006b46 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	699a      	ldr	r2, [r3, #24]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f042 0208 	orr.w	r2, r2, #8
 8006b44:	619a      	str	r2, [r3, #24]
}
 8006b46:	bf00      	nop
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b5c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b64:	2b22      	cmp	r3, #34	; 0x22
 8006b66:	d13b      	bne.n	8006be0 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b74:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b76:	89ba      	ldrh	r2, [r7, #12]
 8006b78:	89fb      	ldrh	r3, [r7, #14]
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b86:	1c9a      	adds	r2, r3, #2
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	3b01      	subs	r3, #1
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d122      	bne.n	8006bf0 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006bb8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0201 	bic.w	r2, r2, #1
 8006bc8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7fa fcd7 	bl	800158c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bde:	e007      	b.n	8006bf0 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699a      	ldr	r2, [r3, #24]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0208 	orr.w	r2, r2, #8
 8006bee:	619a      	str	r2, [r3, #24]
}
 8006bf0:	bf00      	nop
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c06:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c0e:	2b22      	cmp	r3, #34	; 0x22
 8006c10:	d166      	bne.n	8006ce0 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c18:	81fb      	strh	r3, [r7, #14]
 8006c1a:	e03d      	b.n	8006c98 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c24:	893b      	ldrh	r3, [r7, #8]
 8006c26:	b2d9      	uxtb	r1, r3
 8006c28:	89bb      	ldrh	r3, [r7, #12]
 8006c2a:	b2da      	uxtb	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c30:	400a      	ands	r2, r1
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3a:	1c5a      	adds	r2, r3, #1
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d119      	bne.n	8006c92 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c6c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6899      	ldr	r1, [r3, #8]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	4b1f      	ldr	r3, [pc, #124]	; (8006cf8 <UART_RxISR_8BIT_FIFOEN+0x100>)
 8006c7a:	400b      	ands	r3, r1
 8006c7c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2220      	movs	r2, #32
 8006c82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7fa fc7d 	bl	800158c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006c92:	89fb      	ldrh	r3, [r7, #14]
 8006c94:	3b01      	subs	r3, #1
 8006c96:	81fb      	strh	r3, [r7, #14]
 8006c98:	89fb      	ldrh	r3, [r7, #14]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1be      	bne.n	8006c1c <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ca4:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006ca6:	897b      	ldrh	r3, [r7, #10]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d021      	beq.n	8006cf0 <UART_RxISR_8BIT_FIFOEN+0xf8>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006cb2:	897a      	ldrh	r2, [r7, #10]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d21b      	bcs.n	8006cf0 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689a      	ldr	r2, [r3, #8]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006cc6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a0c      	ldr	r2, [pc, #48]	; (8006cfc <UART_RxISR_8BIT_FIFOEN+0x104>)
 8006ccc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f042 0220 	orr.w	r2, r2, #32
 8006cdc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cde:	e007      	b.n	8006cf0 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	699a      	ldr	r2, [r3, #24]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0208 	orr.w	r2, r2, #8
 8006cee:	619a      	str	r2, [r3, #24]
}
 8006cf0:	bf00      	nop
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	effffffe 	.word	0xeffffffe
 8006cfc:	08006aa5 	.word	0x08006aa5

08006d00 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d0e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d16:	2b22      	cmp	r3, #34	; 0x22
 8006d18:	d166      	bne.n	8006de8 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006d20:	82fb      	strh	r3, [r7, #22]
 8006d22:	e03d      	b.n	8006da0 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2a:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d30:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006d32:	8a3a      	ldrh	r2, [r7, #16]
 8006d34:	8abb      	ldrh	r3, [r7, #20]
 8006d36:	4013      	ands	r3, r2
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d42:	1c9a      	adds	r2, r3, #2
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	3b01      	subs	r3, #1
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d119      	bne.n	8006d9a <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d74:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6899      	ldr	r1, [r3, #8]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	4b1f      	ldr	r3, [pc, #124]	; (8006e00 <UART_RxISR_16BIT_FIFOEN+0x100>)
 8006d82:	400b      	ands	r3, r1
 8006d84:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7fa fbf9 	bl	800158c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006d9a:	8afb      	ldrh	r3, [r7, #22]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	82fb      	strh	r3, [r7, #22]
 8006da0:	8afb      	ldrh	r3, [r7, #22]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1be      	bne.n	8006d24 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006dac:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006dae:	8a7b      	ldrh	r3, [r7, #18]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d021      	beq.n	8006df8 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006dba:	8a7a      	ldrh	r2, [r7, #18]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d21b      	bcs.n	8006df8 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689a      	ldr	r2, [r3, #8]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006dce:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a0c      	ldr	r2, [pc, #48]	; (8006e04 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8006dd4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f042 0220 	orr.w	r2, r2, #32
 8006de4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006de6:	e007      	b.n	8006df8 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	699a      	ldr	r2, [r3, #24]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f042 0208 	orr.w	r2, r2, #8
 8006df6:	619a      	str	r2, [r3, #24]
}
 8006df8:	bf00      	nop
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	effffffe 	.word	0xeffffffe
 8006e04:	08006b4f 	.word	0x08006b4f

08006e08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d101      	bne.n	8006e5a <HAL_UARTEx_DisableFifoMode+0x16>
 8006e56:	2302      	movs	r3, #2
 8006e58:	e027      	b.n	8006eaa <HAL_UARTEx_DisableFifoMode+0x66>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2224      	movs	r2, #36	; 0x24
 8006e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0201 	bic.w	r2, r2, #1
 8006e80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006e88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d101      	bne.n	8006ece <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006eca:	2302      	movs	r3, #2
 8006ecc:	e02d      	b.n	8006f2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2224      	movs	r2, #36	; 0x24
 8006eda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 0201 	bic.w	r2, r2, #1
 8006ef4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f850 	bl	8006fb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b084      	sub	sp, #16
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d101      	bne.n	8006f4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f46:	2302      	movs	r3, #2
 8006f48:	e02d      	b.n	8006fa6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2224      	movs	r2, #36	; 0x24
 8006f56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0201 	bic.w	r2, r2, #1
 8006f70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f812 	bl	8006fb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2220      	movs	r2, #32
 8006f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
	...

08006fb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b089      	sub	sp, #36	; 0x24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006fb8:	4a2f      	ldr	r2, [pc, #188]	; (8007078 <UARTEx_SetNbDataToProcess+0xc8>)
 8006fba:	f107 0314 	add.w	r3, r7, #20
 8006fbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fc2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006fc6:	4a2d      	ldr	r2, [pc, #180]	; (800707c <UARTEx_SetNbDataToProcess+0xcc>)
 8006fc8:	f107 030c 	add.w	r3, r7, #12
 8006fcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fd0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d108      	bne.n	8006fee <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006fec:	e03d      	b.n	800706a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006fee:	2310      	movs	r3, #16
 8006ff0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ff2:	2310      	movs	r3, #16
 8006ff4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	0e5b      	lsrs	r3, r3, #25
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	f003 0307 	and.w	r3, r3, #7
 8007004:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	0f5b      	lsrs	r3, r3, #29
 800700e:	b2db      	uxtb	r3, r3
 8007010:	f003 0307 	and.w	r3, r3, #7
 8007014:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007016:	7fbb      	ldrb	r3, [r7, #30]
 8007018:	7f3a      	ldrb	r2, [r7, #28]
 800701a:	f107 0120 	add.w	r1, r7, #32
 800701e:	440a      	add	r2, r1
 8007020:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007024:	fb02 f303 	mul.w	r3, r2, r3
 8007028:	7f3a      	ldrb	r2, [r7, #28]
 800702a:	f107 0120 	add.w	r1, r7, #32
 800702e:	440a      	add	r2, r1
 8007030:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007034:	fb93 f3f2 	sdiv	r3, r3, r2
 8007038:	b29a      	uxth	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007040:	7ffb      	ldrb	r3, [r7, #31]
 8007042:	7f7a      	ldrb	r2, [r7, #29]
 8007044:	f107 0120 	add.w	r1, r7, #32
 8007048:	440a      	add	r2, r1
 800704a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800704e:	fb02 f303 	mul.w	r3, r2, r3
 8007052:	7f7a      	ldrb	r2, [r7, #29]
 8007054:	f107 0120 	add.w	r1, r7, #32
 8007058:	440a      	add	r2, r1
 800705a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800705e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007062:	b29a      	uxth	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800706a:	bf00      	nop
 800706c:	3724      	adds	r7, #36	; 0x24
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	08009c0c 	.word	0x08009c0c
 800707c:	08009c14 	.word	0x08009c14

08007080 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007080:	b084      	sub	sp, #16
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	f107 001c 	add.w	r0, r7, #28
 800708e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	2b01      	cmp	r3, #1
 8007096:	d120      	bne.n	80070da <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68da      	ldr	r2, [r3, #12]
 80070a8:	4b25      	ldr	r3, [pc, #148]	; (8007140 <USB_CoreInit+0xc0>)
 80070aa:	4013      	ands	r3, r2
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80070bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d105      	bne.n	80070ce <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fa4c 	bl	800756c <USB_CoreReset>
 80070d4:	4603      	mov	r3, r0
 80070d6:	73fb      	strb	r3, [r7, #15]
 80070d8:	e01a      	b.n	8007110 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fa40 	bl	800756c <USB_CoreReset>
 80070ec:	4603      	mov	r3, r0
 80070ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80070f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d106      	bne.n	8007104 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	639a      	str	r2, [r3, #56]	; 0x38
 8007102:	e005      	b.n	8007110 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007108:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007112:	2b01      	cmp	r3, #1
 8007114:	d10b      	bne.n	800712e <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f043 0206 	orr.w	r2, r3, #6
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f043 0220 	orr.w	r2, r3, #32
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800712e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800713a:	b004      	add	sp, #16
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	ffbdffbf 	.word	0xffbdffbf

08007144 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f023 0201 	bic.w	r2, r3, #1
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	460b      	mov	r3, r1
 8007170:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800717e:	78fb      	ldrb	r3, [r7, #3]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d106      	bne.n	8007192 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	60da      	str	r2, [r3, #12]
 8007190:	e00b      	b.n	80071aa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007192:	78fb      	ldrb	r3, [r7, #3]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d106      	bne.n	80071a6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	60da      	str	r2, [r3, #12]
 80071a4:	e001      	b.n	80071aa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e003      	b.n	80071b2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80071aa:	2032      	movs	r0, #50	; 0x32
 80071ac:	f7fa fcd6 	bl	8001b5c <HAL_Delay>

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071bc:	b084      	sub	sp, #16
 80071be:	b580      	push	{r7, lr}
 80071c0:	b086      	sub	sp, #24
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80071ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80071d6:	2300      	movs	r3, #0
 80071d8:	613b      	str	r3, [r7, #16]
 80071da:	e009      	b.n	80071f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	3340      	adds	r3, #64	; 0x40
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	2200      	movs	r2, #0
 80071e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	3301      	adds	r3, #1
 80071ee:	613b      	str	r3, [r7, #16]
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2b0e      	cmp	r3, #14
 80071f4:	d9f2      	bls.n	80071dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80071f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d11c      	bne.n	8007236 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800720a:	f043 0302 	orr.w	r3, r3, #2
 800720e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007214:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	e005      	b.n	8007242 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007248:	461a      	mov	r2, r3
 800724a:	2300      	movs	r3, #0
 800724c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007254:	4619      	mov	r1, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800725c:	461a      	mov	r2, r3
 800725e:	680b      	ldr	r3, [r1, #0]
 8007260:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007264:	2b01      	cmp	r3, #1
 8007266:	d10c      	bne.n	8007282 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726a:	2b00      	cmp	r3, #0
 800726c:	d104      	bne.n	8007278 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800726e:	2100      	movs	r1, #0
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f949 	bl	8007508 <USB_SetDevSpeed>
 8007276:	e008      	b.n	800728a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007278:	2101      	movs	r1, #1
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f944 	bl	8007508 <USB_SetDevSpeed>
 8007280:	e003      	b.n	800728a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007282:	2103      	movs	r1, #3
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f93f 	bl	8007508 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800728a:	2110      	movs	r1, #16
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f8f3 	bl	8007478 <USB_FlushTxFifo>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f911 	bl	80074c4 <USB_FlushRxFifo>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b2:	461a      	mov	r2, r3
 80072b4:	2300      	movs	r3, #0
 80072b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072be:	461a      	mov	r2, r3
 80072c0:	2300      	movs	r3, #0
 80072c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ca:	461a      	mov	r2, r3
 80072cc:	2300      	movs	r3, #0
 80072ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072d0:	2300      	movs	r3, #0
 80072d2:	613b      	str	r3, [r7, #16]
 80072d4:	e043      	b.n	800735e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072ec:	d118      	bne.n	8007320 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10a      	bne.n	800730a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007300:	461a      	mov	r2, r3
 8007302:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007306:	6013      	str	r3, [r2, #0]
 8007308:	e013      	b.n	8007332 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007316:	461a      	mov	r2, r3
 8007318:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800731c:	6013      	str	r3, [r2, #0]
 800731e:	e008      	b.n	8007332 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	015a      	lsls	r2, r3, #5
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4413      	add	r3, r2
 8007328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732c:	461a      	mov	r2, r3
 800732e:	2300      	movs	r3, #0
 8007330:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733e:	461a      	mov	r2, r3
 8007340:	2300      	movs	r3, #0
 8007342:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007350:	461a      	mov	r2, r3
 8007352:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007356:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	3301      	adds	r3, #1
 800735c:	613b      	str	r3, [r7, #16]
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	429a      	cmp	r2, r3
 8007364:	d3b7      	bcc.n	80072d6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007366:	2300      	movs	r3, #0
 8007368:	613b      	str	r3, [r7, #16]
 800736a:	e043      	b.n	80073f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800737e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007382:	d118      	bne.n	80073b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10a      	bne.n	80073a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007396:	461a      	mov	r2, r3
 8007398:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	e013      	b.n	80073c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ac:	461a      	mov	r2, r3
 80073ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	e008      	b.n	80073c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	015a      	lsls	r2, r3, #5
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c2:	461a      	mov	r2, r3
 80073c4:	2300      	movs	r3, #0
 80073c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d4:	461a      	mov	r2, r3
 80073d6:	2300      	movs	r3, #0
 80073d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e6:	461a      	mov	r2, r3
 80073e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	3301      	adds	r3, #1
 80073f2:	613b      	str	r3, [r7, #16]
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d3b7      	bcc.n	800736c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800740a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800740e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800741c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	2b00      	cmp	r3, #0
 8007422:	d105      	bne.n	8007430 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	f043 0210 	orr.w	r2, r3, #16
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	699a      	ldr	r2, [r3, #24]
 8007434:	4b0e      	ldr	r3, [pc, #56]	; (8007470 <USB_DevInit+0x2b4>)
 8007436:	4313      	orrs	r3, r2
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800743c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d005      	beq.n	800744e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f043 0208 	orr.w	r2, r3, #8
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800744e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007450:	2b01      	cmp	r3, #1
 8007452:	d105      	bne.n	8007460 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	699a      	ldr	r2, [r3, #24]
 8007458:	4b06      	ldr	r3, [pc, #24]	; (8007474 <USB_DevInit+0x2b8>)
 800745a:	4313      	orrs	r3, r2
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007460:	7dfb      	ldrb	r3, [r7, #23]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800746c:	b004      	add	sp, #16
 800746e:	4770      	bx	lr
 8007470:	803c3800 	.word	0x803c3800
 8007474:	40000004 	.word	0x40000004

08007478 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	019b      	lsls	r3, r3, #6
 800748a:	f043 0220 	orr.w	r2, r3, #32
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	3301      	adds	r3, #1
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	4a09      	ldr	r2, [pc, #36]	; (80074c0 <USB_FlushTxFifo+0x48>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d901      	bls.n	80074a4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e006      	b.n	80074b2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	2b20      	cmp	r3, #32
 80074ae:	d0f0      	beq.n	8007492 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	00030d40 	.word	0x00030d40

080074c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80074cc:	2300      	movs	r3, #0
 80074ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2210      	movs	r2, #16
 80074d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	3301      	adds	r3, #1
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4a09      	ldr	r2, [pc, #36]	; (8007504 <USB_FlushRxFifo+0x40>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d901      	bls.n	80074e8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e006      	b.n	80074f6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	f003 0310 	and.w	r3, r3, #16
 80074f0:	2b10      	cmp	r3, #16
 80074f2:	d0f0      	beq.n	80074d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	00030d40 	.word	0x00030d40

08007508 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	78fb      	ldrb	r3, [r7, #3]
 8007522:	68f9      	ldr	r1, [r7, #12]
 8007524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007528:	4313      	orrs	r3, r2
 800752a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007554:	f043 0302 	orr.w	r3, r3, #2
 8007558:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800755a:	2003      	movs	r0, #3
 800755c:	f7fa fafe 	bl	8001b5c <HAL_Delay>

  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	3301      	adds	r3, #1
 800757c:	60fb      	str	r3, [r7, #12]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	4a13      	ldr	r2, [pc, #76]	; (80075d0 <USB_CoreReset+0x64>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d901      	bls.n	800758a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e01b      	b.n	80075c2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	daf2      	bge.n	8007578 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007592:	2300      	movs	r3, #0
 8007594:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f043 0201 	orr.w	r2, r3, #1
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3301      	adds	r3, #1
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4a09      	ldr	r2, [pc, #36]	; (80075d0 <USB_CoreReset+0x64>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d901      	bls.n	80075b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e006      	b.n	80075c2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d0f0      	beq.n	80075a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3714      	adds	r7, #20
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	00030d40 	.word	0x00030d40

080075d4 <arm_mean_f32>:
 80075d4:	b430      	push	{r4, r5}
 80075d6:	088d      	lsrs	r5, r1, #2
 80075d8:	d02d      	beq.n	8007636 <arm_mean_f32+0x62>
 80075da:	f100 0310 	add.w	r3, r0, #16
 80075de:	462c      	mov	r4, r5
 80075e0:	eddf 7a16 	vldr	s15, [pc, #88]	; 800763c <arm_mean_f32+0x68>
 80075e4:	ed13 7a04 	vldr	s14, [r3, #-16]
 80075e8:	3c01      	subs	r4, #1
 80075ea:	ed13 6a03 	vldr	s12, [r3, #-12]
 80075ee:	f103 0310 	add.w	r3, r3, #16
 80075f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075f6:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 80075fa:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 80075fe:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800760a:	d1eb      	bne.n	80075e4 <arm_mean_f32+0x10>
 800760c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8007610:	f011 0303 	ands.w	r3, r1, #3
 8007614:	d005      	beq.n	8007622 <arm_mean_f32+0x4e>
 8007616:	ecb0 7a01 	vldmia	r0!, {s14}
 800761a:	3b01      	subs	r3, #1
 800761c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007620:	d1f9      	bne.n	8007616 <arm_mean_f32+0x42>
 8007622:	ee07 1a10 	vmov	s14, r1
 8007626:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800762a:	bc30      	pop	{r4, r5}
 800762c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007630:	edc2 6a00 	vstr	s13, [r2]
 8007634:	4770      	bx	lr
 8007636:	eddf 7a01 	vldr	s15, [pc, #4]	; 800763c <arm_mean_f32+0x68>
 800763a:	e7e9      	b.n	8007610 <arm_mean_f32+0x3c>
 800763c:	00000000 	.word	0x00000000

08007640 <arm_max_f32>:
 8007640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007644:	1e4d      	subs	r5, r1, #1
 8007646:	f100 0c04 	add.w	ip, r0, #4
 800764a:	edd0 7a00 	vldr	s15, [r0]
 800764e:	ea5f 0995 	movs.w	r9, r5, lsr #2
 8007652:	d056      	beq.n	8007702 <arm_max_f32+0xc2>
 8007654:	3014      	adds	r0, #20
 8007656:	46c8      	mov	r8, r9
 8007658:	2404      	movs	r4, #4
 800765a:	2600      	movs	r6, #0
 800765c:	ed10 6a04 	vldr	s12, [r0, #-16]
 8007660:	f1a4 0a03 	sub.w	sl, r4, #3
 8007664:	ed50 6a03 	vldr	s13, [r0, #-12]
 8007668:	f1a4 0e02 	sub.w	lr, r4, #2
 800766c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8007670:	ed10 7a02 	vldr	s14, [r0, #-8]
 8007674:	ed50 5a01 	vldr	s11, [r0, #-4]
 8007678:	1e67      	subs	r7, r4, #1
 800767a:	3010      	adds	r0, #16
 800767c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007680:	bfc8      	it	gt
 8007682:	eef0 7a46 	vmovgt.f32	s15, s12
 8007686:	bfc8      	it	gt
 8007688:	4656      	movgt	r6, sl
 800768a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800768e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007692:	bf48      	it	mi
 8007694:	eef0 7a66 	vmovmi.f32	s15, s13
 8007698:	bf48      	it	mi
 800769a:	4676      	movmi	r6, lr
 800769c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076a4:	bf48      	it	mi
 80076a6:	eef0 7a47 	vmovmi.f32	s15, s14
 80076aa:	bf48      	it	mi
 80076ac:	463e      	movmi	r6, r7
 80076ae:	eef4 7ae5 	vcmpe.f32	s15, s11
 80076b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b6:	bf48      	it	mi
 80076b8:	4626      	movmi	r6, r4
 80076ba:	bf48      	it	mi
 80076bc:	eef0 7a65 	vmovmi.f32	s15, s11
 80076c0:	f1b8 0801 	subs.w	r8, r8, #1
 80076c4:	f104 0404 	add.w	r4, r4, #4
 80076c8:	d1c8      	bne.n	800765c <arm_max_f32+0x1c>
 80076ca:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 80076ce:	f015 0003 	ands.w	r0, r5, #3
 80076d2:	d018      	beq.n	8007706 <arm_max_f32+0xc6>
 80076d4:	1a08      	subs	r0, r1, r0
 80076d6:	ecbc 7a01 	vldmia	ip!, {s14}
 80076da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e2:	bfc8      	it	gt
 80076e4:	4606      	movgt	r6, r0
 80076e6:	f100 0001 	add.w	r0, r0, #1
 80076ea:	bfd8      	it	le
 80076ec:	eeb0 7a67 	vmovle.f32	s14, s15
 80076f0:	4281      	cmp	r1, r0
 80076f2:	eef0 7a47 	vmov.f32	s15, s14
 80076f6:	d1ee      	bne.n	80076d6 <arm_max_f32+0x96>
 80076f8:	ed82 7a00 	vstr	s14, [r2]
 80076fc:	601e      	str	r6, [r3, #0]
 80076fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007702:	464e      	mov	r6, r9
 8007704:	e7e3      	b.n	80076ce <arm_max_f32+0x8e>
 8007706:	eeb0 7a67 	vmov.f32	s14, s15
 800770a:	e7f5      	b.n	80076f8 <arm_max_f32+0xb8>

0800770c <__errno>:
 800770c:	4b01      	ldr	r3, [pc, #4]	; (8007714 <__errno+0x8>)
 800770e:	6818      	ldr	r0, [r3, #0]
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	20000014 	.word	0x20000014

08007718 <__libc_init_array>:
 8007718:	b570      	push	{r4, r5, r6, lr}
 800771a:	4e0d      	ldr	r6, [pc, #52]	; (8007750 <__libc_init_array+0x38>)
 800771c:	4c0d      	ldr	r4, [pc, #52]	; (8007754 <__libc_init_array+0x3c>)
 800771e:	1ba4      	subs	r4, r4, r6
 8007720:	10a4      	asrs	r4, r4, #2
 8007722:	2500      	movs	r5, #0
 8007724:	42a5      	cmp	r5, r4
 8007726:	d109      	bne.n	800773c <__libc_init_array+0x24>
 8007728:	4e0b      	ldr	r6, [pc, #44]	; (8007758 <__libc_init_array+0x40>)
 800772a:	4c0c      	ldr	r4, [pc, #48]	; (800775c <__libc_init_array+0x44>)
 800772c:	f002 fa1a 	bl	8009b64 <_init>
 8007730:	1ba4      	subs	r4, r4, r6
 8007732:	10a4      	asrs	r4, r4, #2
 8007734:	2500      	movs	r5, #0
 8007736:	42a5      	cmp	r5, r4
 8007738:	d105      	bne.n	8007746 <__libc_init_array+0x2e>
 800773a:	bd70      	pop	{r4, r5, r6, pc}
 800773c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007740:	4798      	blx	r3
 8007742:	3501      	adds	r5, #1
 8007744:	e7ee      	b.n	8007724 <__libc_init_array+0xc>
 8007746:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800774a:	4798      	blx	r3
 800774c:	3501      	adds	r5, #1
 800774e:	e7f2      	b.n	8007736 <__libc_init_array+0x1e>
 8007750:	08009f00 	.word	0x08009f00
 8007754:	08009f00 	.word	0x08009f00
 8007758:	08009f00 	.word	0x08009f00
 800775c:	08009f04 	.word	0x08009f04

08007760 <malloc>:
 8007760:	4b02      	ldr	r3, [pc, #8]	; (800776c <malloc+0xc>)
 8007762:	4601      	mov	r1, r0
 8007764:	6818      	ldr	r0, [r3, #0]
 8007766:	f000 b861 	b.w	800782c <_malloc_r>
 800776a:	bf00      	nop
 800776c:	20000014 	.word	0x20000014

08007770 <free>:
 8007770:	4b02      	ldr	r3, [pc, #8]	; (800777c <free+0xc>)
 8007772:	4601      	mov	r1, r0
 8007774:	6818      	ldr	r0, [r3, #0]
 8007776:	f000 b80b 	b.w	8007790 <_free_r>
 800777a:	bf00      	nop
 800777c:	20000014 	.word	0x20000014

08007780 <memset>:
 8007780:	4402      	add	r2, r0
 8007782:	4603      	mov	r3, r0
 8007784:	4293      	cmp	r3, r2
 8007786:	d100      	bne.n	800778a <memset+0xa>
 8007788:	4770      	bx	lr
 800778a:	f803 1b01 	strb.w	r1, [r3], #1
 800778e:	e7f9      	b.n	8007784 <memset+0x4>

08007790 <_free_r>:
 8007790:	b538      	push	{r3, r4, r5, lr}
 8007792:	4605      	mov	r5, r0
 8007794:	2900      	cmp	r1, #0
 8007796:	d045      	beq.n	8007824 <_free_r+0x94>
 8007798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800779c:	1f0c      	subs	r4, r1, #4
 800779e:	2b00      	cmp	r3, #0
 80077a0:	bfb8      	it	lt
 80077a2:	18e4      	addlt	r4, r4, r3
 80077a4:	f001 faf9 	bl	8008d9a <__malloc_lock>
 80077a8:	4a1f      	ldr	r2, [pc, #124]	; (8007828 <_free_r+0x98>)
 80077aa:	6813      	ldr	r3, [r2, #0]
 80077ac:	4610      	mov	r0, r2
 80077ae:	b933      	cbnz	r3, 80077be <_free_r+0x2e>
 80077b0:	6063      	str	r3, [r4, #4]
 80077b2:	6014      	str	r4, [r2, #0]
 80077b4:	4628      	mov	r0, r5
 80077b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077ba:	f001 baef 	b.w	8008d9c <__malloc_unlock>
 80077be:	42a3      	cmp	r3, r4
 80077c0:	d90c      	bls.n	80077dc <_free_r+0x4c>
 80077c2:	6821      	ldr	r1, [r4, #0]
 80077c4:	1862      	adds	r2, r4, r1
 80077c6:	4293      	cmp	r3, r2
 80077c8:	bf04      	itt	eq
 80077ca:	681a      	ldreq	r2, [r3, #0]
 80077cc:	685b      	ldreq	r3, [r3, #4]
 80077ce:	6063      	str	r3, [r4, #4]
 80077d0:	bf04      	itt	eq
 80077d2:	1852      	addeq	r2, r2, r1
 80077d4:	6022      	streq	r2, [r4, #0]
 80077d6:	6004      	str	r4, [r0, #0]
 80077d8:	e7ec      	b.n	80077b4 <_free_r+0x24>
 80077da:	4613      	mov	r3, r2
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	b10a      	cbz	r2, 80077e4 <_free_r+0x54>
 80077e0:	42a2      	cmp	r2, r4
 80077e2:	d9fa      	bls.n	80077da <_free_r+0x4a>
 80077e4:	6819      	ldr	r1, [r3, #0]
 80077e6:	1858      	adds	r0, r3, r1
 80077e8:	42a0      	cmp	r0, r4
 80077ea:	d10b      	bne.n	8007804 <_free_r+0x74>
 80077ec:	6820      	ldr	r0, [r4, #0]
 80077ee:	4401      	add	r1, r0
 80077f0:	1858      	adds	r0, r3, r1
 80077f2:	4282      	cmp	r2, r0
 80077f4:	6019      	str	r1, [r3, #0]
 80077f6:	d1dd      	bne.n	80077b4 <_free_r+0x24>
 80077f8:	6810      	ldr	r0, [r2, #0]
 80077fa:	6852      	ldr	r2, [r2, #4]
 80077fc:	605a      	str	r2, [r3, #4]
 80077fe:	4401      	add	r1, r0
 8007800:	6019      	str	r1, [r3, #0]
 8007802:	e7d7      	b.n	80077b4 <_free_r+0x24>
 8007804:	d902      	bls.n	800780c <_free_r+0x7c>
 8007806:	230c      	movs	r3, #12
 8007808:	602b      	str	r3, [r5, #0]
 800780a:	e7d3      	b.n	80077b4 <_free_r+0x24>
 800780c:	6820      	ldr	r0, [r4, #0]
 800780e:	1821      	adds	r1, r4, r0
 8007810:	428a      	cmp	r2, r1
 8007812:	bf04      	itt	eq
 8007814:	6811      	ldreq	r1, [r2, #0]
 8007816:	6852      	ldreq	r2, [r2, #4]
 8007818:	6062      	str	r2, [r4, #4]
 800781a:	bf04      	itt	eq
 800781c:	1809      	addeq	r1, r1, r0
 800781e:	6021      	streq	r1, [r4, #0]
 8007820:	605c      	str	r4, [r3, #4]
 8007822:	e7c7      	b.n	80077b4 <_free_r+0x24>
 8007824:	bd38      	pop	{r3, r4, r5, pc}
 8007826:	bf00      	nop
 8007828:	20006240 	.word	0x20006240

0800782c <_malloc_r>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	1ccd      	adds	r5, r1, #3
 8007830:	f025 0503 	bic.w	r5, r5, #3
 8007834:	3508      	adds	r5, #8
 8007836:	2d0c      	cmp	r5, #12
 8007838:	bf38      	it	cc
 800783a:	250c      	movcc	r5, #12
 800783c:	2d00      	cmp	r5, #0
 800783e:	4606      	mov	r6, r0
 8007840:	db01      	blt.n	8007846 <_malloc_r+0x1a>
 8007842:	42a9      	cmp	r1, r5
 8007844:	d903      	bls.n	800784e <_malloc_r+0x22>
 8007846:	230c      	movs	r3, #12
 8007848:	6033      	str	r3, [r6, #0]
 800784a:	2000      	movs	r0, #0
 800784c:	bd70      	pop	{r4, r5, r6, pc}
 800784e:	f001 faa4 	bl	8008d9a <__malloc_lock>
 8007852:	4a21      	ldr	r2, [pc, #132]	; (80078d8 <_malloc_r+0xac>)
 8007854:	6814      	ldr	r4, [r2, #0]
 8007856:	4621      	mov	r1, r4
 8007858:	b991      	cbnz	r1, 8007880 <_malloc_r+0x54>
 800785a:	4c20      	ldr	r4, [pc, #128]	; (80078dc <_malloc_r+0xb0>)
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	b91b      	cbnz	r3, 8007868 <_malloc_r+0x3c>
 8007860:	4630      	mov	r0, r6
 8007862:	f000 fc79 	bl	8008158 <_sbrk_r>
 8007866:	6020      	str	r0, [r4, #0]
 8007868:	4629      	mov	r1, r5
 800786a:	4630      	mov	r0, r6
 800786c:	f000 fc74 	bl	8008158 <_sbrk_r>
 8007870:	1c43      	adds	r3, r0, #1
 8007872:	d124      	bne.n	80078be <_malloc_r+0x92>
 8007874:	230c      	movs	r3, #12
 8007876:	6033      	str	r3, [r6, #0]
 8007878:	4630      	mov	r0, r6
 800787a:	f001 fa8f 	bl	8008d9c <__malloc_unlock>
 800787e:	e7e4      	b.n	800784a <_malloc_r+0x1e>
 8007880:	680b      	ldr	r3, [r1, #0]
 8007882:	1b5b      	subs	r3, r3, r5
 8007884:	d418      	bmi.n	80078b8 <_malloc_r+0x8c>
 8007886:	2b0b      	cmp	r3, #11
 8007888:	d90f      	bls.n	80078aa <_malloc_r+0x7e>
 800788a:	600b      	str	r3, [r1, #0]
 800788c:	50cd      	str	r5, [r1, r3]
 800788e:	18cc      	adds	r4, r1, r3
 8007890:	4630      	mov	r0, r6
 8007892:	f001 fa83 	bl	8008d9c <__malloc_unlock>
 8007896:	f104 000b 	add.w	r0, r4, #11
 800789a:	1d23      	adds	r3, r4, #4
 800789c:	f020 0007 	bic.w	r0, r0, #7
 80078a0:	1ac3      	subs	r3, r0, r3
 80078a2:	d0d3      	beq.n	800784c <_malloc_r+0x20>
 80078a4:	425a      	negs	r2, r3
 80078a6:	50e2      	str	r2, [r4, r3]
 80078a8:	e7d0      	b.n	800784c <_malloc_r+0x20>
 80078aa:	428c      	cmp	r4, r1
 80078ac:	684b      	ldr	r3, [r1, #4]
 80078ae:	bf16      	itet	ne
 80078b0:	6063      	strne	r3, [r4, #4]
 80078b2:	6013      	streq	r3, [r2, #0]
 80078b4:	460c      	movne	r4, r1
 80078b6:	e7eb      	b.n	8007890 <_malloc_r+0x64>
 80078b8:	460c      	mov	r4, r1
 80078ba:	6849      	ldr	r1, [r1, #4]
 80078bc:	e7cc      	b.n	8007858 <_malloc_r+0x2c>
 80078be:	1cc4      	adds	r4, r0, #3
 80078c0:	f024 0403 	bic.w	r4, r4, #3
 80078c4:	42a0      	cmp	r0, r4
 80078c6:	d005      	beq.n	80078d4 <_malloc_r+0xa8>
 80078c8:	1a21      	subs	r1, r4, r0
 80078ca:	4630      	mov	r0, r6
 80078cc:	f000 fc44 	bl	8008158 <_sbrk_r>
 80078d0:	3001      	adds	r0, #1
 80078d2:	d0cf      	beq.n	8007874 <_malloc_r+0x48>
 80078d4:	6025      	str	r5, [r4, #0]
 80078d6:	e7db      	b.n	8007890 <_malloc_r+0x64>
 80078d8:	20006240 	.word	0x20006240
 80078dc:	20006244 	.word	0x20006244

080078e0 <__cvt>:
 80078e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078e2:	ed2d 8b02 	vpush	{d8}
 80078e6:	eeb0 8b40 	vmov.f64	d8, d0
 80078ea:	b085      	sub	sp, #20
 80078ec:	4617      	mov	r7, r2
 80078ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80078f0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80078f2:	ee18 2a90 	vmov	r2, s17
 80078f6:	f025 0520 	bic.w	r5, r5, #32
 80078fa:	2a00      	cmp	r2, #0
 80078fc:	bfb6      	itet	lt
 80078fe:	222d      	movlt	r2, #45	; 0x2d
 8007900:	2200      	movge	r2, #0
 8007902:	eeb1 8b40 	vneglt.f64	d8, d0
 8007906:	2d46      	cmp	r5, #70	; 0x46
 8007908:	460c      	mov	r4, r1
 800790a:	701a      	strb	r2, [r3, #0]
 800790c:	d004      	beq.n	8007918 <__cvt+0x38>
 800790e:	2d45      	cmp	r5, #69	; 0x45
 8007910:	d100      	bne.n	8007914 <__cvt+0x34>
 8007912:	3401      	adds	r4, #1
 8007914:	2102      	movs	r1, #2
 8007916:	e000      	b.n	800791a <__cvt+0x3a>
 8007918:	2103      	movs	r1, #3
 800791a:	ab03      	add	r3, sp, #12
 800791c:	9301      	str	r3, [sp, #4]
 800791e:	ab02      	add	r3, sp, #8
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	4622      	mov	r2, r4
 8007924:	4633      	mov	r3, r6
 8007926:	eeb0 0b48 	vmov.f64	d0, d8
 800792a:	f000 fcd1 	bl	80082d0 <_dtoa_r>
 800792e:	2d47      	cmp	r5, #71	; 0x47
 8007930:	d101      	bne.n	8007936 <__cvt+0x56>
 8007932:	07fb      	lsls	r3, r7, #31
 8007934:	d51e      	bpl.n	8007974 <__cvt+0x94>
 8007936:	2d46      	cmp	r5, #70	; 0x46
 8007938:	eb00 0304 	add.w	r3, r0, r4
 800793c:	d10c      	bne.n	8007958 <__cvt+0x78>
 800793e:	7802      	ldrb	r2, [r0, #0]
 8007940:	2a30      	cmp	r2, #48	; 0x30
 8007942:	d107      	bne.n	8007954 <__cvt+0x74>
 8007944:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800794c:	bf1c      	itt	ne
 800794e:	f1c4 0401 	rsbne	r4, r4, #1
 8007952:	6034      	strne	r4, [r6, #0]
 8007954:	6832      	ldr	r2, [r6, #0]
 8007956:	4413      	add	r3, r2
 8007958:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800795c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007960:	d007      	beq.n	8007972 <__cvt+0x92>
 8007962:	2130      	movs	r1, #48	; 0x30
 8007964:	9a03      	ldr	r2, [sp, #12]
 8007966:	429a      	cmp	r2, r3
 8007968:	d204      	bcs.n	8007974 <__cvt+0x94>
 800796a:	1c54      	adds	r4, r2, #1
 800796c:	9403      	str	r4, [sp, #12]
 800796e:	7011      	strb	r1, [r2, #0]
 8007970:	e7f8      	b.n	8007964 <__cvt+0x84>
 8007972:	9303      	str	r3, [sp, #12]
 8007974:	9b03      	ldr	r3, [sp, #12]
 8007976:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007978:	1a1b      	subs	r3, r3, r0
 800797a:	6013      	str	r3, [r2, #0]
 800797c:	b005      	add	sp, #20
 800797e:	ecbd 8b02 	vpop	{d8}
 8007982:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007984 <__exponent>:
 8007984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007986:	2900      	cmp	r1, #0
 8007988:	4604      	mov	r4, r0
 800798a:	bfba      	itte	lt
 800798c:	4249      	neglt	r1, r1
 800798e:	232d      	movlt	r3, #45	; 0x2d
 8007990:	232b      	movge	r3, #43	; 0x2b
 8007992:	2909      	cmp	r1, #9
 8007994:	f804 2b02 	strb.w	r2, [r4], #2
 8007998:	7043      	strb	r3, [r0, #1]
 800799a:	dd20      	ble.n	80079de <__exponent+0x5a>
 800799c:	f10d 0307 	add.w	r3, sp, #7
 80079a0:	461f      	mov	r7, r3
 80079a2:	260a      	movs	r6, #10
 80079a4:	fb91 f5f6 	sdiv	r5, r1, r6
 80079a8:	fb06 1115 	mls	r1, r6, r5, r1
 80079ac:	3130      	adds	r1, #48	; 0x30
 80079ae:	2d09      	cmp	r5, #9
 80079b0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80079b4:	f103 32ff 	add.w	r2, r3, #4294967295
 80079b8:	4629      	mov	r1, r5
 80079ba:	dc09      	bgt.n	80079d0 <__exponent+0x4c>
 80079bc:	3130      	adds	r1, #48	; 0x30
 80079be:	3b02      	subs	r3, #2
 80079c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80079c4:	42bb      	cmp	r3, r7
 80079c6:	4622      	mov	r2, r4
 80079c8:	d304      	bcc.n	80079d4 <__exponent+0x50>
 80079ca:	1a10      	subs	r0, r2, r0
 80079cc:	b003      	add	sp, #12
 80079ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079d0:	4613      	mov	r3, r2
 80079d2:	e7e7      	b.n	80079a4 <__exponent+0x20>
 80079d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079d8:	f804 2b01 	strb.w	r2, [r4], #1
 80079dc:	e7f2      	b.n	80079c4 <__exponent+0x40>
 80079de:	2330      	movs	r3, #48	; 0x30
 80079e0:	4419      	add	r1, r3
 80079e2:	7083      	strb	r3, [r0, #2]
 80079e4:	1d02      	adds	r2, r0, #4
 80079e6:	70c1      	strb	r1, [r0, #3]
 80079e8:	e7ef      	b.n	80079ca <__exponent+0x46>
 80079ea:	0000      	movs	r0, r0
 80079ec:	0000      	movs	r0, r0
	...

080079f0 <_printf_float>:
 80079f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f4:	b08d      	sub	sp, #52	; 0x34
 80079f6:	460c      	mov	r4, r1
 80079f8:	4616      	mov	r6, r2
 80079fa:	461f      	mov	r7, r3
 80079fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007a00:	4605      	mov	r5, r0
 8007a02:	f001 f9b1 	bl	8008d68 <_localeconv_r>
 8007a06:	f8d0 b000 	ldr.w	fp, [r0]
 8007a0a:	4658      	mov	r0, fp
 8007a0c:	f7f8 fc68 	bl	80002e0 <strlen>
 8007a10:	2300      	movs	r3, #0
 8007a12:	930a      	str	r3, [sp, #40]	; 0x28
 8007a14:	f8d8 3000 	ldr.w	r3, [r8]
 8007a18:	9005      	str	r0, [sp, #20]
 8007a1a:	3307      	adds	r3, #7
 8007a1c:	f023 0307 	bic.w	r3, r3, #7
 8007a20:	f103 0108 	add.w	r1, r3, #8
 8007a24:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007a28:	6822      	ldr	r2, [r4, #0]
 8007a2a:	f8c8 1000 	str.w	r1, [r8]
 8007a2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a32:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007a36:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8007cc0 <_printf_float+0x2d0>
 8007a3a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007a3e:	eeb0 6bc0 	vabs.f64	d6, d0
 8007a42:	eeb4 6b47 	vcmp.f64	d6, d7
 8007a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a4a:	dd24      	ble.n	8007a96 <_printf_float+0xa6>
 8007a4c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a54:	d502      	bpl.n	8007a5c <_printf_float+0x6c>
 8007a56:	232d      	movs	r3, #45	; 0x2d
 8007a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a5c:	499a      	ldr	r1, [pc, #616]	; (8007cc8 <_printf_float+0x2d8>)
 8007a5e:	4b9b      	ldr	r3, [pc, #620]	; (8007ccc <_printf_float+0x2dc>)
 8007a60:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007a64:	bf8c      	ite	hi
 8007a66:	4688      	movhi	r8, r1
 8007a68:	4698      	movls	r8, r3
 8007a6a:	f022 0204 	bic.w	r2, r2, #4
 8007a6e:	2303      	movs	r3, #3
 8007a70:	6123      	str	r3, [r4, #16]
 8007a72:	6022      	str	r2, [r4, #0]
 8007a74:	f04f 0a00 	mov.w	sl, #0
 8007a78:	9700      	str	r7, [sp, #0]
 8007a7a:	4633      	mov	r3, r6
 8007a7c:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a7e:	4621      	mov	r1, r4
 8007a80:	4628      	mov	r0, r5
 8007a82:	f000 f9e1 	bl	8007e48 <_printf_common>
 8007a86:	3001      	adds	r0, #1
 8007a88:	f040 8089 	bne.w	8007b9e <_printf_float+0x1ae>
 8007a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a90:	b00d      	add	sp, #52	; 0x34
 8007a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a96:	eeb4 0b40 	vcmp.f64	d0, d0
 8007a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a9e:	d702      	bvc.n	8007aa6 <_printf_float+0xb6>
 8007aa0:	498b      	ldr	r1, [pc, #556]	; (8007cd0 <_printf_float+0x2e0>)
 8007aa2:	4b8c      	ldr	r3, [pc, #560]	; (8007cd4 <_printf_float+0x2e4>)
 8007aa4:	e7dc      	b.n	8007a60 <_printf_float+0x70>
 8007aa6:	6861      	ldr	r1, [r4, #4]
 8007aa8:	1c4b      	adds	r3, r1, #1
 8007aaa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007aae:	ab0a      	add	r3, sp, #40	; 0x28
 8007ab0:	a809      	add	r0, sp, #36	; 0x24
 8007ab2:	d13b      	bne.n	8007b2c <_printf_float+0x13c>
 8007ab4:	2106      	movs	r1, #6
 8007ab6:	6061      	str	r1, [r4, #4]
 8007ab8:	f04f 0c00 	mov.w	ip, #0
 8007abc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8007ac0:	e9cd 0900 	strd	r0, r9, [sp]
 8007ac4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007ac8:	6022      	str	r2, [r4, #0]
 8007aca:	6861      	ldr	r1, [r4, #4]
 8007acc:	4628      	mov	r0, r5
 8007ace:	f7ff ff07 	bl	80078e0 <__cvt>
 8007ad2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8007ad6:	2b47      	cmp	r3, #71	; 0x47
 8007ad8:	4680      	mov	r8, r0
 8007ada:	d109      	bne.n	8007af0 <_printf_float+0x100>
 8007adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ade:	1cd8      	adds	r0, r3, #3
 8007ae0:	db02      	blt.n	8007ae8 <_printf_float+0xf8>
 8007ae2:	6862      	ldr	r2, [r4, #4]
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	dd47      	ble.n	8007b78 <_printf_float+0x188>
 8007ae8:	f1a9 0902 	sub.w	r9, r9, #2
 8007aec:	fa5f f989 	uxtb.w	r9, r9
 8007af0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007af4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007af6:	d824      	bhi.n	8007b42 <_printf_float+0x152>
 8007af8:	3901      	subs	r1, #1
 8007afa:	464a      	mov	r2, r9
 8007afc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b00:	9109      	str	r1, [sp, #36]	; 0x24
 8007b02:	f7ff ff3f 	bl	8007984 <__exponent>
 8007b06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b08:	1813      	adds	r3, r2, r0
 8007b0a:	2a01      	cmp	r2, #1
 8007b0c:	4682      	mov	sl, r0
 8007b0e:	6123      	str	r3, [r4, #16]
 8007b10:	dc02      	bgt.n	8007b18 <_printf_float+0x128>
 8007b12:	6822      	ldr	r2, [r4, #0]
 8007b14:	07d1      	lsls	r1, r2, #31
 8007b16:	d501      	bpl.n	8007b1c <_printf_float+0x12c>
 8007b18:	3301      	adds	r3, #1
 8007b1a:	6123      	str	r3, [r4, #16]
 8007b1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d0a9      	beq.n	8007a78 <_printf_float+0x88>
 8007b24:	232d      	movs	r3, #45	; 0x2d
 8007b26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b2a:	e7a5      	b.n	8007a78 <_printf_float+0x88>
 8007b2c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8007b30:	f000 8178 	beq.w	8007e24 <_printf_float+0x434>
 8007b34:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007b38:	d1be      	bne.n	8007ab8 <_printf_float+0xc8>
 8007b3a:	2900      	cmp	r1, #0
 8007b3c:	d1bc      	bne.n	8007ab8 <_printf_float+0xc8>
 8007b3e:	2101      	movs	r1, #1
 8007b40:	e7b9      	b.n	8007ab6 <_printf_float+0xc6>
 8007b42:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007b46:	d119      	bne.n	8007b7c <_printf_float+0x18c>
 8007b48:	2900      	cmp	r1, #0
 8007b4a:	6863      	ldr	r3, [r4, #4]
 8007b4c:	dd0c      	ble.n	8007b68 <_printf_float+0x178>
 8007b4e:	6121      	str	r1, [r4, #16]
 8007b50:	b913      	cbnz	r3, 8007b58 <_printf_float+0x168>
 8007b52:	6822      	ldr	r2, [r4, #0]
 8007b54:	07d2      	lsls	r2, r2, #31
 8007b56:	d502      	bpl.n	8007b5e <_printf_float+0x16e>
 8007b58:	3301      	adds	r3, #1
 8007b5a:	440b      	add	r3, r1
 8007b5c:	6123      	str	r3, [r4, #16]
 8007b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b60:	65a3      	str	r3, [r4, #88]	; 0x58
 8007b62:	f04f 0a00 	mov.w	sl, #0
 8007b66:	e7d9      	b.n	8007b1c <_printf_float+0x12c>
 8007b68:	b913      	cbnz	r3, 8007b70 <_printf_float+0x180>
 8007b6a:	6822      	ldr	r2, [r4, #0]
 8007b6c:	07d0      	lsls	r0, r2, #31
 8007b6e:	d501      	bpl.n	8007b74 <_printf_float+0x184>
 8007b70:	3302      	adds	r3, #2
 8007b72:	e7f3      	b.n	8007b5c <_printf_float+0x16c>
 8007b74:	2301      	movs	r3, #1
 8007b76:	e7f1      	b.n	8007b5c <_printf_float+0x16c>
 8007b78:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007b7c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007b80:	4293      	cmp	r3, r2
 8007b82:	db05      	blt.n	8007b90 <_printf_float+0x1a0>
 8007b84:	6822      	ldr	r2, [r4, #0]
 8007b86:	6123      	str	r3, [r4, #16]
 8007b88:	07d1      	lsls	r1, r2, #31
 8007b8a:	d5e8      	bpl.n	8007b5e <_printf_float+0x16e>
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	e7e5      	b.n	8007b5c <_printf_float+0x16c>
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	bfd4      	ite	le
 8007b94:	f1c3 0302 	rsble	r3, r3, #2
 8007b98:	2301      	movgt	r3, #1
 8007b9a:	4413      	add	r3, r2
 8007b9c:	e7de      	b.n	8007b5c <_printf_float+0x16c>
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	055a      	lsls	r2, r3, #21
 8007ba2:	d407      	bmi.n	8007bb4 <_printf_float+0x1c4>
 8007ba4:	6923      	ldr	r3, [r4, #16]
 8007ba6:	4642      	mov	r2, r8
 8007ba8:	4631      	mov	r1, r6
 8007baa:	4628      	mov	r0, r5
 8007bac:	47b8      	blx	r7
 8007bae:	3001      	adds	r0, #1
 8007bb0:	d12a      	bne.n	8007c08 <_printf_float+0x218>
 8007bb2:	e76b      	b.n	8007a8c <_printf_float+0x9c>
 8007bb4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007bb8:	f240 80de 	bls.w	8007d78 <_printf_float+0x388>
 8007bbc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007bc0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc8:	d133      	bne.n	8007c32 <_printf_float+0x242>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	4a42      	ldr	r2, [pc, #264]	; (8007cd8 <_printf_float+0x2e8>)
 8007bce:	4631      	mov	r1, r6
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	47b8      	blx	r7
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	f43f af59 	beq.w	8007a8c <_printf_float+0x9c>
 8007bda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bde:	429a      	cmp	r2, r3
 8007be0:	db02      	blt.n	8007be8 <_printf_float+0x1f8>
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	07d8      	lsls	r0, r3, #31
 8007be6:	d50f      	bpl.n	8007c08 <_printf_float+0x218>
 8007be8:	9b05      	ldr	r3, [sp, #20]
 8007bea:	465a      	mov	r2, fp
 8007bec:	4631      	mov	r1, r6
 8007bee:	4628      	mov	r0, r5
 8007bf0:	47b8      	blx	r7
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	f43f af4a 	beq.w	8007a8c <_printf_float+0x9c>
 8007bf8:	f04f 0800 	mov.w	r8, #0
 8007bfc:	f104 091a 	add.w	r9, r4, #26
 8007c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c02:	3b01      	subs	r3, #1
 8007c04:	4543      	cmp	r3, r8
 8007c06:	dc09      	bgt.n	8007c1c <_printf_float+0x22c>
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	079b      	lsls	r3, r3, #30
 8007c0c:	f100 8105 	bmi.w	8007e1a <_printf_float+0x42a>
 8007c10:	68e0      	ldr	r0, [r4, #12]
 8007c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c14:	4298      	cmp	r0, r3
 8007c16:	bfb8      	it	lt
 8007c18:	4618      	movlt	r0, r3
 8007c1a:	e739      	b.n	8007a90 <_printf_float+0xa0>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	464a      	mov	r2, r9
 8007c20:	4631      	mov	r1, r6
 8007c22:	4628      	mov	r0, r5
 8007c24:	47b8      	blx	r7
 8007c26:	3001      	adds	r0, #1
 8007c28:	f43f af30 	beq.w	8007a8c <_printf_float+0x9c>
 8007c2c:	f108 0801 	add.w	r8, r8, #1
 8007c30:	e7e6      	b.n	8007c00 <_printf_float+0x210>
 8007c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	dc2b      	bgt.n	8007c90 <_printf_float+0x2a0>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	4a27      	ldr	r2, [pc, #156]	; (8007cd8 <_printf_float+0x2e8>)
 8007c3c:	4631      	mov	r1, r6
 8007c3e:	4628      	mov	r0, r5
 8007c40:	47b8      	blx	r7
 8007c42:	3001      	adds	r0, #1
 8007c44:	f43f af22 	beq.w	8007a8c <_printf_float+0x9c>
 8007c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c4a:	b923      	cbnz	r3, 8007c56 <_printf_float+0x266>
 8007c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c4e:	b913      	cbnz	r3, 8007c56 <_printf_float+0x266>
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	07d9      	lsls	r1, r3, #31
 8007c54:	d5d8      	bpl.n	8007c08 <_printf_float+0x218>
 8007c56:	9b05      	ldr	r3, [sp, #20]
 8007c58:	465a      	mov	r2, fp
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	47b8      	blx	r7
 8007c60:	3001      	adds	r0, #1
 8007c62:	f43f af13 	beq.w	8007a8c <_printf_float+0x9c>
 8007c66:	f04f 0900 	mov.w	r9, #0
 8007c6a:	f104 0a1a 	add.w	sl, r4, #26
 8007c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c70:	425b      	negs	r3, r3
 8007c72:	454b      	cmp	r3, r9
 8007c74:	dc01      	bgt.n	8007c7a <_printf_float+0x28a>
 8007c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c78:	e795      	b.n	8007ba6 <_printf_float+0x1b6>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	4652      	mov	r2, sl
 8007c7e:	4631      	mov	r1, r6
 8007c80:	4628      	mov	r0, r5
 8007c82:	47b8      	blx	r7
 8007c84:	3001      	adds	r0, #1
 8007c86:	f43f af01 	beq.w	8007a8c <_printf_float+0x9c>
 8007c8a:	f109 0901 	add.w	r9, r9, #1
 8007c8e:	e7ee      	b.n	8007c6e <_printf_float+0x27e>
 8007c90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c94:	429a      	cmp	r2, r3
 8007c96:	bfa8      	it	ge
 8007c98:	461a      	movge	r2, r3
 8007c9a:	2a00      	cmp	r2, #0
 8007c9c:	4691      	mov	r9, r2
 8007c9e:	dd07      	ble.n	8007cb0 <_printf_float+0x2c0>
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	4642      	mov	r2, r8
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	47b8      	blx	r7
 8007caa:	3001      	adds	r0, #1
 8007cac:	f43f aeee 	beq.w	8007a8c <_printf_float+0x9c>
 8007cb0:	f104 031a 	add.w	r3, r4, #26
 8007cb4:	f04f 0a00 	mov.w	sl, #0
 8007cb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cbc:	9307      	str	r3, [sp, #28]
 8007cbe:	e017      	b.n	8007cf0 <_printf_float+0x300>
 8007cc0:	ffffffff 	.word	0xffffffff
 8007cc4:	7fefffff 	.word	0x7fefffff
 8007cc8:	08009c54 	.word	0x08009c54
 8007ccc:	08009c50 	.word	0x08009c50
 8007cd0:	08009c5c 	.word	0x08009c5c
 8007cd4:	08009c58 	.word	0x08009c58
 8007cd8:	08009c60 	.word	0x08009c60
 8007cdc:	2301      	movs	r3, #1
 8007cde:	9a07      	ldr	r2, [sp, #28]
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	47b8      	blx	r7
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	f43f aed0 	beq.w	8007a8c <_printf_float+0x9c>
 8007cec:	f10a 0a01 	add.w	sl, sl, #1
 8007cf0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007cf2:	9306      	str	r3, [sp, #24]
 8007cf4:	eba3 0309 	sub.w	r3, r3, r9
 8007cf8:	4553      	cmp	r3, sl
 8007cfa:	dcef      	bgt.n	8007cdc <_printf_float+0x2ec>
 8007cfc:	9b06      	ldr	r3, [sp, #24]
 8007cfe:	4498      	add	r8, r3
 8007d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d04:	429a      	cmp	r2, r3
 8007d06:	db15      	blt.n	8007d34 <_printf_float+0x344>
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	07da      	lsls	r2, r3, #31
 8007d0c:	d412      	bmi.n	8007d34 <_printf_float+0x344>
 8007d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d10:	9a06      	ldr	r2, [sp, #24]
 8007d12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d14:	1a9a      	subs	r2, r3, r2
 8007d16:	eba3 0a01 	sub.w	sl, r3, r1
 8007d1a:	4592      	cmp	sl, r2
 8007d1c:	bfa8      	it	ge
 8007d1e:	4692      	movge	sl, r2
 8007d20:	f1ba 0f00 	cmp.w	sl, #0
 8007d24:	dc0e      	bgt.n	8007d44 <_printf_float+0x354>
 8007d26:	f04f 0800 	mov.w	r8, #0
 8007d2a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d2e:	f104 091a 	add.w	r9, r4, #26
 8007d32:	e019      	b.n	8007d68 <_printf_float+0x378>
 8007d34:	9b05      	ldr	r3, [sp, #20]
 8007d36:	465a      	mov	r2, fp
 8007d38:	4631      	mov	r1, r6
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	47b8      	blx	r7
 8007d3e:	3001      	adds	r0, #1
 8007d40:	d1e5      	bne.n	8007d0e <_printf_float+0x31e>
 8007d42:	e6a3      	b.n	8007a8c <_printf_float+0x9c>
 8007d44:	4653      	mov	r3, sl
 8007d46:	4642      	mov	r2, r8
 8007d48:	4631      	mov	r1, r6
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	47b8      	blx	r7
 8007d4e:	3001      	adds	r0, #1
 8007d50:	d1e9      	bne.n	8007d26 <_printf_float+0x336>
 8007d52:	e69b      	b.n	8007a8c <_printf_float+0x9c>
 8007d54:	2301      	movs	r3, #1
 8007d56:	464a      	mov	r2, r9
 8007d58:	4631      	mov	r1, r6
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	47b8      	blx	r7
 8007d5e:	3001      	adds	r0, #1
 8007d60:	f43f ae94 	beq.w	8007a8c <_printf_float+0x9c>
 8007d64:	f108 0801 	add.w	r8, r8, #1
 8007d68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d6c:	1a9b      	subs	r3, r3, r2
 8007d6e:	eba3 030a 	sub.w	r3, r3, sl
 8007d72:	4543      	cmp	r3, r8
 8007d74:	dcee      	bgt.n	8007d54 <_printf_float+0x364>
 8007d76:	e747      	b.n	8007c08 <_printf_float+0x218>
 8007d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d7a:	2a01      	cmp	r2, #1
 8007d7c:	dc01      	bgt.n	8007d82 <_printf_float+0x392>
 8007d7e:	07db      	lsls	r3, r3, #31
 8007d80:	d539      	bpl.n	8007df6 <_printf_float+0x406>
 8007d82:	2301      	movs	r3, #1
 8007d84:	4642      	mov	r2, r8
 8007d86:	4631      	mov	r1, r6
 8007d88:	4628      	mov	r0, r5
 8007d8a:	47b8      	blx	r7
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	f43f ae7d 	beq.w	8007a8c <_printf_float+0x9c>
 8007d92:	9b05      	ldr	r3, [sp, #20]
 8007d94:	465a      	mov	r2, fp
 8007d96:	4631      	mov	r1, r6
 8007d98:	4628      	mov	r0, r5
 8007d9a:	47b8      	blx	r7
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	f108 0801 	add.w	r8, r8, #1
 8007da2:	f43f ae73 	beq.w	8007a8c <_printf_float+0x9c>
 8007da6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db4:	f103 33ff 	add.w	r3, r3, #4294967295
 8007db8:	d018      	beq.n	8007dec <_printf_float+0x3fc>
 8007dba:	4642      	mov	r2, r8
 8007dbc:	4631      	mov	r1, r6
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	47b8      	blx	r7
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	d10e      	bne.n	8007de4 <_printf_float+0x3f4>
 8007dc6:	e661      	b.n	8007a8c <_printf_float+0x9c>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	464a      	mov	r2, r9
 8007dcc:	4631      	mov	r1, r6
 8007dce:	4628      	mov	r0, r5
 8007dd0:	47b8      	blx	r7
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	f43f ae5a 	beq.w	8007a8c <_printf_float+0x9c>
 8007dd8:	f108 0801 	add.w	r8, r8, #1
 8007ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dde:	3b01      	subs	r3, #1
 8007de0:	4543      	cmp	r3, r8
 8007de2:	dcf1      	bgt.n	8007dc8 <_printf_float+0x3d8>
 8007de4:	4653      	mov	r3, sl
 8007de6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007dea:	e6dd      	b.n	8007ba8 <_printf_float+0x1b8>
 8007dec:	f04f 0800 	mov.w	r8, #0
 8007df0:	f104 091a 	add.w	r9, r4, #26
 8007df4:	e7f2      	b.n	8007ddc <_printf_float+0x3ec>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e7df      	b.n	8007dba <_printf_float+0x3ca>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	464a      	mov	r2, r9
 8007dfe:	4631      	mov	r1, r6
 8007e00:	4628      	mov	r0, r5
 8007e02:	47b8      	blx	r7
 8007e04:	3001      	adds	r0, #1
 8007e06:	f43f ae41 	beq.w	8007a8c <_printf_float+0x9c>
 8007e0a:	f108 0801 	add.w	r8, r8, #1
 8007e0e:	68e3      	ldr	r3, [r4, #12]
 8007e10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e12:	1a9b      	subs	r3, r3, r2
 8007e14:	4543      	cmp	r3, r8
 8007e16:	dcf0      	bgt.n	8007dfa <_printf_float+0x40a>
 8007e18:	e6fa      	b.n	8007c10 <_printf_float+0x220>
 8007e1a:	f04f 0800 	mov.w	r8, #0
 8007e1e:	f104 0919 	add.w	r9, r4, #25
 8007e22:	e7f4      	b.n	8007e0e <_printf_float+0x41e>
 8007e24:	2900      	cmp	r1, #0
 8007e26:	f43f ae8a 	beq.w	8007b3e <_printf_float+0x14e>
 8007e2a:	f04f 0c00 	mov.w	ip, #0
 8007e2e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8007e32:	e9cd 0900 	strd	r0, r9, [sp]
 8007e36:	6022      	str	r2, [r4, #0]
 8007e38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	f7ff fd4f 	bl	80078e0 <__cvt>
 8007e42:	4680      	mov	r8, r0
 8007e44:	e64a      	b.n	8007adc <_printf_float+0xec>
 8007e46:	bf00      	nop

08007e48 <_printf_common>:
 8007e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e4c:	4691      	mov	r9, r2
 8007e4e:	461f      	mov	r7, r3
 8007e50:	688a      	ldr	r2, [r1, #8]
 8007e52:	690b      	ldr	r3, [r1, #16]
 8007e54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	bfb8      	it	lt
 8007e5c:	4613      	movlt	r3, r2
 8007e5e:	f8c9 3000 	str.w	r3, [r9]
 8007e62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e66:	4606      	mov	r6, r0
 8007e68:	460c      	mov	r4, r1
 8007e6a:	b112      	cbz	r2, 8007e72 <_printf_common+0x2a>
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	f8c9 3000 	str.w	r3, [r9]
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	0699      	lsls	r1, r3, #26
 8007e76:	bf42      	ittt	mi
 8007e78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007e7c:	3302      	addmi	r3, #2
 8007e7e:	f8c9 3000 	strmi.w	r3, [r9]
 8007e82:	6825      	ldr	r5, [r4, #0]
 8007e84:	f015 0506 	ands.w	r5, r5, #6
 8007e88:	d107      	bne.n	8007e9a <_printf_common+0x52>
 8007e8a:	f104 0a19 	add.w	sl, r4, #25
 8007e8e:	68e3      	ldr	r3, [r4, #12]
 8007e90:	f8d9 2000 	ldr.w	r2, [r9]
 8007e94:	1a9b      	subs	r3, r3, r2
 8007e96:	42ab      	cmp	r3, r5
 8007e98:	dc28      	bgt.n	8007eec <_printf_common+0xa4>
 8007e9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007e9e:	6822      	ldr	r2, [r4, #0]
 8007ea0:	3300      	adds	r3, #0
 8007ea2:	bf18      	it	ne
 8007ea4:	2301      	movne	r3, #1
 8007ea6:	0692      	lsls	r2, r2, #26
 8007ea8:	d42d      	bmi.n	8007f06 <_printf_common+0xbe>
 8007eaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007eae:	4639      	mov	r1, r7
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	47c0      	blx	r8
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	d020      	beq.n	8007efa <_printf_common+0xb2>
 8007eb8:	6823      	ldr	r3, [r4, #0]
 8007eba:	68e5      	ldr	r5, [r4, #12]
 8007ebc:	f8d9 2000 	ldr.w	r2, [r9]
 8007ec0:	f003 0306 	and.w	r3, r3, #6
 8007ec4:	2b04      	cmp	r3, #4
 8007ec6:	bf08      	it	eq
 8007ec8:	1aad      	subeq	r5, r5, r2
 8007eca:	68a3      	ldr	r3, [r4, #8]
 8007ecc:	6922      	ldr	r2, [r4, #16]
 8007ece:	bf0c      	ite	eq
 8007ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ed4:	2500      	movne	r5, #0
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	bfc4      	itt	gt
 8007eda:	1a9b      	subgt	r3, r3, r2
 8007edc:	18ed      	addgt	r5, r5, r3
 8007ede:	f04f 0900 	mov.w	r9, #0
 8007ee2:	341a      	adds	r4, #26
 8007ee4:	454d      	cmp	r5, r9
 8007ee6:	d11a      	bne.n	8007f1e <_printf_common+0xd6>
 8007ee8:	2000      	movs	r0, #0
 8007eea:	e008      	b.n	8007efe <_printf_common+0xb6>
 8007eec:	2301      	movs	r3, #1
 8007eee:	4652      	mov	r2, sl
 8007ef0:	4639      	mov	r1, r7
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	47c0      	blx	r8
 8007ef6:	3001      	adds	r0, #1
 8007ef8:	d103      	bne.n	8007f02 <_printf_common+0xba>
 8007efa:	f04f 30ff 	mov.w	r0, #4294967295
 8007efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f02:	3501      	adds	r5, #1
 8007f04:	e7c3      	b.n	8007e8e <_printf_common+0x46>
 8007f06:	18e1      	adds	r1, r4, r3
 8007f08:	1c5a      	adds	r2, r3, #1
 8007f0a:	2030      	movs	r0, #48	; 0x30
 8007f0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f10:	4422      	add	r2, r4
 8007f12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f1a:	3302      	adds	r3, #2
 8007f1c:	e7c5      	b.n	8007eaa <_printf_common+0x62>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	4622      	mov	r2, r4
 8007f22:	4639      	mov	r1, r7
 8007f24:	4630      	mov	r0, r6
 8007f26:	47c0      	blx	r8
 8007f28:	3001      	adds	r0, #1
 8007f2a:	d0e6      	beq.n	8007efa <_printf_common+0xb2>
 8007f2c:	f109 0901 	add.w	r9, r9, #1
 8007f30:	e7d8      	b.n	8007ee4 <_printf_common+0x9c>
	...

08007f34 <_printf_i>:
 8007f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007f3c:	460c      	mov	r4, r1
 8007f3e:	7e09      	ldrb	r1, [r1, #24]
 8007f40:	b085      	sub	sp, #20
 8007f42:	296e      	cmp	r1, #110	; 0x6e
 8007f44:	4617      	mov	r7, r2
 8007f46:	4606      	mov	r6, r0
 8007f48:	4698      	mov	r8, r3
 8007f4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f4c:	f000 80b3 	beq.w	80080b6 <_printf_i+0x182>
 8007f50:	d822      	bhi.n	8007f98 <_printf_i+0x64>
 8007f52:	2963      	cmp	r1, #99	; 0x63
 8007f54:	d036      	beq.n	8007fc4 <_printf_i+0x90>
 8007f56:	d80a      	bhi.n	8007f6e <_printf_i+0x3a>
 8007f58:	2900      	cmp	r1, #0
 8007f5a:	f000 80b9 	beq.w	80080d0 <_printf_i+0x19c>
 8007f5e:	2958      	cmp	r1, #88	; 0x58
 8007f60:	f000 8083 	beq.w	800806a <_printf_i+0x136>
 8007f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007f6c:	e032      	b.n	8007fd4 <_printf_i+0xa0>
 8007f6e:	2964      	cmp	r1, #100	; 0x64
 8007f70:	d001      	beq.n	8007f76 <_printf_i+0x42>
 8007f72:	2969      	cmp	r1, #105	; 0x69
 8007f74:	d1f6      	bne.n	8007f64 <_printf_i+0x30>
 8007f76:	6820      	ldr	r0, [r4, #0]
 8007f78:	6813      	ldr	r3, [r2, #0]
 8007f7a:	0605      	lsls	r5, r0, #24
 8007f7c:	f103 0104 	add.w	r1, r3, #4
 8007f80:	d52a      	bpl.n	8007fd8 <_printf_i+0xa4>
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6011      	str	r1, [r2, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	da03      	bge.n	8007f92 <_printf_i+0x5e>
 8007f8a:	222d      	movs	r2, #45	; 0x2d
 8007f8c:	425b      	negs	r3, r3
 8007f8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007f92:	486f      	ldr	r0, [pc, #444]	; (8008150 <_printf_i+0x21c>)
 8007f94:	220a      	movs	r2, #10
 8007f96:	e039      	b.n	800800c <_printf_i+0xd8>
 8007f98:	2973      	cmp	r1, #115	; 0x73
 8007f9a:	f000 809d 	beq.w	80080d8 <_printf_i+0x1a4>
 8007f9e:	d808      	bhi.n	8007fb2 <_printf_i+0x7e>
 8007fa0:	296f      	cmp	r1, #111	; 0x6f
 8007fa2:	d020      	beq.n	8007fe6 <_printf_i+0xb2>
 8007fa4:	2970      	cmp	r1, #112	; 0x70
 8007fa6:	d1dd      	bne.n	8007f64 <_printf_i+0x30>
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	f043 0320 	orr.w	r3, r3, #32
 8007fae:	6023      	str	r3, [r4, #0]
 8007fb0:	e003      	b.n	8007fba <_printf_i+0x86>
 8007fb2:	2975      	cmp	r1, #117	; 0x75
 8007fb4:	d017      	beq.n	8007fe6 <_printf_i+0xb2>
 8007fb6:	2978      	cmp	r1, #120	; 0x78
 8007fb8:	d1d4      	bne.n	8007f64 <_printf_i+0x30>
 8007fba:	2378      	movs	r3, #120	; 0x78
 8007fbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fc0:	4864      	ldr	r0, [pc, #400]	; (8008154 <_printf_i+0x220>)
 8007fc2:	e055      	b.n	8008070 <_printf_i+0x13c>
 8007fc4:	6813      	ldr	r3, [r2, #0]
 8007fc6:	1d19      	adds	r1, r3, #4
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6011      	str	r1, [r2, #0]
 8007fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e08c      	b.n	80080f2 <_printf_i+0x1be>
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6011      	str	r1, [r2, #0]
 8007fdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007fe0:	bf18      	it	ne
 8007fe2:	b21b      	sxthne	r3, r3
 8007fe4:	e7cf      	b.n	8007f86 <_printf_i+0x52>
 8007fe6:	6813      	ldr	r3, [r2, #0]
 8007fe8:	6825      	ldr	r5, [r4, #0]
 8007fea:	1d18      	adds	r0, r3, #4
 8007fec:	6010      	str	r0, [r2, #0]
 8007fee:	0628      	lsls	r0, r5, #24
 8007ff0:	d501      	bpl.n	8007ff6 <_printf_i+0xc2>
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	e002      	b.n	8007ffc <_printf_i+0xc8>
 8007ff6:	0668      	lsls	r0, r5, #25
 8007ff8:	d5fb      	bpl.n	8007ff2 <_printf_i+0xbe>
 8007ffa:	881b      	ldrh	r3, [r3, #0]
 8007ffc:	4854      	ldr	r0, [pc, #336]	; (8008150 <_printf_i+0x21c>)
 8007ffe:	296f      	cmp	r1, #111	; 0x6f
 8008000:	bf14      	ite	ne
 8008002:	220a      	movne	r2, #10
 8008004:	2208      	moveq	r2, #8
 8008006:	2100      	movs	r1, #0
 8008008:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800800c:	6865      	ldr	r5, [r4, #4]
 800800e:	60a5      	str	r5, [r4, #8]
 8008010:	2d00      	cmp	r5, #0
 8008012:	f2c0 8095 	blt.w	8008140 <_printf_i+0x20c>
 8008016:	6821      	ldr	r1, [r4, #0]
 8008018:	f021 0104 	bic.w	r1, r1, #4
 800801c:	6021      	str	r1, [r4, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d13d      	bne.n	800809e <_printf_i+0x16a>
 8008022:	2d00      	cmp	r5, #0
 8008024:	f040 808e 	bne.w	8008144 <_printf_i+0x210>
 8008028:	4665      	mov	r5, ip
 800802a:	2a08      	cmp	r2, #8
 800802c:	d10b      	bne.n	8008046 <_printf_i+0x112>
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	07db      	lsls	r3, r3, #31
 8008032:	d508      	bpl.n	8008046 <_printf_i+0x112>
 8008034:	6923      	ldr	r3, [r4, #16]
 8008036:	6862      	ldr	r2, [r4, #4]
 8008038:	429a      	cmp	r2, r3
 800803a:	bfde      	ittt	le
 800803c:	2330      	movle	r3, #48	; 0x30
 800803e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008042:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008046:	ebac 0305 	sub.w	r3, ip, r5
 800804a:	6123      	str	r3, [r4, #16]
 800804c:	f8cd 8000 	str.w	r8, [sp]
 8008050:	463b      	mov	r3, r7
 8008052:	aa03      	add	r2, sp, #12
 8008054:	4621      	mov	r1, r4
 8008056:	4630      	mov	r0, r6
 8008058:	f7ff fef6 	bl	8007e48 <_printf_common>
 800805c:	3001      	adds	r0, #1
 800805e:	d14d      	bne.n	80080fc <_printf_i+0x1c8>
 8008060:	f04f 30ff 	mov.w	r0, #4294967295
 8008064:	b005      	add	sp, #20
 8008066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800806a:	4839      	ldr	r0, [pc, #228]	; (8008150 <_printf_i+0x21c>)
 800806c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008070:	6813      	ldr	r3, [r2, #0]
 8008072:	6821      	ldr	r1, [r4, #0]
 8008074:	1d1d      	adds	r5, r3, #4
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6015      	str	r5, [r2, #0]
 800807a:	060a      	lsls	r2, r1, #24
 800807c:	d50b      	bpl.n	8008096 <_printf_i+0x162>
 800807e:	07ca      	lsls	r2, r1, #31
 8008080:	bf44      	itt	mi
 8008082:	f041 0120 	orrmi.w	r1, r1, #32
 8008086:	6021      	strmi	r1, [r4, #0]
 8008088:	b91b      	cbnz	r3, 8008092 <_printf_i+0x15e>
 800808a:	6822      	ldr	r2, [r4, #0]
 800808c:	f022 0220 	bic.w	r2, r2, #32
 8008090:	6022      	str	r2, [r4, #0]
 8008092:	2210      	movs	r2, #16
 8008094:	e7b7      	b.n	8008006 <_printf_i+0xd2>
 8008096:	064d      	lsls	r5, r1, #25
 8008098:	bf48      	it	mi
 800809a:	b29b      	uxthmi	r3, r3
 800809c:	e7ef      	b.n	800807e <_printf_i+0x14a>
 800809e:	4665      	mov	r5, ip
 80080a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80080a4:	fb02 3311 	mls	r3, r2, r1, r3
 80080a8:	5cc3      	ldrb	r3, [r0, r3]
 80080aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80080ae:	460b      	mov	r3, r1
 80080b0:	2900      	cmp	r1, #0
 80080b2:	d1f5      	bne.n	80080a0 <_printf_i+0x16c>
 80080b4:	e7b9      	b.n	800802a <_printf_i+0xf6>
 80080b6:	6813      	ldr	r3, [r2, #0]
 80080b8:	6825      	ldr	r5, [r4, #0]
 80080ba:	6961      	ldr	r1, [r4, #20]
 80080bc:	1d18      	adds	r0, r3, #4
 80080be:	6010      	str	r0, [r2, #0]
 80080c0:	0628      	lsls	r0, r5, #24
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	d501      	bpl.n	80080ca <_printf_i+0x196>
 80080c6:	6019      	str	r1, [r3, #0]
 80080c8:	e002      	b.n	80080d0 <_printf_i+0x19c>
 80080ca:	066a      	lsls	r2, r5, #25
 80080cc:	d5fb      	bpl.n	80080c6 <_printf_i+0x192>
 80080ce:	8019      	strh	r1, [r3, #0]
 80080d0:	2300      	movs	r3, #0
 80080d2:	6123      	str	r3, [r4, #16]
 80080d4:	4665      	mov	r5, ip
 80080d6:	e7b9      	b.n	800804c <_printf_i+0x118>
 80080d8:	6813      	ldr	r3, [r2, #0]
 80080da:	1d19      	adds	r1, r3, #4
 80080dc:	6011      	str	r1, [r2, #0]
 80080de:	681d      	ldr	r5, [r3, #0]
 80080e0:	6862      	ldr	r2, [r4, #4]
 80080e2:	2100      	movs	r1, #0
 80080e4:	4628      	mov	r0, r5
 80080e6:	f7f8 f903 	bl	80002f0 <memchr>
 80080ea:	b108      	cbz	r0, 80080f0 <_printf_i+0x1bc>
 80080ec:	1b40      	subs	r0, r0, r5
 80080ee:	6060      	str	r0, [r4, #4]
 80080f0:	6863      	ldr	r3, [r4, #4]
 80080f2:	6123      	str	r3, [r4, #16]
 80080f4:	2300      	movs	r3, #0
 80080f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080fa:	e7a7      	b.n	800804c <_printf_i+0x118>
 80080fc:	6923      	ldr	r3, [r4, #16]
 80080fe:	462a      	mov	r2, r5
 8008100:	4639      	mov	r1, r7
 8008102:	4630      	mov	r0, r6
 8008104:	47c0      	blx	r8
 8008106:	3001      	adds	r0, #1
 8008108:	d0aa      	beq.n	8008060 <_printf_i+0x12c>
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	079b      	lsls	r3, r3, #30
 800810e:	d413      	bmi.n	8008138 <_printf_i+0x204>
 8008110:	68e0      	ldr	r0, [r4, #12]
 8008112:	9b03      	ldr	r3, [sp, #12]
 8008114:	4298      	cmp	r0, r3
 8008116:	bfb8      	it	lt
 8008118:	4618      	movlt	r0, r3
 800811a:	e7a3      	b.n	8008064 <_printf_i+0x130>
 800811c:	2301      	movs	r3, #1
 800811e:	464a      	mov	r2, r9
 8008120:	4639      	mov	r1, r7
 8008122:	4630      	mov	r0, r6
 8008124:	47c0      	blx	r8
 8008126:	3001      	adds	r0, #1
 8008128:	d09a      	beq.n	8008060 <_printf_i+0x12c>
 800812a:	3501      	adds	r5, #1
 800812c:	68e3      	ldr	r3, [r4, #12]
 800812e:	9a03      	ldr	r2, [sp, #12]
 8008130:	1a9b      	subs	r3, r3, r2
 8008132:	42ab      	cmp	r3, r5
 8008134:	dcf2      	bgt.n	800811c <_printf_i+0x1e8>
 8008136:	e7eb      	b.n	8008110 <_printf_i+0x1dc>
 8008138:	2500      	movs	r5, #0
 800813a:	f104 0919 	add.w	r9, r4, #25
 800813e:	e7f5      	b.n	800812c <_printf_i+0x1f8>
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1ac      	bne.n	800809e <_printf_i+0x16a>
 8008144:	7803      	ldrb	r3, [r0, #0]
 8008146:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800814a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800814e:	e76c      	b.n	800802a <_printf_i+0xf6>
 8008150:	08009c62 	.word	0x08009c62
 8008154:	08009c73 	.word	0x08009c73

08008158 <_sbrk_r>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	4c06      	ldr	r4, [pc, #24]	; (8008174 <_sbrk_r+0x1c>)
 800815c:	2300      	movs	r3, #0
 800815e:	4605      	mov	r5, r0
 8008160:	4608      	mov	r0, r1
 8008162:	6023      	str	r3, [r4, #0]
 8008164:	f7f9 fa7c 	bl	8001660 <_sbrk>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	d102      	bne.n	8008172 <_sbrk_r+0x1a>
 800816c:	6823      	ldr	r3, [r4, #0]
 800816e:	b103      	cbz	r3, 8008172 <_sbrk_r+0x1a>
 8008170:	602b      	str	r3, [r5, #0]
 8008172:	bd38      	pop	{r3, r4, r5, pc}
 8008174:	2000672c 	.word	0x2000672c

08008178 <siprintf>:
 8008178:	b40e      	push	{r1, r2, r3}
 800817a:	b500      	push	{lr}
 800817c:	b09c      	sub	sp, #112	; 0x70
 800817e:	ab1d      	add	r3, sp, #116	; 0x74
 8008180:	9002      	str	r0, [sp, #8]
 8008182:	9006      	str	r0, [sp, #24]
 8008184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008188:	4809      	ldr	r0, [pc, #36]	; (80081b0 <siprintf+0x38>)
 800818a:	9107      	str	r1, [sp, #28]
 800818c:	9104      	str	r1, [sp, #16]
 800818e:	4909      	ldr	r1, [pc, #36]	; (80081b4 <siprintf+0x3c>)
 8008190:	f853 2b04 	ldr.w	r2, [r3], #4
 8008194:	9105      	str	r1, [sp, #20]
 8008196:	6800      	ldr	r0, [r0, #0]
 8008198:	9301      	str	r3, [sp, #4]
 800819a:	a902      	add	r1, sp, #8
 800819c:	f001 f942 	bl	8009424 <_svfiprintf_r>
 80081a0:	9b02      	ldr	r3, [sp, #8]
 80081a2:	2200      	movs	r2, #0
 80081a4:	701a      	strb	r2, [r3, #0]
 80081a6:	b01c      	add	sp, #112	; 0x70
 80081a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80081ac:	b003      	add	sp, #12
 80081ae:	4770      	bx	lr
 80081b0:	20000014 	.word	0x20000014
 80081b4:	ffff0208 	.word	0xffff0208

080081b8 <quorem>:
 80081b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081bc:	6903      	ldr	r3, [r0, #16]
 80081be:	690c      	ldr	r4, [r1, #16]
 80081c0:	42a3      	cmp	r3, r4
 80081c2:	4680      	mov	r8, r0
 80081c4:	f2c0 8082 	blt.w	80082cc <quorem+0x114>
 80081c8:	3c01      	subs	r4, #1
 80081ca:	f101 0714 	add.w	r7, r1, #20
 80081ce:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80081d2:	f100 0614 	add.w	r6, r0, #20
 80081d6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80081da:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80081de:	eb06 030c 	add.w	r3, r6, ip
 80081e2:	3501      	adds	r5, #1
 80081e4:	eb07 090c 	add.w	r9, r7, ip
 80081e8:	9301      	str	r3, [sp, #4]
 80081ea:	fbb0 f5f5 	udiv	r5, r0, r5
 80081ee:	b395      	cbz	r5, 8008256 <quorem+0x9e>
 80081f0:	f04f 0a00 	mov.w	sl, #0
 80081f4:	4638      	mov	r0, r7
 80081f6:	46b6      	mov	lr, r6
 80081f8:	46d3      	mov	fp, sl
 80081fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80081fe:	b293      	uxth	r3, r2
 8008200:	fb05 a303 	mla	r3, r5, r3, sl
 8008204:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008208:	b29b      	uxth	r3, r3
 800820a:	ebab 0303 	sub.w	r3, fp, r3
 800820e:	0c12      	lsrs	r2, r2, #16
 8008210:	f8de b000 	ldr.w	fp, [lr]
 8008214:	fb05 a202 	mla	r2, r5, r2, sl
 8008218:	fa13 f38b 	uxtah	r3, r3, fp
 800821c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008220:	fa1f fb82 	uxth.w	fp, r2
 8008224:	f8de 2000 	ldr.w	r2, [lr]
 8008228:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800822c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008230:	b29b      	uxth	r3, r3
 8008232:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008236:	4581      	cmp	r9, r0
 8008238:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800823c:	f84e 3b04 	str.w	r3, [lr], #4
 8008240:	d2db      	bcs.n	80081fa <quorem+0x42>
 8008242:	f856 300c 	ldr.w	r3, [r6, ip]
 8008246:	b933      	cbnz	r3, 8008256 <quorem+0x9e>
 8008248:	9b01      	ldr	r3, [sp, #4]
 800824a:	3b04      	subs	r3, #4
 800824c:	429e      	cmp	r6, r3
 800824e:	461a      	mov	r2, r3
 8008250:	d330      	bcc.n	80082b4 <quorem+0xfc>
 8008252:	f8c8 4010 	str.w	r4, [r8, #16]
 8008256:	4640      	mov	r0, r8
 8008258:	f000 ffb6 	bl	80091c8 <__mcmp>
 800825c:	2800      	cmp	r0, #0
 800825e:	db25      	blt.n	80082ac <quorem+0xf4>
 8008260:	3501      	adds	r5, #1
 8008262:	4630      	mov	r0, r6
 8008264:	f04f 0c00 	mov.w	ip, #0
 8008268:	f857 2b04 	ldr.w	r2, [r7], #4
 800826c:	f8d0 e000 	ldr.w	lr, [r0]
 8008270:	b293      	uxth	r3, r2
 8008272:	ebac 0303 	sub.w	r3, ip, r3
 8008276:	0c12      	lsrs	r2, r2, #16
 8008278:	fa13 f38e 	uxtah	r3, r3, lr
 800827c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008280:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008284:	b29b      	uxth	r3, r3
 8008286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800828a:	45b9      	cmp	r9, r7
 800828c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008290:	f840 3b04 	str.w	r3, [r0], #4
 8008294:	d2e8      	bcs.n	8008268 <quorem+0xb0>
 8008296:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800829a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800829e:	b92a      	cbnz	r2, 80082ac <quorem+0xf4>
 80082a0:	3b04      	subs	r3, #4
 80082a2:	429e      	cmp	r6, r3
 80082a4:	461a      	mov	r2, r3
 80082a6:	d30b      	bcc.n	80082c0 <quorem+0x108>
 80082a8:	f8c8 4010 	str.w	r4, [r8, #16]
 80082ac:	4628      	mov	r0, r5
 80082ae:	b003      	add	sp, #12
 80082b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b4:	6812      	ldr	r2, [r2, #0]
 80082b6:	3b04      	subs	r3, #4
 80082b8:	2a00      	cmp	r2, #0
 80082ba:	d1ca      	bne.n	8008252 <quorem+0x9a>
 80082bc:	3c01      	subs	r4, #1
 80082be:	e7c5      	b.n	800824c <quorem+0x94>
 80082c0:	6812      	ldr	r2, [r2, #0]
 80082c2:	3b04      	subs	r3, #4
 80082c4:	2a00      	cmp	r2, #0
 80082c6:	d1ef      	bne.n	80082a8 <quorem+0xf0>
 80082c8:	3c01      	subs	r4, #1
 80082ca:	e7ea      	b.n	80082a2 <quorem+0xea>
 80082cc:	2000      	movs	r0, #0
 80082ce:	e7ee      	b.n	80082ae <quorem+0xf6>

080082d0 <_dtoa_r>:
 80082d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d4:	ec57 6b10 	vmov	r6, r7, d0
 80082d8:	b095      	sub	sp, #84	; 0x54
 80082da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082dc:	9108      	str	r1, [sp, #32]
 80082de:	4604      	mov	r4, r0
 80082e0:	920a      	str	r2, [sp, #40]	; 0x28
 80082e2:	9311      	str	r3, [sp, #68]	; 0x44
 80082e4:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80082e8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80082ec:	b93d      	cbnz	r5, 80082fe <_dtoa_r+0x2e>
 80082ee:	2010      	movs	r0, #16
 80082f0:	f7ff fa36 	bl	8007760 <malloc>
 80082f4:	6260      	str	r0, [r4, #36]	; 0x24
 80082f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082fa:	6005      	str	r5, [r0, #0]
 80082fc:	60c5      	str	r5, [r0, #12]
 80082fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008300:	6819      	ldr	r1, [r3, #0]
 8008302:	b151      	cbz	r1, 800831a <_dtoa_r+0x4a>
 8008304:	685a      	ldr	r2, [r3, #4]
 8008306:	604a      	str	r2, [r1, #4]
 8008308:	2301      	movs	r3, #1
 800830a:	4093      	lsls	r3, r2
 800830c:	608b      	str	r3, [r1, #8]
 800830e:	4620      	mov	r0, r4
 8008310:	f000 fd79 	bl	8008e06 <_Bfree>
 8008314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008316:	2200      	movs	r2, #0
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	1e3b      	subs	r3, r7, #0
 800831c:	bfb9      	ittee	lt
 800831e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008322:	9303      	strlt	r3, [sp, #12]
 8008324:	2300      	movge	r3, #0
 8008326:	f8c8 3000 	strge.w	r3, [r8]
 800832a:	9d03      	ldr	r5, [sp, #12]
 800832c:	4bac      	ldr	r3, [pc, #688]	; (80085e0 <_dtoa_r+0x310>)
 800832e:	bfbc      	itt	lt
 8008330:	2201      	movlt	r2, #1
 8008332:	f8c8 2000 	strlt.w	r2, [r8]
 8008336:	43ab      	bics	r3, r5
 8008338:	d11b      	bne.n	8008372 <_dtoa_r+0xa2>
 800833a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800833c:	f242 730f 	movw	r3, #9999	; 0x270f
 8008340:	6013      	str	r3, [r2, #0]
 8008342:	9b02      	ldr	r3, [sp, #8]
 8008344:	b923      	cbnz	r3, 8008350 <_dtoa_r+0x80>
 8008346:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800834a:	2d00      	cmp	r5, #0
 800834c:	f000 84dd 	beq.w	8008d0a <_dtoa_r+0xa3a>
 8008350:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008352:	b953      	cbnz	r3, 800836a <_dtoa_r+0x9a>
 8008354:	4ba3      	ldr	r3, [pc, #652]	; (80085e4 <_dtoa_r+0x314>)
 8008356:	e020      	b.n	800839a <_dtoa_r+0xca>
 8008358:	4ba3      	ldr	r3, [pc, #652]	; (80085e8 <_dtoa_r+0x318>)
 800835a:	9304      	str	r3, [sp, #16]
 800835c:	3308      	adds	r3, #8
 800835e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008360:	6013      	str	r3, [r2, #0]
 8008362:	9804      	ldr	r0, [sp, #16]
 8008364:	b015      	add	sp, #84	; 0x54
 8008366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836a:	4b9e      	ldr	r3, [pc, #632]	; (80085e4 <_dtoa_r+0x314>)
 800836c:	9304      	str	r3, [sp, #16]
 800836e:	3303      	adds	r3, #3
 8008370:	e7f5      	b.n	800835e <_dtoa_r+0x8e>
 8008372:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008376:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800837a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800837e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008382:	d10c      	bne.n	800839e <_dtoa_r+0xce>
 8008384:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008386:	2301      	movs	r3, #1
 8008388:	6013      	str	r3, [r2, #0]
 800838a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 84b9 	beq.w	8008d04 <_dtoa_r+0xa34>
 8008392:	4b96      	ldr	r3, [pc, #600]	; (80085ec <_dtoa_r+0x31c>)
 8008394:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008396:	6013      	str	r3, [r2, #0]
 8008398:	3b01      	subs	r3, #1
 800839a:	9304      	str	r3, [sp, #16]
 800839c:	e7e1      	b.n	8008362 <_dtoa_r+0x92>
 800839e:	a913      	add	r1, sp, #76	; 0x4c
 80083a0:	aa12      	add	r2, sp, #72	; 0x48
 80083a2:	ed9d 0b04 	vldr	d0, [sp, #16]
 80083a6:	4620      	mov	r0, r4
 80083a8:	f000 ff85 	bl	80092b6 <__d2b>
 80083ac:	f3c5 560a 	ubfx	r6, r5, #20, #11
 80083b0:	9001      	str	r0, [sp, #4]
 80083b2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80083b4:	2e00      	cmp	r6, #0
 80083b6:	d046      	beq.n	8008446 <_dtoa_r+0x176>
 80083b8:	9805      	ldr	r0, [sp, #20]
 80083ba:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80083be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083c2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 80083c6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80083ca:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 80083ce:	2700      	movs	r7, #0
 80083d0:	ee07 aa90 	vmov	s15, sl
 80083d4:	ec43 2b16 	vmov	d6, r2, r3
 80083d8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80083dc:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 80085c8 <_dtoa_r+0x2f8>
 80083e0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80083e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80083e8:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80085d0 <_dtoa_r+0x300>
 80083ec:	eea7 6b04 	vfma.f64	d6, d7, d4
 80083f0:	eeb0 7b46 	vmov.f64	d7, d6
 80083f4:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80085d8 <_dtoa_r+0x308>
 80083f8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80083fc:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008400:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008408:	ee16 ba90 	vmov	fp, s13
 800840c:	d508      	bpl.n	8008420 <_dtoa_r+0x150>
 800840e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008412:	eeb4 6b47 	vcmp.f64	d6, d7
 8008416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800841a:	bf18      	it	ne
 800841c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008420:	f1bb 0f16 	cmp.w	fp, #22
 8008424:	d834      	bhi.n	8008490 <_dtoa_r+0x1c0>
 8008426:	4b72      	ldr	r3, [pc, #456]	; (80085f0 <_dtoa_r+0x320>)
 8008428:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800842c:	ed93 7b00 	vldr	d7, [r3]
 8008430:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008434:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800843c:	dd01      	ble.n	8008442 <_dtoa_r+0x172>
 800843e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008442:	2300      	movs	r3, #0
 8008444:	e025      	b.n	8008492 <_dtoa_r+0x1c2>
 8008446:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008448:	eb01 0a03 	add.w	sl, r1, r3
 800844c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8008450:	2b20      	cmp	r3, #32
 8008452:	dd17      	ble.n	8008484 <_dtoa_r+0x1b4>
 8008454:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008458:	9a02      	ldr	r2, [sp, #8]
 800845a:	409d      	lsls	r5, r3
 800845c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8008460:	fa22 f303 	lsr.w	r3, r2, r3
 8008464:	432b      	orrs	r3, r5
 8008466:	ee07 3a90 	vmov	s15, r3
 800846a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800846e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008472:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008476:	9805      	ldr	r0, [sp, #20]
 8008478:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800847c:	2701      	movs	r7, #1
 800847e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8008482:	e7a5      	b.n	80083d0 <_dtoa_r+0x100>
 8008484:	9a02      	ldr	r2, [sp, #8]
 8008486:	f1c3 0320 	rsb	r3, r3, #32
 800848a:	fa02 f303 	lsl.w	r3, r2, r3
 800848e:	e7ea      	b.n	8008466 <_dtoa_r+0x196>
 8008490:	2301      	movs	r3, #1
 8008492:	eba1 0a0a 	sub.w	sl, r1, sl
 8008496:	9310      	str	r3, [sp, #64]	; 0x40
 8008498:	f1ba 0301 	subs.w	r3, sl, #1
 800849c:	9307      	str	r3, [sp, #28]
 800849e:	bf43      	ittte	mi
 80084a0:	2300      	movmi	r3, #0
 80084a2:	f1ca 0a01 	rsbmi	sl, sl, #1
 80084a6:	9307      	strmi	r3, [sp, #28]
 80084a8:	f04f 0a00 	movpl.w	sl, #0
 80084ac:	f1bb 0f00 	cmp.w	fp, #0
 80084b0:	db19      	blt.n	80084e6 <_dtoa_r+0x216>
 80084b2:	9b07      	ldr	r3, [sp, #28]
 80084b4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80084b8:	445b      	add	r3, fp
 80084ba:	9307      	str	r3, [sp, #28]
 80084bc:	f04f 0800 	mov.w	r8, #0
 80084c0:	9b08      	ldr	r3, [sp, #32]
 80084c2:	2b09      	cmp	r3, #9
 80084c4:	d866      	bhi.n	8008594 <_dtoa_r+0x2c4>
 80084c6:	2b05      	cmp	r3, #5
 80084c8:	bfc4      	itt	gt
 80084ca:	3b04      	subgt	r3, #4
 80084cc:	9308      	strgt	r3, [sp, #32]
 80084ce:	9b08      	ldr	r3, [sp, #32]
 80084d0:	f1a3 0302 	sub.w	r3, r3, #2
 80084d4:	bfcc      	ite	gt
 80084d6:	2500      	movgt	r5, #0
 80084d8:	2501      	movle	r5, #1
 80084da:	2b03      	cmp	r3, #3
 80084dc:	d866      	bhi.n	80085ac <_dtoa_r+0x2dc>
 80084de:	e8df f003 	tbb	[pc, r3]
 80084e2:	5755      	.short	0x5755
 80084e4:	4909      	.short	0x4909
 80084e6:	2300      	movs	r3, #0
 80084e8:	ebaa 0a0b 	sub.w	sl, sl, fp
 80084ec:	f1cb 0800 	rsb	r8, fp, #0
 80084f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80084f2:	e7e5      	b.n	80084c0 <_dtoa_r+0x1f0>
 80084f4:	2301      	movs	r3, #1
 80084f6:	9309      	str	r3, [sp, #36]	; 0x24
 80084f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	dd59      	ble.n	80085b2 <_dtoa_r+0x2e2>
 80084fe:	9306      	str	r3, [sp, #24]
 8008500:	4699      	mov	r9, r3
 8008502:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008504:	2200      	movs	r2, #0
 8008506:	6072      	str	r2, [r6, #4]
 8008508:	2204      	movs	r2, #4
 800850a:	f102 0014 	add.w	r0, r2, #20
 800850e:	4298      	cmp	r0, r3
 8008510:	6871      	ldr	r1, [r6, #4]
 8008512:	d953      	bls.n	80085bc <_dtoa_r+0x2ec>
 8008514:	4620      	mov	r0, r4
 8008516:	f000 fc42 	bl	8008d9e <_Balloc>
 800851a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800851c:	6030      	str	r0, [r6, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	9304      	str	r3, [sp, #16]
 8008522:	f1b9 0f0e 	cmp.w	r9, #14
 8008526:	f200 80c2 	bhi.w	80086ae <_dtoa_r+0x3de>
 800852a:	2d00      	cmp	r5, #0
 800852c:	f000 80bf 	beq.w	80086ae <_dtoa_r+0x3de>
 8008530:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008534:	f1bb 0f00 	cmp.w	fp, #0
 8008538:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800853c:	f340 80e6 	ble.w	800870c <_dtoa_r+0x43c>
 8008540:	4a2b      	ldr	r2, [pc, #172]	; (80085f0 <_dtoa_r+0x320>)
 8008542:	f00b 030f 	and.w	r3, fp, #15
 8008546:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800854a:	ed93 7b00 	vldr	d7, [r3]
 800854e:	ea4f 132b 	mov.w	r3, fp, asr #4
 8008552:	06da      	lsls	r2, r3, #27
 8008554:	f140 80d8 	bpl.w	8008708 <_dtoa_r+0x438>
 8008558:	4a26      	ldr	r2, [pc, #152]	; (80085f4 <_dtoa_r+0x324>)
 800855a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800855e:	ed92 6b08 	vldr	d6, [r2, #32]
 8008562:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008566:	ed8d 6b02 	vstr	d6, [sp, #8]
 800856a:	f003 030f 	and.w	r3, r3, #15
 800856e:	2203      	movs	r2, #3
 8008570:	4920      	ldr	r1, [pc, #128]	; (80085f4 <_dtoa_r+0x324>)
 8008572:	e04a      	b.n	800860a <_dtoa_r+0x33a>
 8008574:	2301      	movs	r3, #1
 8008576:	9309      	str	r3, [sp, #36]	; 0x24
 8008578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800857a:	445b      	add	r3, fp
 800857c:	f103 0901 	add.w	r9, r3, #1
 8008580:	9306      	str	r3, [sp, #24]
 8008582:	464b      	mov	r3, r9
 8008584:	2b01      	cmp	r3, #1
 8008586:	bfb8      	it	lt
 8008588:	2301      	movlt	r3, #1
 800858a:	e7ba      	b.n	8008502 <_dtoa_r+0x232>
 800858c:	2300      	movs	r3, #0
 800858e:	e7b2      	b.n	80084f6 <_dtoa_r+0x226>
 8008590:	2300      	movs	r3, #0
 8008592:	e7f0      	b.n	8008576 <_dtoa_r+0x2a6>
 8008594:	2501      	movs	r5, #1
 8008596:	2300      	movs	r3, #0
 8008598:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800859c:	f04f 33ff 	mov.w	r3, #4294967295
 80085a0:	9306      	str	r3, [sp, #24]
 80085a2:	4699      	mov	r9, r3
 80085a4:	2200      	movs	r2, #0
 80085a6:	2312      	movs	r3, #18
 80085a8:	920a      	str	r2, [sp, #40]	; 0x28
 80085aa:	e7aa      	b.n	8008502 <_dtoa_r+0x232>
 80085ac:	2301      	movs	r3, #1
 80085ae:	9309      	str	r3, [sp, #36]	; 0x24
 80085b0:	e7f4      	b.n	800859c <_dtoa_r+0x2cc>
 80085b2:	2301      	movs	r3, #1
 80085b4:	9306      	str	r3, [sp, #24]
 80085b6:	4699      	mov	r9, r3
 80085b8:	461a      	mov	r2, r3
 80085ba:	e7f5      	b.n	80085a8 <_dtoa_r+0x2d8>
 80085bc:	3101      	adds	r1, #1
 80085be:	6071      	str	r1, [r6, #4]
 80085c0:	0052      	lsls	r2, r2, #1
 80085c2:	e7a2      	b.n	800850a <_dtoa_r+0x23a>
 80085c4:	f3af 8000 	nop.w
 80085c8:	636f4361 	.word	0x636f4361
 80085cc:	3fd287a7 	.word	0x3fd287a7
 80085d0:	8b60c8b3 	.word	0x8b60c8b3
 80085d4:	3fc68a28 	.word	0x3fc68a28
 80085d8:	509f79fb 	.word	0x509f79fb
 80085dc:	3fd34413 	.word	0x3fd34413
 80085e0:	7ff00000 	.word	0x7ff00000
 80085e4:	08009c8d 	.word	0x08009c8d
 80085e8:	08009c84 	.word	0x08009c84
 80085ec:	08009c61 	.word	0x08009c61
 80085f0:	08009cc0 	.word	0x08009cc0
 80085f4:	08009c98 	.word	0x08009c98
 80085f8:	07de      	lsls	r6, r3, #31
 80085fa:	d504      	bpl.n	8008606 <_dtoa_r+0x336>
 80085fc:	ed91 6b00 	vldr	d6, [r1]
 8008600:	3201      	adds	r2, #1
 8008602:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008606:	105b      	asrs	r3, r3, #1
 8008608:	3108      	adds	r1, #8
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1f4      	bne.n	80085f8 <_dtoa_r+0x328>
 800860e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008612:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008616:	ed8d 7b02 	vstr	d7, [sp, #8]
 800861a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800861c:	2b00      	cmp	r3, #0
 800861e:	f000 80a7 	beq.w	8008770 <_dtoa_r+0x4a0>
 8008622:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008626:	ed9d 7b02 	vldr	d7, [sp, #8]
 800862a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800862e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008632:	f140 809d 	bpl.w	8008770 <_dtoa_r+0x4a0>
 8008636:	f1b9 0f00 	cmp.w	r9, #0
 800863a:	f000 8099 	beq.w	8008770 <_dtoa_r+0x4a0>
 800863e:	9b06      	ldr	r3, [sp, #24]
 8008640:	2b00      	cmp	r3, #0
 8008642:	dd30      	ble.n	80086a6 <_dtoa_r+0x3d6>
 8008644:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008648:	ee27 7b06 	vmul.f64	d7, d7, d6
 800864c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008650:	9d06      	ldr	r5, [sp, #24]
 8008652:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008656:	3201      	adds	r2, #1
 8008658:	ed9d 6b02 	vldr	d6, [sp, #8]
 800865c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008660:	ee07 2a90 	vmov	s15, r2
 8008664:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008668:	eea7 5b06 	vfma.f64	d5, d7, d6
 800866c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008670:	9a03      	ldr	r2, [sp, #12]
 8008672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008676:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800867a:	2d00      	cmp	r5, #0
 800867c:	d17b      	bne.n	8008776 <_dtoa_r+0x4a6>
 800867e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008682:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008686:	ec41 0b17 	vmov	d7, r0, r1
 800868a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800868e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008692:	f300 8253 	bgt.w	8008b3c <_dtoa_r+0x86c>
 8008696:	eeb1 7b47 	vneg.f64	d7, d7
 800869a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800869e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086a2:	f100 8249 	bmi.w	8008b38 <_dtoa_r+0x868>
 80086a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80086aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80086ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f2c0 8119 	blt.w	80088e8 <_dtoa_r+0x618>
 80086b6:	f1bb 0f0e 	cmp.w	fp, #14
 80086ba:	f300 8115 	bgt.w	80088e8 <_dtoa_r+0x618>
 80086be:	4bc3      	ldr	r3, [pc, #780]	; (80089cc <_dtoa_r+0x6fc>)
 80086c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80086c4:	ed93 6b00 	vldr	d6, [r3]
 80086c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f280 80ba 	bge.w	8008844 <_dtoa_r+0x574>
 80086d0:	f1b9 0f00 	cmp.w	r9, #0
 80086d4:	f300 80b6 	bgt.w	8008844 <_dtoa_r+0x574>
 80086d8:	f040 822d 	bne.w	8008b36 <_dtoa_r+0x866>
 80086dc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80086e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80086e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80086ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086f0:	464d      	mov	r5, r9
 80086f2:	464f      	mov	r7, r9
 80086f4:	f280 8204 	bge.w	8008b00 <_dtoa_r+0x830>
 80086f8:	9b04      	ldr	r3, [sp, #16]
 80086fa:	9a04      	ldr	r2, [sp, #16]
 80086fc:	1c5e      	adds	r6, r3, #1
 80086fe:	2331      	movs	r3, #49	; 0x31
 8008700:	7013      	strb	r3, [r2, #0]
 8008702:	f10b 0b01 	add.w	fp, fp, #1
 8008706:	e1ff      	b.n	8008b08 <_dtoa_r+0x838>
 8008708:	2202      	movs	r2, #2
 800870a:	e731      	b.n	8008570 <_dtoa_r+0x2a0>
 800870c:	d02e      	beq.n	800876c <_dtoa_r+0x49c>
 800870e:	f1cb 0300 	rsb	r3, fp, #0
 8008712:	4aae      	ldr	r2, [pc, #696]	; (80089cc <_dtoa_r+0x6fc>)
 8008714:	f003 010f 	and.w	r1, r3, #15
 8008718:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800871c:	ed92 7b00 	vldr	d7, [r2]
 8008720:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8008724:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008728:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800872c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8008730:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008734:	49a6      	ldr	r1, [pc, #664]	; (80089d0 <_dtoa_r+0x700>)
 8008736:	111b      	asrs	r3, r3, #4
 8008738:	2000      	movs	r0, #0
 800873a:	2202      	movs	r2, #2
 800873c:	b93b      	cbnz	r3, 800874e <_dtoa_r+0x47e>
 800873e:	2800      	cmp	r0, #0
 8008740:	f43f af6b 	beq.w	800861a <_dtoa_r+0x34a>
 8008744:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008748:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800874c:	e765      	b.n	800861a <_dtoa_r+0x34a>
 800874e:	07dd      	lsls	r5, r3, #31
 8008750:	d509      	bpl.n	8008766 <_dtoa_r+0x496>
 8008752:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8008756:	ed91 7b00 	vldr	d7, [r1]
 800875a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800875e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008762:	3201      	adds	r2, #1
 8008764:	2001      	movs	r0, #1
 8008766:	105b      	asrs	r3, r3, #1
 8008768:	3108      	adds	r1, #8
 800876a:	e7e7      	b.n	800873c <_dtoa_r+0x46c>
 800876c:	2202      	movs	r2, #2
 800876e:	e754      	b.n	800861a <_dtoa_r+0x34a>
 8008770:	465b      	mov	r3, fp
 8008772:	464d      	mov	r5, r9
 8008774:	e770      	b.n	8008658 <_dtoa_r+0x388>
 8008776:	4a95      	ldr	r2, [pc, #596]	; (80089cc <_dtoa_r+0x6fc>)
 8008778:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800877c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008780:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008782:	ec41 0b17 	vmov	d7, r0, r1
 8008786:	b35a      	cbz	r2, 80087e0 <_dtoa_r+0x510>
 8008788:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800878c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008790:	9e04      	ldr	r6, [sp, #16]
 8008792:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008796:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800879a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800879e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80087a2:	ee14 2a90 	vmov	r2, s9
 80087a6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80087aa:	3230      	adds	r2, #48	; 0x30
 80087ac:	ee36 6b45 	vsub.f64	d6, d6, d5
 80087b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80087b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b8:	f806 2b01 	strb.w	r2, [r6], #1
 80087bc:	d43b      	bmi.n	8008836 <_dtoa_r+0x566>
 80087be:	ee32 5b46 	vsub.f64	d5, d2, d6
 80087c2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80087c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ca:	d472      	bmi.n	80088b2 <_dtoa_r+0x5e2>
 80087cc:	9a04      	ldr	r2, [sp, #16]
 80087ce:	1ab2      	subs	r2, r6, r2
 80087d0:	4295      	cmp	r5, r2
 80087d2:	f77f af68 	ble.w	80086a6 <_dtoa_r+0x3d6>
 80087d6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80087da:	ee26 6b03 	vmul.f64	d6, d6, d3
 80087de:	e7de      	b.n	800879e <_dtoa_r+0x4ce>
 80087e0:	9a04      	ldr	r2, [sp, #16]
 80087e2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80087e6:	1956      	adds	r6, r2, r5
 80087e8:	4611      	mov	r1, r2
 80087ea:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80087ee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80087f2:	ee14 2a90 	vmov	r2, s9
 80087f6:	3230      	adds	r2, #48	; 0x30
 80087f8:	f801 2b01 	strb.w	r2, [r1], #1
 80087fc:	42b1      	cmp	r1, r6
 80087fe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008802:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008806:	d11a      	bne.n	800883e <_dtoa_r+0x56e>
 8008808:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800880c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008810:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008818:	dc4b      	bgt.n	80088b2 <_dtoa_r+0x5e2>
 800881a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800881e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008826:	f57f af3e 	bpl.w	80086a6 <_dtoa_r+0x3d6>
 800882a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800882e:	2a30      	cmp	r2, #48	; 0x30
 8008830:	f106 31ff 	add.w	r1, r6, #4294967295
 8008834:	d001      	beq.n	800883a <_dtoa_r+0x56a>
 8008836:	469b      	mov	fp, r3
 8008838:	e02a      	b.n	8008890 <_dtoa_r+0x5c0>
 800883a:	460e      	mov	r6, r1
 800883c:	e7f5      	b.n	800882a <_dtoa_r+0x55a>
 800883e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008842:	e7d4      	b.n	80087ee <_dtoa_r+0x51e>
 8008844:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008848:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800884c:	9e04      	ldr	r6, [sp, #16]
 800884e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008852:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008856:	ee15 3a10 	vmov	r3, s10
 800885a:	3330      	adds	r3, #48	; 0x30
 800885c:	f806 3b01 	strb.w	r3, [r6], #1
 8008860:	9b04      	ldr	r3, [sp, #16]
 8008862:	1af3      	subs	r3, r6, r3
 8008864:	4599      	cmp	r9, r3
 8008866:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800886a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800886e:	d133      	bne.n	80088d8 <_dtoa_r+0x608>
 8008870:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008874:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800887c:	dc18      	bgt.n	80088b0 <_dtoa_r+0x5e0>
 800887e:	eeb4 7b46 	vcmp.f64	d7, d6
 8008882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008886:	d103      	bne.n	8008890 <_dtoa_r+0x5c0>
 8008888:	ee15 3a10 	vmov	r3, s10
 800888c:	07db      	lsls	r3, r3, #31
 800888e:	d40f      	bmi.n	80088b0 <_dtoa_r+0x5e0>
 8008890:	9901      	ldr	r1, [sp, #4]
 8008892:	4620      	mov	r0, r4
 8008894:	f000 fab7 	bl	8008e06 <_Bfree>
 8008898:	2300      	movs	r3, #0
 800889a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800889c:	7033      	strb	r3, [r6, #0]
 800889e:	f10b 0301 	add.w	r3, fp, #1
 80088a2:	6013      	str	r3, [r2, #0]
 80088a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f43f ad5b 	beq.w	8008362 <_dtoa_r+0x92>
 80088ac:	601e      	str	r6, [r3, #0]
 80088ae:	e558      	b.n	8008362 <_dtoa_r+0x92>
 80088b0:	465b      	mov	r3, fp
 80088b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80088b6:	2939      	cmp	r1, #57	; 0x39
 80088b8:	f106 32ff 	add.w	r2, r6, #4294967295
 80088bc:	d106      	bne.n	80088cc <_dtoa_r+0x5fc>
 80088be:	9904      	ldr	r1, [sp, #16]
 80088c0:	4291      	cmp	r1, r2
 80088c2:	d107      	bne.n	80088d4 <_dtoa_r+0x604>
 80088c4:	2230      	movs	r2, #48	; 0x30
 80088c6:	700a      	strb	r2, [r1, #0]
 80088c8:	3301      	adds	r3, #1
 80088ca:	460a      	mov	r2, r1
 80088cc:	7811      	ldrb	r1, [r2, #0]
 80088ce:	3101      	adds	r1, #1
 80088d0:	7011      	strb	r1, [r2, #0]
 80088d2:	e7b0      	b.n	8008836 <_dtoa_r+0x566>
 80088d4:	4616      	mov	r6, r2
 80088d6:	e7ec      	b.n	80088b2 <_dtoa_r+0x5e2>
 80088d8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80088dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80088e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e4:	d1b3      	bne.n	800884e <_dtoa_r+0x57e>
 80088e6:	e7d3      	b.n	8008890 <_dtoa_r+0x5c0>
 80088e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088ea:	2a00      	cmp	r2, #0
 80088ec:	f000 808d 	beq.w	8008a0a <_dtoa_r+0x73a>
 80088f0:	9a08      	ldr	r2, [sp, #32]
 80088f2:	2a01      	cmp	r2, #1
 80088f4:	dc72      	bgt.n	80089dc <_dtoa_r+0x70c>
 80088f6:	2f00      	cmp	r7, #0
 80088f8:	d06c      	beq.n	80089d4 <_dtoa_r+0x704>
 80088fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088fe:	4645      	mov	r5, r8
 8008900:	4656      	mov	r6, sl
 8008902:	9a07      	ldr	r2, [sp, #28]
 8008904:	2101      	movs	r1, #1
 8008906:	441a      	add	r2, r3
 8008908:	4620      	mov	r0, r4
 800890a:	449a      	add	sl, r3
 800890c:	9207      	str	r2, [sp, #28]
 800890e:	f000 fb1a 	bl	8008f46 <__i2b>
 8008912:	4607      	mov	r7, r0
 8008914:	2e00      	cmp	r6, #0
 8008916:	dd0b      	ble.n	8008930 <_dtoa_r+0x660>
 8008918:	9b07      	ldr	r3, [sp, #28]
 800891a:	2b00      	cmp	r3, #0
 800891c:	dd08      	ble.n	8008930 <_dtoa_r+0x660>
 800891e:	42b3      	cmp	r3, r6
 8008920:	9a07      	ldr	r2, [sp, #28]
 8008922:	bfa8      	it	ge
 8008924:	4633      	movge	r3, r6
 8008926:	ebaa 0a03 	sub.w	sl, sl, r3
 800892a:	1af6      	subs	r6, r6, r3
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	9307      	str	r3, [sp, #28]
 8008930:	f1b8 0f00 	cmp.w	r8, #0
 8008934:	d01d      	beq.n	8008972 <_dtoa_r+0x6a2>
 8008936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008938:	2b00      	cmp	r3, #0
 800893a:	d06a      	beq.n	8008a12 <_dtoa_r+0x742>
 800893c:	b18d      	cbz	r5, 8008962 <_dtoa_r+0x692>
 800893e:	4639      	mov	r1, r7
 8008940:	462a      	mov	r2, r5
 8008942:	4620      	mov	r0, r4
 8008944:	f000 fb9e 	bl	8009084 <__pow5mult>
 8008948:	9a01      	ldr	r2, [sp, #4]
 800894a:	4601      	mov	r1, r0
 800894c:	4607      	mov	r7, r0
 800894e:	4620      	mov	r0, r4
 8008950:	f000 fb02 	bl	8008f58 <__multiply>
 8008954:	9901      	ldr	r1, [sp, #4]
 8008956:	900c      	str	r0, [sp, #48]	; 0x30
 8008958:	4620      	mov	r0, r4
 800895a:	f000 fa54 	bl	8008e06 <_Bfree>
 800895e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008960:	9301      	str	r3, [sp, #4]
 8008962:	ebb8 0205 	subs.w	r2, r8, r5
 8008966:	d004      	beq.n	8008972 <_dtoa_r+0x6a2>
 8008968:	9901      	ldr	r1, [sp, #4]
 800896a:	4620      	mov	r0, r4
 800896c:	f000 fb8a 	bl	8009084 <__pow5mult>
 8008970:	9001      	str	r0, [sp, #4]
 8008972:	2101      	movs	r1, #1
 8008974:	4620      	mov	r0, r4
 8008976:	f000 fae6 	bl	8008f46 <__i2b>
 800897a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800897c:	4605      	mov	r5, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 81ca 	beq.w	8008d18 <_dtoa_r+0xa48>
 8008984:	461a      	mov	r2, r3
 8008986:	4601      	mov	r1, r0
 8008988:	4620      	mov	r0, r4
 800898a:	f000 fb7b 	bl	8009084 <__pow5mult>
 800898e:	9b08      	ldr	r3, [sp, #32]
 8008990:	2b01      	cmp	r3, #1
 8008992:	4605      	mov	r5, r0
 8008994:	dc44      	bgt.n	8008a20 <_dtoa_r+0x750>
 8008996:	9b02      	ldr	r3, [sp, #8]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d13c      	bne.n	8008a16 <_dtoa_r+0x746>
 800899c:	9b03      	ldr	r3, [sp, #12]
 800899e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d137      	bne.n	8008a16 <_dtoa_r+0x746>
 80089a6:	9b03      	ldr	r3, [sp, #12]
 80089a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089ac:	0d1b      	lsrs	r3, r3, #20
 80089ae:	051b      	lsls	r3, r3, #20
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d033      	beq.n	8008a1c <_dtoa_r+0x74c>
 80089b4:	9b07      	ldr	r3, [sp, #28]
 80089b6:	3301      	adds	r3, #1
 80089b8:	f10a 0a01 	add.w	sl, sl, #1
 80089bc:	9307      	str	r3, [sp, #28]
 80089be:	f04f 0801 	mov.w	r8, #1
 80089c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089c4:	bb73      	cbnz	r3, 8008a24 <_dtoa_r+0x754>
 80089c6:	2001      	movs	r0, #1
 80089c8:	e034      	b.n	8008a34 <_dtoa_r+0x764>
 80089ca:	bf00      	nop
 80089cc:	08009cc0 	.word	0x08009cc0
 80089d0:	08009c98 	.word	0x08009c98
 80089d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089da:	e790      	b.n	80088fe <_dtoa_r+0x62e>
 80089dc:	f109 35ff 	add.w	r5, r9, #4294967295
 80089e0:	45a8      	cmp	r8, r5
 80089e2:	bfbf      	itttt	lt
 80089e4:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80089e6:	eba5 0808 	sublt.w	r8, r5, r8
 80089ea:	4443      	addlt	r3, r8
 80089ec:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80089ee:	bfb6      	itet	lt
 80089f0:	46a8      	movlt	r8, r5
 80089f2:	eba8 0505 	subge.w	r5, r8, r5
 80089f6:	2500      	movlt	r5, #0
 80089f8:	f1b9 0f00 	cmp.w	r9, #0
 80089fc:	bfb9      	ittee	lt
 80089fe:	ebaa 0609 	sublt.w	r6, sl, r9
 8008a02:	2300      	movlt	r3, #0
 8008a04:	4656      	movge	r6, sl
 8008a06:	464b      	movge	r3, r9
 8008a08:	e77b      	b.n	8008902 <_dtoa_r+0x632>
 8008a0a:	4645      	mov	r5, r8
 8008a0c:	4656      	mov	r6, sl
 8008a0e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008a10:	e780      	b.n	8008914 <_dtoa_r+0x644>
 8008a12:	4642      	mov	r2, r8
 8008a14:	e7a8      	b.n	8008968 <_dtoa_r+0x698>
 8008a16:	f04f 0800 	mov.w	r8, #0
 8008a1a:	e7d2      	b.n	80089c2 <_dtoa_r+0x6f2>
 8008a1c:	4698      	mov	r8, r3
 8008a1e:	e7d0      	b.n	80089c2 <_dtoa_r+0x6f2>
 8008a20:	f04f 0800 	mov.w	r8, #0
 8008a24:	692b      	ldr	r3, [r5, #16]
 8008a26:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008a2a:	6918      	ldr	r0, [r3, #16]
 8008a2c:	f000 fa3d 	bl	8008eaa <__hi0bits>
 8008a30:	f1c0 0020 	rsb	r0, r0, #32
 8008a34:	9b07      	ldr	r3, [sp, #28]
 8008a36:	4418      	add	r0, r3
 8008a38:	f010 001f 	ands.w	r0, r0, #31
 8008a3c:	d047      	beq.n	8008ace <_dtoa_r+0x7fe>
 8008a3e:	f1c0 0320 	rsb	r3, r0, #32
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	dd3b      	ble.n	8008abe <_dtoa_r+0x7ee>
 8008a46:	9b07      	ldr	r3, [sp, #28]
 8008a48:	f1c0 001c 	rsb	r0, r0, #28
 8008a4c:	4482      	add	sl, r0
 8008a4e:	4406      	add	r6, r0
 8008a50:	4403      	add	r3, r0
 8008a52:	9307      	str	r3, [sp, #28]
 8008a54:	f1ba 0f00 	cmp.w	sl, #0
 8008a58:	dd05      	ble.n	8008a66 <_dtoa_r+0x796>
 8008a5a:	4652      	mov	r2, sl
 8008a5c:	9901      	ldr	r1, [sp, #4]
 8008a5e:	4620      	mov	r0, r4
 8008a60:	f000 fb5e 	bl	8009120 <__lshift>
 8008a64:	9001      	str	r0, [sp, #4]
 8008a66:	9b07      	ldr	r3, [sp, #28]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	dd05      	ble.n	8008a78 <_dtoa_r+0x7a8>
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	461a      	mov	r2, r3
 8008a70:	4620      	mov	r0, r4
 8008a72:	f000 fb55 	bl	8009120 <__lshift>
 8008a76:	4605      	mov	r5, r0
 8008a78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a7a:	b353      	cbz	r3, 8008ad2 <_dtoa_r+0x802>
 8008a7c:	4629      	mov	r1, r5
 8008a7e:	9801      	ldr	r0, [sp, #4]
 8008a80:	f000 fba2 	bl	80091c8 <__mcmp>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	da24      	bge.n	8008ad2 <_dtoa_r+0x802>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	220a      	movs	r2, #10
 8008a8c:	9901      	ldr	r1, [sp, #4]
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f000 f9d0 	bl	8008e34 <__multadd>
 8008a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a96:	9001      	str	r0, [sp, #4]
 8008a98:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f000 8142 	beq.w	8008d26 <_dtoa_r+0xa56>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	220a      	movs	r2, #10
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f000 f9c3 	bl	8008e34 <__multadd>
 8008aae:	9b06      	ldr	r3, [sp, #24]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	4607      	mov	r7, r0
 8008ab4:	dc4b      	bgt.n	8008b4e <_dtoa_r+0x87e>
 8008ab6:	9b08      	ldr	r3, [sp, #32]
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	dd48      	ble.n	8008b4e <_dtoa_r+0x87e>
 8008abc:	e011      	b.n	8008ae2 <_dtoa_r+0x812>
 8008abe:	d0c9      	beq.n	8008a54 <_dtoa_r+0x784>
 8008ac0:	9a07      	ldr	r2, [sp, #28]
 8008ac2:	331c      	adds	r3, #28
 8008ac4:	441a      	add	r2, r3
 8008ac6:	449a      	add	sl, r3
 8008ac8:	441e      	add	r6, r3
 8008aca:	4613      	mov	r3, r2
 8008acc:	e7c1      	b.n	8008a52 <_dtoa_r+0x782>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	e7f6      	b.n	8008ac0 <_dtoa_r+0x7f0>
 8008ad2:	f1b9 0f00 	cmp.w	r9, #0
 8008ad6:	dc34      	bgt.n	8008b42 <_dtoa_r+0x872>
 8008ad8:	9b08      	ldr	r3, [sp, #32]
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	dd31      	ble.n	8008b42 <_dtoa_r+0x872>
 8008ade:	f8cd 9018 	str.w	r9, [sp, #24]
 8008ae2:	9b06      	ldr	r3, [sp, #24]
 8008ae4:	b963      	cbnz	r3, 8008b00 <_dtoa_r+0x830>
 8008ae6:	4629      	mov	r1, r5
 8008ae8:	2205      	movs	r2, #5
 8008aea:	4620      	mov	r0, r4
 8008aec:	f000 f9a2 	bl	8008e34 <__multadd>
 8008af0:	4601      	mov	r1, r0
 8008af2:	4605      	mov	r5, r0
 8008af4:	9801      	ldr	r0, [sp, #4]
 8008af6:	f000 fb67 	bl	80091c8 <__mcmp>
 8008afa:	2800      	cmp	r0, #0
 8008afc:	f73f adfc 	bgt.w	80086f8 <_dtoa_r+0x428>
 8008b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b02:	9e04      	ldr	r6, [sp, #16]
 8008b04:	ea6f 0b03 	mvn.w	fp, r3
 8008b08:	f04f 0900 	mov.w	r9, #0
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 f979 	bl	8008e06 <_Bfree>
 8008b14:	2f00      	cmp	r7, #0
 8008b16:	f43f aebb 	beq.w	8008890 <_dtoa_r+0x5c0>
 8008b1a:	f1b9 0f00 	cmp.w	r9, #0
 8008b1e:	d005      	beq.n	8008b2c <_dtoa_r+0x85c>
 8008b20:	45b9      	cmp	r9, r7
 8008b22:	d003      	beq.n	8008b2c <_dtoa_r+0x85c>
 8008b24:	4649      	mov	r1, r9
 8008b26:	4620      	mov	r0, r4
 8008b28:	f000 f96d 	bl	8008e06 <_Bfree>
 8008b2c:	4639      	mov	r1, r7
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 f969 	bl	8008e06 <_Bfree>
 8008b34:	e6ac      	b.n	8008890 <_dtoa_r+0x5c0>
 8008b36:	2500      	movs	r5, #0
 8008b38:	462f      	mov	r7, r5
 8008b3a:	e7e1      	b.n	8008b00 <_dtoa_r+0x830>
 8008b3c:	469b      	mov	fp, r3
 8008b3e:	462f      	mov	r7, r5
 8008b40:	e5da      	b.n	80086f8 <_dtoa_r+0x428>
 8008b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b44:	f8cd 9018 	str.w	r9, [sp, #24]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f000 80f3 	beq.w	8008d34 <_dtoa_r+0xa64>
 8008b4e:	2e00      	cmp	r6, #0
 8008b50:	dd05      	ble.n	8008b5e <_dtoa_r+0x88e>
 8008b52:	4639      	mov	r1, r7
 8008b54:	4632      	mov	r2, r6
 8008b56:	4620      	mov	r0, r4
 8008b58:	f000 fae2 	bl	8009120 <__lshift>
 8008b5c:	4607      	mov	r7, r0
 8008b5e:	f1b8 0f00 	cmp.w	r8, #0
 8008b62:	d04c      	beq.n	8008bfe <_dtoa_r+0x92e>
 8008b64:	6879      	ldr	r1, [r7, #4]
 8008b66:	4620      	mov	r0, r4
 8008b68:	f000 f919 	bl	8008d9e <_Balloc>
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	3202      	adds	r2, #2
 8008b70:	4606      	mov	r6, r0
 8008b72:	0092      	lsls	r2, r2, #2
 8008b74:	f107 010c 	add.w	r1, r7, #12
 8008b78:	300c      	adds	r0, #12
 8008b7a:	f000 f903 	bl	8008d84 <memcpy>
 8008b7e:	2201      	movs	r2, #1
 8008b80:	4631      	mov	r1, r6
 8008b82:	4620      	mov	r0, r4
 8008b84:	f000 facc 	bl	8009120 <__lshift>
 8008b88:	9b02      	ldr	r3, [sp, #8]
 8008b8a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	46b9      	mov	r9, r7
 8008b94:	9307      	str	r3, [sp, #28]
 8008b96:	4607      	mov	r7, r0
 8008b98:	4629      	mov	r1, r5
 8008b9a:	9801      	ldr	r0, [sp, #4]
 8008b9c:	f7ff fb0c 	bl	80081b8 <quorem>
 8008ba0:	4649      	mov	r1, r9
 8008ba2:	4606      	mov	r6, r0
 8008ba4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008ba8:	9801      	ldr	r0, [sp, #4]
 8008baa:	f000 fb0d 	bl	80091c8 <__mcmp>
 8008bae:	463a      	mov	r2, r7
 8008bb0:	9002      	str	r0, [sp, #8]
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f000 fb21 	bl	80091fc <__mdiff>
 8008bba:	68c3      	ldr	r3, [r0, #12]
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	bb03      	cbnz	r3, 8008c02 <_dtoa_r+0x932>
 8008bc0:	4601      	mov	r1, r0
 8008bc2:	9009      	str	r0, [sp, #36]	; 0x24
 8008bc4:	9801      	ldr	r0, [sp, #4]
 8008bc6:	f000 faff 	bl	80091c8 <__mcmp>
 8008bca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bcc:	4603      	mov	r3, r0
 8008bce:	4611      	mov	r1, r2
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008bd4:	f000 f917 	bl	8008e06 <_Bfree>
 8008bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bda:	b9a3      	cbnz	r3, 8008c06 <_dtoa_r+0x936>
 8008bdc:	9a08      	ldr	r2, [sp, #32]
 8008bde:	b992      	cbnz	r2, 8008c06 <_dtoa_r+0x936>
 8008be0:	9a07      	ldr	r2, [sp, #28]
 8008be2:	b982      	cbnz	r2, 8008c06 <_dtoa_r+0x936>
 8008be4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008be8:	d029      	beq.n	8008c3e <_dtoa_r+0x96e>
 8008bea:	9b02      	ldr	r3, [sp, #8]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	dd01      	ble.n	8008bf4 <_dtoa_r+0x924>
 8008bf0:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8008bf4:	f10a 0601 	add.w	r6, sl, #1
 8008bf8:	f88a 8000 	strb.w	r8, [sl]
 8008bfc:	e786      	b.n	8008b0c <_dtoa_r+0x83c>
 8008bfe:	4638      	mov	r0, r7
 8008c00:	e7c2      	b.n	8008b88 <_dtoa_r+0x8b8>
 8008c02:	2301      	movs	r3, #1
 8008c04:	e7e3      	b.n	8008bce <_dtoa_r+0x8fe>
 8008c06:	9a02      	ldr	r2, [sp, #8]
 8008c08:	2a00      	cmp	r2, #0
 8008c0a:	db04      	blt.n	8008c16 <_dtoa_r+0x946>
 8008c0c:	d124      	bne.n	8008c58 <_dtoa_r+0x988>
 8008c0e:	9a08      	ldr	r2, [sp, #32]
 8008c10:	bb12      	cbnz	r2, 8008c58 <_dtoa_r+0x988>
 8008c12:	9a07      	ldr	r2, [sp, #28]
 8008c14:	bb02      	cbnz	r2, 8008c58 <_dtoa_r+0x988>
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	ddec      	ble.n	8008bf4 <_dtoa_r+0x924>
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	9901      	ldr	r1, [sp, #4]
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f000 fa7e 	bl	8009120 <__lshift>
 8008c24:	4629      	mov	r1, r5
 8008c26:	9001      	str	r0, [sp, #4]
 8008c28:	f000 face 	bl	80091c8 <__mcmp>
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	dc03      	bgt.n	8008c38 <_dtoa_r+0x968>
 8008c30:	d1e0      	bne.n	8008bf4 <_dtoa_r+0x924>
 8008c32:	f018 0f01 	tst.w	r8, #1
 8008c36:	d0dd      	beq.n	8008bf4 <_dtoa_r+0x924>
 8008c38:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008c3c:	d1d8      	bne.n	8008bf0 <_dtoa_r+0x920>
 8008c3e:	2339      	movs	r3, #57	; 0x39
 8008c40:	f10a 0601 	add.w	r6, sl, #1
 8008c44:	f88a 3000 	strb.w	r3, [sl]
 8008c48:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c4c:	2b39      	cmp	r3, #57	; 0x39
 8008c4e:	f106 32ff 	add.w	r2, r6, #4294967295
 8008c52:	d04c      	beq.n	8008cee <_dtoa_r+0xa1e>
 8008c54:	3301      	adds	r3, #1
 8008c56:	e051      	b.n	8008cfc <_dtoa_r+0xa2c>
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f10a 0601 	add.w	r6, sl, #1
 8008c5e:	dd05      	ble.n	8008c6c <_dtoa_r+0x99c>
 8008c60:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008c64:	d0eb      	beq.n	8008c3e <_dtoa_r+0x96e>
 8008c66:	f108 0801 	add.w	r8, r8, #1
 8008c6a:	e7c5      	b.n	8008bf8 <_dtoa_r+0x928>
 8008c6c:	9b04      	ldr	r3, [sp, #16]
 8008c6e:	9a06      	ldr	r2, [sp, #24]
 8008c70:	f806 8c01 	strb.w	r8, [r6, #-1]
 8008c74:	1af3      	subs	r3, r6, r3
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d021      	beq.n	8008cbe <_dtoa_r+0x9ee>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	220a      	movs	r2, #10
 8008c7e:	9901      	ldr	r1, [sp, #4]
 8008c80:	4620      	mov	r0, r4
 8008c82:	f000 f8d7 	bl	8008e34 <__multadd>
 8008c86:	45b9      	cmp	r9, r7
 8008c88:	9001      	str	r0, [sp, #4]
 8008c8a:	f04f 0300 	mov.w	r3, #0
 8008c8e:	f04f 020a 	mov.w	r2, #10
 8008c92:	4649      	mov	r1, r9
 8008c94:	4620      	mov	r0, r4
 8008c96:	d105      	bne.n	8008ca4 <_dtoa_r+0x9d4>
 8008c98:	f000 f8cc 	bl	8008e34 <__multadd>
 8008c9c:	4681      	mov	r9, r0
 8008c9e:	4607      	mov	r7, r0
 8008ca0:	46b2      	mov	sl, r6
 8008ca2:	e779      	b.n	8008b98 <_dtoa_r+0x8c8>
 8008ca4:	f000 f8c6 	bl	8008e34 <__multadd>
 8008ca8:	4639      	mov	r1, r7
 8008caa:	4681      	mov	r9, r0
 8008cac:	2300      	movs	r3, #0
 8008cae:	220a      	movs	r2, #10
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f000 f8bf 	bl	8008e34 <__multadd>
 8008cb6:	4607      	mov	r7, r0
 8008cb8:	e7f2      	b.n	8008ca0 <_dtoa_r+0x9d0>
 8008cba:	f04f 0900 	mov.w	r9, #0
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	9901      	ldr	r1, [sp, #4]
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f000 fa2c 	bl	8009120 <__lshift>
 8008cc8:	4629      	mov	r1, r5
 8008cca:	9001      	str	r0, [sp, #4]
 8008ccc:	f000 fa7c 	bl	80091c8 <__mcmp>
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	dcb9      	bgt.n	8008c48 <_dtoa_r+0x978>
 8008cd4:	d102      	bne.n	8008cdc <_dtoa_r+0xa0c>
 8008cd6:	f018 0f01 	tst.w	r8, #1
 8008cda:	d1b5      	bne.n	8008c48 <_dtoa_r+0x978>
 8008cdc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008ce0:	2b30      	cmp	r3, #48	; 0x30
 8008ce2:	f106 32ff 	add.w	r2, r6, #4294967295
 8008ce6:	f47f af11 	bne.w	8008b0c <_dtoa_r+0x83c>
 8008cea:	4616      	mov	r6, r2
 8008cec:	e7f6      	b.n	8008cdc <_dtoa_r+0xa0c>
 8008cee:	9b04      	ldr	r3, [sp, #16]
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d105      	bne.n	8008d00 <_dtoa_r+0xa30>
 8008cf4:	9a04      	ldr	r2, [sp, #16]
 8008cf6:	f10b 0b01 	add.w	fp, fp, #1
 8008cfa:	2331      	movs	r3, #49	; 0x31
 8008cfc:	7013      	strb	r3, [r2, #0]
 8008cfe:	e705      	b.n	8008b0c <_dtoa_r+0x83c>
 8008d00:	4616      	mov	r6, r2
 8008d02:	e7a1      	b.n	8008c48 <_dtoa_r+0x978>
 8008d04:	4b16      	ldr	r3, [pc, #88]	; (8008d60 <_dtoa_r+0xa90>)
 8008d06:	f7ff bb48 	b.w	800839a <_dtoa_r+0xca>
 8008d0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f47f ab23 	bne.w	8008358 <_dtoa_r+0x88>
 8008d12:	4b14      	ldr	r3, [pc, #80]	; (8008d64 <_dtoa_r+0xa94>)
 8008d14:	f7ff bb41 	b.w	800839a <_dtoa_r+0xca>
 8008d18:	9b08      	ldr	r3, [sp, #32]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	f77f ae3b 	ble.w	8008996 <_dtoa_r+0x6c6>
 8008d20:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8008d24:	e64f      	b.n	80089c6 <_dtoa_r+0x6f6>
 8008d26:	9b06      	ldr	r3, [sp, #24]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	dc03      	bgt.n	8008d34 <_dtoa_r+0xa64>
 8008d2c:	9b08      	ldr	r3, [sp, #32]
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	f73f aed7 	bgt.w	8008ae2 <_dtoa_r+0x812>
 8008d34:	9e04      	ldr	r6, [sp, #16]
 8008d36:	9801      	ldr	r0, [sp, #4]
 8008d38:	4629      	mov	r1, r5
 8008d3a:	f7ff fa3d 	bl	80081b8 <quorem>
 8008d3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008d42:	f806 8b01 	strb.w	r8, [r6], #1
 8008d46:	9b04      	ldr	r3, [sp, #16]
 8008d48:	9a06      	ldr	r2, [sp, #24]
 8008d4a:	1af3      	subs	r3, r6, r3
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	ddb4      	ble.n	8008cba <_dtoa_r+0x9ea>
 8008d50:	2300      	movs	r3, #0
 8008d52:	220a      	movs	r2, #10
 8008d54:	9901      	ldr	r1, [sp, #4]
 8008d56:	4620      	mov	r0, r4
 8008d58:	f000 f86c 	bl	8008e34 <__multadd>
 8008d5c:	9001      	str	r0, [sp, #4]
 8008d5e:	e7ea      	b.n	8008d36 <_dtoa_r+0xa66>
 8008d60:	08009c60 	.word	0x08009c60
 8008d64:	08009c84 	.word	0x08009c84

08008d68 <_localeconv_r>:
 8008d68:	4b04      	ldr	r3, [pc, #16]	; (8008d7c <_localeconv_r+0x14>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	6a18      	ldr	r0, [r3, #32]
 8008d6e:	4b04      	ldr	r3, [pc, #16]	; (8008d80 <_localeconv_r+0x18>)
 8008d70:	2800      	cmp	r0, #0
 8008d72:	bf08      	it	eq
 8008d74:	4618      	moveq	r0, r3
 8008d76:	30f0      	adds	r0, #240	; 0xf0
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	20000014 	.word	0x20000014
 8008d80:	20000078 	.word	0x20000078

08008d84 <memcpy>:
 8008d84:	b510      	push	{r4, lr}
 8008d86:	1e43      	subs	r3, r0, #1
 8008d88:	440a      	add	r2, r1
 8008d8a:	4291      	cmp	r1, r2
 8008d8c:	d100      	bne.n	8008d90 <memcpy+0xc>
 8008d8e:	bd10      	pop	{r4, pc}
 8008d90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d98:	e7f7      	b.n	8008d8a <memcpy+0x6>

08008d9a <__malloc_lock>:
 8008d9a:	4770      	bx	lr

08008d9c <__malloc_unlock>:
 8008d9c:	4770      	bx	lr

08008d9e <_Balloc>:
 8008d9e:	b570      	push	{r4, r5, r6, lr}
 8008da0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008da2:	4604      	mov	r4, r0
 8008da4:	460e      	mov	r6, r1
 8008da6:	b93d      	cbnz	r5, 8008db8 <_Balloc+0x1a>
 8008da8:	2010      	movs	r0, #16
 8008daa:	f7fe fcd9 	bl	8007760 <malloc>
 8008dae:	6260      	str	r0, [r4, #36]	; 0x24
 8008db0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008db4:	6005      	str	r5, [r0, #0]
 8008db6:	60c5      	str	r5, [r0, #12]
 8008db8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008dba:	68eb      	ldr	r3, [r5, #12]
 8008dbc:	b183      	cbz	r3, 8008de0 <_Balloc+0x42>
 8008dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008dc6:	b9b8      	cbnz	r0, 8008df8 <_Balloc+0x5a>
 8008dc8:	2101      	movs	r1, #1
 8008dca:	fa01 f506 	lsl.w	r5, r1, r6
 8008dce:	1d6a      	adds	r2, r5, #5
 8008dd0:	0092      	lsls	r2, r2, #2
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f000 fabe 	bl	8009354 <_calloc_r>
 8008dd8:	b160      	cbz	r0, 8008df4 <_Balloc+0x56>
 8008dda:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008dde:	e00e      	b.n	8008dfe <_Balloc+0x60>
 8008de0:	2221      	movs	r2, #33	; 0x21
 8008de2:	2104      	movs	r1, #4
 8008de4:	4620      	mov	r0, r4
 8008de6:	f000 fab5 	bl	8009354 <_calloc_r>
 8008dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dec:	60e8      	str	r0, [r5, #12]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1e4      	bne.n	8008dbe <_Balloc+0x20>
 8008df4:	2000      	movs	r0, #0
 8008df6:	bd70      	pop	{r4, r5, r6, pc}
 8008df8:	6802      	ldr	r2, [r0, #0]
 8008dfa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008dfe:	2300      	movs	r3, #0
 8008e00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e04:	e7f7      	b.n	8008df6 <_Balloc+0x58>

08008e06 <_Bfree>:
 8008e06:	b570      	push	{r4, r5, r6, lr}
 8008e08:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008e0a:	4606      	mov	r6, r0
 8008e0c:	460d      	mov	r5, r1
 8008e0e:	b93c      	cbnz	r4, 8008e20 <_Bfree+0x1a>
 8008e10:	2010      	movs	r0, #16
 8008e12:	f7fe fca5 	bl	8007760 <malloc>
 8008e16:	6270      	str	r0, [r6, #36]	; 0x24
 8008e18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e1c:	6004      	str	r4, [r0, #0]
 8008e1e:	60c4      	str	r4, [r0, #12]
 8008e20:	b13d      	cbz	r5, 8008e32 <_Bfree+0x2c>
 8008e22:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008e24:	686a      	ldr	r2, [r5, #4]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e2c:	6029      	str	r1, [r5, #0]
 8008e2e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008e32:	bd70      	pop	{r4, r5, r6, pc}

08008e34 <__multadd>:
 8008e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e38:	690d      	ldr	r5, [r1, #16]
 8008e3a:	461f      	mov	r7, r3
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	460c      	mov	r4, r1
 8008e40:	f101 0c14 	add.w	ip, r1, #20
 8008e44:	2300      	movs	r3, #0
 8008e46:	f8dc 0000 	ldr.w	r0, [ip]
 8008e4a:	b281      	uxth	r1, r0
 8008e4c:	fb02 7101 	mla	r1, r2, r1, r7
 8008e50:	0c0f      	lsrs	r7, r1, #16
 8008e52:	0c00      	lsrs	r0, r0, #16
 8008e54:	fb02 7000 	mla	r0, r2, r0, r7
 8008e58:	b289      	uxth	r1, r1
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008e60:	429d      	cmp	r5, r3
 8008e62:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008e66:	f84c 1b04 	str.w	r1, [ip], #4
 8008e6a:	dcec      	bgt.n	8008e46 <__multadd+0x12>
 8008e6c:	b1d7      	cbz	r7, 8008ea4 <__multadd+0x70>
 8008e6e:	68a3      	ldr	r3, [r4, #8]
 8008e70:	42ab      	cmp	r3, r5
 8008e72:	dc12      	bgt.n	8008e9a <__multadd+0x66>
 8008e74:	6861      	ldr	r1, [r4, #4]
 8008e76:	4630      	mov	r0, r6
 8008e78:	3101      	adds	r1, #1
 8008e7a:	f7ff ff90 	bl	8008d9e <_Balloc>
 8008e7e:	6922      	ldr	r2, [r4, #16]
 8008e80:	3202      	adds	r2, #2
 8008e82:	f104 010c 	add.w	r1, r4, #12
 8008e86:	4680      	mov	r8, r0
 8008e88:	0092      	lsls	r2, r2, #2
 8008e8a:	300c      	adds	r0, #12
 8008e8c:	f7ff ff7a 	bl	8008d84 <memcpy>
 8008e90:	4621      	mov	r1, r4
 8008e92:	4630      	mov	r0, r6
 8008e94:	f7ff ffb7 	bl	8008e06 <_Bfree>
 8008e98:	4644      	mov	r4, r8
 8008e9a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e9e:	3501      	adds	r5, #1
 8008ea0:	615f      	str	r7, [r3, #20]
 8008ea2:	6125      	str	r5, [r4, #16]
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008eaa <__hi0bits>:
 8008eaa:	0c02      	lsrs	r2, r0, #16
 8008eac:	0412      	lsls	r2, r2, #16
 8008eae:	4603      	mov	r3, r0
 8008eb0:	b9b2      	cbnz	r2, 8008ee0 <__hi0bits+0x36>
 8008eb2:	0403      	lsls	r3, r0, #16
 8008eb4:	2010      	movs	r0, #16
 8008eb6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008eba:	bf04      	itt	eq
 8008ebc:	021b      	lsleq	r3, r3, #8
 8008ebe:	3008      	addeq	r0, #8
 8008ec0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008ec4:	bf04      	itt	eq
 8008ec6:	011b      	lsleq	r3, r3, #4
 8008ec8:	3004      	addeq	r0, #4
 8008eca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008ece:	bf04      	itt	eq
 8008ed0:	009b      	lsleq	r3, r3, #2
 8008ed2:	3002      	addeq	r0, #2
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	db06      	blt.n	8008ee6 <__hi0bits+0x3c>
 8008ed8:	005b      	lsls	r3, r3, #1
 8008eda:	d503      	bpl.n	8008ee4 <__hi0bits+0x3a>
 8008edc:	3001      	adds	r0, #1
 8008ede:	4770      	bx	lr
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	e7e8      	b.n	8008eb6 <__hi0bits+0xc>
 8008ee4:	2020      	movs	r0, #32
 8008ee6:	4770      	bx	lr

08008ee8 <__lo0bits>:
 8008ee8:	6803      	ldr	r3, [r0, #0]
 8008eea:	f013 0207 	ands.w	r2, r3, #7
 8008eee:	4601      	mov	r1, r0
 8008ef0:	d00b      	beq.n	8008f0a <__lo0bits+0x22>
 8008ef2:	07da      	lsls	r2, r3, #31
 8008ef4:	d423      	bmi.n	8008f3e <__lo0bits+0x56>
 8008ef6:	0798      	lsls	r0, r3, #30
 8008ef8:	bf49      	itett	mi
 8008efa:	085b      	lsrmi	r3, r3, #1
 8008efc:	089b      	lsrpl	r3, r3, #2
 8008efe:	2001      	movmi	r0, #1
 8008f00:	600b      	strmi	r3, [r1, #0]
 8008f02:	bf5c      	itt	pl
 8008f04:	600b      	strpl	r3, [r1, #0]
 8008f06:	2002      	movpl	r0, #2
 8008f08:	4770      	bx	lr
 8008f0a:	b298      	uxth	r0, r3
 8008f0c:	b9a8      	cbnz	r0, 8008f3a <__lo0bits+0x52>
 8008f0e:	0c1b      	lsrs	r3, r3, #16
 8008f10:	2010      	movs	r0, #16
 8008f12:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008f16:	bf04      	itt	eq
 8008f18:	0a1b      	lsreq	r3, r3, #8
 8008f1a:	3008      	addeq	r0, #8
 8008f1c:	071a      	lsls	r2, r3, #28
 8008f1e:	bf04      	itt	eq
 8008f20:	091b      	lsreq	r3, r3, #4
 8008f22:	3004      	addeq	r0, #4
 8008f24:	079a      	lsls	r2, r3, #30
 8008f26:	bf04      	itt	eq
 8008f28:	089b      	lsreq	r3, r3, #2
 8008f2a:	3002      	addeq	r0, #2
 8008f2c:	07da      	lsls	r2, r3, #31
 8008f2e:	d402      	bmi.n	8008f36 <__lo0bits+0x4e>
 8008f30:	085b      	lsrs	r3, r3, #1
 8008f32:	d006      	beq.n	8008f42 <__lo0bits+0x5a>
 8008f34:	3001      	adds	r0, #1
 8008f36:	600b      	str	r3, [r1, #0]
 8008f38:	4770      	bx	lr
 8008f3a:	4610      	mov	r0, r2
 8008f3c:	e7e9      	b.n	8008f12 <__lo0bits+0x2a>
 8008f3e:	2000      	movs	r0, #0
 8008f40:	4770      	bx	lr
 8008f42:	2020      	movs	r0, #32
 8008f44:	4770      	bx	lr

08008f46 <__i2b>:
 8008f46:	b510      	push	{r4, lr}
 8008f48:	460c      	mov	r4, r1
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	f7ff ff27 	bl	8008d9e <_Balloc>
 8008f50:	2201      	movs	r2, #1
 8008f52:	6144      	str	r4, [r0, #20]
 8008f54:	6102      	str	r2, [r0, #16]
 8008f56:	bd10      	pop	{r4, pc}

08008f58 <__multiply>:
 8008f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5c:	4614      	mov	r4, r2
 8008f5e:	690a      	ldr	r2, [r1, #16]
 8008f60:	6923      	ldr	r3, [r4, #16]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	bfb8      	it	lt
 8008f66:	460b      	movlt	r3, r1
 8008f68:	4688      	mov	r8, r1
 8008f6a:	bfbc      	itt	lt
 8008f6c:	46a0      	movlt	r8, r4
 8008f6e:	461c      	movlt	r4, r3
 8008f70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f74:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f78:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f80:	eb07 0609 	add.w	r6, r7, r9
 8008f84:	42b3      	cmp	r3, r6
 8008f86:	bfb8      	it	lt
 8008f88:	3101      	addlt	r1, #1
 8008f8a:	f7ff ff08 	bl	8008d9e <_Balloc>
 8008f8e:	f100 0514 	add.w	r5, r0, #20
 8008f92:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008f96:	462b      	mov	r3, r5
 8008f98:	2200      	movs	r2, #0
 8008f9a:	4573      	cmp	r3, lr
 8008f9c:	d316      	bcc.n	8008fcc <__multiply+0x74>
 8008f9e:	f104 0214 	add.w	r2, r4, #20
 8008fa2:	f108 0114 	add.w	r1, r8, #20
 8008fa6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008faa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	9b00      	ldr	r3, [sp, #0]
 8008fb2:	9201      	str	r2, [sp, #4]
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d80c      	bhi.n	8008fd2 <__multiply+0x7a>
 8008fb8:	2e00      	cmp	r6, #0
 8008fba:	dd03      	ble.n	8008fc4 <__multiply+0x6c>
 8008fbc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d05d      	beq.n	8009080 <__multiply+0x128>
 8008fc4:	6106      	str	r6, [r0, #16]
 8008fc6:	b003      	add	sp, #12
 8008fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fcc:	f843 2b04 	str.w	r2, [r3], #4
 8008fd0:	e7e3      	b.n	8008f9a <__multiply+0x42>
 8008fd2:	f8b2 b000 	ldrh.w	fp, [r2]
 8008fd6:	f1bb 0f00 	cmp.w	fp, #0
 8008fda:	d023      	beq.n	8009024 <__multiply+0xcc>
 8008fdc:	4689      	mov	r9, r1
 8008fde:	46ac      	mov	ip, r5
 8008fe0:	f04f 0800 	mov.w	r8, #0
 8008fe4:	f859 4b04 	ldr.w	r4, [r9], #4
 8008fe8:	f8dc a000 	ldr.w	sl, [ip]
 8008fec:	b2a3      	uxth	r3, r4
 8008fee:	fa1f fa8a 	uxth.w	sl, sl
 8008ff2:	fb0b a303 	mla	r3, fp, r3, sl
 8008ff6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008ffa:	f8dc 4000 	ldr.w	r4, [ip]
 8008ffe:	4443      	add	r3, r8
 8009000:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009004:	fb0b 840a 	mla	r4, fp, sl, r8
 8009008:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800900c:	46e2      	mov	sl, ip
 800900e:	b29b      	uxth	r3, r3
 8009010:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009014:	454f      	cmp	r7, r9
 8009016:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800901a:	f84a 3b04 	str.w	r3, [sl], #4
 800901e:	d82b      	bhi.n	8009078 <__multiply+0x120>
 8009020:	f8cc 8004 	str.w	r8, [ip, #4]
 8009024:	9b01      	ldr	r3, [sp, #4]
 8009026:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800902a:	3204      	adds	r2, #4
 800902c:	f1ba 0f00 	cmp.w	sl, #0
 8009030:	d020      	beq.n	8009074 <__multiply+0x11c>
 8009032:	682b      	ldr	r3, [r5, #0]
 8009034:	4689      	mov	r9, r1
 8009036:	46a8      	mov	r8, r5
 8009038:	f04f 0b00 	mov.w	fp, #0
 800903c:	f8b9 c000 	ldrh.w	ip, [r9]
 8009040:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009044:	fb0a 440c 	mla	r4, sl, ip, r4
 8009048:	445c      	add	r4, fp
 800904a:	46c4      	mov	ip, r8
 800904c:	b29b      	uxth	r3, r3
 800904e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009052:	f84c 3b04 	str.w	r3, [ip], #4
 8009056:	f859 3b04 	ldr.w	r3, [r9], #4
 800905a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800905e:	0c1b      	lsrs	r3, r3, #16
 8009060:	fb0a b303 	mla	r3, sl, r3, fp
 8009064:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009068:	454f      	cmp	r7, r9
 800906a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800906e:	d805      	bhi.n	800907c <__multiply+0x124>
 8009070:	f8c8 3004 	str.w	r3, [r8, #4]
 8009074:	3504      	adds	r5, #4
 8009076:	e79b      	b.n	8008fb0 <__multiply+0x58>
 8009078:	46d4      	mov	ip, sl
 800907a:	e7b3      	b.n	8008fe4 <__multiply+0x8c>
 800907c:	46e0      	mov	r8, ip
 800907e:	e7dd      	b.n	800903c <__multiply+0xe4>
 8009080:	3e01      	subs	r6, #1
 8009082:	e799      	b.n	8008fb8 <__multiply+0x60>

08009084 <__pow5mult>:
 8009084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009088:	4615      	mov	r5, r2
 800908a:	f012 0203 	ands.w	r2, r2, #3
 800908e:	4606      	mov	r6, r0
 8009090:	460f      	mov	r7, r1
 8009092:	d007      	beq.n	80090a4 <__pow5mult+0x20>
 8009094:	3a01      	subs	r2, #1
 8009096:	4c21      	ldr	r4, [pc, #132]	; (800911c <__pow5mult+0x98>)
 8009098:	2300      	movs	r3, #0
 800909a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800909e:	f7ff fec9 	bl	8008e34 <__multadd>
 80090a2:	4607      	mov	r7, r0
 80090a4:	10ad      	asrs	r5, r5, #2
 80090a6:	d035      	beq.n	8009114 <__pow5mult+0x90>
 80090a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80090aa:	b93c      	cbnz	r4, 80090bc <__pow5mult+0x38>
 80090ac:	2010      	movs	r0, #16
 80090ae:	f7fe fb57 	bl	8007760 <malloc>
 80090b2:	6270      	str	r0, [r6, #36]	; 0x24
 80090b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090b8:	6004      	str	r4, [r0, #0]
 80090ba:	60c4      	str	r4, [r0, #12]
 80090bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090c4:	b94c      	cbnz	r4, 80090da <__pow5mult+0x56>
 80090c6:	f240 2171 	movw	r1, #625	; 0x271
 80090ca:	4630      	mov	r0, r6
 80090cc:	f7ff ff3b 	bl	8008f46 <__i2b>
 80090d0:	2300      	movs	r3, #0
 80090d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80090d6:	4604      	mov	r4, r0
 80090d8:	6003      	str	r3, [r0, #0]
 80090da:	f04f 0800 	mov.w	r8, #0
 80090de:	07eb      	lsls	r3, r5, #31
 80090e0:	d50a      	bpl.n	80090f8 <__pow5mult+0x74>
 80090e2:	4639      	mov	r1, r7
 80090e4:	4622      	mov	r2, r4
 80090e6:	4630      	mov	r0, r6
 80090e8:	f7ff ff36 	bl	8008f58 <__multiply>
 80090ec:	4639      	mov	r1, r7
 80090ee:	4681      	mov	r9, r0
 80090f0:	4630      	mov	r0, r6
 80090f2:	f7ff fe88 	bl	8008e06 <_Bfree>
 80090f6:	464f      	mov	r7, r9
 80090f8:	106d      	asrs	r5, r5, #1
 80090fa:	d00b      	beq.n	8009114 <__pow5mult+0x90>
 80090fc:	6820      	ldr	r0, [r4, #0]
 80090fe:	b938      	cbnz	r0, 8009110 <__pow5mult+0x8c>
 8009100:	4622      	mov	r2, r4
 8009102:	4621      	mov	r1, r4
 8009104:	4630      	mov	r0, r6
 8009106:	f7ff ff27 	bl	8008f58 <__multiply>
 800910a:	6020      	str	r0, [r4, #0]
 800910c:	f8c0 8000 	str.w	r8, [r0]
 8009110:	4604      	mov	r4, r0
 8009112:	e7e4      	b.n	80090de <__pow5mult+0x5a>
 8009114:	4638      	mov	r0, r7
 8009116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800911a:	bf00      	nop
 800911c:	08009d88 	.word	0x08009d88

08009120 <__lshift>:
 8009120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009124:	460c      	mov	r4, r1
 8009126:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800912a:	6923      	ldr	r3, [r4, #16]
 800912c:	6849      	ldr	r1, [r1, #4]
 800912e:	eb0a 0903 	add.w	r9, sl, r3
 8009132:	68a3      	ldr	r3, [r4, #8]
 8009134:	4607      	mov	r7, r0
 8009136:	4616      	mov	r6, r2
 8009138:	f109 0501 	add.w	r5, r9, #1
 800913c:	42ab      	cmp	r3, r5
 800913e:	db32      	blt.n	80091a6 <__lshift+0x86>
 8009140:	4638      	mov	r0, r7
 8009142:	f7ff fe2c 	bl	8008d9e <_Balloc>
 8009146:	2300      	movs	r3, #0
 8009148:	4680      	mov	r8, r0
 800914a:	f100 0114 	add.w	r1, r0, #20
 800914e:	461a      	mov	r2, r3
 8009150:	4553      	cmp	r3, sl
 8009152:	db2b      	blt.n	80091ac <__lshift+0x8c>
 8009154:	6920      	ldr	r0, [r4, #16]
 8009156:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800915a:	f104 0314 	add.w	r3, r4, #20
 800915e:	f016 021f 	ands.w	r2, r6, #31
 8009162:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009166:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800916a:	d025      	beq.n	80091b8 <__lshift+0x98>
 800916c:	f1c2 0e20 	rsb	lr, r2, #32
 8009170:	2000      	movs	r0, #0
 8009172:	681e      	ldr	r6, [r3, #0]
 8009174:	468a      	mov	sl, r1
 8009176:	4096      	lsls	r6, r2
 8009178:	4330      	orrs	r0, r6
 800917a:	f84a 0b04 	str.w	r0, [sl], #4
 800917e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009182:	459c      	cmp	ip, r3
 8009184:	fa20 f00e 	lsr.w	r0, r0, lr
 8009188:	d814      	bhi.n	80091b4 <__lshift+0x94>
 800918a:	6048      	str	r0, [r1, #4]
 800918c:	b108      	cbz	r0, 8009192 <__lshift+0x72>
 800918e:	f109 0502 	add.w	r5, r9, #2
 8009192:	3d01      	subs	r5, #1
 8009194:	4638      	mov	r0, r7
 8009196:	f8c8 5010 	str.w	r5, [r8, #16]
 800919a:	4621      	mov	r1, r4
 800919c:	f7ff fe33 	bl	8008e06 <_Bfree>
 80091a0:	4640      	mov	r0, r8
 80091a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a6:	3101      	adds	r1, #1
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	e7c7      	b.n	800913c <__lshift+0x1c>
 80091ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80091b0:	3301      	adds	r3, #1
 80091b2:	e7cd      	b.n	8009150 <__lshift+0x30>
 80091b4:	4651      	mov	r1, sl
 80091b6:	e7dc      	b.n	8009172 <__lshift+0x52>
 80091b8:	3904      	subs	r1, #4
 80091ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80091be:	f841 2f04 	str.w	r2, [r1, #4]!
 80091c2:	459c      	cmp	ip, r3
 80091c4:	d8f9      	bhi.n	80091ba <__lshift+0x9a>
 80091c6:	e7e4      	b.n	8009192 <__lshift+0x72>

080091c8 <__mcmp>:
 80091c8:	6903      	ldr	r3, [r0, #16]
 80091ca:	690a      	ldr	r2, [r1, #16]
 80091cc:	1a9b      	subs	r3, r3, r2
 80091ce:	b530      	push	{r4, r5, lr}
 80091d0:	d10c      	bne.n	80091ec <__mcmp+0x24>
 80091d2:	0092      	lsls	r2, r2, #2
 80091d4:	3014      	adds	r0, #20
 80091d6:	3114      	adds	r1, #20
 80091d8:	1884      	adds	r4, r0, r2
 80091da:	4411      	add	r1, r2
 80091dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80091e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80091e4:	4295      	cmp	r5, r2
 80091e6:	d003      	beq.n	80091f0 <__mcmp+0x28>
 80091e8:	d305      	bcc.n	80091f6 <__mcmp+0x2e>
 80091ea:	2301      	movs	r3, #1
 80091ec:	4618      	mov	r0, r3
 80091ee:	bd30      	pop	{r4, r5, pc}
 80091f0:	42a0      	cmp	r0, r4
 80091f2:	d3f3      	bcc.n	80091dc <__mcmp+0x14>
 80091f4:	e7fa      	b.n	80091ec <__mcmp+0x24>
 80091f6:	f04f 33ff 	mov.w	r3, #4294967295
 80091fa:	e7f7      	b.n	80091ec <__mcmp+0x24>

080091fc <__mdiff>:
 80091fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009200:	460d      	mov	r5, r1
 8009202:	4607      	mov	r7, r0
 8009204:	4611      	mov	r1, r2
 8009206:	4628      	mov	r0, r5
 8009208:	4614      	mov	r4, r2
 800920a:	f7ff ffdd 	bl	80091c8 <__mcmp>
 800920e:	1e06      	subs	r6, r0, #0
 8009210:	d108      	bne.n	8009224 <__mdiff+0x28>
 8009212:	4631      	mov	r1, r6
 8009214:	4638      	mov	r0, r7
 8009216:	f7ff fdc2 	bl	8008d9e <_Balloc>
 800921a:	2301      	movs	r3, #1
 800921c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009224:	bfa4      	itt	ge
 8009226:	4623      	movge	r3, r4
 8009228:	462c      	movge	r4, r5
 800922a:	4638      	mov	r0, r7
 800922c:	6861      	ldr	r1, [r4, #4]
 800922e:	bfa6      	itte	ge
 8009230:	461d      	movge	r5, r3
 8009232:	2600      	movge	r6, #0
 8009234:	2601      	movlt	r6, #1
 8009236:	f7ff fdb2 	bl	8008d9e <_Balloc>
 800923a:	692b      	ldr	r3, [r5, #16]
 800923c:	60c6      	str	r6, [r0, #12]
 800923e:	6926      	ldr	r6, [r4, #16]
 8009240:	f105 0914 	add.w	r9, r5, #20
 8009244:	f104 0214 	add.w	r2, r4, #20
 8009248:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800924c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009250:	f100 0514 	add.w	r5, r0, #20
 8009254:	f04f 0e00 	mov.w	lr, #0
 8009258:	f852 ab04 	ldr.w	sl, [r2], #4
 800925c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009260:	fa1e f18a 	uxtah	r1, lr, sl
 8009264:	b2a3      	uxth	r3, r4
 8009266:	1ac9      	subs	r1, r1, r3
 8009268:	0c23      	lsrs	r3, r4, #16
 800926a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800926e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009272:	b289      	uxth	r1, r1
 8009274:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009278:	45c8      	cmp	r8, r9
 800927a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800927e:	4694      	mov	ip, r2
 8009280:	f845 3b04 	str.w	r3, [r5], #4
 8009284:	d8e8      	bhi.n	8009258 <__mdiff+0x5c>
 8009286:	45bc      	cmp	ip, r7
 8009288:	d304      	bcc.n	8009294 <__mdiff+0x98>
 800928a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800928e:	b183      	cbz	r3, 80092b2 <__mdiff+0xb6>
 8009290:	6106      	str	r6, [r0, #16]
 8009292:	e7c5      	b.n	8009220 <__mdiff+0x24>
 8009294:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009298:	fa1e f381 	uxtah	r3, lr, r1
 800929c:	141a      	asrs	r2, r3, #16
 800929e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092a8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80092ac:	f845 3b04 	str.w	r3, [r5], #4
 80092b0:	e7e9      	b.n	8009286 <__mdiff+0x8a>
 80092b2:	3e01      	subs	r6, #1
 80092b4:	e7e9      	b.n	800928a <__mdiff+0x8e>

080092b6 <__d2b>:
 80092b6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092ba:	460e      	mov	r6, r1
 80092bc:	2101      	movs	r1, #1
 80092be:	ec59 8b10 	vmov	r8, r9, d0
 80092c2:	4615      	mov	r5, r2
 80092c4:	f7ff fd6b 	bl	8008d9e <_Balloc>
 80092c8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80092cc:	4607      	mov	r7, r0
 80092ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092d2:	bb34      	cbnz	r4, 8009322 <__d2b+0x6c>
 80092d4:	9301      	str	r3, [sp, #4]
 80092d6:	f1b8 0300 	subs.w	r3, r8, #0
 80092da:	d027      	beq.n	800932c <__d2b+0x76>
 80092dc:	a802      	add	r0, sp, #8
 80092de:	f840 3d08 	str.w	r3, [r0, #-8]!
 80092e2:	f7ff fe01 	bl	8008ee8 <__lo0bits>
 80092e6:	9900      	ldr	r1, [sp, #0]
 80092e8:	b1f0      	cbz	r0, 8009328 <__d2b+0x72>
 80092ea:	9a01      	ldr	r2, [sp, #4]
 80092ec:	f1c0 0320 	rsb	r3, r0, #32
 80092f0:	fa02 f303 	lsl.w	r3, r2, r3
 80092f4:	430b      	orrs	r3, r1
 80092f6:	40c2      	lsrs	r2, r0
 80092f8:	617b      	str	r3, [r7, #20]
 80092fa:	9201      	str	r2, [sp, #4]
 80092fc:	9b01      	ldr	r3, [sp, #4]
 80092fe:	61bb      	str	r3, [r7, #24]
 8009300:	2b00      	cmp	r3, #0
 8009302:	bf14      	ite	ne
 8009304:	2102      	movne	r1, #2
 8009306:	2101      	moveq	r1, #1
 8009308:	6139      	str	r1, [r7, #16]
 800930a:	b1c4      	cbz	r4, 800933e <__d2b+0x88>
 800930c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009310:	4404      	add	r4, r0
 8009312:	6034      	str	r4, [r6, #0]
 8009314:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009318:	6028      	str	r0, [r5, #0]
 800931a:	4638      	mov	r0, r7
 800931c:	b003      	add	sp, #12
 800931e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009326:	e7d5      	b.n	80092d4 <__d2b+0x1e>
 8009328:	6179      	str	r1, [r7, #20]
 800932a:	e7e7      	b.n	80092fc <__d2b+0x46>
 800932c:	a801      	add	r0, sp, #4
 800932e:	f7ff fddb 	bl	8008ee8 <__lo0bits>
 8009332:	9b01      	ldr	r3, [sp, #4]
 8009334:	617b      	str	r3, [r7, #20]
 8009336:	2101      	movs	r1, #1
 8009338:	6139      	str	r1, [r7, #16]
 800933a:	3020      	adds	r0, #32
 800933c:	e7e5      	b.n	800930a <__d2b+0x54>
 800933e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009342:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009346:	6030      	str	r0, [r6, #0]
 8009348:	6918      	ldr	r0, [r3, #16]
 800934a:	f7ff fdae 	bl	8008eaa <__hi0bits>
 800934e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009352:	e7e1      	b.n	8009318 <__d2b+0x62>

08009354 <_calloc_r>:
 8009354:	b538      	push	{r3, r4, r5, lr}
 8009356:	fb02 f401 	mul.w	r4, r2, r1
 800935a:	4621      	mov	r1, r4
 800935c:	f7fe fa66 	bl	800782c <_malloc_r>
 8009360:	4605      	mov	r5, r0
 8009362:	b118      	cbz	r0, 800936c <_calloc_r+0x18>
 8009364:	4622      	mov	r2, r4
 8009366:	2100      	movs	r1, #0
 8009368:	f7fe fa0a 	bl	8007780 <memset>
 800936c:	4628      	mov	r0, r5
 800936e:	bd38      	pop	{r3, r4, r5, pc}

08009370 <__ssputs_r>:
 8009370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009374:	688e      	ldr	r6, [r1, #8]
 8009376:	429e      	cmp	r6, r3
 8009378:	4682      	mov	sl, r0
 800937a:	460c      	mov	r4, r1
 800937c:	4690      	mov	r8, r2
 800937e:	4699      	mov	r9, r3
 8009380:	d837      	bhi.n	80093f2 <__ssputs_r+0x82>
 8009382:	898a      	ldrh	r2, [r1, #12]
 8009384:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009388:	d031      	beq.n	80093ee <__ssputs_r+0x7e>
 800938a:	6825      	ldr	r5, [r4, #0]
 800938c:	6909      	ldr	r1, [r1, #16]
 800938e:	1a6f      	subs	r7, r5, r1
 8009390:	6965      	ldr	r5, [r4, #20]
 8009392:	2302      	movs	r3, #2
 8009394:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009398:	fb95 f5f3 	sdiv	r5, r5, r3
 800939c:	f109 0301 	add.w	r3, r9, #1
 80093a0:	443b      	add	r3, r7
 80093a2:	429d      	cmp	r5, r3
 80093a4:	bf38      	it	cc
 80093a6:	461d      	movcc	r5, r3
 80093a8:	0553      	lsls	r3, r2, #21
 80093aa:	d530      	bpl.n	800940e <__ssputs_r+0x9e>
 80093ac:	4629      	mov	r1, r5
 80093ae:	f7fe fa3d 	bl	800782c <_malloc_r>
 80093b2:	4606      	mov	r6, r0
 80093b4:	b950      	cbnz	r0, 80093cc <__ssputs_r+0x5c>
 80093b6:	230c      	movs	r3, #12
 80093b8:	f8ca 3000 	str.w	r3, [sl]
 80093bc:	89a3      	ldrh	r3, [r4, #12]
 80093be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093c2:	81a3      	strh	r3, [r4, #12]
 80093c4:	f04f 30ff 	mov.w	r0, #4294967295
 80093c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093cc:	463a      	mov	r2, r7
 80093ce:	6921      	ldr	r1, [r4, #16]
 80093d0:	f7ff fcd8 	bl	8008d84 <memcpy>
 80093d4:	89a3      	ldrh	r3, [r4, #12]
 80093d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093de:	81a3      	strh	r3, [r4, #12]
 80093e0:	6126      	str	r6, [r4, #16]
 80093e2:	6165      	str	r5, [r4, #20]
 80093e4:	443e      	add	r6, r7
 80093e6:	1bed      	subs	r5, r5, r7
 80093e8:	6026      	str	r6, [r4, #0]
 80093ea:	60a5      	str	r5, [r4, #8]
 80093ec:	464e      	mov	r6, r9
 80093ee:	454e      	cmp	r6, r9
 80093f0:	d900      	bls.n	80093f4 <__ssputs_r+0x84>
 80093f2:	464e      	mov	r6, r9
 80093f4:	4632      	mov	r2, r6
 80093f6:	4641      	mov	r1, r8
 80093f8:	6820      	ldr	r0, [r4, #0]
 80093fa:	f000 f91d 	bl	8009638 <memmove>
 80093fe:	68a3      	ldr	r3, [r4, #8]
 8009400:	1b9b      	subs	r3, r3, r6
 8009402:	60a3      	str	r3, [r4, #8]
 8009404:	6823      	ldr	r3, [r4, #0]
 8009406:	441e      	add	r6, r3
 8009408:	6026      	str	r6, [r4, #0]
 800940a:	2000      	movs	r0, #0
 800940c:	e7dc      	b.n	80093c8 <__ssputs_r+0x58>
 800940e:	462a      	mov	r2, r5
 8009410:	f000 f92b 	bl	800966a <_realloc_r>
 8009414:	4606      	mov	r6, r0
 8009416:	2800      	cmp	r0, #0
 8009418:	d1e2      	bne.n	80093e0 <__ssputs_r+0x70>
 800941a:	6921      	ldr	r1, [r4, #16]
 800941c:	4650      	mov	r0, sl
 800941e:	f7fe f9b7 	bl	8007790 <_free_r>
 8009422:	e7c8      	b.n	80093b6 <__ssputs_r+0x46>

08009424 <_svfiprintf_r>:
 8009424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009428:	461d      	mov	r5, r3
 800942a:	898b      	ldrh	r3, [r1, #12]
 800942c:	061f      	lsls	r7, r3, #24
 800942e:	b09d      	sub	sp, #116	; 0x74
 8009430:	4680      	mov	r8, r0
 8009432:	460c      	mov	r4, r1
 8009434:	4616      	mov	r6, r2
 8009436:	d50f      	bpl.n	8009458 <_svfiprintf_r+0x34>
 8009438:	690b      	ldr	r3, [r1, #16]
 800943a:	b96b      	cbnz	r3, 8009458 <_svfiprintf_r+0x34>
 800943c:	2140      	movs	r1, #64	; 0x40
 800943e:	f7fe f9f5 	bl	800782c <_malloc_r>
 8009442:	6020      	str	r0, [r4, #0]
 8009444:	6120      	str	r0, [r4, #16]
 8009446:	b928      	cbnz	r0, 8009454 <_svfiprintf_r+0x30>
 8009448:	230c      	movs	r3, #12
 800944a:	f8c8 3000 	str.w	r3, [r8]
 800944e:	f04f 30ff 	mov.w	r0, #4294967295
 8009452:	e0c8      	b.n	80095e6 <_svfiprintf_r+0x1c2>
 8009454:	2340      	movs	r3, #64	; 0x40
 8009456:	6163      	str	r3, [r4, #20]
 8009458:	2300      	movs	r3, #0
 800945a:	9309      	str	r3, [sp, #36]	; 0x24
 800945c:	2320      	movs	r3, #32
 800945e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009462:	2330      	movs	r3, #48	; 0x30
 8009464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009468:	9503      	str	r5, [sp, #12]
 800946a:	f04f 0b01 	mov.w	fp, #1
 800946e:	4637      	mov	r7, r6
 8009470:	463d      	mov	r5, r7
 8009472:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009476:	b10b      	cbz	r3, 800947c <_svfiprintf_r+0x58>
 8009478:	2b25      	cmp	r3, #37	; 0x25
 800947a:	d13e      	bne.n	80094fa <_svfiprintf_r+0xd6>
 800947c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009480:	d00b      	beq.n	800949a <_svfiprintf_r+0x76>
 8009482:	4653      	mov	r3, sl
 8009484:	4632      	mov	r2, r6
 8009486:	4621      	mov	r1, r4
 8009488:	4640      	mov	r0, r8
 800948a:	f7ff ff71 	bl	8009370 <__ssputs_r>
 800948e:	3001      	adds	r0, #1
 8009490:	f000 80a4 	beq.w	80095dc <_svfiprintf_r+0x1b8>
 8009494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009496:	4453      	add	r3, sl
 8009498:	9309      	str	r3, [sp, #36]	; 0x24
 800949a:	783b      	ldrb	r3, [r7, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	f000 809d 	beq.w	80095dc <_svfiprintf_r+0x1b8>
 80094a2:	2300      	movs	r3, #0
 80094a4:	f04f 32ff 	mov.w	r2, #4294967295
 80094a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094ac:	9304      	str	r3, [sp, #16]
 80094ae:	9307      	str	r3, [sp, #28]
 80094b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094b4:	931a      	str	r3, [sp, #104]	; 0x68
 80094b6:	462f      	mov	r7, r5
 80094b8:	2205      	movs	r2, #5
 80094ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80094be:	4850      	ldr	r0, [pc, #320]	; (8009600 <_svfiprintf_r+0x1dc>)
 80094c0:	f7f6 ff16 	bl	80002f0 <memchr>
 80094c4:	9b04      	ldr	r3, [sp, #16]
 80094c6:	b9d0      	cbnz	r0, 80094fe <_svfiprintf_r+0xda>
 80094c8:	06d9      	lsls	r1, r3, #27
 80094ca:	bf44      	itt	mi
 80094cc:	2220      	movmi	r2, #32
 80094ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80094d2:	071a      	lsls	r2, r3, #28
 80094d4:	bf44      	itt	mi
 80094d6:	222b      	movmi	r2, #43	; 0x2b
 80094d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80094dc:	782a      	ldrb	r2, [r5, #0]
 80094de:	2a2a      	cmp	r2, #42	; 0x2a
 80094e0:	d015      	beq.n	800950e <_svfiprintf_r+0xea>
 80094e2:	9a07      	ldr	r2, [sp, #28]
 80094e4:	462f      	mov	r7, r5
 80094e6:	2000      	movs	r0, #0
 80094e8:	250a      	movs	r5, #10
 80094ea:	4639      	mov	r1, r7
 80094ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094f0:	3b30      	subs	r3, #48	; 0x30
 80094f2:	2b09      	cmp	r3, #9
 80094f4:	d94d      	bls.n	8009592 <_svfiprintf_r+0x16e>
 80094f6:	b1b8      	cbz	r0, 8009528 <_svfiprintf_r+0x104>
 80094f8:	e00f      	b.n	800951a <_svfiprintf_r+0xf6>
 80094fa:	462f      	mov	r7, r5
 80094fc:	e7b8      	b.n	8009470 <_svfiprintf_r+0x4c>
 80094fe:	4a40      	ldr	r2, [pc, #256]	; (8009600 <_svfiprintf_r+0x1dc>)
 8009500:	1a80      	subs	r0, r0, r2
 8009502:	fa0b f000 	lsl.w	r0, fp, r0
 8009506:	4318      	orrs	r0, r3
 8009508:	9004      	str	r0, [sp, #16]
 800950a:	463d      	mov	r5, r7
 800950c:	e7d3      	b.n	80094b6 <_svfiprintf_r+0x92>
 800950e:	9a03      	ldr	r2, [sp, #12]
 8009510:	1d11      	adds	r1, r2, #4
 8009512:	6812      	ldr	r2, [r2, #0]
 8009514:	9103      	str	r1, [sp, #12]
 8009516:	2a00      	cmp	r2, #0
 8009518:	db01      	blt.n	800951e <_svfiprintf_r+0xfa>
 800951a:	9207      	str	r2, [sp, #28]
 800951c:	e004      	b.n	8009528 <_svfiprintf_r+0x104>
 800951e:	4252      	negs	r2, r2
 8009520:	f043 0302 	orr.w	r3, r3, #2
 8009524:	9207      	str	r2, [sp, #28]
 8009526:	9304      	str	r3, [sp, #16]
 8009528:	783b      	ldrb	r3, [r7, #0]
 800952a:	2b2e      	cmp	r3, #46	; 0x2e
 800952c:	d10c      	bne.n	8009548 <_svfiprintf_r+0x124>
 800952e:	787b      	ldrb	r3, [r7, #1]
 8009530:	2b2a      	cmp	r3, #42	; 0x2a
 8009532:	d133      	bne.n	800959c <_svfiprintf_r+0x178>
 8009534:	9b03      	ldr	r3, [sp, #12]
 8009536:	1d1a      	adds	r2, r3, #4
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	9203      	str	r2, [sp, #12]
 800953c:	2b00      	cmp	r3, #0
 800953e:	bfb8      	it	lt
 8009540:	f04f 33ff 	movlt.w	r3, #4294967295
 8009544:	3702      	adds	r7, #2
 8009546:	9305      	str	r3, [sp, #20]
 8009548:	4d2e      	ldr	r5, [pc, #184]	; (8009604 <_svfiprintf_r+0x1e0>)
 800954a:	7839      	ldrb	r1, [r7, #0]
 800954c:	2203      	movs	r2, #3
 800954e:	4628      	mov	r0, r5
 8009550:	f7f6 fece 	bl	80002f0 <memchr>
 8009554:	b138      	cbz	r0, 8009566 <_svfiprintf_r+0x142>
 8009556:	2340      	movs	r3, #64	; 0x40
 8009558:	1b40      	subs	r0, r0, r5
 800955a:	fa03 f000 	lsl.w	r0, r3, r0
 800955e:	9b04      	ldr	r3, [sp, #16]
 8009560:	4303      	orrs	r3, r0
 8009562:	3701      	adds	r7, #1
 8009564:	9304      	str	r3, [sp, #16]
 8009566:	7839      	ldrb	r1, [r7, #0]
 8009568:	4827      	ldr	r0, [pc, #156]	; (8009608 <_svfiprintf_r+0x1e4>)
 800956a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800956e:	2206      	movs	r2, #6
 8009570:	1c7e      	adds	r6, r7, #1
 8009572:	f7f6 febd 	bl	80002f0 <memchr>
 8009576:	2800      	cmp	r0, #0
 8009578:	d038      	beq.n	80095ec <_svfiprintf_r+0x1c8>
 800957a:	4b24      	ldr	r3, [pc, #144]	; (800960c <_svfiprintf_r+0x1e8>)
 800957c:	bb13      	cbnz	r3, 80095c4 <_svfiprintf_r+0x1a0>
 800957e:	9b03      	ldr	r3, [sp, #12]
 8009580:	3307      	adds	r3, #7
 8009582:	f023 0307 	bic.w	r3, r3, #7
 8009586:	3308      	adds	r3, #8
 8009588:	9303      	str	r3, [sp, #12]
 800958a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800958c:	444b      	add	r3, r9
 800958e:	9309      	str	r3, [sp, #36]	; 0x24
 8009590:	e76d      	b.n	800946e <_svfiprintf_r+0x4a>
 8009592:	fb05 3202 	mla	r2, r5, r2, r3
 8009596:	2001      	movs	r0, #1
 8009598:	460f      	mov	r7, r1
 800959a:	e7a6      	b.n	80094ea <_svfiprintf_r+0xc6>
 800959c:	2300      	movs	r3, #0
 800959e:	3701      	adds	r7, #1
 80095a0:	9305      	str	r3, [sp, #20]
 80095a2:	4619      	mov	r1, r3
 80095a4:	250a      	movs	r5, #10
 80095a6:	4638      	mov	r0, r7
 80095a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095ac:	3a30      	subs	r2, #48	; 0x30
 80095ae:	2a09      	cmp	r2, #9
 80095b0:	d903      	bls.n	80095ba <_svfiprintf_r+0x196>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d0c8      	beq.n	8009548 <_svfiprintf_r+0x124>
 80095b6:	9105      	str	r1, [sp, #20]
 80095b8:	e7c6      	b.n	8009548 <_svfiprintf_r+0x124>
 80095ba:	fb05 2101 	mla	r1, r5, r1, r2
 80095be:	2301      	movs	r3, #1
 80095c0:	4607      	mov	r7, r0
 80095c2:	e7f0      	b.n	80095a6 <_svfiprintf_r+0x182>
 80095c4:	ab03      	add	r3, sp, #12
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	4622      	mov	r2, r4
 80095ca:	4b11      	ldr	r3, [pc, #68]	; (8009610 <_svfiprintf_r+0x1ec>)
 80095cc:	a904      	add	r1, sp, #16
 80095ce:	4640      	mov	r0, r8
 80095d0:	f7fe fa0e 	bl	80079f0 <_printf_float>
 80095d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80095d8:	4681      	mov	r9, r0
 80095da:	d1d6      	bne.n	800958a <_svfiprintf_r+0x166>
 80095dc:	89a3      	ldrh	r3, [r4, #12]
 80095de:	065b      	lsls	r3, r3, #25
 80095e0:	f53f af35 	bmi.w	800944e <_svfiprintf_r+0x2a>
 80095e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095e6:	b01d      	add	sp, #116	; 0x74
 80095e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ec:	ab03      	add	r3, sp, #12
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	4622      	mov	r2, r4
 80095f2:	4b07      	ldr	r3, [pc, #28]	; (8009610 <_svfiprintf_r+0x1ec>)
 80095f4:	a904      	add	r1, sp, #16
 80095f6:	4640      	mov	r0, r8
 80095f8:	f7fe fc9c 	bl	8007f34 <_printf_i>
 80095fc:	e7ea      	b.n	80095d4 <_svfiprintf_r+0x1b0>
 80095fe:	bf00      	nop
 8009600:	08009d94 	.word	0x08009d94
 8009604:	08009d9a 	.word	0x08009d9a
 8009608:	08009d9e 	.word	0x08009d9e
 800960c:	080079f1 	.word	0x080079f1
 8009610:	08009371 	.word	0x08009371

08009614 <__ascii_mbtowc>:
 8009614:	b082      	sub	sp, #8
 8009616:	b901      	cbnz	r1, 800961a <__ascii_mbtowc+0x6>
 8009618:	a901      	add	r1, sp, #4
 800961a:	b142      	cbz	r2, 800962e <__ascii_mbtowc+0x1a>
 800961c:	b14b      	cbz	r3, 8009632 <__ascii_mbtowc+0x1e>
 800961e:	7813      	ldrb	r3, [r2, #0]
 8009620:	600b      	str	r3, [r1, #0]
 8009622:	7812      	ldrb	r2, [r2, #0]
 8009624:	1c10      	adds	r0, r2, #0
 8009626:	bf18      	it	ne
 8009628:	2001      	movne	r0, #1
 800962a:	b002      	add	sp, #8
 800962c:	4770      	bx	lr
 800962e:	4610      	mov	r0, r2
 8009630:	e7fb      	b.n	800962a <__ascii_mbtowc+0x16>
 8009632:	f06f 0001 	mvn.w	r0, #1
 8009636:	e7f8      	b.n	800962a <__ascii_mbtowc+0x16>

08009638 <memmove>:
 8009638:	4288      	cmp	r0, r1
 800963a:	b510      	push	{r4, lr}
 800963c:	eb01 0302 	add.w	r3, r1, r2
 8009640:	d807      	bhi.n	8009652 <memmove+0x1a>
 8009642:	1e42      	subs	r2, r0, #1
 8009644:	4299      	cmp	r1, r3
 8009646:	d00a      	beq.n	800965e <memmove+0x26>
 8009648:	f811 4b01 	ldrb.w	r4, [r1], #1
 800964c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009650:	e7f8      	b.n	8009644 <memmove+0xc>
 8009652:	4283      	cmp	r3, r0
 8009654:	d9f5      	bls.n	8009642 <memmove+0xa>
 8009656:	1881      	adds	r1, r0, r2
 8009658:	1ad2      	subs	r2, r2, r3
 800965a:	42d3      	cmn	r3, r2
 800965c:	d100      	bne.n	8009660 <memmove+0x28>
 800965e:	bd10      	pop	{r4, pc}
 8009660:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009664:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009668:	e7f7      	b.n	800965a <memmove+0x22>

0800966a <_realloc_r>:
 800966a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966c:	4607      	mov	r7, r0
 800966e:	4614      	mov	r4, r2
 8009670:	460e      	mov	r6, r1
 8009672:	b921      	cbnz	r1, 800967e <_realloc_r+0x14>
 8009674:	4611      	mov	r1, r2
 8009676:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800967a:	f7fe b8d7 	b.w	800782c <_malloc_r>
 800967e:	b922      	cbnz	r2, 800968a <_realloc_r+0x20>
 8009680:	f7fe f886 	bl	8007790 <_free_r>
 8009684:	4625      	mov	r5, r4
 8009686:	4628      	mov	r0, r5
 8009688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800968a:	f000 f821 	bl	80096d0 <_malloc_usable_size_r>
 800968e:	42a0      	cmp	r0, r4
 8009690:	d20f      	bcs.n	80096b2 <_realloc_r+0x48>
 8009692:	4621      	mov	r1, r4
 8009694:	4638      	mov	r0, r7
 8009696:	f7fe f8c9 	bl	800782c <_malloc_r>
 800969a:	4605      	mov	r5, r0
 800969c:	2800      	cmp	r0, #0
 800969e:	d0f2      	beq.n	8009686 <_realloc_r+0x1c>
 80096a0:	4631      	mov	r1, r6
 80096a2:	4622      	mov	r2, r4
 80096a4:	f7ff fb6e 	bl	8008d84 <memcpy>
 80096a8:	4631      	mov	r1, r6
 80096aa:	4638      	mov	r0, r7
 80096ac:	f7fe f870 	bl	8007790 <_free_r>
 80096b0:	e7e9      	b.n	8009686 <_realloc_r+0x1c>
 80096b2:	4635      	mov	r5, r6
 80096b4:	e7e7      	b.n	8009686 <_realloc_r+0x1c>

080096b6 <__ascii_wctomb>:
 80096b6:	b149      	cbz	r1, 80096cc <__ascii_wctomb+0x16>
 80096b8:	2aff      	cmp	r2, #255	; 0xff
 80096ba:	bf85      	ittet	hi
 80096bc:	238a      	movhi	r3, #138	; 0x8a
 80096be:	6003      	strhi	r3, [r0, #0]
 80096c0:	700a      	strbls	r2, [r1, #0]
 80096c2:	f04f 30ff 	movhi.w	r0, #4294967295
 80096c6:	bf98      	it	ls
 80096c8:	2001      	movls	r0, #1
 80096ca:	4770      	bx	lr
 80096cc:	4608      	mov	r0, r1
 80096ce:	4770      	bx	lr

080096d0 <_malloc_usable_size_r>:
 80096d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096d4:	1f18      	subs	r0, r3, #4
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	bfbc      	itt	lt
 80096da:	580b      	ldrlt	r3, [r1, r0]
 80096dc:	18c0      	addlt	r0, r0, r3
 80096de:	4770      	bx	lr

080096e0 <atan2>:
 80096e0:	f000 b852 	b.w	8009788 <__ieee754_atan2>
 80096e4:	0000      	movs	r0, r0
	...

080096e8 <sqrtf>:
 80096e8:	b500      	push	{lr}
 80096ea:	ed2d 8b02 	vpush	{d8}
 80096ee:	b08b      	sub	sp, #44	; 0x2c
 80096f0:	eeb0 8a40 	vmov.f32	s16, s0
 80096f4:	f000 f92a 	bl	800994c <__ieee754_sqrtf>
 80096f8:	4b21      	ldr	r3, [pc, #132]	; (8009780 <sqrtf+0x98>)
 80096fa:	f993 3000 	ldrsb.w	r3, [r3]
 80096fe:	1c5a      	adds	r2, r3, #1
 8009700:	d028      	beq.n	8009754 <sqrtf+0x6c>
 8009702:	eeb4 8a48 	vcmp.f32	s16, s16
 8009706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800970a:	d623      	bvs.n	8009754 <sqrtf+0x6c>
 800970c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009714:	d51e      	bpl.n	8009754 <sqrtf+0x6c>
 8009716:	2201      	movs	r2, #1
 8009718:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800971c:	9200      	str	r2, [sp, #0]
 800971e:	4a19      	ldr	r2, [pc, #100]	; (8009784 <sqrtf+0x9c>)
 8009720:	9201      	str	r2, [sp, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	9208      	str	r2, [sp, #32]
 8009726:	ed8d 8b04 	vstr	d8, [sp, #16]
 800972a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800972e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8009778 <sqrtf+0x90>
 8009732:	b9a3      	cbnz	r3, 800975e <sqrtf+0x76>
 8009734:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009738:	4668      	mov	r0, sp
 800973a:	f000 fa10 	bl	8009b5e <matherr>
 800973e:	b1a0      	cbz	r0, 800976a <sqrtf+0x82>
 8009740:	9b08      	ldr	r3, [sp, #32]
 8009742:	b11b      	cbz	r3, 800974c <sqrtf+0x64>
 8009744:	f7fd ffe2 	bl	800770c <__errno>
 8009748:	9b08      	ldr	r3, [sp, #32]
 800974a:	6003      	str	r3, [r0, #0]
 800974c:	ed9d 0b06 	vldr	d0, [sp, #24]
 8009750:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009754:	b00b      	add	sp, #44	; 0x2c
 8009756:	ecbd 8b02 	vpop	{d8}
 800975a:	f85d fb04 	ldr.w	pc, [sp], #4
 800975e:	2b02      	cmp	r3, #2
 8009760:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8009764:	ed8d 6b06 	vstr	d6, [sp, #24]
 8009768:	d1e6      	bne.n	8009738 <sqrtf+0x50>
 800976a:	f7fd ffcf 	bl	800770c <__errno>
 800976e:	2321      	movs	r3, #33	; 0x21
 8009770:	6003      	str	r3, [r0, #0]
 8009772:	e7e5      	b.n	8009740 <sqrtf+0x58>
 8009774:	f3af 8000 	nop.w
	...
 8009780:	200001e4 	.word	0x200001e4
 8009784:	08009eb0 	.word	0x08009eb0

08009788 <__ieee754_atan2>:
 8009788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800978a:	ee11 6a10 	vmov	r6, s2
 800978e:	ee11 0a90 	vmov	r0, s3
 8009792:	4273      	negs	r3, r6
 8009794:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8009798:	4333      	orrs	r3, r6
 800979a:	4f6b      	ldr	r7, [pc, #428]	; (8009948 <__ieee754_atan2+0x1c0>)
 800979c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80097a0:	42bb      	cmp	r3, r7
 80097a2:	ed8d 0b00 	vstr	d0, [sp]
 80097a6:	d80b      	bhi.n	80097c0 <__ieee754_atan2+0x38>
 80097a8:	e9dd c500 	ldrd	ip, r5, [sp]
 80097ac:	f1cc 0100 	rsb	r1, ip, #0
 80097b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80097b4:	ea41 010c 	orr.w	r1, r1, ip
 80097b8:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 80097bc:	42b9      	cmp	r1, r7
 80097be:	d906      	bls.n	80097ce <__ieee754_atan2+0x46>
 80097c0:	ed9d 7b00 	vldr	d7, [sp]
 80097c4:	ee37 7b01 	vadd.f64	d7, d7, d1
 80097c8:	ed8d 7b00 	vstr	d7, [sp]
 80097cc:	e063      	b.n	8009896 <__ieee754_atan2+0x10e>
 80097ce:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 80097d2:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80097d6:	4331      	orrs	r1, r6
 80097d8:	d104      	bne.n	80097e4 <__ieee754_atan2+0x5c>
 80097da:	b003      	add	sp, #12
 80097dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80097e0:	f000 b8ba 	b.w	8009958 <atan>
 80097e4:	1784      	asrs	r4, r0, #30
 80097e6:	f004 0402 	and.w	r4, r4, #2
 80097ea:	ea53 010c 	orrs.w	r1, r3, ip
 80097ee:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 80097f2:	d109      	bne.n	8009808 <__ieee754_atan2+0x80>
 80097f4:	2c02      	cmp	r4, #2
 80097f6:	d078      	beq.n	80098ea <__ieee754_atan2+0x162>
 80097f8:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 80098f0 <__ieee754_atan2+0x168>
 80097fc:	ed9d 6b00 	vldr	d6, [sp]
 8009800:	2c03      	cmp	r4, #3
 8009802:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8009806:	e7df      	b.n	80097c8 <__ieee754_atan2+0x40>
 8009808:	ea52 0106 	orrs.w	r1, r2, r6
 800980c:	d107      	bne.n	800981e <__ieee754_atan2+0x96>
 800980e:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 80098f8 <__ieee754_atan2+0x170>
 8009812:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8009900 <__ieee754_atan2+0x178>
 8009816:	2d00      	cmp	r5, #0
 8009818:	fe26 7b07 	vselge.f64	d7, d6, d7
 800981c:	e7d4      	b.n	80097c8 <__ieee754_atan2+0x40>
 800981e:	42ba      	cmp	r2, r7
 8009820:	d120      	bne.n	8009864 <__ieee754_atan2+0xdc>
 8009822:	4293      	cmp	r3, r2
 8009824:	d111      	bne.n	800984a <__ieee754_atan2+0xc2>
 8009826:	2c02      	cmp	r4, #2
 8009828:	d009      	beq.n	800983e <__ieee754_atan2+0xb6>
 800982a:	2c03      	cmp	r4, #3
 800982c:	d00a      	beq.n	8009844 <__ieee754_atan2+0xbc>
 800982e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8009908 <__ieee754_atan2+0x180>
 8009832:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8009910 <__ieee754_atan2+0x188>
 8009836:	2c01      	cmp	r4, #1
 8009838:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800983c:	e7c4      	b.n	80097c8 <__ieee754_atan2+0x40>
 800983e:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8009918 <__ieee754_atan2+0x190>
 8009842:	e7c1      	b.n	80097c8 <__ieee754_atan2+0x40>
 8009844:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8009920 <__ieee754_atan2+0x198>
 8009848:	e7be      	b.n	80097c8 <__ieee754_atan2+0x40>
 800984a:	2c02      	cmp	r4, #2
 800984c:	d04d      	beq.n	80098ea <__ieee754_atan2+0x162>
 800984e:	2c03      	cmp	r4, #3
 8009850:	d005      	beq.n	800985e <__ieee754_atan2+0xd6>
 8009852:	2c01      	cmp	r4, #1
 8009854:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8009928 <__ieee754_atan2+0x1a0>
 8009858:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8009930 <__ieee754_atan2+0x1a8>
 800985c:	e7ec      	b.n	8009838 <__ieee754_atan2+0xb0>
 800985e:	ed9f 7b24 	vldr	d7, [pc, #144]	; 80098f0 <__ieee754_atan2+0x168>
 8009862:	e7b1      	b.n	80097c8 <__ieee754_atan2+0x40>
 8009864:	42bb      	cmp	r3, r7
 8009866:	d0d2      	beq.n	800980e <__ieee754_atan2+0x86>
 8009868:	1a9b      	subs	r3, r3, r2
 800986a:	151b      	asrs	r3, r3, #20
 800986c:	2b3c      	cmp	r3, #60	; 0x3c
 800986e:	dc16      	bgt.n	800989e <__ieee754_atan2+0x116>
 8009870:	2800      	cmp	r0, #0
 8009872:	da01      	bge.n	8009878 <__ieee754_atan2+0xf0>
 8009874:	333c      	adds	r3, #60	; 0x3c
 8009876:	db17      	blt.n	80098a8 <__ieee754_atan2+0x120>
 8009878:	ed9d 7b00 	vldr	d7, [sp]
 800987c:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8009880:	f000 f964 	bl	8009b4c <fabs>
 8009884:	f000 f868 	bl	8009958 <atan>
 8009888:	ed8d 0b00 	vstr	d0, [sp]
 800988c:	2c01      	cmp	r4, #1
 800988e:	d00e      	beq.n	80098ae <__ieee754_atan2+0x126>
 8009890:	2c02      	cmp	r4, #2
 8009892:	d014      	beq.n	80098be <__ieee754_atan2+0x136>
 8009894:	b9f4      	cbnz	r4, 80098d4 <__ieee754_atan2+0x14c>
 8009896:	ed9d 0b00 	vldr	d0, [sp]
 800989a:	b003      	add	sp, #12
 800989c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800989e:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80098f8 <__ieee754_atan2+0x170>
 80098a2:	ed8d 7b00 	vstr	d7, [sp]
 80098a6:	e7f1      	b.n	800988c <__ieee754_atan2+0x104>
 80098a8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009930 <__ieee754_atan2+0x1a8>
 80098ac:	e7f9      	b.n	80098a2 <__ieee754_atan2+0x11a>
 80098ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098b2:	9901      	ldr	r1, [sp, #4]
 80098b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098b8:	e9cd 2300 	strd	r2, r3, [sp]
 80098bc:	e7eb      	b.n	8009896 <__ieee754_atan2+0x10e>
 80098be:	ed9d 6b00 	vldr	d6, [sp]
 80098c2:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8009938 <__ieee754_atan2+0x1b0>
 80098c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80098ca:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8009940 <__ieee754_atan2+0x1b8>
 80098ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80098d2:	e779      	b.n	80097c8 <__ieee754_atan2+0x40>
 80098d4:	ed9d 6b00 	vldr	d6, [sp]
 80098d8:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8009938 <__ieee754_atan2+0x1b0>
 80098dc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80098e0:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8009940 <__ieee754_atan2+0x1b8>
 80098e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80098e8:	e76e      	b.n	80097c8 <__ieee754_atan2+0x40>
 80098ea:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8009940 <__ieee754_atan2+0x1b8>
 80098ee:	e76b      	b.n	80097c8 <__ieee754_atan2+0x40>
 80098f0:	54442d18 	.word	0x54442d18
 80098f4:	c00921fb 	.word	0xc00921fb
 80098f8:	54442d18 	.word	0x54442d18
 80098fc:	3ff921fb 	.word	0x3ff921fb
 8009900:	54442d18 	.word	0x54442d18
 8009904:	bff921fb 	.word	0xbff921fb
 8009908:	54442d18 	.word	0x54442d18
 800990c:	bfe921fb 	.word	0xbfe921fb
 8009910:	54442d18 	.word	0x54442d18
 8009914:	3fe921fb 	.word	0x3fe921fb
 8009918:	7f3321d2 	.word	0x7f3321d2
 800991c:	4002d97c 	.word	0x4002d97c
 8009920:	7f3321d2 	.word	0x7f3321d2
 8009924:	c002d97c 	.word	0xc002d97c
 8009928:	00000000 	.word	0x00000000
 800992c:	80000000 	.word	0x80000000
	...
 8009938:	33145c07 	.word	0x33145c07
 800993c:	3ca1a626 	.word	0x3ca1a626
 8009940:	54442d18 	.word	0x54442d18
 8009944:	400921fb 	.word	0x400921fb
 8009948:	7ff00000 	.word	0x7ff00000

0800994c <__ieee754_sqrtf>:
 800994c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009950:	4770      	bx	lr
 8009952:	0000      	movs	r0, r0
 8009954:	0000      	movs	r0, r0
	...

08009958 <atan>:
 8009958:	b538      	push	{r3, r4, r5, lr}
 800995a:	eeb0 7b40 	vmov.f64	d7, d0
 800995e:	ee17 5a90 	vmov	r5, s15
 8009962:	4b73      	ldr	r3, [pc, #460]	; (8009b30 <atan+0x1d8>)
 8009964:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009968:	429c      	cmp	r4, r3
 800996a:	dd13      	ble.n	8009994 <atan+0x3c>
 800996c:	4b71      	ldr	r3, [pc, #452]	; (8009b34 <atan+0x1dc>)
 800996e:	429c      	cmp	r4, r3
 8009970:	dc03      	bgt.n	800997a <atan+0x22>
 8009972:	d107      	bne.n	8009984 <atan+0x2c>
 8009974:	ee10 3a10 	vmov	r3, s0
 8009978:	b123      	cbz	r3, 8009984 <atan+0x2c>
 800997a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800997e:	eeb0 0b47 	vmov.f64	d0, d7
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8009ac0 <atan+0x168>
 8009988:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8009ac8 <atan+0x170>
 800998c:	2d00      	cmp	r5, #0
 800998e:	fe37 7b06 	vselgt.f64	d7, d7, d6
 8009992:	e7f4      	b.n	800997e <atan+0x26>
 8009994:	4b68      	ldr	r3, [pc, #416]	; (8009b38 <atan+0x1e0>)
 8009996:	429c      	cmp	r4, r3
 8009998:	dc11      	bgt.n	80099be <atan+0x66>
 800999a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800999e:	429c      	cmp	r4, r3
 80099a0:	dc0a      	bgt.n	80099b8 <atan+0x60>
 80099a2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80099a6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8009ad0 <atan+0x178>
 80099aa:	ee30 6b06 	vadd.f64	d6, d0, d6
 80099ae:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80099b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099b6:	dce2      	bgt.n	800997e <atan+0x26>
 80099b8:	f04f 33ff 	mov.w	r3, #4294967295
 80099bc:	e013      	b.n	80099e6 <atan+0x8e>
 80099be:	f000 f8c5 	bl	8009b4c <fabs>
 80099c2:	4b5e      	ldr	r3, [pc, #376]	; (8009b3c <atan+0x1e4>)
 80099c4:	429c      	cmp	r4, r3
 80099c6:	dc4f      	bgt.n	8009a68 <atan+0x110>
 80099c8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80099cc:	429c      	cmp	r4, r3
 80099ce:	dc41      	bgt.n	8009a54 <atan+0xfc>
 80099d0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80099d4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80099d8:	2300      	movs	r3, #0
 80099da:	eea0 6b07 	vfma.f64	d6, d0, d7
 80099de:	ee30 0b07 	vadd.f64	d0, d0, d7
 80099e2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80099e6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8009ad8 <atan+0x180>
 80099ea:	ee27 4b07 	vmul.f64	d4, d7, d7
 80099ee:	ee24 5b04 	vmul.f64	d5, d4, d4
 80099f2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8009ae0 <atan+0x188>
 80099f6:	eea5 3b06 	vfma.f64	d3, d5, d6
 80099fa:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8009ae8 <atan+0x190>
 80099fe:	eea3 6b05 	vfma.f64	d6, d3, d5
 8009a02:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8009af0 <atan+0x198>
 8009a06:	eea6 3b05 	vfma.f64	d3, d6, d5
 8009a0a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8009af8 <atan+0x1a0>
 8009a0e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8009a12:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8009b00 <atan+0x1a8>
 8009a16:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8009b08 <atan+0x1b0>
 8009a1a:	eea6 3b05 	vfma.f64	d3, d6, d5
 8009a1e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8009b10 <atan+0x1b8>
 8009a22:	eea5 2b06 	vfma.f64	d2, d5, d6
 8009a26:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8009b18 <atan+0x1c0>
 8009a2a:	eea2 6b05 	vfma.f64	d6, d2, d5
 8009a2e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8009b20 <atan+0x1c8>
 8009a32:	eea6 2b05 	vfma.f64	d2, d6, d5
 8009a36:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8009b28 <atan+0x1d0>
 8009a3a:	1c5a      	adds	r2, r3, #1
 8009a3c:	eea2 6b05 	vfma.f64	d6, d2, d5
 8009a40:	ee26 6b05 	vmul.f64	d6, d6, d5
 8009a44:	eea3 6b04 	vfma.f64	d6, d3, d4
 8009a48:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009a4c:	d121      	bne.n	8009a92 <atan+0x13a>
 8009a4e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009a52:	e794      	b.n	800997e <atan+0x26>
 8009a54:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009a58:	2301      	movs	r3, #1
 8009a5a:	ee30 6b47 	vsub.f64	d6, d0, d7
 8009a5e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009a62:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8009a66:	e7be      	b.n	80099e6 <atan+0x8e>
 8009a68:	4b35      	ldr	r3, [pc, #212]	; (8009b40 <atan+0x1e8>)
 8009a6a:	429c      	cmp	r4, r3
 8009a6c:	dc0b      	bgt.n	8009a86 <atan+0x12e>
 8009a6e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009a72:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009a76:	ee30 5b47 	vsub.f64	d5, d0, d7
 8009a7a:	eea0 6b07 	vfma.f64	d6, d0, d7
 8009a7e:	2302      	movs	r3, #2
 8009a80:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009a84:	e7af      	b.n	80099e6 <atan+0x8e>
 8009a86:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8009a90:	e7a9      	b.n	80099e6 <atan+0x8e>
 8009a92:	4a2c      	ldr	r2, [pc, #176]	; (8009b44 <atan+0x1ec>)
 8009a94:	492c      	ldr	r1, [pc, #176]	; (8009b48 <atan+0x1f0>)
 8009a96:	00db      	lsls	r3, r3, #3
 8009a98:	441a      	add	r2, r3
 8009a9a:	440b      	add	r3, r1
 8009a9c:	ed93 5b00 	vldr	d5, [r3]
 8009aa0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009aa4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009aa8:	ed92 6b00 	vldr	d6, [r2]
 8009aac:	2d00      	cmp	r5, #0
 8009aae:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009ab2:	bfb8      	it	lt
 8009ab4:	eeb1 7b47 	vneglt.f64	d7, d7
 8009ab8:	e761      	b.n	800997e <atan+0x26>
 8009aba:	bf00      	nop
 8009abc:	f3af 8000 	nop.w
 8009ac0:	54442d18 	.word	0x54442d18
 8009ac4:	bff921fb 	.word	0xbff921fb
 8009ac8:	54442d18 	.word	0x54442d18
 8009acc:	3ff921fb 	.word	0x3ff921fb
 8009ad0:	8800759c 	.word	0x8800759c
 8009ad4:	7e37e43c 	.word	0x7e37e43c
 8009ad8:	e322da11 	.word	0xe322da11
 8009adc:	3f90ad3a 	.word	0x3f90ad3a
 8009ae0:	24760deb 	.word	0x24760deb
 8009ae4:	3fa97b4b 	.word	0x3fa97b4b
 8009ae8:	a0d03d51 	.word	0xa0d03d51
 8009aec:	3fb10d66 	.word	0x3fb10d66
 8009af0:	c54c206e 	.word	0xc54c206e
 8009af4:	3fb745cd 	.word	0x3fb745cd
 8009af8:	920083ff 	.word	0x920083ff
 8009afc:	3fc24924 	.word	0x3fc24924
 8009b00:	5555550d 	.word	0x5555550d
 8009b04:	3fd55555 	.word	0x3fd55555
 8009b08:	52defd9a 	.word	0x52defd9a
 8009b0c:	bfadde2d 	.word	0xbfadde2d
 8009b10:	2c6a6c2f 	.word	0x2c6a6c2f
 8009b14:	bfa2b444 	.word	0xbfa2b444
 8009b18:	af749a6d 	.word	0xaf749a6d
 8009b1c:	bfb3b0f2 	.word	0xbfb3b0f2
 8009b20:	fe231671 	.word	0xfe231671
 8009b24:	bfbc71c6 	.word	0xbfbc71c6
 8009b28:	9998ebc4 	.word	0x9998ebc4
 8009b2c:	bfc99999 	.word	0xbfc99999
 8009b30:	440fffff 	.word	0x440fffff
 8009b34:	7ff00000 	.word	0x7ff00000
 8009b38:	3fdbffff 	.word	0x3fdbffff
 8009b3c:	3ff2ffff 	.word	0x3ff2ffff
 8009b40:	40037fff 	.word	0x40037fff
 8009b44:	08009eb8 	.word	0x08009eb8
 8009b48:	08009ed8 	.word	0x08009ed8

08009b4c <fabs>:
 8009b4c:	ec51 0b10 	vmov	r0, r1, d0
 8009b50:	ee10 2a10 	vmov	r2, s0
 8009b54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009b58:	ec43 2b10 	vmov	d0, r2, r3
 8009b5c:	4770      	bx	lr

08009b5e <matherr>:
 8009b5e:	2000      	movs	r0, #0
 8009b60:	4770      	bx	lr
	...

08009b64 <_init>:
 8009b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b66:	bf00      	nop
 8009b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b6a:	bc08      	pop	{r3}
 8009b6c:	469e      	mov	lr, r3
 8009b6e:	4770      	bx	lr

08009b70 <_fini>:
 8009b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b72:	bf00      	nop
 8009b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b76:	bc08      	pop	{r3}
 8009b78:	469e      	mov	lr, r3
 8009b7a:	4770      	bx	lr
