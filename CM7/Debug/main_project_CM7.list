
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c28  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08008ec0  08008ec0  00018ec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009160  08009160  00019160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009168  08009168  00019168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800916c  0800916c  0001916c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  20000000  08009170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006514  200001f4  08009364  000201f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20006708  08009364  00026708  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027c0a  00000000  00000000  00020222  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003fe8  00000000  00000000  00047e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001568  00000000  00000000  0004be18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000013d0  00000000  00000000  0004d380  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003c1d5  00000000  00000000  0004e750  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001597d  00000000  00000000  0008a925  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00185f75  00000000  00000000  000a02a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00226217  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000615c  00000000  00000000  00226294  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200001f4 	.word	0x200001f4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008ea8 	.word	0x08008ea8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200001f8 	.word	0x200001f8
 80002d4:	08008ea8 	.word	0x08008ea8

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005ec:	4b2f      	ldr	r3, [pc, #188]	; (80006ac <SystemInit+0xc4>)
 80005ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f2:	4a2e      	ldr	r2, [pc, #184]	; (80006ac <SystemInit+0xc4>)
 80005f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80005fc:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <SystemInit+0xc4>)
 80005fe:	691b      	ldr	r3, [r3, #16]
 8000600:	4a2a      	ldr	r2, [pc, #168]	; (80006ac <SystemInit+0xc4>)
 8000602:	f043 0304 	orr.w	r3, r3, #4
 8000606:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000608:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <SystemInit+0xc8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a28      	ldr	r2, [pc, #160]	; (80006b0 <SystemInit+0xc8>)
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000614:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <SystemInit+0xc8>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061a:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <SystemInit+0xc8>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	4924      	ldr	r1, [pc, #144]	; (80006b0 <SystemInit+0xc8>)
 8000620:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <SystemInit+0xcc>)
 8000622:	4013      	ands	r3, r2
 8000624:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000626:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <SystemInit+0xc8>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800062c:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <SystemInit+0xc8>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <SystemInit+0xc8>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <SystemInit+0xc8>)
 800063a:	2200      	movs	r2, #0
 800063c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <SystemInit+0xc8>)
 8000640:	2200      	movs	r2, #0
 8000642:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <SystemInit+0xc8>)
 8000646:	2200      	movs	r2, #0
 8000648:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <SystemInit+0xc8>)
 800064c:	2200      	movs	r2, #0
 800064e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <SystemInit+0xc8>)
 8000652:	2200      	movs	r2, #0
 8000654:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <SystemInit+0xc8>)
 8000658:	2200      	movs	r2, #0
 800065a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <SystemInit+0xc8>)
 800065e:	2200      	movs	r2, #0
 8000660:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <SystemInit+0xc8>)
 8000664:	2200      	movs	r2, #0
 8000666:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <SystemInit+0xc8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <SystemInit+0xc8>)
 800066e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000672:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <SystemInit+0xc8>)
 8000676:	2200      	movs	r2, #0
 8000678:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <SystemInit+0xd0>)
 800067c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800067e:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <SystemInit+0xd0>)
 8000680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000684:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <SystemInit+0xd4>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <SystemInit+0xd8>)
 800068c:	4013      	ands	r3, r2
 800068e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000692:	d202      	bcs.n	800069a <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <SystemInit+0xdc>)
 8000696:	2201      	movs	r2, #1
 8000698:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800069a:	4b04      	ldr	r3, [pc, #16]	; (80006ac <SystemInit+0xc4>)
 800069c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006a0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00
 80006b0:	58024400 	.word	0x58024400
 80006b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006b8:	580000c0 	.word	0x580000c0
 80006bc:	5c001000 	.word	0x5c001000
 80006c0:	ffff0000 	.word	0xffff0000
 80006c4:	51008108 	.word	0x51008108

080006c8 <unwrap>:
		out[j] = atan2(in[i+1], in[i]);
		j++;
	}
}

void unwrap(float32_t in[], float32_t out[]){
 80006c8:	b480      	push	{r7}
 80006ca:	b087      	sub	sp, #28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	        end
	    end
	end
	yout((i+1),:)=u(i+1)+(2*pi*k); % add 2*pi*k to the last element of the input
	*/
	uint16_t k = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	82fb      	strh	r3, [r7, #22]
	float32_t alpha = pi;
 80006d6:	4b47      	ldr	r3, [pc, #284]	; (80007f4 <unwrap+0x12c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < (frameSize - 1); i++){
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	e057      	b.n	8000792 <unwrap+0xca>
		out[i] = in[i] + 2*pi*k;
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	ed93 7a00 	vldr	s14, [r3]
 80006ee:	4b41      	ldr	r3, [pc, #260]	; (80007f4 <unwrap+0x12c>)
 80006f0:	edd3 7a00 	vldr	s15, [r3]
 80006f4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80006f8:	8afb      	ldrh	r3, [r7, #22]
 80006fa:	ee07 3a90 	vmov	s15, r3
 80006fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000702:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	4413      	add	r3, r2
 800070e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000712:	edc3 7a00 	vstr	s15, [r3]
		if(abs(in[i+1] - in[i]) > abs(alpha)){
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	3301      	adds	r3, #1
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	ed93 7a00 	vldr	s14, [r3]
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	4413      	add	r3, r2
 800072c:	edd3 7a00 	vldr	s15, [r3]
 8000730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000734:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000738:	ee17 3a90 	vmov	r3, s15
 800073c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000740:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000744:	edd7 7a03 	vldr	s15, [r7, #12]
 8000748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800074c:	ee17 3a90 	vmov	r3, s15
 8000750:	2b00      	cmp	r3, #0
 8000752:	bfb8      	it	lt
 8000754:	425b      	neglt	r3, r3
 8000756:	429a      	cmp	r2, r3
 8000758:	dd18      	ble.n	800078c <unwrap+0xc4>
			if(in[i+1] < in[i]){
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	3301      	adds	r3, #1
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	4413      	add	r3, r2
 8000764:	ed93 7a00 	vldr	s14, [r3]
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4413      	add	r3, r2
 8000770:	edd3 7a00 	vldr	s15, [r3]
 8000774:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077c:	d503      	bpl.n	8000786 <unwrap+0xbe>
				k++;
 800077e:	8afb      	ldrh	r3, [r7, #22]
 8000780:	3301      	adds	r3, #1
 8000782:	82fb      	strh	r3, [r7, #22]
 8000784:	e002      	b.n	800078c <unwrap+0xc4>
			} else {
				k--;
 8000786:	8afb      	ldrh	r3, [r7, #22]
 8000788:	3b01      	subs	r3, #1
 800078a:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (frameSize - 1); i++){
 800078c:	693b      	ldr	r3, [r7, #16]
 800078e:	3301      	adds	r3, #1
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <unwrap+0x130>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	3b01      	subs	r3, #1
 8000798:	693a      	ldr	r2, [r7, #16]
 800079a:	429a      	cmp	r2, r3
 800079c:	dba1      	blt.n	80006e2 <unwrap+0x1a>
			}
		}
	}
	out[frameSize-1] = in[frameSize-1] + 2*pi*k;
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <unwrap+0x130>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80007a8:	4413      	add	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	4413      	add	r3, r2
 80007b0:	ed93 7a00 	vldr	s14, [r3]
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <unwrap+0x12c>)
 80007b6:	edd3 7a00 	vldr	s15, [r3]
 80007ba:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80007be:	8afb      	ldrh	r3, [r7, #22]
 80007c0:	ee07 3a90 	vmov	s15, r3
 80007c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <unwrap+0x130>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	461a      	mov	r2, r3
 80007d2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80007d6:	4413      	add	r3, r2
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	683a      	ldr	r2, [r7, #0]
 80007dc:	4413      	add	r3, r2
 80007de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007e2:	edc3 7a00 	vstr	s15, [r3]
}
 80007e6:	bf00      	nop
 80007e8:	371c      	adds	r7, #28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000008 	.word	0x20000008
 80007f8:	2000000c 	.word	0x2000000c

080007fc <inst_frequency>:

void inst_frequency(float32_t in[], float32_t out[]){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
	float32_t *inst_phase, *unwrapped_phase;
	inst_phase = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000806:	4b50      	ldr	r3, [pc, #320]	; (8000948 <inst_frequency+0x14c>)
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4618      	mov	r0, r3
 800080e:	f006 fc67 	bl	80070e0 <malloc>
 8000812:	4603      	mov	r3, r0
 8000814:	613b      	str	r3, [r7, #16]
	unwrapped_phase = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000816:	4b4c      	ldr	r3, [pc, #304]	; (8000948 <inst_frequency+0x14c>)
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	4618      	mov	r0, r3
 800081e:	f006 fc5f 	bl	80070e0 <malloc>
 8000822:	4603      	mov	r3, r0
 8000824:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < doubleFrameSize; i = i + 2){
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	e026      	b.n	800087e <inst_frequency+0x82>
		inst_phase[j] = atan2(in[i], in[i+1]);
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	4413      	add	r3, r2
 8000838:	edd3 7a00 	vldr	s15, [r3]
 800083c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	3301      	adds	r3, #1
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	edd3 6a00 	vldr	s13, [r3]
 800084e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000852:	eeb0 1b46 	vmov.f64	d1, d6
 8000856:	eeb0 0b47 	vmov.f64	d0, d7
 800085a:	f008 f938 	bl	8008ace <atan2>
 800085e:	eeb0 7b40 	vmov.f64	d7, d0
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	4413      	add	r3, r2
 800086a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800086e:	edc3 7a00 	vstr	s15, [r3]
		j++;
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3301      	adds	r3, #1
 8000876:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < doubleFrameSize; i = i + 2){
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	3302      	adds	r3, #2
 800087c:	61bb      	str	r3, [r7, #24]
 800087e:	4b33      	ldr	r3, [pc, #204]	; (800094c <inst_frequency+0x150>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	461a      	mov	r2, r3
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	4293      	cmp	r3, r2
 8000888:	dbd2      	blt.n	8000830 <inst_frequency+0x34>
	}
	unwrap(inst_phase, unwrapped_phase);
 800088a:	68f9      	ldr	r1, [r7, #12]
 800088c:	6938      	ldr	r0, [r7, #16]
 800088e:	f7ff ff1b 	bl	80006c8 <unwrap>
	for(int i = 0; i < frameSize - 1; i++){
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	e022      	b.n	80008de <inst_frequency+0xe2>
		out[i] = (1/(2*pi))*(unwrapped_phase[i+1] - unwrapped_phase[i]);
 8000898:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <inst_frequency+0x154>)
 800089a:	edd3 7a00 	vldr	s15, [r3]
 800089e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80008a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80008a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	3301      	adds	r3, #1
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	4413      	add	r3, r2
 80008b4:	edd3 6a00 	vldr	s13, [r3]
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	4413      	add	r3, r2
 80008c0:	edd3 7a00 	vldr	s15, [r3]
 80008c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	683a      	ldr	r2, [r7, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008d4:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < frameSize - 1; i++){
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	3301      	adds	r3, #1
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <inst_frequency+0x14c>)
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	697a      	ldr	r2, [r7, #20]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	dbd6      	blt.n	8000898 <inst_frequency+0x9c>
	}
	out[frameSize - 1] = (1/(2*pi))*(0 - unwrapped_phase[frameSize - 1]);
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <inst_frequency+0x154>)
 80008ec:	edd3 7a00 	vldr	s15, [r3]
 80008f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80008f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80008f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <inst_frequency+0x14c>)
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	461a      	mov	r2, r3
 8000902:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000906:	4413      	add	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	4413      	add	r3, r2
 800090e:	edd3 7a00 	vldr	s15, [r3]
 8000912:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000954 <inst_frequency+0x158>
 8000916:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <inst_frequency+0x14c>)
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000924:	4413      	add	r3, r2
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	683a      	ldr	r2, [r7, #0]
 800092a:	4413      	add	r3, r2
 800092c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000930:	edc3 7a00 	vstr	s15, [r3]
	free(inst_phase);
 8000934:	6938      	ldr	r0, [r7, #16]
 8000936:	f006 fbdb 	bl	80070f0 <free>
	free(unwrapped_phase);
 800093a:	68f8      	ldr	r0, [r7, #12]
 800093c:	f006 fbd8 	bl	80070f0 <free>
}
 8000940:	bf00      	nop
 8000942:	3720      	adds	r7, #32
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000000c 	.word	0x2000000c
 800094c:	2000000e 	.word	0x2000000e
 8000950:	20000008 	.word	0x20000008
 8000954:	00000000 	.word	0x00000000

08000958 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	; 0x30
 800095c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	4b43      	ldr	r3, [pc, #268]	; (8000a7c <MX_GPIO_Init+0x124>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000974:	4a41      	ldr	r2, [pc, #260]	; (8000a7c <MX_GPIO_Init+0x124>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800097e:	4b3f      	ldr	r3, [pc, #252]	; (8000a7c <MX_GPIO_Init+0x124>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	61bb      	str	r3, [r7, #24]
 800098a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098c:	4b3b      	ldr	r3, [pc, #236]	; (8000a7c <MX_GPIO_Init+0x124>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000992:	4a3a      	ldr	r2, [pc, #232]	; (8000a7c <MX_GPIO_Init+0x124>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000998:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099c:	4b37      	ldr	r3, [pc, #220]	; (8000a7c <MX_GPIO_Init+0x124>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b34      	ldr	r3, [pc, #208]	; (8000a7c <MX_GPIO_Init+0x124>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b0:	4a32      	ldr	r2, [pc, #200]	; (8000a7c <MX_GPIO_Init+0x124>)
 80009b2:	f043 0302 	orr.w	r3, r3, #2
 80009b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ba:	4b30      	ldr	r3, [pc, #192]	; (8000a7c <MX_GPIO_Init+0x124>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c0:	f003 0302 	and.w	r3, r3, #2
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c8:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <MX_GPIO_Init+0x124>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ce:	4a2b      	ldr	r2, [pc, #172]	; (8000a7c <MX_GPIO_Init+0x124>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d8:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <MX_GPIO_Init+0x124>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <MX_GPIO_Init+0x124>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ec:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <MX_GPIO_Init+0x124>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <MX_GPIO_Init+0x124>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <MX_GPIO_Init+0x124>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <MX_GPIO_Init+0x124>)
 8000a0c:	f043 0310 	orr.w	r3, r3, #16
 8000a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a14:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <MX_GPIO_Init+0x124>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1a:	f003 0310 	and.w	r3, r3, #16
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a28:	4815      	ldr	r0, [pc, #84]	; (8000a80 <MX_GPIO_Init+0x128>)
 8000a2a:	f001 fb3d 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2102      	movs	r1, #2
 8000a32:	4814      	ldr	r0, [pc, #80]	; (8000a84 <MX_GPIO_Init+0x12c>)
 8000a34:	f001 fb38 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a38:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480b      	ldr	r0, [pc, #44]	; (8000a80 <MX_GPIO_Init+0x128>)
 8000a52:	f001 f961 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_GPIO_Init+0x12c>)
 8000a6e:	f001 f953 	bl	8001d18 <HAL_GPIO_Init>

}
 8000a72:	bf00      	nop
 8000a74:	3730      	adds	r7, #48	; 0x30
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	58024400 	.word	0x58024400
 8000a80:	58020400 	.word	0x58020400
 8000a84:	58021000 	.word	0x58021000

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// char hello_world[50] = {"\r\nHello World!\r\n"};
	uint32_t length = 2048, frameSize = 1024;
 8000a92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a96:	f244 0210 	movw	r2, #16400	; 0x4010
 8000a9a:	443a      	add	r2, r7
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa2:	f244 020c 	movw	r2, #16396	; 0x400c
 8000aa6:	443a      	add	r2, r7
 8000aa8:	6013      	str	r3, [r2, #0]
	uint32_t counter = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f244 0208 	movw	r2, #16392	; 0x4008
 8000ab0:	443a      	add	r2, r7
 8000ab2:	6013      	str	r3, [r2, #0]
    int32_t timeout; 
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000ab4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ab8:	f244 0214 	movw	r2, #16404	; 0x4014
 8000abc:	443a      	add	r2, r7
 8000abe:	6013      	str	r3, [r2, #0]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000ac0:	bf00      	nop
 8000ac2:	4b9b      	ldr	r3, [pc, #620]	; (8000d30 <main+0x2a8>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d00a      	beq.n	8000ae4 <main+0x5c>
 8000ace:	f244 0314 	movw	r3, #16404	; 0x4014
 8000ad2:	443b      	add	r3, r7
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	1e5a      	subs	r2, r3, #1
 8000ad8:	f244 0114 	movw	r1, #16404	; 0x4014
 8000adc:	4439      	add	r1, r7
 8000ade:	600a      	str	r2, [r1, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	dcee      	bgt.n	8000ac2 <main+0x3a>
  if ( timeout < 0 )
 8000ae4:	f244 0314 	movw	r3, #16404	; 0x4014
 8000ae8:	443b      	add	r3, r7
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	da01      	bge.n	8000af4 <main+0x6c>
  {
  Error_Handler();
 8000af0:	f000 fab8 	bl	8001064 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af4:	f000 fcfc 	bl	80014f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af8:	f000 f93c 	bl	8000d74 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000afc:	4b8c      	ldr	r3, [pc, #560]	; (8000d30 <main+0x2a8>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	4a8b      	ldr	r2, [pc, #556]	; (8000d30 <main+0x2a8>)
 8000b04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0c:	4b88      	ldr	r3, [pc, #544]	; (8000d30 <main+0x2a8>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b12:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8000b16:	4b87      	ldr	r3, [pc, #540]	; (8000d34 <main+0x2ac>)
 8000b18:	f244 0118 	movw	r1, #16408	; 0x4018
 8000b1c:	4439      	add	r1, r7
 8000b1e:	440b      	add	r3, r1
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	4b84      	ldr	r3, [pc, #528]	; (8000d34 <main+0x2ac>)
 8000b24:	f244 0218 	movw	r2, #16408	; 0x4018
 8000b28:	443a      	add	r2, r7
 8000b2a:	4413      	add	r3, r2
 8000b2c:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f001 fad4 	bl	80020dc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b34:	2100      	movs	r1, #0
 8000b36:	2000      	movs	r0, #0
 8000b38:	f001 faea 	bl	8002110 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b40:	f244 0214 	movw	r2, #16404	; 0x4014
 8000b44:	443a      	add	r2, r7
 8000b46:	6013      	str	r3, [r2, #0]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b48:	bf00      	nop
 8000b4a:	4b79      	ldr	r3, [pc, #484]	; (8000d30 <main+0x2a8>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10a      	bne.n	8000b6c <main+0xe4>
 8000b56:	f244 0314 	movw	r3, #16404	; 0x4014
 8000b5a:	443b      	add	r3, r7
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	1e5a      	subs	r2, r3, #1
 8000b60:	f244 0114 	movw	r1, #16404	; 0x4014
 8000b64:	4439      	add	r1, r7
 8000b66:	600a      	str	r2, [r1, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	dcee      	bgt.n	8000b4a <main+0xc2>
if ( timeout < 0 )
 8000b6c:	f244 0314 	movw	r3, #16404	; 0x4014
 8000b70:	443b      	add	r3, r7
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da01      	bge.n	8000b7c <main+0xf4>
{
Error_Handler();
 8000b78:	f000 fa74 	bl	8001064 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7c:	f7ff feec 	bl	8000958 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b80:	f000 fb64 	bl	800124c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b84:	f000 fc00 	bl	8001388 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000b88:	f000 faf2 	bl	8001170 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Put UART peripheral in reception process
  if(HAL_UART_Receive_IT(&huart3, &rxDataBuffer[0], bufferSize) != HAL_OK)
 8000b8c:	4b6a      	ldr	r3, [pc, #424]	; (8000d38 <main+0x2b0>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	496a      	ldr	r1, [pc, #424]	; (8000d3c <main+0x2b4>)
 8000b94:	486a      	ldr	r0, [pc, #424]	; (8000d40 <main+0x2b8>)
 8000b96:	f004 fb11 	bl	80051bc <HAL_UART_Receive_IT>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d023      	beq.n	8000be8 <main+0x160>
  {
    Error_Handler();
 8000ba0:	f000 fa60 	bl	8001064 <Error_Handler>
  }
  // Wait for message
  while (UartReady != SET)
 8000ba4:	e020      	b.n	8000be8 <main+0x160>
  {
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4866      	ldr	r0, [pc, #408]	; (8000d44 <main+0x2bc>)
 8000bac:	f001 fa7c 	bl	80020a8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000bb0:	2064      	movs	r0, #100	; 0x64
 8000bb2:	f000 fd2f 	bl	8001614 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2101      	movs	r1, #1
 8000bba:	4862      	ldr	r0, [pc, #392]	; (8000d44 <main+0x2bc>)
 8000bbc:	f001 fa74 	bl	80020a8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000bc0:	2064      	movs	r0, #100	; 0x64
 8000bc2:	f000 fd27 	bl	8001614 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2101      	movs	r1, #1
 8000bca:	485e      	ldr	r0, [pc, #376]	; (8000d44 <main+0x2bc>)
 8000bcc:	f001 fa6c 	bl	80020a8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000bd0:	2064      	movs	r0, #100	; 0x64
 8000bd2:	f000 fd1f 	bl	8001614 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2101      	movs	r1, #1
 8000bda:	485a      	ldr	r0, [pc, #360]	; (8000d44 <main+0x2bc>)
 8000bdc:	f001 fa64 	bl	80020a8 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000be0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000be4:	f000 fd16 	bl	8001614 <HAL_Delay>
  while (UartReady != SET)
 8000be8:	4b57      	ldr	r3, [pc, #348]	; (8000d48 <main+0x2c0>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d1d9      	bne.n	8000ba6 <main+0x11e>
  }
  UartReady = RESET;
 8000bf2:	4b55      	ldr	r3, [pc, #340]	; (8000d48 <main+0x2c0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]

  // HAL_UART_Transmit(&huart3, (uint8_t*) &hello_world[0], sizeof(hello_world), 100);
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	4851      	ldr	r0, [pc, #324]	; (8000d44 <main+0x2bc>)
 8000bfe:	f001 fa53 	bl	80020a8 <HAL_GPIO_WritePin>

  if(rxDataBuffer[8191] != 0 && (processed == 0)){
 8000c02:	4a4e      	ldr	r2, [pc, #312]	; (8000d3c <main+0x2b4>)
 8000c04:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000c08:	4413      	add	r3, r2
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d00a      	beq.n	8000c26 <main+0x19e>
 8000c10:	4b4e      	ldr	r3, [pc, #312]	; (8000d4c <main+0x2c4>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d106      	bne.n	8000c26 <main+0x19e>
	  byte2float(rxDataBuffer, processedData, arraySize);
 8000c18:	4b4d      	ldr	r3, [pc, #308]	; (8000d50 <main+0x2c8>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	494d      	ldr	r1, [pc, #308]	; (8000d54 <main+0x2cc>)
 8000c20:	4846      	ldr	r0, [pc, #280]	; (8000d3c <main+0x2b4>)
 8000c22:	f000 f97f 	bl	8000f24 <byte2float>
  }

  // HRTimer enable
  __HAL_TIM_ENABLE(&htim2);
 8000c26:	4b4c      	ldr	r3, [pc, #304]	; (8000d58 <main+0x2d0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b4a      	ldr	r3, [pc, #296]	; (8000d58 <main+0x2d0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f042 0201 	orr.w	r2, r2, #1
 8000c34:	601a      	str	r2, [r3, #0]
  __HAL_TIM_UIFREMAP_DISABLE(&htim2);
 8000c36:	4b48      	ldr	r3, [pc, #288]	; (8000d58 <main+0x2d0>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b46      	ldr	r3, [pc, #280]	; (8000d58 <main+0x2d0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c44:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim2);
 8000c46:	4844      	ldr	r0, [pc, #272]	; (8000d58 <main+0x2d0>)
 8000c48:	f003 ff14 	bl	8004a74 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000c4c:	4b42      	ldr	r3, [pc, #264]	; (8000d58 <main+0x2d0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2200      	movs	r2, #0
 8000c52:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_UART_Transmit(&huart3, (uint8_t*) &txDataBuffer[0], 4096, 2000);
	}
	*/

	// Instantaneous frequency value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000c54:	4b40      	ldr	r3, [pc, #256]	; (8000d58 <main+0x2d0>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	625a      	str	r2, [r3, #36]	; 0x24
	inst_frequency(&processedData[0], &instFreq[0]);
 8000c5c:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <main+0x2d4>)
 8000c5e:	f244 0218 	movw	r2, #16408	; 0x4018
 8000c62:	443a      	add	r2, r7
 8000c64:	4413      	add	r3, r2
 8000c66:	4619      	mov	r1, r3
 8000c68:	483a      	ldr	r0, [pc, #232]	; (8000d54 <main+0x2cc>)
 8000c6a:	f7ff fdc7 	bl	80007fc <inst_frequency>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000c6e:	4b3a      	ldr	r3, [pc, #232]	; (8000d58 <main+0x2d0>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c74:	f244 0208 	movw	r2, #16392	; 0x4008
 8000c78:	443a      	add	r2, r7
 8000c7a:	6013      	str	r3, [r2, #0]
	sprintf(&txStringBuffer[0], "Inst freq counter = %ld\r\n", counter);
	if(UART_CheckIdleState(&huart3) == HAL_OK){
		HAL_UART_Transmit(&huart3, (uint8_t*) &txStringBuffer[0], sizeof(txStringBuffer), 100);
	}
	*/
	resetDataBuffer(txDataBuffer);
 8000c7c:	4838      	ldr	r0, [pc, #224]	; (8000d60 <main+0x2d8>)
 8000c7e:	f000 f937 	bl	8000ef0 <resetDataBuffer>
	float2byte(txDataBuffer, instFreq, arraySize);
 8000c82:	4b33      	ldr	r3, [pc, #204]	; (8000d50 <main+0x2c8>)
 8000c84:	881a      	ldrh	r2, [r3, #0]
 8000c86:	4b35      	ldr	r3, [pc, #212]	; (8000d5c <main+0x2d4>)
 8000c88:	f244 0118 	movw	r1, #16408	; 0x4018
 8000c8c:	4439      	add	r1, r7
 8000c8e:	440b      	add	r3, r1
 8000c90:	4619      	mov	r1, r3
 8000c92:	4833      	ldr	r0, [pc, #204]	; (8000d60 <main+0x2d8>)
 8000c94:	f000 f986 	bl	8000fa4 <float2byte>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000c98:	4829      	ldr	r0, [pc, #164]	; (8000d40 <main+0x2b8>)
 8000c9a:	f005 fb43 	bl	8006324 <UART_CheckIdleState>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d113      	bne.n	8000ccc <main+0x244>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txHead[0], 4, 100);
 8000ca4:	2364      	movs	r3, #100	; 0x64
 8000ca6:	2204      	movs	r2, #4
 8000ca8:	492e      	ldr	r1, [pc, #184]	; (8000d64 <main+0x2dc>)
 8000caa:	4825      	ldr	r0, [pc, #148]	; (8000d40 <main+0x2b8>)
 8000cac:	f004 f9f0 	bl	8005090 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txDataBuffer[0], 4096, 2000);
 8000cb0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000cb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cb8:	4929      	ldr	r1, [pc, #164]	; (8000d60 <main+0x2d8>)
 8000cba:	4821      	ldr	r0, [pc, #132]	; (8000d40 <main+0x2b8>)
 8000cbc:	f004 f9e8 	bl	8005090 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txTail[0], 4, 100);
 8000cc0:	2364      	movs	r3, #100	; 0x64
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	4928      	ldr	r1, [pc, #160]	; (8000d68 <main+0x2e0>)
 8000cc6:	481e      	ldr	r0, [pc, #120]	; (8000d40 <main+0x2b8>)
 8000cc8:	f004 f9e2 	bl	8005090 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <main+0x2d0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	481a      	ldr	r0, [pc, #104]	; (8000d44 <main+0x2bc>)
 8000cda:	f001 f9e5 	bl	80020a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	4822      	ldr	r0, [pc, #136]	; (8000d6c <main+0x2e4>)
 8000ce4:	f001 f9e0 	bl	80020a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cee:	4815      	ldr	r0, [pc, #84]	; (8000d44 <main+0x2bc>)
 8000cf0:	f001 f9da 	bl	80020a8 <HAL_GPIO_WritePin>
  while (1)
  {
	if(__HAL_TIM_GET_COUNTER(&htim2) >= 240000000){
 8000cf4:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <main+0x2d0>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfa:	4a1d      	ldr	r2, [pc, #116]	; (8000d70 <main+0x2e8>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d9f9      	bls.n	8000cf4 <main+0x26c>
		if((HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin))){
 8000d00:	2102      	movs	r1, #2
 8000d02:	481a      	ldr	r0, [pc, #104]	; (8000d6c <main+0x2e4>)
 8000d04:	f001 f9b8 	bl	8002078 <HAL_GPIO_ReadPin>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d005      	beq.n	8000d1a <main+0x292>
			HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2102      	movs	r1, #2
 8000d12:	4816      	ldr	r0, [pc, #88]	; (8000d6c <main+0x2e4>)
 8000d14:	f001 f9c8 	bl	80020a8 <HAL_GPIO_WritePin>
 8000d18:	e004      	b.n	8000d24 <main+0x29c>
		} else {
			HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	4813      	ldr	r0, [pc, #76]	; (8000d6c <main+0x2e4>)
 8000d20:	f001 f9c2 	bl	80020a8 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <main+0x2d0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	625a      	str	r2, [r3, #36]	; 0x24
	if(__HAL_TIM_GET_COUNTER(&htim2) >= 240000000){
 8000d2c:	e7e2      	b.n	8000cf4 <main+0x26c>
 8000d2e:	bf00      	nop
 8000d30:	58024400 	.word	0x58024400
 8000d34:	ffffbfec 	.word	0xffffbfec
 8000d38:	20000018 	.word	0x20000018
 8000d3c:	20004220 	.word	0x20004220
 8000d40:	2000626c 	.word	0x2000626c
 8000d44:	58020400 	.word	0x58020400
 8000d48:	20000212 	.word	0x20000212
 8000d4c:	20000211 	.word	0x20000211
 8000d50:	2000001a 	.word	0x2000001a
 8000d54:	20000220 	.word	0x20000220
 8000d58:	20006220 	.word	0x20006220
 8000d5c:	ffffdff0 	.word	0xffffdff0
 8000d60:	20002220 	.word	0x20002220
 8000d64:	20000010 	.word	0x20000010
 8000d68:	20000014 	.word	0x20000014
 8000d6c:	58021000 	.word	0x58021000
 8000d70:	0e4e1bff 	.word	0x0e4e1bff

08000d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b0cc      	sub	sp, #304	; 0x130
 8000d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d7e:	224c      	movs	r2, #76	; 0x4c
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f006 f9bc 	bl	8007100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d88:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d8c:	2220      	movs	r2, #32
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f006 f9b5 	bl	8007100 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	23bc      	movs	r3, #188	; 0xbc
 8000d9e:	461a      	mov	r2, r3
 8000da0:	2100      	movs	r1, #0
 8000da2:	f006 f9ad 	bl	8007100 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000da6:	2004      	movs	r0, #4
 8000da8:	f001 fb0e 	bl	80023c8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	4b4c      	ldr	r3, [pc, #304]	; (8000ee4 <SystemClock_Config+0x170>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	4a4b      	ldr	r2, [pc, #300]	; (8000ee4 <SystemClock_Config+0x170>)
 8000db8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dbc:	6193      	str	r3, [r2, #24]
 8000dbe:	4b49      	ldr	r3, [pc, #292]	; (8000ee4 <SystemClock_Config+0x170>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	4b47      	ldr	r3, [pc, #284]	; (8000ee8 <SystemClock_Config+0x174>)
 8000dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dce:	4a46      	ldr	r2, [pc, #280]	; (8000ee8 <SystemClock_Config+0x174>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000dd6:	4b44      	ldr	r3, [pc, #272]	; (8000ee8 <SystemClock_Config+0x174>)
 8000dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dda:	f003 0201 	and.w	r2, r3, #1
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000de6:	bf00      	nop
 8000de8:	4b3e      	ldr	r3, [pc, #248]	; (8000ee4 <SystemClock_Config+0x170>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000df4:	d1f8      	bne.n	8000de8 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000df6:	2322      	movs	r3, #34	; 0x22
 8000df8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e02:	2340      	movs	r3, #64	; 0x40
 8000e04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000e20:	233c      	movs	r3, #60	; 0x3c
 8000e22:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e26:	2302      	movs	r3, #2
 8000e28:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e32:	2302      	movs	r3, #2
 8000e34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e38:	230c      	movs	r3, #12
 8000e3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f001 fb24 	bl	800249c <HAL_RCC_OscConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000e5a:	f000 f903 	bl	8001064 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5e:	233f      	movs	r3, #63	; 0x3f
 8000e60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e64:	2303      	movs	r3, #3
 8000e66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e70:	2308      	movs	r3, #8
 8000e72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e76:	2340      	movs	r3, #64	; 0x40
 8000e78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e7c:	2340      	movs	r3, #64	; 0x40
 8000e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e8a:	2340      	movs	r3, #64	; 0x40
 8000e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e90:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e94:	2104      	movs	r1, #4
 8000e96:	4618      	mov	r0, r3
 8000e98:	f001 ff10 	bl	8002cbc <HAL_RCC_ClockConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0x132>
  {
    Error_Handler();
 8000ea2:	f000 f8df 	bl	8001064 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	4a10      	ldr	r2, [pc, #64]	; (8000eec <SystemClock_Config+0x178>)
 8000eac:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8000eae:	f107 0308 	add.w	r3, r7, #8
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 fa7c 	bl	80033c4 <HAL_RCCEx_PeriphCLKConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0x162>
  {
    Error_Handler();
 8000ed2:	f000 f8c7 	bl	8001064 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000ed6:	f001 fad1 	bl	800247c <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000eda:	bf00      	nop
 8000edc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	58024800 	.word	0x58024800
 8000ee8:	58000400 	.word	0x58000400
 8000eec:	00040002 	.word	0x00040002

08000ef0 <resetDataBuffer>:
void reset_buffer(char *stringBuffer){
	for(uint16_t i = 1; i < 50; i++){
		stringBuffer[i] = '\0';
	}
}
void resetDataBuffer(uint8_t *dataBuffer){
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 1; i < 8192; i++){
 8000ef8:	2301      	movs	r3, #1
 8000efa:	81fb      	strh	r3, [r7, #14]
 8000efc:	e007      	b.n	8000f0e <resetDataBuffer+0x1e>
		dataBuffer[i] = 0;
 8000efe:	89fb      	ldrh	r3, [r7, #14]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4413      	add	r3, r2
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 1; i < 8192; i++){
 8000f08:	89fb      	ldrh	r3, [r7, #14]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	81fb      	strh	r3, [r7, #14]
 8000f0e:	89fb      	ldrh	r3, [r7, #14]
 8000f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f14:	d3f3      	bcc.n	8000efe <resetDataBuffer+0xe>
	}
}
 8000f16:	bf00      	nop
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <byte2float>:
void byte2float(uint8_t *rxDataBuffer, float *processedData, uint16_t arraySize){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f38:	4817      	ldr	r0, [pc, #92]	; (8000f98 <byte2float+0x74>)
 8000f3a:	f001 f8b5 	bl	80020a8 <HAL_GPIO_WritePin>
	for(int i = 0; i < arraySize*4; i = i + 4){
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	e00f      	b.n	8000f64 <byte2float+0x40>
		memcpy(&processedData[i / 4], &rxDataBuffer[i], 4);
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	da00      	bge.n	8000f4c <byte2float+0x28>
 8000f4a:	3303      	adds	r3, #3
 8000f4c:	109b      	asrs	r3, r3, #2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	4413      	add	r3, r2
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	68f9      	ldr	r1, [r7, #12]
 8000f58:	440a      	add	r2, r1
 8000f5a:	6812      	ldr	r2, [r2, #0]
 8000f5c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < arraySize*4; i = i + 4){
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3304      	adds	r3, #4
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	88fb      	ldrh	r3, [r7, #6]
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	dbea      	blt.n	8000f44 <byte2float+0x20>
	}
	processed = 1;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <byte2float+0x78>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
	received = 1;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <byte2float+0x7c>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
	// memcpy(&processedBuffer[0], &receiveBuffer[0], 4);
	HAL_Delay(500);
 8000f7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f7e:	f000 fb49 	bl	8001614 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f88:	4803      	ldr	r0, [pc, #12]	; (8000f98 <byte2float+0x74>)
 8000f8a:	f001 f88d 	bl	80020a8 <HAL_GPIO_WritePin>
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	58020400 	.word	0x58020400
 8000f9c:	20000211 	.word	0x20000211
 8000fa0:	20000210 	.word	0x20000210

08000fa4 <float2byte>:
void float2byte(uint8_t *txDataBuffer, float *processedData, uint16_t arraySize){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fb8:	4817      	ldr	r0, [pc, #92]	; (8001018 <float2byte+0x74>)
 8000fba:	f001 f875 	bl	80020a8 <HAL_GPIO_WritePin>
	for(int i = 0; i < arraySize*4; i = i + 4){
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	e00f      	b.n	8000fe4 <float2byte+0x40>
		memcpy(&txDataBuffer[i], &processedData[i / 4], 4);
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	441a      	add	r2, r3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	da00      	bge.n	8000fd2 <float2byte+0x2e>
 8000fd0:	3303      	adds	r3, #3
 8000fd2:	109b      	asrs	r3, r3, #2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	68b9      	ldr	r1, [r7, #8]
 8000fd8:	440b      	add	r3, r1
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < arraySize*4; i = i + 4){
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	dbea      	blt.n	8000fc4 <float2byte+0x20>
	}
	processed = 1;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <float2byte+0x78>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
	received = 1;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <float2byte+0x7c>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
	// memcpy(&processedBuffer[0], &receiveBuffer[0], 4);
	HAL_Delay(500);
 8000ffa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ffe:	f000 fb09 	bl	8001614 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <float2byte+0x74>)
 800100a:	f001 f84d 	bl	80020a8 <HAL_GPIO_WritePin>
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	58020400 	.word	0x58020400
 800101c:	20000211 	.word	0x20000211
 8001020:	20000210 	.word	0x20000210

08001024 <HAL_UART_TxCpltCallback>:
	}
	received = 0;
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart3)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <HAL_UART_TxCpltCallback+0x1c>)
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000212 	.word	0x20000212

08001044 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart3){
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <HAL_UART_RxCpltCallback+0x1c>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000212 	.word	0x20000212

08001064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_MspInit+0x30>)
 800107c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001080:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <HAL_MspInit+0x30>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_MspInit+0x30>)
 800108c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	58024400 	.word	0x58024400

080010a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <MemManage_Handler+0x4>

080010c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <UsageFault_Handler+0x4>

080010ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fc:	f000 fa6a 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <USART3_IRQHandler+0x10>)
 800110a:	f004 f92f 	bl	800536c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000626c 	.word	0x2000626c

08001118 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <_sbrk+0x50>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d102      	bne.n	800112e <_sbrk+0x16>
		heap_end = &end;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <_sbrk+0x50>)
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <_sbrk+0x54>)
 800112c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <_sbrk+0x50>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <_sbrk+0x50>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4413      	add	r3, r2
 800113c:	466a      	mov	r2, sp
 800113e:	4293      	cmp	r3, r2
 8001140:	d907      	bls.n	8001152 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001142:	f005 ffa3 	bl	800708c <__errno>
 8001146:	4602      	mov	r2, r0
 8001148:	230c      	movs	r3, #12
 800114a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	e006      	b.n	8001160 <_sbrk+0x48>
	}

	heap_end += incr;
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <_sbrk+0x50>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	4a03      	ldr	r2, [pc, #12]	; (8001168 <_sbrk+0x50>)
 800115c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800115e:	68fb      	ldr	r3, [r7, #12]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000214 	.word	0x20000214
 800116c:	20006708 	.word	0x20006708

08001170 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800118e:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <MX_TIM2_Init+0x98>)
 8001190:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001194:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <MX_TIM2_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_TIM2_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MX_TIM2_Init+0x98>)
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <MX_TIM2_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MX_TIM2_Init+0x98>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b6:	4814      	ldr	r0, [pc, #80]	; (8001208 <MX_TIM2_Init+0x98>)
 80011b8:	f003 fc04 	bl	80049c4 <HAL_TIM_Base_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80011c2:	f7ff ff4f 	bl	8001064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4619      	mov	r1, r3
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_TIM2_Init+0x98>)
 80011d4:	f003 fc7c 	bl	8004ad0 <HAL_TIM_ConfigClockSource>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011de:	f7ff ff41 	bl	8001064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <MX_TIM2_Init+0x98>)
 80011f0:	f003 fe76 	bl	8004ee0 <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011fa:	f7ff ff33 	bl	8001064 <Error_Handler>
  }

}
 80011fe:	bf00      	nop
 8001200:	3720      	adds	r7, #32
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20006220 	.word	0x20006220

0800120c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800121c:	d10e      	bne.n	800123c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_TIM_Base_MspInit+0x3c>)
 8001220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001224:	4a08      	ldr	r2, [pc, #32]	; (8001248 <HAL_TIM_Base_MspInit+0x3c>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_TIM_Base_MspInit+0x3c>)
 8001230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	58024400 	.word	0x58024400

0800124c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001250:	4b22      	ldr	r3, [pc, #136]	; (80012dc <MX_USART3_UART_Init+0x90>)
 8001252:	4a23      	ldr	r2, [pc, #140]	; (80012e0 <MX_USART3_UART_Init+0x94>)
 8001254:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001256:	4b21      	ldr	r3, [pc, #132]	; (80012dc <MX_USART3_UART_Init+0x90>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <MX_USART3_UART_Init+0x90>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <MX_USART3_UART_Init+0x90>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800126a:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <MX_USART3_UART_Init+0x90>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_USART3_UART_Init+0x90>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_USART3_UART_Init+0x90>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_USART3_UART_Init+0x90>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <MX_USART3_UART_Init+0x90>)
 8001284:	2200      	movs	r2, #0
 8001286:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_USART3_UART_Init+0x90>)
 800128a:	2200      	movs	r2, #0
 800128c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <MX_USART3_UART_Init+0x90>)
 8001290:	2200      	movs	r2, #0
 8001292:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001294:	4811      	ldr	r0, [pc, #68]	; (80012dc <MX_USART3_UART_Init+0x90>)
 8001296:	f003 feab 	bl	8004ff0 <HAL_UART_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012a0:	f7ff fee0 	bl	8001064 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012a4:	2100      	movs	r1, #0
 80012a6:	480d      	ldr	r0, [pc, #52]	; (80012dc <MX_USART3_UART_Init+0x90>)
 80012a8:	f005 fb61 	bl	800696e <HAL_UARTEx_SetTxFifoThreshold>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012b2:	f7ff fed7 	bl	8001064 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012b6:	2100      	movs	r1, #0
 80012b8:	4808      	ldr	r0, [pc, #32]	; (80012dc <MX_USART3_UART_Init+0x90>)
 80012ba:	f005 fb96 	bl	80069ea <HAL_UARTEx_SetRxFifoThreshold>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80012c4:	f7ff fece 	bl	8001064 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012c8:	4804      	ldr	r0, [pc, #16]	; (80012dc <MX_USART3_UART_Init+0x90>)
 80012ca:	f005 fb17 	bl	80068fc <HAL_UARTEx_DisableFifoMode>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80012d4:	f7ff fec6 	bl	8001064 <Error_Handler>
  }

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2000626c 	.word	0x2000626c
 80012e0:	40004800 	.word	0x40004800

080012e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a1e      	ldr	r2, [pc, #120]	; (800137c <HAL_UART_MspInit+0x98>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d136      	bne.n	8001374 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001306:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <HAL_UART_MspInit+0x9c>)
 8001308:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800130c:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <HAL_UART_MspInit+0x9c>)
 800130e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001312:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <HAL_UART_MspInit+0x9c>)
 8001318:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800131c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_UART_MspInit+0x9c>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132a:	4a15      	ldr	r2, [pc, #84]	; (8001380 <HAL_UART_MspInit+0x9c>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_UART_MspInit+0x9c>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001342:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001354:	2307      	movs	r3, #7
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	4809      	ldr	r0, [pc, #36]	; (8001384 <HAL_UART_MspInit+0xa0>)
 8001360:	f000 fcda 	bl	8001d18 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	2100      	movs	r1, #0
 8001368:	2027      	movs	r0, #39	; 0x27
 800136a:	f000 fa5c 	bl	8001826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800136e:	2027      	movs	r0, #39	; 0x27
 8001370:	f000 fa73 	bl	800185a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001374:	bf00      	nop
 8001376:	3728      	adds	r7, #40	; 0x28
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40004800 	.word	0x40004800
 8001380:	58024400 	.word	0x58024400
 8001384:	58020c00 	.word	0x58020c00

08001388 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800138e:	4a16      	ldr	r2, [pc, #88]	; (80013e8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001390:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001394:	2209      	movs	r2, #9
 8001396:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800139a:	2202      	movs	r2, #2
 800139c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013a6:	2202      	movs	r2, #2
 80013a8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013be:	2201      	movs	r2, #1
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013d0:	f000 feb2 	bl	8002138 <HAL_PCD_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80013da:	f7ff fe43 	bl	8001064 <Error_Handler>
  }

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200062f8 	.word	0x200062f8
 80013e8:	40080000 	.word	0x40080000

080013ec <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a21      	ldr	r2, [pc, #132]	; (8001490 <HAL_PCD_MspInit+0xa4>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d13b      	bne.n	8001486 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <HAL_PCD_MspInit+0xa8>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001414:	4a1f      	ldr	r2, [pc, #124]	; (8001494 <HAL_PCD_MspInit+0xa8>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_PCD_MspInit+0xa8>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800142c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800143e:	230a      	movs	r3, #10
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	4813      	ldr	r0, [pc, #76]	; (8001498 <HAL_PCD_MspInit+0xac>)
 800144a:	f000 fc65 	bl	8001d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800144e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4619      	mov	r1, r3
 8001462:	480d      	ldr	r0, [pc, #52]	; (8001498 <HAL_PCD_MspInit+0xac>)
 8001464:	f000 fc58 	bl	8001d18 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_PCD_MspInit+0xa8>)
 800146a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800146e:	4a09      	ldr	r2, [pc, #36]	; (8001494 <HAL_PCD_MspInit+0xa8>)
 8001470:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001474:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_PCD_MspInit+0xa8>)
 800147a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800147e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001486:	bf00      	nop
 8001488:	3728      	adds	r7, #40	; 0x28
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40080000 	.word	0x40080000
 8001494:	58024400 	.word	0x58024400
 8001498:	58020000 	.word	0x58020000

0800149c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800149c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014a2:	e003      	b.n	80014ac <LoopCopyDataInit>

080014a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014aa:	3104      	adds	r1, #4

080014ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014ac:	480b      	ldr	r0, [pc, #44]	; (80014dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014b4:	d3f6      	bcc.n	80014a4 <CopyDataInit>
  ldr  r2, =_sbss
 80014b6:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014b8:	e002      	b.n	80014c0 <LoopFillZerobss>

080014ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014bc:	f842 3b04 	str.w	r3, [r2], #4

080014c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014c4:	d3f9      	bcc.n	80014ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014c6:	f7ff f88f 	bl	80005e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ca:	f005 fde5 	bl	8007098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ce:	f7ff fadb 	bl	8000a88 <main>
  bx  lr    
 80014d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80014d8:	08009170 	.word	0x08009170
  ldr  r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014e0:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 80014e4:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 80014e8:	20006708 	.word	0x20006708

080014ec <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ec:	e7fe      	b.n	80014ec <ADC3_IRQHandler>
	...

080014f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f6:	2003      	movs	r0, #3
 80014f8:	f000 f98a 	bl	8001810 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014fc:	f001 fd94 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8001500:	4601      	mov	r1, r0
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_Init+0x68>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	f003 030f 	and.w	r3, r3, #15
 800150c:	4a13      	ldr	r2, [pc, #76]	; (800155c <HAL_Init+0x6c>)
 800150e:	5cd3      	ldrb	r3, [r2, r3]
 8001510:	f003 031f 	and.w	r3, r3, #31
 8001514:	fa21 f303 	lsr.w	r3, r1, r3
 8001518:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <HAL_Init+0x68>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	4a0e      	ldr	r2, [pc, #56]	; (800155c <HAL_Init+0x6c>)
 8001524:	5cd3      	ldrb	r3, [r2, r3]
 8001526:	f003 031f 	and.w	r3, r3, #31
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	fa22 f303 	lsr.w	r3, r2, r3
 8001530:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <HAL_Init+0x70>)
 8001532:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001534:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <HAL_Init+0x74>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800153a:	2000      	movs	r0, #0
 800153c:	f000 f814 	bl	8001568 <HAL_InitTick>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e002      	b.n	8001550 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800154a:	f7ff fd93 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	58024400 	.word	0x58024400
 800155c:	08008ed0 	.word	0x08008ed0
 8001560:	20000004 	.word	0x20000004
 8001564:	20000000 	.word	0x20000000

08001568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HAL_InitTick+0x60>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e021      	b.n	80015c0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <HAL_InitTick+0x64>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_InitTick+0x60>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158a:	fbb3 f3f1 	udiv	r3, r3, r1
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f96f 	bl	8001876 <HAL_SYSTICK_Config>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e00e      	b.n	80015c0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	d80a      	bhi.n	80015be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a8:	2200      	movs	r2, #0
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f000 f939 	bl	8001826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b4:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <HAL_InitTick+0x68>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000020 	.word	0x20000020
 80015cc:	20000000 	.word	0x20000000
 80015d0:	2000001c 	.word	0x2000001c

080015d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_IncTick+0x20>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_IncTick+0x24>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <HAL_IncTick+0x24>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000020 	.word	0x20000020
 80015f8:	20006700 	.word	0x20006700

080015fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <HAL_GetTick+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20006700 	.word	0x20006700

08001614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff ffee 	bl	80015fc <HAL_GetTick>
 8001620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162c:	d005      	beq.n	800163a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_Delay+0x40>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4413      	add	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800163a:	bf00      	nop
 800163c:	f7ff ffde 	bl	80015fc <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	429a      	cmp	r2, r3
 800164a:	d8f7      	bhi.n	800163c <HAL_Delay+0x28>
  {
  }
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000020 	.word	0x20000020

08001658 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <HAL_GetREVID+0x14>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	0c1b      	lsrs	r3, r3, #16
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	5c001000 	.word	0x5c001000

08001670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800168c:	4013      	ands	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	4313      	orrs	r3, r2
 800169c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169e:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <__NVIC_SetPriorityGrouping+0x40>)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	60d3      	str	r3, [r2, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00
 80016b4:	05fa0000 	.word	0x05fa0000

080016b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <__NVIC_GetPriorityGrouping+0x18>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	f003 0307 	and.w	r3, r3, #7
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	db0b      	blt.n	80016fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	4907      	ldr	r1, [pc, #28]	; (800170c <__NVIC_EnableIRQ+0x38>)
 80016ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	2001      	movs	r0, #1
 80016f6:	fa00 f202 	lsl.w	r2, r0, r2
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000e100 	.word	0xe000e100

08001710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800171c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0a      	blt.n	800173a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	490c      	ldr	r1, [pc, #48]	; (800175c <__NVIC_SetPriority+0x4c>)
 800172a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001738:	e00a      	b.n	8001750 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4908      	ldr	r1, [pc, #32]	; (8001760 <__NVIC_SetPriority+0x50>)
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	3b04      	subs	r3, #4
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	440b      	add	r3, r1
 800174e:	761a      	strb	r2, [r3, #24]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f1c3 0307 	rsb	r3, r3, #7
 800177e:	2b04      	cmp	r3, #4
 8001780:	bf28      	it	cs
 8001782:	2304      	movcs	r3, #4
 8001784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	2b06      	cmp	r3, #6
 800178c:	d902      	bls.n	8001794 <NVIC_EncodePriority+0x30>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3b03      	subs	r3, #3
 8001792:	e000      	b.n	8001796 <NVIC_EncodePriority+0x32>
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	43d9      	mvns	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	4313      	orrs	r3, r2
         );
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017dc:	d301      	bcc.n	80017e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017de:	2301      	movs	r3, #1
 80017e0:	e00f      	b.n	8001802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <SysTick_Config+0x40>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ea:	210f      	movs	r1, #15
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f7ff ff8e 	bl	8001710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <SysTick_Config+0x40>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fa:	4b04      	ldr	r3, [pc, #16]	; (800180c <SysTick_Config+0x40>)
 80017fc:	2207      	movs	r2, #7
 80017fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	e000e010 	.word	0xe000e010

08001810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff29 	bl	8001670 <__NVIC_SetPriorityGrouping>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001834:	f7ff ff40 	bl	80016b8 <__NVIC_GetPriorityGrouping>
 8001838:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	6978      	ldr	r0, [r7, #20]
 8001840:	f7ff ff90 	bl	8001764 <NVIC_EncodePriority>
 8001844:	4602      	mov	r2, r0
 8001846:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff5f 	bl	8001710 <__NVIC_SetPriority>
}
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff33 	bl	80016d4 <__NVIC_EnableIRQ>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ffa4 	bl	80017cc <SysTick_Config>
 8001884:	4603      	mov	r3, r0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e205      	b.n	8001cae <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d004      	beq.n	80018b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2280      	movs	r2, #128	; 0x80
 80018b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e1fa      	b.n	8001cae <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a8c      	ldr	r2, [pc, #560]	; (8001af0 <HAL_DMA_Abort_IT+0x260>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d04a      	beq.n	8001958 <HAL_DMA_Abort_IT+0xc8>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a8b      	ldr	r2, [pc, #556]	; (8001af4 <HAL_DMA_Abort_IT+0x264>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d045      	beq.n	8001958 <HAL_DMA_Abort_IT+0xc8>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a89      	ldr	r2, [pc, #548]	; (8001af8 <HAL_DMA_Abort_IT+0x268>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d040      	beq.n	8001958 <HAL_DMA_Abort_IT+0xc8>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a88      	ldr	r2, [pc, #544]	; (8001afc <HAL_DMA_Abort_IT+0x26c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d03b      	beq.n	8001958 <HAL_DMA_Abort_IT+0xc8>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a86      	ldr	r2, [pc, #536]	; (8001b00 <HAL_DMA_Abort_IT+0x270>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d036      	beq.n	8001958 <HAL_DMA_Abort_IT+0xc8>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a85      	ldr	r2, [pc, #532]	; (8001b04 <HAL_DMA_Abort_IT+0x274>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d031      	beq.n	8001958 <HAL_DMA_Abort_IT+0xc8>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a83      	ldr	r2, [pc, #524]	; (8001b08 <HAL_DMA_Abort_IT+0x278>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d02c      	beq.n	8001958 <HAL_DMA_Abort_IT+0xc8>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a82      	ldr	r2, [pc, #520]	; (8001b0c <HAL_DMA_Abort_IT+0x27c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d027      	beq.n	8001958 <HAL_DMA_Abort_IT+0xc8>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a80      	ldr	r2, [pc, #512]	; (8001b10 <HAL_DMA_Abort_IT+0x280>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d022      	beq.n	8001958 <HAL_DMA_Abort_IT+0xc8>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a7f      	ldr	r2, [pc, #508]	; (8001b14 <HAL_DMA_Abort_IT+0x284>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d01d      	beq.n	8001958 <HAL_DMA_Abort_IT+0xc8>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a7d      	ldr	r2, [pc, #500]	; (8001b18 <HAL_DMA_Abort_IT+0x288>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d018      	beq.n	8001958 <HAL_DMA_Abort_IT+0xc8>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a7c      	ldr	r2, [pc, #496]	; (8001b1c <HAL_DMA_Abort_IT+0x28c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d013      	beq.n	8001958 <HAL_DMA_Abort_IT+0xc8>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a7a      	ldr	r2, [pc, #488]	; (8001b20 <HAL_DMA_Abort_IT+0x290>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d00e      	beq.n	8001958 <HAL_DMA_Abort_IT+0xc8>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a79      	ldr	r2, [pc, #484]	; (8001b24 <HAL_DMA_Abort_IT+0x294>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d009      	beq.n	8001958 <HAL_DMA_Abort_IT+0xc8>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a77      	ldr	r2, [pc, #476]	; (8001b28 <HAL_DMA_Abort_IT+0x298>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d004      	beq.n	8001958 <HAL_DMA_Abort_IT+0xc8>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a76      	ldr	r2, [pc, #472]	; (8001b2c <HAL_DMA_Abort_IT+0x29c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d101      	bne.n	800195c <HAL_DMA_Abort_IT+0xcc>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <HAL_DMA_Abort_IT+0xce>
 800195c:	2300      	movs	r3, #0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d065      	beq.n	8001a2e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2204      	movs	r2, #4
 8001966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a60      	ldr	r2, [pc, #384]	; (8001af0 <HAL_DMA_Abort_IT+0x260>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d04a      	beq.n	8001a0a <HAL_DMA_Abort_IT+0x17a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a5e      	ldr	r2, [pc, #376]	; (8001af4 <HAL_DMA_Abort_IT+0x264>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d045      	beq.n	8001a0a <HAL_DMA_Abort_IT+0x17a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a5d      	ldr	r2, [pc, #372]	; (8001af8 <HAL_DMA_Abort_IT+0x268>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d040      	beq.n	8001a0a <HAL_DMA_Abort_IT+0x17a>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a5b      	ldr	r2, [pc, #364]	; (8001afc <HAL_DMA_Abort_IT+0x26c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d03b      	beq.n	8001a0a <HAL_DMA_Abort_IT+0x17a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a5a      	ldr	r2, [pc, #360]	; (8001b00 <HAL_DMA_Abort_IT+0x270>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d036      	beq.n	8001a0a <HAL_DMA_Abort_IT+0x17a>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a58      	ldr	r2, [pc, #352]	; (8001b04 <HAL_DMA_Abort_IT+0x274>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d031      	beq.n	8001a0a <HAL_DMA_Abort_IT+0x17a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a57      	ldr	r2, [pc, #348]	; (8001b08 <HAL_DMA_Abort_IT+0x278>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d02c      	beq.n	8001a0a <HAL_DMA_Abort_IT+0x17a>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a55      	ldr	r2, [pc, #340]	; (8001b0c <HAL_DMA_Abort_IT+0x27c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d027      	beq.n	8001a0a <HAL_DMA_Abort_IT+0x17a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a54      	ldr	r2, [pc, #336]	; (8001b10 <HAL_DMA_Abort_IT+0x280>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d022      	beq.n	8001a0a <HAL_DMA_Abort_IT+0x17a>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a52      	ldr	r2, [pc, #328]	; (8001b14 <HAL_DMA_Abort_IT+0x284>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d01d      	beq.n	8001a0a <HAL_DMA_Abort_IT+0x17a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a51      	ldr	r2, [pc, #324]	; (8001b18 <HAL_DMA_Abort_IT+0x288>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d018      	beq.n	8001a0a <HAL_DMA_Abort_IT+0x17a>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a4f      	ldr	r2, [pc, #316]	; (8001b1c <HAL_DMA_Abort_IT+0x28c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d013      	beq.n	8001a0a <HAL_DMA_Abort_IT+0x17a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a4e      	ldr	r2, [pc, #312]	; (8001b20 <HAL_DMA_Abort_IT+0x290>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d00e      	beq.n	8001a0a <HAL_DMA_Abort_IT+0x17a>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a4c      	ldr	r2, [pc, #304]	; (8001b24 <HAL_DMA_Abort_IT+0x294>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d009      	beq.n	8001a0a <HAL_DMA_Abort_IT+0x17a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a4b      	ldr	r2, [pc, #300]	; (8001b28 <HAL_DMA_Abort_IT+0x298>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d004      	beq.n	8001a0a <HAL_DMA_Abort_IT+0x17a>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a49      	ldr	r2, [pc, #292]	; (8001b2c <HAL_DMA_Abort_IT+0x29c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d108      	bne.n	8001a1c <HAL_DMA_Abort_IT+0x18c>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0201 	bic.w	r2, r2, #1
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	e147      	b.n	8001cac <HAL_DMA_Abort_IT+0x41c>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0201 	bic.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	e13e      	b.n	8001cac <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 020e 	bic.w	r2, r2, #14
 8001a3c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a2b      	ldr	r2, [pc, #172]	; (8001af0 <HAL_DMA_Abort_IT+0x260>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d04a      	beq.n	8001ade <HAL_DMA_Abort_IT+0x24e>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a29      	ldr	r2, [pc, #164]	; (8001af4 <HAL_DMA_Abort_IT+0x264>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d045      	beq.n	8001ade <HAL_DMA_Abort_IT+0x24e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a28      	ldr	r2, [pc, #160]	; (8001af8 <HAL_DMA_Abort_IT+0x268>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d040      	beq.n	8001ade <HAL_DMA_Abort_IT+0x24e>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a26      	ldr	r2, [pc, #152]	; (8001afc <HAL_DMA_Abort_IT+0x26c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d03b      	beq.n	8001ade <HAL_DMA_Abort_IT+0x24e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a25      	ldr	r2, [pc, #148]	; (8001b00 <HAL_DMA_Abort_IT+0x270>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d036      	beq.n	8001ade <HAL_DMA_Abort_IT+0x24e>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a23      	ldr	r2, [pc, #140]	; (8001b04 <HAL_DMA_Abort_IT+0x274>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d031      	beq.n	8001ade <HAL_DMA_Abort_IT+0x24e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a22      	ldr	r2, [pc, #136]	; (8001b08 <HAL_DMA_Abort_IT+0x278>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d02c      	beq.n	8001ade <HAL_DMA_Abort_IT+0x24e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a20      	ldr	r2, [pc, #128]	; (8001b0c <HAL_DMA_Abort_IT+0x27c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d027      	beq.n	8001ade <HAL_DMA_Abort_IT+0x24e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a1f      	ldr	r2, [pc, #124]	; (8001b10 <HAL_DMA_Abort_IT+0x280>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d022      	beq.n	8001ade <HAL_DMA_Abort_IT+0x24e>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a1d      	ldr	r2, [pc, #116]	; (8001b14 <HAL_DMA_Abort_IT+0x284>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d01d      	beq.n	8001ade <HAL_DMA_Abort_IT+0x24e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a1c      	ldr	r2, [pc, #112]	; (8001b18 <HAL_DMA_Abort_IT+0x288>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d018      	beq.n	8001ade <HAL_DMA_Abort_IT+0x24e>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a1a      	ldr	r2, [pc, #104]	; (8001b1c <HAL_DMA_Abort_IT+0x28c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d013      	beq.n	8001ade <HAL_DMA_Abort_IT+0x24e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a19      	ldr	r2, [pc, #100]	; (8001b20 <HAL_DMA_Abort_IT+0x290>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d00e      	beq.n	8001ade <HAL_DMA_Abort_IT+0x24e>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a17      	ldr	r2, [pc, #92]	; (8001b24 <HAL_DMA_Abort_IT+0x294>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d009      	beq.n	8001ade <HAL_DMA_Abort_IT+0x24e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a16      	ldr	r2, [pc, #88]	; (8001b28 <HAL_DMA_Abort_IT+0x298>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d004      	beq.n	8001ade <HAL_DMA_Abort_IT+0x24e>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <HAL_DMA_Abort_IT+0x29c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d128      	bne.n	8001b30 <HAL_DMA_Abort_IT+0x2a0>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0201 	bic.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e027      	b.n	8001b40 <HAL_DMA_Abort_IT+0x2b0>
 8001af0:	40020010 	.word	0x40020010
 8001af4:	40020028 	.word	0x40020028
 8001af8:	40020040 	.word	0x40020040
 8001afc:	40020058 	.word	0x40020058
 8001b00:	40020070 	.word	0x40020070
 8001b04:	40020088 	.word	0x40020088
 8001b08:	400200a0 	.word	0x400200a0
 8001b0c:	400200b8 	.word	0x400200b8
 8001b10:	40020410 	.word	0x40020410
 8001b14:	40020428 	.word	0x40020428
 8001b18:	40020440 	.word	0x40020440
 8001b1c:	40020458 	.word	0x40020458
 8001b20:	40020470 	.word	0x40020470
 8001b24:	40020488 	.word	0x40020488
 8001b28:	400204a0 	.word	0x400204a0
 8001b2c:	400204b8 	.word	0x400204b8
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0201 	bic.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a5c      	ldr	r2, [pc, #368]	; (8001cb8 <HAL_DMA_Abort_IT+0x428>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d072      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a5b      	ldr	r2, [pc, #364]	; (8001cbc <HAL_DMA_Abort_IT+0x42c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d06d      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a59      	ldr	r2, [pc, #356]	; (8001cc0 <HAL_DMA_Abort_IT+0x430>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d068      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a58      	ldr	r2, [pc, #352]	; (8001cc4 <HAL_DMA_Abort_IT+0x434>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d063      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a56      	ldr	r2, [pc, #344]	; (8001cc8 <HAL_DMA_Abort_IT+0x438>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d05e      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a55      	ldr	r2, [pc, #340]	; (8001ccc <HAL_DMA_Abort_IT+0x43c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d059      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a53      	ldr	r2, [pc, #332]	; (8001cd0 <HAL_DMA_Abort_IT+0x440>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d054      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a52      	ldr	r2, [pc, #328]	; (8001cd4 <HAL_DMA_Abort_IT+0x444>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d04f      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a50      	ldr	r2, [pc, #320]	; (8001cd8 <HAL_DMA_Abort_IT+0x448>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d04a      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a4f      	ldr	r2, [pc, #316]	; (8001cdc <HAL_DMA_Abort_IT+0x44c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d045      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a4d      	ldr	r2, [pc, #308]	; (8001ce0 <HAL_DMA_Abort_IT+0x450>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d040      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a4c      	ldr	r2, [pc, #304]	; (8001ce4 <HAL_DMA_Abort_IT+0x454>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d03b      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a4a      	ldr	r2, [pc, #296]	; (8001ce8 <HAL_DMA_Abort_IT+0x458>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d036      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a49      	ldr	r2, [pc, #292]	; (8001cec <HAL_DMA_Abort_IT+0x45c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d031      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a47      	ldr	r2, [pc, #284]	; (8001cf0 <HAL_DMA_Abort_IT+0x460>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d02c      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a46      	ldr	r2, [pc, #280]	; (8001cf4 <HAL_DMA_Abort_IT+0x464>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d027      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a44      	ldr	r2, [pc, #272]	; (8001cf8 <HAL_DMA_Abort_IT+0x468>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d022      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a43      	ldr	r2, [pc, #268]	; (8001cfc <HAL_DMA_Abort_IT+0x46c>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d01d      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a41      	ldr	r2, [pc, #260]	; (8001d00 <HAL_DMA_Abort_IT+0x470>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d018      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a40      	ldr	r2, [pc, #256]	; (8001d04 <HAL_DMA_Abort_IT+0x474>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d013      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a3e      	ldr	r2, [pc, #248]	; (8001d08 <HAL_DMA_Abort_IT+0x478>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00e      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a3d      	ldr	r2, [pc, #244]	; (8001d0c <HAL_DMA_Abort_IT+0x47c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d009      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a3b      	ldr	r2, [pc, #236]	; (8001d10 <HAL_DMA_Abort_IT+0x480>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d004      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x3a0>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a3a      	ldr	r2, [pc, #232]	; (8001d14 <HAL_DMA_Abort_IT+0x484>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d101      	bne.n	8001c34 <HAL_DMA_Abort_IT+0x3a4>
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <HAL_DMA_Abort_IT+0x3a6>
 8001c34:	2300      	movs	r3, #0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d028      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c48:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c54:	f003 031f 	and.w	r3, r3, #31
 8001c58:	2201      	movs	r2, #1
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001c68:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00c      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c80:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001c8a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40020010 	.word	0x40020010
 8001cbc:	40020028 	.word	0x40020028
 8001cc0:	40020040 	.word	0x40020040
 8001cc4:	40020058 	.word	0x40020058
 8001cc8:	40020070 	.word	0x40020070
 8001ccc:	40020088 	.word	0x40020088
 8001cd0:	400200a0 	.word	0x400200a0
 8001cd4:	400200b8 	.word	0x400200b8
 8001cd8:	40020410 	.word	0x40020410
 8001cdc:	40020428 	.word	0x40020428
 8001ce0:	40020440 	.word	0x40020440
 8001ce4:	40020458 	.word	0x40020458
 8001ce8:	40020470 	.word	0x40020470
 8001cec:	40020488 	.word	0x40020488
 8001cf0:	400204a0 	.word	0x400204a0
 8001cf4:	400204b8 	.word	0x400204b8
 8001cf8:	58025408 	.word	0x58025408
 8001cfc:	5802541c 	.word	0x5802541c
 8001d00:	58025430 	.word	0x58025430
 8001d04:	58025444 	.word	0x58025444
 8001d08:	58025458 	.word	0x58025458
 8001d0c:	5802546c 	.word	0x5802546c
 8001d10:	58025480 	.word	0x58025480
 8001d14:	58025494 	.word	0x58025494

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d26:	4b89      	ldr	r3, [pc, #548]	; (8001f4c <HAL_GPIO_Init+0x234>)
 8001d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d2a:	e194      	b.n	8002056 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2101      	movs	r1, #1
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 8186 	beq.w	8002050 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d00b      	beq.n	8001d64 <HAL_GPIO_Init+0x4c>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d007      	beq.n	8001d64 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d58:	2b11      	cmp	r3, #17
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b12      	cmp	r3, #18
 8001d62:	d130      	bne.n	8001dc6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	2203      	movs	r2, #3
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	f003 0201 	and.w	r2, r3, #1
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0xee>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b12      	cmp	r3, #18
 8001e04:	d123      	bne.n	8001e4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	08da      	lsrs	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3208      	adds	r2, #8
 8001e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	08da      	lsrs	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3208      	adds	r2, #8
 8001e48:	69b9      	ldr	r1, [r7, #24]
 8001e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	2203      	movs	r2, #3
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0203 	and.w	r2, r3, #3
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 80e0 	beq.w	8002050 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e90:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <HAL_GPIO_Init+0x238>)
 8001e92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e96:	4a2e      	ldr	r2, [pc, #184]	; (8001f50 <HAL_GPIO_Init+0x238>)
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ea0:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <HAL_GPIO_Init+0x238>)
 8001ea2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eae:	4a29      	ldr	r2, [pc, #164]	; (8001f54 <HAL_GPIO_Init+0x23c>)
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a20      	ldr	r2, [pc, #128]	; (8001f58 <HAL_GPIO_Init+0x240>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d052      	beq.n	8001f80 <HAL_GPIO_Init+0x268>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a1f      	ldr	r2, [pc, #124]	; (8001f5c <HAL_GPIO_Init+0x244>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d031      	beq.n	8001f46 <HAL_GPIO_Init+0x22e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a1e      	ldr	r2, [pc, #120]	; (8001f60 <HAL_GPIO_Init+0x248>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d02b      	beq.n	8001f42 <HAL_GPIO_Init+0x22a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a1d      	ldr	r2, [pc, #116]	; (8001f64 <HAL_GPIO_Init+0x24c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d025      	beq.n	8001f3e <HAL_GPIO_Init+0x226>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a1c      	ldr	r2, [pc, #112]	; (8001f68 <HAL_GPIO_Init+0x250>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d01f      	beq.n	8001f3a <HAL_GPIO_Init+0x222>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <HAL_GPIO_Init+0x254>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d019      	beq.n	8001f36 <HAL_GPIO_Init+0x21e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a1a      	ldr	r2, [pc, #104]	; (8001f70 <HAL_GPIO_Init+0x258>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d013      	beq.n	8001f32 <HAL_GPIO_Init+0x21a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <HAL_GPIO_Init+0x25c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00d      	beq.n	8001f2e <HAL_GPIO_Init+0x216>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a18      	ldr	r2, [pc, #96]	; (8001f78 <HAL_GPIO_Init+0x260>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d007      	beq.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a17      	ldr	r2, [pc, #92]	; (8001f7c <HAL_GPIO_Init+0x264>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <HAL_GPIO_Init+0x20e>
 8001f22:	2309      	movs	r3, #9
 8001f24:	e02d      	b.n	8001f82 <HAL_GPIO_Init+0x26a>
 8001f26:	230a      	movs	r3, #10
 8001f28:	e02b      	b.n	8001f82 <HAL_GPIO_Init+0x26a>
 8001f2a:	2308      	movs	r3, #8
 8001f2c:	e029      	b.n	8001f82 <HAL_GPIO_Init+0x26a>
 8001f2e:	2307      	movs	r3, #7
 8001f30:	e027      	b.n	8001f82 <HAL_GPIO_Init+0x26a>
 8001f32:	2306      	movs	r3, #6
 8001f34:	e025      	b.n	8001f82 <HAL_GPIO_Init+0x26a>
 8001f36:	2305      	movs	r3, #5
 8001f38:	e023      	b.n	8001f82 <HAL_GPIO_Init+0x26a>
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	e021      	b.n	8001f82 <HAL_GPIO_Init+0x26a>
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e01f      	b.n	8001f82 <HAL_GPIO_Init+0x26a>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e01d      	b.n	8001f82 <HAL_GPIO_Init+0x26a>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e01b      	b.n	8001f82 <HAL_GPIO_Init+0x26a>
 8001f4a:	bf00      	nop
 8001f4c:	58000080 	.word	0x58000080
 8001f50:	58024400 	.word	0x58024400
 8001f54:	58000400 	.word	0x58000400
 8001f58:	58020000 	.word	0x58020000
 8001f5c:	58020400 	.word	0x58020400
 8001f60:	58020800 	.word	0x58020800
 8001f64:	58020c00 	.word	0x58020c00
 8001f68:	58021000 	.word	0x58021000
 8001f6c:	58021400 	.word	0x58021400
 8001f70:	58021800 	.word	0x58021800
 8001f74:	58021c00 	.word	0x58021c00
 8001f78:	58022000 	.word	0x58022000
 8001f7c:	58022400 	.word	0x58022400
 8001f80:	2300      	movs	r3, #0
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	f002 0203 	and.w	r2, r2, #3
 8001f88:	0092      	lsls	r2, r2, #2
 8001f8a:	4093      	lsls	r3, r2
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f92:	4938      	ldr	r1, [pc, #224]	; (8002074 <HAL_GPIO_Init+0x35c>)
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	3302      	adds	r3, #2
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800201a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	3301      	adds	r3, #1
 8002054:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	f47f ae63 	bne.w	8001d2c <HAL_GPIO_Init+0x14>
  }
}
 8002066:	bf00      	nop
 8002068:	3724      	adds	r7, #36	; 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	58000400 	.word	0x58000400

08002078 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	887b      	ldrh	r3, [r7, #2]
 800208a:	4013      	ands	r3, r2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d002      	beq.n	8002096 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
 8002094:	e001      	b.n	800209a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002096:	2300      	movs	r3, #0
 8002098:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800209a:	7bfb      	ldrb	r3, [r7, #15]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]
 80020b4:	4613      	mov	r3, r2
 80020b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020b8:	787b      	ldrb	r3, [r7, #1]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020c4:	e003      	b.n	80020ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020c6:	887b      	ldrh	r3, [r7, #2]
 80020c8:	041a      	lsls	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	619a      	str	r2, [r3, #24]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80020e4:	4a08      	ldr	r2, [pc, #32]	; (8002108 <HAL_HSEM_FastTake+0x2c>)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3320      	adds	r3, #32
 80020ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ee:	4a07      	ldr	r2, [pc, #28]	; (800210c <HAL_HSEM_FastTake+0x30>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d101      	bne.n	80020f8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	e000      	b.n	80020fa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	58026400 	.word	0x58026400
 800210c:	80000300 	.word	0x80000300

08002110 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800211a:	4906      	ldr	r1, [pc, #24]	; (8002134 <HAL_HSEM_Release+0x24>)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	58026400 	.word	0x58026400

08002138 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800213a:	b08f      	sub	sp, #60	; 0x3c
 800213c:	af0a      	add	r7, sp, #40	; 0x28
 800213e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e116      	b.n	8002378 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d106      	bne.n	800216a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff f941 	bl	80013ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2203      	movs	r2, #3
 800216e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f004 fd37 	bl	8006bfc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	687e      	ldr	r6, [r7, #4]
 8002196:	466d      	mov	r5, sp
 8002198:	f106 0410 	add.w	r4, r6, #16
 800219c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800219e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80021ac:	1d33      	adds	r3, r6, #4
 80021ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021b0:	6838      	ldr	r0, [r7, #0]
 80021b2:	f004 fcc1 	bl	8006b38 <USB_CoreInit>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0d7      	b.n	8002378 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f004 fd25 	bl	8006c1e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d4:	2300      	movs	r3, #0
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	e04a      	b.n	8002270 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	1a9b      	subs	r3, r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	333d      	adds	r3, #61	; 0x3d
 80021ea:	2201      	movs	r2, #1
 80021ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021ee:	7bfa      	ldrb	r2, [r7, #15]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	333c      	adds	r3, #60	; 0x3c
 80021fe:	7bfa      	ldrb	r2, [r7, #15]
 8002200:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002202:	7bfa      	ldrb	r2, [r7, #15]
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	b298      	uxth	r0, r3
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	1a9b      	subs	r3, r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	3342      	adds	r3, #66	; 0x42
 8002216:	4602      	mov	r2, r0
 8002218:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	1a9b      	subs	r3, r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	333f      	adds	r3, #63	; 0x3f
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800222e:	7bfa      	ldrb	r2, [r7, #15]
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	1a9b      	subs	r3, r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	3344      	adds	r3, #68	; 0x44
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	3348      	adds	r3, #72	; 0x48
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	3350      	adds	r3, #80	; 0x50
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	3301      	adds	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	429a      	cmp	r2, r3
 8002278:	d3af      	bcc.n	80021da <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800227a:	2300      	movs	r3, #0
 800227c:	73fb      	strb	r3, [r7, #15]
 800227e:	e044      	b.n	800230a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022d8:	7bfa      	ldrb	r2, [r7, #15]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022ee:	7bfa      	ldrb	r2, [r7, #15]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	3301      	adds	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	d3b5      	bcc.n	8002280 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	687e      	ldr	r6, [r7, #4]
 800231c:	466d      	mov	r5, sp
 800231e:	f106 0410 	add.w	r4, r6, #16
 8002322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800232a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800232e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002332:	1d33      	adds	r3, r6, #4
 8002334:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002336:	6838      	ldr	r0, [r7, #0]
 8002338:	f004 fc9c 	bl	8006c74 <USB_DevInit>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2202      	movs	r2, #2
 8002346:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e014      	b.n	8002378 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	2b01      	cmp	r3, #1
 8002364:	d102      	bne.n	800236c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f80a 	bl	8002380 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f004 fe3e 	bl	8006ff2 <USB_DevDisconnect>

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002380 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	10000003 	.word	0x10000003

080023c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80023d0:	4b29      	ldr	r3, [pc, #164]	; (8002478 <HAL_PWREx_ConfigSupply+0xb0>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	2b06      	cmp	r3, #6
 80023da:	d00a      	beq.n	80023f2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023dc:	4b26      	ldr	r3, [pc, #152]	; (8002478 <HAL_PWREx_ConfigSupply+0xb0>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d001      	beq.n	80023ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e040      	b.n	8002470 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	e03e      	b.n	8002470 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023f2:	4b21      	ldr	r3, [pc, #132]	; (8002478 <HAL_PWREx_ConfigSupply+0xb0>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80023fa:	491f      	ldr	r1, [pc, #124]	; (8002478 <HAL_PWREx_ConfigSupply+0xb0>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002402:	f7ff f8fb 	bl	80015fc <HAL_GetTick>
 8002406:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002408:	e009      	b.n	800241e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800240a:	f7ff f8f7 	bl	80015fc <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002418:	d901      	bls.n	800241e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e028      	b.n	8002470 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800241e:	4b16      	ldr	r3, [pc, #88]	; (8002478 <HAL_PWREx_ConfigSupply+0xb0>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242a:	d1ee      	bne.n	800240a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b1e      	cmp	r3, #30
 8002430:	d008      	beq.n	8002444 <HAL_PWREx_ConfigSupply+0x7c>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b2e      	cmp	r3, #46	; 0x2e
 8002436:	d005      	beq.n	8002444 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b1d      	cmp	r3, #29
 800243c:	d002      	beq.n	8002444 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b2d      	cmp	r3, #45	; 0x2d
 8002442:	d114      	bne.n	800246e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002444:	f7ff f8da 	bl	80015fc <HAL_GetTick>
 8002448:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800244a:	e009      	b.n	8002460 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800244c:	f7ff f8d6 	bl	80015fc <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800245a:	d901      	bls.n	8002460 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e007      	b.n	8002470 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_PWREx_ConfigSupply+0xb0>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246c:	d1ee      	bne.n	800244c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	58024800 	.word	0x58024800

0800247c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4a04      	ldr	r2, [pc, #16]	; (8002498 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800248a:	60d3      	str	r3, [r2, #12]
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	58024800 	.word	0x58024800

0800249c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08c      	sub	sp, #48	; 0x30
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e3ff      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 8087 	beq.w	80025ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024bc:	4b99      	ldr	r3, [pc, #612]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024c6:	4b97      	ldr	r3, [pc, #604]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80024cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d007      	beq.n	80024e2 <HAL_RCC_OscConfig+0x46>
 80024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d4:	2b18      	cmp	r3, #24
 80024d6:	d110      	bne.n	80024fa <HAL_RCC_OscConfig+0x5e>
 80024d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d10b      	bne.n	80024fa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e2:	4b90      	ldr	r3, [pc, #576]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d06c      	beq.n	80025c8 <HAL_RCC_OscConfig+0x12c>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d168      	bne.n	80025c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e3d9      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x76>
 8002504:	4b87      	ldr	r3, [pc, #540]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a86      	ldr	r2, [pc, #536]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 800250a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	e02e      	b.n	8002570 <HAL_RCC_OscConfig+0xd4>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x98>
 800251a:	4b82      	ldr	r3, [pc, #520]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a81      	ldr	r2, [pc, #516]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 8002520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b7f      	ldr	r3, [pc, #508]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a7e      	ldr	r2, [pc, #504]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 800252c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e01d      	b.n	8002570 <HAL_RCC_OscConfig+0xd4>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800253c:	d10c      	bne.n	8002558 <HAL_RCC_OscConfig+0xbc>
 800253e:	4b79      	ldr	r3, [pc, #484]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a78      	ldr	r2, [pc, #480]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 8002544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	4b76      	ldr	r3, [pc, #472]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a75      	ldr	r2, [pc, #468]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 8002550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e00b      	b.n	8002570 <HAL_RCC_OscConfig+0xd4>
 8002558:	4b72      	ldr	r3, [pc, #456]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a71      	ldr	r2, [pc, #452]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 800255e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b6f      	ldr	r3, [pc, #444]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a6e      	ldr	r2, [pc, #440]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 800256a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d013      	beq.n	80025a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7ff f840 	bl	80015fc <HAL_GetTick>
 800257c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002580:	f7ff f83c 	bl	80015fc <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	; 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e38d      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002592:	4b64      	ldr	r3, [pc, #400]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0xe4>
 800259e:	e014      	b.n	80025ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a0:	f7ff f82c 	bl	80015fc <HAL_GetTick>
 80025a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a8:	f7ff f828 	bl	80015fc <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	; 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e379      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025ba:	4b5a      	ldr	r3, [pc, #360]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x10c>
 80025c6:	e000      	b.n	80025ca <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80ae 	beq.w	8002734 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025d8:	4b52      	ldr	r3, [pc, #328]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025e2:	4b50      	ldr	r3, [pc, #320]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 80025e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <HAL_RCC_OscConfig+0x162>
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	2b18      	cmp	r3, #24
 80025f2:	d13a      	bne.n	800266a <HAL_RCC_OscConfig+0x1ce>
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d135      	bne.n	800266a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025fe:	4b49      	ldr	r3, [pc, #292]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <HAL_RCC_OscConfig+0x17a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e34b      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002616:	f7ff f81f 	bl	8001658 <HAL_GetREVID>
 800261a:	4602      	mov	r2, r0
 800261c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002620:	429a      	cmp	r2, r3
 8002622:	d817      	bhi.n	8002654 <HAL_RCC_OscConfig+0x1b8>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b40      	cmp	r3, #64	; 0x40
 800262a:	d108      	bne.n	800263e <HAL_RCC_OscConfig+0x1a2>
 800262c:	4b3d      	ldr	r3, [pc, #244]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002634:	4a3b      	ldr	r2, [pc, #236]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 8002636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800263a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800263c:	e07a      	b.n	8002734 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263e:	4b39      	ldr	r3, [pc, #228]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	031b      	lsls	r3, r3, #12
 800264c:	4935      	ldr	r1, [pc, #212]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 800264e:	4313      	orrs	r3, r2
 8002650:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002652:	e06f      	b.n	8002734 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002654:	4b33      	ldr	r3, [pc, #204]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	061b      	lsls	r3, r3, #24
 8002662:	4930      	ldr	r1, [pc, #192]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002668:	e064      	b.n	8002734 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d045      	beq.n	80026fe <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002672:	4b2c      	ldr	r3, [pc, #176]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 0219 	bic.w	r2, r3, #25
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	4929      	ldr	r1, [pc, #164]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe ffba 	bl	80015fc <HAL_GetTick>
 8002688:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800268c:	f7fe ffb6 	bl	80015fc <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e307      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800269e:	4b21      	ldr	r3, [pc, #132]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026aa:	f7fe ffd5 	bl	8001658 <HAL_GetREVID>
 80026ae:	4602      	mov	r2, r0
 80026b0:	f241 0303 	movw	r3, #4099	; 0x1003
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d817      	bhi.n	80026e8 <HAL_RCC_OscConfig+0x24c>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b40      	cmp	r3, #64	; 0x40
 80026be:	d108      	bne.n	80026d2 <HAL_RCC_OscConfig+0x236>
 80026c0:	4b18      	ldr	r3, [pc, #96]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80026c8:	4a16      	ldr	r2, [pc, #88]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 80026ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ce:	6053      	str	r3, [r2, #4]
 80026d0:	e030      	b.n	8002734 <HAL_RCC_OscConfig+0x298>
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	031b      	lsls	r3, r3, #12
 80026e0:	4910      	ldr	r1, [pc, #64]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]
 80026e6:	e025      	b.n	8002734 <HAL_RCC_OscConfig+0x298>
 80026e8:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	490b      	ldr	r1, [pc, #44]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
 80026fc:	e01a      	b.n	8002734 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a08      	ldr	r2, [pc, #32]	; (8002724 <HAL_RCC_OscConfig+0x288>)
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7fe ff77 	bl	80015fc <HAL_GetTick>
 800270e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002710:	e00a      	b.n	8002728 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002712:	f7fe ff73 	bl	80015fc <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d903      	bls.n	8002728 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e2c4      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
 8002724:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002728:	4ba4      	ldr	r3, [pc, #656]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1ee      	bne.n	8002712 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80a9 	beq.w	8002894 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002742:	4b9e      	ldr	r3, [pc, #632]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800274a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800274c:	4b9b      	ldr	r3, [pc, #620]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	2b08      	cmp	r3, #8
 8002756:	d007      	beq.n	8002768 <HAL_RCC_OscConfig+0x2cc>
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2b18      	cmp	r3, #24
 800275c:	d13a      	bne.n	80027d4 <HAL_RCC_OscConfig+0x338>
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b01      	cmp	r3, #1
 8002766:	d135      	bne.n	80027d4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002768:	4b94      	ldr	r3, [pc, #592]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_RCC_OscConfig+0x2e4>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	2b80      	cmp	r3, #128	; 0x80
 800277a:	d001      	beq.n	8002780 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e296      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002780:	f7fe ff6a 	bl	8001658 <HAL_GetREVID>
 8002784:	4602      	mov	r2, r0
 8002786:	f241 0303 	movw	r3, #4099	; 0x1003
 800278a:	429a      	cmp	r2, r3
 800278c:	d817      	bhi.n	80027be <HAL_RCC_OscConfig+0x322>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	2b20      	cmp	r3, #32
 8002794:	d108      	bne.n	80027a8 <HAL_RCC_OscConfig+0x30c>
 8002796:	4b89      	ldr	r3, [pc, #548]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800279e:	4a87      	ldr	r2, [pc, #540]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 80027a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027a4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027a6:	e075      	b.n	8002894 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027a8:	4b84      	ldr	r3, [pc, #528]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	069b      	lsls	r3, r3, #26
 80027b6:	4981      	ldr	r1, [pc, #516]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027bc:	e06a      	b.n	8002894 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027be:	4b7f      	ldr	r3, [pc, #508]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	061b      	lsls	r3, r3, #24
 80027cc:	497b      	ldr	r1, [pc, #492]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027d2:	e05f      	b.n	8002894 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d042      	beq.n	8002862 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80027dc:	4b77      	ldr	r3, [pc, #476]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a76      	ldr	r2, [pc, #472]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 80027e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fe ff08 	bl	80015fc <HAL_GetTick>
 80027ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80027f0:	f7fe ff04 	bl	80015fc <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e255      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002802:	4b6e      	ldr	r3, [pc, #440]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800280e:	f7fe ff23 	bl	8001658 <HAL_GetREVID>
 8002812:	4602      	mov	r2, r0
 8002814:	f241 0303 	movw	r3, #4099	; 0x1003
 8002818:	429a      	cmp	r2, r3
 800281a:	d817      	bhi.n	800284c <HAL_RCC_OscConfig+0x3b0>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	2b20      	cmp	r3, #32
 8002822:	d108      	bne.n	8002836 <HAL_RCC_OscConfig+0x39a>
 8002824:	4b65      	ldr	r3, [pc, #404]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800282c:	4a63      	ldr	r2, [pc, #396]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 800282e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002832:	6053      	str	r3, [r2, #4]
 8002834:	e02e      	b.n	8002894 <HAL_RCC_OscConfig+0x3f8>
 8002836:	4b61      	ldr	r3, [pc, #388]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	069b      	lsls	r3, r3, #26
 8002844:	495d      	ldr	r1, [pc, #372]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
 800284a:	e023      	b.n	8002894 <HAL_RCC_OscConfig+0x3f8>
 800284c:	4b5b      	ldr	r3, [pc, #364]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	061b      	lsls	r3, r3, #24
 800285a:	4958      	ldr	r1, [pc, #352]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 800285c:	4313      	orrs	r3, r2
 800285e:	60cb      	str	r3, [r1, #12]
 8002860:	e018      	b.n	8002894 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002862:	4b56      	ldr	r3, [pc, #344]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a55      	ldr	r2, [pc, #340]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 8002868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800286c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286e:	f7fe fec5 	bl	80015fc <HAL_GetTick>
 8002872:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002876:	f7fe fec1 	bl	80015fc <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e212      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002888:	4b4c      	ldr	r3, [pc, #304]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f0      	bne.n	8002876 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d036      	beq.n	800290e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d019      	beq.n	80028dc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a8:	4b44      	ldr	r3, [pc, #272]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 80028aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ac:	4a43      	ldr	r2, [pc, #268]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b4:	f7fe fea2 	bl	80015fc <HAL_GetTick>
 80028b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028bc:	f7fe fe9e 	bl	80015fc <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e1ef      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028ce:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 80028d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x420>
 80028da:	e018      	b.n	800290e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028dc:	4b37      	ldr	r3, [pc, #220]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 80028de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e0:	4a36      	ldr	r2, [pc, #216]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 80028e2:	f023 0301 	bic.w	r3, r3, #1
 80028e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e8:	f7fe fe88 	bl	80015fc <HAL_GetTick>
 80028ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f0:	f7fe fe84 	bl	80015fc <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1d5      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002902:	4b2e      	ldr	r3, [pc, #184]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 8002904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	d036      	beq.n	8002988 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d019      	beq.n	8002956 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002922:	4b26      	ldr	r3, [pc, #152]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a25      	ldr	r2, [pc, #148]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 8002928:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800292c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800292e:	f7fe fe65 	bl	80015fc <HAL_GetTick>
 8002932:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002936:	f7fe fe61 	bl	80015fc <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e1b2      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002948:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x49a>
 8002954:	e018      	b.n	8002988 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002956:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a18      	ldr	r2, [pc, #96]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 800295c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002960:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002962:	f7fe fe4b 	bl	80015fc <HAL_GetTick>
 8002966:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800296a:	f7fe fe47 	bl	80015fc <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e198      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800297c:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <HAL_RCC_OscConfig+0x520>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f0      	bne.n	800296a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8085 	beq.w	8002aa0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002996:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <HAL_RCC_OscConfig+0x524>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a09      	ldr	r2, [pc, #36]	; (80029c0 <HAL_RCC_OscConfig+0x524>)
 800299c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029a2:	f7fe fe2b 	bl	80015fc <HAL_GetTick>
 80029a6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029a8:	e00c      	b.n	80029c4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80029aa:	f7fe fe27 	bl	80015fc <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b64      	cmp	r3, #100	; 0x64
 80029b6:	d905      	bls.n	80029c4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e178      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
 80029bc:	58024400 	.word	0x58024400
 80029c0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029c4:	4b96      	ldr	r3, [pc, #600]	; (8002c20 <HAL_RCC_OscConfig+0x784>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0ec      	beq.n	80029aa <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d106      	bne.n	80029e6 <HAL_RCC_OscConfig+0x54a>
 80029d8:	4b92      	ldr	r3, [pc, #584]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	4a91      	ldr	r2, [pc, #580]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6713      	str	r3, [r2, #112]	; 0x70
 80029e4:	e02d      	b.n	8002a42 <HAL_RCC_OscConfig+0x5a6>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x56c>
 80029ee:	4b8d      	ldr	r3, [pc, #564]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f2:	4a8c      	ldr	r2, [pc, #560]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	6713      	str	r3, [r2, #112]	; 0x70
 80029fa:	4b8a      	ldr	r3, [pc, #552]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	4a89      	ldr	r2, [pc, #548]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002a00:	f023 0304 	bic.w	r3, r3, #4
 8002a04:	6713      	str	r3, [r2, #112]	; 0x70
 8002a06:	e01c      	b.n	8002a42 <HAL_RCC_OscConfig+0x5a6>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d10c      	bne.n	8002a2a <HAL_RCC_OscConfig+0x58e>
 8002a10:	4b84      	ldr	r3, [pc, #528]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	4a83      	ldr	r2, [pc, #524]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002a16:	f043 0304 	orr.w	r3, r3, #4
 8002a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1c:	4b81      	ldr	r3, [pc, #516]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	4a80      	ldr	r2, [pc, #512]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6713      	str	r3, [r2, #112]	; 0x70
 8002a28:	e00b      	b.n	8002a42 <HAL_RCC_OscConfig+0x5a6>
 8002a2a:	4b7e      	ldr	r3, [pc, #504]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	4a7d      	ldr	r2, [pc, #500]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	6713      	str	r3, [r2, #112]	; 0x70
 8002a36:	4b7b      	ldr	r3, [pc, #492]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3a:	4a7a      	ldr	r2, [pc, #488]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002a3c:	f023 0304 	bic.w	r3, r3, #4
 8002a40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d015      	beq.n	8002a76 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4a:	f7fe fdd7 	bl	80015fc <HAL_GetTick>
 8002a4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7fe fdd3 	bl	80015fc <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e122      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a68:	4b6e      	ldr	r3, [pc, #440]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ee      	beq.n	8002a52 <HAL_RCC_OscConfig+0x5b6>
 8002a74:	e014      	b.n	8002aa0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a76:	f7fe fdc1 	bl	80015fc <HAL_GetTick>
 8002a7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a7c:	e00a      	b.n	8002a94 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a7e:	f7fe fdbd 	bl	80015fc <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e10c      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a94:	4b63      	ldr	r3, [pc, #396]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ee      	bne.n	8002a7e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8101 	beq.w	8002cac <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002aaa:	4b5e      	ldr	r3, [pc, #376]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ab2:	2b18      	cmp	r3, #24
 8002ab4:	f000 80bc 	beq.w	8002c30 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	f040 8095 	bne.w	8002bec <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac2:	4b58      	ldr	r3, [pc, #352]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a57      	ldr	r2, [pc, #348]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002ac8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ace:	f7fe fd95 	bl	80015fc <HAL_GetTick>
 8002ad2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad6:	f7fe fd91 	bl	80015fc <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e0e2      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ae8:	4b4e      	ldr	r3, [pc, #312]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f0      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002af4:	4b4b      	ldr	r3, [pc, #300]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002af6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002af8:	4b4b      	ldr	r3, [pc, #300]	; (8002c28 <HAL_RCC_OscConfig+0x78c>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b04:	0112      	lsls	r2, r2, #4
 8002b06:	430a      	orrs	r2, r1
 8002b08:	4946      	ldr	r1, [pc, #280]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	628b      	str	r3, [r1, #40]	; 0x28
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	3b01      	subs	r3, #1
 8002b14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	025b      	lsls	r3, r3, #9
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	041b      	lsls	r3, r3, #16
 8002b2c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b36:	3b01      	subs	r3, #1
 8002b38:	061b      	lsls	r3, r3, #24
 8002b3a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002b3e:	4939      	ldr	r1, [pc, #228]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002b44:	4b37      	ldr	r3, [pc, #220]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	4a36      	ldr	r2, [pc, #216]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b50:	4b34      	ldr	r3, [pc, #208]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b54:	4b35      	ldr	r3, [pc, #212]	; (8002c2c <HAL_RCC_OscConfig+0x790>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b5c:	00d2      	lsls	r2, r2, #3
 8002b5e:	4931      	ldr	r1, [pc, #196]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b64:	4b2f      	ldr	r3, [pc, #188]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	f023 020c 	bic.w	r2, r3, #12
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	492c      	ldr	r1, [pc, #176]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b76:	4b2b      	ldr	r3, [pc, #172]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	f023 0202 	bic.w	r2, r3, #2
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	4928      	ldr	r1, [pc, #160]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b88:	4b26      	ldr	r3, [pc, #152]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	4a25      	ldr	r2, [pc, #148]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b94:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	4a22      	ldr	r2, [pc, #136]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ba0:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	4a1f      	ldr	r2, [pc, #124]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002ba6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002baa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002bac:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	4a1c      	ldr	r2, [pc, #112]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bb8:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a19      	ldr	r2, [pc, #100]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7fe fd1a 	bl	80015fc <HAL_GetTick>
 8002bc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7fe fd16 	bl	80015fc <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e067      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bde:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x730>
 8002bea:	e05f      	b.n	8002cac <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bec:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0c      	ldr	r2, [pc, #48]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fd00 	bl	80015fc <HAL_GetTick>
 8002bfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe fcfc 	bl	80015fc <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e04d      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c12:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <HAL_RCC_OscConfig+0x788>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x764>
 8002c1e:	e045      	b.n	8002cac <HAL_RCC_OscConfig+0x810>
 8002c20:	58024800 	.word	0x58024800
 8002c24:	58024400 	.word	0x58024400
 8002c28:	fffffc0c 	.word	0xfffffc0c
 8002c2c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c30:	4b21      	ldr	r3, [pc, #132]	; (8002cb8 <HAL_RCC_OscConfig+0x81c>)
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <HAL_RCC_OscConfig+0x81c>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d031      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f003 0203 	and.w	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d12a      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d122      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d11a      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	0a5b      	lsrs	r3, r3, #9
 8002c76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d111      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	0c1b      	lsrs	r3, r3, #16
 8002c88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c90:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d108      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	0e1b      	lsrs	r3, r3, #24
 8002c9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3730      	adds	r7, #48	; 0x30
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	58024400 	.word	0x58024400

08002cbc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e19c      	b.n	800300a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd0:	4b8a      	ldr	r3, [pc, #552]	; (8002efc <HAL_RCC_ClockConfig+0x240>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d910      	bls.n	8002d00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cde:	4b87      	ldr	r3, [pc, #540]	; (8002efc <HAL_RCC_ClockConfig+0x240>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 020f 	bic.w	r2, r3, #15
 8002ce6:	4985      	ldr	r1, [pc, #532]	; (8002efc <HAL_RCC_ClockConfig+0x240>)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cee:	4b83      	ldr	r3, [pc, #524]	; (8002efc <HAL_RCC_ClockConfig+0x240>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e184      	b.n	800300a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d010      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	4b7b      	ldr	r3, [pc, #492]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d908      	bls.n	8002d2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d1c:	4b78      	ldr	r3, [pc, #480]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	4975      	ldr	r1, [pc, #468]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d010      	beq.n	8002d5c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695a      	ldr	r2, [r3, #20]
 8002d3e:	4b70      	ldr	r3, [pc, #448]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d908      	bls.n	8002d5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d4a:	4b6d      	ldr	r3, [pc, #436]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	496a      	ldr	r1, [pc, #424]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d010      	beq.n	8002d8a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699a      	ldr	r2, [r3, #24]
 8002d6c:	4b64      	ldr	r3, [pc, #400]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d908      	bls.n	8002d8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d78:	4b61      	ldr	r3, [pc, #388]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	495e      	ldr	r1, [pc, #376]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d010      	beq.n	8002db8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69da      	ldr	r2, [r3, #28]
 8002d9a:	4b59      	ldr	r3, [pc, #356]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d908      	bls.n	8002db8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002da6:	4b56      	ldr	r3, [pc, #344]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	4953      	ldr	r1, [pc, #332]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d010      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	4b4d      	ldr	r3, [pc, #308]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d908      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd4:	4b4a      	ldr	r3, [pc, #296]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	f023 020f 	bic.w	r2, r3, #15
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	4947      	ldr	r1, [pc, #284]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d055      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002df2:	4b43      	ldr	r3, [pc, #268]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	4940      	ldr	r1, [pc, #256]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d107      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e0c:	4b3c      	ldr	r3, [pc, #240]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d121      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0f6      	b.n	800300a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d107      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e24:	4b36      	ldr	r3, [pc, #216]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d115      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0ea      	b.n	800300a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d107      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e3c:	4b30      	ldr	r3, [pc, #192]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d109      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0de      	b.n	800300a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e4c:	4b2c      	ldr	r3, [pc, #176]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0d6      	b.n	800300a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e5c:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	f023 0207 	bic.w	r2, r3, #7
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	4925      	ldr	r1, [pc, #148]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6e:	f7fe fbc5 	bl	80015fc <HAL_GetTick>
 8002e72:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e74:	e00a      	b.n	8002e8c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e76:	f7fe fbc1 	bl	80015fc <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e0be      	b.n	800300a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8c:	4b1c      	ldr	r3, [pc, #112]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d1eb      	bne.n	8002e76 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d010      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d208      	bcs.n	8002ecc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eba:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f023 020f 	bic.w	r2, r3, #15
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	490e      	ldr	r1, [pc, #56]	; (8002f00 <HAL_RCC_ClockConfig+0x244>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_RCC_ClockConfig+0x240>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d214      	bcs.n	8002f04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <HAL_RCC_ClockConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 020f 	bic.w	r2, r3, #15
 8002ee2:	4906      	ldr	r1, [pc, #24]	; (8002efc <HAL_RCC_ClockConfig+0x240>)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eea:	4b04      	ldr	r3, [pc, #16]	; (8002efc <HAL_RCC_ClockConfig+0x240>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d005      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e086      	b.n	800300a <HAL_RCC_ClockConfig+0x34e>
 8002efc:	52002000 	.word	0x52002000
 8002f00:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d010      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	4b3f      	ldr	r3, [pc, #252]	; (8003014 <HAL_RCC_ClockConfig+0x358>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d208      	bcs.n	8002f32 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f20:	4b3c      	ldr	r3, [pc, #240]	; (8003014 <HAL_RCC_ClockConfig+0x358>)
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	4939      	ldr	r1, [pc, #228]	; (8003014 <HAL_RCC_ClockConfig+0x358>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d010      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695a      	ldr	r2, [r3, #20]
 8002f42:	4b34      	ldr	r3, [pc, #208]	; (8003014 <HAL_RCC_ClockConfig+0x358>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d208      	bcs.n	8002f60 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f4e:	4b31      	ldr	r3, [pc, #196]	; (8003014 <HAL_RCC_ClockConfig+0x358>)
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	492e      	ldr	r1, [pc, #184]	; (8003014 <HAL_RCC_ClockConfig+0x358>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d010      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699a      	ldr	r2, [r3, #24]
 8002f70:	4b28      	ldr	r3, [pc, #160]	; (8003014 <HAL_RCC_ClockConfig+0x358>)
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d208      	bcs.n	8002f8e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f7c:	4b25      	ldr	r3, [pc, #148]	; (8003014 <HAL_RCC_ClockConfig+0x358>)
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	4922      	ldr	r1, [pc, #136]	; (8003014 <HAL_RCC_ClockConfig+0x358>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d010      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <HAL_RCC_ClockConfig+0x358>)
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d208      	bcs.n	8002fbc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002faa:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <HAL_RCC_ClockConfig+0x358>)
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	4917      	ldr	r1, [pc, #92]	; (8003014 <HAL_RCC_ClockConfig+0x358>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fbc:	f000 f834 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8002fc0:	4601      	mov	r1, r0
 8002fc2:	4b14      	ldr	r3, [pc, #80]	; (8003014 <HAL_RCC_ClockConfig+0x358>)
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	0a1b      	lsrs	r3, r3, #8
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	4a12      	ldr	r2, [pc, #72]	; (8003018 <HAL_RCC_ClockConfig+0x35c>)
 8002fce:	5cd3      	ldrb	r3, [r2, r3]
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	fa21 f303 	lsr.w	r3, r1, r3
 8002fd8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fda:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <HAL_RCC_ClockConfig+0x358>)
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	4a0d      	ldr	r2, [pc, #52]	; (8003018 <HAL_RCC_ClockConfig+0x35c>)
 8002fe4:	5cd3      	ldrb	r3, [r2, r3]
 8002fe6:	f003 031f 	and.w	r3, r3, #31
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff0:	4a0a      	ldr	r2, [pc, #40]	; (800301c <HAL_RCC_ClockConfig+0x360>)
 8002ff2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ff4:	4a0a      	ldr	r2, [pc, #40]	; (8003020 <HAL_RCC_ClockConfig+0x364>)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <HAL_RCC_ClockConfig+0x368>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe fab2 	bl	8001568 <HAL_InitTick>
 8003004:	4603      	mov	r3, r0
 8003006:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003008:	7bfb      	ldrb	r3, [r7, #15]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	58024400 	.word	0x58024400
 8003018:	08008ed0 	.word	0x08008ed0
 800301c:	20000004 	.word	0x20000004
 8003020:	20000000 	.word	0x20000000
 8003024:	2000001c 	.word	0x2000001c

08003028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003028:	b480      	push	{r7}
 800302a:	b089      	sub	sp, #36	; 0x24
 800302c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800302e:	4baf      	ldr	r3, [pc, #700]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003036:	2b18      	cmp	r3, #24
 8003038:	f200 814e 	bhi.w	80032d8 <HAL_RCC_GetSysClockFreq+0x2b0>
 800303c:	a201      	add	r2, pc, #4	; (adr r2, 8003044 <HAL_RCC_GetSysClockFreq+0x1c>)
 800303e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003042:	bf00      	nop
 8003044:	080030a9 	.word	0x080030a9
 8003048:	080032d9 	.word	0x080032d9
 800304c:	080032d9 	.word	0x080032d9
 8003050:	080032d9 	.word	0x080032d9
 8003054:	080032d9 	.word	0x080032d9
 8003058:	080032d9 	.word	0x080032d9
 800305c:	080032d9 	.word	0x080032d9
 8003060:	080032d9 	.word	0x080032d9
 8003064:	080030cf 	.word	0x080030cf
 8003068:	080032d9 	.word	0x080032d9
 800306c:	080032d9 	.word	0x080032d9
 8003070:	080032d9 	.word	0x080032d9
 8003074:	080032d9 	.word	0x080032d9
 8003078:	080032d9 	.word	0x080032d9
 800307c:	080032d9 	.word	0x080032d9
 8003080:	080032d9 	.word	0x080032d9
 8003084:	080030d5 	.word	0x080030d5
 8003088:	080032d9 	.word	0x080032d9
 800308c:	080032d9 	.word	0x080032d9
 8003090:	080032d9 	.word	0x080032d9
 8003094:	080032d9 	.word	0x080032d9
 8003098:	080032d9 	.word	0x080032d9
 800309c:	080032d9 	.word	0x080032d9
 80030a0:	080032d9 	.word	0x080032d9
 80030a4:	080030db 	.word	0x080030db
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030a8:	4b90      	ldr	r3, [pc, #576]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d009      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030b4:	4b8d      	ldr	r3, [pc, #564]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	08db      	lsrs	r3, r3, #3
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	4a8c      	ldr	r2, [pc, #560]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80030c0:	fa22 f303 	lsr.w	r3, r2, r3
 80030c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80030c6:	e10a      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030c8:	4b89      	ldr	r3, [pc, #548]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80030ca:	61bb      	str	r3, [r7, #24]
    break;
 80030cc:	e107      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80030ce:	4b89      	ldr	r3, [pc, #548]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80030d0:	61bb      	str	r3, [r7, #24]
    break;
 80030d2:	e104      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80030d4:	4b88      	ldr	r3, [pc, #544]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80030d6:	61bb      	str	r3, [r7, #24]
    break;
 80030d8:	e101      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030da:	4b84      	ldr	r3, [pc, #528]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80030dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80030e4:	4b81      	ldr	r3, [pc, #516]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030ee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030f0:	4b7e      	ldr	r3, [pc, #504]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80030fa:	4b7c      	ldr	r3, [pc, #496]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80030fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fe:	08db      	lsrs	r3, r3, #3
 8003100:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	fb02 f303 	mul.w	r3, r2, r3
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003112:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80da 	beq.w	80032d2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d05a      	beq.n	80031da <HAL_RCC_GetSysClockFreq+0x1b2>
 8003124:	2b01      	cmp	r3, #1
 8003126:	d302      	bcc.n	800312e <HAL_RCC_GetSysClockFreq+0x106>
 8003128:	2b02      	cmp	r3, #2
 800312a:	d078      	beq.n	800321e <HAL_RCC_GetSysClockFreq+0x1f6>
 800312c:	e099      	b.n	8003262 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800312e:	4b6f      	ldr	r3, [pc, #444]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d02d      	beq.n	8003196 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800313a:	4b6c      	ldr	r3, [pc, #432]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	08db      	lsrs	r3, r3, #3
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	4a6a      	ldr	r2, [pc, #424]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003146:	fa22 f303 	lsr.w	r3, r2, r3
 800314a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	ee07 3a90 	vmov	s15, r3
 8003152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003160:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003164:	4b61      	ldr	r3, [pc, #388]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800316c:	ee07 3a90 	vmov	s15, r3
 8003170:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003174:	ed97 6a02 	vldr	s12, [r7, #8]
 8003178:	eddf 5a60 	vldr	s11, [pc, #384]	; 80032fc <HAL_RCC_GetSysClockFreq+0x2d4>
 800317c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003180:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003184:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003188:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800318c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003190:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003194:	e087      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	ee07 3a90 	vmov	s15, r3
 800319c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003300 <HAL_RCC_GetSysClockFreq+0x2d8>
 80031a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031a8:	4b50      	ldr	r3, [pc, #320]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b0:	ee07 3a90 	vmov	s15, r3
 80031b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80031bc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80032fc <HAL_RCC_GetSysClockFreq+0x2d4>
 80031c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031d8:	e065      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	ee07 3a90 	vmov	s15, r3
 80031e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003304 <HAL_RCC_GetSysClockFreq+0x2dc>
 80031e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ec:	4b3f      	ldr	r3, [pc, #252]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f4:	ee07 3a90 	vmov	s15, r3
 80031f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003200:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80032fc <HAL_RCC_GetSysClockFreq+0x2d4>
 8003204:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003208:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800320c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003210:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003218:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800321c:	e043      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	ee07 3a90 	vmov	s15, r3
 8003224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003228:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003308 <HAL_RCC_GetSysClockFreq+0x2e0>
 800322c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003230:	4b2e      	ldr	r3, [pc, #184]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003238:	ee07 3a90 	vmov	s15, r3
 800323c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003240:	ed97 6a02 	vldr	s12, [r7, #8]
 8003244:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80032fc <HAL_RCC_GetSysClockFreq+0x2d4>
 8003248:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800324c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003250:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003254:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800325c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003260:	e021      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	ee07 3a90 	vmov	s15, r3
 8003268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003304 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003274:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800327c:	ee07 3a90 	vmov	s15, r3
 8003280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003284:	ed97 6a02 	vldr	s12, [r7, #8]
 8003288:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80032fc <HAL_RCC_GetSysClockFreq+0x2d4>
 800328c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003290:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003294:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003298:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800329c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032a4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80032a6:	4b11      	ldr	r3, [pc, #68]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	0a5b      	lsrs	r3, r3, #9
 80032ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032b0:	3301      	adds	r3, #1
 80032b2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	ee07 3a90 	vmov	s15, r3
 80032ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032be:	edd7 6a07 	vldr	s13, [r7, #28]
 80032c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032ca:	ee17 3a90 	vmov	r3, s15
 80032ce:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80032d0:	e005      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61bb      	str	r3, [r7, #24]
    break;
 80032d6:	e002      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80032da:	61bb      	str	r3, [r7, #24]
    break;
 80032dc:	bf00      	nop
  }

  return sysclockfreq;
 80032de:	69bb      	ldr	r3, [r7, #24]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3724      	adds	r7, #36	; 0x24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	58024400 	.word	0x58024400
 80032f0:	03d09000 	.word	0x03d09000
 80032f4:	003d0900 	.word	0x003d0900
 80032f8:	02625a00 	.word	0x02625a00
 80032fc:	46000000 	.word	0x46000000
 8003300:	4c742400 	.word	0x4c742400
 8003304:	4a742400 	.word	0x4a742400
 8003308:	4c189680 	.word	0x4c189680

0800330c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003312:	f7ff fe89 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8003316:	4601      	mov	r1, r0
 8003318:	4b10      	ldr	r3, [pc, #64]	; (800335c <HAL_RCC_GetHCLKFreq+0x50>)
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	0a1b      	lsrs	r3, r3, #8
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	4a0f      	ldr	r2, [pc, #60]	; (8003360 <HAL_RCC_GetHCLKFreq+0x54>)
 8003324:	5cd3      	ldrb	r3, [r2, r3]
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	fa21 f303 	lsr.w	r3, r1, r3
 800332e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003330:	4b0a      	ldr	r3, [pc, #40]	; (800335c <HAL_RCC_GetHCLKFreq+0x50>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	4a09      	ldr	r2, [pc, #36]	; (8003360 <HAL_RCC_GetHCLKFreq+0x54>)
 800333a:	5cd3      	ldrb	r3, [r2, r3]
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	fa22 f303 	lsr.w	r3, r2, r3
 8003346:	4a07      	ldr	r2, [pc, #28]	; (8003364 <HAL_RCC_GetHCLKFreq+0x58>)
 8003348:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800334a:	4a07      	ldr	r2, [pc, #28]	; (8003368 <HAL_RCC_GetHCLKFreq+0x5c>)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003350:	4b04      	ldr	r3, [pc, #16]	; (8003364 <HAL_RCC_GetHCLKFreq+0x58>)
 8003352:	681b      	ldr	r3, [r3, #0]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	58024400 	.word	0x58024400
 8003360:	08008ed0 	.word	0x08008ed0
 8003364:	20000004 	.word	0x20000004
 8003368:	20000000 	.word	0x20000000

0800336c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003370:	f7ff ffcc 	bl	800330c <HAL_RCC_GetHCLKFreq>
 8003374:	4601      	mov	r1, r0
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	4a04      	ldr	r2, [pc, #16]	; (8003394 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003382:	5cd3      	ldrb	r3, [r2, r3]
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800338c:	4618      	mov	r0, r3
 800338e:	bd80      	pop	{r7, pc}
 8003390:	58024400 	.word	0x58024400
 8003394:	08008ed0 	.word	0x08008ed0

08003398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800339c:	f7ff ffb6 	bl	800330c <HAL_RCC_GetHCLKFreq>
 80033a0:	4601      	mov	r1, r0
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	0a1b      	lsrs	r3, r3, #8
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	4a04      	ldr	r2, [pc, #16]	; (80033c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033ae:	5cd3      	ldrb	r3, [r2, r3]
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	58024400 	.word	0x58024400
 80033c0:	08008ed0 	.word	0x08008ed0

080033c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033cc:	2300      	movs	r3, #0
 80033ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033d0:	2300      	movs	r3, #0
 80033d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d03d      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033e8:	d013      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80033ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ee:	d802      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d007      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80033f4:	e01f      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80033f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033fa:	d013      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80033fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003400:	d01c      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003402:	e018      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003404:	4baf      	ldr	r3, [pc, #700]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	4aae      	ldr	r2, [pc, #696]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800340a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800340e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003410:	e015      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3304      	adds	r3, #4
 8003416:	2102      	movs	r1, #2
 8003418:	4618      	mov	r0, r3
 800341a:	f001 f96f 	bl	80046fc <RCCEx_PLL2_Config>
 800341e:	4603      	mov	r3, r0
 8003420:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003422:	e00c      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3324      	adds	r3, #36	; 0x24
 8003428:	2102      	movs	r1, #2
 800342a:	4618      	mov	r0, r3
 800342c:	f001 fa18 	bl	8004860 <RCCEx_PLL3_Config>
 8003430:	4603      	mov	r3, r0
 8003432:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003434:	e003      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	75fb      	strb	r3, [r7, #23]
      break;
 800343a:	e000      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800343c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800343e:	7dfb      	ldrb	r3, [r7, #23]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d109      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003444:	4b9f      	ldr	r3, [pc, #636]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003448:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003450:	499c      	ldr	r1, [pc, #624]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003452:	4313      	orrs	r3, r2
 8003454:	650b      	str	r3, [r1, #80]	; 0x50
 8003456:	e001      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003458:	7dfb      	ldrb	r3, [r7, #23]
 800345a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d03d      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346c:	2b04      	cmp	r3, #4
 800346e:	d826      	bhi.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003470:	a201      	add	r2, pc, #4	; (adr r2, 8003478 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003476:	bf00      	nop
 8003478:	0800348d 	.word	0x0800348d
 800347c:	0800349b 	.word	0x0800349b
 8003480:	080034ad 	.word	0x080034ad
 8003484:	080034c5 	.word	0x080034c5
 8003488:	080034c5 	.word	0x080034c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800348c:	4b8d      	ldr	r3, [pc, #564]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	4a8c      	ldr	r2, [pc, #560]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003496:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003498:	e015      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3304      	adds	r3, #4
 800349e:	2100      	movs	r1, #0
 80034a0:	4618      	mov	r0, r3
 80034a2:	f001 f92b 	bl	80046fc <RCCEx_PLL2_Config>
 80034a6:	4603      	mov	r3, r0
 80034a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034aa:	e00c      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3324      	adds	r3, #36	; 0x24
 80034b0:	2100      	movs	r1, #0
 80034b2:	4618      	mov	r0, r3
 80034b4:	f001 f9d4 	bl	8004860 <RCCEx_PLL3_Config>
 80034b8:	4603      	mov	r3, r0
 80034ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034bc:	e003      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	75fb      	strb	r3, [r7, #23]
      break;
 80034c2:	e000      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80034c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d109      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034cc:	4b7d      	ldr	r3, [pc, #500]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d0:	f023 0207 	bic.w	r2, r3, #7
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d8:	497a      	ldr	r1, [pc, #488]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	650b      	str	r3, [r1, #80]	; 0x50
 80034de:	e001      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e0:	7dfb      	ldrb	r3, [r7, #23]
 80034e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d03e      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f4:	2b80      	cmp	r3, #128	; 0x80
 80034f6:	d01c      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	d804      	bhi.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003500:	2b40      	cmp	r3, #64	; 0x40
 8003502:	d00d      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003504:	e01e      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003506:	2bc0      	cmp	r3, #192	; 0xc0
 8003508:	d01f      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800350a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800350e:	d01e      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003510:	e018      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003512:	4b6c      	ldr	r3, [pc, #432]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	4a6b      	ldr	r2, [pc, #428]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800351c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800351e:	e017      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3304      	adds	r3, #4
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f001 f8e8 	bl	80046fc <RCCEx_PLL2_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003530:	e00e      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3324      	adds	r3, #36	; 0x24
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f001 f991 	bl	8004860 <RCCEx_PLL3_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003542:	e005      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	75fb      	strb	r3, [r7, #23]
      break;
 8003548:	e002      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800354a:	bf00      	nop
 800354c:	e000      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800354e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003550:	7dfb      	ldrb	r3, [r7, #23]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003556:	4b5b      	ldr	r3, [pc, #364]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003562:	4958      	ldr	r1, [pc, #352]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003564:	4313      	orrs	r3, r2
 8003566:	650b      	str	r3, [r1, #80]	; 0x50
 8003568:	e001      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356a:	7dfb      	ldrb	r3, [r7, #23]
 800356c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003576:	2b00      	cmp	r3, #0
 8003578:	d044      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003580:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003584:	d01f      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800358a:	d805      	bhi.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003590:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003594:	d00e      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003596:	e01f      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003598:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800359c:	d01f      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800359e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035a2:	d01e      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80035a4:	e018      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035a6:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	4a46      	ldr	r2, [pc, #280]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80035ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035b2:	e017      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3304      	adds	r3, #4
 80035b8:	2100      	movs	r1, #0
 80035ba:	4618      	mov	r0, r3
 80035bc:	f001 f89e 	bl	80046fc <RCCEx_PLL2_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80035c4:	e00e      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3324      	adds	r3, #36	; 0x24
 80035ca:	2100      	movs	r1, #0
 80035cc:	4618      	mov	r0, r3
 80035ce:	f001 f947 	bl	8004860 <RCCEx_PLL3_Config>
 80035d2:	4603      	mov	r3, r0
 80035d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035d6:	e005      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	75fb      	strb	r3, [r7, #23]
      break;
 80035dc:	e002      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80035de:	bf00      	nop
 80035e0:	e000      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80035e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035e4:	7dfb      	ldrb	r3, [r7, #23]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10a      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035ea:	4b36      	ldr	r3, [pc, #216]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80035ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ee:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035f8:	4932      	ldr	r1, [pc, #200]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	658b      	str	r3, [r1, #88]	; 0x58
 80035fe:	e001      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003600:	7dfb      	ldrb	r3, [r7, #23]
 8003602:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800360c:	2b00      	cmp	r3, #0
 800360e:	d044      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003616:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800361a:	d01f      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800361c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003620:	d805      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003626:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800362a:	d00e      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800362c:	e01f      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800362e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003632:	d01f      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003634:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003638:	d01e      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800363a:	e018      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800363c:	4b21      	ldr	r3, [pc, #132]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	4a20      	ldr	r2, [pc, #128]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003646:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003648:	e017      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3304      	adds	r3, #4
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f001 f853 	bl	80046fc <RCCEx_PLL2_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800365a:	e00e      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3324      	adds	r3, #36	; 0x24
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f001 f8fc 	bl	8004860 <RCCEx_PLL3_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800366c:	e005      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	75fb      	strb	r3, [r7, #23]
      break;
 8003672:	e002      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003674:	bf00      	nop
 8003676:	e000      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003678:	bf00      	nop
    }

    if(ret == HAL_OK)
 800367a:	7dfb      	ldrb	r3, [r7, #23]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10a      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003680:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003684:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800368e:	490d      	ldr	r1, [pc, #52]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003690:	4313      	orrs	r3, r2
 8003692:	658b      	str	r3, [r1, #88]	; 0x58
 8003694:	e001      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003696:	7dfb      	ldrb	r3, [r7, #23]
 8003698:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d035      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036aa:	2b10      	cmp	r3, #16
 80036ac:	d00c      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80036ae:	2b10      	cmp	r3, #16
 80036b0:	d802      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d01b      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80036b6:	e017      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d00c      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80036bc:	2b30      	cmp	r3, #48	; 0x30
 80036be:	d018      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80036c0:	e012      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80036c2:	bf00      	nop
 80036c4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c8:	4baf      	ldr	r3, [pc, #700]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	4aae      	ldr	r2, [pc, #696]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80036ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80036d4:	e00e      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3304      	adds	r3, #4
 80036da:	2102      	movs	r1, #2
 80036dc:	4618      	mov	r0, r3
 80036de:	f001 f80d 	bl	80046fc <RCCEx_PLL2_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80036e6:	e005      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	75fb      	strb	r3, [r7, #23]
      break;
 80036ec:	e002      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80036ee:	bf00      	nop
 80036f0:	e000      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80036f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80036fa:	4ba3      	ldr	r3, [pc, #652]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80036fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003706:	49a0      	ldr	r1, [pc, #640]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003708:	4313      	orrs	r3, r2
 800370a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800370c:	e001      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d042      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003726:	d01f      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800372c:	d805      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003736:	d00e      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003738:	e01f      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800373a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800373e:	d01f      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003744:	d01e      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003746:	e018      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003748:	4b8f      	ldr	r3, [pc, #572]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	4a8e      	ldr	r2, [pc, #568]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800374e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003752:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003754:	e017      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3304      	adds	r3, #4
 800375a:	2100      	movs	r1, #0
 800375c:	4618      	mov	r0, r3
 800375e:	f000 ffcd 	bl	80046fc <RCCEx_PLL2_Config>
 8003762:	4603      	mov	r3, r0
 8003764:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003766:	e00e      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3324      	adds	r3, #36	; 0x24
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f001 f876 	bl	8004860 <RCCEx_PLL3_Config>
 8003774:	4603      	mov	r3, r0
 8003776:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003778:	e005      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	75fb      	strb	r3, [r7, #23]
      break;
 800377e:	e002      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003780:	bf00      	nop
 8003782:	e000      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003784:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003786:	7dfb      	ldrb	r3, [r7, #23]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d109      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800378c:	4b7e      	ldr	r3, [pc, #504]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800378e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003790:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003798:	497b      	ldr	r1, [pc, #492]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	650b      	str	r3, [r1, #80]	; 0x50
 800379e:	e001      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
 80037a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d042      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037b8:	d01b      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80037ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037be:	d805      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d022      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x446>
 80037c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c8:	d00a      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80037ca:	e01b      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80037cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037d0:	d01d      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80037d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037d6:	d01c      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80037d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037dc:	d01b      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80037de:	e011      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3304      	adds	r3, #4
 80037e4:	2101      	movs	r1, #1
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 ff88 	bl	80046fc <RCCEx_PLL2_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80037f0:	e012      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3324      	adds	r3, #36	; 0x24
 80037f6:	2101      	movs	r1, #1
 80037f8:	4618      	mov	r0, r3
 80037fa:	f001 f831 	bl	8004860 <RCCEx_PLL3_Config>
 80037fe:	4603      	mov	r3, r0
 8003800:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003802:	e009      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	75fb      	strb	r3, [r7, #23]
      break;
 8003808:	e006      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800380a:	bf00      	nop
 800380c:	e004      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800380e:	bf00      	nop
 8003810:	e002      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003812:	bf00      	nop
 8003814:	e000      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003816:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003818:	7dfb      	ldrb	r3, [r7, #23]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800381e:	4b5a      	ldr	r3, [pc, #360]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003822:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800382a:	4957      	ldr	r1, [pc, #348]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800382c:	4313      	orrs	r3, r2
 800382e:	650b      	str	r3, [r1, #80]	; 0x50
 8003830:	e001      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003832:	7dfb      	ldrb	r3, [r7, #23]
 8003834:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d044      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800384c:	d01b      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800384e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003852:	d805      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003854:	2b00      	cmp	r3, #0
 8003856:	d022      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003858:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800385c:	d00a      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800385e:	e01b      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003864:	d01d      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003866:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800386a:	d01c      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800386c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003870:	d01b      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003872:	e011      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3304      	adds	r3, #4
 8003878:	2101      	movs	r1, #1
 800387a:	4618      	mov	r0, r3
 800387c:	f000 ff3e 	bl	80046fc <RCCEx_PLL2_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003884:	e012      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3324      	adds	r3, #36	; 0x24
 800388a:	2101      	movs	r1, #1
 800388c:	4618      	mov	r0, r3
 800388e:	f000 ffe7 	bl	8004860 <RCCEx_PLL3_Config>
 8003892:	4603      	mov	r3, r0
 8003894:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003896:	e009      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	75fb      	strb	r3, [r7, #23]
      break;
 800389c:	e006      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800389e:	bf00      	nop
 80038a0:	e004      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80038a2:	bf00      	nop
 80038a4:	e002      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80038a6:	bf00      	nop
 80038a8:	e000      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80038aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10a      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038b2:	4b35      	ldr	r3, [pc, #212]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038c0:	4931      	ldr	r1, [pc, #196]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	658b      	str	r3, [r1, #88]	; 0x58
 80038c6:	e001      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c8:	7dfb      	ldrb	r3, [r7, #23]
 80038ca:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d02d      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038e0:	d005      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80038e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e6:	d009      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x538>
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d013      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80038ec:	e00f      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ee:	4b26      	ldr	r3, [pc, #152]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	4a25      	ldr	r2, [pc, #148]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80038f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80038fa:	e00c      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3304      	adds	r3, #4
 8003900:	2101      	movs	r1, #1
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fefa 	bl	80046fc <RCCEx_PLL2_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800390c:	e003      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	75fb      	strb	r3, [r7, #23]
      break;
 8003912:	e000      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003916:	7dfb      	ldrb	r3, [r7, #23]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d109      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800391c:	4b1a      	ldr	r3, [pc, #104]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800391e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003920:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003928:	4917      	ldr	r1, [pc, #92]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800392a:	4313      	orrs	r3, r2
 800392c:	650b      	str	r3, [r1, #80]	; 0x50
 800392e:	e001      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003930:	7dfb      	ldrb	r3, [r7, #23]
 8003932:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d035      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003944:	2b03      	cmp	r3, #3
 8003946:	d81b      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003948:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800394a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394e:	bf00      	nop
 8003950:	0800398d 	.word	0x0800398d
 8003954:	08003961 	.word	0x08003961
 8003958:	0800396f 	.word	0x0800396f
 800395c:	0800398d 	.word	0x0800398d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003960:	4b09      	ldr	r3, [pc, #36]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	4a08      	ldr	r2, [pc, #32]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800396a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800396c:	e00f      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3304      	adds	r3, #4
 8003972:	2102      	movs	r1, #2
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fec1 	bl	80046fc <RCCEx_PLL2_Config>
 800397a:	4603      	mov	r3, r0
 800397c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800397e:	e006      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	75fb      	strb	r3, [r7, #23]
      break;
 8003984:	e003      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003986:	bf00      	nop
 8003988:	58024400 	.word	0x58024400
      break;
 800398c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800398e:	7dfb      	ldrb	r3, [r7, #23]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d109      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003994:	4bba      	ldr	r3, [pc, #744]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003998:	f023 0203 	bic.w	r2, r3, #3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	49b7      	ldr	r1, [pc, #732]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80039a6:	e001      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a8:	7dfb      	ldrb	r3, [r7, #23]
 80039aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 8086 	beq.w	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039ba:	4bb2      	ldr	r3, [pc, #712]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4ab1      	ldr	r2, [pc, #708]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80039c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039c6:	f7fd fe19 	bl	80015fc <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039cc:	e009      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ce:	f7fd fe15 	bl	80015fc <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b64      	cmp	r3, #100	; 0x64
 80039da:	d902      	bls.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	75fb      	strb	r3, [r7, #23]
        break;
 80039e0:	e005      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039e2:	4ba8      	ldr	r3, [pc, #672]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0ef      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80039ee:	7dfb      	ldrb	r3, [r7, #23]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d166      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80039f4:	4ba2      	ldr	r3, [pc, #648]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80039f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039fe:	4053      	eors	r3, r2
 8003a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d013      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a08:	4b9d      	ldr	r3, [pc, #628]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a10:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a12:	4b9b      	ldr	r3, [pc, #620]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a16:	4a9a      	ldr	r2, [pc, #616]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a1e:	4b98      	ldr	r3, [pc, #608]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	4a97      	ldr	r2, [pc, #604]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a28:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a2a:	4a95      	ldr	r2, [pc, #596]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a3a:	d115      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3c:	f7fd fdde 	bl	80015fc <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a42:	e00b      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a44:	f7fd fdda 	bl	80015fc <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d902      	bls.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	75fb      	strb	r3, [r7, #23]
            break;
 8003a5a:	e005      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a5c:	4b88      	ldr	r3, [pc, #544]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0ed      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003a68:	7dfb      	ldrb	r3, [r7, #23]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d126      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a7c:	d10d      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003a7e:	4b80      	ldr	r3, [pc, #512]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a8c:	0919      	lsrs	r1, r3, #4
 8003a8e:	4b7e      	ldr	r3, [pc, #504]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003a90:	400b      	ands	r3, r1
 8003a92:	497b      	ldr	r1, [pc, #492]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	610b      	str	r3, [r1, #16]
 8003a98:	e005      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003a9a:	4b79      	ldr	r3, [pc, #484]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	4a78      	ldr	r2, [pc, #480]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003aa0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003aa4:	6113      	str	r3, [r2, #16]
 8003aa6:	4b76      	ldr	r3, [pc, #472]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003aa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab4:	4972      	ldr	r1, [pc, #456]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	670b      	str	r3, [r1, #112]	; 0x70
 8003aba:	e004      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
 8003abe:	75bb      	strb	r3, [r7, #22]
 8003ac0:	e001      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac2:	7dfb      	ldrb	r3, [r7, #23]
 8003ac4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d07d      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ad6:	2b28      	cmp	r3, #40	; 0x28
 8003ad8:	d866      	bhi.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003ada:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae0:	08003baf 	.word	0x08003baf
 8003ae4:	08003ba9 	.word	0x08003ba9
 8003ae8:	08003ba9 	.word	0x08003ba9
 8003aec:	08003ba9 	.word	0x08003ba9
 8003af0:	08003ba9 	.word	0x08003ba9
 8003af4:	08003ba9 	.word	0x08003ba9
 8003af8:	08003ba9 	.word	0x08003ba9
 8003afc:	08003ba9 	.word	0x08003ba9
 8003b00:	08003b85 	.word	0x08003b85
 8003b04:	08003ba9 	.word	0x08003ba9
 8003b08:	08003ba9 	.word	0x08003ba9
 8003b0c:	08003ba9 	.word	0x08003ba9
 8003b10:	08003ba9 	.word	0x08003ba9
 8003b14:	08003ba9 	.word	0x08003ba9
 8003b18:	08003ba9 	.word	0x08003ba9
 8003b1c:	08003ba9 	.word	0x08003ba9
 8003b20:	08003b97 	.word	0x08003b97
 8003b24:	08003ba9 	.word	0x08003ba9
 8003b28:	08003ba9 	.word	0x08003ba9
 8003b2c:	08003ba9 	.word	0x08003ba9
 8003b30:	08003ba9 	.word	0x08003ba9
 8003b34:	08003ba9 	.word	0x08003ba9
 8003b38:	08003ba9 	.word	0x08003ba9
 8003b3c:	08003ba9 	.word	0x08003ba9
 8003b40:	08003baf 	.word	0x08003baf
 8003b44:	08003ba9 	.word	0x08003ba9
 8003b48:	08003ba9 	.word	0x08003ba9
 8003b4c:	08003ba9 	.word	0x08003ba9
 8003b50:	08003ba9 	.word	0x08003ba9
 8003b54:	08003ba9 	.word	0x08003ba9
 8003b58:	08003ba9 	.word	0x08003ba9
 8003b5c:	08003ba9 	.word	0x08003ba9
 8003b60:	08003baf 	.word	0x08003baf
 8003b64:	08003ba9 	.word	0x08003ba9
 8003b68:	08003ba9 	.word	0x08003ba9
 8003b6c:	08003ba9 	.word	0x08003ba9
 8003b70:	08003ba9 	.word	0x08003ba9
 8003b74:	08003ba9 	.word	0x08003ba9
 8003b78:	08003ba9 	.word	0x08003ba9
 8003b7c:	08003ba9 	.word	0x08003ba9
 8003b80:	08003baf 	.word	0x08003baf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3304      	adds	r3, #4
 8003b88:	2101      	movs	r1, #1
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fdb6 	bl	80046fc <RCCEx_PLL2_Config>
 8003b90:	4603      	mov	r3, r0
 8003b92:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003b94:	e00c      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3324      	adds	r3, #36	; 0x24
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fe5f 	bl	8004860 <RCCEx_PLL3_Config>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ba6:	e003      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	75fb      	strb	r3, [r7, #23]
      break;
 8003bac:	e000      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003bae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb0:	7dfb      	ldrb	r3, [r7, #23]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003bb6:	4b32      	ldr	r3, [pc, #200]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bc2:	492f      	ldr	r1, [pc, #188]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	654b      	str	r3, [r1, #84]	; 0x54
 8003bc8:	e001      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
 8003bcc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d037      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bde:	2b05      	cmp	r3, #5
 8003be0:	d820      	bhi.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003be2:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be8:	08003c2b 	.word	0x08003c2b
 8003bec:	08003c01 	.word	0x08003c01
 8003bf0:	08003c13 	.word	0x08003c13
 8003bf4:	08003c2b 	.word	0x08003c2b
 8003bf8:	08003c2b 	.word	0x08003c2b
 8003bfc:	08003c2b 	.word	0x08003c2b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3304      	adds	r3, #4
 8003c04:	2101      	movs	r1, #1
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fd78 	bl	80046fc <RCCEx_PLL2_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c10:	e00c      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3324      	adds	r3, #36	; 0x24
 8003c16:	2101      	movs	r1, #1
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fe21 	bl	8004860 <RCCEx_PLL3_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c22:	e003      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	75fb      	strb	r3, [r7, #23]
      break;
 8003c28:	e000      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c32:	4b13      	ldr	r3, [pc, #76]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	f023 0207 	bic.w	r2, r3, #7
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3e:	4910      	ldr	r1, [pc, #64]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	654b      	str	r3, [r1, #84]	; 0x54
 8003c44:	e001      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
 8003c48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d040      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5c:	2b05      	cmp	r3, #5
 8003c5e:	d827      	bhi.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8003c60:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8003c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c66:	bf00      	nop
 8003c68:	08003cb7 	.word	0x08003cb7
 8003c6c:	08003c8d 	.word	0x08003c8d
 8003c70:	08003c9f 	.word	0x08003c9f
 8003c74:	08003cb7 	.word	0x08003cb7
 8003c78:	08003cb7 	.word	0x08003cb7
 8003c7c:	08003cb7 	.word	0x08003cb7
 8003c80:	58024400 	.word	0x58024400
 8003c84:	58024800 	.word	0x58024800
 8003c88:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	2101      	movs	r1, #1
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fd32 	bl	80046fc <RCCEx_PLL2_Config>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003c9c:	e00c      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3324      	adds	r3, #36	; 0x24
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fddb 	bl	8004860 <RCCEx_PLL3_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003cae:	e003      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb4:	e000      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8003cb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10a      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cbe:	4bb2      	ldr	r3, [pc, #712]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc2:	f023 0207 	bic.w	r2, r3, #7
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ccc:	49ae      	ldr	r1, [pc, #696]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	658b      	str	r3, [r1, #88]	; 0x58
 8003cd2:	e001      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd4:	7dfb      	ldrb	r3, [r7, #23]
 8003cd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d044      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cee:	d01b      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf4:	d805      	bhi.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d022      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003cfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cfe:	d00a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003d00:	e01b      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d06:	d01d      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8003d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d0c:	d01c      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003d0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d12:	d01b      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003d14:	e011      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fced 	bl	80046fc <RCCEx_PLL2_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003d26:	e012      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3324      	adds	r3, #36	; 0x24
 8003d2c:	2102      	movs	r1, #2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fd96 	bl	8004860 <RCCEx_PLL3_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003d38:	e009      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d3e:	e006      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003d40:	bf00      	nop
 8003d42:	e004      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003d44:	bf00      	nop
 8003d46:	e002      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003d48:	bf00      	nop
 8003d4a:	e000      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d54:	4b8c      	ldr	r3, [pc, #560]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d58:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d62:	4989      	ldr	r1, [pc, #548]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	654b      	str	r3, [r1, #84]	; 0x54
 8003d68:	e001      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
 8003d6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d044      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d84:	d01b      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8003d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d8a:	d805      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d022      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d94:	d00a      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003d96:	e01b      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8003d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9c:	d01d      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003d9e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003da2:	d01c      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003da4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003da8:	d01b      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8003daa:	e011      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fca2 	bl	80046fc <RCCEx_PLL2_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003dbc:	e012      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3324      	adds	r3, #36	; 0x24
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fd4b 	bl	8004860 <RCCEx_PLL3_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003dce:	e009      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd4:	e006      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003dd6:	bf00      	nop
 8003dd8:	e004      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003dda:	bf00      	nop
 8003ddc:	e002      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003de4:	7dfb      	ldrb	r3, [r7, #23]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dea:	4b67      	ldr	r3, [pc, #412]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003df8:	4963      	ldr	r1, [pc, #396]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	658b      	str	r3, [r1, #88]	; 0x58
 8003dfe:	e001      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
 8003e02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d044      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e1a:	d01b      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8003e1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e20:	d805      	bhi.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d022      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e2a:	d00a      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003e2c:	e01b      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8003e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e32:	d01d      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003e34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e38:	d01c      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8003e3a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e3e:	d01b      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8003e40:	e011      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3304      	adds	r3, #4
 8003e46:	2100      	movs	r1, #0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fc57 	bl	80046fc <RCCEx_PLL2_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e52:	e012      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3324      	adds	r3, #36	; 0x24
 8003e58:	2102      	movs	r1, #2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fd00 	bl	8004860 <RCCEx_PLL3_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e64:	e009      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	75fb      	strb	r3, [r7, #23]
      break;
 8003e6a:	e006      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003e6c:	bf00      	nop
 8003e6e:	e004      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003e70:	bf00      	nop
 8003e72:	e002      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003e74:	bf00      	nop
 8003e76:	e000      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003e78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e80:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e8e:	493e      	ldr	r1, [pc, #248]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	658b      	str	r3, [r1, #88]	; 0x58
 8003e94:	e001      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e96:	7dfb      	ldrb	r3, [r7, #23]
 8003e98:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d01a      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb0:	d10a      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3324      	adds	r3, #36	; 0x24
 8003eb6:	2102      	movs	r1, #2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fcd1 	bl	8004860 <RCCEx_PLL3_Config>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003ec8:	4b2f      	ldr	r3, [pc, #188]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ecc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed6:	492c      	ldr	r1, [pc, #176]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01a      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ef2:	d10a      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3324      	adds	r3, #36	; 0x24
 8003ef8:	2102      	movs	r1, #2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fcb0 	bl	8004860 <RCCEx_PLL3_Config>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f0a:	4b1f      	ldr	r3, [pc, #124]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f18:	491b      	ldr	r1, [pc, #108]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d032      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f34:	d00d      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8003f36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f3a:	d016      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d111      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3304      	adds	r3, #4
 8003f44:	2100      	movs	r1, #0
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fbd8 	bl	80046fc <RCCEx_PLL2_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f50:	e00c      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3324      	adds	r3, #36	; 0x24
 8003f56:	2102      	movs	r1, #2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fc81 	bl	8004860 <RCCEx_PLL3_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f62:	e003      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	75fb      	strb	r3, [r7, #23]
      break;
 8003f68:	e000      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8003f6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f72:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f80:	4901      	ldr	r1, [pc, #4]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	658b      	str	r3, [r1, #88]	; 0x58
 8003f86:	e003      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8003f88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
 8003f8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d02f      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fa6:	d00c      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003fa8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fac:	d015      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8003fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fb2:	d10f      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb4:	4b79      	ldr	r3, [pc, #484]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	4a78      	ldr	r2, [pc, #480]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003fc0:	e00c      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3324      	adds	r3, #36	; 0x24
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fc49 	bl	8004860 <RCCEx_PLL3_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003fd2:	e003      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd8:	e000      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8003fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10a      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fe2:	4b6e      	ldr	r3, [pc, #440]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff0:	496a      	ldr	r1, [pc, #424]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	654b      	str	r3, [r1, #84]	; 0x54
 8003ff6:	e001      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d029      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004014:	d007      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8004016:	e00f      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004018:	4b60      	ldr	r3, [pc, #384]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	4a5f      	ldr	r2, [pc, #380]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800401e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004022:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004024:	e00b      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3304      	adds	r3, #4
 800402a:	2102      	movs	r1, #2
 800402c:	4618      	mov	r0, r3
 800402e:	f000 fb65 	bl	80046fc <RCCEx_PLL2_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004036:	e002      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	75fb      	strb	r3, [r7, #23]
      break;
 800403c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800403e:	7dfb      	ldrb	r3, [r7, #23]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d109      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004044:	4b55      	ldr	r3, [pc, #340]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004048:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004050:	4952      	ldr	r1, [pc, #328]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004052:	4313      	orrs	r3, r2
 8004054:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004056:	e001      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004058:	7dfb      	ldrb	r3, [r7, #23]
 800405a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00a      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3324      	adds	r3, #36	; 0x24
 800406c:	2102      	movs	r1, #2
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fbf6 	bl	8004860 <RCCEx_PLL3_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d02f      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800408e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004092:	d00c      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004098:	d802      	bhi.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d011      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800409e:	e00d      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80040a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a4:	d00f      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80040a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040aa:	d00e      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80040ac:	e006      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ae:	4b3b      	ldr	r3, [pc, #236]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	4a3a      	ldr	r2, [pc, #232]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80040b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80040ba:	e007      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	75fb      	strb	r3, [r7, #23]
      break;
 80040c0:	e004      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80040c2:	bf00      	nop
 80040c4:	e002      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80040c6:	bf00      	nop
 80040c8:	e000      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80040ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040cc:	7dfb      	ldrb	r3, [r7, #23]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040d2:	4b32      	ldr	r3, [pc, #200]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80040d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040de:	492f      	ldr	r1, [pc, #188]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	654b      	str	r3, [r1, #84]	; 0x54
 80040e4:	e001      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e6:	7dfb      	ldrb	r3, [r7, #23]
 80040e8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040f6:	4b29      	ldr	r3, [pc, #164]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80040f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004102:	4926      	ldr	r1, [pc, #152]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004104:	4313      	orrs	r3, r2
 8004106:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d009      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004114:	4b21      	ldr	r3, [pc, #132]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004122:	491e      	ldr	r1, [pc, #120]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004124:	4313      	orrs	r3, r2
 8004126:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d008      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004134:	4b19      	ldr	r3, [pc, #100]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004138:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004140:	4916      	ldr	r1, [pc, #88]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004142:	4313      	orrs	r3, r2
 8004144:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00d      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004152:	4b12      	ldr	r3, [pc, #72]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	4a11      	ldr	r2, [pc, #68]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004158:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800415c:	6113      	str	r3, [r2, #16]
 800415e:	4b0f      	ldr	r3, [pc, #60]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004168:	490c      	ldr	r1, [pc, #48]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800416a:	4313      	orrs	r3, r2
 800416c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	da08      	bge.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004176:	4b09      	ldr	r3, [pc, #36]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004182:	4906      	ldr	r1, [pc, #24]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004184:	4313      	orrs	r3, r2
 8004186:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004188:	7dbb      	ldrb	r3, [r7, #22]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	e000      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
}
 8004194:	4618      	mov	r0, r3
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	58024400 	.word	0x58024400

080041a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80041a4:	f7ff f8b2 	bl	800330c <HAL_RCC_GetHCLKFreq>
 80041a8:	4601      	mov	r1, r0
 80041aa:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	4a04      	ldr	r2, [pc, #16]	; (80041c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80041b6:	5cd3      	ldrb	r3, [r2, r3]
 80041b8:	f003 031f 	and.w	r3, r3, #31
 80041bc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	58024400 	.word	0x58024400
 80041c8:	08008ed0 	.word	0x08008ed0

080041cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b089      	sub	sp, #36	; 0x24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041d4:	4b9d      	ldr	r3, [pc, #628]	; (800444c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80041de:	4b9b      	ldr	r3, [pc, #620]	; (800444c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	0b1b      	lsrs	r3, r3, #12
 80041e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80041ea:	4b98      	ldr	r3, [pc, #608]	; (800444c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	091b      	lsrs	r3, r3, #4
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80041f6:	4b95      	ldr	r3, [pc, #596]	; (800444c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80041f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fa:	08db      	lsrs	r3, r3, #3
 80041fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	fb02 f303 	mul.w	r3, r2, r3
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 810a 	beq.w	800442e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d05a      	beq.n	80042d6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004220:	2b01      	cmp	r3, #1
 8004222:	d302      	bcc.n	800422a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004224:	2b02      	cmp	r3, #2
 8004226:	d078      	beq.n	800431a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004228:	e099      	b.n	800435e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800422a:	4b88      	ldr	r3, [pc, #544]	; (800444c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	d02d      	beq.n	8004292 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004236:	4b85      	ldr	r3, [pc, #532]	; (800444c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	08db      	lsrs	r3, r3, #3
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	4a83      	ldr	r2, [pc, #524]	; (8004450 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004242:	fa22 f303 	lsr.w	r3, r2, r3
 8004246:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	ee07 3a90 	vmov	s15, r3
 8004258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004260:	4b7a      	ldr	r3, [pc, #488]	; (800444c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004268:	ee07 3a90 	vmov	s15, r3
 800426c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004270:	ed97 6a03 	vldr	s12, [r7, #12]
 8004274:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004454 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004278:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800427c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004280:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004284:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800428c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004290:	e087      	b.n	80043a2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	ee07 3a90 	vmov	s15, r3
 8004298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80042a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042a4:	4b69      	ldr	r3, [pc, #420]	; (800444c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ac:	ee07 3a90 	vmov	s15, r3
 80042b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80042b8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004454 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80042bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042d4:	e065      	b.n	80043a2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	ee07 3a90 	vmov	s15, r3
 80042dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800445c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80042e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042e8:	4b58      	ldr	r3, [pc, #352]	; (800444c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f0:	ee07 3a90 	vmov	s15, r3
 80042f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80042fc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004454 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004300:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004304:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004308:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800430c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004314:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004318:	e043      	b.n	80043a2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	ee07 3a90 	vmov	s15, r3
 8004320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004324:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004460 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004328:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800432c:	4b47      	ldr	r3, [pc, #284]	; (800444c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004334:	ee07 3a90 	vmov	s15, r3
 8004338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004340:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004454 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004344:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004348:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800434c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004350:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004358:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800435c:	e021      	b.n	80043a2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	ee07 3a90 	vmov	s15, r3
 8004364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004368:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800445c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800436c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004370:	4b36      	ldr	r3, [pc, #216]	; (800444c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004378:	ee07 3a90 	vmov	s15, r3
 800437c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004380:	ed97 6a03 	vldr	s12, [r7, #12]
 8004384:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004454 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004388:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800438c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004390:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004394:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043a0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80043a2:	4b2a      	ldr	r3, [pc, #168]	; (800444c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80043a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a6:	0a5b      	lsrs	r3, r3, #9
 80043a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043ac:	ee07 3a90 	vmov	s15, r3
 80043b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80043c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043c8:	ee17 2a90 	vmov	r2, s15
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80043d0:	4b1e      	ldr	r3, [pc, #120]	; (800444c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	0c1b      	lsrs	r3, r3, #16
 80043d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80043ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043f6:	ee17 2a90 	vmov	r2, s15
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80043fe:	4b13      	ldr	r3, [pc, #76]	; (800444c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	0e1b      	lsrs	r3, r3, #24
 8004404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004408:	ee07 3a90 	vmov	s15, r3
 800440c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004410:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004414:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004418:	edd7 6a07 	vldr	s13, [r7, #28]
 800441c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004424:	ee17 2a90 	vmov	r2, s15
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800442c:	e008      	b.n	8004440 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	609a      	str	r2, [r3, #8]
}
 8004440:	bf00      	nop
 8004442:	3724      	adds	r7, #36	; 0x24
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	58024400 	.word	0x58024400
 8004450:	03d09000 	.word	0x03d09000
 8004454:	46000000 	.word	0x46000000
 8004458:	4c742400 	.word	0x4c742400
 800445c:	4a742400 	.word	0x4a742400
 8004460:	4c189680 	.word	0x4c189680

08004464 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004464:	b480      	push	{r7}
 8004466:	b089      	sub	sp, #36	; 0x24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800446c:	4b9d      	ldr	r3, [pc, #628]	; (80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004476:	4b9b      	ldr	r3, [pc, #620]	; (80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	0d1b      	lsrs	r3, r3, #20
 800447c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004480:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004482:	4b98      	ldr	r3, [pc, #608]	; (80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	0a1b      	lsrs	r3, r3, #8
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800448e:	4b95      	ldr	r3, [pc, #596]	; (80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	08db      	lsrs	r3, r3, #3
 8004494:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 810a 	beq.w	80046c6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d05a      	beq.n	800456e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d302      	bcc.n	80044c2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d078      	beq.n	80045b2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80044c0:	e099      	b.n	80045f6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044c2:	4b88      	ldr	r3, [pc, #544]	; (80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d02d      	beq.n	800452a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044ce:	4b85      	ldr	r3, [pc, #532]	; (80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	08db      	lsrs	r3, r3, #3
 80044d4:	f003 0303 	and.w	r3, r3, #3
 80044d8:	4a83      	ldr	r2, [pc, #524]	; (80046e8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80044da:	fa22 f303 	lsr.w	r3, r2, r3
 80044de:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	ee07 3a90 	vmov	s15, r3
 80044e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	ee07 3a90 	vmov	s15, r3
 80044f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044f8:	4b7a      	ldr	r3, [pc, #488]	; (80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004500:	ee07 3a90 	vmov	s15, r3
 8004504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004508:	ed97 6a03 	vldr	s12, [r7, #12]
 800450c:	eddf 5a77 	vldr	s11, [pc, #476]	; 80046ec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004510:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004518:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800451c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004524:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004528:	e087      	b.n	800463a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	ee07 3a90 	vmov	s15, r3
 8004530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004534:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80046f0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800453c:	4b69      	ldr	r3, [pc, #420]	; (80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004544:	ee07 3a90 	vmov	s15, r3
 8004548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800454c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004550:	eddf 5a66 	vldr	s11, [pc, #408]	; 80046ec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800455c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004568:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800456c:	e065      	b.n	800463a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	ee07 3a90 	vmov	s15, r3
 8004574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004578:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80046f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800457c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004580:	4b58      	ldr	r3, [pc, #352]	; (80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004590:	ed97 6a03 	vldr	s12, [r7, #12]
 8004594:	eddf 5a55 	vldr	s11, [pc, #340]	; 80046ec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004598:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800459c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045b0:	e043      	b.n	800463a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	ee07 3a90 	vmov	s15, r3
 80045b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045bc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80045c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c4:	4b47      	ldr	r3, [pc, #284]	; (80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045cc:	ee07 3a90 	vmov	s15, r3
 80045d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80045d8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80046ec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80045dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045f4:	e021      	b.n	800463a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	ee07 3a90 	vmov	s15, r3
 80045fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004600:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80046f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004608:	4b36      	ldr	r3, [pc, #216]	; (80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004610:	ee07 3a90 	vmov	s15, r3
 8004614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004618:	ed97 6a03 	vldr	s12, [r7, #12]
 800461c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80046ec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004620:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004624:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004628:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800462c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004634:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004638:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800463a:	4b2a      	ldr	r3, [pc, #168]	; (80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	0a5b      	lsrs	r3, r3, #9
 8004640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004644:	ee07 3a90 	vmov	s15, r3
 8004648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004650:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004654:	edd7 6a07 	vldr	s13, [r7, #28]
 8004658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800465c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004660:	ee17 2a90 	vmov	r2, s15
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004668:	4b1e      	ldr	r3, [pc, #120]	; (80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	0c1b      	lsrs	r3, r3, #16
 800466e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800467e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004682:	edd7 6a07 	vldr	s13, [r7, #28]
 8004686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800468a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800468e:	ee17 2a90 	vmov	r2, s15
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004696:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	0e1b      	lsrs	r3, r3, #24
 800469c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046a0:	ee07 3a90 	vmov	s15, r3
 80046a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80046b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046bc:	ee17 2a90 	vmov	r2, s15
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80046c4:	e008      	b.n	80046d8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	609a      	str	r2, [r3, #8]
}
 80046d8:	bf00      	nop
 80046da:	3724      	adds	r7, #36	; 0x24
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	58024400 	.word	0x58024400
 80046e8:	03d09000 	.word	0x03d09000
 80046ec:	46000000 	.word	0x46000000
 80046f0:	4c742400 	.word	0x4c742400
 80046f4:	4a742400 	.word	0x4a742400
 80046f8:	4c189680 	.word	0x4c189680

080046fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800470a:	4b53      	ldr	r3, [pc, #332]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	2b03      	cmp	r3, #3
 8004714:	d101      	bne.n	800471a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e099      	b.n	800484e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800471a:	4b4f      	ldr	r3, [pc, #316]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a4e      	ldr	r2, [pc, #312]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 8004720:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004726:	f7fc ff69 	bl	80015fc <HAL_GetTick>
 800472a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800472c:	e008      	b.n	8004740 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800472e:	f7fc ff65 	bl	80015fc <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e086      	b.n	800484e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004740:	4b45      	ldr	r3, [pc, #276]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1f0      	bne.n	800472e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800474c:	4b42      	ldr	r3, [pc, #264]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	031b      	lsls	r3, r3, #12
 800475a:	493f      	ldr	r1, [pc, #252]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 800475c:	4313      	orrs	r3, r2
 800475e:	628b      	str	r3, [r1, #40]	; 0x28
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	3b01      	subs	r3, #1
 8004766:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	3b01      	subs	r3, #1
 8004770:	025b      	lsls	r3, r3, #9
 8004772:	b29b      	uxth	r3, r3
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	3b01      	subs	r3, #1
 800477c:	041b      	lsls	r3, r3, #16
 800477e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	3b01      	subs	r3, #1
 800478a:	061b      	lsls	r3, r3, #24
 800478c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004790:	4931      	ldr	r1, [pc, #196]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 8004792:	4313      	orrs	r3, r2
 8004794:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004796:	4b30      	ldr	r3, [pc, #192]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	492d      	ldr	r1, [pc, #180]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80047a8:	4b2b      	ldr	r3, [pc, #172]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	f023 0220 	bic.w	r2, r3, #32
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	4928      	ldr	r1, [pc, #160]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80047ba:	4b27      	ldr	r3, [pc, #156]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	4a26      	ldr	r2, [pc, #152]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 80047c0:	f023 0310 	bic.w	r3, r3, #16
 80047c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80047c6:	4b24      	ldr	r3, [pc, #144]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 80047c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047ca:	4b24      	ldr	r3, [pc, #144]	; (800485c <RCCEx_PLL2_Config+0x160>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	69d2      	ldr	r2, [r2, #28]
 80047d2:	00d2      	lsls	r2, r2, #3
 80047d4:	4920      	ldr	r1, [pc, #128]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80047da:	4b1f      	ldr	r3, [pc, #124]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	4a1e      	ldr	r2, [pc, #120]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 80047e0:	f043 0310 	orr.w	r3, r3, #16
 80047e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d106      	bne.n	80047fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80047ec:	4b1a      	ldr	r3, [pc, #104]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	4a19      	ldr	r2, [pc, #100]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 80047f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047f8:	e00f      	b.n	800481a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d106      	bne.n	800480e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004800:	4b15      	ldr	r3, [pc, #84]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	4a14      	ldr	r2, [pc, #80]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 8004806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800480a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800480c:	e005      	b.n	800481a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800480e:	4b12      	ldr	r3, [pc, #72]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	4a11      	ldr	r2, [pc, #68]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 8004814:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004818:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800481a:	4b0f      	ldr	r3, [pc, #60]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a0e      	ldr	r2, [pc, #56]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 8004820:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004826:	f7fc fee9 	bl	80015fc <HAL_GetTick>
 800482a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800482c:	e008      	b.n	8004840 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800482e:	f7fc fee5 	bl	80015fc <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e006      	b.n	800484e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004840:	4b05      	ldr	r3, [pc, #20]	; (8004858 <RCCEx_PLL2_Config+0x15c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f0      	beq.n	800482e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800484c:	7bfb      	ldrb	r3, [r7, #15]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	58024400 	.word	0x58024400
 800485c:	ffff0007 	.word	0xffff0007

08004860 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800486e:	4b53      	ldr	r3, [pc, #332]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 8004870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	2b03      	cmp	r3, #3
 8004878:	d101      	bne.n	800487e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e099      	b.n	80049b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800487e:	4b4f      	ldr	r3, [pc, #316]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a4e      	ldr	r2, [pc, #312]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 8004884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004888:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800488a:	f7fc feb7 	bl	80015fc <HAL_GetTick>
 800488e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004890:	e008      	b.n	80048a4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004892:	f7fc feb3 	bl	80015fc <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e086      	b.n	80049b2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048a4:	4b45      	ldr	r3, [pc, #276]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f0      	bne.n	8004892 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80048b0:	4b42      	ldr	r3, [pc, #264]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	051b      	lsls	r3, r3, #20
 80048be:	493f      	ldr	r1, [pc, #252]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	628b      	str	r3, [r1, #40]	; 0x28
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	3b01      	subs	r3, #1
 80048ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	025b      	lsls	r3, r3, #9
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	3b01      	subs	r3, #1
 80048e0:	041b      	lsls	r3, r3, #16
 80048e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	061b      	lsls	r3, r3, #24
 80048f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048f4:	4931      	ldr	r1, [pc, #196]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80048fa:	4b30      	ldr	r3, [pc, #192]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 80048fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	492d      	ldr	r1, [pc, #180]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 8004908:	4313      	orrs	r3, r2
 800490a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800490c:	4b2b      	ldr	r3, [pc, #172]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	4928      	ldr	r1, [pc, #160]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 800491a:	4313      	orrs	r3, r2
 800491c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800491e:	4b27      	ldr	r3, [pc, #156]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	4a26      	ldr	r2, [pc, #152]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 8004924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004928:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800492a:	4b24      	ldr	r3, [pc, #144]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 800492c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800492e:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <RCCEx_PLL3_Config+0x160>)
 8004930:	4013      	ands	r3, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	69d2      	ldr	r2, [r2, #28]
 8004936:	00d2      	lsls	r2, r2, #3
 8004938:	4920      	ldr	r1, [pc, #128]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 800493a:	4313      	orrs	r3, r2
 800493c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800493e:	4b1f      	ldr	r3, [pc, #124]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	4a1e      	ldr	r2, [pc, #120]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 8004944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004948:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d106      	bne.n	800495e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004950:	4b1a      	ldr	r3, [pc, #104]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	4a19      	ldr	r2, [pc, #100]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 8004956:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800495a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800495c:	e00f      	b.n	800497e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d106      	bne.n	8004972 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004964:	4b15      	ldr	r3, [pc, #84]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	4a14      	ldr	r2, [pc, #80]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 800496a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800496e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004970:	e005      	b.n	800497e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004972:	4b12      	ldr	r3, [pc, #72]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	4a11      	ldr	r2, [pc, #68]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 8004978:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800497c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800497e:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a0e      	ldr	r2, [pc, #56]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 8004984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800498a:	f7fc fe37 	bl	80015fc <HAL_GetTick>
 800498e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004990:	e008      	b.n	80049a4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004992:	f7fc fe33 	bl	80015fc <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e006      	b.n	80049b2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049a4:	4b05      	ldr	r3, [pc, #20]	; (80049bc <RCCEx_PLL3_Config+0x15c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0f0      	beq.n	8004992 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	58024400 	.word	0x58024400
 80049c0:	ffff0007 	.word	0xffff0007

080049c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e049      	b.n	8004a6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fc fc0e 	bl	800120c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3304      	adds	r3, #4
 8004a00:	4619      	mov	r1, r3
 8004a02:	4610      	mov	r0, r2
 8004a04:	f000 f934 	bl	8004c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d001      	beq.n	8004a8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e019      	b.n	8004ac0 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <HAL_TIM_Base_Start+0x58>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b06      	cmp	r3, #6
 8004aa4:	d00b      	beq.n	8004abe <HAL_TIM_Base_Start+0x4a>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aac:	d007      	beq.n	8004abe <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f042 0201 	orr.w	r2, r2, #1
 8004abc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	00010007 	.word	0x00010007

08004ad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_TIM_ConfigClockSource+0x18>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e0b7      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x188>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4b57      	ldr	r3, [pc, #348]	; (8004c60 <HAL_TIM_ConfigClockSource+0x190>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b70      	cmp	r3, #112	; 0x70
 8004b1e:	d02e      	beq.n	8004b7e <HAL_TIM_ConfigClockSource+0xae>
 8004b20:	2b70      	cmp	r3, #112	; 0x70
 8004b22:	d812      	bhi.n	8004b4a <HAL_TIM_ConfigClockSource+0x7a>
 8004b24:	2b30      	cmp	r3, #48	; 0x30
 8004b26:	f000 8084 	beq.w	8004c32 <HAL_TIM_ConfigClockSource+0x162>
 8004b2a:	2b30      	cmp	r3, #48	; 0x30
 8004b2c:	d806      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x6c>
 8004b2e:	2b10      	cmp	r3, #16
 8004b30:	d07f      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x162>
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d07d      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x162>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d07b      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004b3a:	e084      	b.n	8004c46 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8004b3c:	2b50      	cmp	r3, #80	; 0x50
 8004b3e:	d048      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0x102>
 8004b40:	2b60      	cmp	r3, #96	; 0x60
 8004b42:	d056      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x122>
 8004b44:	2b40      	cmp	r3, #64	; 0x40
 8004b46:	d064      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8004b48:	e07d      	b.n	8004c46 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8004b4a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004b4e:	d070      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x162>
 8004b50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004b54:	d809      	bhi.n	8004b6a <HAL_TIM_ConfigClockSource+0x9a>
 8004b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b5a:	d027      	beq.n	8004bac <HAL_TIM_ConfigClockSource+0xdc>
 8004b5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b60:	d067      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x162>
 8004b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b66:	d06d      	beq.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b68:	e06d      	b.n	8004c46 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8004b6a:	4a3e      	ldr	r2, [pc, #248]	; (8004c64 <HAL_TIM_ConfigClockSource+0x194>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d060      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x162>
 8004b70:	4a3d      	ldr	r2, [pc, #244]	; (8004c68 <HAL_TIM_ConfigClockSource+0x198>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d05d      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x162>
 8004b76:	4a3d      	ldr	r2, [pc, #244]	; (8004c6c <HAL_TIM_ConfigClockSource+0x19c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d05a      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8004b7c:	e063      	b.n	8004c46 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	6899      	ldr	r1, [r3, #8]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f000 f987 	bl	8004ea0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ba0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	609a      	str	r2, [r3, #8]
      break;
 8004baa:	e04c      	b.n	8004c46 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	6899      	ldr	r1, [r3, #8]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f000 f970 	bl	8004ea0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bce:	609a      	str	r2, [r3, #8]
      break;
 8004bd0:	e039      	b.n	8004c46 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6859      	ldr	r1, [r3, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	461a      	mov	r2, r3
 8004be0:	f000 f8e0 	bl	8004da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2150      	movs	r1, #80	; 0x50
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 f93a 	bl	8004e64 <TIM_ITRx_SetConfig>
      break;
 8004bf0:	e029      	b.n	8004c46 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6818      	ldr	r0, [r3, #0]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	6859      	ldr	r1, [r3, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f000 f8ff 	bl	8004e02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2160      	movs	r1, #96	; 0x60
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 f92a 	bl	8004e64 <TIM_ITRx_SetConfig>
      break;
 8004c10:	e019      	b.n	8004c46 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6818      	ldr	r0, [r3, #0]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	6859      	ldr	r1, [r3, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f000 f8c0 	bl	8004da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2140      	movs	r1, #64	; 0x40
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 f91a 	bl	8004e64 <TIM_ITRx_SetConfig>
      break;
 8004c30:	e009      	b.n	8004c46 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	f000 f911 	bl	8004e64 <TIM_ITRx_SetConfig>
      break;
 8004c42:	e000      	b.n	8004c46 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004c44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	ffceff88 	.word	0xffceff88
 8004c64:	00100030 	.word	0x00100030
 8004c68:	00100040 	.word	0x00100040
 8004c6c:	00100020 	.word	0x00100020

08004c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a40      	ldr	r2, [pc, #256]	; (8004d84 <TIM_Base_SetConfig+0x114>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d013      	beq.n	8004cb0 <TIM_Base_SetConfig+0x40>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8e:	d00f      	beq.n	8004cb0 <TIM_Base_SetConfig+0x40>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a3d      	ldr	r2, [pc, #244]	; (8004d88 <TIM_Base_SetConfig+0x118>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00b      	beq.n	8004cb0 <TIM_Base_SetConfig+0x40>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a3c      	ldr	r2, [pc, #240]	; (8004d8c <TIM_Base_SetConfig+0x11c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d007      	beq.n	8004cb0 <TIM_Base_SetConfig+0x40>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a3b      	ldr	r2, [pc, #236]	; (8004d90 <TIM_Base_SetConfig+0x120>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_Base_SetConfig+0x40>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a3a      	ldr	r2, [pc, #232]	; (8004d94 <TIM_Base_SetConfig+0x124>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d108      	bne.n	8004cc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a2f      	ldr	r2, [pc, #188]	; (8004d84 <TIM_Base_SetConfig+0x114>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d01f      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd0:	d01b      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a2c      	ldr	r2, [pc, #176]	; (8004d88 <TIM_Base_SetConfig+0x118>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d017      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a2b      	ldr	r2, [pc, #172]	; (8004d8c <TIM_Base_SetConfig+0x11c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a2a      	ldr	r2, [pc, #168]	; (8004d90 <TIM_Base_SetConfig+0x120>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00f      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a29      	ldr	r2, [pc, #164]	; (8004d94 <TIM_Base_SetConfig+0x124>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00b      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a28      	ldr	r2, [pc, #160]	; (8004d98 <TIM_Base_SetConfig+0x128>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d007      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a27      	ldr	r2, [pc, #156]	; (8004d9c <TIM_Base_SetConfig+0x12c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d003      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a26      	ldr	r2, [pc, #152]	; (8004da0 <TIM_Base_SetConfig+0x130>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d108      	bne.n	8004d1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a10      	ldr	r2, [pc, #64]	; (8004d84 <TIM_Base_SetConfig+0x114>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d00f      	beq.n	8004d68 <TIM_Base_SetConfig+0xf8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a12      	ldr	r2, [pc, #72]	; (8004d94 <TIM_Base_SetConfig+0x124>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00b      	beq.n	8004d68 <TIM_Base_SetConfig+0xf8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a11      	ldr	r2, [pc, #68]	; (8004d98 <TIM_Base_SetConfig+0x128>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d007      	beq.n	8004d68 <TIM_Base_SetConfig+0xf8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a10      	ldr	r2, [pc, #64]	; (8004d9c <TIM_Base_SetConfig+0x12c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d003      	beq.n	8004d68 <TIM_Base_SetConfig+0xf8>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a0f      	ldr	r2, [pc, #60]	; (8004da0 <TIM_Base_SetConfig+0x130>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d103      	bne.n	8004d70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	615a      	str	r2, [r3, #20]
}
 8004d76:	bf00      	nop
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40010000 	.word	0x40010000
 8004d88:	40000400 	.word	0x40000400
 8004d8c:	40000800 	.word	0x40000800
 8004d90:	40000c00 	.word	0x40000c00
 8004d94:	40010400 	.word	0x40010400
 8004d98:	40014000 	.word	0x40014000
 8004d9c:	40014400 	.word	0x40014400
 8004da0:	40014800 	.word	0x40014800

08004da4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	f023 0201 	bic.w	r2, r3, #1
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	011b      	lsls	r3, r3, #4
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f023 030a 	bic.w	r3, r3, #10
 8004de0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	621a      	str	r2, [r3, #32]
}
 8004df6:	bf00      	nop
 8004df8:	371c      	adds	r7, #28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b087      	sub	sp, #28
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f023 0210 	bic.w	r2, r3, #16
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	031b      	lsls	r3, r3, #12
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	621a      	str	r2, [r3, #32]
}
 8004e56:	bf00      	nop
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
	...

08004e64 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <TIM_ITRx_SetConfig+0x38>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f043 0307 	orr.w	r3, r3, #7
 8004e86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	609a      	str	r2, [r3, #8]
}
 8004e8e:	bf00      	nop
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	ffcfff8f 	.word	0xffcfff8f

08004ea0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	021a      	lsls	r2, r3, #8
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	609a      	str	r2, [r3, #8]
}
 8004ed4:	bf00      	nop
 8004ed6:	371c      	adds	r7, #28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e068      	b.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a2e      	ldr	r2, [pc, #184]	; (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d004      	beq.n	8004f2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a2d      	ldr	r2, [pc, #180]	; (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d108      	bne.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a1e      	ldr	r2, [pc, #120]	; (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d01d      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6a:	d018      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a1b      	ldr	r2, [pc, #108]	; (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d013      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1a      	ldr	r2, [pc, #104]	; (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00e      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a18      	ldr	r2, [pc, #96]	; (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d009      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a13      	ldr	r2, [pc, #76]	; (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d004      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a14      	ldr	r2, [pc, #80]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d10c      	bne.n	8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40010000 	.word	0x40010000
 8004fdc:	40010400 	.word	0x40010400
 8004fe0:	40000400 	.word	0x40000400
 8004fe4:	40000800 	.word	0x40000800
 8004fe8:	40000c00 	.word	0x40000c00
 8004fec:	40001800 	.word	0x40001800

08004ff0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e042      	b.n	8005088 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005008:	2b00      	cmp	r3, #0
 800500a:	d106      	bne.n	800501a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7fc f965 	bl	80012e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2224      	movs	r2, #36	; 0x24
 800501e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0201 	bic.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fb24 	bl	8005680 <UART_SetConfig>
 8005038:	4603      	mov	r3, r0
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e022      	b.n	8005088 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f001 f8c8 	bl	80061e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800505e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800506e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0201 	orr.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f001 f94f 	bl	8006324 <UART_CheckIdleState>
 8005086:	4603      	mov	r3, r0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08a      	sub	sp, #40	; 0x28
 8005094:	af02      	add	r7, sp, #8
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	4613      	mov	r3, r2
 800509e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	f040 8083 	bne.w	80051b2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <HAL_UART_Transmit+0x28>
 80050b2:	88fb      	ldrh	r3, [r7, #6]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e07b      	b.n	80051b4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <HAL_UART_Transmit+0x3a>
 80050c6:	2302      	movs	r3, #2
 80050c8:	e074      	b.n	80051b4 <HAL_UART_Transmit+0x124>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2221      	movs	r2, #33	; 0x21
 80050de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80050e2:	f7fc fa8b 	bl	80015fc <HAL_GetTick>
 80050e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	88fa      	ldrh	r2, [r7, #6]
 80050ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	88fa      	ldrh	r2, [r7, #6]
 80050f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005100:	d108      	bne.n	8005114 <HAL_UART_Transmit+0x84>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d104      	bne.n	8005114 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	61bb      	str	r3, [r7, #24]
 8005112:	e003      	b.n	800511c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005118:	2300      	movs	r3, #0
 800511a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005124:	e02c      	b.n	8005180 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2200      	movs	r2, #0
 800512e:	2180      	movs	r1, #128	; 0x80
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f001 f93f 	bl	80063b4 <UART_WaitOnFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e039      	b.n	80051b4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10b      	bne.n	800515e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005154:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	3302      	adds	r3, #2
 800515a:	61bb      	str	r3, [r7, #24]
 800515c:	e007      	b.n	800516e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	781a      	ldrb	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	3301      	adds	r3, #1
 800516c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005186:	b29b      	uxth	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1cc      	bne.n	8005126 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2200      	movs	r2, #0
 8005194:	2140      	movs	r1, #64	; 0x40
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f001 f90c 	bl	80063b4 <UART_WaitOnFlagUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e006      	b.n	80051b4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	e000      	b.n	80051b4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80051b2:	2302      	movs	r3, #2
  }
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3720      	adds	r7, #32
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	4613      	mov	r3, r2
 80051c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051d0:	2b20      	cmp	r3, #32
 80051d2:	f040 80bc 	bne.w	800534e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <HAL_UART_Receive_IT+0x26>
 80051dc:	88fb      	ldrh	r3, [r7, #6]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e0b4      	b.n	8005350 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d101      	bne.n	80051f4 <HAL_UART_Receive_IT+0x38>
 80051f0:	2302      	movs	r3, #2
 80051f2:	e0ad      	b.n	8005350 <HAL_UART_Receive_IT+0x194>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	88fa      	ldrh	r2, [r7, #6]
 8005206:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	88fa      	ldrh	r2, [r7, #6]
 800520e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005220:	d10e      	bne.n	8005240 <HAL_UART_Receive_IT+0x84>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d105      	bne.n	8005236 <HAL_UART_Receive_IT+0x7a>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005230:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005234:	e02d      	b.n	8005292 <HAL_UART_Receive_IT+0xd6>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	22ff      	movs	r2, #255	; 0xff
 800523a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800523e:	e028      	b.n	8005292 <HAL_UART_Receive_IT+0xd6>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10d      	bne.n	8005264 <HAL_UART_Receive_IT+0xa8>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d104      	bne.n	800525a <HAL_UART_Receive_IT+0x9e>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	22ff      	movs	r2, #255	; 0xff
 8005254:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005258:	e01b      	b.n	8005292 <HAL_UART_Receive_IT+0xd6>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	227f      	movs	r2, #127	; 0x7f
 800525e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005262:	e016      	b.n	8005292 <HAL_UART_Receive_IT+0xd6>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800526c:	d10d      	bne.n	800528a <HAL_UART_Receive_IT+0xce>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d104      	bne.n	8005280 <HAL_UART_Receive_IT+0xc4>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	227f      	movs	r2, #127	; 0x7f
 800527a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800527e:	e008      	b.n	8005292 <HAL_UART_Receive_IT+0xd6>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	223f      	movs	r2, #63	; 0x3f
 8005284:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005288:	e003      	b.n	8005292 <HAL_UART_Receive_IT+0xd6>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2222      	movs	r2, #34	; 0x22
 800529e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0201 	orr.w	r2, r2, #1
 80052b0:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ba:	d12a      	bne.n	8005312 <HAL_UART_Receive_IT+0x156>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80052c2:	88fa      	ldrh	r2, [r7, #6]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d324      	bcc.n	8005312 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d0:	d107      	bne.n	80052e2 <HAL_UART_Receive_IT+0x126>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d103      	bne.n	80052e2 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4a1f      	ldr	r2, [pc, #124]	; (800535c <HAL_UART_Receive_IT+0x1a0>)
 80052de:	66da      	str	r2, [r3, #108]	; 0x6c
 80052e0:	e002      	b.n	80052e8 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4a1e      	ldr	r2, [pc, #120]	; (8005360 <HAL_UART_Receive_IT+0x1a4>)
 80052e6:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052fe:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800530e:	609a      	str	r2, [r3, #8]
 8005310:	e01b      	b.n	800534a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531a:	d107      	bne.n	800532c <HAL_UART_Receive_IT+0x170>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d103      	bne.n	800532c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4a0f      	ldr	r2, [pc, #60]	; (8005364 <HAL_UART_Receive_IT+0x1a8>)
 8005328:	66da      	str	r2, [r3, #108]	; 0x6c
 800532a:	e002      	b.n	8005332 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4a0e      	ldr	r2, [pc, #56]	; (8005368 <HAL_UART_Receive_IT+0x1ac>)
 8005330:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005348:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	e000      	b.n	8005350 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800534e:	2302      	movs	r3, #2
  }
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	080067b9 	.word	0x080067b9
 8005360:	080066b1 	.word	0x080066b1
 8005364:	08006607 	.word	0x08006607
 8005368:	0800655d 	.word	0x0800655d

0800536c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005392:	4013      	ands	r3, r2
 8005394:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d118      	bne.n	80053ce <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d013      	beq.n	80053ce <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d104      	bne.n	80053ba <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d009      	beq.n	80053ce <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 8145 	beq.w	800564e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	4798      	blx	r3
      }
      return;
 80053cc:	e13f      	b.n	800564e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 80e8 	beq.w	80055a6 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4ba1      	ldr	r3, [pc, #644]	; (8005660 <HAL_UART_IRQHandler+0x2f4>)
 80053da:	4013      	ands	r3, r2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d105      	bne.n	80053ec <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	4ba0      	ldr	r3, [pc, #640]	; (8005664 <HAL_UART_IRQHandler+0x2f8>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 80dd 	beq.w	80055a6 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d010      	beq.n	8005418 <HAL_UART_IRQHandler+0xac>
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00b      	beq.n	8005418 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2201      	movs	r2, #1
 8005406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540e:	f043 0201 	orr.w	r2, r3, #1
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d010      	beq.n	8005444 <HAL_UART_IRQHandler+0xd8>
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00b      	beq.n	8005444 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2202      	movs	r2, #2
 8005432:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543a:	f043 0204 	orr.w	r2, r3, #4
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	f003 0304 	and.w	r3, r3, #4
 800544a:	2b00      	cmp	r3, #0
 800544c:	d010      	beq.n	8005470 <HAL_UART_IRQHandler+0x104>
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00b      	beq.n	8005470 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2204      	movs	r2, #4
 800545e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005466:	f043 0202 	orr.w	r2, r3, #2
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d015      	beq.n	80054a6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	f003 0320 	and.w	r3, r3, #32
 8005480:	2b00      	cmp	r3, #0
 8005482:	d104      	bne.n	800548e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	4b76      	ldr	r3, [pc, #472]	; (8005660 <HAL_UART_IRQHandler+0x2f4>)
 8005488:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00b      	beq.n	80054a6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2208      	movs	r2, #8
 8005494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549c:	f043 0208 	orr.w	r2, r3, #8
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d011      	beq.n	80054d4 <HAL_UART_IRQHandler+0x168>
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00c      	beq.n	80054d4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ca:	f043 0220 	orr.w	r2, r3, #32
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 80b9 	beq.w	8005652 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d011      	beq.n	800550e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d104      	bne.n	80054fe <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d007      	beq.n	800550e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005514:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005520:	2b40      	cmp	r3, #64	; 0x40
 8005522:	d004      	beq.n	800552e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800552a:	2b00      	cmp	r3, #0
 800552c:	d031      	beq.n	8005592 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 ffc0 	bl	80064b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553e:	2b40      	cmp	r3, #64	; 0x40
 8005540:	d123      	bne.n	800558a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005550:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005556:	2b00      	cmp	r3, #0
 8005558:	d013      	beq.n	8005582 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800555e:	4a42      	ldr	r2, [pc, #264]	; (8005668 <HAL_UART_IRQHandler+0x2fc>)
 8005560:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005566:	4618      	mov	r0, r3
 8005568:	f7fc f992 	bl	8001890 <HAL_DMA_Abort_IT>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d017      	beq.n	80055a2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800557c:	4610      	mov	r0, r2
 800557e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005580:	e00f      	b.n	80055a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f872 	bl	800566c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005588:	e00b      	b.n	80055a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f86e 	bl	800566c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005590:	e007      	b.n	80055a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f86a 	bl	800566c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80055a0:	e057      	b.n	8005652 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a2:	bf00      	nop
    return;
 80055a4:	e055      	b.n	8005652 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00d      	beq.n	80055cc <HAL_UART_IRQHandler+0x260>
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d008      	beq.n	80055cc <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80055c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f001 f97b 	bl	80068c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055ca:	e045      	b.n	8005658 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d012      	beq.n	80055fc <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d104      	bne.n	80055ea <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d008      	beq.n	80055fc <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d031      	beq.n	8005656 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	4798      	blx	r3
    }
    return;
 80055fa:	e02c      	b.n	8005656 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005602:	2b00      	cmp	r3, #0
 8005604:	d008      	beq.n	8005618 <HAL_UART_IRQHandler+0x2ac>
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 ff89 	bl	8006528 <UART_EndTransmit_IT>
    return;
 8005616:	e01f      	b.n	8005658 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d008      	beq.n	8005634 <HAL_UART_IRQHandler+0x2c8>
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f001 f95b 	bl	80068e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005632:	e011      	b.n	8005658 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00c      	beq.n	8005658 <HAL_UART_IRQHandler+0x2ec>
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	2b00      	cmp	r3, #0
 8005642:	da09      	bge.n	8005658 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f001 f945 	bl	80068d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800564a:	bf00      	nop
 800564c:	e004      	b.n	8005658 <HAL_UART_IRQHandler+0x2ec>
      return;
 800564e:	bf00      	nop
 8005650:	e002      	b.n	8005658 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005652:	bf00      	nop
 8005654:	e000      	b.n	8005658 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005656:	bf00      	nop
  }
}
 8005658:	3720      	adds	r7, #32
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	10000001 	.word	0x10000001
 8005664:	04000120 	.word	0x04000120
 8005668:	080064fd 	.word	0x080064fd

0800566c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005680:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005684:	b08e      	sub	sp, #56	; 0x38
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056ae:	4313      	orrs	r3, r2
 80056b0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	4bc1      	ldr	r3, [pc, #772]	; (80059c0 <UART_SetConfig+0x340>)
 80056ba:	4013      	ands	r3, r2
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6812      	ldr	r2, [r2, #0]
 80056c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056c2:	430b      	orrs	r3, r1
 80056c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4ab7      	ldr	r2, [pc, #732]	; (80059c4 <UART_SetConfig+0x344>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d004      	beq.n	80056f6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056f2:	4313      	orrs	r3, r2
 80056f4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	4bb2      	ldr	r3, [pc, #712]	; (80059c8 <UART_SetConfig+0x348>)
 80056fe:	4013      	ands	r3, r2
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6812      	ldr	r2, [r2, #0]
 8005704:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005706:	430b      	orrs	r3, r1
 8005708:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	f023 010f 	bic.w	r1, r3, #15
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4aa9      	ldr	r2, [pc, #676]	; (80059cc <UART_SetConfig+0x34c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d177      	bne.n	800581a <UART_SetConfig+0x19a>
 800572a:	4ba9      	ldr	r3, [pc, #676]	; (80059d0 <UART_SetConfig+0x350>)
 800572c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005732:	2b28      	cmp	r3, #40	; 0x28
 8005734:	d86c      	bhi.n	8005810 <UART_SetConfig+0x190>
 8005736:	a201      	add	r2, pc, #4	; (adr r2, 800573c <UART_SetConfig+0xbc>)
 8005738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573c:	080057e1 	.word	0x080057e1
 8005740:	08005811 	.word	0x08005811
 8005744:	08005811 	.word	0x08005811
 8005748:	08005811 	.word	0x08005811
 800574c:	08005811 	.word	0x08005811
 8005750:	08005811 	.word	0x08005811
 8005754:	08005811 	.word	0x08005811
 8005758:	08005811 	.word	0x08005811
 800575c:	080057e9 	.word	0x080057e9
 8005760:	08005811 	.word	0x08005811
 8005764:	08005811 	.word	0x08005811
 8005768:	08005811 	.word	0x08005811
 800576c:	08005811 	.word	0x08005811
 8005770:	08005811 	.word	0x08005811
 8005774:	08005811 	.word	0x08005811
 8005778:	08005811 	.word	0x08005811
 800577c:	080057f1 	.word	0x080057f1
 8005780:	08005811 	.word	0x08005811
 8005784:	08005811 	.word	0x08005811
 8005788:	08005811 	.word	0x08005811
 800578c:	08005811 	.word	0x08005811
 8005790:	08005811 	.word	0x08005811
 8005794:	08005811 	.word	0x08005811
 8005798:	08005811 	.word	0x08005811
 800579c:	080057f9 	.word	0x080057f9
 80057a0:	08005811 	.word	0x08005811
 80057a4:	08005811 	.word	0x08005811
 80057a8:	08005811 	.word	0x08005811
 80057ac:	08005811 	.word	0x08005811
 80057b0:	08005811 	.word	0x08005811
 80057b4:	08005811 	.word	0x08005811
 80057b8:	08005811 	.word	0x08005811
 80057bc:	08005801 	.word	0x08005801
 80057c0:	08005811 	.word	0x08005811
 80057c4:	08005811 	.word	0x08005811
 80057c8:	08005811 	.word	0x08005811
 80057cc:	08005811 	.word	0x08005811
 80057d0:	08005811 	.word	0x08005811
 80057d4:	08005811 	.word	0x08005811
 80057d8:	08005811 	.word	0x08005811
 80057dc:	08005809 	.word	0x08005809
 80057e0:	2301      	movs	r3, #1
 80057e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057e6:	e233      	b.n	8005c50 <UART_SetConfig+0x5d0>
 80057e8:	2304      	movs	r3, #4
 80057ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ee:	e22f      	b.n	8005c50 <UART_SetConfig+0x5d0>
 80057f0:	2308      	movs	r3, #8
 80057f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057f6:	e22b      	b.n	8005c50 <UART_SetConfig+0x5d0>
 80057f8:	2310      	movs	r3, #16
 80057fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057fe:	e227      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005800:	2320      	movs	r3, #32
 8005802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005806:	e223      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005808:	2340      	movs	r3, #64	; 0x40
 800580a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800580e:	e21f      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005810:	2380      	movs	r3, #128	; 0x80
 8005812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005816:	bf00      	nop
 8005818:	e21a      	b.n	8005c50 <UART_SetConfig+0x5d0>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a6d      	ldr	r2, [pc, #436]	; (80059d4 <UART_SetConfig+0x354>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d132      	bne.n	800588a <UART_SetConfig+0x20a>
 8005824:	4b6a      	ldr	r3, [pc, #424]	; (80059d0 <UART_SetConfig+0x350>)
 8005826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	2b05      	cmp	r3, #5
 800582e:	d827      	bhi.n	8005880 <UART_SetConfig+0x200>
 8005830:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <UART_SetConfig+0x1b8>)
 8005832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005836:	bf00      	nop
 8005838:	08005851 	.word	0x08005851
 800583c:	08005859 	.word	0x08005859
 8005840:	08005861 	.word	0x08005861
 8005844:	08005869 	.word	0x08005869
 8005848:	08005871 	.word	0x08005871
 800584c:	08005879 	.word	0x08005879
 8005850:	2300      	movs	r3, #0
 8005852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005856:	e1fb      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005858:	2304      	movs	r3, #4
 800585a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800585e:	e1f7      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005860:	2308      	movs	r3, #8
 8005862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005866:	e1f3      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005868:	2310      	movs	r3, #16
 800586a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800586e:	e1ef      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005870:	2320      	movs	r3, #32
 8005872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005876:	e1eb      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005878:	2340      	movs	r3, #64	; 0x40
 800587a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800587e:	e1e7      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005886:	bf00      	nop
 8005888:	e1e2      	b.n	8005c50 <UART_SetConfig+0x5d0>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a52      	ldr	r2, [pc, #328]	; (80059d8 <UART_SetConfig+0x358>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d132      	bne.n	80058fa <UART_SetConfig+0x27a>
 8005894:	4b4e      	ldr	r3, [pc, #312]	; (80059d0 <UART_SetConfig+0x350>)
 8005896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	2b05      	cmp	r3, #5
 800589e:	d827      	bhi.n	80058f0 <UART_SetConfig+0x270>
 80058a0:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <UART_SetConfig+0x228>)
 80058a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a6:	bf00      	nop
 80058a8:	080058c1 	.word	0x080058c1
 80058ac:	080058c9 	.word	0x080058c9
 80058b0:	080058d1 	.word	0x080058d1
 80058b4:	080058d9 	.word	0x080058d9
 80058b8:	080058e1 	.word	0x080058e1
 80058bc:	080058e9 	.word	0x080058e9
 80058c0:	2300      	movs	r3, #0
 80058c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058c6:	e1c3      	b.n	8005c50 <UART_SetConfig+0x5d0>
 80058c8:	2304      	movs	r3, #4
 80058ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ce:	e1bf      	b.n	8005c50 <UART_SetConfig+0x5d0>
 80058d0:	2308      	movs	r3, #8
 80058d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058d6:	e1bb      	b.n	8005c50 <UART_SetConfig+0x5d0>
 80058d8:	2310      	movs	r3, #16
 80058da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058de:	e1b7      	b.n	8005c50 <UART_SetConfig+0x5d0>
 80058e0:	2320      	movs	r3, #32
 80058e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058e6:	e1b3      	b.n	8005c50 <UART_SetConfig+0x5d0>
 80058e8:	2340      	movs	r3, #64	; 0x40
 80058ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ee:	e1af      	b.n	8005c50 <UART_SetConfig+0x5d0>
 80058f0:	2380      	movs	r3, #128	; 0x80
 80058f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058f6:	bf00      	nop
 80058f8:	e1aa      	b.n	8005c50 <UART_SetConfig+0x5d0>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a37      	ldr	r2, [pc, #220]	; (80059dc <UART_SetConfig+0x35c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d132      	bne.n	800596a <UART_SetConfig+0x2ea>
 8005904:	4b32      	ldr	r3, [pc, #200]	; (80059d0 <UART_SetConfig+0x350>)
 8005906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	2b05      	cmp	r3, #5
 800590e:	d827      	bhi.n	8005960 <UART_SetConfig+0x2e0>
 8005910:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <UART_SetConfig+0x298>)
 8005912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005916:	bf00      	nop
 8005918:	08005931 	.word	0x08005931
 800591c:	08005939 	.word	0x08005939
 8005920:	08005941 	.word	0x08005941
 8005924:	08005949 	.word	0x08005949
 8005928:	08005951 	.word	0x08005951
 800592c:	08005959 	.word	0x08005959
 8005930:	2300      	movs	r3, #0
 8005932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005936:	e18b      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005938:	2304      	movs	r3, #4
 800593a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800593e:	e187      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005940:	2308      	movs	r3, #8
 8005942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005946:	e183      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005948:	2310      	movs	r3, #16
 800594a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800594e:	e17f      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005950:	2320      	movs	r3, #32
 8005952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005956:	e17b      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005958:	2340      	movs	r3, #64	; 0x40
 800595a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800595e:	e177      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005960:	2380      	movs	r3, #128	; 0x80
 8005962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005966:	bf00      	nop
 8005968:	e172      	b.n	8005c50 <UART_SetConfig+0x5d0>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1c      	ldr	r2, [pc, #112]	; (80059e0 <UART_SetConfig+0x360>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d144      	bne.n	80059fe <UART_SetConfig+0x37e>
 8005974:	4b16      	ldr	r3, [pc, #88]	; (80059d0 <UART_SetConfig+0x350>)
 8005976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	2b05      	cmp	r3, #5
 800597e:	d839      	bhi.n	80059f4 <UART_SetConfig+0x374>
 8005980:	a201      	add	r2, pc, #4	; (adr r2, 8005988 <UART_SetConfig+0x308>)
 8005982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005986:	bf00      	nop
 8005988:	080059a1 	.word	0x080059a1
 800598c:	080059a9 	.word	0x080059a9
 8005990:	080059b1 	.word	0x080059b1
 8005994:	080059b9 	.word	0x080059b9
 8005998:	080059e5 	.word	0x080059e5
 800599c:	080059ed 	.word	0x080059ed
 80059a0:	2300      	movs	r3, #0
 80059a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059a6:	e153      	b.n	8005c50 <UART_SetConfig+0x5d0>
 80059a8:	2304      	movs	r3, #4
 80059aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ae:	e14f      	b.n	8005c50 <UART_SetConfig+0x5d0>
 80059b0:	2308      	movs	r3, #8
 80059b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059b6:	e14b      	b.n	8005c50 <UART_SetConfig+0x5d0>
 80059b8:	2310      	movs	r3, #16
 80059ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059be:	e147      	b.n	8005c50 <UART_SetConfig+0x5d0>
 80059c0:	cfff69f3 	.word	0xcfff69f3
 80059c4:	58000c00 	.word	0x58000c00
 80059c8:	11fff4ff 	.word	0x11fff4ff
 80059cc:	40011000 	.word	0x40011000
 80059d0:	58024400 	.word	0x58024400
 80059d4:	40004400 	.word	0x40004400
 80059d8:	40004800 	.word	0x40004800
 80059dc:	40004c00 	.word	0x40004c00
 80059e0:	40005000 	.word	0x40005000
 80059e4:	2320      	movs	r3, #32
 80059e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ea:	e131      	b.n	8005c50 <UART_SetConfig+0x5d0>
 80059ec:	2340      	movs	r3, #64	; 0x40
 80059ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059f2:	e12d      	b.n	8005c50 <UART_SetConfig+0x5d0>
 80059f4:	2380      	movs	r3, #128	; 0x80
 80059f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059fa:	bf00      	nop
 80059fc:	e128      	b.n	8005c50 <UART_SetConfig+0x5d0>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4ab6      	ldr	r2, [pc, #728]	; (8005cdc <UART_SetConfig+0x65c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d178      	bne.n	8005afa <UART_SetConfig+0x47a>
 8005a08:	4bb5      	ldr	r3, [pc, #724]	; (8005ce0 <UART_SetConfig+0x660>)
 8005a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a10:	2b28      	cmp	r3, #40	; 0x28
 8005a12:	d86d      	bhi.n	8005af0 <UART_SetConfig+0x470>
 8005a14:	a201      	add	r2, pc, #4	; (adr r2, 8005a1c <UART_SetConfig+0x39c>)
 8005a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1a:	bf00      	nop
 8005a1c:	08005ac1 	.word	0x08005ac1
 8005a20:	08005af1 	.word	0x08005af1
 8005a24:	08005af1 	.word	0x08005af1
 8005a28:	08005af1 	.word	0x08005af1
 8005a2c:	08005af1 	.word	0x08005af1
 8005a30:	08005af1 	.word	0x08005af1
 8005a34:	08005af1 	.word	0x08005af1
 8005a38:	08005af1 	.word	0x08005af1
 8005a3c:	08005ac9 	.word	0x08005ac9
 8005a40:	08005af1 	.word	0x08005af1
 8005a44:	08005af1 	.word	0x08005af1
 8005a48:	08005af1 	.word	0x08005af1
 8005a4c:	08005af1 	.word	0x08005af1
 8005a50:	08005af1 	.word	0x08005af1
 8005a54:	08005af1 	.word	0x08005af1
 8005a58:	08005af1 	.word	0x08005af1
 8005a5c:	08005ad1 	.word	0x08005ad1
 8005a60:	08005af1 	.word	0x08005af1
 8005a64:	08005af1 	.word	0x08005af1
 8005a68:	08005af1 	.word	0x08005af1
 8005a6c:	08005af1 	.word	0x08005af1
 8005a70:	08005af1 	.word	0x08005af1
 8005a74:	08005af1 	.word	0x08005af1
 8005a78:	08005af1 	.word	0x08005af1
 8005a7c:	08005ad9 	.word	0x08005ad9
 8005a80:	08005af1 	.word	0x08005af1
 8005a84:	08005af1 	.word	0x08005af1
 8005a88:	08005af1 	.word	0x08005af1
 8005a8c:	08005af1 	.word	0x08005af1
 8005a90:	08005af1 	.word	0x08005af1
 8005a94:	08005af1 	.word	0x08005af1
 8005a98:	08005af1 	.word	0x08005af1
 8005a9c:	08005ae1 	.word	0x08005ae1
 8005aa0:	08005af1 	.word	0x08005af1
 8005aa4:	08005af1 	.word	0x08005af1
 8005aa8:	08005af1 	.word	0x08005af1
 8005aac:	08005af1 	.word	0x08005af1
 8005ab0:	08005af1 	.word	0x08005af1
 8005ab4:	08005af1 	.word	0x08005af1
 8005ab8:	08005af1 	.word	0x08005af1
 8005abc:	08005ae9 	.word	0x08005ae9
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ac6:	e0c3      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005ac8:	2304      	movs	r3, #4
 8005aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ace:	e0bf      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005ad0:	2308      	movs	r3, #8
 8005ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ad6:	e0bb      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005ad8:	2310      	movs	r3, #16
 8005ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ade:	e0b7      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005ae0:	2320      	movs	r3, #32
 8005ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ae6:	e0b3      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005ae8:	2340      	movs	r3, #64	; 0x40
 8005aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aee:	e0af      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005af0:	2380      	movs	r3, #128	; 0x80
 8005af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005af6:	bf00      	nop
 8005af8:	e0aa      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a79      	ldr	r2, [pc, #484]	; (8005ce4 <UART_SetConfig+0x664>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d132      	bne.n	8005b6a <UART_SetConfig+0x4ea>
 8005b04:	4b76      	ldr	r3, [pc, #472]	; (8005ce0 <UART_SetConfig+0x660>)
 8005b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	2b05      	cmp	r3, #5
 8005b0e:	d827      	bhi.n	8005b60 <UART_SetConfig+0x4e0>
 8005b10:	a201      	add	r2, pc, #4	; (adr r2, 8005b18 <UART_SetConfig+0x498>)
 8005b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b16:	bf00      	nop
 8005b18:	08005b31 	.word	0x08005b31
 8005b1c:	08005b39 	.word	0x08005b39
 8005b20:	08005b41 	.word	0x08005b41
 8005b24:	08005b49 	.word	0x08005b49
 8005b28:	08005b51 	.word	0x08005b51
 8005b2c:	08005b59 	.word	0x08005b59
 8005b30:	2300      	movs	r3, #0
 8005b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b36:	e08b      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005b38:	2304      	movs	r3, #4
 8005b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b3e:	e087      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005b40:	2308      	movs	r3, #8
 8005b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b46:	e083      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005b48:	2310      	movs	r3, #16
 8005b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4e:	e07f      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005b50:	2320      	movs	r3, #32
 8005b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b56:	e07b      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005b58:	2340      	movs	r3, #64	; 0x40
 8005b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b5e:	e077      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005b60:	2380      	movs	r3, #128	; 0x80
 8005b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b66:	bf00      	nop
 8005b68:	e072      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a5e      	ldr	r2, [pc, #376]	; (8005ce8 <UART_SetConfig+0x668>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d132      	bne.n	8005bda <UART_SetConfig+0x55a>
 8005b74:	4b5a      	ldr	r3, [pc, #360]	; (8005ce0 <UART_SetConfig+0x660>)
 8005b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	2b05      	cmp	r3, #5
 8005b7e:	d827      	bhi.n	8005bd0 <UART_SetConfig+0x550>
 8005b80:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <UART_SetConfig+0x508>)
 8005b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b86:	bf00      	nop
 8005b88:	08005ba1 	.word	0x08005ba1
 8005b8c:	08005ba9 	.word	0x08005ba9
 8005b90:	08005bb1 	.word	0x08005bb1
 8005b94:	08005bb9 	.word	0x08005bb9
 8005b98:	08005bc1 	.word	0x08005bc1
 8005b9c:	08005bc9 	.word	0x08005bc9
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ba6:	e053      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005ba8:	2304      	movs	r3, #4
 8005baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bae:	e04f      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005bb0:	2308      	movs	r3, #8
 8005bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bb6:	e04b      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005bb8:	2310      	movs	r3, #16
 8005bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bbe:	e047      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005bc0:	2320      	movs	r3, #32
 8005bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bc6:	e043      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005bc8:	2340      	movs	r3, #64	; 0x40
 8005bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bce:	e03f      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005bd0:	2380      	movs	r3, #128	; 0x80
 8005bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bd6:	bf00      	nop
 8005bd8:	e03a      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a43      	ldr	r2, [pc, #268]	; (8005cec <UART_SetConfig+0x66c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d132      	bne.n	8005c4a <UART_SetConfig+0x5ca>
 8005be4:	4b3e      	ldr	r3, [pc, #248]	; (8005ce0 <UART_SetConfig+0x660>)
 8005be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	2b05      	cmp	r3, #5
 8005bee:	d827      	bhi.n	8005c40 <UART_SetConfig+0x5c0>
 8005bf0:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <UART_SetConfig+0x578>)
 8005bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf6:	bf00      	nop
 8005bf8:	08005c11 	.word	0x08005c11
 8005bfc:	08005c19 	.word	0x08005c19
 8005c00:	08005c21 	.word	0x08005c21
 8005c04:	08005c29 	.word	0x08005c29
 8005c08:	08005c31 	.word	0x08005c31
 8005c0c:	08005c39 	.word	0x08005c39
 8005c10:	2302      	movs	r3, #2
 8005c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c16:	e01b      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005c18:	2304      	movs	r3, #4
 8005c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c1e:	e017      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005c20:	2308      	movs	r3, #8
 8005c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c26:	e013      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005c28:	2310      	movs	r3, #16
 8005c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c2e:	e00f      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005c30:	2320      	movs	r3, #32
 8005c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c36:	e00b      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005c38:	2340      	movs	r3, #64	; 0x40
 8005c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c3e:	e007      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005c40:	2380      	movs	r3, #128	; 0x80
 8005c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c46:	bf00      	nop
 8005c48:	e002      	b.n	8005c50 <UART_SetConfig+0x5d0>
 8005c4a:	2380      	movs	r3, #128	; 0x80
 8005c4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a25      	ldr	r2, [pc, #148]	; (8005cec <UART_SetConfig+0x66c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	f040 80b8 	bne.w	8005dcc <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d019      	beq.n	8005c98 <UART_SetConfig+0x618>
 8005c64:	2b08      	cmp	r3, #8
 8005c66:	dc04      	bgt.n	8005c72 <UART_SetConfig+0x5f2>
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d009      	beq.n	8005c80 <UART_SetConfig+0x600>
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	d00b      	beq.n	8005c88 <UART_SetConfig+0x608>
 8005c70:	e042      	b.n	8005cf8 <UART_SetConfig+0x678>
 8005c72:	2b20      	cmp	r3, #32
 8005c74:	d02b      	beq.n	8005cce <UART_SetConfig+0x64e>
 8005c76:	2b40      	cmp	r3, #64	; 0x40
 8005c78:	d02c      	beq.n	8005cd4 <UART_SetConfig+0x654>
 8005c7a:	2b10      	cmp	r3, #16
 8005c7c:	d014      	beq.n	8005ca8 <UART_SetConfig+0x628>
 8005c7e:	e03b      	b.n	8005cf8 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005c80:	f7fe fa8e 	bl	80041a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005c84:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005c86:	e03d      	b.n	8005d04 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c88:	f107 0314 	add.w	r3, r7, #20
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fe fa9d 	bl	80041cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c96:	e035      	b.n	8005d04 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c98:	f107 0308 	add.w	r3, r7, #8
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fe fbe1 	bl	8004464 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ca6:	e02d      	b.n	8005d04 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ca8:	4b0d      	ldr	r3, [pc, #52]	; (8005ce0 <UART_SetConfig+0x660>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0320 	and.w	r3, r3, #32
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d009      	beq.n	8005cc8 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cb4:	4b0a      	ldr	r3, [pc, #40]	; (8005ce0 <UART_SetConfig+0x660>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	08db      	lsrs	r3, r3, #3
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	4a0c      	ldr	r2, [pc, #48]	; (8005cf0 <UART_SetConfig+0x670>)
 8005cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cc6:	e01d      	b.n	8005d04 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8005cc8:	4b09      	ldr	r3, [pc, #36]	; (8005cf0 <UART_SetConfig+0x670>)
 8005cca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ccc:	e01a      	b.n	8005d04 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cce:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <UART_SetConfig+0x674>)
 8005cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cd2:	e017      	b.n	8005d04 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cda:	e013      	b.n	8005d04 <UART_SetConfig+0x684>
 8005cdc:	40011400 	.word	0x40011400
 8005ce0:	58024400 	.word	0x58024400
 8005ce4:	40007800 	.word	0x40007800
 8005ce8:	40007c00 	.word	0x40007c00
 8005cec:	58000c00 	.word	0x58000c00
 8005cf0:	03d09000 	.word	0x03d09000
 8005cf4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005d02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 824d 	beq.w	80061a6 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	4aad      	ldr	r2, [pc, #692]	; (8005fc8 <UART_SetConfig+0x948>)
 8005d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d16:	461a      	mov	r2, r3
 8005d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d1e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	4613      	mov	r3, r2
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	4413      	add	r3, r2
 8005d2a:	6a3a      	ldr	r2, [r7, #32]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d305      	bcc.n	8005d3c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d36:	6a3a      	ldr	r2, [r7, #32]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d903      	bls.n	8005d44 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005d42:	e230      	b.n	80061a6 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d46:	4618      	mov	r0, r3
 8005d48:	f04f 0100 	mov.w	r1, #0
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	4a9d      	ldr	r2, [pc, #628]	; (8005fc8 <UART_SetConfig+0x948>)
 8005d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	f04f 0400 	mov.w	r4, #0
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4623      	mov	r3, r4
 8005d60:	f7fa fac2 	bl	80002e8 <__aeabi_uldivmod>
 8005d64:	4603      	mov	r3, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4622      	mov	r2, r4
 8005d6c:	f04f 0300 	mov.w	r3, #0
 8005d70:	f04f 0400 	mov.w	r4, #0
 8005d74:	0214      	lsls	r4, r2, #8
 8005d76:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005d7a:	020b      	lsls	r3, r1, #8
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	6852      	ldr	r2, [r2, #4]
 8005d80:	0852      	lsrs	r2, r2, #1
 8005d82:	4611      	mov	r1, r2
 8005d84:	f04f 0200 	mov.w	r2, #0
 8005d88:	eb13 0b01 	adds.w	fp, r3, r1
 8005d8c:	eb44 0c02 	adc.w	ip, r4, r2
 8005d90:	4658      	mov	r0, fp
 8005d92:	4661      	mov	r1, ip
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f04f 0400 	mov.w	r4, #0
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4623      	mov	r3, r4
 8005da0:	f7fa faa2 	bl	80002e8 <__aeabi_uldivmod>
 8005da4:	4603      	mov	r3, r0
 8005da6:	460c      	mov	r4, r1
 8005da8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005db0:	d308      	bcc.n	8005dc4 <UART_SetConfig+0x744>
 8005db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005db8:	d204      	bcs.n	8005dc4 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dc0:	60da      	str	r2, [r3, #12]
 8005dc2:	e1f0      	b.n	80061a6 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005dca:	e1ec      	b.n	80061a6 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dd4:	f040 8100 	bne.w	8005fd8 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8005dd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ddc:	2b40      	cmp	r3, #64	; 0x40
 8005dde:	f200 80b7 	bhi.w	8005f50 <UART_SetConfig+0x8d0>
 8005de2:	a201      	add	r2, pc, #4	; (adr r2, 8005de8 <UART_SetConfig+0x768>)
 8005de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de8:	08005eed 	.word	0x08005eed
 8005dec:	08005ef5 	.word	0x08005ef5
 8005df0:	08005f51 	.word	0x08005f51
 8005df4:	08005f51 	.word	0x08005f51
 8005df8:	08005efd 	.word	0x08005efd
 8005dfc:	08005f51 	.word	0x08005f51
 8005e00:	08005f51 	.word	0x08005f51
 8005e04:	08005f51 	.word	0x08005f51
 8005e08:	08005f0d 	.word	0x08005f0d
 8005e0c:	08005f51 	.word	0x08005f51
 8005e10:	08005f51 	.word	0x08005f51
 8005e14:	08005f51 	.word	0x08005f51
 8005e18:	08005f51 	.word	0x08005f51
 8005e1c:	08005f51 	.word	0x08005f51
 8005e20:	08005f51 	.word	0x08005f51
 8005e24:	08005f51 	.word	0x08005f51
 8005e28:	08005f1d 	.word	0x08005f1d
 8005e2c:	08005f51 	.word	0x08005f51
 8005e30:	08005f51 	.word	0x08005f51
 8005e34:	08005f51 	.word	0x08005f51
 8005e38:	08005f51 	.word	0x08005f51
 8005e3c:	08005f51 	.word	0x08005f51
 8005e40:	08005f51 	.word	0x08005f51
 8005e44:	08005f51 	.word	0x08005f51
 8005e48:	08005f51 	.word	0x08005f51
 8005e4c:	08005f51 	.word	0x08005f51
 8005e50:	08005f51 	.word	0x08005f51
 8005e54:	08005f51 	.word	0x08005f51
 8005e58:	08005f51 	.word	0x08005f51
 8005e5c:	08005f51 	.word	0x08005f51
 8005e60:	08005f51 	.word	0x08005f51
 8005e64:	08005f51 	.word	0x08005f51
 8005e68:	08005f43 	.word	0x08005f43
 8005e6c:	08005f51 	.word	0x08005f51
 8005e70:	08005f51 	.word	0x08005f51
 8005e74:	08005f51 	.word	0x08005f51
 8005e78:	08005f51 	.word	0x08005f51
 8005e7c:	08005f51 	.word	0x08005f51
 8005e80:	08005f51 	.word	0x08005f51
 8005e84:	08005f51 	.word	0x08005f51
 8005e88:	08005f51 	.word	0x08005f51
 8005e8c:	08005f51 	.word	0x08005f51
 8005e90:	08005f51 	.word	0x08005f51
 8005e94:	08005f51 	.word	0x08005f51
 8005e98:	08005f51 	.word	0x08005f51
 8005e9c:	08005f51 	.word	0x08005f51
 8005ea0:	08005f51 	.word	0x08005f51
 8005ea4:	08005f51 	.word	0x08005f51
 8005ea8:	08005f51 	.word	0x08005f51
 8005eac:	08005f51 	.word	0x08005f51
 8005eb0:	08005f51 	.word	0x08005f51
 8005eb4:	08005f51 	.word	0x08005f51
 8005eb8:	08005f51 	.word	0x08005f51
 8005ebc:	08005f51 	.word	0x08005f51
 8005ec0:	08005f51 	.word	0x08005f51
 8005ec4:	08005f51 	.word	0x08005f51
 8005ec8:	08005f51 	.word	0x08005f51
 8005ecc:	08005f51 	.word	0x08005f51
 8005ed0:	08005f51 	.word	0x08005f51
 8005ed4:	08005f51 	.word	0x08005f51
 8005ed8:	08005f51 	.word	0x08005f51
 8005edc:	08005f51 	.word	0x08005f51
 8005ee0:	08005f51 	.word	0x08005f51
 8005ee4:	08005f51 	.word	0x08005f51
 8005ee8:	08005f49 	.word	0x08005f49
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eec:	f7fd fa3e 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8005ef0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005ef2:	e033      	b.n	8005f5c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ef4:	f7fd fa50 	bl	8003398 <HAL_RCC_GetPCLK2Freq>
 8005ef8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005efa:	e02f      	b.n	8005f5c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005efc:	f107 0314 	add.w	r3, r7, #20
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fe f963 	bl	80041cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f0a:	e027      	b.n	8005f5c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f0c:	f107 0308 	add.w	r3, r7, #8
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fe faa7 	bl	8004464 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f1a:	e01f      	b.n	8005f5c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f1c:	4b2b      	ldr	r3, [pc, #172]	; (8005fcc <UART_SetConfig+0x94c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0320 	and.w	r3, r3, #32
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d009      	beq.n	8005f3c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f28:	4b28      	ldr	r3, [pc, #160]	; (8005fcc <UART_SetConfig+0x94c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	08db      	lsrs	r3, r3, #3
 8005f2e:	f003 0303 	and.w	r3, r3, #3
 8005f32:	4a27      	ldr	r2, [pc, #156]	; (8005fd0 <UART_SetConfig+0x950>)
 8005f34:	fa22 f303 	lsr.w	r3, r2, r3
 8005f38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f3a:	e00f      	b.n	8005f5c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8005f3c:	4b24      	ldr	r3, [pc, #144]	; (8005fd0 <UART_SetConfig+0x950>)
 8005f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f40:	e00c      	b.n	8005f5c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f42:	4b24      	ldr	r3, [pc, #144]	; (8005fd4 <UART_SetConfig+0x954>)
 8005f44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f46:	e009      	b.n	8005f5c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f4e:	e005      	b.n	8005f5c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005f5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 8121 	beq.w	80061a6 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	4a17      	ldr	r2, [pc, #92]	; (8005fc8 <UART_SetConfig+0x948>)
 8005f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f72:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f76:	005a      	lsls	r2, r3, #1
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	085b      	lsrs	r3, r3, #1
 8005f7e:	441a      	add	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8e:	2b0f      	cmp	r3, #15
 8005f90:	d916      	bls.n	8005fc0 <UART_SetConfig+0x940>
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f98:	d212      	bcs.n	8005fc0 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	f023 030f 	bic.w	r3, r3, #15
 8005fa2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	085b      	lsrs	r3, r3, #1
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	f003 0307 	and.w	r3, r3, #7
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005fbc:	60da      	str	r2, [r3, #12]
 8005fbe:	e0f2      	b.n	80061a6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005fc6:	e0ee      	b.n	80061a6 <UART_SetConfig+0xb26>
 8005fc8:	08008ee0 	.word	0x08008ee0
 8005fcc:	58024400 	.word	0x58024400
 8005fd0:	03d09000 	.word	0x03d09000
 8005fd4:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005fdc:	2b40      	cmp	r3, #64	; 0x40
 8005fde:	f200 80b7 	bhi.w	8006150 <UART_SetConfig+0xad0>
 8005fe2:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <UART_SetConfig+0x968>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	080060ed 	.word	0x080060ed
 8005fec:	080060f5 	.word	0x080060f5
 8005ff0:	08006151 	.word	0x08006151
 8005ff4:	08006151 	.word	0x08006151
 8005ff8:	080060fd 	.word	0x080060fd
 8005ffc:	08006151 	.word	0x08006151
 8006000:	08006151 	.word	0x08006151
 8006004:	08006151 	.word	0x08006151
 8006008:	0800610d 	.word	0x0800610d
 800600c:	08006151 	.word	0x08006151
 8006010:	08006151 	.word	0x08006151
 8006014:	08006151 	.word	0x08006151
 8006018:	08006151 	.word	0x08006151
 800601c:	08006151 	.word	0x08006151
 8006020:	08006151 	.word	0x08006151
 8006024:	08006151 	.word	0x08006151
 8006028:	0800611d 	.word	0x0800611d
 800602c:	08006151 	.word	0x08006151
 8006030:	08006151 	.word	0x08006151
 8006034:	08006151 	.word	0x08006151
 8006038:	08006151 	.word	0x08006151
 800603c:	08006151 	.word	0x08006151
 8006040:	08006151 	.word	0x08006151
 8006044:	08006151 	.word	0x08006151
 8006048:	08006151 	.word	0x08006151
 800604c:	08006151 	.word	0x08006151
 8006050:	08006151 	.word	0x08006151
 8006054:	08006151 	.word	0x08006151
 8006058:	08006151 	.word	0x08006151
 800605c:	08006151 	.word	0x08006151
 8006060:	08006151 	.word	0x08006151
 8006064:	08006151 	.word	0x08006151
 8006068:	08006143 	.word	0x08006143
 800606c:	08006151 	.word	0x08006151
 8006070:	08006151 	.word	0x08006151
 8006074:	08006151 	.word	0x08006151
 8006078:	08006151 	.word	0x08006151
 800607c:	08006151 	.word	0x08006151
 8006080:	08006151 	.word	0x08006151
 8006084:	08006151 	.word	0x08006151
 8006088:	08006151 	.word	0x08006151
 800608c:	08006151 	.word	0x08006151
 8006090:	08006151 	.word	0x08006151
 8006094:	08006151 	.word	0x08006151
 8006098:	08006151 	.word	0x08006151
 800609c:	08006151 	.word	0x08006151
 80060a0:	08006151 	.word	0x08006151
 80060a4:	08006151 	.word	0x08006151
 80060a8:	08006151 	.word	0x08006151
 80060ac:	08006151 	.word	0x08006151
 80060b0:	08006151 	.word	0x08006151
 80060b4:	08006151 	.word	0x08006151
 80060b8:	08006151 	.word	0x08006151
 80060bc:	08006151 	.word	0x08006151
 80060c0:	08006151 	.word	0x08006151
 80060c4:	08006151 	.word	0x08006151
 80060c8:	08006151 	.word	0x08006151
 80060cc:	08006151 	.word	0x08006151
 80060d0:	08006151 	.word	0x08006151
 80060d4:	08006151 	.word	0x08006151
 80060d8:	08006151 	.word	0x08006151
 80060dc:	08006151 	.word	0x08006151
 80060e0:	08006151 	.word	0x08006151
 80060e4:	08006151 	.word	0x08006151
 80060e8:	08006149 	.word	0x08006149
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060ec:	f7fd f93e 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 80060f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80060f2:	e033      	b.n	800615c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060f4:	f7fd f950 	bl	8003398 <HAL_RCC_GetPCLK2Freq>
 80060f8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80060fa:	e02f      	b.n	800615c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060fc:	f107 0314 	add.w	r3, r7, #20
 8006100:	4618      	mov	r0, r3
 8006102:	f7fe f863 	bl	80041cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800610a:	e027      	b.n	800615c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800610c:	f107 0308 	add.w	r3, r7, #8
 8006110:	4618      	mov	r0, r3
 8006112:	f7fe f9a7 	bl	8004464 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800611a:	e01f      	b.n	800615c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800611c:	4b2c      	ldr	r3, [pc, #176]	; (80061d0 <UART_SetConfig+0xb50>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0320 	and.w	r3, r3, #32
 8006124:	2b00      	cmp	r3, #0
 8006126:	d009      	beq.n	800613c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006128:	4b29      	ldr	r3, [pc, #164]	; (80061d0 <UART_SetConfig+0xb50>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	08db      	lsrs	r3, r3, #3
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	4a28      	ldr	r2, [pc, #160]	; (80061d4 <UART_SetConfig+0xb54>)
 8006134:	fa22 f303 	lsr.w	r3, r2, r3
 8006138:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800613a:	e00f      	b.n	800615c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800613c:	4b25      	ldr	r3, [pc, #148]	; (80061d4 <UART_SetConfig+0xb54>)
 800613e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006140:	e00c      	b.n	800615c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006142:	4b25      	ldr	r3, [pc, #148]	; (80061d8 <UART_SetConfig+0xb58>)
 8006144:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006146:	e009      	b.n	800615c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006148:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800614c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800614e:	e005      	b.n	800615c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800615a:	bf00      	nop
    }

    if (pclk != 0U)
 800615c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615e:	2b00      	cmp	r3, #0
 8006160:	d021      	beq.n	80061a6 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	4a1d      	ldr	r2, [pc, #116]	; (80061dc <UART_SetConfig+0xb5c>)
 8006168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800616c:	461a      	mov	r2, r3
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	fbb3 f2f2 	udiv	r2, r3, r2
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	085b      	lsrs	r3, r3, #1
 800617a:	441a      	add	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	fbb2 f3f3 	udiv	r3, r2, r3
 8006184:	b29b      	uxth	r3, r3
 8006186:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	2b0f      	cmp	r3, #15
 800618c:	d908      	bls.n	80061a0 <UART_SetConfig+0xb20>
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006194:	d204      	bcs.n	80061a0 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800619c:	60da      	str	r2, [r3, #12]
 800619e:	e002      	b.n	80061a6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80061c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3738      	adds	r7, #56	; 0x38
 80061ca:	46bd      	mov	sp, r7
 80061cc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80061d0:	58024400 	.word	0x58024400
 80061d4:	03d09000 	.word	0x03d09000
 80061d8:	003d0900 	.word	0x003d0900
 80061dc:	08008ee0 	.word	0x08008ee0

080061e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00a      	beq.n	800620a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00a      	beq.n	800624e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	f003 0308 	and.w	r3, r3, #8
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006274:	f003 0310 	and.w	r3, r3, #16
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00a      	beq.n	8006292 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006296:	f003 0320 	and.w	r3, r3, #32
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00a      	beq.n	80062b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d01a      	beq.n	80062f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062de:	d10a      	bne.n	80062f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00a      	beq.n	8006318 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	605a      	str	r2, [r3, #4]
  }
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af02      	add	r7, sp, #8
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006334:	f7fb f962 	bl	80015fc <HAL_GetTick>
 8006338:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0308 	and.w	r3, r3, #8
 8006344:	2b08      	cmp	r3, #8
 8006346:	d10e      	bne.n	8006366 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006348:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f82c 	bl	80063b4 <UART_WaitOnFlagUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e022      	b.n	80063ac <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b04      	cmp	r3, #4
 8006372:	d10e      	bne.n	8006392 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f816 	bl	80063b4 <UART_WaitOnFlagUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e00c      	b.n	80063ac <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2220      	movs	r2, #32
 800639e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	4613      	mov	r3, r2
 80063c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063c4:	e062      	b.n	800648c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063cc:	d05e      	beq.n	800648c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ce:	f7fb f915 	bl	80015fc <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	69ba      	ldr	r2, [r7, #24]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d302      	bcc.n	80063e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d11d      	bne.n	8006420 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063f2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0201 	bic.w	r2, r2, #1
 8006402:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2220      	movs	r2, #32
 8006408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2220      	movs	r2, #32
 8006410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e045      	b.n	80064ac <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0304 	and.w	r3, r3, #4
 800642a:	2b00      	cmp	r3, #0
 800642c:	d02e      	beq.n	800648c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800643c:	d126      	bne.n	800648c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006446:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006456:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0201 	bic.w	r2, r2, #1
 8006466:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2220      	movs	r2, #32
 800646c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2220      	movs	r2, #32
 8006474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e00f      	b.n	80064ac <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69da      	ldr	r2, [r3, #28]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4013      	ands	r3, r2
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	429a      	cmp	r2, r3
 800649a:	bf0c      	ite	eq
 800649c:	2301      	moveq	r3, #1
 800649e:	2300      	movne	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	461a      	mov	r2, r3
 80064a4:	79fb      	ldrb	r3, [r7, #7]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d08d      	beq.n	80063c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80064ca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6899      	ldr	r1, [r3, #8]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4b08      	ldr	r3, [pc, #32]	; (80064f8 <UART_EndRxTransfer+0x44>)
 80064d8:	400b      	ands	r3, r1
 80064da:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	effffffe 	.word	0xeffffffe

080064fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006508:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f7ff f8a6 	bl	800566c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006520:	bf00      	nop
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800653e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2220      	movs	r2, #32
 8006544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7fa fd68 	bl	8001024 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006554:	bf00      	nop
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800656a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006572:	2b22      	cmp	r3, #34	; 0x22
 8006574:	d13b      	bne.n	80065ee <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800657e:	89bb      	ldrh	r3, [r7, #12]
 8006580:	b2d9      	uxtb	r1, r3
 8006582:	89fb      	ldrh	r3, [r7, #14]
 8006584:	b2da      	uxtb	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800658a:	400a      	ands	r2, r1
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	3b01      	subs	r3, #1
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d122      	bne.n	80065fe <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80065c6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689a      	ldr	r2, [r3, #8]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0201 	bic.w	r2, r2, #1
 80065d6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2220      	movs	r2, #32
 80065dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fa fd2c 	bl	8001044 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065ec:	e007      	b.n	80065fe <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	699a      	ldr	r2, [r3, #24]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0208 	orr.w	r2, r2, #8
 80065fc:	619a      	str	r2, [r3, #24]
}
 80065fe:	bf00      	nop
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006614:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800661c:	2b22      	cmp	r3, #34	; 0x22
 800661e:	d13b      	bne.n	8006698 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800662e:	89ba      	ldrh	r2, [r7, #12]
 8006630:	89fb      	ldrh	r3, [r7, #14]
 8006632:	4013      	ands	r3, r2
 8006634:	b29a      	uxth	r2, r3
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800663e:	1c9a      	adds	r2, r3, #2
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800664a:	b29b      	uxth	r3, r3
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800665c:	b29b      	uxth	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d122      	bne.n	80066a8 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006670:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0201 	bic.w	r2, r2, #1
 8006680:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2220      	movs	r2, #32
 8006686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f7fa fcd7 	bl	8001044 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006696:	e007      	b.n	80066a8 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699a      	ldr	r2, [r3, #24]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f042 0208 	orr.w	r2, r2, #8
 80066a6:	619a      	str	r2, [r3, #24]
}
 80066a8:	bf00      	nop
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80066be:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066c6:	2b22      	cmp	r3, #34	; 0x22
 80066c8:	d166      	bne.n	8006798 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80066d0:	81fb      	strh	r3, [r7, #14]
 80066d2:	e03d      	b.n	8006750 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066dc:	893b      	ldrh	r3, [r7, #8]
 80066de:	b2d9      	uxtb	r1, r3
 80066e0:	89bb      	ldrh	r3, [r7, #12]
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e8:	400a      	ands	r2, r1
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066fe:	b29b      	uxth	r3, r3
 8006700:	3b01      	subs	r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006710:	b29b      	uxth	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d119      	bne.n	800674a <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006724:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6899      	ldr	r1, [r3, #8]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	4b1f      	ldr	r3, [pc, #124]	; (80067b0 <UART_RxISR_8BIT_FIFOEN+0x100>)
 8006732:	400b      	ands	r3, r1
 8006734:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2220      	movs	r2, #32
 800673a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7fa fc7d 	bl	8001044 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800674a:	89fb      	ldrh	r3, [r7, #14]
 800674c:	3b01      	subs	r3, #1
 800674e:	81fb      	strh	r3, [r7, #14]
 8006750:	89fb      	ldrh	r3, [r7, #14]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1be      	bne.n	80066d4 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800675c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800675e:	897b      	ldrh	r3, [r7, #10]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d021      	beq.n	80067a8 <UART_RxISR_8BIT_FIFOEN+0xf8>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800676a:	897a      	ldrh	r2, [r7, #10]
 800676c:	429a      	cmp	r2, r3
 800676e:	d21b      	bcs.n	80067a8 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689a      	ldr	r2, [r3, #8]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800677e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a0c      	ldr	r2, [pc, #48]	; (80067b4 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8006784:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f042 0220 	orr.w	r2, r2, #32
 8006794:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006796:	e007      	b.n	80067a8 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0208 	orr.w	r2, r2, #8
 80067a6:	619a      	str	r2, [r3, #24]
}
 80067a8:	bf00      	nop
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	effffffe 	.word	0xeffffffe
 80067b4:	0800655d 	.word	0x0800655d

080067b8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067c6:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067ce:	2b22      	cmp	r3, #34	; 0x22
 80067d0:	d166      	bne.n	80068a0 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80067d8:	82fb      	strh	r3, [r7, #22]
 80067da:	e03d      	b.n	8006858 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e8:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 80067ea:	8a3a      	ldrh	r2, [r7, #16]
 80067ec:	8abb      	ldrh	r3, [r7, #20]
 80067ee:	4013      	ands	r3, r2
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fa:	1c9a      	adds	r2, r3, #2
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006806:	b29b      	uxth	r3, r3
 8006808:	3b01      	subs	r3, #1
 800680a:	b29a      	uxth	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006818:	b29b      	uxth	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d119      	bne.n	8006852 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800682c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6899      	ldr	r1, [r3, #8]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	4b1f      	ldr	r3, [pc, #124]	; (80068b8 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800683a:	400b      	ands	r3, r1
 800683c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2220      	movs	r2, #32
 8006842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7fa fbf9 	bl	8001044 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006852:	8afb      	ldrh	r3, [r7, #22]
 8006854:	3b01      	subs	r3, #1
 8006856:	82fb      	strh	r3, [r7, #22]
 8006858:	8afb      	ldrh	r3, [r7, #22]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1be      	bne.n	80067dc <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006864:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006866:	8a7b      	ldrh	r3, [r7, #18]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d021      	beq.n	80068b0 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006872:	8a7a      	ldrh	r2, [r7, #18]
 8006874:	429a      	cmp	r2, r3
 8006876:	d21b      	bcs.n	80068b0 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689a      	ldr	r2, [r3, #8]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006886:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a0c      	ldr	r2, [pc, #48]	; (80068bc <UART_RxISR_16BIT_FIFOEN+0x104>)
 800688c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f042 0220 	orr.w	r2, r2, #32
 800689c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800689e:	e007      	b.n	80068b0 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	699a      	ldr	r2, [r3, #24]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0208 	orr.w	r2, r2, #8
 80068ae:	619a      	str	r2, [r3, #24]
}
 80068b0:	bf00      	nop
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	effffffe 	.word	0xeffffffe
 80068bc:	08006607 	.word	0x08006607

080068c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <HAL_UARTEx_DisableFifoMode+0x16>
 800690e:	2302      	movs	r3, #2
 8006910:	e027      	b.n	8006962 <HAL_UARTEx_DisableFifoMode+0x66>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2224      	movs	r2, #36	; 0x24
 800691e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0201 	bic.w	r2, r2, #1
 8006938:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006940:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2220      	movs	r2, #32
 8006954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b084      	sub	sp, #16
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800697e:	2b01      	cmp	r3, #1
 8006980:	d101      	bne.n	8006986 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006982:	2302      	movs	r3, #2
 8006984:	e02d      	b.n	80069e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2224      	movs	r2, #36	; 0x24
 8006992:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 0201 	bic.w	r2, r2, #1
 80069ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f850 	bl	8006a68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d101      	bne.n	8006a02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80069fe:	2302      	movs	r3, #2
 8006a00:	e02d      	b.n	8006a5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2224      	movs	r2, #36	; 0x24
 8006a0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0201 	bic.w	r2, r2, #1
 8006a28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f812 	bl	8006a68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b089      	sub	sp, #36	; 0x24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006a70:	4a2f      	ldr	r2, [pc, #188]	; (8006b30 <UARTEx_SetNbDataToProcess+0xc8>)
 8006a72:	f107 0314 	add.w	r3, r7, #20
 8006a76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a7a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006a7e:	4a2d      	ldr	r2, [pc, #180]	; (8006b34 <UARTEx_SetNbDataToProcess+0xcc>)
 8006a80:	f107 030c 	add.w	r3, r7, #12
 8006a84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a88:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d108      	bne.n	8006aa6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006aa4:	e03d      	b.n	8006b22 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006aa6:	2310      	movs	r3, #16
 8006aa8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006aaa:	2310      	movs	r3, #16
 8006aac:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	0e5b      	lsrs	r3, r3, #25
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	0f5b      	lsrs	r3, r3, #29
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	f003 0307 	and.w	r3, r3, #7
 8006acc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006ace:	7fbb      	ldrb	r3, [r7, #30]
 8006ad0:	7f3a      	ldrb	r2, [r7, #28]
 8006ad2:	f107 0120 	add.w	r1, r7, #32
 8006ad6:	440a      	add	r2, r1
 8006ad8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006adc:	fb02 f303 	mul.w	r3, r2, r3
 8006ae0:	7f3a      	ldrb	r2, [r7, #28]
 8006ae2:	f107 0120 	add.w	r1, r7, #32
 8006ae6:	440a      	add	r2, r1
 8006ae8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006aec:	fb93 f3f2 	sdiv	r3, r3, r2
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006af8:	7ffb      	ldrb	r3, [r7, #31]
 8006afa:	7f7a      	ldrb	r2, [r7, #29]
 8006afc:	f107 0120 	add.w	r1, r7, #32
 8006b00:	440a      	add	r2, r1
 8006b02:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006b06:	fb02 f303 	mul.w	r3, r2, r3
 8006b0a:	7f7a      	ldrb	r2, [r7, #29]
 8006b0c:	f107 0120 	add.w	r1, r7, #32
 8006b10:	440a      	add	r2, r1
 8006b12:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006b16:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b22:	bf00      	nop
 8006b24:	3724      	adds	r7, #36	; 0x24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	08008ec0 	.word	0x08008ec0
 8006b34:	08008ec8 	.word	0x08008ec8

08006b38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b38:	b084      	sub	sp, #16
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	f107 001c 	add.w	r0, r7, #28
 8006b46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d120      	bne.n	8006b92 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68da      	ldr	r2, [r3, #12]
 8006b60:	4b25      	ldr	r3, [pc, #148]	; (8006bf8 <USB_CoreInit+0xc0>)
 8006b62:	4013      	ands	r3, r2
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d105      	bne.n	8006b86 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fa4c 	bl	8007024 <USB_CoreReset>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	73fb      	strb	r3, [r7, #15]
 8006b90:	e01a      	b.n	8006bc8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fa40 	bl	8007024 <USB_CoreReset>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d106      	bne.n	8006bbc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	639a      	str	r2, [r3, #56]	; 0x38
 8006bba:	e005      	b.n	8006bc8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d10b      	bne.n	8006be6 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f043 0206 	orr.w	r2, r3, #6
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f043 0220 	orr.w	r2, r3, #32
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bf2:	b004      	add	sp, #16
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	ffbdffbf 	.word	0xffbdffbf

08006bfc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f023 0201 	bic.w	r2, r3, #1
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b082      	sub	sp, #8
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
 8006c26:	460b      	mov	r3, r1
 8006c28:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c36:	78fb      	ldrb	r3, [r7, #3]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d106      	bne.n	8006c4a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	60da      	str	r2, [r3, #12]
 8006c48:	e00b      	b.n	8006c62 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c4a:	78fb      	ldrb	r3, [r7, #3]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d106      	bne.n	8006c5e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	60da      	str	r2, [r3, #12]
 8006c5c:	e001      	b.n	8006c62 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e003      	b.n	8006c6a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006c62:	2032      	movs	r0, #50	; 0x32
 8006c64:	f7fa fcd6 	bl	8001614 <HAL_Delay>

  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c74:	b084      	sub	sp, #16
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b086      	sub	sp, #24
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c8e:	2300      	movs	r3, #0
 8006c90:	613b      	str	r3, [r7, #16]
 8006c92:	e009      	b.n	8006ca8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	3340      	adds	r3, #64	; 0x40
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2b0e      	cmp	r3, #14
 8006cac:	d9f2      	bls.n	8006c94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d11c      	bne.n	8006cee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cc2:	f043 0302 	orr.w	r3, r3, #2
 8006cc6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ccc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	e005      	b.n	8006cfa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d00:	461a      	mov	r2, r3
 8006d02:	2300      	movs	r3, #0
 8006d04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d14:	461a      	mov	r2, r3
 8006d16:	680b      	ldr	r3, [r1, #0]
 8006d18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d10c      	bne.n	8006d3a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d104      	bne.n	8006d30 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d26:	2100      	movs	r1, #0
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f949 	bl	8006fc0 <USB_SetDevSpeed>
 8006d2e:	e008      	b.n	8006d42 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d30:	2101      	movs	r1, #1
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f944 	bl	8006fc0 <USB_SetDevSpeed>
 8006d38:	e003      	b.n	8006d42 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d3a:	2103      	movs	r1, #3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f93f 	bl	8006fc0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d42:	2110      	movs	r1, #16
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f8f3 	bl	8006f30 <USB_FlushTxFifo>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f911 	bl	8006f7c <USB_FlushRxFifo>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d76:	461a      	mov	r2, r3
 8006d78:	2300      	movs	r3, #0
 8006d7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d82:	461a      	mov	r2, r3
 8006d84:	2300      	movs	r3, #0
 8006d86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d88:	2300      	movs	r3, #0
 8006d8a:	613b      	str	r3, [r7, #16]
 8006d8c:	e043      	b.n	8006e16 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006da4:	d118      	bne.n	8006dd8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10a      	bne.n	8006dc2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db8:	461a      	mov	r2, r3
 8006dba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dbe:	6013      	str	r3, [r2, #0]
 8006dc0:	e013      	b.n	8006dea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006dd4:	6013      	str	r3, [r2, #0]
 8006dd6:	e008      	b.n	8006dea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de4:	461a      	mov	r2, r3
 8006de6:	2300      	movs	r3, #0
 8006de8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df6:	461a      	mov	r2, r3
 8006df8:	2300      	movs	r3, #0
 8006dfa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	015a      	lsls	r2, r3, #5
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4413      	add	r3, r2
 8006e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e08:	461a      	mov	r2, r3
 8006e0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	3301      	adds	r3, #1
 8006e14:	613b      	str	r3, [r7, #16]
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d3b7      	bcc.n	8006d8e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e1e:	2300      	movs	r3, #0
 8006e20:	613b      	str	r3, [r7, #16]
 8006e22:	e043      	b.n	8006eac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e3a:	d118      	bne.n	8006e6e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10a      	bne.n	8006e58 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	e013      	b.n	8006e80 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e64:	461a      	mov	r2, r3
 8006e66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e6a:	6013      	str	r3, [r2, #0]
 8006e6c:	e008      	b.n	8006e80 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	2300      	movs	r3, #0
 8006e90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ea4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	613b      	str	r3, [r7, #16]
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d3b7      	bcc.n	8006e24 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ec2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ec6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006ed4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d105      	bne.n	8006ee8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	f043 0210 	orr.w	r2, r3, #16
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	699a      	ldr	r2, [r3, #24]
 8006eec:	4b0e      	ldr	r3, [pc, #56]	; (8006f28 <USB_DevInit+0x2b4>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d005      	beq.n	8006f06 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	f043 0208 	orr.w	r2, r3, #8
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d105      	bne.n	8006f18 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	699a      	ldr	r2, [r3, #24]
 8006f10:	4b06      	ldr	r3, [pc, #24]	; (8006f2c <USB_DevInit+0x2b8>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f24:	b004      	add	sp, #16
 8006f26:	4770      	bx	lr
 8006f28:	803c3800 	.word	0x803c3800
 8006f2c:	40000004 	.word	0x40000004

08006f30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	019b      	lsls	r3, r3, #6
 8006f42:	f043 0220 	orr.w	r2, r3, #32
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4a09      	ldr	r2, [pc, #36]	; (8006f78 <USB_FlushTxFifo+0x48>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d901      	bls.n	8006f5c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e006      	b.n	8006f6a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	f003 0320 	and.w	r3, r3, #32
 8006f64:	2b20      	cmp	r3, #32
 8006f66:	d0f0      	beq.n	8006f4a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	00030d40 	.word	0x00030d40

08006f7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2210      	movs	r2, #16
 8006f8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3301      	adds	r3, #1
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4a09      	ldr	r2, [pc, #36]	; (8006fbc <USB_FlushRxFifo+0x40>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d901      	bls.n	8006fa0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e006      	b.n	8006fae <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	f003 0310 	and.w	r3, r3, #16
 8006fa8:	2b10      	cmp	r3, #16
 8006faa:	d0f0      	beq.n	8006f8e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	00030d40 	.word	0x00030d40

08006fc0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	78fb      	ldrb	r3, [r7, #3]
 8006fda:	68f9      	ldr	r1, [r7, #12]
 8006fdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800700c:	f043 0302 	orr.w	r3, r3, #2
 8007010:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007012:	2003      	movs	r0, #3
 8007014:	f7fa fafe 	bl	8001614 <HAL_Delay>

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3301      	adds	r3, #1
 8007034:	60fb      	str	r3, [r7, #12]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4a13      	ldr	r2, [pc, #76]	; (8007088 <USB_CoreReset+0x64>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d901      	bls.n	8007042 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e01b      	b.n	800707a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	2b00      	cmp	r3, #0
 8007048:	daf2      	bge.n	8007030 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	f043 0201 	orr.w	r2, r3, #1
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3301      	adds	r3, #1
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4a09      	ldr	r2, [pc, #36]	; (8007088 <USB_CoreReset+0x64>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d901      	bls.n	800706c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e006      	b.n	800707a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b01      	cmp	r3, #1
 8007076:	d0f0      	beq.n	800705a <USB_CoreReset+0x36>

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	00030d40 	.word	0x00030d40

0800708c <__errno>:
 800708c:	4b01      	ldr	r3, [pc, #4]	; (8007094 <__errno+0x8>)
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	20000024 	.word	0x20000024

08007098 <__libc_init_array>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	4e0d      	ldr	r6, [pc, #52]	; (80070d0 <__libc_init_array+0x38>)
 800709c:	4c0d      	ldr	r4, [pc, #52]	; (80070d4 <__libc_init_array+0x3c>)
 800709e:	1ba4      	subs	r4, r4, r6
 80070a0:	10a4      	asrs	r4, r4, #2
 80070a2:	2500      	movs	r5, #0
 80070a4:	42a5      	cmp	r5, r4
 80070a6:	d109      	bne.n	80070bc <__libc_init_array+0x24>
 80070a8:	4e0b      	ldr	r6, [pc, #44]	; (80070d8 <__libc_init_array+0x40>)
 80070aa:	4c0c      	ldr	r4, [pc, #48]	; (80070dc <__libc_init_array+0x44>)
 80070ac:	f001 fefc 	bl	8008ea8 <_init>
 80070b0:	1ba4      	subs	r4, r4, r6
 80070b2:	10a4      	asrs	r4, r4, #2
 80070b4:	2500      	movs	r5, #0
 80070b6:	42a5      	cmp	r5, r4
 80070b8:	d105      	bne.n	80070c6 <__libc_init_array+0x2e>
 80070ba:	bd70      	pop	{r4, r5, r6, pc}
 80070bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070c0:	4798      	blx	r3
 80070c2:	3501      	adds	r5, #1
 80070c4:	e7ee      	b.n	80070a4 <__libc_init_array+0xc>
 80070c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070ca:	4798      	blx	r3
 80070cc:	3501      	adds	r5, #1
 80070ce:	e7f2      	b.n	80070b6 <__libc_init_array+0x1e>
 80070d0:	08009168 	.word	0x08009168
 80070d4:	08009168 	.word	0x08009168
 80070d8:	08009168 	.word	0x08009168
 80070dc:	0800916c 	.word	0x0800916c

080070e0 <malloc>:
 80070e0:	4b02      	ldr	r3, [pc, #8]	; (80070ec <malloc+0xc>)
 80070e2:	4601      	mov	r1, r0
 80070e4:	6818      	ldr	r0, [r3, #0]
 80070e6:	f000 b861 	b.w	80071ac <_malloc_r>
 80070ea:	bf00      	nop
 80070ec:	20000024 	.word	0x20000024

080070f0 <free>:
 80070f0:	4b02      	ldr	r3, [pc, #8]	; (80070fc <free+0xc>)
 80070f2:	4601      	mov	r1, r0
 80070f4:	6818      	ldr	r0, [r3, #0]
 80070f6:	f000 b80b 	b.w	8007110 <_free_r>
 80070fa:	bf00      	nop
 80070fc:	20000024 	.word	0x20000024

08007100 <memset>:
 8007100:	4402      	add	r2, r0
 8007102:	4603      	mov	r3, r0
 8007104:	4293      	cmp	r3, r2
 8007106:	d100      	bne.n	800710a <memset+0xa>
 8007108:	4770      	bx	lr
 800710a:	f803 1b01 	strb.w	r1, [r3], #1
 800710e:	e7f9      	b.n	8007104 <memset+0x4>

08007110 <_free_r>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	4605      	mov	r5, r0
 8007114:	2900      	cmp	r1, #0
 8007116:	d045      	beq.n	80071a4 <_free_r+0x94>
 8007118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800711c:	1f0c      	subs	r4, r1, #4
 800711e:	2b00      	cmp	r3, #0
 8007120:	bfb8      	it	lt
 8007122:	18e4      	addlt	r4, r4, r3
 8007124:	f001 f9c9 	bl	80084ba <__malloc_lock>
 8007128:	4a1f      	ldr	r2, [pc, #124]	; (80071a8 <_free_r+0x98>)
 800712a:	6813      	ldr	r3, [r2, #0]
 800712c:	4610      	mov	r0, r2
 800712e:	b933      	cbnz	r3, 800713e <_free_r+0x2e>
 8007130:	6063      	str	r3, [r4, #4]
 8007132:	6014      	str	r4, [r2, #0]
 8007134:	4628      	mov	r0, r5
 8007136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800713a:	f001 b9bf 	b.w	80084bc <__malloc_unlock>
 800713e:	42a3      	cmp	r3, r4
 8007140:	d90c      	bls.n	800715c <_free_r+0x4c>
 8007142:	6821      	ldr	r1, [r4, #0]
 8007144:	1862      	adds	r2, r4, r1
 8007146:	4293      	cmp	r3, r2
 8007148:	bf04      	itt	eq
 800714a:	681a      	ldreq	r2, [r3, #0]
 800714c:	685b      	ldreq	r3, [r3, #4]
 800714e:	6063      	str	r3, [r4, #4]
 8007150:	bf04      	itt	eq
 8007152:	1852      	addeq	r2, r2, r1
 8007154:	6022      	streq	r2, [r4, #0]
 8007156:	6004      	str	r4, [r0, #0]
 8007158:	e7ec      	b.n	8007134 <_free_r+0x24>
 800715a:	4613      	mov	r3, r2
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	b10a      	cbz	r2, 8007164 <_free_r+0x54>
 8007160:	42a2      	cmp	r2, r4
 8007162:	d9fa      	bls.n	800715a <_free_r+0x4a>
 8007164:	6819      	ldr	r1, [r3, #0]
 8007166:	1858      	adds	r0, r3, r1
 8007168:	42a0      	cmp	r0, r4
 800716a:	d10b      	bne.n	8007184 <_free_r+0x74>
 800716c:	6820      	ldr	r0, [r4, #0]
 800716e:	4401      	add	r1, r0
 8007170:	1858      	adds	r0, r3, r1
 8007172:	4282      	cmp	r2, r0
 8007174:	6019      	str	r1, [r3, #0]
 8007176:	d1dd      	bne.n	8007134 <_free_r+0x24>
 8007178:	6810      	ldr	r0, [r2, #0]
 800717a:	6852      	ldr	r2, [r2, #4]
 800717c:	605a      	str	r2, [r3, #4]
 800717e:	4401      	add	r1, r0
 8007180:	6019      	str	r1, [r3, #0]
 8007182:	e7d7      	b.n	8007134 <_free_r+0x24>
 8007184:	d902      	bls.n	800718c <_free_r+0x7c>
 8007186:	230c      	movs	r3, #12
 8007188:	602b      	str	r3, [r5, #0]
 800718a:	e7d3      	b.n	8007134 <_free_r+0x24>
 800718c:	6820      	ldr	r0, [r4, #0]
 800718e:	1821      	adds	r1, r4, r0
 8007190:	428a      	cmp	r2, r1
 8007192:	bf04      	itt	eq
 8007194:	6811      	ldreq	r1, [r2, #0]
 8007196:	6852      	ldreq	r2, [r2, #4]
 8007198:	6062      	str	r2, [r4, #4]
 800719a:	bf04      	itt	eq
 800719c:	1809      	addeq	r1, r1, r0
 800719e:	6021      	streq	r1, [r4, #0]
 80071a0:	605c      	str	r4, [r3, #4]
 80071a2:	e7c7      	b.n	8007134 <_free_r+0x24>
 80071a4:	bd38      	pop	{r3, r4, r5, pc}
 80071a6:	bf00      	nop
 80071a8:	20000218 	.word	0x20000218

080071ac <_malloc_r>:
 80071ac:	b570      	push	{r4, r5, r6, lr}
 80071ae:	1ccd      	adds	r5, r1, #3
 80071b0:	f025 0503 	bic.w	r5, r5, #3
 80071b4:	3508      	adds	r5, #8
 80071b6:	2d0c      	cmp	r5, #12
 80071b8:	bf38      	it	cc
 80071ba:	250c      	movcc	r5, #12
 80071bc:	2d00      	cmp	r5, #0
 80071be:	4606      	mov	r6, r0
 80071c0:	db01      	blt.n	80071c6 <_malloc_r+0x1a>
 80071c2:	42a9      	cmp	r1, r5
 80071c4:	d903      	bls.n	80071ce <_malloc_r+0x22>
 80071c6:	230c      	movs	r3, #12
 80071c8:	6033      	str	r3, [r6, #0]
 80071ca:	2000      	movs	r0, #0
 80071cc:	bd70      	pop	{r4, r5, r6, pc}
 80071ce:	f001 f974 	bl	80084ba <__malloc_lock>
 80071d2:	4a21      	ldr	r2, [pc, #132]	; (8007258 <_malloc_r+0xac>)
 80071d4:	6814      	ldr	r4, [r2, #0]
 80071d6:	4621      	mov	r1, r4
 80071d8:	b991      	cbnz	r1, 8007200 <_malloc_r+0x54>
 80071da:	4c20      	ldr	r4, [pc, #128]	; (800725c <_malloc_r+0xb0>)
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	b91b      	cbnz	r3, 80071e8 <_malloc_r+0x3c>
 80071e0:	4630      	mov	r0, r6
 80071e2:	f000 fb67 	bl	80078b4 <_sbrk_r>
 80071e6:	6020      	str	r0, [r4, #0]
 80071e8:	4629      	mov	r1, r5
 80071ea:	4630      	mov	r0, r6
 80071ec:	f000 fb62 	bl	80078b4 <_sbrk_r>
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	d124      	bne.n	800723e <_malloc_r+0x92>
 80071f4:	230c      	movs	r3, #12
 80071f6:	6033      	str	r3, [r6, #0]
 80071f8:	4630      	mov	r0, r6
 80071fa:	f001 f95f 	bl	80084bc <__malloc_unlock>
 80071fe:	e7e4      	b.n	80071ca <_malloc_r+0x1e>
 8007200:	680b      	ldr	r3, [r1, #0]
 8007202:	1b5b      	subs	r3, r3, r5
 8007204:	d418      	bmi.n	8007238 <_malloc_r+0x8c>
 8007206:	2b0b      	cmp	r3, #11
 8007208:	d90f      	bls.n	800722a <_malloc_r+0x7e>
 800720a:	600b      	str	r3, [r1, #0]
 800720c:	50cd      	str	r5, [r1, r3]
 800720e:	18cc      	adds	r4, r1, r3
 8007210:	4630      	mov	r0, r6
 8007212:	f001 f953 	bl	80084bc <__malloc_unlock>
 8007216:	f104 000b 	add.w	r0, r4, #11
 800721a:	1d23      	adds	r3, r4, #4
 800721c:	f020 0007 	bic.w	r0, r0, #7
 8007220:	1ac3      	subs	r3, r0, r3
 8007222:	d0d3      	beq.n	80071cc <_malloc_r+0x20>
 8007224:	425a      	negs	r2, r3
 8007226:	50e2      	str	r2, [r4, r3]
 8007228:	e7d0      	b.n	80071cc <_malloc_r+0x20>
 800722a:	428c      	cmp	r4, r1
 800722c:	684b      	ldr	r3, [r1, #4]
 800722e:	bf16      	itet	ne
 8007230:	6063      	strne	r3, [r4, #4]
 8007232:	6013      	streq	r3, [r2, #0]
 8007234:	460c      	movne	r4, r1
 8007236:	e7eb      	b.n	8007210 <_malloc_r+0x64>
 8007238:	460c      	mov	r4, r1
 800723a:	6849      	ldr	r1, [r1, #4]
 800723c:	e7cc      	b.n	80071d8 <_malloc_r+0x2c>
 800723e:	1cc4      	adds	r4, r0, #3
 8007240:	f024 0403 	bic.w	r4, r4, #3
 8007244:	42a0      	cmp	r0, r4
 8007246:	d005      	beq.n	8007254 <_malloc_r+0xa8>
 8007248:	1a21      	subs	r1, r4, r0
 800724a:	4630      	mov	r0, r6
 800724c:	f000 fb32 	bl	80078b4 <_sbrk_r>
 8007250:	3001      	adds	r0, #1
 8007252:	d0cf      	beq.n	80071f4 <_malloc_r+0x48>
 8007254:	6025      	str	r5, [r4, #0]
 8007256:	e7db      	b.n	8007210 <_malloc_r+0x64>
 8007258:	20000218 	.word	0x20000218
 800725c:	2000021c 	.word	0x2000021c

08007260 <__cvt>:
 8007260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007262:	ed2d 8b02 	vpush	{d8}
 8007266:	eeb0 8b40 	vmov.f64	d8, d0
 800726a:	b085      	sub	sp, #20
 800726c:	4617      	mov	r7, r2
 800726e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007270:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007272:	ee18 2a90 	vmov	r2, s17
 8007276:	f025 0520 	bic.w	r5, r5, #32
 800727a:	2a00      	cmp	r2, #0
 800727c:	bfb6      	itet	lt
 800727e:	222d      	movlt	r2, #45	; 0x2d
 8007280:	2200      	movge	r2, #0
 8007282:	eeb1 8b40 	vneglt.f64	d8, d0
 8007286:	2d46      	cmp	r5, #70	; 0x46
 8007288:	460c      	mov	r4, r1
 800728a:	701a      	strb	r2, [r3, #0]
 800728c:	d004      	beq.n	8007298 <__cvt+0x38>
 800728e:	2d45      	cmp	r5, #69	; 0x45
 8007290:	d100      	bne.n	8007294 <__cvt+0x34>
 8007292:	3401      	adds	r4, #1
 8007294:	2102      	movs	r1, #2
 8007296:	e000      	b.n	800729a <__cvt+0x3a>
 8007298:	2103      	movs	r1, #3
 800729a:	ab03      	add	r3, sp, #12
 800729c:	9301      	str	r3, [sp, #4]
 800729e:	ab02      	add	r3, sp, #8
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	4622      	mov	r2, r4
 80072a4:	4633      	mov	r3, r6
 80072a6:	eeb0 0b48 	vmov.f64	d0, d8
 80072aa:	f000 fba1 	bl	80079f0 <_dtoa_r>
 80072ae:	2d47      	cmp	r5, #71	; 0x47
 80072b0:	d101      	bne.n	80072b6 <__cvt+0x56>
 80072b2:	07fb      	lsls	r3, r7, #31
 80072b4:	d51e      	bpl.n	80072f4 <__cvt+0x94>
 80072b6:	2d46      	cmp	r5, #70	; 0x46
 80072b8:	eb00 0304 	add.w	r3, r0, r4
 80072bc:	d10c      	bne.n	80072d8 <__cvt+0x78>
 80072be:	7802      	ldrb	r2, [r0, #0]
 80072c0:	2a30      	cmp	r2, #48	; 0x30
 80072c2:	d107      	bne.n	80072d4 <__cvt+0x74>
 80072c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80072c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072cc:	bf1c      	itt	ne
 80072ce:	f1c4 0401 	rsbne	r4, r4, #1
 80072d2:	6034      	strne	r4, [r6, #0]
 80072d4:	6832      	ldr	r2, [r6, #0]
 80072d6:	4413      	add	r3, r2
 80072d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80072dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e0:	d007      	beq.n	80072f2 <__cvt+0x92>
 80072e2:	2130      	movs	r1, #48	; 0x30
 80072e4:	9a03      	ldr	r2, [sp, #12]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d204      	bcs.n	80072f4 <__cvt+0x94>
 80072ea:	1c54      	adds	r4, r2, #1
 80072ec:	9403      	str	r4, [sp, #12]
 80072ee:	7011      	strb	r1, [r2, #0]
 80072f0:	e7f8      	b.n	80072e4 <__cvt+0x84>
 80072f2:	9303      	str	r3, [sp, #12]
 80072f4:	9b03      	ldr	r3, [sp, #12]
 80072f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072f8:	1a1b      	subs	r3, r3, r0
 80072fa:	6013      	str	r3, [r2, #0]
 80072fc:	b005      	add	sp, #20
 80072fe:	ecbd 8b02 	vpop	{d8}
 8007302:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007304 <__exponent>:
 8007304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007306:	2900      	cmp	r1, #0
 8007308:	4604      	mov	r4, r0
 800730a:	bfba      	itte	lt
 800730c:	4249      	neglt	r1, r1
 800730e:	232d      	movlt	r3, #45	; 0x2d
 8007310:	232b      	movge	r3, #43	; 0x2b
 8007312:	2909      	cmp	r1, #9
 8007314:	f804 2b02 	strb.w	r2, [r4], #2
 8007318:	7043      	strb	r3, [r0, #1]
 800731a:	dd20      	ble.n	800735e <__exponent+0x5a>
 800731c:	f10d 0307 	add.w	r3, sp, #7
 8007320:	461f      	mov	r7, r3
 8007322:	260a      	movs	r6, #10
 8007324:	fb91 f5f6 	sdiv	r5, r1, r6
 8007328:	fb06 1115 	mls	r1, r6, r5, r1
 800732c:	3130      	adds	r1, #48	; 0x30
 800732e:	2d09      	cmp	r5, #9
 8007330:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007334:	f103 32ff 	add.w	r2, r3, #4294967295
 8007338:	4629      	mov	r1, r5
 800733a:	dc09      	bgt.n	8007350 <__exponent+0x4c>
 800733c:	3130      	adds	r1, #48	; 0x30
 800733e:	3b02      	subs	r3, #2
 8007340:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007344:	42bb      	cmp	r3, r7
 8007346:	4622      	mov	r2, r4
 8007348:	d304      	bcc.n	8007354 <__exponent+0x50>
 800734a:	1a10      	subs	r0, r2, r0
 800734c:	b003      	add	sp, #12
 800734e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007350:	4613      	mov	r3, r2
 8007352:	e7e7      	b.n	8007324 <__exponent+0x20>
 8007354:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007358:	f804 2b01 	strb.w	r2, [r4], #1
 800735c:	e7f2      	b.n	8007344 <__exponent+0x40>
 800735e:	2330      	movs	r3, #48	; 0x30
 8007360:	4419      	add	r1, r3
 8007362:	7083      	strb	r3, [r0, #2]
 8007364:	1d02      	adds	r2, r0, #4
 8007366:	70c1      	strb	r1, [r0, #3]
 8007368:	e7ef      	b.n	800734a <__exponent+0x46>
 800736a:	0000      	movs	r0, r0
 800736c:	0000      	movs	r0, r0
	...

08007370 <_printf_float>:
 8007370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007374:	b08d      	sub	sp, #52	; 0x34
 8007376:	460c      	mov	r4, r1
 8007378:	4616      	mov	r6, r2
 800737a:	461f      	mov	r7, r3
 800737c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007380:	4605      	mov	r5, r0
 8007382:	f001 f881 	bl	8008488 <_localeconv_r>
 8007386:	f8d0 b000 	ldr.w	fp, [r0]
 800738a:	4658      	mov	r0, fp
 800738c:	f7f8 ffa4 	bl	80002d8 <strlen>
 8007390:	2300      	movs	r3, #0
 8007392:	930a      	str	r3, [sp, #40]	; 0x28
 8007394:	f8d8 3000 	ldr.w	r3, [r8]
 8007398:	9005      	str	r0, [sp, #20]
 800739a:	3307      	adds	r3, #7
 800739c:	f023 0307 	bic.w	r3, r3, #7
 80073a0:	f103 0108 	add.w	r1, r3, #8
 80073a4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80073a8:	6822      	ldr	r2, [r4, #0]
 80073aa:	f8c8 1000 	str.w	r1, [r8]
 80073ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073b2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80073b6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8007640 <_printf_float+0x2d0>
 80073ba:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80073be:	eeb0 6bc0 	vabs.f64	d6, d0
 80073c2:	eeb4 6b47 	vcmp.f64	d6, d7
 80073c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ca:	dd24      	ble.n	8007416 <_printf_float+0xa6>
 80073cc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80073d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d4:	d502      	bpl.n	80073dc <_printf_float+0x6c>
 80073d6:	232d      	movs	r3, #45	; 0x2d
 80073d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073dc:	499a      	ldr	r1, [pc, #616]	; (8007648 <_printf_float+0x2d8>)
 80073de:	4b9b      	ldr	r3, [pc, #620]	; (800764c <_printf_float+0x2dc>)
 80073e0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80073e4:	bf8c      	ite	hi
 80073e6:	4688      	movhi	r8, r1
 80073e8:	4698      	movls	r8, r3
 80073ea:	f022 0204 	bic.w	r2, r2, #4
 80073ee:	2303      	movs	r3, #3
 80073f0:	6123      	str	r3, [r4, #16]
 80073f2:	6022      	str	r2, [r4, #0]
 80073f4:	f04f 0a00 	mov.w	sl, #0
 80073f8:	9700      	str	r7, [sp, #0]
 80073fa:	4633      	mov	r3, r6
 80073fc:	aa0b      	add	r2, sp, #44	; 0x2c
 80073fe:	4621      	mov	r1, r4
 8007400:	4628      	mov	r0, r5
 8007402:	f000 f9e1 	bl	80077c8 <_printf_common>
 8007406:	3001      	adds	r0, #1
 8007408:	f040 8089 	bne.w	800751e <_printf_float+0x1ae>
 800740c:	f04f 30ff 	mov.w	r0, #4294967295
 8007410:	b00d      	add	sp, #52	; 0x34
 8007412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007416:	eeb4 0b40 	vcmp.f64	d0, d0
 800741a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741e:	d702      	bvc.n	8007426 <_printf_float+0xb6>
 8007420:	498b      	ldr	r1, [pc, #556]	; (8007650 <_printf_float+0x2e0>)
 8007422:	4b8c      	ldr	r3, [pc, #560]	; (8007654 <_printf_float+0x2e4>)
 8007424:	e7dc      	b.n	80073e0 <_printf_float+0x70>
 8007426:	6861      	ldr	r1, [r4, #4]
 8007428:	1c4b      	adds	r3, r1, #1
 800742a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800742e:	ab0a      	add	r3, sp, #40	; 0x28
 8007430:	a809      	add	r0, sp, #36	; 0x24
 8007432:	d13b      	bne.n	80074ac <_printf_float+0x13c>
 8007434:	2106      	movs	r1, #6
 8007436:	6061      	str	r1, [r4, #4]
 8007438:	f04f 0c00 	mov.w	ip, #0
 800743c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8007440:	e9cd 0900 	strd	r0, r9, [sp]
 8007444:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007448:	6022      	str	r2, [r4, #0]
 800744a:	6861      	ldr	r1, [r4, #4]
 800744c:	4628      	mov	r0, r5
 800744e:	f7ff ff07 	bl	8007260 <__cvt>
 8007452:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8007456:	2b47      	cmp	r3, #71	; 0x47
 8007458:	4680      	mov	r8, r0
 800745a:	d109      	bne.n	8007470 <_printf_float+0x100>
 800745c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800745e:	1cd8      	adds	r0, r3, #3
 8007460:	db02      	blt.n	8007468 <_printf_float+0xf8>
 8007462:	6862      	ldr	r2, [r4, #4]
 8007464:	4293      	cmp	r3, r2
 8007466:	dd47      	ble.n	80074f8 <_printf_float+0x188>
 8007468:	f1a9 0902 	sub.w	r9, r9, #2
 800746c:	fa5f f989 	uxtb.w	r9, r9
 8007470:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007474:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007476:	d824      	bhi.n	80074c2 <_printf_float+0x152>
 8007478:	3901      	subs	r1, #1
 800747a:	464a      	mov	r2, r9
 800747c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007480:	9109      	str	r1, [sp, #36]	; 0x24
 8007482:	f7ff ff3f 	bl	8007304 <__exponent>
 8007486:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007488:	1813      	adds	r3, r2, r0
 800748a:	2a01      	cmp	r2, #1
 800748c:	4682      	mov	sl, r0
 800748e:	6123      	str	r3, [r4, #16]
 8007490:	dc02      	bgt.n	8007498 <_printf_float+0x128>
 8007492:	6822      	ldr	r2, [r4, #0]
 8007494:	07d1      	lsls	r1, r2, #31
 8007496:	d501      	bpl.n	800749c <_printf_float+0x12c>
 8007498:	3301      	adds	r3, #1
 800749a:	6123      	str	r3, [r4, #16]
 800749c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d0a9      	beq.n	80073f8 <_printf_float+0x88>
 80074a4:	232d      	movs	r3, #45	; 0x2d
 80074a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074aa:	e7a5      	b.n	80073f8 <_printf_float+0x88>
 80074ac:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 80074b0:	f000 8178 	beq.w	80077a4 <_printf_float+0x434>
 80074b4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80074b8:	d1be      	bne.n	8007438 <_printf_float+0xc8>
 80074ba:	2900      	cmp	r1, #0
 80074bc:	d1bc      	bne.n	8007438 <_printf_float+0xc8>
 80074be:	2101      	movs	r1, #1
 80074c0:	e7b9      	b.n	8007436 <_printf_float+0xc6>
 80074c2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80074c6:	d119      	bne.n	80074fc <_printf_float+0x18c>
 80074c8:	2900      	cmp	r1, #0
 80074ca:	6863      	ldr	r3, [r4, #4]
 80074cc:	dd0c      	ble.n	80074e8 <_printf_float+0x178>
 80074ce:	6121      	str	r1, [r4, #16]
 80074d0:	b913      	cbnz	r3, 80074d8 <_printf_float+0x168>
 80074d2:	6822      	ldr	r2, [r4, #0]
 80074d4:	07d2      	lsls	r2, r2, #31
 80074d6:	d502      	bpl.n	80074de <_printf_float+0x16e>
 80074d8:	3301      	adds	r3, #1
 80074da:	440b      	add	r3, r1
 80074dc:	6123      	str	r3, [r4, #16]
 80074de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e0:	65a3      	str	r3, [r4, #88]	; 0x58
 80074e2:	f04f 0a00 	mov.w	sl, #0
 80074e6:	e7d9      	b.n	800749c <_printf_float+0x12c>
 80074e8:	b913      	cbnz	r3, 80074f0 <_printf_float+0x180>
 80074ea:	6822      	ldr	r2, [r4, #0]
 80074ec:	07d0      	lsls	r0, r2, #31
 80074ee:	d501      	bpl.n	80074f4 <_printf_float+0x184>
 80074f0:	3302      	adds	r3, #2
 80074f2:	e7f3      	b.n	80074dc <_printf_float+0x16c>
 80074f4:	2301      	movs	r3, #1
 80074f6:	e7f1      	b.n	80074dc <_printf_float+0x16c>
 80074f8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80074fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007500:	4293      	cmp	r3, r2
 8007502:	db05      	blt.n	8007510 <_printf_float+0x1a0>
 8007504:	6822      	ldr	r2, [r4, #0]
 8007506:	6123      	str	r3, [r4, #16]
 8007508:	07d1      	lsls	r1, r2, #31
 800750a:	d5e8      	bpl.n	80074de <_printf_float+0x16e>
 800750c:	3301      	adds	r3, #1
 800750e:	e7e5      	b.n	80074dc <_printf_float+0x16c>
 8007510:	2b00      	cmp	r3, #0
 8007512:	bfd4      	ite	le
 8007514:	f1c3 0302 	rsble	r3, r3, #2
 8007518:	2301      	movgt	r3, #1
 800751a:	4413      	add	r3, r2
 800751c:	e7de      	b.n	80074dc <_printf_float+0x16c>
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	055a      	lsls	r2, r3, #21
 8007522:	d407      	bmi.n	8007534 <_printf_float+0x1c4>
 8007524:	6923      	ldr	r3, [r4, #16]
 8007526:	4642      	mov	r2, r8
 8007528:	4631      	mov	r1, r6
 800752a:	4628      	mov	r0, r5
 800752c:	47b8      	blx	r7
 800752e:	3001      	adds	r0, #1
 8007530:	d12a      	bne.n	8007588 <_printf_float+0x218>
 8007532:	e76b      	b.n	800740c <_printf_float+0x9c>
 8007534:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007538:	f240 80de 	bls.w	80076f8 <_printf_float+0x388>
 800753c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007540:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007548:	d133      	bne.n	80075b2 <_printf_float+0x242>
 800754a:	2301      	movs	r3, #1
 800754c:	4a42      	ldr	r2, [pc, #264]	; (8007658 <_printf_float+0x2e8>)
 800754e:	4631      	mov	r1, r6
 8007550:	4628      	mov	r0, r5
 8007552:	47b8      	blx	r7
 8007554:	3001      	adds	r0, #1
 8007556:	f43f af59 	beq.w	800740c <_printf_float+0x9c>
 800755a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800755e:	429a      	cmp	r2, r3
 8007560:	db02      	blt.n	8007568 <_printf_float+0x1f8>
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	07d8      	lsls	r0, r3, #31
 8007566:	d50f      	bpl.n	8007588 <_printf_float+0x218>
 8007568:	9b05      	ldr	r3, [sp, #20]
 800756a:	465a      	mov	r2, fp
 800756c:	4631      	mov	r1, r6
 800756e:	4628      	mov	r0, r5
 8007570:	47b8      	blx	r7
 8007572:	3001      	adds	r0, #1
 8007574:	f43f af4a 	beq.w	800740c <_printf_float+0x9c>
 8007578:	f04f 0800 	mov.w	r8, #0
 800757c:	f104 091a 	add.w	r9, r4, #26
 8007580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007582:	3b01      	subs	r3, #1
 8007584:	4543      	cmp	r3, r8
 8007586:	dc09      	bgt.n	800759c <_printf_float+0x22c>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	079b      	lsls	r3, r3, #30
 800758c:	f100 8105 	bmi.w	800779a <_printf_float+0x42a>
 8007590:	68e0      	ldr	r0, [r4, #12]
 8007592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007594:	4298      	cmp	r0, r3
 8007596:	bfb8      	it	lt
 8007598:	4618      	movlt	r0, r3
 800759a:	e739      	b.n	8007410 <_printf_float+0xa0>
 800759c:	2301      	movs	r3, #1
 800759e:	464a      	mov	r2, r9
 80075a0:	4631      	mov	r1, r6
 80075a2:	4628      	mov	r0, r5
 80075a4:	47b8      	blx	r7
 80075a6:	3001      	adds	r0, #1
 80075a8:	f43f af30 	beq.w	800740c <_printf_float+0x9c>
 80075ac:	f108 0801 	add.w	r8, r8, #1
 80075b0:	e7e6      	b.n	8007580 <_printf_float+0x210>
 80075b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	dc2b      	bgt.n	8007610 <_printf_float+0x2a0>
 80075b8:	2301      	movs	r3, #1
 80075ba:	4a27      	ldr	r2, [pc, #156]	; (8007658 <_printf_float+0x2e8>)
 80075bc:	4631      	mov	r1, r6
 80075be:	4628      	mov	r0, r5
 80075c0:	47b8      	blx	r7
 80075c2:	3001      	adds	r0, #1
 80075c4:	f43f af22 	beq.w	800740c <_printf_float+0x9c>
 80075c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ca:	b923      	cbnz	r3, 80075d6 <_printf_float+0x266>
 80075cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ce:	b913      	cbnz	r3, 80075d6 <_printf_float+0x266>
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	07d9      	lsls	r1, r3, #31
 80075d4:	d5d8      	bpl.n	8007588 <_printf_float+0x218>
 80075d6:	9b05      	ldr	r3, [sp, #20]
 80075d8:	465a      	mov	r2, fp
 80075da:	4631      	mov	r1, r6
 80075dc:	4628      	mov	r0, r5
 80075de:	47b8      	blx	r7
 80075e0:	3001      	adds	r0, #1
 80075e2:	f43f af13 	beq.w	800740c <_printf_float+0x9c>
 80075e6:	f04f 0900 	mov.w	r9, #0
 80075ea:	f104 0a1a 	add.w	sl, r4, #26
 80075ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f0:	425b      	negs	r3, r3
 80075f2:	454b      	cmp	r3, r9
 80075f4:	dc01      	bgt.n	80075fa <_printf_float+0x28a>
 80075f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075f8:	e795      	b.n	8007526 <_printf_float+0x1b6>
 80075fa:	2301      	movs	r3, #1
 80075fc:	4652      	mov	r2, sl
 80075fe:	4631      	mov	r1, r6
 8007600:	4628      	mov	r0, r5
 8007602:	47b8      	blx	r7
 8007604:	3001      	adds	r0, #1
 8007606:	f43f af01 	beq.w	800740c <_printf_float+0x9c>
 800760a:	f109 0901 	add.w	r9, r9, #1
 800760e:	e7ee      	b.n	80075ee <_printf_float+0x27e>
 8007610:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007612:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007614:	429a      	cmp	r2, r3
 8007616:	bfa8      	it	ge
 8007618:	461a      	movge	r2, r3
 800761a:	2a00      	cmp	r2, #0
 800761c:	4691      	mov	r9, r2
 800761e:	dd07      	ble.n	8007630 <_printf_float+0x2c0>
 8007620:	4613      	mov	r3, r2
 8007622:	4631      	mov	r1, r6
 8007624:	4642      	mov	r2, r8
 8007626:	4628      	mov	r0, r5
 8007628:	47b8      	blx	r7
 800762a:	3001      	adds	r0, #1
 800762c:	f43f aeee 	beq.w	800740c <_printf_float+0x9c>
 8007630:	f104 031a 	add.w	r3, r4, #26
 8007634:	f04f 0a00 	mov.w	sl, #0
 8007638:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800763c:	9307      	str	r3, [sp, #28]
 800763e:	e017      	b.n	8007670 <_printf_float+0x300>
 8007640:	ffffffff 	.word	0xffffffff
 8007644:	7fefffff 	.word	0x7fefffff
 8007648:	08008efc 	.word	0x08008efc
 800764c:	08008ef8 	.word	0x08008ef8
 8007650:	08008f04 	.word	0x08008f04
 8007654:	08008f00 	.word	0x08008f00
 8007658:	08008f08 	.word	0x08008f08
 800765c:	2301      	movs	r3, #1
 800765e:	9a07      	ldr	r2, [sp, #28]
 8007660:	4631      	mov	r1, r6
 8007662:	4628      	mov	r0, r5
 8007664:	47b8      	blx	r7
 8007666:	3001      	adds	r0, #1
 8007668:	f43f aed0 	beq.w	800740c <_printf_float+0x9c>
 800766c:	f10a 0a01 	add.w	sl, sl, #1
 8007670:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007672:	9306      	str	r3, [sp, #24]
 8007674:	eba3 0309 	sub.w	r3, r3, r9
 8007678:	4553      	cmp	r3, sl
 800767a:	dcef      	bgt.n	800765c <_printf_float+0x2ec>
 800767c:	9b06      	ldr	r3, [sp, #24]
 800767e:	4498      	add	r8, r3
 8007680:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007684:	429a      	cmp	r2, r3
 8007686:	db15      	blt.n	80076b4 <_printf_float+0x344>
 8007688:	6823      	ldr	r3, [r4, #0]
 800768a:	07da      	lsls	r2, r3, #31
 800768c:	d412      	bmi.n	80076b4 <_printf_float+0x344>
 800768e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007690:	9a06      	ldr	r2, [sp, #24]
 8007692:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007694:	1a9a      	subs	r2, r3, r2
 8007696:	eba3 0a01 	sub.w	sl, r3, r1
 800769a:	4592      	cmp	sl, r2
 800769c:	bfa8      	it	ge
 800769e:	4692      	movge	sl, r2
 80076a0:	f1ba 0f00 	cmp.w	sl, #0
 80076a4:	dc0e      	bgt.n	80076c4 <_printf_float+0x354>
 80076a6:	f04f 0800 	mov.w	r8, #0
 80076aa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076ae:	f104 091a 	add.w	r9, r4, #26
 80076b2:	e019      	b.n	80076e8 <_printf_float+0x378>
 80076b4:	9b05      	ldr	r3, [sp, #20]
 80076b6:	465a      	mov	r2, fp
 80076b8:	4631      	mov	r1, r6
 80076ba:	4628      	mov	r0, r5
 80076bc:	47b8      	blx	r7
 80076be:	3001      	adds	r0, #1
 80076c0:	d1e5      	bne.n	800768e <_printf_float+0x31e>
 80076c2:	e6a3      	b.n	800740c <_printf_float+0x9c>
 80076c4:	4653      	mov	r3, sl
 80076c6:	4642      	mov	r2, r8
 80076c8:	4631      	mov	r1, r6
 80076ca:	4628      	mov	r0, r5
 80076cc:	47b8      	blx	r7
 80076ce:	3001      	adds	r0, #1
 80076d0:	d1e9      	bne.n	80076a6 <_printf_float+0x336>
 80076d2:	e69b      	b.n	800740c <_printf_float+0x9c>
 80076d4:	2301      	movs	r3, #1
 80076d6:	464a      	mov	r2, r9
 80076d8:	4631      	mov	r1, r6
 80076da:	4628      	mov	r0, r5
 80076dc:	47b8      	blx	r7
 80076de:	3001      	adds	r0, #1
 80076e0:	f43f ae94 	beq.w	800740c <_printf_float+0x9c>
 80076e4:	f108 0801 	add.w	r8, r8, #1
 80076e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076ec:	1a9b      	subs	r3, r3, r2
 80076ee:	eba3 030a 	sub.w	r3, r3, sl
 80076f2:	4543      	cmp	r3, r8
 80076f4:	dcee      	bgt.n	80076d4 <_printf_float+0x364>
 80076f6:	e747      	b.n	8007588 <_printf_float+0x218>
 80076f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076fa:	2a01      	cmp	r2, #1
 80076fc:	dc01      	bgt.n	8007702 <_printf_float+0x392>
 80076fe:	07db      	lsls	r3, r3, #31
 8007700:	d539      	bpl.n	8007776 <_printf_float+0x406>
 8007702:	2301      	movs	r3, #1
 8007704:	4642      	mov	r2, r8
 8007706:	4631      	mov	r1, r6
 8007708:	4628      	mov	r0, r5
 800770a:	47b8      	blx	r7
 800770c:	3001      	adds	r0, #1
 800770e:	f43f ae7d 	beq.w	800740c <_printf_float+0x9c>
 8007712:	9b05      	ldr	r3, [sp, #20]
 8007714:	465a      	mov	r2, fp
 8007716:	4631      	mov	r1, r6
 8007718:	4628      	mov	r0, r5
 800771a:	47b8      	blx	r7
 800771c:	3001      	adds	r0, #1
 800771e:	f108 0801 	add.w	r8, r8, #1
 8007722:	f43f ae73 	beq.w	800740c <_printf_float+0x9c>
 8007726:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800772a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800772c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007734:	f103 33ff 	add.w	r3, r3, #4294967295
 8007738:	d018      	beq.n	800776c <_printf_float+0x3fc>
 800773a:	4642      	mov	r2, r8
 800773c:	4631      	mov	r1, r6
 800773e:	4628      	mov	r0, r5
 8007740:	47b8      	blx	r7
 8007742:	3001      	adds	r0, #1
 8007744:	d10e      	bne.n	8007764 <_printf_float+0x3f4>
 8007746:	e661      	b.n	800740c <_printf_float+0x9c>
 8007748:	2301      	movs	r3, #1
 800774a:	464a      	mov	r2, r9
 800774c:	4631      	mov	r1, r6
 800774e:	4628      	mov	r0, r5
 8007750:	47b8      	blx	r7
 8007752:	3001      	adds	r0, #1
 8007754:	f43f ae5a 	beq.w	800740c <_printf_float+0x9c>
 8007758:	f108 0801 	add.w	r8, r8, #1
 800775c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800775e:	3b01      	subs	r3, #1
 8007760:	4543      	cmp	r3, r8
 8007762:	dcf1      	bgt.n	8007748 <_printf_float+0x3d8>
 8007764:	4653      	mov	r3, sl
 8007766:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800776a:	e6dd      	b.n	8007528 <_printf_float+0x1b8>
 800776c:	f04f 0800 	mov.w	r8, #0
 8007770:	f104 091a 	add.w	r9, r4, #26
 8007774:	e7f2      	b.n	800775c <_printf_float+0x3ec>
 8007776:	2301      	movs	r3, #1
 8007778:	e7df      	b.n	800773a <_printf_float+0x3ca>
 800777a:	2301      	movs	r3, #1
 800777c:	464a      	mov	r2, r9
 800777e:	4631      	mov	r1, r6
 8007780:	4628      	mov	r0, r5
 8007782:	47b8      	blx	r7
 8007784:	3001      	adds	r0, #1
 8007786:	f43f ae41 	beq.w	800740c <_printf_float+0x9c>
 800778a:	f108 0801 	add.w	r8, r8, #1
 800778e:	68e3      	ldr	r3, [r4, #12]
 8007790:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007792:	1a9b      	subs	r3, r3, r2
 8007794:	4543      	cmp	r3, r8
 8007796:	dcf0      	bgt.n	800777a <_printf_float+0x40a>
 8007798:	e6fa      	b.n	8007590 <_printf_float+0x220>
 800779a:	f04f 0800 	mov.w	r8, #0
 800779e:	f104 0919 	add.w	r9, r4, #25
 80077a2:	e7f4      	b.n	800778e <_printf_float+0x41e>
 80077a4:	2900      	cmp	r1, #0
 80077a6:	f43f ae8a 	beq.w	80074be <_printf_float+0x14e>
 80077aa:	f04f 0c00 	mov.w	ip, #0
 80077ae:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80077b2:	e9cd 0900 	strd	r0, r9, [sp]
 80077b6:	6022      	str	r2, [r4, #0]
 80077b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80077bc:	4628      	mov	r0, r5
 80077be:	f7ff fd4f 	bl	8007260 <__cvt>
 80077c2:	4680      	mov	r8, r0
 80077c4:	e64a      	b.n	800745c <_printf_float+0xec>
 80077c6:	bf00      	nop

080077c8 <_printf_common>:
 80077c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077cc:	4691      	mov	r9, r2
 80077ce:	461f      	mov	r7, r3
 80077d0:	688a      	ldr	r2, [r1, #8]
 80077d2:	690b      	ldr	r3, [r1, #16]
 80077d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077d8:	4293      	cmp	r3, r2
 80077da:	bfb8      	it	lt
 80077dc:	4613      	movlt	r3, r2
 80077de:	f8c9 3000 	str.w	r3, [r9]
 80077e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077e6:	4606      	mov	r6, r0
 80077e8:	460c      	mov	r4, r1
 80077ea:	b112      	cbz	r2, 80077f2 <_printf_common+0x2a>
 80077ec:	3301      	adds	r3, #1
 80077ee:	f8c9 3000 	str.w	r3, [r9]
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	0699      	lsls	r1, r3, #26
 80077f6:	bf42      	ittt	mi
 80077f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80077fc:	3302      	addmi	r3, #2
 80077fe:	f8c9 3000 	strmi.w	r3, [r9]
 8007802:	6825      	ldr	r5, [r4, #0]
 8007804:	f015 0506 	ands.w	r5, r5, #6
 8007808:	d107      	bne.n	800781a <_printf_common+0x52>
 800780a:	f104 0a19 	add.w	sl, r4, #25
 800780e:	68e3      	ldr	r3, [r4, #12]
 8007810:	f8d9 2000 	ldr.w	r2, [r9]
 8007814:	1a9b      	subs	r3, r3, r2
 8007816:	42ab      	cmp	r3, r5
 8007818:	dc28      	bgt.n	800786c <_printf_common+0xa4>
 800781a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800781e:	6822      	ldr	r2, [r4, #0]
 8007820:	3300      	adds	r3, #0
 8007822:	bf18      	it	ne
 8007824:	2301      	movne	r3, #1
 8007826:	0692      	lsls	r2, r2, #26
 8007828:	d42d      	bmi.n	8007886 <_printf_common+0xbe>
 800782a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800782e:	4639      	mov	r1, r7
 8007830:	4630      	mov	r0, r6
 8007832:	47c0      	blx	r8
 8007834:	3001      	adds	r0, #1
 8007836:	d020      	beq.n	800787a <_printf_common+0xb2>
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	68e5      	ldr	r5, [r4, #12]
 800783c:	f8d9 2000 	ldr.w	r2, [r9]
 8007840:	f003 0306 	and.w	r3, r3, #6
 8007844:	2b04      	cmp	r3, #4
 8007846:	bf08      	it	eq
 8007848:	1aad      	subeq	r5, r5, r2
 800784a:	68a3      	ldr	r3, [r4, #8]
 800784c:	6922      	ldr	r2, [r4, #16]
 800784e:	bf0c      	ite	eq
 8007850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007854:	2500      	movne	r5, #0
 8007856:	4293      	cmp	r3, r2
 8007858:	bfc4      	itt	gt
 800785a:	1a9b      	subgt	r3, r3, r2
 800785c:	18ed      	addgt	r5, r5, r3
 800785e:	f04f 0900 	mov.w	r9, #0
 8007862:	341a      	adds	r4, #26
 8007864:	454d      	cmp	r5, r9
 8007866:	d11a      	bne.n	800789e <_printf_common+0xd6>
 8007868:	2000      	movs	r0, #0
 800786a:	e008      	b.n	800787e <_printf_common+0xb6>
 800786c:	2301      	movs	r3, #1
 800786e:	4652      	mov	r2, sl
 8007870:	4639      	mov	r1, r7
 8007872:	4630      	mov	r0, r6
 8007874:	47c0      	blx	r8
 8007876:	3001      	adds	r0, #1
 8007878:	d103      	bne.n	8007882 <_printf_common+0xba>
 800787a:	f04f 30ff 	mov.w	r0, #4294967295
 800787e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007882:	3501      	adds	r5, #1
 8007884:	e7c3      	b.n	800780e <_printf_common+0x46>
 8007886:	18e1      	adds	r1, r4, r3
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	2030      	movs	r0, #48	; 0x30
 800788c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007890:	4422      	add	r2, r4
 8007892:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007896:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800789a:	3302      	adds	r3, #2
 800789c:	e7c5      	b.n	800782a <_printf_common+0x62>
 800789e:	2301      	movs	r3, #1
 80078a0:	4622      	mov	r2, r4
 80078a2:	4639      	mov	r1, r7
 80078a4:	4630      	mov	r0, r6
 80078a6:	47c0      	blx	r8
 80078a8:	3001      	adds	r0, #1
 80078aa:	d0e6      	beq.n	800787a <_printf_common+0xb2>
 80078ac:	f109 0901 	add.w	r9, r9, #1
 80078b0:	e7d8      	b.n	8007864 <_printf_common+0x9c>
	...

080078b4 <_sbrk_r>:
 80078b4:	b538      	push	{r3, r4, r5, lr}
 80078b6:	4c06      	ldr	r4, [pc, #24]	; (80078d0 <_sbrk_r+0x1c>)
 80078b8:	2300      	movs	r3, #0
 80078ba:	4605      	mov	r5, r0
 80078bc:	4608      	mov	r0, r1
 80078be:	6023      	str	r3, [r4, #0]
 80078c0:	f7f9 fc2a 	bl	8001118 <_sbrk>
 80078c4:	1c43      	adds	r3, r0, #1
 80078c6:	d102      	bne.n	80078ce <_sbrk_r+0x1a>
 80078c8:	6823      	ldr	r3, [r4, #0]
 80078ca:	b103      	cbz	r3, 80078ce <_sbrk_r+0x1a>
 80078cc:	602b      	str	r3, [r5, #0]
 80078ce:	bd38      	pop	{r3, r4, r5, pc}
 80078d0:	20006704 	.word	0x20006704

080078d4 <quorem>:
 80078d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d8:	6903      	ldr	r3, [r0, #16]
 80078da:	690c      	ldr	r4, [r1, #16]
 80078dc:	42a3      	cmp	r3, r4
 80078de:	4680      	mov	r8, r0
 80078e0:	f2c0 8082 	blt.w	80079e8 <quorem+0x114>
 80078e4:	3c01      	subs	r4, #1
 80078e6:	f101 0714 	add.w	r7, r1, #20
 80078ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80078ee:	f100 0614 	add.w	r6, r0, #20
 80078f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80078f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80078fa:	eb06 030c 	add.w	r3, r6, ip
 80078fe:	3501      	adds	r5, #1
 8007900:	eb07 090c 	add.w	r9, r7, ip
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	fbb0 f5f5 	udiv	r5, r0, r5
 800790a:	b395      	cbz	r5, 8007972 <quorem+0x9e>
 800790c:	f04f 0a00 	mov.w	sl, #0
 8007910:	4638      	mov	r0, r7
 8007912:	46b6      	mov	lr, r6
 8007914:	46d3      	mov	fp, sl
 8007916:	f850 2b04 	ldr.w	r2, [r0], #4
 800791a:	b293      	uxth	r3, r2
 800791c:	fb05 a303 	mla	r3, r5, r3, sl
 8007920:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007924:	b29b      	uxth	r3, r3
 8007926:	ebab 0303 	sub.w	r3, fp, r3
 800792a:	0c12      	lsrs	r2, r2, #16
 800792c:	f8de b000 	ldr.w	fp, [lr]
 8007930:	fb05 a202 	mla	r2, r5, r2, sl
 8007934:	fa13 f38b 	uxtah	r3, r3, fp
 8007938:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800793c:	fa1f fb82 	uxth.w	fp, r2
 8007940:	f8de 2000 	ldr.w	r2, [lr]
 8007944:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007948:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800794c:	b29b      	uxth	r3, r3
 800794e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007952:	4581      	cmp	r9, r0
 8007954:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007958:	f84e 3b04 	str.w	r3, [lr], #4
 800795c:	d2db      	bcs.n	8007916 <quorem+0x42>
 800795e:	f856 300c 	ldr.w	r3, [r6, ip]
 8007962:	b933      	cbnz	r3, 8007972 <quorem+0x9e>
 8007964:	9b01      	ldr	r3, [sp, #4]
 8007966:	3b04      	subs	r3, #4
 8007968:	429e      	cmp	r6, r3
 800796a:	461a      	mov	r2, r3
 800796c:	d330      	bcc.n	80079d0 <quorem+0xfc>
 800796e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007972:	4640      	mov	r0, r8
 8007974:	f000 ffb8 	bl	80088e8 <__mcmp>
 8007978:	2800      	cmp	r0, #0
 800797a:	db25      	blt.n	80079c8 <quorem+0xf4>
 800797c:	3501      	adds	r5, #1
 800797e:	4630      	mov	r0, r6
 8007980:	f04f 0c00 	mov.w	ip, #0
 8007984:	f857 2b04 	ldr.w	r2, [r7], #4
 8007988:	f8d0 e000 	ldr.w	lr, [r0]
 800798c:	b293      	uxth	r3, r2
 800798e:	ebac 0303 	sub.w	r3, ip, r3
 8007992:	0c12      	lsrs	r2, r2, #16
 8007994:	fa13 f38e 	uxtah	r3, r3, lr
 8007998:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800799c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079a6:	45b9      	cmp	r9, r7
 80079a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80079ac:	f840 3b04 	str.w	r3, [r0], #4
 80079b0:	d2e8      	bcs.n	8007984 <quorem+0xb0>
 80079b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80079b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80079ba:	b92a      	cbnz	r2, 80079c8 <quorem+0xf4>
 80079bc:	3b04      	subs	r3, #4
 80079be:	429e      	cmp	r6, r3
 80079c0:	461a      	mov	r2, r3
 80079c2:	d30b      	bcc.n	80079dc <quorem+0x108>
 80079c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80079c8:	4628      	mov	r0, r5
 80079ca:	b003      	add	sp, #12
 80079cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d0:	6812      	ldr	r2, [r2, #0]
 80079d2:	3b04      	subs	r3, #4
 80079d4:	2a00      	cmp	r2, #0
 80079d6:	d1ca      	bne.n	800796e <quorem+0x9a>
 80079d8:	3c01      	subs	r4, #1
 80079da:	e7c5      	b.n	8007968 <quorem+0x94>
 80079dc:	6812      	ldr	r2, [r2, #0]
 80079de:	3b04      	subs	r3, #4
 80079e0:	2a00      	cmp	r2, #0
 80079e2:	d1ef      	bne.n	80079c4 <quorem+0xf0>
 80079e4:	3c01      	subs	r4, #1
 80079e6:	e7ea      	b.n	80079be <quorem+0xea>
 80079e8:	2000      	movs	r0, #0
 80079ea:	e7ee      	b.n	80079ca <quorem+0xf6>
 80079ec:	0000      	movs	r0, r0
	...

080079f0 <_dtoa_r>:
 80079f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f4:	ec57 6b10 	vmov	r6, r7, d0
 80079f8:	b095      	sub	sp, #84	; 0x54
 80079fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80079fc:	9108      	str	r1, [sp, #32]
 80079fe:	4604      	mov	r4, r0
 8007a00:	920a      	str	r2, [sp, #40]	; 0x28
 8007a02:	9311      	str	r3, [sp, #68]	; 0x44
 8007a04:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8007a08:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007a0c:	b93d      	cbnz	r5, 8007a1e <_dtoa_r+0x2e>
 8007a0e:	2010      	movs	r0, #16
 8007a10:	f7ff fb66 	bl	80070e0 <malloc>
 8007a14:	6260      	str	r0, [r4, #36]	; 0x24
 8007a16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a1a:	6005      	str	r5, [r0, #0]
 8007a1c:	60c5      	str	r5, [r0, #12]
 8007a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a20:	6819      	ldr	r1, [r3, #0]
 8007a22:	b151      	cbz	r1, 8007a3a <_dtoa_r+0x4a>
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	604a      	str	r2, [r1, #4]
 8007a28:	2301      	movs	r3, #1
 8007a2a:	4093      	lsls	r3, r2
 8007a2c:	608b      	str	r3, [r1, #8]
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f000 fd79 	bl	8008526 <_Bfree>
 8007a34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a36:	2200      	movs	r2, #0
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	1e3b      	subs	r3, r7, #0
 8007a3c:	bfb9      	ittee	lt
 8007a3e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a42:	9303      	strlt	r3, [sp, #12]
 8007a44:	2300      	movge	r3, #0
 8007a46:	f8c8 3000 	strge.w	r3, [r8]
 8007a4a:	9d03      	ldr	r5, [sp, #12]
 8007a4c:	4bac      	ldr	r3, [pc, #688]	; (8007d00 <_dtoa_r+0x310>)
 8007a4e:	bfbc      	itt	lt
 8007a50:	2201      	movlt	r2, #1
 8007a52:	f8c8 2000 	strlt.w	r2, [r8]
 8007a56:	43ab      	bics	r3, r5
 8007a58:	d11b      	bne.n	8007a92 <_dtoa_r+0xa2>
 8007a5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007a5c:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	9b02      	ldr	r3, [sp, #8]
 8007a64:	b923      	cbnz	r3, 8007a70 <_dtoa_r+0x80>
 8007a66:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007a6a:	2d00      	cmp	r5, #0
 8007a6c:	f000 84dd 	beq.w	800842a <_dtoa_r+0xa3a>
 8007a70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007a72:	b953      	cbnz	r3, 8007a8a <_dtoa_r+0x9a>
 8007a74:	4ba3      	ldr	r3, [pc, #652]	; (8007d04 <_dtoa_r+0x314>)
 8007a76:	e020      	b.n	8007aba <_dtoa_r+0xca>
 8007a78:	4ba3      	ldr	r3, [pc, #652]	; (8007d08 <_dtoa_r+0x318>)
 8007a7a:	9304      	str	r3, [sp, #16]
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007a80:	6013      	str	r3, [r2, #0]
 8007a82:	9804      	ldr	r0, [sp, #16]
 8007a84:	b015      	add	sp, #84	; 0x54
 8007a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8a:	4b9e      	ldr	r3, [pc, #632]	; (8007d04 <_dtoa_r+0x314>)
 8007a8c:	9304      	str	r3, [sp, #16]
 8007a8e:	3303      	adds	r3, #3
 8007a90:	e7f5      	b.n	8007a7e <_dtoa_r+0x8e>
 8007a92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a9e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007aa2:	d10c      	bne.n	8007abe <_dtoa_r+0xce>
 8007aa4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	6013      	str	r3, [r2, #0]
 8007aaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 84b9 	beq.w	8008424 <_dtoa_r+0xa34>
 8007ab2:	4b96      	ldr	r3, [pc, #600]	; (8007d0c <_dtoa_r+0x31c>)
 8007ab4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	9304      	str	r3, [sp, #16]
 8007abc:	e7e1      	b.n	8007a82 <_dtoa_r+0x92>
 8007abe:	a913      	add	r1, sp, #76	; 0x4c
 8007ac0:	aa12      	add	r2, sp, #72	; 0x48
 8007ac2:	ed9d 0b04 	vldr	d0, [sp, #16]
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f000 ff85 	bl	80089d6 <__d2b>
 8007acc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8007ad0:	9001      	str	r0, [sp, #4]
 8007ad2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007ad4:	2e00      	cmp	r6, #0
 8007ad6:	d046      	beq.n	8007b66 <_dtoa_r+0x176>
 8007ad8:	9805      	ldr	r0, [sp, #20]
 8007ada:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8007ade:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ae2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8007ae6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007aea:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8007aee:	2700      	movs	r7, #0
 8007af0:	ee07 aa90 	vmov	s15, sl
 8007af4:	ec43 2b16 	vmov	d6, r2, r3
 8007af8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8007afc:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8007ce8 <_dtoa_r+0x2f8>
 8007b00:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007b04:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007b08:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8007cf0 <_dtoa_r+0x300>
 8007b0c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8007b10:	eeb0 7b46 	vmov.f64	d7, d6
 8007b14:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8007cf8 <_dtoa_r+0x308>
 8007b18:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007b1c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007b20:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b28:	ee16 ba90 	vmov	fp, s13
 8007b2c:	d508      	bpl.n	8007b40 <_dtoa_r+0x150>
 8007b2e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007b32:	eeb4 6b47 	vcmp.f64	d6, d7
 8007b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b3a:	bf18      	it	ne
 8007b3c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007b40:	f1bb 0f16 	cmp.w	fp, #22
 8007b44:	d834      	bhi.n	8007bb0 <_dtoa_r+0x1c0>
 8007b46:	4b72      	ldr	r3, [pc, #456]	; (8007d10 <_dtoa_r+0x320>)
 8007b48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b4c:	ed93 7b00 	vldr	d7, [r3]
 8007b50:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007b54:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b5c:	dd01      	ble.n	8007b62 <_dtoa_r+0x172>
 8007b5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b62:	2300      	movs	r3, #0
 8007b64:	e025      	b.n	8007bb2 <_dtoa_r+0x1c2>
 8007b66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b68:	eb01 0a03 	add.w	sl, r1, r3
 8007b6c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8007b70:	2b20      	cmp	r3, #32
 8007b72:	dd17      	ble.n	8007ba4 <_dtoa_r+0x1b4>
 8007b74:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007b78:	9a02      	ldr	r2, [sp, #8]
 8007b7a:	409d      	lsls	r5, r3
 8007b7c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8007b80:	fa22 f303 	lsr.w	r3, r2, r3
 8007b84:	432b      	orrs	r3, r5
 8007b86:	ee07 3a90 	vmov	s15, r3
 8007b8a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007b8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b92:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007b96:	9805      	ldr	r0, [sp, #20]
 8007b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b9c:	2701      	movs	r7, #1
 8007b9e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8007ba2:	e7a5      	b.n	8007af0 <_dtoa_r+0x100>
 8007ba4:	9a02      	ldr	r2, [sp, #8]
 8007ba6:	f1c3 0320 	rsb	r3, r3, #32
 8007baa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bae:	e7ea      	b.n	8007b86 <_dtoa_r+0x196>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	eba1 0a0a 	sub.w	sl, r1, sl
 8007bb6:	9310      	str	r3, [sp, #64]	; 0x40
 8007bb8:	f1ba 0301 	subs.w	r3, sl, #1
 8007bbc:	9307      	str	r3, [sp, #28]
 8007bbe:	bf43      	ittte	mi
 8007bc0:	2300      	movmi	r3, #0
 8007bc2:	f1ca 0a01 	rsbmi	sl, sl, #1
 8007bc6:	9307      	strmi	r3, [sp, #28]
 8007bc8:	f04f 0a00 	movpl.w	sl, #0
 8007bcc:	f1bb 0f00 	cmp.w	fp, #0
 8007bd0:	db19      	blt.n	8007c06 <_dtoa_r+0x216>
 8007bd2:	9b07      	ldr	r3, [sp, #28]
 8007bd4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007bd8:	445b      	add	r3, fp
 8007bda:	9307      	str	r3, [sp, #28]
 8007bdc:	f04f 0800 	mov.w	r8, #0
 8007be0:	9b08      	ldr	r3, [sp, #32]
 8007be2:	2b09      	cmp	r3, #9
 8007be4:	d866      	bhi.n	8007cb4 <_dtoa_r+0x2c4>
 8007be6:	2b05      	cmp	r3, #5
 8007be8:	bfc4      	itt	gt
 8007bea:	3b04      	subgt	r3, #4
 8007bec:	9308      	strgt	r3, [sp, #32]
 8007bee:	9b08      	ldr	r3, [sp, #32]
 8007bf0:	f1a3 0302 	sub.w	r3, r3, #2
 8007bf4:	bfcc      	ite	gt
 8007bf6:	2500      	movgt	r5, #0
 8007bf8:	2501      	movle	r5, #1
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d866      	bhi.n	8007ccc <_dtoa_r+0x2dc>
 8007bfe:	e8df f003 	tbb	[pc, r3]
 8007c02:	5755      	.short	0x5755
 8007c04:	4909      	.short	0x4909
 8007c06:	2300      	movs	r3, #0
 8007c08:	ebaa 0a0b 	sub.w	sl, sl, fp
 8007c0c:	f1cb 0800 	rsb	r8, fp, #0
 8007c10:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c12:	e7e5      	b.n	8007be0 <_dtoa_r+0x1f0>
 8007c14:	2301      	movs	r3, #1
 8007c16:	9309      	str	r3, [sp, #36]	; 0x24
 8007c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	dd59      	ble.n	8007cd2 <_dtoa_r+0x2e2>
 8007c1e:	9306      	str	r3, [sp, #24]
 8007c20:	4699      	mov	r9, r3
 8007c22:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c24:	2200      	movs	r2, #0
 8007c26:	6072      	str	r2, [r6, #4]
 8007c28:	2204      	movs	r2, #4
 8007c2a:	f102 0014 	add.w	r0, r2, #20
 8007c2e:	4298      	cmp	r0, r3
 8007c30:	6871      	ldr	r1, [r6, #4]
 8007c32:	d953      	bls.n	8007cdc <_dtoa_r+0x2ec>
 8007c34:	4620      	mov	r0, r4
 8007c36:	f000 fc42 	bl	80084be <_Balloc>
 8007c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c3c:	6030      	str	r0, [r6, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	9304      	str	r3, [sp, #16]
 8007c42:	f1b9 0f0e 	cmp.w	r9, #14
 8007c46:	f200 80c2 	bhi.w	8007dce <_dtoa_r+0x3de>
 8007c4a:	2d00      	cmp	r5, #0
 8007c4c:	f000 80bf 	beq.w	8007dce <_dtoa_r+0x3de>
 8007c50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c54:	f1bb 0f00 	cmp.w	fp, #0
 8007c58:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8007c5c:	f340 80e6 	ble.w	8007e2c <_dtoa_r+0x43c>
 8007c60:	4a2b      	ldr	r2, [pc, #172]	; (8007d10 <_dtoa_r+0x320>)
 8007c62:	f00b 030f 	and.w	r3, fp, #15
 8007c66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007c6a:	ed93 7b00 	vldr	d7, [r3]
 8007c6e:	ea4f 132b 	mov.w	r3, fp, asr #4
 8007c72:	06da      	lsls	r2, r3, #27
 8007c74:	f140 80d8 	bpl.w	8007e28 <_dtoa_r+0x438>
 8007c78:	4a26      	ldr	r2, [pc, #152]	; (8007d14 <_dtoa_r+0x324>)
 8007c7a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8007c7e:	ed92 6b08 	vldr	d6, [r2, #32]
 8007c82:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8007c86:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007c8a:	f003 030f 	and.w	r3, r3, #15
 8007c8e:	2203      	movs	r2, #3
 8007c90:	4920      	ldr	r1, [pc, #128]	; (8007d14 <_dtoa_r+0x324>)
 8007c92:	e04a      	b.n	8007d2a <_dtoa_r+0x33a>
 8007c94:	2301      	movs	r3, #1
 8007c96:	9309      	str	r3, [sp, #36]	; 0x24
 8007c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c9a:	445b      	add	r3, fp
 8007c9c:	f103 0901 	add.w	r9, r3, #1
 8007ca0:	9306      	str	r3, [sp, #24]
 8007ca2:	464b      	mov	r3, r9
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	bfb8      	it	lt
 8007ca8:	2301      	movlt	r3, #1
 8007caa:	e7ba      	b.n	8007c22 <_dtoa_r+0x232>
 8007cac:	2300      	movs	r3, #0
 8007cae:	e7b2      	b.n	8007c16 <_dtoa_r+0x226>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	e7f0      	b.n	8007c96 <_dtoa_r+0x2a6>
 8007cb4:	2501      	movs	r5, #1
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8007cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc0:	9306      	str	r3, [sp, #24]
 8007cc2:	4699      	mov	r9, r3
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	2312      	movs	r3, #18
 8007cc8:	920a      	str	r2, [sp, #40]	; 0x28
 8007cca:	e7aa      	b.n	8007c22 <_dtoa_r+0x232>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd0:	e7f4      	b.n	8007cbc <_dtoa_r+0x2cc>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	9306      	str	r3, [sp, #24]
 8007cd6:	4699      	mov	r9, r3
 8007cd8:	461a      	mov	r2, r3
 8007cda:	e7f5      	b.n	8007cc8 <_dtoa_r+0x2d8>
 8007cdc:	3101      	adds	r1, #1
 8007cde:	6071      	str	r1, [r6, #4]
 8007ce0:	0052      	lsls	r2, r2, #1
 8007ce2:	e7a2      	b.n	8007c2a <_dtoa_r+0x23a>
 8007ce4:	f3af 8000 	nop.w
 8007ce8:	636f4361 	.word	0x636f4361
 8007cec:	3fd287a7 	.word	0x3fd287a7
 8007cf0:	8b60c8b3 	.word	0x8b60c8b3
 8007cf4:	3fc68a28 	.word	0x3fc68a28
 8007cf8:	509f79fb 	.word	0x509f79fb
 8007cfc:	3fd34413 	.word	0x3fd34413
 8007d00:	7ff00000 	.word	0x7ff00000
 8007d04:	08008f13 	.word	0x08008f13
 8007d08:	08008f0a 	.word	0x08008f0a
 8007d0c:	08008f09 	.word	0x08008f09
 8007d10:	08008f40 	.word	0x08008f40
 8007d14:	08008f18 	.word	0x08008f18
 8007d18:	07de      	lsls	r6, r3, #31
 8007d1a:	d504      	bpl.n	8007d26 <_dtoa_r+0x336>
 8007d1c:	ed91 6b00 	vldr	d6, [r1]
 8007d20:	3201      	adds	r2, #1
 8007d22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d26:	105b      	asrs	r3, r3, #1
 8007d28:	3108      	adds	r1, #8
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1f4      	bne.n	8007d18 <_dtoa_r+0x328>
 8007d2e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007d32:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007d36:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 80a7 	beq.w	8007e90 <_dtoa_r+0x4a0>
 8007d42:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007d46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d52:	f140 809d 	bpl.w	8007e90 <_dtoa_r+0x4a0>
 8007d56:	f1b9 0f00 	cmp.w	r9, #0
 8007d5a:	f000 8099 	beq.w	8007e90 <_dtoa_r+0x4a0>
 8007d5e:	9b06      	ldr	r3, [sp, #24]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	dd30      	ble.n	8007dc6 <_dtoa_r+0x3d6>
 8007d64:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007d68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d70:	9d06      	ldr	r5, [sp, #24]
 8007d72:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007d76:	3201      	adds	r2, #1
 8007d78:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007d7c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007d80:	ee07 2a90 	vmov	s15, r2
 8007d84:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007d88:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007d8c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8007d90:	9a03      	ldr	r2, [sp, #12]
 8007d92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d96:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8007d9a:	2d00      	cmp	r5, #0
 8007d9c:	d17b      	bne.n	8007e96 <_dtoa_r+0x4a6>
 8007d9e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007da2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007da6:	ec41 0b17 	vmov	d7, r0, r1
 8007daa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db2:	f300 8253 	bgt.w	800825c <_dtoa_r+0x86c>
 8007db6:	eeb1 7b47 	vneg.f64	d7, d7
 8007dba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dc2:	f100 8249 	bmi.w	8008258 <_dtoa_r+0x868>
 8007dc6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007dca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007dce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f2c0 8119 	blt.w	8008008 <_dtoa_r+0x618>
 8007dd6:	f1bb 0f0e 	cmp.w	fp, #14
 8007dda:	f300 8115 	bgt.w	8008008 <_dtoa_r+0x618>
 8007dde:	4bc3      	ldr	r3, [pc, #780]	; (80080ec <_dtoa_r+0x6fc>)
 8007de0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007de4:	ed93 6b00 	vldr	d6, [r3]
 8007de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f280 80ba 	bge.w	8007f64 <_dtoa_r+0x574>
 8007df0:	f1b9 0f00 	cmp.w	r9, #0
 8007df4:	f300 80b6 	bgt.w	8007f64 <_dtoa_r+0x574>
 8007df8:	f040 822d 	bne.w	8008256 <_dtoa_r+0x866>
 8007dfc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007e00:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007e04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e10:	464d      	mov	r5, r9
 8007e12:	464f      	mov	r7, r9
 8007e14:	f280 8204 	bge.w	8008220 <_dtoa_r+0x830>
 8007e18:	9b04      	ldr	r3, [sp, #16]
 8007e1a:	9a04      	ldr	r2, [sp, #16]
 8007e1c:	1c5e      	adds	r6, r3, #1
 8007e1e:	2331      	movs	r3, #49	; 0x31
 8007e20:	7013      	strb	r3, [r2, #0]
 8007e22:	f10b 0b01 	add.w	fp, fp, #1
 8007e26:	e1ff      	b.n	8008228 <_dtoa_r+0x838>
 8007e28:	2202      	movs	r2, #2
 8007e2a:	e731      	b.n	8007c90 <_dtoa_r+0x2a0>
 8007e2c:	d02e      	beq.n	8007e8c <_dtoa_r+0x49c>
 8007e2e:	f1cb 0300 	rsb	r3, fp, #0
 8007e32:	4aae      	ldr	r2, [pc, #696]	; (80080ec <_dtoa_r+0x6fc>)
 8007e34:	f003 010f 	and.w	r1, r3, #15
 8007e38:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007e3c:	ed92 7b00 	vldr	d7, [r2]
 8007e40:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8007e44:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007e48:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007e4c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8007e50:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007e54:	49a6      	ldr	r1, [pc, #664]	; (80080f0 <_dtoa_r+0x700>)
 8007e56:	111b      	asrs	r3, r3, #4
 8007e58:	2000      	movs	r0, #0
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	b93b      	cbnz	r3, 8007e6e <_dtoa_r+0x47e>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f43f af6b 	beq.w	8007d3a <_dtoa_r+0x34a>
 8007e64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e6c:	e765      	b.n	8007d3a <_dtoa_r+0x34a>
 8007e6e:	07dd      	lsls	r5, r3, #31
 8007e70:	d509      	bpl.n	8007e86 <_dtoa_r+0x496>
 8007e72:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8007e76:	ed91 7b00 	vldr	d7, [r1]
 8007e7a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007e7e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007e82:	3201      	adds	r2, #1
 8007e84:	2001      	movs	r0, #1
 8007e86:	105b      	asrs	r3, r3, #1
 8007e88:	3108      	adds	r1, #8
 8007e8a:	e7e7      	b.n	8007e5c <_dtoa_r+0x46c>
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	e754      	b.n	8007d3a <_dtoa_r+0x34a>
 8007e90:	465b      	mov	r3, fp
 8007e92:	464d      	mov	r5, r9
 8007e94:	e770      	b.n	8007d78 <_dtoa_r+0x388>
 8007e96:	4a95      	ldr	r2, [pc, #596]	; (80080ec <_dtoa_r+0x6fc>)
 8007e98:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8007e9c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007ea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ea2:	ec41 0b17 	vmov	d7, r0, r1
 8007ea6:	b35a      	cbz	r2, 8007f00 <_dtoa_r+0x510>
 8007ea8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007eac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007eb0:	9e04      	ldr	r6, [sp, #16]
 8007eb2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007eb6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007eba:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007ebe:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007ec2:	ee14 2a90 	vmov	r2, s9
 8007ec6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007eca:	3230      	adds	r2, #48	; 0x30
 8007ecc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007ed0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ed8:	f806 2b01 	strb.w	r2, [r6], #1
 8007edc:	d43b      	bmi.n	8007f56 <_dtoa_r+0x566>
 8007ede:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007ee2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eea:	d472      	bmi.n	8007fd2 <_dtoa_r+0x5e2>
 8007eec:	9a04      	ldr	r2, [sp, #16]
 8007eee:	1ab2      	subs	r2, r6, r2
 8007ef0:	4295      	cmp	r5, r2
 8007ef2:	f77f af68 	ble.w	8007dc6 <_dtoa_r+0x3d6>
 8007ef6:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007efa:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007efe:	e7de      	b.n	8007ebe <_dtoa_r+0x4ce>
 8007f00:	9a04      	ldr	r2, [sp, #16]
 8007f02:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007f06:	1956      	adds	r6, r2, r5
 8007f08:	4611      	mov	r1, r2
 8007f0a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007f0e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007f12:	ee14 2a90 	vmov	r2, s9
 8007f16:	3230      	adds	r2, #48	; 0x30
 8007f18:	f801 2b01 	strb.w	r2, [r1], #1
 8007f1c:	42b1      	cmp	r1, r6
 8007f1e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007f22:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007f26:	d11a      	bne.n	8007f5e <_dtoa_r+0x56e>
 8007f28:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007f2c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007f30:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f38:	dc4b      	bgt.n	8007fd2 <_dtoa_r+0x5e2>
 8007f3a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007f3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f46:	f57f af3e 	bpl.w	8007dc6 <_dtoa_r+0x3d6>
 8007f4a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007f4e:	2a30      	cmp	r2, #48	; 0x30
 8007f50:	f106 31ff 	add.w	r1, r6, #4294967295
 8007f54:	d001      	beq.n	8007f5a <_dtoa_r+0x56a>
 8007f56:	469b      	mov	fp, r3
 8007f58:	e02a      	b.n	8007fb0 <_dtoa_r+0x5c0>
 8007f5a:	460e      	mov	r6, r1
 8007f5c:	e7f5      	b.n	8007f4a <_dtoa_r+0x55a>
 8007f5e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007f62:	e7d4      	b.n	8007f0e <_dtoa_r+0x51e>
 8007f64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f68:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007f6c:	9e04      	ldr	r6, [sp, #16]
 8007f6e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007f72:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007f76:	ee15 3a10 	vmov	r3, s10
 8007f7a:	3330      	adds	r3, #48	; 0x30
 8007f7c:	f806 3b01 	strb.w	r3, [r6], #1
 8007f80:	9b04      	ldr	r3, [sp, #16]
 8007f82:	1af3      	subs	r3, r6, r3
 8007f84:	4599      	cmp	r9, r3
 8007f86:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007f8a:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007f8e:	d133      	bne.n	8007ff8 <_dtoa_r+0x608>
 8007f90:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007f94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f9c:	dc18      	bgt.n	8007fd0 <_dtoa_r+0x5e0>
 8007f9e:	eeb4 7b46 	vcmp.f64	d7, d6
 8007fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fa6:	d103      	bne.n	8007fb0 <_dtoa_r+0x5c0>
 8007fa8:	ee15 3a10 	vmov	r3, s10
 8007fac:	07db      	lsls	r3, r3, #31
 8007fae:	d40f      	bmi.n	8007fd0 <_dtoa_r+0x5e0>
 8007fb0:	9901      	ldr	r1, [sp, #4]
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f000 fab7 	bl	8008526 <_Bfree>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007fbc:	7033      	strb	r3, [r6, #0]
 8007fbe:	f10b 0301 	add.w	r3, fp, #1
 8007fc2:	6013      	str	r3, [r2, #0]
 8007fc4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f43f ad5b 	beq.w	8007a82 <_dtoa_r+0x92>
 8007fcc:	601e      	str	r6, [r3, #0]
 8007fce:	e558      	b.n	8007a82 <_dtoa_r+0x92>
 8007fd0:	465b      	mov	r3, fp
 8007fd2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007fd6:	2939      	cmp	r1, #57	; 0x39
 8007fd8:	f106 32ff 	add.w	r2, r6, #4294967295
 8007fdc:	d106      	bne.n	8007fec <_dtoa_r+0x5fc>
 8007fde:	9904      	ldr	r1, [sp, #16]
 8007fe0:	4291      	cmp	r1, r2
 8007fe2:	d107      	bne.n	8007ff4 <_dtoa_r+0x604>
 8007fe4:	2230      	movs	r2, #48	; 0x30
 8007fe6:	700a      	strb	r2, [r1, #0]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	460a      	mov	r2, r1
 8007fec:	7811      	ldrb	r1, [r2, #0]
 8007fee:	3101      	adds	r1, #1
 8007ff0:	7011      	strb	r1, [r2, #0]
 8007ff2:	e7b0      	b.n	8007f56 <_dtoa_r+0x566>
 8007ff4:	4616      	mov	r6, r2
 8007ff6:	e7ec      	b.n	8007fd2 <_dtoa_r+0x5e2>
 8007ff8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007ffc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008004:	d1b3      	bne.n	8007f6e <_dtoa_r+0x57e>
 8008006:	e7d3      	b.n	8007fb0 <_dtoa_r+0x5c0>
 8008008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800800a:	2a00      	cmp	r2, #0
 800800c:	f000 808d 	beq.w	800812a <_dtoa_r+0x73a>
 8008010:	9a08      	ldr	r2, [sp, #32]
 8008012:	2a01      	cmp	r2, #1
 8008014:	dc72      	bgt.n	80080fc <_dtoa_r+0x70c>
 8008016:	2f00      	cmp	r7, #0
 8008018:	d06c      	beq.n	80080f4 <_dtoa_r+0x704>
 800801a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800801e:	4645      	mov	r5, r8
 8008020:	4656      	mov	r6, sl
 8008022:	9a07      	ldr	r2, [sp, #28]
 8008024:	2101      	movs	r1, #1
 8008026:	441a      	add	r2, r3
 8008028:	4620      	mov	r0, r4
 800802a:	449a      	add	sl, r3
 800802c:	9207      	str	r2, [sp, #28]
 800802e:	f000 fb1a 	bl	8008666 <__i2b>
 8008032:	4607      	mov	r7, r0
 8008034:	2e00      	cmp	r6, #0
 8008036:	dd0b      	ble.n	8008050 <_dtoa_r+0x660>
 8008038:	9b07      	ldr	r3, [sp, #28]
 800803a:	2b00      	cmp	r3, #0
 800803c:	dd08      	ble.n	8008050 <_dtoa_r+0x660>
 800803e:	42b3      	cmp	r3, r6
 8008040:	9a07      	ldr	r2, [sp, #28]
 8008042:	bfa8      	it	ge
 8008044:	4633      	movge	r3, r6
 8008046:	ebaa 0a03 	sub.w	sl, sl, r3
 800804a:	1af6      	subs	r6, r6, r3
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	9307      	str	r3, [sp, #28]
 8008050:	f1b8 0f00 	cmp.w	r8, #0
 8008054:	d01d      	beq.n	8008092 <_dtoa_r+0x6a2>
 8008056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008058:	2b00      	cmp	r3, #0
 800805a:	d06a      	beq.n	8008132 <_dtoa_r+0x742>
 800805c:	b18d      	cbz	r5, 8008082 <_dtoa_r+0x692>
 800805e:	4639      	mov	r1, r7
 8008060:	462a      	mov	r2, r5
 8008062:	4620      	mov	r0, r4
 8008064:	f000 fb9e 	bl	80087a4 <__pow5mult>
 8008068:	9a01      	ldr	r2, [sp, #4]
 800806a:	4601      	mov	r1, r0
 800806c:	4607      	mov	r7, r0
 800806e:	4620      	mov	r0, r4
 8008070:	f000 fb02 	bl	8008678 <__multiply>
 8008074:	9901      	ldr	r1, [sp, #4]
 8008076:	900c      	str	r0, [sp, #48]	; 0x30
 8008078:	4620      	mov	r0, r4
 800807a:	f000 fa54 	bl	8008526 <_Bfree>
 800807e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008080:	9301      	str	r3, [sp, #4]
 8008082:	ebb8 0205 	subs.w	r2, r8, r5
 8008086:	d004      	beq.n	8008092 <_dtoa_r+0x6a2>
 8008088:	9901      	ldr	r1, [sp, #4]
 800808a:	4620      	mov	r0, r4
 800808c:	f000 fb8a 	bl	80087a4 <__pow5mult>
 8008090:	9001      	str	r0, [sp, #4]
 8008092:	2101      	movs	r1, #1
 8008094:	4620      	mov	r0, r4
 8008096:	f000 fae6 	bl	8008666 <__i2b>
 800809a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800809c:	4605      	mov	r5, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 81ca 	beq.w	8008438 <_dtoa_r+0xa48>
 80080a4:	461a      	mov	r2, r3
 80080a6:	4601      	mov	r1, r0
 80080a8:	4620      	mov	r0, r4
 80080aa:	f000 fb7b 	bl	80087a4 <__pow5mult>
 80080ae:	9b08      	ldr	r3, [sp, #32]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	4605      	mov	r5, r0
 80080b4:	dc44      	bgt.n	8008140 <_dtoa_r+0x750>
 80080b6:	9b02      	ldr	r3, [sp, #8]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d13c      	bne.n	8008136 <_dtoa_r+0x746>
 80080bc:	9b03      	ldr	r3, [sp, #12]
 80080be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d137      	bne.n	8008136 <_dtoa_r+0x746>
 80080c6:	9b03      	ldr	r3, [sp, #12]
 80080c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080cc:	0d1b      	lsrs	r3, r3, #20
 80080ce:	051b      	lsls	r3, r3, #20
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d033      	beq.n	800813c <_dtoa_r+0x74c>
 80080d4:	9b07      	ldr	r3, [sp, #28]
 80080d6:	3301      	adds	r3, #1
 80080d8:	f10a 0a01 	add.w	sl, sl, #1
 80080dc:	9307      	str	r3, [sp, #28]
 80080de:	f04f 0801 	mov.w	r8, #1
 80080e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080e4:	bb73      	cbnz	r3, 8008144 <_dtoa_r+0x754>
 80080e6:	2001      	movs	r0, #1
 80080e8:	e034      	b.n	8008154 <_dtoa_r+0x764>
 80080ea:	bf00      	nop
 80080ec:	08008f40 	.word	0x08008f40
 80080f0:	08008f18 	.word	0x08008f18
 80080f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080fa:	e790      	b.n	800801e <_dtoa_r+0x62e>
 80080fc:	f109 35ff 	add.w	r5, r9, #4294967295
 8008100:	45a8      	cmp	r8, r5
 8008102:	bfbf      	itttt	lt
 8008104:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8008106:	eba5 0808 	sublt.w	r8, r5, r8
 800810a:	4443      	addlt	r3, r8
 800810c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800810e:	bfb6      	itet	lt
 8008110:	46a8      	movlt	r8, r5
 8008112:	eba8 0505 	subge.w	r5, r8, r5
 8008116:	2500      	movlt	r5, #0
 8008118:	f1b9 0f00 	cmp.w	r9, #0
 800811c:	bfb9      	ittee	lt
 800811e:	ebaa 0609 	sublt.w	r6, sl, r9
 8008122:	2300      	movlt	r3, #0
 8008124:	4656      	movge	r6, sl
 8008126:	464b      	movge	r3, r9
 8008128:	e77b      	b.n	8008022 <_dtoa_r+0x632>
 800812a:	4645      	mov	r5, r8
 800812c:	4656      	mov	r6, sl
 800812e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008130:	e780      	b.n	8008034 <_dtoa_r+0x644>
 8008132:	4642      	mov	r2, r8
 8008134:	e7a8      	b.n	8008088 <_dtoa_r+0x698>
 8008136:	f04f 0800 	mov.w	r8, #0
 800813a:	e7d2      	b.n	80080e2 <_dtoa_r+0x6f2>
 800813c:	4698      	mov	r8, r3
 800813e:	e7d0      	b.n	80080e2 <_dtoa_r+0x6f2>
 8008140:	f04f 0800 	mov.w	r8, #0
 8008144:	692b      	ldr	r3, [r5, #16]
 8008146:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800814a:	6918      	ldr	r0, [r3, #16]
 800814c:	f000 fa3d 	bl	80085ca <__hi0bits>
 8008150:	f1c0 0020 	rsb	r0, r0, #32
 8008154:	9b07      	ldr	r3, [sp, #28]
 8008156:	4418      	add	r0, r3
 8008158:	f010 001f 	ands.w	r0, r0, #31
 800815c:	d047      	beq.n	80081ee <_dtoa_r+0x7fe>
 800815e:	f1c0 0320 	rsb	r3, r0, #32
 8008162:	2b04      	cmp	r3, #4
 8008164:	dd3b      	ble.n	80081de <_dtoa_r+0x7ee>
 8008166:	9b07      	ldr	r3, [sp, #28]
 8008168:	f1c0 001c 	rsb	r0, r0, #28
 800816c:	4482      	add	sl, r0
 800816e:	4406      	add	r6, r0
 8008170:	4403      	add	r3, r0
 8008172:	9307      	str	r3, [sp, #28]
 8008174:	f1ba 0f00 	cmp.w	sl, #0
 8008178:	dd05      	ble.n	8008186 <_dtoa_r+0x796>
 800817a:	4652      	mov	r2, sl
 800817c:	9901      	ldr	r1, [sp, #4]
 800817e:	4620      	mov	r0, r4
 8008180:	f000 fb5e 	bl	8008840 <__lshift>
 8008184:	9001      	str	r0, [sp, #4]
 8008186:	9b07      	ldr	r3, [sp, #28]
 8008188:	2b00      	cmp	r3, #0
 800818a:	dd05      	ble.n	8008198 <_dtoa_r+0x7a8>
 800818c:	4629      	mov	r1, r5
 800818e:	461a      	mov	r2, r3
 8008190:	4620      	mov	r0, r4
 8008192:	f000 fb55 	bl	8008840 <__lshift>
 8008196:	4605      	mov	r5, r0
 8008198:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800819a:	b353      	cbz	r3, 80081f2 <_dtoa_r+0x802>
 800819c:	4629      	mov	r1, r5
 800819e:	9801      	ldr	r0, [sp, #4]
 80081a0:	f000 fba2 	bl	80088e8 <__mcmp>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	da24      	bge.n	80081f2 <_dtoa_r+0x802>
 80081a8:	2300      	movs	r3, #0
 80081aa:	220a      	movs	r2, #10
 80081ac:	9901      	ldr	r1, [sp, #4]
 80081ae:	4620      	mov	r0, r4
 80081b0:	f000 f9d0 	bl	8008554 <__multadd>
 80081b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081b6:	9001      	str	r0, [sp, #4]
 80081b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 8142 	beq.w	8008446 <_dtoa_r+0xa56>
 80081c2:	2300      	movs	r3, #0
 80081c4:	4639      	mov	r1, r7
 80081c6:	220a      	movs	r2, #10
 80081c8:	4620      	mov	r0, r4
 80081ca:	f000 f9c3 	bl	8008554 <__multadd>
 80081ce:	9b06      	ldr	r3, [sp, #24]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	4607      	mov	r7, r0
 80081d4:	dc4b      	bgt.n	800826e <_dtoa_r+0x87e>
 80081d6:	9b08      	ldr	r3, [sp, #32]
 80081d8:	2b02      	cmp	r3, #2
 80081da:	dd48      	ble.n	800826e <_dtoa_r+0x87e>
 80081dc:	e011      	b.n	8008202 <_dtoa_r+0x812>
 80081de:	d0c9      	beq.n	8008174 <_dtoa_r+0x784>
 80081e0:	9a07      	ldr	r2, [sp, #28]
 80081e2:	331c      	adds	r3, #28
 80081e4:	441a      	add	r2, r3
 80081e6:	449a      	add	sl, r3
 80081e8:	441e      	add	r6, r3
 80081ea:	4613      	mov	r3, r2
 80081ec:	e7c1      	b.n	8008172 <_dtoa_r+0x782>
 80081ee:	4603      	mov	r3, r0
 80081f0:	e7f6      	b.n	80081e0 <_dtoa_r+0x7f0>
 80081f2:	f1b9 0f00 	cmp.w	r9, #0
 80081f6:	dc34      	bgt.n	8008262 <_dtoa_r+0x872>
 80081f8:	9b08      	ldr	r3, [sp, #32]
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	dd31      	ble.n	8008262 <_dtoa_r+0x872>
 80081fe:	f8cd 9018 	str.w	r9, [sp, #24]
 8008202:	9b06      	ldr	r3, [sp, #24]
 8008204:	b963      	cbnz	r3, 8008220 <_dtoa_r+0x830>
 8008206:	4629      	mov	r1, r5
 8008208:	2205      	movs	r2, #5
 800820a:	4620      	mov	r0, r4
 800820c:	f000 f9a2 	bl	8008554 <__multadd>
 8008210:	4601      	mov	r1, r0
 8008212:	4605      	mov	r5, r0
 8008214:	9801      	ldr	r0, [sp, #4]
 8008216:	f000 fb67 	bl	80088e8 <__mcmp>
 800821a:	2800      	cmp	r0, #0
 800821c:	f73f adfc 	bgt.w	8007e18 <_dtoa_r+0x428>
 8008220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008222:	9e04      	ldr	r6, [sp, #16]
 8008224:	ea6f 0b03 	mvn.w	fp, r3
 8008228:	f04f 0900 	mov.w	r9, #0
 800822c:	4629      	mov	r1, r5
 800822e:	4620      	mov	r0, r4
 8008230:	f000 f979 	bl	8008526 <_Bfree>
 8008234:	2f00      	cmp	r7, #0
 8008236:	f43f aebb 	beq.w	8007fb0 <_dtoa_r+0x5c0>
 800823a:	f1b9 0f00 	cmp.w	r9, #0
 800823e:	d005      	beq.n	800824c <_dtoa_r+0x85c>
 8008240:	45b9      	cmp	r9, r7
 8008242:	d003      	beq.n	800824c <_dtoa_r+0x85c>
 8008244:	4649      	mov	r1, r9
 8008246:	4620      	mov	r0, r4
 8008248:	f000 f96d 	bl	8008526 <_Bfree>
 800824c:	4639      	mov	r1, r7
 800824e:	4620      	mov	r0, r4
 8008250:	f000 f969 	bl	8008526 <_Bfree>
 8008254:	e6ac      	b.n	8007fb0 <_dtoa_r+0x5c0>
 8008256:	2500      	movs	r5, #0
 8008258:	462f      	mov	r7, r5
 800825a:	e7e1      	b.n	8008220 <_dtoa_r+0x830>
 800825c:	469b      	mov	fp, r3
 800825e:	462f      	mov	r7, r5
 8008260:	e5da      	b.n	8007e18 <_dtoa_r+0x428>
 8008262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008264:	f8cd 9018 	str.w	r9, [sp, #24]
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 80f3 	beq.w	8008454 <_dtoa_r+0xa64>
 800826e:	2e00      	cmp	r6, #0
 8008270:	dd05      	ble.n	800827e <_dtoa_r+0x88e>
 8008272:	4639      	mov	r1, r7
 8008274:	4632      	mov	r2, r6
 8008276:	4620      	mov	r0, r4
 8008278:	f000 fae2 	bl	8008840 <__lshift>
 800827c:	4607      	mov	r7, r0
 800827e:	f1b8 0f00 	cmp.w	r8, #0
 8008282:	d04c      	beq.n	800831e <_dtoa_r+0x92e>
 8008284:	6879      	ldr	r1, [r7, #4]
 8008286:	4620      	mov	r0, r4
 8008288:	f000 f919 	bl	80084be <_Balloc>
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	3202      	adds	r2, #2
 8008290:	4606      	mov	r6, r0
 8008292:	0092      	lsls	r2, r2, #2
 8008294:	f107 010c 	add.w	r1, r7, #12
 8008298:	300c      	adds	r0, #12
 800829a:	f000 f903 	bl	80084a4 <memcpy>
 800829e:	2201      	movs	r2, #1
 80082a0:	4631      	mov	r1, r6
 80082a2:	4620      	mov	r0, r4
 80082a4:	f000 facc 	bl	8008840 <__lshift>
 80082a8:	9b02      	ldr	r3, [sp, #8]
 80082aa:	f8dd a010 	ldr.w	sl, [sp, #16]
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	46b9      	mov	r9, r7
 80082b4:	9307      	str	r3, [sp, #28]
 80082b6:	4607      	mov	r7, r0
 80082b8:	4629      	mov	r1, r5
 80082ba:	9801      	ldr	r0, [sp, #4]
 80082bc:	f7ff fb0a 	bl	80078d4 <quorem>
 80082c0:	4649      	mov	r1, r9
 80082c2:	4606      	mov	r6, r0
 80082c4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80082c8:	9801      	ldr	r0, [sp, #4]
 80082ca:	f000 fb0d 	bl	80088e8 <__mcmp>
 80082ce:	463a      	mov	r2, r7
 80082d0:	9002      	str	r0, [sp, #8]
 80082d2:	4629      	mov	r1, r5
 80082d4:	4620      	mov	r0, r4
 80082d6:	f000 fb21 	bl	800891c <__mdiff>
 80082da:	68c3      	ldr	r3, [r0, #12]
 80082dc:	4602      	mov	r2, r0
 80082de:	bb03      	cbnz	r3, 8008322 <_dtoa_r+0x932>
 80082e0:	4601      	mov	r1, r0
 80082e2:	9009      	str	r0, [sp, #36]	; 0x24
 80082e4:	9801      	ldr	r0, [sp, #4]
 80082e6:	f000 faff 	bl	80088e8 <__mcmp>
 80082ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082ec:	4603      	mov	r3, r0
 80082ee:	4611      	mov	r1, r2
 80082f0:	4620      	mov	r0, r4
 80082f2:	9309      	str	r3, [sp, #36]	; 0x24
 80082f4:	f000 f917 	bl	8008526 <_Bfree>
 80082f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082fa:	b9a3      	cbnz	r3, 8008326 <_dtoa_r+0x936>
 80082fc:	9a08      	ldr	r2, [sp, #32]
 80082fe:	b992      	cbnz	r2, 8008326 <_dtoa_r+0x936>
 8008300:	9a07      	ldr	r2, [sp, #28]
 8008302:	b982      	cbnz	r2, 8008326 <_dtoa_r+0x936>
 8008304:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008308:	d029      	beq.n	800835e <_dtoa_r+0x96e>
 800830a:	9b02      	ldr	r3, [sp, #8]
 800830c:	2b00      	cmp	r3, #0
 800830e:	dd01      	ble.n	8008314 <_dtoa_r+0x924>
 8008310:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8008314:	f10a 0601 	add.w	r6, sl, #1
 8008318:	f88a 8000 	strb.w	r8, [sl]
 800831c:	e786      	b.n	800822c <_dtoa_r+0x83c>
 800831e:	4638      	mov	r0, r7
 8008320:	e7c2      	b.n	80082a8 <_dtoa_r+0x8b8>
 8008322:	2301      	movs	r3, #1
 8008324:	e7e3      	b.n	80082ee <_dtoa_r+0x8fe>
 8008326:	9a02      	ldr	r2, [sp, #8]
 8008328:	2a00      	cmp	r2, #0
 800832a:	db04      	blt.n	8008336 <_dtoa_r+0x946>
 800832c:	d124      	bne.n	8008378 <_dtoa_r+0x988>
 800832e:	9a08      	ldr	r2, [sp, #32]
 8008330:	bb12      	cbnz	r2, 8008378 <_dtoa_r+0x988>
 8008332:	9a07      	ldr	r2, [sp, #28]
 8008334:	bb02      	cbnz	r2, 8008378 <_dtoa_r+0x988>
 8008336:	2b00      	cmp	r3, #0
 8008338:	ddec      	ble.n	8008314 <_dtoa_r+0x924>
 800833a:	2201      	movs	r2, #1
 800833c:	9901      	ldr	r1, [sp, #4]
 800833e:	4620      	mov	r0, r4
 8008340:	f000 fa7e 	bl	8008840 <__lshift>
 8008344:	4629      	mov	r1, r5
 8008346:	9001      	str	r0, [sp, #4]
 8008348:	f000 face 	bl	80088e8 <__mcmp>
 800834c:	2800      	cmp	r0, #0
 800834e:	dc03      	bgt.n	8008358 <_dtoa_r+0x968>
 8008350:	d1e0      	bne.n	8008314 <_dtoa_r+0x924>
 8008352:	f018 0f01 	tst.w	r8, #1
 8008356:	d0dd      	beq.n	8008314 <_dtoa_r+0x924>
 8008358:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800835c:	d1d8      	bne.n	8008310 <_dtoa_r+0x920>
 800835e:	2339      	movs	r3, #57	; 0x39
 8008360:	f10a 0601 	add.w	r6, sl, #1
 8008364:	f88a 3000 	strb.w	r3, [sl]
 8008368:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800836c:	2b39      	cmp	r3, #57	; 0x39
 800836e:	f106 32ff 	add.w	r2, r6, #4294967295
 8008372:	d04c      	beq.n	800840e <_dtoa_r+0xa1e>
 8008374:	3301      	adds	r3, #1
 8008376:	e051      	b.n	800841c <_dtoa_r+0xa2c>
 8008378:	2b00      	cmp	r3, #0
 800837a:	f10a 0601 	add.w	r6, sl, #1
 800837e:	dd05      	ble.n	800838c <_dtoa_r+0x99c>
 8008380:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008384:	d0eb      	beq.n	800835e <_dtoa_r+0x96e>
 8008386:	f108 0801 	add.w	r8, r8, #1
 800838a:	e7c5      	b.n	8008318 <_dtoa_r+0x928>
 800838c:	9b04      	ldr	r3, [sp, #16]
 800838e:	9a06      	ldr	r2, [sp, #24]
 8008390:	f806 8c01 	strb.w	r8, [r6, #-1]
 8008394:	1af3      	subs	r3, r6, r3
 8008396:	4293      	cmp	r3, r2
 8008398:	d021      	beq.n	80083de <_dtoa_r+0x9ee>
 800839a:	2300      	movs	r3, #0
 800839c:	220a      	movs	r2, #10
 800839e:	9901      	ldr	r1, [sp, #4]
 80083a0:	4620      	mov	r0, r4
 80083a2:	f000 f8d7 	bl	8008554 <__multadd>
 80083a6:	45b9      	cmp	r9, r7
 80083a8:	9001      	str	r0, [sp, #4]
 80083aa:	f04f 0300 	mov.w	r3, #0
 80083ae:	f04f 020a 	mov.w	r2, #10
 80083b2:	4649      	mov	r1, r9
 80083b4:	4620      	mov	r0, r4
 80083b6:	d105      	bne.n	80083c4 <_dtoa_r+0x9d4>
 80083b8:	f000 f8cc 	bl	8008554 <__multadd>
 80083bc:	4681      	mov	r9, r0
 80083be:	4607      	mov	r7, r0
 80083c0:	46b2      	mov	sl, r6
 80083c2:	e779      	b.n	80082b8 <_dtoa_r+0x8c8>
 80083c4:	f000 f8c6 	bl	8008554 <__multadd>
 80083c8:	4639      	mov	r1, r7
 80083ca:	4681      	mov	r9, r0
 80083cc:	2300      	movs	r3, #0
 80083ce:	220a      	movs	r2, #10
 80083d0:	4620      	mov	r0, r4
 80083d2:	f000 f8bf 	bl	8008554 <__multadd>
 80083d6:	4607      	mov	r7, r0
 80083d8:	e7f2      	b.n	80083c0 <_dtoa_r+0x9d0>
 80083da:	f04f 0900 	mov.w	r9, #0
 80083de:	2201      	movs	r2, #1
 80083e0:	9901      	ldr	r1, [sp, #4]
 80083e2:	4620      	mov	r0, r4
 80083e4:	f000 fa2c 	bl	8008840 <__lshift>
 80083e8:	4629      	mov	r1, r5
 80083ea:	9001      	str	r0, [sp, #4]
 80083ec:	f000 fa7c 	bl	80088e8 <__mcmp>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	dcb9      	bgt.n	8008368 <_dtoa_r+0x978>
 80083f4:	d102      	bne.n	80083fc <_dtoa_r+0xa0c>
 80083f6:	f018 0f01 	tst.w	r8, #1
 80083fa:	d1b5      	bne.n	8008368 <_dtoa_r+0x978>
 80083fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008400:	2b30      	cmp	r3, #48	; 0x30
 8008402:	f106 32ff 	add.w	r2, r6, #4294967295
 8008406:	f47f af11 	bne.w	800822c <_dtoa_r+0x83c>
 800840a:	4616      	mov	r6, r2
 800840c:	e7f6      	b.n	80083fc <_dtoa_r+0xa0c>
 800840e:	9b04      	ldr	r3, [sp, #16]
 8008410:	4293      	cmp	r3, r2
 8008412:	d105      	bne.n	8008420 <_dtoa_r+0xa30>
 8008414:	9a04      	ldr	r2, [sp, #16]
 8008416:	f10b 0b01 	add.w	fp, fp, #1
 800841a:	2331      	movs	r3, #49	; 0x31
 800841c:	7013      	strb	r3, [r2, #0]
 800841e:	e705      	b.n	800822c <_dtoa_r+0x83c>
 8008420:	4616      	mov	r6, r2
 8008422:	e7a1      	b.n	8008368 <_dtoa_r+0x978>
 8008424:	4b16      	ldr	r3, [pc, #88]	; (8008480 <_dtoa_r+0xa90>)
 8008426:	f7ff bb48 	b.w	8007aba <_dtoa_r+0xca>
 800842a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800842c:	2b00      	cmp	r3, #0
 800842e:	f47f ab23 	bne.w	8007a78 <_dtoa_r+0x88>
 8008432:	4b14      	ldr	r3, [pc, #80]	; (8008484 <_dtoa_r+0xa94>)
 8008434:	f7ff bb41 	b.w	8007aba <_dtoa_r+0xca>
 8008438:	9b08      	ldr	r3, [sp, #32]
 800843a:	2b01      	cmp	r3, #1
 800843c:	f77f ae3b 	ble.w	80080b6 <_dtoa_r+0x6c6>
 8008440:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8008444:	e64f      	b.n	80080e6 <_dtoa_r+0x6f6>
 8008446:	9b06      	ldr	r3, [sp, #24]
 8008448:	2b00      	cmp	r3, #0
 800844a:	dc03      	bgt.n	8008454 <_dtoa_r+0xa64>
 800844c:	9b08      	ldr	r3, [sp, #32]
 800844e:	2b02      	cmp	r3, #2
 8008450:	f73f aed7 	bgt.w	8008202 <_dtoa_r+0x812>
 8008454:	9e04      	ldr	r6, [sp, #16]
 8008456:	9801      	ldr	r0, [sp, #4]
 8008458:	4629      	mov	r1, r5
 800845a:	f7ff fa3b 	bl	80078d4 <quorem>
 800845e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008462:	f806 8b01 	strb.w	r8, [r6], #1
 8008466:	9b04      	ldr	r3, [sp, #16]
 8008468:	9a06      	ldr	r2, [sp, #24]
 800846a:	1af3      	subs	r3, r6, r3
 800846c:	429a      	cmp	r2, r3
 800846e:	ddb4      	ble.n	80083da <_dtoa_r+0x9ea>
 8008470:	2300      	movs	r3, #0
 8008472:	220a      	movs	r2, #10
 8008474:	9901      	ldr	r1, [sp, #4]
 8008476:	4620      	mov	r0, r4
 8008478:	f000 f86c 	bl	8008554 <__multadd>
 800847c:	9001      	str	r0, [sp, #4]
 800847e:	e7ea      	b.n	8008456 <_dtoa_r+0xa66>
 8008480:	08008f08 	.word	0x08008f08
 8008484:	08008f0a 	.word	0x08008f0a

08008488 <_localeconv_r>:
 8008488:	4b04      	ldr	r3, [pc, #16]	; (800849c <_localeconv_r+0x14>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6a18      	ldr	r0, [r3, #32]
 800848e:	4b04      	ldr	r3, [pc, #16]	; (80084a0 <_localeconv_r+0x18>)
 8008490:	2800      	cmp	r0, #0
 8008492:	bf08      	it	eq
 8008494:	4618      	moveq	r0, r3
 8008496:	30f0      	adds	r0, #240	; 0xf0
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	20000024 	.word	0x20000024
 80084a0:	20000088 	.word	0x20000088

080084a4 <memcpy>:
 80084a4:	b510      	push	{r4, lr}
 80084a6:	1e43      	subs	r3, r0, #1
 80084a8:	440a      	add	r2, r1
 80084aa:	4291      	cmp	r1, r2
 80084ac:	d100      	bne.n	80084b0 <memcpy+0xc>
 80084ae:	bd10      	pop	{r4, pc}
 80084b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084b8:	e7f7      	b.n	80084aa <memcpy+0x6>

080084ba <__malloc_lock>:
 80084ba:	4770      	bx	lr

080084bc <__malloc_unlock>:
 80084bc:	4770      	bx	lr

080084be <_Balloc>:
 80084be:	b570      	push	{r4, r5, r6, lr}
 80084c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084c2:	4604      	mov	r4, r0
 80084c4:	460e      	mov	r6, r1
 80084c6:	b93d      	cbnz	r5, 80084d8 <_Balloc+0x1a>
 80084c8:	2010      	movs	r0, #16
 80084ca:	f7fe fe09 	bl	80070e0 <malloc>
 80084ce:	6260      	str	r0, [r4, #36]	; 0x24
 80084d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80084d4:	6005      	str	r5, [r0, #0]
 80084d6:	60c5      	str	r5, [r0, #12]
 80084d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80084da:	68eb      	ldr	r3, [r5, #12]
 80084dc:	b183      	cbz	r3, 8008500 <_Balloc+0x42>
 80084de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80084e6:	b9b8      	cbnz	r0, 8008518 <_Balloc+0x5a>
 80084e8:	2101      	movs	r1, #1
 80084ea:	fa01 f506 	lsl.w	r5, r1, r6
 80084ee:	1d6a      	adds	r2, r5, #5
 80084f0:	0092      	lsls	r2, r2, #2
 80084f2:	4620      	mov	r0, r4
 80084f4:	f000 fabe 	bl	8008a74 <_calloc_r>
 80084f8:	b160      	cbz	r0, 8008514 <_Balloc+0x56>
 80084fa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80084fe:	e00e      	b.n	800851e <_Balloc+0x60>
 8008500:	2221      	movs	r2, #33	; 0x21
 8008502:	2104      	movs	r1, #4
 8008504:	4620      	mov	r0, r4
 8008506:	f000 fab5 	bl	8008a74 <_calloc_r>
 800850a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800850c:	60e8      	str	r0, [r5, #12]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e4      	bne.n	80084de <_Balloc+0x20>
 8008514:	2000      	movs	r0, #0
 8008516:	bd70      	pop	{r4, r5, r6, pc}
 8008518:	6802      	ldr	r2, [r0, #0]
 800851a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800851e:	2300      	movs	r3, #0
 8008520:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008524:	e7f7      	b.n	8008516 <_Balloc+0x58>

08008526 <_Bfree>:
 8008526:	b570      	push	{r4, r5, r6, lr}
 8008528:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800852a:	4606      	mov	r6, r0
 800852c:	460d      	mov	r5, r1
 800852e:	b93c      	cbnz	r4, 8008540 <_Bfree+0x1a>
 8008530:	2010      	movs	r0, #16
 8008532:	f7fe fdd5 	bl	80070e0 <malloc>
 8008536:	6270      	str	r0, [r6, #36]	; 0x24
 8008538:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800853c:	6004      	str	r4, [r0, #0]
 800853e:	60c4      	str	r4, [r0, #12]
 8008540:	b13d      	cbz	r5, 8008552 <_Bfree+0x2c>
 8008542:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008544:	686a      	ldr	r2, [r5, #4]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800854c:	6029      	str	r1, [r5, #0]
 800854e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008552:	bd70      	pop	{r4, r5, r6, pc}

08008554 <__multadd>:
 8008554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008558:	690d      	ldr	r5, [r1, #16]
 800855a:	461f      	mov	r7, r3
 800855c:	4606      	mov	r6, r0
 800855e:	460c      	mov	r4, r1
 8008560:	f101 0c14 	add.w	ip, r1, #20
 8008564:	2300      	movs	r3, #0
 8008566:	f8dc 0000 	ldr.w	r0, [ip]
 800856a:	b281      	uxth	r1, r0
 800856c:	fb02 7101 	mla	r1, r2, r1, r7
 8008570:	0c0f      	lsrs	r7, r1, #16
 8008572:	0c00      	lsrs	r0, r0, #16
 8008574:	fb02 7000 	mla	r0, r2, r0, r7
 8008578:	b289      	uxth	r1, r1
 800857a:	3301      	adds	r3, #1
 800857c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008580:	429d      	cmp	r5, r3
 8008582:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008586:	f84c 1b04 	str.w	r1, [ip], #4
 800858a:	dcec      	bgt.n	8008566 <__multadd+0x12>
 800858c:	b1d7      	cbz	r7, 80085c4 <__multadd+0x70>
 800858e:	68a3      	ldr	r3, [r4, #8]
 8008590:	42ab      	cmp	r3, r5
 8008592:	dc12      	bgt.n	80085ba <__multadd+0x66>
 8008594:	6861      	ldr	r1, [r4, #4]
 8008596:	4630      	mov	r0, r6
 8008598:	3101      	adds	r1, #1
 800859a:	f7ff ff90 	bl	80084be <_Balloc>
 800859e:	6922      	ldr	r2, [r4, #16]
 80085a0:	3202      	adds	r2, #2
 80085a2:	f104 010c 	add.w	r1, r4, #12
 80085a6:	4680      	mov	r8, r0
 80085a8:	0092      	lsls	r2, r2, #2
 80085aa:	300c      	adds	r0, #12
 80085ac:	f7ff ff7a 	bl	80084a4 <memcpy>
 80085b0:	4621      	mov	r1, r4
 80085b2:	4630      	mov	r0, r6
 80085b4:	f7ff ffb7 	bl	8008526 <_Bfree>
 80085b8:	4644      	mov	r4, r8
 80085ba:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085be:	3501      	adds	r5, #1
 80085c0:	615f      	str	r7, [r3, #20]
 80085c2:	6125      	str	r5, [r4, #16]
 80085c4:	4620      	mov	r0, r4
 80085c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080085ca <__hi0bits>:
 80085ca:	0c02      	lsrs	r2, r0, #16
 80085cc:	0412      	lsls	r2, r2, #16
 80085ce:	4603      	mov	r3, r0
 80085d0:	b9b2      	cbnz	r2, 8008600 <__hi0bits+0x36>
 80085d2:	0403      	lsls	r3, r0, #16
 80085d4:	2010      	movs	r0, #16
 80085d6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80085da:	bf04      	itt	eq
 80085dc:	021b      	lsleq	r3, r3, #8
 80085de:	3008      	addeq	r0, #8
 80085e0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80085e4:	bf04      	itt	eq
 80085e6:	011b      	lsleq	r3, r3, #4
 80085e8:	3004      	addeq	r0, #4
 80085ea:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80085ee:	bf04      	itt	eq
 80085f0:	009b      	lsleq	r3, r3, #2
 80085f2:	3002      	addeq	r0, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	db06      	blt.n	8008606 <__hi0bits+0x3c>
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	d503      	bpl.n	8008604 <__hi0bits+0x3a>
 80085fc:	3001      	adds	r0, #1
 80085fe:	4770      	bx	lr
 8008600:	2000      	movs	r0, #0
 8008602:	e7e8      	b.n	80085d6 <__hi0bits+0xc>
 8008604:	2020      	movs	r0, #32
 8008606:	4770      	bx	lr

08008608 <__lo0bits>:
 8008608:	6803      	ldr	r3, [r0, #0]
 800860a:	f013 0207 	ands.w	r2, r3, #7
 800860e:	4601      	mov	r1, r0
 8008610:	d00b      	beq.n	800862a <__lo0bits+0x22>
 8008612:	07da      	lsls	r2, r3, #31
 8008614:	d423      	bmi.n	800865e <__lo0bits+0x56>
 8008616:	0798      	lsls	r0, r3, #30
 8008618:	bf49      	itett	mi
 800861a:	085b      	lsrmi	r3, r3, #1
 800861c:	089b      	lsrpl	r3, r3, #2
 800861e:	2001      	movmi	r0, #1
 8008620:	600b      	strmi	r3, [r1, #0]
 8008622:	bf5c      	itt	pl
 8008624:	600b      	strpl	r3, [r1, #0]
 8008626:	2002      	movpl	r0, #2
 8008628:	4770      	bx	lr
 800862a:	b298      	uxth	r0, r3
 800862c:	b9a8      	cbnz	r0, 800865a <__lo0bits+0x52>
 800862e:	0c1b      	lsrs	r3, r3, #16
 8008630:	2010      	movs	r0, #16
 8008632:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008636:	bf04      	itt	eq
 8008638:	0a1b      	lsreq	r3, r3, #8
 800863a:	3008      	addeq	r0, #8
 800863c:	071a      	lsls	r2, r3, #28
 800863e:	bf04      	itt	eq
 8008640:	091b      	lsreq	r3, r3, #4
 8008642:	3004      	addeq	r0, #4
 8008644:	079a      	lsls	r2, r3, #30
 8008646:	bf04      	itt	eq
 8008648:	089b      	lsreq	r3, r3, #2
 800864a:	3002      	addeq	r0, #2
 800864c:	07da      	lsls	r2, r3, #31
 800864e:	d402      	bmi.n	8008656 <__lo0bits+0x4e>
 8008650:	085b      	lsrs	r3, r3, #1
 8008652:	d006      	beq.n	8008662 <__lo0bits+0x5a>
 8008654:	3001      	adds	r0, #1
 8008656:	600b      	str	r3, [r1, #0]
 8008658:	4770      	bx	lr
 800865a:	4610      	mov	r0, r2
 800865c:	e7e9      	b.n	8008632 <__lo0bits+0x2a>
 800865e:	2000      	movs	r0, #0
 8008660:	4770      	bx	lr
 8008662:	2020      	movs	r0, #32
 8008664:	4770      	bx	lr

08008666 <__i2b>:
 8008666:	b510      	push	{r4, lr}
 8008668:	460c      	mov	r4, r1
 800866a:	2101      	movs	r1, #1
 800866c:	f7ff ff27 	bl	80084be <_Balloc>
 8008670:	2201      	movs	r2, #1
 8008672:	6144      	str	r4, [r0, #20]
 8008674:	6102      	str	r2, [r0, #16]
 8008676:	bd10      	pop	{r4, pc}

08008678 <__multiply>:
 8008678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867c:	4614      	mov	r4, r2
 800867e:	690a      	ldr	r2, [r1, #16]
 8008680:	6923      	ldr	r3, [r4, #16]
 8008682:	429a      	cmp	r2, r3
 8008684:	bfb8      	it	lt
 8008686:	460b      	movlt	r3, r1
 8008688:	4688      	mov	r8, r1
 800868a:	bfbc      	itt	lt
 800868c:	46a0      	movlt	r8, r4
 800868e:	461c      	movlt	r4, r3
 8008690:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008694:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008698:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800869c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80086a0:	eb07 0609 	add.w	r6, r7, r9
 80086a4:	42b3      	cmp	r3, r6
 80086a6:	bfb8      	it	lt
 80086a8:	3101      	addlt	r1, #1
 80086aa:	f7ff ff08 	bl	80084be <_Balloc>
 80086ae:	f100 0514 	add.w	r5, r0, #20
 80086b2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80086b6:	462b      	mov	r3, r5
 80086b8:	2200      	movs	r2, #0
 80086ba:	4573      	cmp	r3, lr
 80086bc:	d316      	bcc.n	80086ec <__multiply+0x74>
 80086be:	f104 0214 	add.w	r2, r4, #20
 80086c2:	f108 0114 	add.w	r1, r8, #20
 80086c6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80086ca:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	9b00      	ldr	r3, [sp, #0]
 80086d2:	9201      	str	r2, [sp, #4]
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d80c      	bhi.n	80086f2 <__multiply+0x7a>
 80086d8:	2e00      	cmp	r6, #0
 80086da:	dd03      	ble.n	80086e4 <__multiply+0x6c>
 80086dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d05d      	beq.n	80087a0 <__multiply+0x128>
 80086e4:	6106      	str	r6, [r0, #16]
 80086e6:	b003      	add	sp, #12
 80086e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ec:	f843 2b04 	str.w	r2, [r3], #4
 80086f0:	e7e3      	b.n	80086ba <__multiply+0x42>
 80086f2:	f8b2 b000 	ldrh.w	fp, [r2]
 80086f6:	f1bb 0f00 	cmp.w	fp, #0
 80086fa:	d023      	beq.n	8008744 <__multiply+0xcc>
 80086fc:	4689      	mov	r9, r1
 80086fe:	46ac      	mov	ip, r5
 8008700:	f04f 0800 	mov.w	r8, #0
 8008704:	f859 4b04 	ldr.w	r4, [r9], #4
 8008708:	f8dc a000 	ldr.w	sl, [ip]
 800870c:	b2a3      	uxth	r3, r4
 800870e:	fa1f fa8a 	uxth.w	sl, sl
 8008712:	fb0b a303 	mla	r3, fp, r3, sl
 8008716:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800871a:	f8dc 4000 	ldr.w	r4, [ip]
 800871e:	4443      	add	r3, r8
 8008720:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008724:	fb0b 840a 	mla	r4, fp, sl, r8
 8008728:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800872c:	46e2      	mov	sl, ip
 800872e:	b29b      	uxth	r3, r3
 8008730:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008734:	454f      	cmp	r7, r9
 8008736:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800873a:	f84a 3b04 	str.w	r3, [sl], #4
 800873e:	d82b      	bhi.n	8008798 <__multiply+0x120>
 8008740:	f8cc 8004 	str.w	r8, [ip, #4]
 8008744:	9b01      	ldr	r3, [sp, #4]
 8008746:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800874a:	3204      	adds	r2, #4
 800874c:	f1ba 0f00 	cmp.w	sl, #0
 8008750:	d020      	beq.n	8008794 <__multiply+0x11c>
 8008752:	682b      	ldr	r3, [r5, #0]
 8008754:	4689      	mov	r9, r1
 8008756:	46a8      	mov	r8, r5
 8008758:	f04f 0b00 	mov.w	fp, #0
 800875c:	f8b9 c000 	ldrh.w	ip, [r9]
 8008760:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008764:	fb0a 440c 	mla	r4, sl, ip, r4
 8008768:	445c      	add	r4, fp
 800876a:	46c4      	mov	ip, r8
 800876c:	b29b      	uxth	r3, r3
 800876e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008772:	f84c 3b04 	str.w	r3, [ip], #4
 8008776:	f859 3b04 	ldr.w	r3, [r9], #4
 800877a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800877e:	0c1b      	lsrs	r3, r3, #16
 8008780:	fb0a b303 	mla	r3, sl, r3, fp
 8008784:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008788:	454f      	cmp	r7, r9
 800878a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800878e:	d805      	bhi.n	800879c <__multiply+0x124>
 8008790:	f8c8 3004 	str.w	r3, [r8, #4]
 8008794:	3504      	adds	r5, #4
 8008796:	e79b      	b.n	80086d0 <__multiply+0x58>
 8008798:	46d4      	mov	ip, sl
 800879a:	e7b3      	b.n	8008704 <__multiply+0x8c>
 800879c:	46e0      	mov	r8, ip
 800879e:	e7dd      	b.n	800875c <__multiply+0xe4>
 80087a0:	3e01      	subs	r6, #1
 80087a2:	e799      	b.n	80086d8 <__multiply+0x60>

080087a4 <__pow5mult>:
 80087a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087a8:	4615      	mov	r5, r2
 80087aa:	f012 0203 	ands.w	r2, r2, #3
 80087ae:	4606      	mov	r6, r0
 80087b0:	460f      	mov	r7, r1
 80087b2:	d007      	beq.n	80087c4 <__pow5mult+0x20>
 80087b4:	3a01      	subs	r2, #1
 80087b6:	4c21      	ldr	r4, [pc, #132]	; (800883c <__pow5mult+0x98>)
 80087b8:	2300      	movs	r3, #0
 80087ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087be:	f7ff fec9 	bl	8008554 <__multadd>
 80087c2:	4607      	mov	r7, r0
 80087c4:	10ad      	asrs	r5, r5, #2
 80087c6:	d035      	beq.n	8008834 <__pow5mult+0x90>
 80087c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80087ca:	b93c      	cbnz	r4, 80087dc <__pow5mult+0x38>
 80087cc:	2010      	movs	r0, #16
 80087ce:	f7fe fc87 	bl	80070e0 <malloc>
 80087d2:	6270      	str	r0, [r6, #36]	; 0x24
 80087d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087d8:	6004      	str	r4, [r0, #0]
 80087da:	60c4      	str	r4, [r0, #12]
 80087dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80087e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087e4:	b94c      	cbnz	r4, 80087fa <__pow5mult+0x56>
 80087e6:	f240 2171 	movw	r1, #625	; 0x271
 80087ea:	4630      	mov	r0, r6
 80087ec:	f7ff ff3b 	bl	8008666 <__i2b>
 80087f0:	2300      	movs	r3, #0
 80087f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80087f6:	4604      	mov	r4, r0
 80087f8:	6003      	str	r3, [r0, #0]
 80087fa:	f04f 0800 	mov.w	r8, #0
 80087fe:	07eb      	lsls	r3, r5, #31
 8008800:	d50a      	bpl.n	8008818 <__pow5mult+0x74>
 8008802:	4639      	mov	r1, r7
 8008804:	4622      	mov	r2, r4
 8008806:	4630      	mov	r0, r6
 8008808:	f7ff ff36 	bl	8008678 <__multiply>
 800880c:	4639      	mov	r1, r7
 800880e:	4681      	mov	r9, r0
 8008810:	4630      	mov	r0, r6
 8008812:	f7ff fe88 	bl	8008526 <_Bfree>
 8008816:	464f      	mov	r7, r9
 8008818:	106d      	asrs	r5, r5, #1
 800881a:	d00b      	beq.n	8008834 <__pow5mult+0x90>
 800881c:	6820      	ldr	r0, [r4, #0]
 800881e:	b938      	cbnz	r0, 8008830 <__pow5mult+0x8c>
 8008820:	4622      	mov	r2, r4
 8008822:	4621      	mov	r1, r4
 8008824:	4630      	mov	r0, r6
 8008826:	f7ff ff27 	bl	8008678 <__multiply>
 800882a:	6020      	str	r0, [r4, #0]
 800882c:	f8c0 8000 	str.w	r8, [r0]
 8008830:	4604      	mov	r4, r0
 8008832:	e7e4      	b.n	80087fe <__pow5mult+0x5a>
 8008834:	4638      	mov	r0, r7
 8008836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800883a:	bf00      	nop
 800883c:	08009008 	.word	0x08009008

08008840 <__lshift>:
 8008840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008844:	460c      	mov	r4, r1
 8008846:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800884a:	6923      	ldr	r3, [r4, #16]
 800884c:	6849      	ldr	r1, [r1, #4]
 800884e:	eb0a 0903 	add.w	r9, sl, r3
 8008852:	68a3      	ldr	r3, [r4, #8]
 8008854:	4607      	mov	r7, r0
 8008856:	4616      	mov	r6, r2
 8008858:	f109 0501 	add.w	r5, r9, #1
 800885c:	42ab      	cmp	r3, r5
 800885e:	db32      	blt.n	80088c6 <__lshift+0x86>
 8008860:	4638      	mov	r0, r7
 8008862:	f7ff fe2c 	bl	80084be <_Balloc>
 8008866:	2300      	movs	r3, #0
 8008868:	4680      	mov	r8, r0
 800886a:	f100 0114 	add.w	r1, r0, #20
 800886e:	461a      	mov	r2, r3
 8008870:	4553      	cmp	r3, sl
 8008872:	db2b      	blt.n	80088cc <__lshift+0x8c>
 8008874:	6920      	ldr	r0, [r4, #16]
 8008876:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800887a:	f104 0314 	add.w	r3, r4, #20
 800887e:	f016 021f 	ands.w	r2, r6, #31
 8008882:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008886:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800888a:	d025      	beq.n	80088d8 <__lshift+0x98>
 800888c:	f1c2 0e20 	rsb	lr, r2, #32
 8008890:	2000      	movs	r0, #0
 8008892:	681e      	ldr	r6, [r3, #0]
 8008894:	468a      	mov	sl, r1
 8008896:	4096      	lsls	r6, r2
 8008898:	4330      	orrs	r0, r6
 800889a:	f84a 0b04 	str.w	r0, [sl], #4
 800889e:	f853 0b04 	ldr.w	r0, [r3], #4
 80088a2:	459c      	cmp	ip, r3
 80088a4:	fa20 f00e 	lsr.w	r0, r0, lr
 80088a8:	d814      	bhi.n	80088d4 <__lshift+0x94>
 80088aa:	6048      	str	r0, [r1, #4]
 80088ac:	b108      	cbz	r0, 80088b2 <__lshift+0x72>
 80088ae:	f109 0502 	add.w	r5, r9, #2
 80088b2:	3d01      	subs	r5, #1
 80088b4:	4638      	mov	r0, r7
 80088b6:	f8c8 5010 	str.w	r5, [r8, #16]
 80088ba:	4621      	mov	r1, r4
 80088bc:	f7ff fe33 	bl	8008526 <_Bfree>
 80088c0:	4640      	mov	r0, r8
 80088c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c6:	3101      	adds	r1, #1
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	e7c7      	b.n	800885c <__lshift+0x1c>
 80088cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80088d0:	3301      	adds	r3, #1
 80088d2:	e7cd      	b.n	8008870 <__lshift+0x30>
 80088d4:	4651      	mov	r1, sl
 80088d6:	e7dc      	b.n	8008892 <__lshift+0x52>
 80088d8:	3904      	subs	r1, #4
 80088da:	f853 2b04 	ldr.w	r2, [r3], #4
 80088de:	f841 2f04 	str.w	r2, [r1, #4]!
 80088e2:	459c      	cmp	ip, r3
 80088e4:	d8f9      	bhi.n	80088da <__lshift+0x9a>
 80088e6:	e7e4      	b.n	80088b2 <__lshift+0x72>

080088e8 <__mcmp>:
 80088e8:	6903      	ldr	r3, [r0, #16]
 80088ea:	690a      	ldr	r2, [r1, #16]
 80088ec:	1a9b      	subs	r3, r3, r2
 80088ee:	b530      	push	{r4, r5, lr}
 80088f0:	d10c      	bne.n	800890c <__mcmp+0x24>
 80088f2:	0092      	lsls	r2, r2, #2
 80088f4:	3014      	adds	r0, #20
 80088f6:	3114      	adds	r1, #20
 80088f8:	1884      	adds	r4, r0, r2
 80088fa:	4411      	add	r1, r2
 80088fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008900:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008904:	4295      	cmp	r5, r2
 8008906:	d003      	beq.n	8008910 <__mcmp+0x28>
 8008908:	d305      	bcc.n	8008916 <__mcmp+0x2e>
 800890a:	2301      	movs	r3, #1
 800890c:	4618      	mov	r0, r3
 800890e:	bd30      	pop	{r4, r5, pc}
 8008910:	42a0      	cmp	r0, r4
 8008912:	d3f3      	bcc.n	80088fc <__mcmp+0x14>
 8008914:	e7fa      	b.n	800890c <__mcmp+0x24>
 8008916:	f04f 33ff 	mov.w	r3, #4294967295
 800891a:	e7f7      	b.n	800890c <__mcmp+0x24>

0800891c <__mdiff>:
 800891c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008920:	460d      	mov	r5, r1
 8008922:	4607      	mov	r7, r0
 8008924:	4611      	mov	r1, r2
 8008926:	4628      	mov	r0, r5
 8008928:	4614      	mov	r4, r2
 800892a:	f7ff ffdd 	bl	80088e8 <__mcmp>
 800892e:	1e06      	subs	r6, r0, #0
 8008930:	d108      	bne.n	8008944 <__mdiff+0x28>
 8008932:	4631      	mov	r1, r6
 8008934:	4638      	mov	r0, r7
 8008936:	f7ff fdc2 	bl	80084be <_Balloc>
 800893a:	2301      	movs	r3, #1
 800893c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008944:	bfa4      	itt	ge
 8008946:	4623      	movge	r3, r4
 8008948:	462c      	movge	r4, r5
 800894a:	4638      	mov	r0, r7
 800894c:	6861      	ldr	r1, [r4, #4]
 800894e:	bfa6      	itte	ge
 8008950:	461d      	movge	r5, r3
 8008952:	2600      	movge	r6, #0
 8008954:	2601      	movlt	r6, #1
 8008956:	f7ff fdb2 	bl	80084be <_Balloc>
 800895a:	692b      	ldr	r3, [r5, #16]
 800895c:	60c6      	str	r6, [r0, #12]
 800895e:	6926      	ldr	r6, [r4, #16]
 8008960:	f105 0914 	add.w	r9, r5, #20
 8008964:	f104 0214 	add.w	r2, r4, #20
 8008968:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800896c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008970:	f100 0514 	add.w	r5, r0, #20
 8008974:	f04f 0e00 	mov.w	lr, #0
 8008978:	f852 ab04 	ldr.w	sl, [r2], #4
 800897c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008980:	fa1e f18a 	uxtah	r1, lr, sl
 8008984:	b2a3      	uxth	r3, r4
 8008986:	1ac9      	subs	r1, r1, r3
 8008988:	0c23      	lsrs	r3, r4, #16
 800898a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800898e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008992:	b289      	uxth	r1, r1
 8008994:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008998:	45c8      	cmp	r8, r9
 800899a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800899e:	4694      	mov	ip, r2
 80089a0:	f845 3b04 	str.w	r3, [r5], #4
 80089a4:	d8e8      	bhi.n	8008978 <__mdiff+0x5c>
 80089a6:	45bc      	cmp	ip, r7
 80089a8:	d304      	bcc.n	80089b4 <__mdiff+0x98>
 80089aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80089ae:	b183      	cbz	r3, 80089d2 <__mdiff+0xb6>
 80089b0:	6106      	str	r6, [r0, #16]
 80089b2:	e7c5      	b.n	8008940 <__mdiff+0x24>
 80089b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80089b8:	fa1e f381 	uxtah	r3, lr, r1
 80089bc:	141a      	asrs	r2, r3, #16
 80089be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089c8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80089cc:	f845 3b04 	str.w	r3, [r5], #4
 80089d0:	e7e9      	b.n	80089a6 <__mdiff+0x8a>
 80089d2:	3e01      	subs	r6, #1
 80089d4:	e7e9      	b.n	80089aa <__mdiff+0x8e>

080089d6 <__d2b>:
 80089d6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80089da:	460e      	mov	r6, r1
 80089dc:	2101      	movs	r1, #1
 80089de:	ec59 8b10 	vmov	r8, r9, d0
 80089e2:	4615      	mov	r5, r2
 80089e4:	f7ff fd6b 	bl	80084be <_Balloc>
 80089e8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80089ec:	4607      	mov	r7, r0
 80089ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089f2:	bb34      	cbnz	r4, 8008a42 <__d2b+0x6c>
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	f1b8 0300 	subs.w	r3, r8, #0
 80089fa:	d027      	beq.n	8008a4c <__d2b+0x76>
 80089fc:	a802      	add	r0, sp, #8
 80089fe:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008a02:	f7ff fe01 	bl	8008608 <__lo0bits>
 8008a06:	9900      	ldr	r1, [sp, #0]
 8008a08:	b1f0      	cbz	r0, 8008a48 <__d2b+0x72>
 8008a0a:	9a01      	ldr	r2, [sp, #4]
 8008a0c:	f1c0 0320 	rsb	r3, r0, #32
 8008a10:	fa02 f303 	lsl.w	r3, r2, r3
 8008a14:	430b      	orrs	r3, r1
 8008a16:	40c2      	lsrs	r2, r0
 8008a18:	617b      	str	r3, [r7, #20]
 8008a1a:	9201      	str	r2, [sp, #4]
 8008a1c:	9b01      	ldr	r3, [sp, #4]
 8008a1e:	61bb      	str	r3, [r7, #24]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	bf14      	ite	ne
 8008a24:	2102      	movne	r1, #2
 8008a26:	2101      	moveq	r1, #1
 8008a28:	6139      	str	r1, [r7, #16]
 8008a2a:	b1c4      	cbz	r4, 8008a5e <__d2b+0x88>
 8008a2c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008a30:	4404      	add	r4, r0
 8008a32:	6034      	str	r4, [r6, #0]
 8008a34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a38:	6028      	str	r0, [r5, #0]
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	b003      	add	sp, #12
 8008a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a46:	e7d5      	b.n	80089f4 <__d2b+0x1e>
 8008a48:	6179      	str	r1, [r7, #20]
 8008a4a:	e7e7      	b.n	8008a1c <__d2b+0x46>
 8008a4c:	a801      	add	r0, sp, #4
 8008a4e:	f7ff fddb 	bl	8008608 <__lo0bits>
 8008a52:	9b01      	ldr	r3, [sp, #4]
 8008a54:	617b      	str	r3, [r7, #20]
 8008a56:	2101      	movs	r1, #1
 8008a58:	6139      	str	r1, [r7, #16]
 8008a5a:	3020      	adds	r0, #32
 8008a5c:	e7e5      	b.n	8008a2a <__d2b+0x54>
 8008a5e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008a62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a66:	6030      	str	r0, [r6, #0]
 8008a68:	6918      	ldr	r0, [r3, #16]
 8008a6a:	f7ff fdae 	bl	80085ca <__hi0bits>
 8008a6e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008a72:	e7e1      	b.n	8008a38 <__d2b+0x62>

08008a74 <_calloc_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	fb02 f401 	mul.w	r4, r2, r1
 8008a7a:	4621      	mov	r1, r4
 8008a7c:	f7fe fb96 	bl	80071ac <_malloc_r>
 8008a80:	4605      	mov	r5, r0
 8008a82:	b118      	cbz	r0, 8008a8c <_calloc_r+0x18>
 8008a84:	4622      	mov	r2, r4
 8008a86:	2100      	movs	r1, #0
 8008a88:	f7fe fb3a 	bl	8007100 <memset>
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	bd38      	pop	{r3, r4, r5, pc}

08008a90 <__ascii_mbtowc>:
 8008a90:	b082      	sub	sp, #8
 8008a92:	b901      	cbnz	r1, 8008a96 <__ascii_mbtowc+0x6>
 8008a94:	a901      	add	r1, sp, #4
 8008a96:	b142      	cbz	r2, 8008aaa <__ascii_mbtowc+0x1a>
 8008a98:	b14b      	cbz	r3, 8008aae <__ascii_mbtowc+0x1e>
 8008a9a:	7813      	ldrb	r3, [r2, #0]
 8008a9c:	600b      	str	r3, [r1, #0]
 8008a9e:	7812      	ldrb	r2, [r2, #0]
 8008aa0:	1c10      	adds	r0, r2, #0
 8008aa2:	bf18      	it	ne
 8008aa4:	2001      	movne	r0, #1
 8008aa6:	b002      	add	sp, #8
 8008aa8:	4770      	bx	lr
 8008aaa:	4610      	mov	r0, r2
 8008aac:	e7fb      	b.n	8008aa6 <__ascii_mbtowc+0x16>
 8008aae:	f06f 0001 	mvn.w	r0, #1
 8008ab2:	e7f8      	b.n	8008aa6 <__ascii_mbtowc+0x16>

08008ab4 <__ascii_wctomb>:
 8008ab4:	b149      	cbz	r1, 8008aca <__ascii_wctomb+0x16>
 8008ab6:	2aff      	cmp	r2, #255	; 0xff
 8008ab8:	bf85      	ittet	hi
 8008aba:	238a      	movhi	r3, #138	; 0x8a
 8008abc:	6003      	strhi	r3, [r0, #0]
 8008abe:	700a      	strbls	r2, [r1, #0]
 8008ac0:	f04f 30ff 	movhi.w	r0, #4294967295
 8008ac4:	bf98      	it	ls
 8008ac6:	2001      	movls	r0, #1
 8008ac8:	4770      	bx	lr
 8008aca:	4608      	mov	r0, r1
 8008acc:	4770      	bx	lr

08008ace <atan2>:
 8008ace:	f000 b803 	b.w	8008ad8 <__ieee754_atan2>
 8008ad2:	0000      	movs	r0, r0
 8008ad4:	0000      	movs	r0, r0
	...

08008ad8 <__ieee754_atan2>:
 8008ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ada:	ee11 6a10 	vmov	r6, s2
 8008ade:	ee11 0a90 	vmov	r0, s3
 8008ae2:	4273      	negs	r3, r6
 8008ae4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008ae8:	4333      	orrs	r3, r6
 8008aea:	4f6b      	ldr	r7, [pc, #428]	; (8008c98 <__ieee754_atan2+0x1c0>)
 8008aec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008af0:	42bb      	cmp	r3, r7
 8008af2:	ed8d 0b00 	vstr	d0, [sp]
 8008af6:	d80b      	bhi.n	8008b10 <__ieee754_atan2+0x38>
 8008af8:	e9dd c500 	ldrd	ip, r5, [sp]
 8008afc:	f1cc 0100 	rsb	r1, ip, #0
 8008b00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008b04:	ea41 010c 	orr.w	r1, r1, ip
 8008b08:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8008b0c:	42b9      	cmp	r1, r7
 8008b0e:	d906      	bls.n	8008b1e <__ieee754_atan2+0x46>
 8008b10:	ed9d 7b00 	vldr	d7, [sp]
 8008b14:	ee37 7b01 	vadd.f64	d7, d7, d1
 8008b18:	ed8d 7b00 	vstr	d7, [sp]
 8008b1c:	e063      	b.n	8008be6 <__ieee754_atan2+0x10e>
 8008b1e:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8008b22:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8008b26:	4331      	orrs	r1, r6
 8008b28:	d104      	bne.n	8008b34 <__ieee754_atan2+0x5c>
 8008b2a:	b003      	add	sp, #12
 8008b2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008b30:	f000 b8b6 	b.w	8008ca0 <atan>
 8008b34:	1784      	asrs	r4, r0, #30
 8008b36:	f004 0402 	and.w	r4, r4, #2
 8008b3a:	ea53 010c 	orrs.w	r1, r3, ip
 8008b3e:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8008b42:	d109      	bne.n	8008b58 <__ieee754_atan2+0x80>
 8008b44:	2c02      	cmp	r4, #2
 8008b46:	d078      	beq.n	8008c3a <__ieee754_atan2+0x162>
 8008b48:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 8008c40 <__ieee754_atan2+0x168>
 8008b4c:	ed9d 6b00 	vldr	d6, [sp]
 8008b50:	2c03      	cmp	r4, #3
 8008b52:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8008b56:	e7df      	b.n	8008b18 <__ieee754_atan2+0x40>
 8008b58:	ea52 0106 	orrs.w	r1, r2, r6
 8008b5c:	d107      	bne.n	8008b6e <__ieee754_atan2+0x96>
 8008b5e:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8008c48 <__ieee754_atan2+0x170>
 8008b62:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8008c50 <__ieee754_atan2+0x178>
 8008b66:	2d00      	cmp	r5, #0
 8008b68:	fe26 7b07 	vselge.f64	d7, d6, d7
 8008b6c:	e7d4      	b.n	8008b18 <__ieee754_atan2+0x40>
 8008b6e:	42ba      	cmp	r2, r7
 8008b70:	d120      	bne.n	8008bb4 <__ieee754_atan2+0xdc>
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d111      	bne.n	8008b9a <__ieee754_atan2+0xc2>
 8008b76:	2c02      	cmp	r4, #2
 8008b78:	d009      	beq.n	8008b8e <__ieee754_atan2+0xb6>
 8008b7a:	2c03      	cmp	r4, #3
 8008b7c:	d00a      	beq.n	8008b94 <__ieee754_atan2+0xbc>
 8008b7e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8008c58 <__ieee754_atan2+0x180>
 8008b82:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8008c60 <__ieee754_atan2+0x188>
 8008b86:	2c01      	cmp	r4, #1
 8008b88:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8008b8c:	e7c4      	b.n	8008b18 <__ieee754_atan2+0x40>
 8008b8e:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8008c68 <__ieee754_atan2+0x190>
 8008b92:	e7c1      	b.n	8008b18 <__ieee754_atan2+0x40>
 8008b94:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8008c70 <__ieee754_atan2+0x198>
 8008b98:	e7be      	b.n	8008b18 <__ieee754_atan2+0x40>
 8008b9a:	2c02      	cmp	r4, #2
 8008b9c:	d04d      	beq.n	8008c3a <__ieee754_atan2+0x162>
 8008b9e:	2c03      	cmp	r4, #3
 8008ba0:	d005      	beq.n	8008bae <__ieee754_atan2+0xd6>
 8008ba2:	2c01      	cmp	r4, #1
 8008ba4:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8008c78 <__ieee754_atan2+0x1a0>
 8008ba8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8008c80 <__ieee754_atan2+0x1a8>
 8008bac:	e7ec      	b.n	8008b88 <__ieee754_atan2+0xb0>
 8008bae:	ed9f 7b24 	vldr	d7, [pc, #144]	; 8008c40 <__ieee754_atan2+0x168>
 8008bb2:	e7b1      	b.n	8008b18 <__ieee754_atan2+0x40>
 8008bb4:	42bb      	cmp	r3, r7
 8008bb6:	d0d2      	beq.n	8008b5e <__ieee754_atan2+0x86>
 8008bb8:	1a9b      	subs	r3, r3, r2
 8008bba:	151b      	asrs	r3, r3, #20
 8008bbc:	2b3c      	cmp	r3, #60	; 0x3c
 8008bbe:	dc16      	bgt.n	8008bee <__ieee754_atan2+0x116>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	da01      	bge.n	8008bc8 <__ieee754_atan2+0xf0>
 8008bc4:	333c      	adds	r3, #60	; 0x3c
 8008bc6:	db17      	blt.n	8008bf8 <__ieee754_atan2+0x120>
 8008bc8:	ed9d 7b00 	vldr	d7, [sp]
 8008bcc:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8008bd0:	f000 f960 	bl	8008e94 <fabs>
 8008bd4:	f000 f864 	bl	8008ca0 <atan>
 8008bd8:	ed8d 0b00 	vstr	d0, [sp]
 8008bdc:	2c01      	cmp	r4, #1
 8008bde:	d00e      	beq.n	8008bfe <__ieee754_atan2+0x126>
 8008be0:	2c02      	cmp	r4, #2
 8008be2:	d014      	beq.n	8008c0e <__ieee754_atan2+0x136>
 8008be4:	b9f4      	cbnz	r4, 8008c24 <__ieee754_atan2+0x14c>
 8008be6:	ed9d 0b00 	vldr	d0, [sp]
 8008bea:	b003      	add	sp, #12
 8008bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bee:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8008c48 <__ieee754_atan2+0x170>
 8008bf2:	ed8d 7b00 	vstr	d7, [sp]
 8008bf6:	e7f1      	b.n	8008bdc <__ieee754_atan2+0x104>
 8008bf8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008c80 <__ieee754_atan2+0x1a8>
 8008bfc:	e7f9      	b.n	8008bf2 <__ieee754_atan2+0x11a>
 8008bfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c02:	9901      	ldr	r1, [sp, #4]
 8008c04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c08:	e9cd 2300 	strd	r2, r3, [sp]
 8008c0c:	e7eb      	b.n	8008be6 <__ieee754_atan2+0x10e>
 8008c0e:	ed9d 6b00 	vldr	d6, [sp]
 8008c12:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8008c88 <__ieee754_atan2+0x1b0>
 8008c16:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008c1a:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8008c90 <__ieee754_atan2+0x1b8>
 8008c1e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008c22:	e779      	b.n	8008b18 <__ieee754_atan2+0x40>
 8008c24:	ed9d 6b00 	vldr	d6, [sp]
 8008c28:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8008c88 <__ieee754_atan2+0x1b0>
 8008c2c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008c30:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8008c90 <__ieee754_atan2+0x1b8>
 8008c34:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008c38:	e76e      	b.n	8008b18 <__ieee754_atan2+0x40>
 8008c3a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8008c90 <__ieee754_atan2+0x1b8>
 8008c3e:	e76b      	b.n	8008b18 <__ieee754_atan2+0x40>
 8008c40:	54442d18 	.word	0x54442d18
 8008c44:	c00921fb 	.word	0xc00921fb
 8008c48:	54442d18 	.word	0x54442d18
 8008c4c:	3ff921fb 	.word	0x3ff921fb
 8008c50:	54442d18 	.word	0x54442d18
 8008c54:	bff921fb 	.word	0xbff921fb
 8008c58:	54442d18 	.word	0x54442d18
 8008c5c:	bfe921fb 	.word	0xbfe921fb
 8008c60:	54442d18 	.word	0x54442d18
 8008c64:	3fe921fb 	.word	0x3fe921fb
 8008c68:	7f3321d2 	.word	0x7f3321d2
 8008c6c:	4002d97c 	.word	0x4002d97c
 8008c70:	7f3321d2 	.word	0x7f3321d2
 8008c74:	c002d97c 	.word	0xc002d97c
 8008c78:	00000000 	.word	0x00000000
 8008c7c:	80000000 	.word	0x80000000
	...
 8008c88:	33145c07 	.word	0x33145c07
 8008c8c:	3ca1a626 	.word	0x3ca1a626
 8008c90:	54442d18 	.word	0x54442d18
 8008c94:	400921fb 	.word	0x400921fb
 8008c98:	7ff00000 	.word	0x7ff00000
 8008c9c:	00000000 	.word	0x00000000

08008ca0 <atan>:
 8008ca0:	b538      	push	{r3, r4, r5, lr}
 8008ca2:	eeb0 7b40 	vmov.f64	d7, d0
 8008ca6:	ee17 5a90 	vmov	r5, s15
 8008caa:	4b73      	ldr	r3, [pc, #460]	; (8008e78 <atan+0x1d8>)
 8008cac:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008cb0:	429c      	cmp	r4, r3
 8008cb2:	dd13      	ble.n	8008cdc <atan+0x3c>
 8008cb4:	4b71      	ldr	r3, [pc, #452]	; (8008e7c <atan+0x1dc>)
 8008cb6:	429c      	cmp	r4, r3
 8008cb8:	dc03      	bgt.n	8008cc2 <atan+0x22>
 8008cba:	d107      	bne.n	8008ccc <atan+0x2c>
 8008cbc:	ee10 3a10 	vmov	r3, s0
 8008cc0:	b123      	cbz	r3, 8008ccc <atan+0x2c>
 8008cc2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008cc6:	eeb0 0b47 	vmov.f64	d0, d7
 8008cca:	bd38      	pop	{r3, r4, r5, pc}
 8008ccc:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8008e08 <atan+0x168>
 8008cd0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8008e10 <atan+0x170>
 8008cd4:	2d00      	cmp	r5, #0
 8008cd6:	fe37 7b06 	vselgt.f64	d7, d7, d6
 8008cda:	e7f4      	b.n	8008cc6 <atan+0x26>
 8008cdc:	4b68      	ldr	r3, [pc, #416]	; (8008e80 <atan+0x1e0>)
 8008cde:	429c      	cmp	r4, r3
 8008ce0:	dc11      	bgt.n	8008d06 <atan+0x66>
 8008ce2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008ce6:	429c      	cmp	r4, r3
 8008ce8:	dc0a      	bgt.n	8008d00 <atan+0x60>
 8008cea:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8008cee:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8008e18 <atan+0x178>
 8008cf2:	ee30 6b06 	vadd.f64	d6, d0, d6
 8008cf6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cfe:	dce2      	bgt.n	8008cc6 <atan+0x26>
 8008d00:	f04f 33ff 	mov.w	r3, #4294967295
 8008d04:	e013      	b.n	8008d2e <atan+0x8e>
 8008d06:	f000 f8c5 	bl	8008e94 <fabs>
 8008d0a:	4b5e      	ldr	r3, [pc, #376]	; (8008e84 <atan+0x1e4>)
 8008d0c:	429c      	cmp	r4, r3
 8008d0e:	dc4f      	bgt.n	8008db0 <atan+0x110>
 8008d10:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008d14:	429c      	cmp	r4, r3
 8008d16:	dc41      	bgt.n	8008d9c <atan+0xfc>
 8008d18:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8008d1c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8008d20:	2300      	movs	r3, #0
 8008d22:	eea0 6b07 	vfma.f64	d6, d0, d7
 8008d26:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008d2a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8008d2e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8008e20 <atan+0x180>
 8008d32:	ee27 4b07 	vmul.f64	d4, d7, d7
 8008d36:	ee24 5b04 	vmul.f64	d5, d4, d4
 8008d3a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8008e28 <atan+0x188>
 8008d3e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8008d42:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8008e30 <atan+0x190>
 8008d46:	eea3 6b05 	vfma.f64	d6, d3, d5
 8008d4a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8008e38 <atan+0x198>
 8008d4e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8008d52:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8008e40 <atan+0x1a0>
 8008d56:	eea3 6b05 	vfma.f64	d6, d3, d5
 8008d5a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8008e48 <atan+0x1a8>
 8008d5e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8008e50 <atan+0x1b0>
 8008d62:	eea6 3b05 	vfma.f64	d3, d6, d5
 8008d66:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8008e58 <atan+0x1b8>
 8008d6a:	eea5 2b06 	vfma.f64	d2, d5, d6
 8008d6e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8008e60 <atan+0x1c0>
 8008d72:	eea2 6b05 	vfma.f64	d6, d2, d5
 8008d76:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8008e68 <atan+0x1c8>
 8008d7a:	eea6 2b05 	vfma.f64	d2, d6, d5
 8008d7e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8008e70 <atan+0x1d0>
 8008d82:	1c5a      	adds	r2, r3, #1
 8008d84:	eea2 6b05 	vfma.f64	d6, d2, d5
 8008d88:	ee26 6b05 	vmul.f64	d6, d6, d5
 8008d8c:	eea3 6b04 	vfma.f64	d6, d3, d4
 8008d90:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008d94:	d121      	bne.n	8008dda <atan+0x13a>
 8008d96:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008d9a:	e794      	b.n	8008cc6 <atan+0x26>
 8008d9c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008da0:	2301      	movs	r3, #1
 8008da2:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008da6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008daa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8008dae:	e7be      	b.n	8008d2e <atan+0x8e>
 8008db0:	4b35      	ldr	r3, [pc, #212]	; (8008e88 <atan+0x1e8>)
 8008db2:	429c      	cmp	r4, r3
 8008db4:	dc0b      	bgt.n	8008dce <atan+0x12e>
 8008db6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008dba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008dbe:	ee30 5b47 	vsub.f64	d5, d0, d7
 8008dc2:	eea0 6b07 	vfma.f64	d6, d0, d7
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008dcc:	e7af      	b.n	8008d2e <atan+0x8e>
 8008dce:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8008dd8:	e7a9      	b.n	8008d2e <atan+0x8e>
 8008dda:	4a2c      	ldr	r2, [pc, #176]	; (8008e8c <atan+0x1ec>)
 8008ddc:	492c      	ldr	r1, [pc, #176]	; (8008e90 <atan+0x1f0>)
 8008dde:	00db      	lsls	r3, r3, #3
 8008de0:	441a      	add	r2, r3
 8008de2:	440b      	add	r3, r1
 8008de4:	ed93 5b00 	vldr	d5, [r3]
 8008de8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008dec:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008df0:	ed92 6b00 	vldr	d6, [r2]
 8008df4:	2d00      	cmp	r5, #0
 8008df6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008dfa:	bfb8      	it	lt
 8008dfc:	eeb1 7b47 	vneglt.f64	d7, d7
 8008e00:	e761      	b.n	8008cc6 <atan+0x26>
 8008e02:	bf00      	nop
 8008e04:	f3af 8000 	nop.w
 8008e08:	54442d18 	.word	0x54442d18
 8008e0c:	bff921fb 	.word	0xbff921fb
 8008e10:	54442d18 	.word	0x54442d18
 8008e14:	3ff921fb 	.word	0x3ff921fb
 8008e18:	8800759c 	.word	0x8800759c
 8008e1c:	7e37e43c 	.word	0x7e37e43c
 8008e20:	e322da11 	.word	0xe322da11
 8008e24:	3f90ad3a 	.word	0x3f90ad3a
 8008e28:	24760deb 	.word	0x24760deb
 8008e2c:	3fa97b4b 	.word	0x3fa97b4b
 8008e30:	a0d03d51 	.word	0xa0d03d51
 8008e34:	3fb10d66 	.word	0x3fb10d66
 8008e38:	c54c206e 	.word	0xc54c206e
 8008e3c:	3fb745cd 	.word	0x3fb745cd
 8008e40:	920083ff 	.word	0x920083ff
 8008e44:	3fc24924 	.word	0x3fc24924
 8008e48:	5555550d 	.word	0x5555550d
 8008e4c:	3fd55555 	.word	0x3fd55555
 8008e50:	52defd9a 	.word	0x52defd9a
 8008e54:	bfadde2d 	.word	0xbfadde2d
 8008e58:	2c6a6c2f 	.word	0x2c6a6c2f
 8008e5c:	bfa2b444 	.word	0xbfa2b444
 8008e60:	af749a6d 	.word	0xaf749a6d
 8008e64:	bfb3b0f2 	.word	0xbfb3b0f2
 8008e68:	fe231671 	.word	0xfe231671
 8008e6c:	bfbc71c6 	.word	0xbfbc71c6
 8008e70:	9998ebc4 	.word	0x9998ebc4
 8008e74:	bfc99999 	.word	0xbfc99999
 8008e78:	440fffff 	.word	0x440fffff
 8008e7c:	7ff00000 	.word	0x7ff00000
 8008e80:	3fdbffff 	.word	0x3fdbffff
 8008e84:	3ff2ffff 	.word	0x3ff2ffff
 8008e88:	40037fff 	.word	0x40037fff
 8008e8c:	08009120 	.word	0x08009120
 8008e90:	08009140 	.word	0x08009140

08008e94 <fabs>:
 8008e94:	ec51 0b10 	vmov	r0, r1, d0
 8008e98:	ee10 2a10 	vmov	r2, s0
 8008e9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008ea0:	ec43 2b10 	vmov	d0, r2, r3
 8008ea4:	4770      	bx	lr
	...

08008ea8 <_init>:
 8008ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eaa:	bf00      	nop
 8008eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eae:	bc08      	pop	{r3}
 8008eb0:	469e      	mov	lr, r3
 8008eb2:	4770      	bx	lr

08008eb4 <_fini>:
 8008eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb6:	bf00      	nop
 8008eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eba:	bc08      	pop	{r3}
 8008ebc:	469e      	mov	lr, r3
 8008ebe:	4770      	bx	lr
