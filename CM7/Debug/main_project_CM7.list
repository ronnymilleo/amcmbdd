
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e184  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005e40  0800e41c  0800e41c  0001e41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801425c  0801425c  0002425c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08014264  08014264  00024264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801426c  0801426c  0002426c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000858  24000000  08014270  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00014e18  24000858  08014ac8  00030858  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24015670  08014ac8  00035670  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030858  2**0
                  CONTENTS, READONLY
 10 .debug_info   00036b39  00000000  00000000  00030886  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000629c  00000000  00000000  000673bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000015c0  00000000  00000000  0006d660  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000012f8  00000000  00000000  0006ec20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003d4ff  00000000  00000000  0006ff18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001957b  00000000  00000000  000ad417  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0018566f  00000000  00000000  000c6992  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0024c001  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005a18  00000000  00000000  0024c07c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000858 	.word	0x24000858
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800e404 	.word	0x0800e404

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400085c 	.word	0x2400085c
 80002d4:	0800e404 	.word	0x0800e404

080002d8 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80002d8:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80002da:	2b01      	cmp	r3, #1
	IT       LS
 80002dc:	bf98      	it	ls
	BXLS     lr
 80002de:	4770      	bxls	lr
	PUSH     {r4-r9}
 80002e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80002e4:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80002e6:	089b      	lsrs	r3, r3, #2

080002e8 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80002e8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80002ec:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80002f0:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80002f2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80002f6:	4480      	add	r8, r0
	ADD      r9,r0,r9
 80002f8:	4481      	add	r9, r0
	ADD      r2,r0,r2
 80002fa:	4402      	add	r2, r0
	ADD      r12,r0,r12
 80002fc:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 80002fe:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 8000302:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000306:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000308:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 800030c:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000310:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 8000314:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000318:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 800031a:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 800031e:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 8000322:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 8000324:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000328:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 800032c:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000330:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 8000334:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 8000336:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000338:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 800033a:	d1d5      	bne.n	80002e8 <arm_bitreversal_32_0>
	POP      {r4-r9}
 800033c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000340:	4770      	bx	lr

08000342 <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 8000342:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000344:	2b01      	cmp	r3, #1
	IT       LS
 8000346:	bf98      	it	ls
	BXLS     lr
 8000348:	4770      	bxls	lr
	PUSH     {r4-r9}
 800034a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800034e:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000350:	089b      	lsrs	r3, r3, #2

08000352 <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000352:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000356:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 800035a:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800035c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000360:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 8000364:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000368:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 800036c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000370:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 8000374:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000378:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 800037a:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 800037e:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000382:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 8000386:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 800038a:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 800038c:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 800038e:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000390:	d1df      	bne.n	8000352 <arm_bitreversal_16_0>
	POP      {r4-r9}
 8000392:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000396:	4770      	bx	lr

08000398 <__aeabi_ldivmod>:
 8000398:	b97b      	cbnz	r3, 80003ba <__aeabi_ldivmod+0x22>
 800039a:	b972      	cbnz	r2, 80003ba <__aeabi_ldivmod+0x22>
 800039c:	2900      	cmp	r1, #0
 800039e:	bfbe      	ittt	lt
 80003a0:	2000      	movlt	r0, #0
 80003a2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80003a6:	e006      	blt.n	80003b6 <__aeabi_ldivmod+0x1e>
 80003a8:	bf08      	it	eq
 80003aa:	2800      	cmpeq	r0, #0
 80003ac:	bf1c      	itt	ne
 80003ae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80003b2:	f04f 30ff 	movne.w	r0, #4294967295
 80003b6:	f000 b9bd 	b.w	8000734 <__aeabi_idiv0>
 80003ba:	f1ad 0c08 	sub.w	ip, sp, #8
 80003be:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c2:	2900      	cmp	r1, #0
 80003c4:	db09      	blt.n	80003da <__aeabi_ldivmod+0x42>
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	db1a      	blt.n	8000400 <__aeabi_ldivmod+0x68>
 80003ca:	f000 f84d 	bl	8000468 <__udivmoddi4>
 80003ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003d6:	b004      	add	sp, #16
 80003d8:	4770      	bx	lr
 80003da:	4240      	negs	r0, r0
 80003dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db1b      	blt.n	800041c <__aeabi_ldivmod+0x84>
 80003e4:	f000 f840 	bl	8000468 <__udivmoddi4>
 80003e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003f0:	b004      	add	sp, #16
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	4252      	negs	r2, r2
 80003fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003fe:	4770      	bx	lr
 8000400:	4252      	negs	r2, r2
 8000402:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000406:	f000 f82f 	bl	8000468 <__udivmoddi4>
 800040a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800040e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000412:	b004      	add	sp, #16
 8000414:	4240      	negs	r0, r0
 8000416:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041a:	4770      	bx	lr
 800041c:	4252      	negs	r2, r2
 800041e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000422:	f000 f821 	bl	8000468 <__udivmoddi4>
 8000426:	f8dd e004 	ldr.w	lr, [sp, #4]
 800042a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042e:	b004      	add	sp, #16
 8000430:	4252      	negs	r2, r2
 8000432:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000436:	4770      	bx	lr

08000438 <__aeabi_uldivmod>:
 8000438:	b953      	cbnz	r3, 8000450 <__aeabi_uldivmod+0x18>
 800043a:	b94a      	cbnz	r2, 8000450 <__aeabi_uldivmod+0x18>
 800043c:	2900      	cmp	r1, #0
 800043e:	bf08      	it	eq
 8000440:	2800      	cmpeq	r0, #0
 8000442:	bf1c      	itt	ne
 8000444:	f04f 31ff 	movne.w	r1, #4294967295
 8000448:	f04f 30ff 	movne.w	r0, #4294967295
 800044c:	f000 b972 	b.w	8000734 <__aeabi_idiv0>
 8000450:	f1ad 0c08 	sub.w	ip, sp, #8
 8000454:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000458:	f000 f806 	bl	8000468 <__udivmoddi4>
 800045c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000464:	b004      	add	sp, #16
 8000466:	4770      	bx	lr

08000468 <__udivmoddi4>:
 8000468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800046c:	9e08      	ldr	r6, [sp, #32]
 800046e:	4604      	mov	r4, r0
 8000470:	4688      	mov	r8, r1
 8000472:	2b00      	cmp	r3, #0
 8000474:	d14b      	bne.n	800050e <__udivmoddi4+0xa6>
 8000476:	428a      	cmp	r2, r1
 8000478:	4615      	mov	r5, r2
 800047a:	d967      	bls.n	800054c <__udivmoddi4+0xe4>
 800047c:	fab2 f282 	clz	r2, r2
 8000480:	b14a      	cbz	r2, 8000496 <__udivmoddi4+0x2e>
 8000482:	f1c2 0720 	rsb	r7, r2, #32
 8000486:	fa01 f302 	lsl.w	r3, r1, r2
 800048a:	fa20 f707 	lsr.w	r7, r0, r7
 800048e:	4095      	lsls	r5, r2
 8000490:	ea47 0803 	orr.w	r8, r7, r3
 8000494:	4094      	lsls	r4, r2
 8000496:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800049a:	0c23      	lsrs	r3, r4, #16
 800049c:	fbb8 f7fe 	udiv	r7, r8, lr
 80004a0:	fa1f fc85 	uxth.w	ip, r5
 80004a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80004a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ac:	fb07 f10c 	mul.w	r1, r7, ip
 80004b0:	4299      	cmp	r1, r3
 80004b2:	d909      	bls.n	80004c8 <__udivmoddi4+0x60>
 80004b4:	18eb      	adds	r3, r5, r3
 80004b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80004ba:	f080 811b 	bcs.w	80006f4 <__udivmoddi4+0x28c>
 80004be:	4299      	cmp	r1, r3
 80004c0:	f240 8118 	bls.w	80006f4 <__udivmoddi4+0x28c>
 80004c4:	3f02      	subs	r7, #2
 80004c6:	442b      	add	r3, r5
 80004c8:	1a5b      	subs	r3, r3, r1
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80004dc:	45a4      	cmp	ip, r4
 80004de:	d909      	bls.n	80004f4 <__udivmoddi4+0x8c>
 80004e0:	192c      	adds	r4, r5, r4
 80004e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e6:	f080 8107 	bcs.w	80006f8 <__udivmoddi4+0x290>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	f240 8104 	bls.w	80006f8 <__udivmoddi4+0x290>
 80004f0:	3802      	subs	r0, #2
 80004f2:	442c      	add	r4, r5
 80004f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80004f8:	eba4 040c 	sub.w	r4, r4, ip
 80004fc:	2700      	movs	r7, #0
 80004fe:	b11e      	cbz	r6, 8000508 <__udivmoddi4+0xa0>
 8000500:	40d4      	lsrs	r4, r2
 8000502:	2300      	movs	r3, #0
 8000504:	e9c6 4300 	strd	r4, r3, [r6]
 8000508:	4639      	mov	r1, r7
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	428b      	cmp	r3, r1
 8000510:	d909      	bls.n	8000526 <__udivmoddi4+0xbe>
 8000512:	2e00      	cmp	r6, #0
 8000514:	f000 80eb 	beq.w	80006ee <__udivmoddi4+0x286>
 8000518:	2700      	movs	r7, #0
 800051a:	e9c6 0100 	strd	r0, r1, [r6]
 800051e:	4638      	mov	r0, r7
 8000520:	4639      	mov	r1, r7
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	fab3 f783 	clz	r7, r3
 800052a:	2f00      	cmp	r7, #0
 800052c:	d147      	bne.n	80005be <__udivmoddi4+0x156>
 800052e:	428b      	cmp	r3, r1
 8000530:	d302      	bcc.n	8000538 <__udivmoddi4+0xd0>
 8000532:	4282      	cmp	r2, r0
 8000534:	f200 80fa 	bhi.w	800072c <__udivmoddi4+0x2c4>
 8000538:	1a84      	subs	r4, r0, r2
 800053a:	eb61 0303 	sbc.w	r3, r1, r3
 800053e:	2001      	movs	r0, #1
 8000540:	4698      	mov	r8, r3
 8000542:	2e00      	cmp	r6, #0
 8000544:	d0e0      	beq.n	8000508 <__udivmoddi4+0xa0>
 8000546:	e9c6 4800 	strd	r4, r8, [r6]
 800054a:	e7dd      	b.n	8000508 <__udivmoddi4+0xa0>
 800054c:	b902      	cbnz	r2, 8000550 <__udivmoddi4+0xe8>
 800054e:	deff      	udf	#255	; 0xff
 8000550:	fab2 f282 	clz	r2, r2
 8000554:	2a00      	cmp	r2, #0
 8000556:	f040 808f 	bne.w	8000678 <__udivmoddi4+0x210>
 800055a:	1b49      	subs	r1, r1, r5
 800055c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000560:	fa1f f885 	uxth.w	r8, r5
 8000564:	2701      	movs	r7, #1
 8000566:	fbb1 fcfe 	udiv	ip, r1, lr
 800056a:	0c23      	lsrs	r3, r4, #16
 800056c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000570:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000574:	fb08 f10c 	mul.w	r1, r8, ip
 8000578:	4299      	cmp	r1, r3
 800057a:	d907      	bls.n	800058c <__udivmoddi4+0x124>
 800057c:	18eb      	adds	r3, r5, r3
 800057e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000582:	d202      	bcs.n	800058a <__udivmoddi4+0x122>
 8000584:	4299      	cmp	r1, r3
 8000586:	f200 80cd 	bhi.w	8000724 <__udivmoddi4+0x2bc>
 800058a:	4684      	mov	ip, r0
 800058c:	1a59      	subs	r1, r3, r1
 800058e:	b2a3      	uxth	r3, r4
 8000590:	fbb1 f0fe 	udiv	r0, r1, lr
 8000594:	fb0e 1410 	mls	r4, lr, r0, r1
 8000598:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800059c:	fb08 f800 	mul.w	r8, r8, r0
 80005a0:	45a0      	cmp	r8, r4
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x14c>
 80005a4:	192c      	adds	r4, r5, r4
 80005a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80005aa:	d202      	bcs.n	80005b2 <__udivmoddi4+0x14a>
 80005ac:	45a0      	cmp	r8, r4
 80005ae:	f200 80b6 	bhi.w	800071e <__udivmoddi4+0x2b6>
 80005b2:	4618      	mov	r0, r3
 80005b4:	eba4 0408 	sub.w	r4, r4, r8
 80005b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005bc:	e79f      	b.n	80004fe <__udivmoddi4+0x96>
 80005be:	f1c7 0c20 	rsb	ip, r7, #32
 80005c2:	40bb      	lsls	r3, r7
 80005c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80005c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80005cc:	fa01 f407 	lsl.w	r4, r1, r7
 80005d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80005d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80005d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80005dc:	4325      	orrs	r5, r4
 80005de:	fbb3 f9f8 	udiv	r9, r3, r8
 80005e2:	0c2c      	lsrs	r4, r5, #16
 80005e4:	fb08 3319 	mls	r3, r8, r9, r3
 80005e8:	fa1f fa8e 	uxth.w	sl, lr
 80005ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80005f0:	fb09 f40a 	mul.w	r4, r9, sl
 80005f4:	429c      	cmp	r4, r3
 80005f6:	fa02 f207 	lsl.w	r2, r2, r7
 80005fa:	fa00 f107 	lsl.w	r1, r0, r7
 80005fe:	d90b      	bls.n	8000618 <__udivmoddi4+0x1b0>
 8000600:	eb1e 0303 	adds.w	r3, lr, r3
 8000604:	f109 30ff 	add.w	r0, r9, #4294967295
 8000608:	f080 8087 	bcs.w	800071a <__udivmoddi4+0x2b2>
 800060c:	429c      	cmp	r4, r3
 800060e:	f240 8084 	bls.w	800071a <__udivmoddi4+0x2b2>
 8000612:	f1a9 0902 	sub.w	r9, r9, #2
 8000616:	4473      	add	r3, lr
 8000618:	1b1b      	subs	r3, r3, r4
 800061a:	b2ad      	uxth	r5, r5
 800061c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000620:	fb08 3310 	mls	r3, r8, r0, r3
 8000624:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000628:	fb00 fa0a 	mul.w	sl, r0, sl
 800062c:	45a2      	cmp	sl, r4
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x1da>
 8000630:	eb1e 0404 	adds.w	r4, lr, r4
 8000634:	f100 33ff 	add.w	r3, r0, #4294967295
 8000638:	d26b      	bcs.n	8000712 <__udivmoddi4+0x2aa>
 800063a:	45a2      	cmp	sl, r4
 800063c:	d969      	bls.n	8000712 <__udivmoddi4+0x2aa>
 800063e:	3802      	subs	r0, #2
 8000640:	4474      	add	r4, lr
 8000642:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000646:	fba0 8902 	umull	r8, r9, r0, r2
 800064a:	eba4 040a 	sub.w	r4, r4, sl
 800064e:	454c      	cmp	r4, r9
 8000650:	46c2      	mov	sl, r8
 8000652:	464b      	mov	r3, r9
 8000654:	d354      	bcc.n	8000700 <__udivmoddi4+0x298>
 8000656:	d051      	beq.n	80006fc <__udivmoddi4+0x294>
 8000658:	2e00      	cmp	r6, #0
 800065a:	d069      	beq.n	8000730 <__udivmoddi4+0x2c8>
 800065c:	ebb1 050a 	subs.w	r5, r1, sl
 8000660:	eb64 0403 	sbc.w	r4, r4, r3
 8000664:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000668:	40fd      	lsrs	r5, r7
 800066a:	40fc      	lsrs	r4, r7
 800066c:	ea4c 0505 	orr.w	r5, ip, r5
 8000670:	e9c6 5400 	strd	r5, r4, [r6]
 8000674:	2700      	movs	r7, #0
 8000676:	e747      	b.n	8000508 <__udivmoddi4+0xa0>
 8000678:	f1c2 0320 	rsb	r3, r2, #32
 800067c:	fa20 f703 	lsr.w	r7, r0, r3
 8000680:	4095      	lsls	r5, r2
 8000682:	fa01 f002 	lsl.w	r0, r1, r2
 8000686:	fa21 f303 	lsr.w	r3, r1, r3
 800068a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800068e:	4338      	orrs	r0, r7
 8000690:	0c01      	lsrs	r1, r0, #16
 8000692:	fbb3 f7fe 	udiv	r7, r3, lr
 8000696:	fa1f f885 	uxth.w	r8, r5
 800069a:	fb0e 3317 	mls	r3, lr, r7, r3
 800069e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006a2:	fb07 f308 	mul.w	r3, r7, r8
 80006a6:	428b      	cmp	r3, r1
 80006a8:	fa04 f402 	lsl.w	r4, r4, r2
 80006ac:	d907      	bls.n	80006be <__udivmoddi4+0x256>
 80006ae:	1869      	adds	r1, r5, r1
 80006b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80006b4:	d22f      	bcs.n	8000716 <__udivmoddi4+0x2ae>
 80006b6:	428b      	cmp	r3, r1
 80006b8:	d92d      	bls.n	8000716 <__udivmoddi4+0x2ae>
 80006ba:	3f02      	subs	r7, #2
 80006bc:	4429      	add	r1, r5
 80006be:	1acb      	subs	r3, r1, r3
 80006c0:	b281      	uxth	r1, r0
 80006c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80006c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80006ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006ce:	fb00 f308 	mul.w	r3, r0, r8
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d907      	bls.n	80006e6 <__udivmoddi4+0x27e>
 80006d6:	1869      	adds	r1, r5, r1
 80006d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80006dc:	d217      	bcs.n	800070e <__udivmoddi4+0x2a6>
 80006de:	428b      	cmp	r3, r1
 80006e0:	d915      	bls.n	800070e <__udivmoddi4+0x2a6>
 80006e2:	3802      	subs	r0, #2
 80006e4:	4429      	add	r1, r5
 80006e6:	1ac9      	subs	r1, r1, r3
 80006e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80006ec:	e73b      	b.n	8000566 <__udivmoddi4+0xfe>
 80006ee:	4637      	mov	r7, r6
 80006f0:	4630      	mov	r0, r6
 80006f2:	e709      	b.n	8000508 <__udivmoddi4+0xa0>
 80006f4:	4607      	mov	r7, r0
 80006f6:	e6e7      	b.n	80004c8 <__udivmoddi4+0x60>
 80006f8:	4618      	mov	r0, r3
 80006fa:	e6fb      	b.n	80004f4 <__udivmoddi4+0x8c>
 80006fc:	4541      	cmp	r1, r8
 80006fe:	d2ab      	bcs.n	8000658 <__udivmoddi4+0x1f0>
 8000700:	ebb8 0a02 	subs.w	sl, r8, r2
 8000704:	eb69 020e 	sbc.w	r2, r9, lr
 8000708:	3801      	subs	r0, #1
 800070a:	4613      	mov	r3, r2
 800070c:	e7a4      	b.n	8000658 <__udivmoddi4+0x1f0>
 800070e:	4660      	mov	r0, ip
 8000710:	e7e9      	b.n	80006e6 <__udivmoddi4+0x27e>
 8000712:	4618      	mov	r0, r3
 8000714:	e795      	b.n	8000642 <__udivmoddi4+0x1da>
 8000716:	4667      	mov	r7, ip
 8000718:	e7d1      	b.n	80006be <__udivmoddi4+0x256>
 800071a:	4681      	mov	r9, r0
 800071c:	e77c      	b.n	8000618 <__udivmoddi4+0x1b0>
 800071e:	3802      	subs	r0, #2
 8000720:	442c      	add	r4, r5
 8000722:	e747      	b.n	80005b4 <__udivmoddi4+0x14c>
 8000724:	f1ac 0c02 	sub.w	ip, ip, #2
 8000728:	442b      	add	r3, r5
 800072a:	e72f      	b.n	800058c <__udivmoddi4+0x124>
 800072c:	4638      	mov	r0, r7
 800072e:	e708      	b.n	8000542 <__udivmoddi4+0xda>
 8000730:	4637      	mov	r7, r6
 8000732:	e6e9      	b.n	8000508 <__udivmoddi4+0xa0>

08000734 <__aeabi_idiv0>:
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800073c:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <SystemInit+0xc4>)
 800073e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000742:	4a2e      	ldr	r2, [pc, #184]	; (80007fc <SystemInit+0xc4>)
 8000744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 800074c:	4b2b      	ldr	r3, [pc, #172]	; (80007fc <SystemInit+0xc4>)
 800074e:	691b      	ldr	r3, [r3, #16]
 8000750:	4a2a      	ldr	r2, [pc, #168]	; (80007fc <SystemInit+0xc4>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000758:	4b29      	ldr	r3, [pc, #164]	; (8000800 <SystemInit+0xc8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a28      	ldr	r2, [pc, #160]	; (8000800 <SystemInit+0xc8>)
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000764:	4b26      	ldr	r3, [pc, #152]	; (8000800 <SystemInit+0xc8>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800076a:	4b25      	ldr	r3, [pc, #148]	; (8000800 <SystemInit+0xc8>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4924      	ldr	r1, [pc, #144]	; (8000800 <SystemInit+0xc8>)
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <SystemInit+0xcc>)
 8000772:	4013      	ands	r3, r2
 8000774:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <SystemInit+0xc8>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800077c:	4b20      	ldr	r3, [pc, #128]	; (8000800 <SystemInit+0xc8>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <SystemInit+0xc8>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <SystemInit+0xc8>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <SystemInit+0xc8>)
 8000790:	2200      	movs	r2, #0
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <SystemInit+0xc8>)
 8000796:	2200      	movs	r2, #0
 8000798:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <SystemInit+0xc8>)
 800079c:	2200      	movs	r2, #0
 800079e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <SystemInit+0xc8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <SystemInit+0xc8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <SystemInit+0xc8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <SystemInit+0xc8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <SystemInit+0xc8>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a10      	ldr	r2, [pc, #64]	; (8000800 <SystemInit+0xc8>)
 80007be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <SystemInit+0xc8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <SystemInit+0xd0>)
 80007cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <SystemInit+0xd0>)
 80007d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <SystemInit+0xd4>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <SystemInit+0xd8>)
 80007dc:	4013      	ands	r3, r2
 80007de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80007e2:	d202      	bcs.n	80007ea <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <SystemInit+0xdc>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <SystemInit+0xc4>)
 80007ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007f0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	e000ed00 	.word	0xe000ed00
 8000800:	58024400 	.word	0x58024400
 8000804:	eaf6ed7f 	.word	0xeaf6ed7f
 8000808:	580000c0 	.word	0x580000c0
 800080c:	5c001000 	.word	0x5c001000
 8000810:	ffff0000 	.word	0xffff0000
 8000814:	51008108 	.word	0x51008108

08000818 <arm_abs_f32>:

void arm_abs_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize)
{
 8000818:	b480      	push	{r7}
 800081a:	b08b      	sub	sp, #44	; 0x2c
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;                  /* temporary variables */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	089b      	lsrs	r3, r3, #2
 8000828:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 800082a:	e03b      	b.n	80008a4 <arm_abs_f32+0x8c>
  {
    /* C = |A| */
    /* Calculate absolute and then store the results in the destination buffer. */
    /* read sample from source */
    in1 = *pSrc;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	623b      	str	r3, [r7, #32]
    in2 = *(pSrc + 1);
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	61fb      	str	r3, [r7, #28]
    in3 = *(pSrc + 2);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	61bb      	str	r3, [r7, #24]

    /* find absolute value */
    in1 = fabsf(in1);
 800083e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000842:	eef0 7ae7 	vabs.f32	s15, s15
 8000846:	edc7 7a08 	vstr	s15, [r7, #32]

    /* read sample from source */
    in4 = *(pSrc + 3);
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	617b      	str	r3, [r7, #20]

    /* find absolute value */
    in2 = fabsf(in2);
 8000850:	edd7 7a07 	vldr	s15, [r7, #28]
 8000854:	eef0 7ae7 	vabs.f32	s15, s15
 8000858:	edc7 7a07 	vstr	s15, [r7, #28]

    /* read sample from source */
    *pDst = in1;
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	6a3a      	ldr	r2, [r7, #32]
 8000860:	601a      	str	r2, [r3, #0]

    /* find absolute value */
    in3 = fabsf(in3);
 8000862:	edd7 7a06 	vldr	s15, [r7, #24]
 8000866:	eef0 7ae7 	vabs.f32	s15, s15
 800086a:	edc7 7a06 	vstr	s15, [r7, #24]

    /* find absolute value */
    in4 = fabsf(in4);
 800086e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000872:	eef0 7ae7 	vabs.f32	s15, s15
 8000876:	edc7 7a05 	vstr	s15, [r7, #20]

    /* store result to destination */
    *(pDst + 1) = in2;
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	3304      	adds	r3, #4
 800087e:	69fa      	ldr	r2, [r7, #28]
 8000880:	601a      	str	r2, [r3, #0]

    /* store result to destination */
    *(pDst + 2) = in3;
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	3308      	adds	r3, #8
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	601a      	str	r2, [r3, #0]

    /* store result to destination */
    *(pDst + 3) = in4;
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	330c      	adds	r3, #12
 800088e:	697a      	ldr	r2, [r7, #20]
 8000890:	601a      	str	r2, [r3, #0]


    /* Update source pointer to process next sampels */
    pSrc += 4U;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3310      	adds	r3, #16
 8000896:	60fb      	str	r3, [r7, #12]

    /* Update destination pointer to process next sampels */
    pDst += 4U;
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	3310      	adds	r3, #16
 800089c:	60bb      	str	r3, [r7, #8]

    /* Decrement the loop counter */
    blkCnt--;
 800089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a0:	3b01      	subs	r3, #1
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 80008a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d1c0      	bne.n	800082c <arm_abs_f32+0x14>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f003 0303 	and.w	r3, r3, #3
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /*   #if defined (ARM_MATH_DSP)   */

  while (blkCnt > 0U)
 80008b2:	e00e      	b.n	80008d2 <arm_abs_f32+0xba>
  {
    /* C = |A| */
    /* Calculate absolute and then store the results in the destination buffer. */
    *pDst++ = fabsf(*pSrc++);
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	1d1a      	adds	r2, r3, #4
 80008b8:	60fa      	str	r2, [r7, #12]
 80008ba:	edd3 7a00 	vldr	s15, [r3]
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	1d1a      	adds	r2, r3, #4
 80008c2:	60ba      	str	r2, [r7, #8]
 80008c4:	eef0 7ae7 	vabs.f32	s15, s15
 80008c8:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the loop counter */
    blkCnt--;
 80008cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ce:	3b01      	subs	r3, #1
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 80008d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1ed      	bne.n	80008b4 <arm_abs_f32+0x9c>
  }
}
 80008d8:	bf00      	nop
 80008da:	372c      	adds	r7, #44	; 0x2c
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <arm_mult_f32>:
void arm_mult_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b093      	sub	sp, #76	; 0x4c
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
 80008f0:	603b      	str	r3, [r7, #0]
  float32_t inA1, inA2, inA3, inA4;              /* temporary input variables */
  float32_t inB1, inB2, inB3, inB4;              /* temporary input variables */
  float32_t out1, out2, out3, out4;              /* temporary output variables */

  /* loop Unrolling */
  blkCnt = blockSize >> 2U;
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	089b      	lsrs	r3, r3, #2
 80008f6:	647b      	str	r3, [r7, #68]	; 0x44

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 80008f8:	e052      	b.n	80009a0 <arm_mult_f32+0xbc>
  {
    /* C = A * B */
    /* Multiply the inputs and store the results in output buffer */
    /* read sample from sourceA */
    inA1 = *pSrcA;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	643b      	str	r3, [r7, #64]	; 0x40
    /* read sample from sourceB */
    inB1 = *pSrcB;
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* read sample from sourceA */
    inA2 = *(pSrcA + 1);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	63bb      	str	r3, [r7, #56]	; 0x38
    /* read sample from sourceB */
    inB2 = *(pSrcB + 1);
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	637b      	str	r3, [r7, #52]	; 0x34

    /* out = sourceA * sourceB */
    out1 = inA1 * inB1;
 8000912:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000916:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800091a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800091e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    /* read sample from sourceA */
    inA3 = *(pSrcA + 2);
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* read sample from sourceB */
    inB3 = *(pSrcB + 2);
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* out = sourceA * sourceB */
    out2 = inA2 * inB2;
 800092e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000932:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800093a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* read sample from sourceA */
    inA4 = *(pSrcA + 3);
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	623b      	str	r3, [r7, #32]

    /* store result to destination buffer */
    *pDst = out1;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000948:	601a      	str	r2, [r3, #0]

    /* read sample from sourceB */
    inB4 = *(pSrcB + 3);
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	61fb      	str	r3, [r7, #28]

    /* out = sourceA * sourceB */
    out3 = inA3 * inB3;
 8000950:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000954:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800095c:	edc7 7a06 	vstr	s15, [r7, #24]

    /* store result to destination buffer */
    *(pDst + 1) = out2;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3304      	adds	r3, #4
 8000964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000966:	601a      	str	r2, [r3, #0]

    /* out = sourceA * sourceB */
    out4 = inA4 * inB4;
 8000968:	ed97 7a08 	vldr	s14, [r7, #32]
 800096c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000974:	edc7 7a05 	vstr	s15, [r7, #20]
    /* store result to destination buffer */
    *(pDst + 2) = out3;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3308      	adds	r3, #8
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	601a      	str	r2, [r3, #0]
    /* store result to destination buffer */
    *(pDst + 3) = out4;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	330c      	adds	r3, #12
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	601a      	str	r2, [r3, #0]


    /* update pointers to process next samples */
    pSrcA += 4U;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	3310      	adds	r3, #16
 800098c:	60fb      	str	r3, [r7, #12]
    pSrcB += 4U;
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	3310      	adds	r3, #16
 8000992:	60bb      	str	r3, [r7, #8]
    pDst += 4U;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3310      	adds	r3, #16
 8000998:	607b      	str	r3, [r7, #4]

    /* Decrement the blockSize loop counter */
    blkCnt--;
 800099a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800099c:	3b01      	subs	r3, #1
 800099e:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 80009a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1a9      	bne.n	80008fa <arm_mult_f32+0x16>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	f003 0303 	and.w	r3, r3, #3
 80009ac:	647b      	str	r3, [r7, #68]	; 0x44
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 80009ae:	e013      	b.n	80009d8 <arm_mult_f32+0xf4>
  {
    /* C = A * B */
    /* Multiply the inputs and store the results in output buffer */
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	1d1a      	adds	r2, r3, #4
 80009b4:	60fa      	str	r2, [r7, #12]
 80009b6:	ed93 7a00 	vldr	s14, [r3]
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	1d1a      	adds	r2, r3, #4
 80009be:	60ba      	str	r2, [r7, #8]
 80009c0:	edd3 7a00 	vldr	s15, [r3]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	1d1a      	adds	r2, r3, #4
 80009c8:	607a      	str	r2, [r7, #4]
 80009ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ce:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the blockSize loop counter */
    blkCnt--;
 80009d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009d4:	3b01      	subs	r3, #1
 80009d6:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 80009d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d1e8      	bne.n	80009b0 <arm_mult_f32+0xcc>
  }
}
 80009de:	bf00      	nop
 80009e0:	374c      	adds	r7, #76	; 0x4c
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <arm_sub_f32>:
void arm_sub_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b08f      	sub	sp, #60	; 0x3c
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	60f8      	str	r0, [r7, #12]
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	603b      	str	r3, [r7, #0]
/* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t inA1, inA2, inA3, inA4;              /* temporary variables */
  float32_t inB1, inB2, inB3, inB4;              /* temporary variables */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	089b      	lsrs	r3, r3, #2
 80009fc:	637b      	str	r3, [r7, #52]	; 0x34

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 80009fe:	e04a      	b.n	8000a96 <arm_sub_f32+0xac>
  {
    /* C = A - B */
    /* Subtract and then store the results in the destination buffer. */
    /* Read 4 input samples from sourceA and sourceB */
    inA1 = *pSrcA;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
    inB1 = *pSrcB;
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    inA2 = *(pSrcA + 1);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
    inB2 = *(pSrcB + 1);
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
    inA3 = *(pSrcA + 2);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	623b      	str	r3, [r7, #32]
    inB3 = *(pSrcB + 2);
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	61fb      	str	r3, [r7, #28]
    inA4 = *(pSrcA + 3);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	61bb      	str	r3, [r7, #24]
    inB4 = *(pSrcB + 3);
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	617b      	str	r3, [r7, #20]

    /* dst = srcA - srcB */
    /* subtract and store the result */
    *pDst = inA1 - inB1;
 8000a30:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000a34:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000a38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	edc3 7a00 	vstr	s15, [r3]
    *(pDst + 1) = inA2 - inB2;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3304      	adds	r3, #4
 8000a46:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000a4a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a52:	edc3 7a00 	vstr	s15, [r3]
    *(pDst + 2) = inA3 - inB3;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3308      	adds	r3, #8
 8000a5a:	ed97 7a08 	vldr	s14, [r7, #32]
 8000a5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a66:	edc3 7a00 	vstr	s15, [r3]
    *(pDst + 3) = inA4 - inB4;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	330c      	adds	r3, #12
 8000a6e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000a72:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a7a:	edc3 7a00 	vstr	s15, [r3]


    /* Update pointers to process next sampels */
    pSrcA += 4U;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3310      	adds	r3, #16
 8000a82:	60fb      	str	r3, [r7, #12]
    pSrcB += 4U;
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	3310      	adds	r3, #16
 8000a88:	60bb      	str	r3, [r7, #8]
    pDst += 4U;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3310      	adds	r3, #16
 8000a8e:	607b      	str	r3, [r7, #4]

    /* Decrement the loop counter */
    blkCnt--;
 8000a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a92:	3b01      	subs	r3, #1
 8000a94:	637b      	str	r3, [r7, #52]	; 0x34
  while (blkCnt > 0U)
 8000a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1b1      	bne.n	8000a00 <arm_sub_f32+0x16>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	f003 0303 	and.w	r3, r3, #3
 8000aa2:	637b      	str	r3, [r7, #52]	; 0x34
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8000aa4:	e013      	b.n	8000ace <arm_sub_f32+0xe4>
  {
    /* C = A - B */
    /* Subtract and then store the results in the destination buffer. */
    *pDst++ = (*pSrcA++) - (*pSrcB++);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	1d1a      	adds	r2, r3, #4
 8000aaa:	60fa      	str	r2, [r7, #12]
 8000aac:	ed93 7a00 	vldr	s14, [r3]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	1d1a      	adds	r2, r3, #4
 8000ab4:	60ba      	str	r2, [r7, #8]
 8000ab6:	edd3 7a00 	vldr	s15, [r3]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	1d1a      	adds	r2, r3, #4
 8000abe:	607a      	str	r2, [r7, #4]
 8000ac0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ac4:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the loop counter */
    blkCnt--;
 8000ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aca:	3b01      	subs	r3, #1
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
  while (blkCnt > 0U)
 8000ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1e8      	bne.n	8000aa6 <arm_sub_f32+0xbc>
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	373c      	adds	r7, #60	; 0x3c
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <arm_cmplx_conj_f32>:

void arm_cmplx_conj_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b08f      	sub	sp, #60	; 0x3c
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t inR1, inR2, inR3, inR4;
  float32_t inI1, inI2, inI3, inI4;

  /*loop Unrolling */
  blkCnt = numSamples >> 2U;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	089b      	lsrs	r3, r3, #2
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8000af2:	e057      	b.n	8000ba4 <arm_cmplx_conj_f32+0xc4>
  {
    /* C[0]+jC[1] = A[0]+ j (-1) A[1] */
    /* Calculate Complex Conjugate and then store the results in the destination buffer. */
    /* read real input samples */
    inR1 = pSrc[0];
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	633b      	str	r3, [r7, #48]	; 0x30
    /* store real samples to destination */
    pDst[0] = inR1;
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000afe:	601a      	str	r2, [r3, #0]
    inR2 = pSrc[2];
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    pDst[2] = inR2;
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	3308      	adds	r3, #8
 8000b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b0c:	601a      	str	r2, [r3, #0]
    inR3 = pSrc[4];
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	691b      	ldr	r3, [r3, #16]
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
    pDst[4] = inR3;
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	3310      	adds	r3, #16
 8000b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b1a:	601a      	str	r2, [r3, #0]
    inR4 = pSrc[6];
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
    pDst[6] = inR4;
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	3318      	adds	r3, #24
 8000b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b28:	601a      	str	r2, [r3, #0]

    /* read imaginary input samples */
    inI1 = pSrc[1];
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	623b      	str	r3, [r7, #32]
    inI2 = pSrc[3];
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	61fb      	str	r3, [r7, #28]

    /* conjugate input */
    inI1 = -inI1;
 8000b36:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b3a:	eef1 7a67 	vneg.f32	s15, s15
 8000b3e:	edc7 7a08 	vstr	s15, [r7, #32]

    /* read imaginary input samples */
    inI3 = pSrc[5];
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	61bb      	str	r3, [r7, #24]

    /* conjugate input */
    inI2 = -inI2;
 8000b48:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b4c:	eef1 7a67 	vneg.f32	s15, s15
 8000b50:	edc7 7a07 	vstr	s15, [r7, #28]

    /* read imaginary input samples */
    inI4 = pSrc[7];
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	69db      	ldr	r3, [r3, #28]
 8000b58:	617b      	str	r3, [r7, #20]

    /* conjugate input */
    inI3 = -inI3;
 8000b5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b5e:	eef1 7a67 	vneg.f32	s15, s15
 8000b62:	edc7 7a06 	vstr	s15, [r7, #24]

    /* store imaginary samples to destination */
    pDst[1] = inI1;
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	6a3a      	ldr	r2, [r7, #32]
 8000b6c:	601a      	str	r2, [r3, #0]
    pDst[3] = inI2;
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	330c      	adds	r3, #12
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	601a      	str	r2, [r3, #0]

    /* conjugate input */
    inI4 = -inI4;
 8000b76:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b7a:	eef1 7a67 	vneg.f32	s15, s15
 8000b7e:	edc7 7a05 	vstr	s15, [r7, #20]

    /* store imaginary samples to destination */
    pDst[5] = inI3;
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	3314      	adds	r3, #20
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	601a      	str	r2, [r3, #0]

    /* increment source pointer by 8 to process next sampels */
    pSrc += 8U;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3320      	adds	r3, #32
 8000b8e:	60fb      	str	r3, [r7, #12]

    /* store imaginary sample to destination */
    pDst[7] = inI4;
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	331c      	adds	r3, #28
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	601a      	str	r2, [r3, #0]

    /* increment destination pointer by 8 to store next samples */
    pDst += 8U;
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	3320      	adds	r3, #32
 8000b9c:	60bb      	str	r3, [r7, #8]

    /* Decrement the loop counter */
    blkCnt--;
 8000b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	637b      	str	r3, [r7, #52]	; 0x34
  while (blkCnt > 0U)
 8000ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1a4      	bne.n	8000af4 <arm_cmplx_conj_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4U;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f003 0303 	and.w	r3, r3, #3
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
  /* Run the below code for Cortex-M0 */
  blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8000bb2:	e016      	b.n	8000be2 <arm_cmplx_conj_f32+0x102>
  {
    /* realOut + j (imagOut) = realIn + j (-1) imagIn */
    /* Calculate Complex Conjugate and then store the results in the destination buffer. */
    *pDst++ = *pSrc++;
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	1d13      	adds	r3, r2, #4
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	1d19      	adds	r1, r3, #4
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	6812      	ldr	r2, [r2, #0]
 8000bc2:	601a      	str	r2, [r3, #0]
    *pDst++ = -*pSrc++;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	1d1a      	adds	r2, r3, #4
 8000bc8:	60fa      	str	r2, [r7, #12]
 8000bca:	edd3 7a00 	vldr	s15, [r3]
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	1d1a      	adds	r2, r3, #4
 8000bd2:	60ba      	str	r2, [r7, #8]
 8000bd4:	eef1 7a67 	vneg.f32	s15, s15
 8000bd8:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the loop counter */
    blkCnt--;
 8000bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bde:	3b01      	subs	r3, #1
 8000be0:	637b      	str	r3, [r7, #52]	; 0x34
  while (blkCnt > 0U)
 8000be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1e5      	bne.n	8000bb4 <arm_cmplx_conj_f32+0xd4>
  }
}
 8000be8:	bf00      	nop
 8000bea:	373c      	adds	r7, #60	; 0x3c
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b092      	sub	sp, #72	; 0x48
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2U;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	089b      	lsrs	r3, r3, #2
 8000c04:	647b      	str	r3, [r7, #68]	; 0x44

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8000c06:	e0ce      	b.n	8000da6 <arm_cmplx_mag_f32+0x1b2>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	1d1a      	adds	r2, r3, #4
 8000c0c:	60fa      	str	r2, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	1d1a      	adds	r2, r3, #4
 8000c16:	60fa      	str	r2, [r7, #12]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000c1c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000c20:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c28:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000c2c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	1d1a      	adds	r2, r3, #4
 8000c3c:	60ba      	str	r2, [r7, #8]
 8000c3e:	edc7 7a08 	vstr	s15, [r7, #32]
 8000c42:	61fb      	str	r3, [r7, #28]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000c44:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c50:	db09      	blt.n	8000c66 <arm_cmplx_mag_f32+0x72>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8000c52:	ed97 0a08 	vldr	s0, [r7, #32]
 8000c56:	f00d f9fb 	bl	800e050 <sqrtf>
 8000c5a:	eef0 7a40 	vmov.f32	s15, s0
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	edc3 7a00 	vstr	s15, [r3]
 8000c64:	e003      	b.n	8000c6e <arm_cmplx_mag_f32+0x7a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	f04f 0200 	mov.w	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]

    realIn = *pSrc++;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	1d1a      	adds	r2, r3, #4
 8000c72:	60fa      	str	r2, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	1d1a      	adds	r2, r3, #4
 8000c7c:	60fa      	str	r2, [r7, #12]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000c82:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000c86:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000c8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c8e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000c92:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	1d1a      	adds	r2, r3, #4
 8000ca2:	60ba      	str	r2, [r7, #8]
 8000ca4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    if (in >= 0.0f)
 8000caa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000cae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb6:	db09      	blt.n	8000ccc <arm_cmplx_mag_f32+0xd8>
      *pOut = __builtin_sqrtf(in);
 8000cb8:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8000cbc:	f00d f9c8 	bl	800e050 <sqrtf>
 8000cc0:	eef0 7a40 	vmov.f32	s15, s0
 8000cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc6:	edc3 7a00 	vstr	s15, [r3]
 8000cca:	e003      	b.n	8000cd4 <arm_cmplx_mag_f32+0xe0>
      *pOut = 0.0f;
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	f04f 0200 	mov.w	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]

    realIn = *pSrc++;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	1d1a      	adds	r2, r3, #4
 8000cd8:	60fa      	str	r2, [r7, #12]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	1d1a      	adds	r2, r3, #4
 8000ce2:	60fa      	str	r2, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000ce8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000cec:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000cf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cf4:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000cf8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000cfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	1d1a      	adds	r2, r3, #4
 8000d08:	60ba      	str	r2, [r7, #8]
 8000d0a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (in >= 0.0f)
 8000d10:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1c:	db09      	blt.n	8000d32 <arm_cmplx_mag_f32+0x13e>
      *pOut = __builtin_sqrtf(in);
 8000d1e:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8000d22:	f00d f995 	bl	800e050 <sqrtf>
 8000d26:	eef0 7a40 	vmov.f32	s15, s0
 8000d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d2c:	edc3 7a00 	vstr	s15, [r3]
 8000d30:	e003      	b.n	8000d3a <arm_cmplx_mag_f32+0x146>
      *pOut = 0.0f;
 8000d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d34:	f04f 0200 	mov.w	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]

    realIn = *pSrc++;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	1d1a      	adds	r2, r3, #4
 8000d3e:	60fa      	str	r2, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	1d1a      	adds	r2, r3, #4
 8000d48:	60fa      	str	r2, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000d4e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000d52:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000d56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d5a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000d5e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000d62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1d1a      	adds	r2, r3, #4
 8000d6e:	60ba      	str	r2, [r7, #8]
 8000d70:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
    if (in >= 0.0f)
 8000d76:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000d7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d82:	db09      	blt.n	8000d98 <arm_cmplx_mag_f32+0x1a4>
      *pOut = __builtin_sqrtf(in);
 8000d84:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8000d88:	f00d f962 	bl	800e050 <sqrtf>
 8000d8c:	eef0 7a40 	vmov.f32	s15, s0
 8000d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d92:	edc3 7a00 	vstr	s15, [r3]
 8000d96:	e003      	b.n	8000da0 <arm_cmplx_mag_f32+0x1ac>
      *pOut = 0.0f;
 8000d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d9a:	f04f 0200 	mov.w	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]


    /* Decrement the loop counter */
    blkCnt--;
 8000da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000da2:	3b01      	subs	r3, #1
 8000da4:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 8000da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f47f af2d 	bne.w	8000c08 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4U;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	647b      	str	r3, [r7, #68]	; 0x44

  while (blkCnt > 0U)
 8000db6:	e035      	b.n	8000e24 <arm_cmplx_mag_f32+0x230>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	1d1a      	adds	r2, r3, #4
 8000dbc:	60fa      	str	r2, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	1d1a      	adds	r2, r3, #4
 8000dc6:	60fa      	str	r2, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000dcc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000dd0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000dd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dd8:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000ddc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	1d1a      	adds	r2, r3, #4
 8000dec:	60ba      	str	r2, [r7, #8]
 8000dee:	edc7 7a06 	vstr	s15, [r7, #24]
 8000df2:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8000df4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000df8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e00:	db09      	blt.n	8000e16 <arm_cmplx_mag_f32+0x222>
      *pOut = __builtin_sqrtf(in);
 8000e02:	ed97 0a06 	vldr	s0, [r7, #24]
 8000e06:	f00d f923 	bl	800e050 <sqrtf>
 8000e0a:	eef0 7a40 	vmov.f32	s15, s0
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	edc3 7a00 	vstr	s15, [r3]
 8000e14:	e003      	b.n	8000e1e <arm_cmplx_mag_f32+0x22a>
      *pOut = 0.0f;
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	f04f 0200 	mov.w	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8000e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e20:	3b01      	subs	r3, #1
 8000e22:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 8000e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1c6      	bne.n	8000db8 <arm_cmplx_mag_f32+0x1c4>
    numSamples--;
  }

#endif /* #if defined (ARM_MATH_DSP) */

}
 8000e2a:	bf00      	nop
 8000e2c:	3748      	adds	r7, #72	; 0x48
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <arm_cmplx_mult_cmplx_f32>:
void arm_cmplx_mult_cmplx_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t numSamples)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b093      	sub	sp, #76	; 0x4c
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	60f8      	str	r0, [r7, #12]
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	603b      	str	r3, [r7, #0]
  float32_t a2, b2, c2, d2;                      /* Temporary variables to store real and imaginary values */
  float32_t acc1, acc2, acc3, acc4;


  /* loop Unrolling */
  blkCnt = numSamples >> 2U;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	647b      	str	r3, [r7, #68]	; 0x44

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8000e46:	e0fa      	b.n	800103e <arm_cmplx_mult_cmplx_f32+0x20c>
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA;                /* A[2 * i] */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	643b      	str	r3, [r7, #64]	; 0x40
    c1 = *pSrcB;                /* B[2 * i] */
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	63bb      	str	r3, [r7, #56]	; 0x38

    b1 = *(pSrcA + 1);          /* A[2 * i + 1] */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	63fb      	str	r3, [r7, #60]	; 0x3c
    acc1 = a1 * c1;             /* acc1 = A[2 * i] * B[2 * i] */
 8000e5a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000e5e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e66:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    a2 = *(pSrcA + 2);          /* A[2 * i + 2] */
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    acc2 = (b1 * c1);           /* acc2 = A[2 * i + 1] * B[2 * i] */
 8000e70:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000e74:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e7c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    d1 = *(pSrcB + 1);          /* B[2 * i + 1] */
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
    c2 = *(pSrcB + 2);          /* B[2 * i + 2] */
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    acc1 -= b1 * d1;            /* acc1 =      A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1] */
 8000e8c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000e90:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e98:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000e9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ea0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    d2 = *(pSrcB + 3);          /* B[2 * i + 3] */
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	623b      	str	r3, [r7, #32]
    acc3 = a2 * c2;             /* acc3 =       A[2 * i + 2] * B[2 * i + 2] */
 8000eaa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000eae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb6:	edc7 7a07 	vstr	s15, [r7, #28]

    b2 = *(pSrcA + 3);          /* A[2 * i + 3] */
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	61bb      	str	r3, [r7, #24]
    acc2 += (a1 * d1);          /* acc2 =      A[2 * i + 1] * B[2 * i] + A[2 * i] * B[2 * i + 1] */
 8000ec0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000ec4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ecc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    a1 = *(pSrcA + 4);          /* A[2 * i + 4] */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	643b      	str	r3, [r7, #64]	; 0x40
    acc4 = (a2 * d2);           /* acc4 =   A[2 * i + 2] * B[2 * i + 3] */
 8000ede:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000ee2:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eea:	edc7 7a05 	vstr	s15, [r7, #20]

    c1 = *(pSrcB + 4);          /* B[2 * i + 4] */
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	63bb      	str	r3, [r7, #56]	; 0x38
    acc3 -= (b2 * d2);          /* acc3 =       A[2 * i + 2] * B[2 * i + 2] - A[2 * i + 3] * B[2 * i + 3] */
 8000ef4:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ef8:	edd7 7a08 	vldr	s15, [r7, #32]
 8000efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f00:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f08:	edc7 7a07 	vstr	s15, [r7, #28]
    *pDst = acc1;               /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1] */
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f10:	601a      	str	r2, [r3, #0]

    b1 = *(pSrcA + 5);          /* A[2 * i + 5] */
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	63fb      	str	r3, [r7, #60]	; 0x3c
    acc4 += b2 * c2;            /* acc4 =   A[2 * i + 2] * B[2 * i + 3] + A[2 * i + 3] * B[2 * i + 2] */
 8000f18:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f1c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f24:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f2c:	edc7 7a05 	vstr	s15, [r7, #20]

    *(pDst + 1) = acc2;         /* C[2 * i + 1] = A[2 * i + 1] * B[2 * i] + A[2 * i] * B[2 * i + 1]  */
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3304      	adds	r3, #4
 8000f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f36:	601a      	str	r2, [r3, #0]
    acc1 = (a1 * c1);
 8000f38:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000f3c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f44:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    d1 = *(pSrcB + 5);
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	637b      	str	r3, [r7, #52]	; 0x34
    acc2 = (b1 * c1);
 8000f4e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000f52:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f5a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    *(pDst + 2) = acc3;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3308      	adds	r3, #8
 8000f62:	69fa      	ldr	r2, [r7, #28]
 8000f64:	601a      	str	r2, [r3, #0]
    *(pDst + 3) = acc4;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	330c      	adds	r3, #12
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	601a      	str	r2, [r3, #0]

    a2 = *(pSrcA + 6);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    acc1 -= (b1 * d1);
 8000f74:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000f78:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f80:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f88:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    c2 = *(pSrcB + 6);
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
    acc2 += (a1 * d1);
 8000f92:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000f96:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f9e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fa6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    b2 = *(pSrcA + 7);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	61bb      	str	r3, [r7, #24]
    acc3 = (a2 * c2);
 8000fb0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000fb4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fbc:	edc7 7a07 	vstr	s15, [r7, #28]

    d2 = *(pSrcB + 7);
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	623b      	str	r3, [r7, #32]
    acc4 = (b2 * c2);
 8000fc6:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd2:	edc7 7a05 	vstr	s15, [r7, #20]

    *(pDst + 4) = acc1;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3310      	adds	r3, #16
 8000fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fdc:	601a      	str	r2, [r3, #0]
    pSrcA += 8U;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	3320      	adds	r3, #32
 8000fe2:	60fb      	str	r3, [r7, #12]

    acc3 -= (b2 * d2);
 8000fe4:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fe8:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff0:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff8:	edc7 7a07 	vstr	s15, [r7, #28]
    acc4 += (a2 * d2);
 8000ffc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001000:	edd7 7a08 	vldr	s15, [r7, #32]
 8001004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001008:	ed97 7a05 	vldr	s14, [r7, #20]
 800100c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001010:	edc7 7a05 	vstr	s15, [r7, #20]

    *(pDst + 5) = acc2;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3314      	adds	r3, #20
 8001018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800101a:	601a      	str	r2, [r3, #0]
    pSrcB += 8U;
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	3320      	adds	r3, #32
 8001020:	60bb      	str	r3, [r7, #8]

    *(pDst + 6) = acc3;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3318      	adds	r3, #24
 8001026:	69fa      	ldr	r2, [r7, #28]
 8001028:	601a      	str	r2, [r3, #0]
    *(pDst + 7) = acc4;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	331c      	adds	r3, #28
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	601a      	str	r2, [r3, #0]

    pDst += 8U;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3320      	adds	r3, #32
 8001036:	607b      	str	r3, [r7, #4]

    /* Decrement the numSamples loop counter */
    blkCnt--;
 8001038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800103a:	3b01      	subs	r3, #1
 800103c:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 800103e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001040:	2b00      	cmp	r3, #0
 8001042:	f47f af01 	bne.w	8000e48 <arm_cmplx_mult_cmplx_f32+0x16>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4U;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	647b      	str	r3, [r7, #68]	; 0x44
  /* Run the below code for Cortex-M0 */
  blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 800104e:	e03c      	b.n	80010ca <arm_cmplx_mult_cmplx_f32+0x298>
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA++;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	1d1a      	adds	r2, r3, #4
 8001054:	60fa      	str	r2, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	643b      	str	r3, [r7, #64]	; 0x40
    b1 = *pSrcA++;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	1d1a      	adds	r2, r3, #4
 800105e:	60fa      	str	r2, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	63fb      	str	r3, [r7, #60]	; 0x3c
    c1 = *pSrcB++;
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	1d1a      	adds	r2, r3, #4
 8001068:	60ba      	str	r2, [r7, #8]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	63bb      	str	r3, [r7, #56]	; 0x38
    d1 = *pSrcB++;
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1d1a      	adds	r2, r3, #4
 8001072:	60ba      	str	r2, [r7, #8]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	637b      	str	r3, [r7, #52]	; 0x34

    /* store the result in the destination buffer. */
    *pDst++ = (a1 * c1) - (b1 * d1);
 8001078:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800107c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001080:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001084:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001088:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800108c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	1d1a      	adds	r2, r3, #4
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109a:	edc3 7a00 	vstr	s15, [r3]
    *pDst++ = (a1 * d1) + (b1 * c1);
 800109e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80010a2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80010a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010aa:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80010ae:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80010b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	1d1a      	adds	r2, r3, #4
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c0:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the numSamples loop counter */
    blkCnt--;
 80010c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010c6:	3b01      	subs	r3, #1
 80010c8:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 80010ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1bf      	bne.n	8001050 <arm_cmplx_mult_cmplx_f32+0x21e>
  }
}
 80010d0:	bf00      	nop
 80010d2:	374c      	adds	r7, #76	; 0x4c
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 80010dc:	b480      	push	{r7}
 80010de:	b08b      	sub	sp, #44	; 0x2c
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	603b      	str	r3, [r7, #0]

  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1d1a      	adds	r2, r3, #4
 80010f6:	60fa      	str	r2, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1U) >> 2U;
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	3b01      	subs	r3, #1
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	623b      	str	r3, [r7, #32]

  while (blkCnt > 0U)
 8001104:	e051      	b.n	80011aa <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1d1a      	adds	r2, r3, #4
 800110a:	60fa      	str	r2, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	617b      	str	r3, [r7, #20]
    maxVal2 = *pSrc++;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	1d1a      	adds	r2, r3, #4
 8001114:	60fa      	str	r2, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal1)
 800111a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800111e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001122:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112a:	d504      	bpl.n	8001136 <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1U;
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	3301      	adds	r3, #1
 8001134:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if (out < maxVal2)
 8001136:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800113a:	edd7 7a04 	vldr	s15, [r7, #16]
 800113e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001146:	d504      	bpl.n	8001152 <arm_max_f32+0x76>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2U;
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	3302      	adds	r3, #2
 8001150:	61fb      	str	r3, [r7, #28]
    }

    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	1d1a      	adds	r2, r3, #4
 8001156:	60fa      	str	r2, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	617b      	str	r3, [r7, #20]
    maxVal2 = *pSrc++;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	1d1a      	adds	r2, r3, #4
 8001160:	60fa      	str	r2, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal1)
 8001166:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800116a:	edd7 7a05 	vldr	s15, [r7, #20]
 800116e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001176:	d504      	bpl.n	8001182 <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3U;
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	3303      	adds	r3, #3
 8001180:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if (out < maxVal2)
 8001182:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001186:	edd7 7a04 	vldr	s15, [r7, #16]
 800118a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001192:	d504      	bpl.n	800119e <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4U;
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	3304      	adds	r3, #4
 800119c:	61fb      	str	r3, [r7, #28]
    }

    count += 4U;
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	3304      	adds	r3, #4
 80011a2:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 80011a4:	6a3b      	ldr	r3, [r7, #32]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 80011aa:	6a3b      	ldr	r3, [r7, #32]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1aa      	bne.n	8001106 <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1U) is not multiple of 4 */
  blkCnt = (blockSize - 1U) % 4U;
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 80011ba:	e016      	b.n	80011ea <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	1d1a      	adds	r2, r3, #4
 80011c0:	60fa      	str	r2, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if (out < maxVal1)
 80011c6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d6:	d505      	bpl.n	80011e4 <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	6a3b      	ldr	r3, [r7, #32]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	61fb      	str	r3, [r7, #28]
    }

    /* Decrement the loop counter */
    blkCnt--;
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1e5      	bne.n	80011bc <arm_max_f32+0xe0>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f4:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	601a      	str	r2, [r3, #0]
}
 80011fc:	bf00      	nop
 80011fe:	372c      	adds	r7, #44	; 0x2c
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <arm_mean_f32>:

void arm_mean_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8001208:	b480      	push	{r7}
 800120a:	b08b      	sub	sp, #44	; 0x2c
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8001214:	f04f 0300 	mov.w	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t in1, in2, in3, in4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	623b      	str	r3, [r7, #32]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8001220:	e036      	b.n	8001290 <arm_mean_f32+0x88>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    in1 = *pSrc++;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1d1a      	adds	r2, r3, #4
 8001226:	60fa      	str	r2, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	61fb      	str	r3, [r7, #28]
    in2 = *pSrc++;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	1d1a      	adds	r2, r3, #4
 8001230:	60fa      	str	r2, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	61bb      	str	r3, [r7, #24]
    in3 = *pSrc++;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1d1a      	adds	r2, r3, #4
 800123a:	60fa      	str	r2, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	617b      	str	r3, [r7, #20]
    in4 = *pSrc++;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	1d1a      	adds	r2, r3, #4
 8001244:	60fa      	str	r2, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	613b      	str	r3, [r7, #16]

    sum += in1;
 800124a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800124e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001256:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in2;
 800125a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800125e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001266:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in3;
 800126a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800126e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001276:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in4;
 800127a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800127e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001286:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	3b01      	subs	r3, #1
 800128e:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1c5      	bne.n	8001222 <arm_mean_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	623b      	str	r3, [r7, #32]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 800129e:	e00d      	b.n	80012bc <arm_mean_f32+0xb4>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	1d1a      	adds	r2, r3, #4
 80012a4:	60fa      	str	r2, [r7, #12]
 80012a6:	edd3 7a00 	vldr	s15, [r3]
 80012aa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80012ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1ee      	bne.n	80012a0 <arm_mean_f32+0x98>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store the result to the destination */
  *pResult = sum / (float32_t) blockSize;
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	ee07 3a90 	vmov	s15, r3
 80012c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012cc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80012d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	edc3 7a00 	vstr	s15, [r3]
}
 80012da:	bf00      	nop
 80012dc:	372c      	adds	r7, #44	; 0x2c
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <arm_min_f32>:
void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b08b      	sub	sp, #44	; 0x2c
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
 80012f2:	603b      	str	r3, [r7, #0]

  float32_t minVal1, minVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	1d1a      	adds	r2, r3, #4
 8001300:	60fa      	str	r2, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1U) >> 2U;
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	3b01      	subs	r3, #1
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	623b      	str	r3, [r7, #32]

  while (blkCnt > 0U)
 800130e:	e051      	b.n	80013b4 <arm_min_f32+0xce>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	1d1a      	adds	r2, r3, #4
 8001314:	60fa      	str	r2, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	617b      	str	r3, [r7, #20]
    minVal2 = *pSrc++;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1d1a      	adds	r2, r3, #4
 800131e:	60fa      	str	r2, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if (out > minVal1)
 8001324:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001328:	edd7 7a05 	vldr	s15, [r7, #20]
 800132c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001334:	dd04      	ble.n	8001340 <arm_min_f32+0x5a>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1U;
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	3301      	adds	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the minimum value */
    if (out > minVal2)
 8001340:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001344:	edd7 7a04 	vldr	s15, [r7, #16]
 8001348:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800134c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001350:	dd04      	ble.n	800135c <arm_min_f32+0x76>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2U;
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	3302      	adds	r3, #2
 800135a:	61fb      	str	r3, [r7, #28]
    }

    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	1d1a      	adds	r2, r3, #4
 8001360:	60fa      	str	r2, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	617b      	str	r3, [r7, #20]
    minVal2 = *pSrc++;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	1d1a      	adds	r2, r3, #4
 800136a:	60fa      	str	r2, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if (out > minVal1)
 8001370:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001374:	edd7 7a05 	vldr	s15, [r7, #20]
 8001378:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001380:	dd04      	ble.n	800138c <arm_min_f32+0xa6>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3U;
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	3303      	adds	r3, #3
 800138a:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the minimum value */
    if (out > minVal2)
 800138c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001390:	edd7 7a04 	vldr	s15, [r7, #16]
 8001394:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139c:	dd04      	ble.n	80013a8 <arm_min_f32+0xc2>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4U;
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	3304      	adds	r3, #4
 80013a6:	61fb      	str	r3, [r7, #28]
    }

    count += 4U;
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	3304      	adds	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1aa      	bne.n	8001310 <arm_min_f32+0x2a>
  }

  /* if (blockSize - 1U) is not multiple of 4 */
  blkCnt = (blockSize - 1U) % 4U;
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	3b01      	subs	r3, #1
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 80013c4:	e016      	b.n	80013f4 <arm_min_f32+0x10e>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	1d1a      	adds	r2, r3, #4
 80013ca:	60fa      	str	r2, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if (out > minVal1)
 80013d0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80013d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e0:	dd05      	ble.n	80013ee <arm_min_f32+0x108>
    {
      /* Update the minimum value and it's index */
      out = minVal1;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	61fb      	str	r3, [r7, #28]
    }

    /* Decrement the loop counter */
    blkCnt--;
 80013ee:	6a3b      	ldr	r3, [r7, #32]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1e5      	bne.n	80013c6 <arm_min_f32+0xe0>
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013fe:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	69fa      	ldr	r2, [r7, #28]
 8001404:	601a      	str	r2, [r3, #0]
}
 8001406:	bf00      	nop
 8001408:	372c      	adds	r7, #44	; 0x2c
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <arm_std_f32>:

void arm_std_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b08e      	sub	sp, #56	; 0x38
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
  float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	633b      	str	r3, [r7, #48]	; 0x30
#else
  float32_t squareOfSum;                         /* Square of Sum */
  float32_t var;                                 /* Temporary varaince storage */
#endif

  if (blockSize == 1U)
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d104      	bne.n	800143a <arm_std_f32+0x28>
  {
    *pResult = 0;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
    return;
 8001438:	e0e4      	b.n	8001604 <arm_std_f32+0x1f2>

#if defined (ARM_MATH_DSP)
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8001440:	e066      	b.n	8001510 <arm_std_f32+0xfe>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
    /* Compute Sum of squares of the input samples
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	1d1a      	adds	r2, r3, #4
 8001446:	60fa      	str	r2, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	61fb      	str	r3, [r7, #28]
    sum += in;
 800144c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001450:	edd7 7a07 	vldr	s15, [r7, #28]
 8001454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001458:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    sumOfSquares += in * in;
 800145c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001460:	edd7 7a07 	vldr	s15, [r7, #28]
 8001464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001468:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800146c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001470:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    in = *pSrc++;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1d1a      	adds	r2, r3, #4
 8001478:	60fa      	str	r2, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	61fb      	str	r3, [r7, #28]
    sum += in;
 800147e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001482:	edd7 7a07 	vldr	s15, [r7, #28]
 8001486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    sumOfSquares += in * in;
 800148e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001492:	edd7 7a07 	vldr	s15, [r7, #28]
 8001496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800149e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    in = *pSrc++;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	1d1a      	adds	r2, r3, #4
 80014aa:	60fa      	str	r2, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	61fb      	str	r3, [r7, #28]
    sum += in;
 80014b0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80014b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80014b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014bc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    sumOfSquares += in * in;
 80014c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80014c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014cc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80014d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    in = *pSrc++;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	1d1a      	adds	r2, r3, #4
 80014dc:	60fa      	str	r2, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61fb      	str	r3, [r7, #28]
    sum += in;
 80014e2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80014e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80014ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ee:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    sumOfSquares += in * in;
 80014f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80014f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80014fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014fe:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001506:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    /* Decrement the loop counter */
    blkCnt--;
 800150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150c:	3b01      	subs	r3, #1
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (blkCnt > 0U)
 8001510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001512:	2b00      	cmp	r3, #0
 8001514:	d195      	bne.n	8001442 <arm_std_f32+0x30>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c

  while (blkCnt > 0U)
 800151e:	e01b      	b.n	8001558 <arm_std_f32+0x146>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
    /* Compute Sum of squares of the input samples
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1d1a      	adds	r2, r3, #4
 8001524:	60fa      	str	r2, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	61fb      	str	r3, [r7, #28]
    sum += in;
 800152a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800152e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001536:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    sumOfSquares += in * in;
 800153a:	ed97 7a07 	vldr	s14, [r7, #28]
 800153e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001546:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800154a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    /* Decrement the loop counter */
    blkCnt--;
 8001552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001554:	3b01      	subs	r3, #1
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (blkCnt > 0U)
 8001558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1e0      	bne.n	8001520 <arm_std_f32+0x10e>
  }

  /* Compute Mean of squares of the input samples
   * and then store the result in a temporary variable, meanOfSquares. */
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	ee07 3a90 	vmov	s15, r3
 8001564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001568:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800156c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001570:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001578:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  /* Compute mean of all input values */
  mean = sum / (float32_t) blockSize;
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001586:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800158a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800158e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  /* Compute square of mean */
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8001592:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001596:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800159a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	ee07 3a90 	vmov	s15, r3
 80015a4:	eeb8 6a67 	vcvt.f32.u32	s12, s15
                                  ((float32_t) blockSize - 1.0f));
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015b6:	ee77 6ae6 	vsub.f32	s13, s15, s13
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 80015ba:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80015be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c2:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32((meanOfSquares - squareOfMean), pResult);
 80015c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80015ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80015ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d2:	edc7 7a06 	vstr	s15, [r7, #24]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 80015da:	edd7 7a06 	vldr	s15, [r7, #24]
 80015de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e6:	db09      	blt.n	80015fc <arm_std_f32+0x1ea>
      *pOut = __builtin_sqrtf(in);
 80015e8:	ed97 0a06 	vldr	s0, [r7, #24]
 80015ec:	f00c fd30 	bl	800e050 <sqrtf>
 80015f0:	eef0 7a40 	vmov.f32	s15, s0
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	edc3 7a00 	vstr	s15, [r3]
 80015fa:	e003      	b.n	8001604 <arm_std_f32+0x1f2>
      *pOut = 0.0f;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32(var, pResult);

#endif /* #if defined (ARM_MATH_DSP) */
}
 8001604:	3738      	adds	r7, #56	; 0x38
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <arm_copy_f32>:

void arm_copy_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize)
{
 800160a:	b480      	push	{r7}
 800160c:	b08b      	sub	sp, #44	; 0x2c
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 800161c:	e02a      	b.n	8001674 <arm_copy_f32+0x6a>
  {
    /* C = A */
    /* Copy and then store the results in the destination buffer */
    in1 = *pSrc++;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1d1a      	adds	r2, r3, #4
 8001622:	60fa      	str	r2, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	623b      	str	r3, [r7, #32]
    in2 = *pSrc++;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1d1a      	adds	r2, r3, #4
 800162c:	60fa      	str	r2, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	61fb      	str	r3, [r7, #28]
    in3 = *pSrc++;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1d1a      	adds	r2, r3, #4
 8001636:	60fa      	str	r2, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	61bb      	str	r3, [r7, #24]
    in4 = *pSrc++;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	1d1a      	adds	r2, r3, #4
 8001640:	60fa      	str	r2, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	617b      	str	r3, [r7, #20]

    *pDst++ = in1;
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1d1a      	adds	r2, r3, #4
 800164a:	60ba      	str	r2, [r7, #8]
 800164c:	6a3a      	ldr	r2, [r7, #32]
 800164e:	601a      	str	r2, [r3, #0]
    *pDst++ = in2;
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	1d1a      	adds	r2, r3, #4
 8001654:	60ba      	str	r2, [r7, #8]
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	601a      	str	r2, [r3, #0]
    *pDst++ = in3;
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1d1a      	adds	r2, r3, #4
 800165e:	60ba      	str	r2, [r7, #8]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	601a      	str	r2, [r3, #0]
    *pDst++ = in4;
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	1d1a      	adds	r2, r3, #4
 8001668:	60ba      	str	r2, [r7, #8]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	3b01      	subs	r3, #1
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1d1      	bne.n	800161e <arm_copy_f32+0x14>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8001682:	e00a      	b.n	800169a <arm_copy_f32+0x90>
  {
    /* C = A */
    /* Copy and then store the results in the destination buffer */
    *pDst++ = *pSrc++;
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	1d13      	adds	r3, r2, #4
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	1d19      	adds	r1, r3, #4
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	3b01      	subs	r3, #1
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f1      	bne.n	8001684 <arm_copy_f32+0x7a>
  }
}
 80016a0:	bf00      	nop
 80016a2:	372c      	adds	r7, #44	; 0x2c
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <arm_fill_f32>:

void arm_fill_f32(
  float32_t value,
  float32_t * pDst,
  uint32_t blockSize)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b08b      	sub	sp, #44	; 0x2c
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	ed87 0a03 	vstr	s0, [r7, #12]
 80016b6:	60b8      	str	r0, [r7, #8]
 80016b8:	6079      	str	r1, [r7, #4]
  uint32_t blkCnt;                               /* loop counter */

#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1 = value;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	623b      	str	r3, [r7, #32]
  float32_t in2 = value;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	61fb      	str	r3, [r7, #28]
  float32_t in3 = value;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	61bb      	str	r3, [r7, #24]
  float32_t in4 = value;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	617b      	str	r3, [r7, #20]

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 80016d0:	e016      	b.n	8001700 <arm_fill_f32+0x54>
  {
    /* C = value */
    /* Fill the value in the destination buffer */
    *pDst++ = in1;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	1d1a      	adds	r2, r3, #4
 80016d6:	60ba      	str	r2, [r7, #8]
 80016d8:	6a3a      	ldr	r2, [r7, #32]
 80016da:	601a      	str	r2, [r3, #0]
    *pDst++ = in2;
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	1d1a      	adds	r2, r3, #4
 80016e0:	60ba      	str	r2, [r7, #8]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	601a      	str	r2, [r3, #0]
    *pDst++ = in3;
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	1d1a      	adds	r2, r3, #4
 80016ea:	60ba      	str	r2, [r7, #8]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	601a      	str	r2, [r3, #0]
    *pDst++ = in4;
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	1d1a      	adds	r2, r3, #4
 80016f4:	60ba      	str	r2, [r7, #8]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	3b01      	subs	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1e5      	bne.n	80016d2 <arm_fill_f32+0x26>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 800170e:	e007      	b.n	8001720 <arm_fill_f32+0x74>
  {
    /* C = value */
    /* Fill the value in the destination buffer */
    *pDst++ = value;
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	1d1a      	adds	r2, r3, #4
 8001714:	60ba      	str	r2, [r7, #8]
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	3b01      	subs	r3, #1
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f4      	bne.n	8001710 <arm_fill_f32+0x64>
  }
}
 8001726:	bf00      	nop
 8001728:	372c      	adds	r7, #44	; 0x2c
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <arm_cfft_radix8by2_f32>:
* \endcode
*
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b0a0      	sub	sp, #128	; 0x80
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8001742:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	4413      	add	r3, r2
 800174a:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8001756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001758:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 800175a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800175c:	085b      	lsrs	r3, r3, #1
 800175e:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8001760:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	4413      	add	r3, r2
 8001768:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 800176a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001770:	4413      	add	r3, r2
 8001772:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- )
 8001774:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	66fb      	str	r3, [r7, #108]	; 0x6c
 800177a:	e1b6      	b.n	8001aea <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 8001794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 800179a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 80017a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 80017a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 80017ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 80017b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 80017b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 80017be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 80017c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 80017ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 80017d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 80017d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 80017dc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80017e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	1d1a      	adds	r2, r3, #4
 80017e8:	603a      	str	r2, [r7, #0]
 80017ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ee:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 80017f2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80017f6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	1d1a      	adds	r2, r3, #4
 80017fe:	603a      	str	r2, [r7, #0]
 8001800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001804:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8001808:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800180c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	1d1a      	adds	r2, r3, #4
 8001814:	603a      	str	r2, [r7, #0]
 8001816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800181a:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 800181e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001822:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	1d1a      	adds	r2, r3, #4
 800182a:	603a      	str	r2, [r7, #0]
 800182c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001830:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 8001834:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001838:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800183c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001840:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 8001844:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001848:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800184c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001850:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 8001854:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001858:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800185c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001860:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 8001864:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001868:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800186c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001870:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 8001874:	ed97 7a06 	vldr	s14, [r7, #24]
 8001878:	edd7 7a02 	vldr	s15, [r7, #8]
 800187c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800187e:	1d1a      	adds	r2, r3, #4
 8001880:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001886:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 800188a:	ed97 7a07 	vldr	s14, [r7, #28]
 800188e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001892:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001894:	1d1a      	adds	r2, r3, #4
 8001896:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189c:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 80018a0:	ed97 7a08 	vldr	s14, [r7, #32]
 80018a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018aa:	1d1a      	adds	r2, r3, #4
 80018ac:	67fa      	str	r2, [r7, #124]	; 0x7c
 80018ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b2:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 80018b6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80018ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80018be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018c0:	1d1a      	adds	r2, r3, #4
 80018c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80018c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c8:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 80018cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80018d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80018d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d8:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 80018dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80018e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80018e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e8:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 80018ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80018f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80018f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f8:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 80018fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001900:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001908:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 800190c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800190e:	1d1a      	adds	r2, r3, #4
 8001910:	673a      	str	r2, [r7, #112]	; 0x70
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8001916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001918:	1d1a      	adds	r2, r3, #4
 800191a:	673a      	str	r2, [r7, #112]	; 0x70
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 8001920:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001924:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800192c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 8001930:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001934:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 8001940:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001944:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 8001950:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001954:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800195c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 8001960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001962:	1d1a      	adds	r2, r3, #4
 8001964:	677a      	str	r2, [r7, #116]	; 0x74
 8001966:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800196a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800196e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001972:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8001976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001978:	1d1a      	adds	r2, r3, #4
 800197a:	677a      	str	r2, [r7, #116]	; 0x74
 800197c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001980:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001984:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001988:	edc3 7a00 	vstr	s15, [r3]

        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 800198c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001990:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001998:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 800199c:	edd7 7a03 	vldr	s15, [r7, #12]
 80019a0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80019a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 80019ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80019b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 80019bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80019c0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80019c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 80019cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019ce:	1d1a      	adds	r2, r3, #4
 80019d0:	67ba      	str	r2, [r7, #120]	; 0x78
 80019d2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80019d6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80019da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019de:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80019e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019e4:	1d1a      	adds	r2, r3, #4
 80019e6:	67ba      	str	r2, [r7, #120]	; 0x78
 80019e8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80019ec:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f4:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 80019f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019fa:	1d1a      	adds	r2, r3, #4
 80019fc:	673a      	str	r2, [r7, #112]	; 0x70
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8001a02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a04:	1d1a      	adds	r2, r3, #4
 8001a06:	673a      	str	r2, [r7, #112]	; 0x70
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	65bb      	str	r3, [r7, #88]	; 0x58

        m0 = t2[2] * twR;
 8001a0c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a10:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a18:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 8001a1c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a20:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a28:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 8001a2c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a30:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a38:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 8001a3c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a40:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a48:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *p2++ = m0 + m1;
 8001a4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a4e:	1d1a      	adds	r2, r3, #4
 8001a50:	677a      	str	r2, [r7, #116]	; 0x74
 8001a52:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001a56:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5e:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8001a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a64:	1d1a      	adds	r2, r3, #4
 8001a66:	677a      	str	r2, [r7, #116]	; 0x74
 8001a68:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001a6c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a74:	edc3 7a00 	vstr	s15, [r3]

        m0 = t4[2] * twI;
 8001a78:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a7c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a84:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 8001a88:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a8c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a94:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 8001a98:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a9c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 8001aa8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aac:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 8001ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aba:	1d1a      	adds	r2, r3, #4
 8001abc:	67ba      	str	r2, [r7, #120]	; 0x78
 8001abe:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001ac2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aca:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8001ace:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ad0:	1d1a      	adds	r2, r3, #4
 8001ad2:	67ba      	str	r2, [r7, #120]	; 0x78
 8001ad4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001ad8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae0:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- )
 8001ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f47f ae45 	bne.w	800177c <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8001af2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001af4:	b299      	uxth	r1, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	2302      	movs	r3, #2
 8001afc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001afe:	f000 fedb 	bl	80028b8 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8001b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b04:	b299      	uxth	r1, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001b0e:	f000 fed3 	bl	80028b8 <arm_radix8_butterfly_f32>
}
 8001b12:	bf00      	nop
 8001b14:	3780      	adds	r7, #128	; 0x80
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b0ac      	sub	sp, #176	; 0xb0
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	085b      	lsrs	r3, r3, #1
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8001b30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	4413      	add	r3, r2
 8001b3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8001b3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001b48:	4413      	add	r3, r2
 8001b4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8001b4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001b58:	4413      	add	r3, r2
 8001b5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8001b62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b66:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8001b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b6c:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8001b6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b72:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 8001b74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b78:	3b04      	subs	r3, #4
 8001b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8001b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b82:	3b04      	subs	r3, #4
 8001b84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8001b88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b8c:	3b04      	subs	r3, #4
 8001b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8001b92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001baa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001bb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8001bba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bbe:	085b      	lsrs	r3, r3, #1
 8001bc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8001bc8:	2304      	movs	r3, #4
 8001bca:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8001bcc:	2306      	movs	r3, #6
 8001bce:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	ed93 7a00 	vldr	s14, [r3]
 8001bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bda:	edd3 7a00 	vldr	s15, [r3]
 8001bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	ed93 7a00 	vldr	s14, [r3]
 8001bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bf0:	edd3 7a00 	vldr	s15, [r3]
 8001bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	3304      	adds	r3, #4
 8001c00:	ed93 7a00 	vldr	s14, [r3]
 8001c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c08:	3304      	adds	r3, #4
 8001c0a:	edd3 7a00 	vldr	s15, [r3]
 8001c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c12:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	ed93 7a00 	vldr	s14, [r3]
 8001c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c22:	3304      	adds	r3, #4
 8001c24:	edd3 7a00 	vldr	s15, [r3]
 8001c28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c2c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001c30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c34:	3304      	adds	r3, #4
 8001c36:	ed93 7a00 	vldr	s14, [r3]
 8001c3a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c46:	3304      	adds	r3, #4
 8001c48:	edd3 7a00 	vldr	s15, [r3]
 8001c4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c50:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001c54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c58:	edd3 7a00 	vldr	s15, [r3]
 8001c5c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001c60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c68:	edd3 7a00 	vldr	s15, [r3]
 8001c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c70:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001c74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001c80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c88:	edd3 7a00 	vldr	s15, [r3]
 8001c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c90:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001c94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c98:	3304      	adds	r3, #4
 8001c9a:	edd3 7a00 	vldr	s15, [r3]
 8001c9e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001ca2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ca6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001caa:	3304      	adds	r3, #4
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb4:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001cb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	edd3 7a00 	vldr	s15, [r3]
 8001cc2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001cc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cce:	3304      	adds	r3, #4
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd8:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001cdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ce0:	ed93 7a00 	vldr	s14, [r3]
 8001ce4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ce8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf8:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001cfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d00:	ed93 7a00 	vldr	s14, [r3]
 8001d04:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	1d1a      	adds	r2, r3, #4
 8001d18:	603a      	str	r2, [r7, #0]
 8001d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d1e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001d22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d26:	3304      	adds	r3, #4
 8001d28:	ed93 7a00 	vldr	s14, [r3]
 8001d2c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001d30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d38:	3304      	adds	r3, #4
 8001d3a:	edd3 7a00 	vldr	s15, [r3]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	1d1a      	adds	r2, r3, #4
 8001d42:	603a      	str	r2, [r7, #0]
 8001d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d48:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8001d4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d50:	1d1a      	adds	r2, r3, #4
 8001d52:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d58:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8001d5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d5e:	1d1a      	adds	r2, r3, #4
 8001d60:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d66:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8001d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d6c:	1d1a      	adds	r2, r3, #4
 8001d6e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001d72:	69fa      	ldr	r2, [r7, #28]
 8001d74:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8001d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d7a:	1d1a      	adds	r2, r3, #4
 8001d7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001d80:	6a3a      	ldr	r2, [r7, #32]
 8001d82:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8001d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d88:	1d1a      	adds	r2, r3, #4
 8001d8a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8001d92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d96:	1d1a      	adds	r2, r3, #4
 8001d98:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8001da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001da8:	4413      	add	r3, r2
 8001daa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8001dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001db6:	4413      	add	r3, r2
 8001db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8001dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8001dca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dce:	3b02      	subs	r3, #2
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001dd6:	e31a      	b.n	800240e <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	ed93 7a00 	vldr	s14, [r3]
 8001dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dea:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	ed93 7a00 	vldr	s14, [r3]
 8001df4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001df8:	edd3 7a00 	vldr	s15, [r3]
 8001dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e00:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	3304      	adds	r3, #4
 8001e08:	ed93 7a00 	vldr	s14, [r3]
 8001e0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e10:	3304      	adds	r3, #4
 8001e12:	edd3 7a00 	vldr	s15, [r3]
 8001e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e1a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	3304      	adds	r3, #4
 8001e22:	ed93 7a00 	vldr	s14, [r3]
 8001e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e34:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001e38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	ed93 7a00 	vldr	s14, [r3]
 8001e42:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e4e:	3304      	adds	r3, #4
 8001e50:	edd3 7a00 	vldr	s15, [r3]
 8001e54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e58:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001e5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e60:	edd3 7a00 	vldr	s15, [r3]
 8001e64:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001e68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e78:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001e7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001e88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e90:	edd3 7a00 	vldr	s15, [r3]
 8001e94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e98:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001e9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	edd3 7a00 	vldr	s15, [r3]
 8001ea6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001eaa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001eae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ebc:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001ec0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
 8001eca:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001ece:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ed2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee0:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001ee4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ee8:	ed93 7a00 	vldr	s14, [r3]
 8001eec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ef0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ef8:	edd3 7a00 	vldr	s15, [r3]
 8001efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f00:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001f04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f08:	ed93 7a00 	vldr	s14, [r3]
 8001f0c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001f10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f18:	edd3 7a00 	vldr	s15, [r3]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	1d1a      	adds	r2, r3, #4
 8001f20:	603a      	str	r2, [r7, #0]
 8001f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f26:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001f2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f2e:	3304      	adds	r3, #4
 8001f30:	ed93 7a00 	vldr	s14, [r3]
 8001f34:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001f38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f40:	3304      	adds	r3, #4
 8001f42:	edd3 7a00 	vldr	s15, [r3]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	1d1a      	adds	r2, r3, #4
 8001f4a:	603a      	str	r2, [r7, #0]
 8001f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f50:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8001f54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f58:	3b04      	subs	r3, #4
 8001f5a:	ed93 7a00 	vldr	s14, [r3]
 8001f5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f62:	3b04      	subs	r3, #4
 8001f64:	edd3 7a00 	vldr	s15, [r3]
 8001f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8001f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f74:	3b04      	subs	r3, #4
 8001f76:	ed93 7a00 	vldr	s14, [r3]
 8001f7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	edd3 7a00 	vldr	s15, [r3]
 8001f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f88:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8001f8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f90:	ed93 7a00 	vldr	s14, [r3]
 8001f94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f98:	edd3 7a00 	vldr	s15, [r3]
 8001f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8001fa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fa8:	ed93 7a00 	vldr	s14, [r3]
 8001fac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fb0:	edd3 7a00 	vldr	s15, [r3]
 8001fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8001fbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fc0:	ed93 7a00 	vldr	s14, [r3]
 8001fc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001fc8:	edd3 7a00 	vldr	s15, [r3]
 8001fcc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fd0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8001fdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fe0:	ed93 7a00 	vldr	s14, [r3]
 8001fe4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fe8:	edd3 7a00 	vldr	s15, [r3]
 8001fec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ff0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ff4:	3b04      	subs	r3, #4
 8001ff6:	edd3 7a00 	vldr	s15, [r3]
 8001ffa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002002:	3b04      	subs	r3, #4
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800200c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8002010:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002014:	3b04      	subs	r3, #4
 8002016:	edd3 7a00 	vldr	s15, [r3]
 800201a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800201e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002026:	3b04      	subs	r3, #4
 8002028:	edd3 7a00 	vldr	s15, [r3]
 800202c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002030:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8002034:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002038:	edd3 7a00 	vldr	s15, [r3]
 800203c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002040:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002044:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002050:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8002054:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002058:	ed93 7a00 	vldr	s14, [r3]
 800205c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002060:	edd3 7a00 	vldr	s15, [r3]
 8002064:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002068:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800206c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002070:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8002074:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002078:	3b04      	subs	r3, #4
 800207a:	ed93 7a00 	vldr	s14, [r3]
 800207e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002082:	3b04      	subs	r3, #4
 8002084:	edd3 7a00 	vldr	s15, [r3]
 8002088:	ee37 7a67 	vsub.f32	s14, s14, s15
 800208c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002094:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8002098:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800209c:	ed93 7a00 	vldr	s14, [r3]
 80020a0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80020a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020ac:	edd3 7a00 	vldr	s15, [r3]
 80020b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020b4:	1f1a      	subs	r2, r3, #4
 80020b6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80020ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020be:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80020c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020c6:	3b04      	subs	r3, #4
 80020c8:	ed93 7a00 	vldr	s14, [r3]
 80020cc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80020d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020d8:	3b04      	subs	r3, #4
 80020da:	edd3 7a00 	vldr	s15, [r3]
 80020de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020e2:	1f1a      	subs	r2, r3, #4
 80020e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80020e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ec:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 80020f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020f4:	1d1a      	adds	r2, r3, #4
 80020f6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 80020fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002102:	1d1a      	adds	r2, r3, #4
 8002104:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)

        // Top
        m0 = t2[0] * twR;
 800210c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002110:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002118:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 800211c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002120:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002128:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 800212c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002130:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002138:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 800213c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002140:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002148:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p2++ = m0 + m1;
 800214c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002150:	1d1a      	adds	r2, r3, #4
 8002152:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002156:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800215a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800215e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002162:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8002166:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800216a:	1d1a      	adds	r2, r3, #4
 800216c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002170:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002174:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217c:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8002180:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002184:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8002190:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002194:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 80021a0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80021a4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80021a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ac:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 80021b0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80021b4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80021b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021bc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd2-- = m0 - m1;
 80021c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021c4:	1f1a      	subs	r2, r3, #4
 80021c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80021ca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80021ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d6:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 80021da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021de:	1f1a      	subs	r2, r3, #4
 80021e0:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80021e4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80021e8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80021ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f0:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 80021f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 80021fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8002204:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800220c:	4413      	add	r3, r2
 800220e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8002212:	edd7 7a07 	vldr	s15, [r7, #28]
 8002216:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800221a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8002222:	edd7 7a08 	vldr	s15, [r7, #32]
 8002226:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800222a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800222e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8002232:	edd7 7a08 	vldr	s15, [r7, #32]
 8002236:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800223a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8002242:	edd7 7a07 	vldr	s15, [r7, #28]
 8002246:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800224a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p3++ = m0 + m1;
 8002252:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002256:	1d1a      	adds	r2, r3, #4
 8002258:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800225c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002260:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002268:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 800226c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002270:	1d1a      	adds	r2, r3, #4
 8002272:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002276:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800227a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800227e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002282:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8002286:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800228a:	eef1 7a67 	vneg.f32	s15, s15
 800228e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002296:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 800229a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800229e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80022a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 80022aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80022ae:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80022b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 80022ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80022be:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80022c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd3-- = m0 - m1;
 80022ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022ce:	1f1a      	subs	r2, r3, #4
 80022d0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80022d4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80022d8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80022dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e0:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 80022e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022e8:	1f1a      	subs	r2, r3, #4
 80022ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80022ee:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80022f2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80022f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022fa:	edc3 7a00 	vstr	s15, [r3]

        // COL 4
        twR = tw4[0];
 80022fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8002306:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 800230e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002316:	4413      	add	r3, r2
 8002318:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 800231c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002320:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002328:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 800232c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002330:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002338:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 800233c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002340:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002348:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 800234c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002350:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002358:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p4++ = m0 + m1;
 800235c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002360:	1d1a      	adds	r2, r3, #4
 8002362:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002366:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800236a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800236e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002372:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8002376:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800237a:	1d1a      	adds	r2, r3, #4
 800237c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002380:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002384:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800238c:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8002390:	edd7 7a06 	vldr	s15, [r7, #24]
 8002394:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 80023a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80023a4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80023a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 80023b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80023b4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80023b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023bc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 80023c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80023c4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80023c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023cc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd4-- = m0 - m1;
 80023d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023d4:	1f1a      	subs	r2, r3, #4
 80023d6:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80023da:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80023de:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80023e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023e6:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 80023ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023ee:	1f1a      	subs	r2, r3, #4
 80023f0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80023f4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80023f8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80023fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002400:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8002404:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002408:	3b01      	subs	r3, #1
 800240a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800240e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002412:	2b00      	cmp	r3, #0
 8002414:	f47f ace0 	bne.w	8001dd8 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	ed93 7a00 	vldr	s14, [r3]
 800241e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800242a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	ed93 7a00 	vldr	s14, [r3]
 8002434:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002438:	edd3 7a00 	vldr	s15, [r3]
 800243c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002440:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	3304      	adds	r3, #4
 8002448:	ed93 7a00 	vldr	s14, [r3]
 800244c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002450:	3304      	adds	r3, #4
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	3304      	adds	r3, #4
 8002462:	ed93 7a00 	vldr	s14, [r3]
 8002466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800246a:	3304      	adds	r3, #4
 800246c:	edd3 7a00 	vldr	s15, [r3]
 8002470:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002474:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002478:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800247c:	3304      	adds	r3, #4
 800247e:	ed93 7a00 	vldr	s14, [r3]
 8002482:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002486:	ee37 7a27 	vadd.f32	s14, s14, s15
 800248a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800248e:	3304      	adds	r3, #4
 8002490:	edd3 7a00 	vldr	s15, [r3]
 8002494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002498:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800249c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80024a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024b0:	edd3 7a00 	vldr	s15, [r3]
 80024b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80024bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024c0:	edd3 7a00 	vldr	s15, [r3]
 80024c4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80024c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024d0:	edd3 7a00 	vldr	s15, [r3]
 80024d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024d8:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80024dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024e0:	3304      	adds	r3, #4
 80024e2:	edd3 7a00 	vldr	s15, [r3]
 80024e6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80024ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024f2:	3304      	adds	r3, #4
 80024f4:	edd3 7a00 	vldr	s15, [r3]
 80024f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024fc:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002500:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002504:	3304      	adds	r3, #4
 8002506:	edd3 7a00 	vldr	s15, [r3]
 800250a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800250e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002512:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002516:	3304      	adds	r3, #4
 8002518:	edd3 7a00 	vldr	s15, [r3]
 800251c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002520:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002524:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002528:	ed93 7a00 	vldr	s14, [r3]
 800252c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002530:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002534:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002538:	edd3 7a00 	vldr	s15, [r3]
 800253c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002540:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002544:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002548:	ed93 7a00 	vldr	s14, [r3]
 800254c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002550:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002554:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002558:	edd3 7a00 	vldr	s15, [r3]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	1d1a      	adds	r2, r3, #4
 8002560:	603a      	str	r2, [r7, #0]
 8002562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002566:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800256a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800256e:	3304      	adds	r3, #4
 8002570:	ed93 7a00 	vldr	s14, [r3]
 8002574:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002578:	ee37 7a27 	vadd.f32	s14, s14, s15
 800257c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002580:	3304      	adds	r3, #4
 8002582:	edd3 7a00 	vldr	s15, [r3]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	1d1a      	adds	r2, r3, #4
 800258a:	603a      	str	r2, [r7, #0]
 800258c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002590:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8002594:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 800259c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 80025a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80025a8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80025ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 80025b4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025b8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80025bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 80025c4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025c8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80025cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 80025d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80025d8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80025dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 80025e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025e8:	1d1a      	adds	r2, r3, #4
 80025ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80025ee:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80025f2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80025f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fa:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80025fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002602:	1d1a      	adds	r2, r3, #4
 8002604:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002608:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800260c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002610:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002614:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8002618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8002620:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8002628:	edd7 7a07 	vldr	s15, [r7, #28]
 800262c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002634:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8002638:	edd7 7a08 	vldr	s15, [r7, #32]
 800263c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002644:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8002648:	edd7 7a08 	vldr	s15, [r7, #32]
 800264c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002654:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8002658:	edd7 7a07 	vldr	s15, [r7, #28]
 800265c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002664:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8002668:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800266c:	1d1a      	adds	r2, r3, #4
 800266e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002672:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002676:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800267a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267e:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8002682:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002686:	1d1a      	adds	r2, r3, #4
 8002688:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800268c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002690:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002698:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 800269c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 80026a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 80026ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80026b0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80026b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 80026bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80026c0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80026c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 80026cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80026d0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80026d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 80026dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80026e0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80026e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 80026ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026f0:	1d1a      	adds	r2, r3, #4
 80026f2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80026f6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80026fa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80026fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002702:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8002706:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800270a:	1d1a      	adds	r2, r3, #4
 800270c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002710:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002714:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800271c:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8002720:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002724:	b299      	uxth	r1, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	2304      	movs	r3, #4
 800272c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800272e:	f000 f8c3 	bl	80028b8 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8002732:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002736:	b299      	uxth	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	2304      	movs	r3, #4
 800273e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002740:	f000 f8ba 	bl	80028b8 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8002744:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002748:	b299      	uxth	r1, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	2304      	movs	r3, #4
 8002750:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002752:	f000 f8b1 	bl	80028b8 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8002756:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800275a:	b299      	uxth	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	2304      	movs	r3, #4
 8002762:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002764:	f000 f8a8 	bl	80028b8 <arm_radix8_butterfly_f32>
}
 8002768:	bf00      	nop
 800276a:	37b0      	adds	r7, #176	; 0xb0
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <arm_cfft_f32>:
void arm_cfft_f32(
    const arm_cfft_instance_f32 * S,
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	4611      	mov	r1, r2
 800277c:	461a      	mov	r2, r3
 800277e:	460b      	mov	r3, r1
 8002780:	71fb      	strb	r3, [r7, #7]
 8002782:	4613      	mov	r3, r2
 8002784:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if (ifftFlag == 1U)
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d117      	bne.n	80027c2 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	3304      	adds	r3, #4
 8002796:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
 800279c:	e00d      	b.n	80027ba <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	edd3 7a00 	vldr	s15, [r3]
 80027a4:	eef1 7a67 	vneg.f32	s15, s15
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	3308      	adds	r3, #8
 80027b2:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	3301      	adds	r3, #1
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d3ed      	bcc.n	800279e <arm_cfft_f32+0x2e>
        }
    }

    switch (L)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c8:	d024      	beq.n	8002814 <arm_cfft_f32+0xa4>
 80027ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ce:	d80b      	bhi.n	80027e8 <arm_cfft_f32+0x78>
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d01f      	beq.n	8002814 <arm_cfft_f32+0xa4>
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d802      	bhi.n	80027de <arm_cfft_f32+0x6e>
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d016      	beq.n	800280a <arm_cfft_f32+0x9a>
 80027dc:	e028      	b.n	8002830 <arm_cfft_f32+0xc0>
 80027de:	2b40      	cmp	r3, #64	; 0x40
 80027e0:	d01d      	beq.n	800281e <arm_cfft_f32+0xae>
 80027e2:	2b80      	cmp	r3, #128	; 0x80
 80027e4:	d011      	beq.n	800280a <arm_cfft_f32+0x9a>
 80027e6:	e023      	b.n	8002830 <arm_cfft_f32+0xc0>
 80027e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ec:	d00d      	beq.n	800280a <arm_cfft_f32+0x9a>
 80027ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f2:	d803      	bhi.n	80027fc <arm_cfft_f32+0x8c>
 80027f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027f8:	d011      	beq.n	800281e <arm_cfft_f32+0xae>
 80027fa:	e019      	b.n	8002830 <arm_cfft_f32+0xc0>
 80027fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002800:	d008      	beq.n	8002814 <arm_cfft_f32+0xa4>
 8002802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002806:	d00a      	beq.n	800281e <arm_cfft_f32+0xae>
 8002808:	e012      	b.n	8002830 <arm_cfft_f32+0xc0>
    {
    case 16:
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f7fe ff90 	bl	8001732 <arm_cfft_radix8by2_f32>
        break;
 8002812:	e00d      	b.n	8002830 <arm_cfft_f32+0xc0>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7ff f97f 	bl	8001b1a <arm_cfft_radix8by4_f32>
        break;
 800281c:	e008      	b.n	8002830 <arm_cfft_f32+0xc0>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	b299      	uxth	r1, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	2301      	movs	r3, #1
 8002828:	68b8      	ldr	r0, [r7, #8]
 800282a:	f000 f845 	bl	80028b8 <arm_radix8_butterfly_f32>
        break;
 800282e:	bf00      	nop
    }

    if ( bitReverseFlag )
 8002830:	79bb      	ldrb	r3, [r7, #6]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d007      	beq.n	8002846 <arm_cfft_f32+0xd6>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8999      	ldrh	r1, [r3, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	461a      	mov	r2, r3
 8002840:	68b8      	ldr	r0, [r7, #8]
 8002842:	f7fd fd49 	bl	80002d8 <arm_bitreversal_32>

    if (ifftFlag == 1U)
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d130      	bne.n	80028ae <arm_cfft_f32+0x13e>
    {
        invL = 1.0f/(float32_t)L;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	ee07 3a90 	vmov	s15, r3
 8002852:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800285a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800285e:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	e01c      	b.n	80028a6 <arm_cfft_f32+0x136>
        {
            *pSrc++ *=   invL ;
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	1d1a      	adds	r2, r3, #4
 8002870:	61ba      	str	r2, [r7, #24]
 8002872:	ed93 7a00 	vldr	s14, [r3]
 8002876:	edd7 7a04 	vldr	s15, [r7, #16]
 800287a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287e:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	edd3 7a00 	vldr	s15, [r3]
 8002888:	eeb1 7a67 	vneg.f32	s14, s15
 800288c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	3304      	adds	r3, #4
 800289e:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	3301      	adds	r3, #1
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d3de      	bcc.n	800286c <arm_cfft_f32+0xfc>
        }
    }
}
 80028ae:	bf00      	nop
 80028b0:	3720      	adds	r7, #32
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b0bd      	sub	sp, #244	; 0xf4
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	461a      	mov	r2, r3
 80028c4:	460b      	mov	r3, r1
 80028c6:	817b      	strh	r3, [r7, #10]
 80028c8:	4613      	mov	r3, r2
 80028ca:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 80028cc:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <arm_radix8_butterfly_f32+0x3c>)
 80028ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 80028d2:	897b      	ldrh	r3, [r7, #10]
 80028d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 80028d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 80028e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e4:	08db      	lsrs	r3, r3, #3
 80028e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80028f0:	e002      	b.n	80028f8 <arm_radix8_butterfly_f32+0x40>
 80028f2:	bf00      	nop
 80028f4:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 80028f8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80028fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002900:	4413      	add	r3, r2
 8002902:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8002906:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800290a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800290e:	4413      	add	r3, r2
 8002910:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8002914:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800291c:	4413      	add	r3, r2
 800291e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8002922:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800292a:	4413      	add	r3, r2
 800292c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8002930:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002938:	4413      	add	r3, r2
 800293a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800293e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002946:	4413      	add	r3, r2
 8002948:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800294c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002954:	4413      	add	r3, r2
 8002956:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800295a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4413      	add	r3, r2
 8002964:	ed93 7a00 	vldr	s14, [r3]
 8002968:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4413      	add	r3, r2
 8002972:	edd3 7a00 	vldr	s15, [r3]
 8002976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800297e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	ed93 7a00 	vldr	s14, [r3]
 800298c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4413      	add	r3, r2
 8002996:	edd3 7a00 	vldr	s15, [r3]
 800299a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800299e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80029a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4413      	add	r3, r2
 80029ac:	ed93 7a00 	vldr	s14, [r3]
 80029b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4413      	add	r3, r2
 80029ba:	edd3 7a00 	vldr	s15, [r3]
 80029be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80029c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4413      	add	r3, r2
 80029d0:	ed93 7a00 	vldr	s14, [r3]
 80029d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4413      	add	r3, r2
 80029de:	edd3 7a00 	vldr	s15, [r3]
 80029e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029e6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80029ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4413      	add	r3, r2
 80029f4:	ed93 7a00 	vldr	s14, [r3]
 80029f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4413      	add	r3, r2
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a0a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002a0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4413      	add	r3, r2
 8002a18:	ed93 7a00 	vldr	s14, [r3]
 8002a1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4413      	add	r3, r2
 8002a26:	edd3 7a00 	vldr	s15, [r3]
 8002a2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a2e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002a32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	ed93 7a00 	vldr	s14, [r3]
 8002a40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4413      	add	r3, r2
 8002a4a:	edd3 7a00 	vldr	s15, [r3]
 8002a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a52:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002a56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4413      	add	r3, r2
 8002a60:	ed93 7a00 	vldr	s14, [r3]
 8002a64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	edd3 7a00 	vldr	s15, [r3]
 8002a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a76:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8002a7a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002a7e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a86:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8002a8a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002a8e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a96:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8002a9a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002a9e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8002aaa:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002aae:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 8002aba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002ac8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002acc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8002ad4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4413      	add	r3, r2
 8002ade:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002ae2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aea:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002aee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	3304      	adds	r3, #4
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4413      	add	r3, r2
 8002afa:	ed93 7a00 	vldr	s14, [r3]
 8002afe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	3304      	adds	r3, #4
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4413      	add	r3, r2
 8002b0a:	edd3 7a00 	vldr	s15, [r3]
 8002b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b12:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002b16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4413      	add	r3, r2
 8002b22:	ed93 7a00 	vldr	s14, [r3]
 8002b26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4413      	add	r3, r2
 8002b32:	edd3 7a00 	vldr	s15, [r3]
 8002b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b3a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	3304      	adds	r3, #4
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4413      	add	r3, r2
 8002b4a:	ed93 7a00 	vldr	s14, [r3]
 8002b4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	3304      	adds	r3, #4
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4413      	add	r3, r2
 8002b5a:	edd3 7a00 	vldr	s15, [r3]
 8002b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b62:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002b66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4413      	add	r3, r2
 8002b72:	ed93 7a00 	vldr	s14, [r3]
 8002b76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4413      	add	r3, r2
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b8a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002b8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	3304      	adds	r3, #4
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4413      	add	r3, r2
 8002b9a:	ed93 7a00 	vldr	s14, [r3]
 8002b9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4413      	add	r3, r2
 8002baa:	edd3 7a00 	vldr	s15, [r3]
 8002bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002bb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	ed93 7a00 	vldr	s14, [r3]
 8002bc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	3304      	adds	r3, #4
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	edd3 7a00 	vldr	s15, [r3]
 8002bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bda:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002bde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	3304      	adds	r3, #4
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4413      	add	r3, r2
 8002bea:	ed93 7a00 	vldr	s14, [r3]
 8002bee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	edd3 7a00 	vldr	s15, [r3]
 8002bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c02:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002c06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4413      	add	r3, r2
 8002c12:	ed93 7a00 	vldr	s14, [r3]
 8002c16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4413      	add	r3, r2
 8002c22:	edd3 7a00 	vldr	s15, [r3]
 8002c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c2a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8002c2e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002c32:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002c36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c3a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8002c3e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002c42:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c4a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8002c4e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002c52:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c5a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8002c5e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002c62:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8002c6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	3304      	adds	r3, #4
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4413      	add	r3, r2
 8002c7a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002c7e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c86:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8002c8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	3304      	adds	r3, #4
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4413      	add	r3, r2
 8002c96:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002c9a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8002ca6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4413      	add	r3, r2
 8002cb0:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002cb4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cbc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8002cc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4413      	add	r3, r2
 8002cca:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002cce:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8002cda:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002cea:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8002cf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4413      	add	r3, r2
 8002d02:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002d06:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d0e:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8002d12:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002d16:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d1e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d26:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8002d2a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002d2e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d36:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d3e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8002d42:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002d46:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d4e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d56:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8002d5a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002d5e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d66:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8002d72:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002d76:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8002d82:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002d86:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8002d92:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002d96:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d9e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8002da2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002da6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dae:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8002db2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002db6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dbe:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8002dc2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002dc6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dce:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8002dd2:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002dd6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dde:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8002de2:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002de6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dee:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8002df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002e00:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e08:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8002e0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4413      	add	r3, r2
 8002e16:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002e1a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e22:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8002e26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	4413      	add	r3, r2
 8002e30:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002e34:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e3c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8002e40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002e4e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e56:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8002e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	3304      	adds	r3, #4
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4413      	add	r3, r2
 8002e66:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002e6a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e72:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8002e76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4413      	add	r3, r2
 8002e82:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002e86:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e8e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8002e92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	3304      	adds	r3, #4
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002ea2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002ea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eaa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8002eae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4413      	add	r3, r2
 8002eba:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002ebe:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec6:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8002eca:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8002ed8:	897b      	ldrh	r3, [r7, #10]
 8002eda:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	f4ff ad0a 	bcc.w	80028f8 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8002ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee8:	2b07      	cmp	r3, #7
 8002eea:	f240 84e3 	bls.w	80038b4 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8002efa:	893b      	ldrh	r3, [r7, #8]
 8002efc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002f00:	4413      	add	r3, r2
 8002f02:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8002f04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8002f0a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002f0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f10:	4413      	add	r3, r2
 8002f12:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8002f14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002f16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f18:	4413      	add	r3, r2
 8002f1a:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8002f1c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f20:	4413      	add	r3, r2
 8002f22:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8002f24:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002f26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f28:	4413      	add	r3, r2
 8002f2a:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8002f2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f30:	4413      	add	r3, r2
 8002f32:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8002f34:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f38:	4413      	add	r3, r2
 8002f3a:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8002f3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8002f4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8002f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8002f62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8002f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8002f7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8002f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8002f92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	3304      	adds	r3, #4
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8002fa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	4413      	add	r3, r2
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8002fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8002fbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8002fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8002fda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	3304      	adds	r3, #4
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8002fe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	3304      	adds	r3, #4
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8002ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8002ffe:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003006:	4413      	add	r3, r2
 8003008:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 800300c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003014:	4413      	add	r3, r2
 8003016:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800301a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800301e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003022:	4413      	add	r3, r2
 8003024:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8003028:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800302c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003030:	4413      	add	r3, r2
 8003032:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8003036:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800303a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800303e:	4413      	add	r3, r2
 8003040:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8003044:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304c:	4413      	add	r3, r2
 800304e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8003052:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800305a:	4413      	add	r3, r2
 800305c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8003060:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4413      	add	r3, r2
 800306a:	ed93 7a00 	vldr	s14, [r3]
 800306e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4413      	add	r3, r2
 8003078:	edd3 7a00 	vldr	s15, [r3]
 800307c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003080:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8003084:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4413      	add	r3, r2
 800308e:	ed93 7a00 	vldr	s14, [r3]
 8003092:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4413      	add	r3, r2
 800309c:	edd3 7a00 	vldr	s15, [r3]
 80030a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030a4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80030a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4413      	add	r3, r2
 80030b2:	ed93 7a00 	vldr	s14, [r3]
 80030b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4413      	add	r3, r2
 80030c0:	edd3 7a00 	vldr	s15, [r3]
 80030c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80030cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4413      	add	r3, r2
 80030d6:	ed93 7a00 	vldr	s14, [r3]
 80030da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	edd3 7a00 	vldr	s15, [r3]
 80030e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ec:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80030f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	4413      	add	r3, r2
 80030fa:	ed93 7a00 	vldr	s14, [r3]
 80030fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	edd3 7a00 	vldr	s15, [r3]
 800310c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003110:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8003114:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4413      	add	r3, r2
 800311e:	ed93 7a00 	vldr	s14, [r3]
 8003122:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	edd3 7a00 	vldr	s15, [r3]
 8003130:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003134:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8003138:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4413      	add	r3, r2
 8003142:	ed93 7a00 	vldr	s14, [r3]
 8003146:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4413      	add	r3, r2
 8003150:	edd3 7a00 	vldr	s15, [r3]
 8003154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003158:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800315c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4413      	add	r3, r2
 8003166:	ed93 7a00 	vldr	s14, [r3]
 800316a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	edd3 7a00 	vldr	s15, [r3]
 8003178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800317c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8003180:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003184:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800318c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8003190:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003194:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800319c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 80031a0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80031a4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80031a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031ac:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 80031b0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80031b4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80031b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031bc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 80031c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4413      	add	r3, r2
 80031ca:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80031ce:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80031d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031d6:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 80031da:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80031de:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80031e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80031ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	3304      	adds	r3, #4
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4413      	add	r3, r2
 80031f6:	ed93 7a00 	vldr	s14, [r3]
 80031fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	3304      	adds	r3, #4
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4413      	add	r3, r2
 8003206:	edd3 7a00 	vldr	s15, [r3]
 800320a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800320e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8003212:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	3304      	adds	r3, #4
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4413      	add	r3, r2
 800321e:	ed93 7a00 	vldr	s14, [r3]
 8003222:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	3304      	adds	r3, #4
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	edd3 7a00 	vldr	s15, [r3]
 8003232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003236:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800323a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	3304      	adds	r3, #4
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4413      	add	r3, r2
 8003246:	ed93 7a00 	vldr	s14, [r3]
 800324a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	3304      	adds	r3, #4
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4413      	add	r3, r2
 8003256:	edd3 7a00 	vldr	s15, [r3]
 800325a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800325e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8003262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	3304      	adds	r3, #4
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4413      	add	r3, r2
 800326e:	ed93 7a00 	vldr	s14, [r3]
 8003272:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	3304      	adds	r3, #4
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4413      	add	r3, r2
 800327e:	edd3 7a00 	vldr	s15, [r3]
 8003282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003286:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800328a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	3304      	adds	r3, #4
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4413      	add	r3, r2
 8003296:	ed93 7a00 	vldr	s14, [r3]
 800329a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	3304      	adds	r3, #4
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4413      	add	r3, r2
 80032a6:	edd3 7a00 	vldr	s15, [r3]
 80032aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ae:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80032b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	3304      	adds	r3, #4
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4413      	add	r3, r2
 80032be:	ed93 7a00 	vldr	s14, [r3]
 80032c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	3304      	adds	r3, #4
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4413      	add	r3, r2
 80032ce:	edd3 7a00 	vldr	s15, [r3]
 80032d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032d6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80032da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	3304      	adds	r3, #4
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4413      	add	r3, r2
 80032e6:	ed93 7a00 	vldr	s14, [r3]
 80032ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	3304      	adds	r3, #4
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4413      	add	r3, r2
 80032f6:	edd3 7a00 	vldr	s15, [r3]
 80032fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032fe:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8003302:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	3304      	adds	r3, #4
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4413      	add	r3, r2
 800330e:	ed93 7a00 	vldr	s14, [r3]
 8003312:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	3304      	adds	r3, #4
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4413      	add	r3, r2
 800331e:	edd3 7a00 	vldr	s15, [r3]
 8003322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003326:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800332a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800332e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003336:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 800333a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800333e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003346:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 800334a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800334e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003352:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003356:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 800335a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800335e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003366:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 800336a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800336e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003376:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 800337a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800337e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003386:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800338a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	3304      	adds	r3, #4
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4413      	add	r3, r2
 8003396:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800339a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800339e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a2:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 80033a6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80033aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80033ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 80033b6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80033ba:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80033be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 80033c6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80033ca:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80033ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 80033d6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80033da:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80033de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e2:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 80033e6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80033ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80033ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f2:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 80033f6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80033fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80033fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003402:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8003406:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800340a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800340e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003412:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8003416:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4413      	add	r3, r2
 8003420:	ed97 7a07 	vldr	s14, [r7, #28]
 8003424:	edd7 7a06 	vldr	s15, [r7, #24]
 8003428:	ee77 7a27 	vadd.f32	s15, s14, s15
 800342c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8003430:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	3304      	adds	r3, #4
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	4413      	add	r3, r2
 800343c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003440:	edd7 7a04 	vldr	s15, [r7, #16]
 8003444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003448:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 800344c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003450:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003458:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 800345c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003460:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003468:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800346c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003470:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003478:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800347c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003480:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003488:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800348c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4413      	add	r3, r2
 8003496:	ed97 7a07 	vldr	s14, [r7, #28]
 800349a:	edd7 7a06 	vldr	s15, [r7, #24]
 800349e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034a2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 80034a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	3304      	adds	r3, #4
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4413      	add	r3, r2
 80034b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80034b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80034ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034be:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 80034c2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80034c6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80034ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ce:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 80034d2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80034d6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80034da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034de:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 80034e2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80034e6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80034ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ee:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 80034f2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80034f6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80034fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fe:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8003502:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	4413      	add	r3, r2
 800350c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003510:	edd7 7a06 	vldr	s15, [r7, #24]
 8003514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003518:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800351c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	3304      	adds	r3, #4
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4413      	add	r3, r2
 8003528:	ed97 7a05 	vldr	s14, [r7, #20]
 800352c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003534:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8003538:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800353c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003544:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8003550:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8003554:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800355c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003564:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8003568:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800356c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003574:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800357c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8003580:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003584:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800358c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003594:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8003598:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800359c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80035a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035a4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 80035a8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80035ac:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80035b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 80035b8:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80035bc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80035c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035c4:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 80035c8:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80035cc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80035d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035d4:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 80035d8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80035dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80035e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035e4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 80035e8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80035ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80035f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 80035f8:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80035fc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003600:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003604:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8003608:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800360c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003614:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8003618:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800361c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003624:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8003628:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800362c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003634:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8003638:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800363c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003644:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8003648:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800364c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003654:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8003658:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800365c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003664:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8003668:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800366c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003674:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8003678:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800367c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003684:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8003688:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800368c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003694:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8003698:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800369c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80036a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 80036a8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80036ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80036b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 80036b8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80036bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80036c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c4:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 80036c8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80036cc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80036d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d4:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 80036d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4413      	add	r3, r2
 80036e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80036e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80036ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ee:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 80036f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	3304      	adds	r3, #4
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4413      	add	r3, r2
 80036fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8003702:	edd7 7a04 	vldr	s15, [r7, #16]
 8003706:	ee77 7a67 	vsub.f32	s15, s14, s15
 800370a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800370e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003712:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800371e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003722:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800372a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800372e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003732:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800373e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003742:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800374a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800374e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4413      	add	r3, r2
 8003758:	ed97 7a07 	vldr	s14, [r7, #28]
 800375c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003764:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8003768:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	3304      	adds	r3, #4
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	ed97 7a05 	vldr	s14, [r7, #20]
 8003778:	edd7 7a04 	vldr	s15, [r7, #16]
 800377c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003780:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8003784:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003788:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800378c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003790:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8003794:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003798:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800379c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 80037a4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80037a8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80037ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b0:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 80037b4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80037b8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80037bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 80037c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4413      	add	r3, r2
 80037ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80037d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80037d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037da:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 80037de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	3304      	adds	r3, #4
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4413      	add	r3, r2
 80037ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80037ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80037f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037f6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 80037fa:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80037fe:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003806:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800380a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800380e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003816:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800381a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800381e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003826:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800382a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800382e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003836:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800383a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4413      	add	r3, r2
 8003844:	ed97 7a07 	vldr	s14, [r7, #28]
 8003848:	edd7 7a06 	vldr	s15, [r7, #24]
 800384c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003850:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8003854:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	3304      	adds	r3, #4
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4413      	add	r3, r2
 8003860:	ed97 7a05 	vldr	s14, [r7, #20]
 8003864:	edd7 7a04 	vldr	s15, [r7, #16]
 8003868:	ee77 7a67 	vsub.f32	s15, s14, s15
 800386c:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8003870:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003874:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003878:	4413      	add	r3, r2
 800387a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 800387e:	897b      	ldrh	r3, [r7, #10]
 8003880:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003884:	429a      	cmp	r2, r3
 8003886:	f4ff abba 	bcc.w	8002ffe <arm_radix8_butterfly_f32+0x746>

         j++;
 800388a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800388e:	3301      	adds	r3, #1
 8003890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8003894:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800389c:	429a      	cmp	r2, r3
 800389e:	f4ff ab2c 	bcc.w	8002efa <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 80038a2:	893b      	ldrh	r3, [r7, #8]
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 80038a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ac:	2b07      	cmp	r3, #7
 80038ae:	f63f a813 	bhi.w	80028d8 <arm_radix8_butterfly_f32+0x20>
}
 80038b2:	e000      	b.n	80038b6 <arm_radix8_butterfly_f32+0xffe>
         break;
 80038b4:	bf00      	nop
}
 80038b6:	bf00      	nop
 80038b8:	37f4      	adds	r7, #244	; 0xf4
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop

080038c4 <arm_relu_q15>:
   * Optimized relu with QSUB instructions.
   *
   */

void arm_relu_q15(q15_t * data, uint16_t size)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b08f      	sub	sp, #60	; 0x3c
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	807b      	strh	r3, [r7, #2]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    uint16_t  i = size >> 1;
 80038d0:	887b      	ldrh	r3, [r7, #2]
 80038d2:	085b      	lsrs	r3, r3, #1
 80038d4:	86fb      	strh	r3, [r7, #54]	; 0x36
    q15_t    *pIn = data;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	613b      	str	r3, [r7, #16]
    q15_t    *pOut = data;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	60fb      	str	r3, [r7, #12]
    q31_t     in;
    q31_t     buf;
    q31_t     mask;

    while (i)
 80038de:	e032      	b.n	8003946 <arm_relu_q15+0x82>
    {
        in = *__SIMD32(pIn)++;
 80038e0:	f107 0210 	add.w	r2, r7, #16
 80038e4:	6813      	ldr	r3, [r2, #0]
 80038e6:	1d19      	adds	r1, r3, #4
 80038e8:	6011      	str	r1, [r2, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	633b      	str	r3, [r7, #48]	; 0x30

        /* extract the first bit */
        buf = __ROR(in & 0x80008000, 15);
 80038ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f0:	f003 2380 	and.w	r3, r3, #2147516416	; 0x80008000
 80038f4:	61bb      	str	r3, [r7, #24]
 80038f6:	230f      	movs	r3, #15
 80038f8:	617b      	str	r3, [r7, #20]
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	617b      	str	r3, [r7, #20]
  if (op2 == 0U)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <arm_relu_q15+0x48>
  {
    return op1;
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	e003      	b.n	8003914 <arm_relu_q15+0x50>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	fa62 f303 	ror.w	r3, r2, r3
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* if MSB=1, mask will be 0xFF, 0x0 otherwise */
        mask = __QSUB16(0x00000000, buf);
 8003916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003918:	2200      	movs	r2, #0
 800391a:	627a      	str	r2, [r7, #36]	; 0x24
 800391c:	623b      	str	r3, [r7, #32]

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	6a3a      	ldr	r2, [r7, #32]
 8003922:	fad3 f312 	qsub16	r3, r3, r2
 8003926:	61fb      	str	r3, [r7, #28]
  return(result);
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28

        *__SIMD32(pOut)++ = in & (~mask);
 800392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392e:	43d9      	mvns	r1, r3
 8003930:	f107 020c 	add.w	r2, r7, #12
 8003934:	6813      	ldr	r3, [r2, #0]
 8003936:	1d18      	adds	r0, r3, #4
 8003938:	6010      	str	r0, [r2, #0]
 800393a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800393c:	400a      	ands	r2, r1
 800393e:	601a      	str	r2, [r3, #0]
        i--;
 8003940:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003942:	3b01      	subs	r3, #1
 8003944:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 8003946:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1c9      	bne.n	80038e0 <arm_relu_q15+0x1c>
    }

    if (size & 0x1)
 800394c:	887b      	ldrh	r3, [r7, #2]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <arm_relu_q15+0xa8>
    {
        if (*pIn < 0)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800395c:	2b00      	cmp	r3, #0
 800395e:	da02      	bge.n	8003966 <arm_relu_q15+0xa2>
        {
            *pIn = 0;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2200      	movs	r2, #0
 8003964:	801a      	strh	r2, [r3, #0]
        }
        pIn++;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	3302      	adds	r3, #2
 800396a:	613b      	str	r3, [r7, #16]
            data[i] = 0;
    }

#endif                          /* ARM_MATH_DSP */

}
 800396c:	bf00      	nop
 800396e:	373c      	adds	r7, #60	; 0x3c
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <arm_fully_connected_q15>:
                        const uint16_t bias_shift,
                        const uint16_t out_shift, 
                        const q15_t * bias, 
                        q15_t * pOut,
                        q15_t * vec_buffer)
{
 8003978:	b480      	push	{r7}
 800397a:	b0b7      	sub	sp, #220	; 0xdc
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	4611      	mov	r1, r2
 8003984:	461a      	mov	r2, r3
 8003986:	460b      	mov	r3, r1
 8003988:	80fb      	strh	r3, [r7, #6]
 800398a:	4613      	mov	r3, r2
 800398c:	80bb      	strh	r3, [r7, #4]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    const q15_t *pB = pM;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	61fb      	str	r3, [r7, #28]
    const q15_t *pB2 = pB + dim_vec;
 8003992:	69fa      	ldr	r2, [r7, #28]
 8003994:	88fb      	ldrh	r3, [r7, #6]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4413      	add	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
    q15_t    *pO = pOut;
 800399c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80039a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    const q15_t    *pA;
    const q15_t    *pBias = bias;
 80039a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80039a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    uint16_t rowCnt = num_of_rows >> 1;
 80039ac:	88bb      	ldrh	r3, [r7, #4]
 80039ae:	085b      	lsrs	r3, r3, #1
 80039b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce

    /* this loop loops over different output */
    while (rowCnt) {
 80039b4:	e124      	b.n	8003c00 <arm_fully_connected_q15+0x288>
        q31_t     sum =  ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80039b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039ba:	1c9a      	adds	r2, r3, #2
 80039bc:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80039c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039c4:	461a      	mov	r2, r3
 80039c6:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 80039ca:	409a      	lsls	r2, r3
 80039cc:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80039d0:	3b01      	subs	r3, #1
 80039d2:	2101      	movs	r1, #1
 80039d4:	fa01 f303 	lsl.w	r3, r1, r3
 80039d8:	4413      	add	r3, r2
 80039da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80039de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039e2:	1c9a      	adds	r2, r3, #2
 80039e4:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80039e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039ec:	461a      	mov	r2, r3
 80039ee:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 80039f2:	409a      	lsls	r2, r3
 80039f4:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80039f8:	3b01      	subs	r3, #1
 80039fa:	2101      	movs	r1, #1
 80039fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003a00:	4413      	add	r3, r2
 8003a02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

        uint16_t  colCnt = dim_vec >> 2;
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	089b      	lsrs	r3, r3, #2
 8003a0a:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2

        pA = pV;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	617b      	str	r3, [r7, #20]
        pB2 = pB + dim_vec;
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	4413      	add	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]

        while (colCnt)
 8003a1c:	e07c      	b.n	8003b18 <arm_fully_connected_q15+0x1a0>
        {
            q31_t     inV1, inM1, inM2;
            inV1 = *__SIMD32(pA)++;
 8003a1e:	f107 0214 	add.w	r2, r7, #20
 8003a22:	6813      	ldr	r3, [r2, #0]
 8003a24:	1d19      	adds	r1, r3, #4
 8003a26:	6011      	str	r1, [r2, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            inM1 = *__SIMD32(pB)++;
 8003a2e:	f107 021c 	add.w	r2, r7, #28
 8003a32:	6813      	ldr	r3, [r2, #0]
 8003a34:	1d19      	adds	r1, r3, #4
 8003a36:	6011      	str	r1, [r2, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            sum = __SMLAD(inV1, inM1, sum);
 8003a3e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8003a42:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003a46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a4a:	64f9      	str	r1, [r7, #76]	; 0x4c
 8003a4c:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a4e:	647b      	str	r3, [r7, #68]	; 0x44

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a56:	fb23 1302 	smlad	r3, r3, r2, r1
 8003a5a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            inM2 = *__SIMD32(pB2)++;
 8003a62:	f107 0218 	add.w	r2, r7, #24
 8003a66:	6813      	ldr	r3, [r2, #0]
 8003a68:	1d19      	adds	r1, r3, #4
 8003a6a:	6011      	str	r1, [r2, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            sum2 = __SMLAD(inV1, inM2, sum2);
 8003a72:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8003a76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a7e:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003a80:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a82:	657b      	str	r3, [r7, #84]	; 0x54
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a8a:	fb23 1302 	smlad	r3, r3, r2, r1
 8003a8e:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 8003a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

            inV1 = *__SIMD32(pA)++;
 8003a96:	f107 0214 	add.w	r2, r7, #20
 8003a9a:	6813      	ldr	r3, [r2, #0]
 8003a9c:	1d19      	adds	r1, r3, #4
 8003a9e:	6011      	str	r1, [r2, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            inM1 = *__SIMD32(pB)++;
 8003aa6:	f107 021c 	add.w	r2, r7, #28
 8003aaa:	6813      	ldr	r3, [r2, #0]
 8003aac:	1d19      	adds	r1, r3, #4
 8003aae:	6011      	str	r1, [r2, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            sum = __SMLAD(inV1, inM1, sum);
 8003ab6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8003aba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003abe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ac2:	66f9      	str	r1, [r7, #108]	; 0x6c
 8003ac4:	66ba      	str	r2, [r7, #104]	; 0x68
 8003ac6:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003acc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003ace:	fb23 1302 	smlad	r3, r3, r2, r1
 8003ad2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003ad4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ad6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            inM2 = *__SIMD32(pB2)++;
 8003ada:	f107 0218 	add.w	r2, r7, #24
 8003ade:	6813      	ldr	r3, [r2, #0]
 8003ae0:	1d19      	adds	r1, r3, #4
 8003ae2:	6011      	str	r1, [r2, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            sum2 = __SMLAD(inV1, inM2, sum2);
 8003aea:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8003aee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003af2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003af6:	67f9      	str	r1, [r7, #124]	; 0x7c
 8003af8:	67ba      	str	r2, [r7, #120]	; 0x78
 8003afa:	677b      	str	r3, [r7, #116]	; 0x74
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003afc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003afe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b00:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003b02:	fb23 1302 	smlad	r3, r3, r2, r1
 8003b06:	673b      	str	r3, [r7, #112]	; 0x70
  return(result);
 8003b08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

            colCnt--;
 8003b0e:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8003b12:	3b01      	subs	r3, #1
 8003b14:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        while (colCnt)
 8003b18:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f47f af7e 	bne.w	8003a1e <arm_fully_connected_q15+0xa6>
        }
        colCnt = dim_vec & 0x3;
 8003b22:	88fb      	ldrh	r3, [r7, #6]
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        while (colCnt)
 8003b2c:	e02c      	b.n	8003b88 <arm_fully_connected_q15+0x210>
        {
            q15_t     inV = *pA++;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	1c9a      	adds	r2, r3, #2
 8003b32:	617a      	str	r2, [r7, #20]
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
            q15_t     inM = *pB++;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	1c9a      	adds	r2, r3, #2
 8003b3e:	61fa      	str	r2, [r7, #28]
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
            q15_t     inM2 = *pB2++;
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	1c9a      	adds	r2, r3, #2
 8003b4a:	61ba      	str	r2, [r7, #24]
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

            sum += inV * inM;
 8003b52:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8003b56:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8003b5a:	fb02 f303 	mul.w	r3, r2, r3
 8003b5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b62:	4413      	add	r3, r2
 8003b64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            sum2 += inV * inM2;
 8003b68:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8003b6c:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 8003b70:	fb02 f303 	mul.w	r3, r2, r3
 8003b74:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b78:	4413      	add	r3, r2
 8003b7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            colCnt--;
 8003b7e:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8003b82:	3b01      	subs	r3, #1
 8003b84:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        while (colCnt)
 8003b88:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1ce      	bne.n	8003b2e <arm_fully_connected_q15+0x1b6>
        }                       /* while over colCnt */
        *pO++ =  (q15_t) (__SSAT((sum >> out_shift), 16));
 8003b90:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8003b94:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b98:	fa42 f303 	asr.w	r3, r2, r3
 8003b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ba0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ba4:	f303 030f 	ssat	r3, #16, r3
 8003ba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bac:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8003bb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bb4:	1c9a      	adds	r2, r3, #2
 8003bb6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003bba:	b20a      	sxth	r2, r1
 8003bbc:	801a      	strh	r2, [r3, #0]
        *pO++ = (q15_t) (__SSAT((sum2>> out_shift), 16));
 8003bbe:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8003bc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003bc6:	fa42 f303 	asr.w	r3, r2, r3
 8003bca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bd2:	f303 030f 	ssat	r3, #16, r3
 8003bd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003bda:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8003bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003be2:	1c9a      	adds	r2, r3, #2
 8003be4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003be8:	b20a      	sxth	r2, r1
 8003bea:	801a      	strh	r2, [r3, #0]
		
        /* adjust the pointers and counters */
        pB = pB + dim_vec;
 8003bec:	69fa      	ldr	r2, [r7, #28]
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	4413      	add	r3, r2
 8003bf4:	61fb      	str	r3, [r7, #28]
        rowCnt --;
 8003bf6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    while (rowCnt) {
 8003c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f47f aed6 	bne.w	80039b6 <arm_fully_connected_q15+0x3e>
    }

    rowCnt = num_of_rows & 0x1;
 8003c0a:	88bb      	ldrh	r3, [r7, #4]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce

    while (rowCnt) {
 8003c14:	e0a9      	b.n	8003d6a <arm_fully_connected_q15+0x3f2>
        q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8003c16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c1a:	1c9a      	adds	r2, r3, #2
 8003c1c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8003c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c24:	461a      	mov	r2, r3
 8003c26:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8003c30:	3b01      	subs	r3, #1
 8003c32:	2101      	movs	r1, #1
 8003c34:	fa01 f303 	lsl.w	r3, r1, r3
 8003c38:	4413      	add	r3, r2
 8003c3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        uint16_t  colCnt = dim_vec >> 2;
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	089b      	lsrs	r3, r3, #2
 8003c42:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba

        pA = pV;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	617b      	str	r3, [r7, #20]
      
        while (colCnt) {
 8003c4a:	e048      	b.n	8003cde <arm_fully_connected_q15+0x366>
            q31_t     inV1, inM1;
            inV1 = *__SIMD32(pA)++;
 8003c4c:	f107 0214 	add.w	r2, r7, #20
 8003c50:	6813      	ldr	r3, [r2, #0]
 8003c52:	1d19      	adds	r1, r3, #4
 8003c54:	6011      	str	r1, [r2, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            inM1 = *__SIMD32(pB)++;
 8003c5c:	f107 021c 	add.w	r2, r7, #28
 8003c60:	6813      	ldr	r3, [r2, #0]
 8003c62:	1d19      	adds	r1, r3, #4
 8003c64:	6011      	str	r1, [r2, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            sum = __SMLAD(inV1, inM1, sum);
 8003c6c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003c70:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003c74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c78:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003c7a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c84:	fb23 1302 	smlad	r3, r3, r2, r1
 8003c88:	623b      	str	r3, [r7, #32]
  return(result);
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            
            inV1 = *__SIMD32(pA)++;
 8003c90:	f107 0214 	add.w	r2, r7, #20
 8003c94:	6813      	ldr	r3, [r2, #0]
 8003c96:	1d19      	adds	r1, r3, #4
 8003c98:	6011      	str	r1, [r2, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            inM1 = *__SIMD32(pB)++;
 8003ca0:	f107 021c 	add.w	r2, r7, #28
 8003ca4:	6813      	ldr	r3, [r2, #0]
 8003ca6:	1d19      	adds	r1, r3, #4
 8003ca8:	6011      	str	r1, [r2, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            sum = __SMLAD(inV1, inM1, sum);
 8003cb0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003cb4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003cb8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003cbc:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003cbe:	63ba      	str	r2, [r7, #56]	; 0x38
 8003cc0:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cc8:	fb23 1302 	smlad	r3, r3, r2, r1
 8003ccc:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
				
            colCnt--;
 8003cd4:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        while (colCnt) {
 8003cde:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1b2      	bne.n	8003c4c <arm_fully_connected_q15+0x2d4>
	}
			
	/* left-over of the vector */
	colCnt = dim_vec & 0x3;
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
	while(colCnt) {
 8003cf0:	e01b      	b.n	8003d2a <arm_fully_connected_q15+0x3b2>
            q15_t     inV = *pA++;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	1c9a      	adds	r2, r3, #2
 8003cf6:	617a      	str	r2, [r7, #20]
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            q15_t     inM = *pB++;
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	1c9a      	adds	r2, r3, #2
 8003d02:	61fa      	str	r2, [r7, #28]
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

            sum += inV * inM;
 8003d0a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8003d0e:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	; 0xac
 8003d12:	fb02 f303 	mul.w	r3, r2, r3
 8003d16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            colCnt--;
 8003d20:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8003d24:	3b01      	subs	r3, #1
 8003d26:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
	while(colCnt) {
 8003d2a:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1df      	bne.n	8003cf2 <arm_fully_connected_q15+0x37a>
	}

        *pO++ =  (q15_t) (__SSAT((sum >> out_shift), 16));
 8003d32:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8003d36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d3a:	fa42 f303 	asr.w	r3, r2, r3
 8003d3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d46:	f303 030f 	ssat	r3, #16, r3
 8003d4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d4e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8003d52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d56:	1c9a      	adds	r2, r3, #2
 8003d58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d5c:	b20a      	sxth	r2, r1
 8003d5e:	801a      	strh	r2, [r3, #0]
			
        rowCnt --;
 8003d60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d64:	3b01      	subs	r3, #1
 8003d66:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    while (rowCnt) {
 8003d6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f47f af51 	bne.w	8003c16 <arm_fully_connected_q15+0x29e>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return (ARM_MATH_SUCCESS);
 8003d74:	2300      	movs	r3, #0

}
 8003d76:	4618      	mov	r0, r3
 8003d78:	37dc      	adds	r7, #220	; 0xdc
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <arm_softmax_q15>:
   *  with a log(2) scaling factor.
   *
   */

void arm_softmax_q15(const q15_t * vec_in, const uint16_t dim_vec, q15_t * p_out)
{
 8003d84:	b590      	push	{r4, r7, lr}
 8003d86:	b093      	sub	sp, #76	; 0x4c
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	817b      	strh	r3, [r7, #10]
    q31_t     sum;
    int16_t   i;
    uint8_t   shift;
    q31_t     base;
    base = -1 * 0x100000;
 8003d92:	4b5e      	ldr	r3, [pc, #376]	; (8003f0c <arm_softmax_q15+0x188>)
 8003d94:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < dim_vec; i++)
 8003d96:	2300      	movs	r3, #0
 8003d98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003d9c:	e019      	b.n	8003dd2 <arm_softmax_q15+0x4e>
    {
        if (vec_in[i] > base)
 8003d9e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dac:	461a      	mov	r2, r3
 8003dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db0:	4293      	cmp	r3, r2
 8003db2:	da07      	bge.n	8003dc4 <arm_softmax_q15+0x40>
        {
            base = vec_in[i];
 8003db4:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < dim_vec; i++)
 8003dc4:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3301      	adds	r3, #1
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003dd2:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8003dd6:	897b      	ldrh	r3, [r7, #10]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	dbe0      	blt.n	8003d9e <arm_softmax_q15+0x1a>

    /* we ignore really small values  
     * anyway, they will be 0 after shrinking
     * to q15_t
     */
    base = base - 16;
 8003ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dde:	3b10      	subs	r3, #16
 8003de0:	63fb      	str	r3, [r7, #60]	; 0x3c

    sum = 0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	647b      	str	r3, [r7, #68]	; 0x44

    for (i = 0; i < dim_vec; i++)
 8003de6:	2300      	movs	r3, #0
 8003de8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003dec:	e02b      	b.n	8003e46 <arm_softmax_q15+0xc2>
    {
        if (vec_in[i] > base)
 8003dee:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e00:	4293      	cmp	r3, r2
 8003e02:	da19      	bge.n	8003e38 <arm_softmax_q15+0xb4>
        {
            shift = (uint8_t)__USAT(vec_in[i] - base, 5);
 8003e04:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e12:	461a      	mov	r2, r3
 8003e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f383 0305 	usat	r3, #5, r3
 8003e20:	613b      	str	r3, [r7, #16]
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            sum += 0x1 << shift;
 8003e28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e34:	4413      	add	r3, r2
 8003e36:	647b      	str	r3, [r7, #68]	; 0x44
    for (i = 0; i < dim_vec; i++)
 8003e38:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3301      	adds	r3, #1
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003e46:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8003e4a:	897b      	ldrh	r3, [r7, #10]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	dbce      	blt.n	8003dee <arm_softmax_q15+0x6a>
        }
    }

    /* This is effectively (0x1 << 32) / sum */
    int64_t div_base = 0x100000000LL;
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	f04f 0401 	mov.w	r4, #1
 8003e58:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    int output_base = (int32_t)(div_base / sum);
 8003e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e5e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8003e62:	461a      	mov	r2, r3
 8003e64:	4623      	mov	r3, r4
 8003e66:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003e6a:	f7fc fa95 	bl	8000398 <__aeabi_ldivmod>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	460c      	mov	r4, r1
 8003e72:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Final confidence will be output_base >> ( 17 - (vec_in[i] - base) )
     * so 32768 (0x1<<15) -> 100% confidence when sum = 0x1 << 16, output_base = 0x1 << 16
     * and vec_in[i]-base = 16
     */
    for (i = 0; i < dim_vec; i++)
 8003e74:	2300      	movs	r3, #0
 8003e76:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003e7a:	e03d      	b.n	8003ef8 <arm_softmax_q15+0x174>
    {
        if (vec_in[i] > base) 
 8003e7c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4413      	add	r3, r2
 8003e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	da24      	bge.n	8003edc <arm_softmax_q15+0x158>
        {
            /* Here minimum value of 17+base-vec[i] will be 1 */
            shift = (uint8_t)__USAT(17+base-vec_in[i], 5);
 8003e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e94:	3311      	adds	r3, #17
 8003e96:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8003e9a:	0052      	lsls	r2, r2, #1
 8003e9c:	68f9      	ldr	r1, [r7, #12]
 8003e9e:	440a      	add	r2, r1
 8003ea0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eaa:	f383 0305 	usat	r3, #5, r3
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            p_out[i] = (q15_t) __SSAT((output_base >> shift), 16);
 8003eb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ebc:	fa42 f303 	asr.w	r3, r2, r3
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f303 030f 	ssat	r3, #16, r3
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	69b9      	ldr	r1, [r7, #24]
 8003ecc:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	b20a      	sxth	r2, r1
 8003ed8:	801a      	strh	r2, [r3, #0]
 8003eda:	e006      	b.n	8003eea <arm_softmax_q15+0x166>
        } else
        {
            p_out[i] = 0;
 8003edc:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < dim_vec; i++)
 8003eea:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003ef8:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8003efc:	897b      	ldrh	r3, [r7, #10]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	dbbc      	blt.n	8003e7c <arm_softmax_q15+0xf8>
        }
    }

}
 8003f02:	bf00      	nop
 8003f04:	374c      	adds	r7, #76	; 0x4c
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd90      	pop	{r4, r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	fff00000 	.word	0xfff00000

08003f10 <fully_connected_run>:
extern q15_t aq15_layer_2_bias[22];
extern q15_t aq15_layer_3_weights[22*22];
extern q15_t aq15_layer_3_bias[22];

void fully_connected_run(q15_t input_data[], uint32_t *prediction)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08a      	sub	sp, #40	; 0x28
 8003f14:	af06      	add	r7, sp, #24
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
    int16_t i16_max_val = 0x7FFF, i = 0;
 8003f1a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8003f1e:	81fb      	strh	r3, [r7, #14]
 8003f20:	2300      	movs	r3, #0
 8003f22:	81bb      	strh	r3, [r7, #12]

    arm_fully_connected_q15(
 8003f24:	2300      	movs	r3, #0
 8003f26:	9304      	str	r3, [sp, #16]
 8003f28:	4b36      	ldr	r3, [pc, #216]	; (8004004 <fully_connected_run+0xf4>)
 8003f2a:	9303      	str	r3, [sp, #12]
 8003f2c:	4b36      	ldr	r3, [pc, #216]	; (8004008 <fully_connected_run+0xf8>)
 8003f2e:	9302      	str	r3, [sp, #8]
 8003f30:	230f      	movs	r3, #15
 8003f32:	9301      	str	r3, [sp, #4]
 8003f34:	230f      	movs	r3, #15
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	2316      	movs	r3, #22
 8003f3a:	2216      	movs	r2, #22
 8003f3c:	4933      	ldr	r1, [pc, #204]	; (800400c <fully_connected_run+0xfc>)
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff fd1a 	bl	8003978 <arm_fully_connected_q15>
    		aq15_out_Buf,
			LAYER_1_OU_DIM,
			1,
			ARM_SIGMOID);
	*/
    arm_relu_q15(
 8003f44:	2116      	movs	r1, #22
 8003f46:	482f      	ldr	r0, [pc, #188]	; (8004004 <fully_connected_run+0xf4>)
 8003f48:	f7ff fcbc 	bl	80038c4 <arm_relu_q15>
        aq15_out_Buf,
        LAYER_1_OU_DIM);
    memcpy(input_data, aq15_out_Buf, sizeof(aq15_out_Buf));
 8003f4c:	222c      	movs	r2, #44	; 0x2c
 8003f4e:	492d      	ldr	r1, [pc, #180]	; (8004004 <fully_connected_run+0xf4>)
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f009 fe37 	bl	800dbc4 <memcpy>
    arm_fully_connected_q15(
 8003f56:	2300      	movs	r3, #0
 8003f58:	9304      	str	r3, [sp, #16]
 8003f5a:	4b2a      	ldr	r3, [pc, #168]	; (8004004 <fully_connected_run+0xf4>)
 8003f5c:	9303      	str	r3, [sp, #12]
 8003f5e:	4b2c      	ldr	r3, [pc, #176]	; (8004010 <fully_connected_run+0x100>)
 8003f60:	9302      	str	r3, [sp, #8]
 8003f62:	230f      	movs	r3, #15
 8003f64:	9301      	str	r3, [sp, #4]
 8003f66:	230f      	movs	r3, #15
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	2316      	movs	r3, #22
 8003f6c:	2216      	movs	r2, #22
 8003f6e:	4929      	ldr	r1, [pc, #164]	; (8004014 <fully_connected_run+0x104>)
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff fd01 	bl	8003978 <arm_fully_connected_q15>
        LAYER_2_IN_SHIFT,
        LAYER_2_OU_SHIFT,
        aq15_layer_2_bias,
        aq15_out_Buf,
        NULL);
    arm_relu_q15(
 8003f76:	2116      	movs	r1, #22
 8003f78:	4822      	ldr	r0, [pc, #136]	; (8004004 <fully_connected_run+0xf4>)
 8003f7a:	f7ff fca3 	bl	80038c4 <arm_relu_q15>
        aq15_out_Buf,
        LAYER_2_OU_DIM);
    memcpy(input_data, aq15_out_Buf, sizeof(aq15_out_Buf));
 8003f7e:	222c      	movs	r2, #44	; 0x2c
 8003f80:	4920      	ldr	r1, [pc, #128]	; (8004004 <fully_connected_run+0xf4>)
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f009 fe1e 	bl	800dbc4 <memcpy>
    arm_fully_connected_q15(
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9304      	str	r3, [sp, #16]
 8003f8c:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <fully_connected_run+0xf4>)
 8003f8e:	9303      	str	r3, [sp, #12]
 8003f90:	4b21      	ldr	r3, [pc, #132]	; (8004018 <fully_connected_run+0x108>)
 8003f92:	9302      	str	r3, [sp, #8]
 8003f94:	230f      	movs	r3, #15
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	230f      	movs	r3, #15
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	2306      	movs	r3, #6
 8003f9e:	2216      	movs	r2, #22
 8003fa0:	491e      	ldr	r1, [pc, #120]	; (800401c <fully_connected_run+0x10c>)
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff fce8 	bl	8003978 <arm_fully_connected_q15>
        LAYER_3_IN_SHIFT,
        LAYER_3_OU_SHIFT,
        aq15_layer_3_bias,
        aq15_out_Buf,
        NULL);
    memcpy(input_data, aq15_out_Buf, sizeof(aq15_out_Buf));
 8003fa8:	222c      	movs	r2, #44	; 0x2c
 8003faa:	4916      	ldr	r1, [pc, #88]	; (8004004 <fully_connected_run+0xf4>)
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f009 fe09 	bl	800dbc4 <memcpy>
    arm_softmax_q15(
 8003fb2:	4a14      	ldr	r2, [pc, #80]	; (8004004 <fully_connected_run+0xf4>)
 8003fb4:	2106      	movs	r1, #6
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff fee4 	bl	8003d84 <arm_softmax_q15>
        input_data,
        LAYER_3_OU_DIM,
        aq15_out_Buf);
    for(i = 0; i < LAYER_3_OU_DIM; i++) {
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	81bb      	strh	r3, [r7, #12]
 8003fc0:	e018      	b.n	8003ff4 <fully_connected_run+0xe4>
        if(i16_max_val < aq15_out_Buf[i]) {
 8003fc2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003fc6:	4a0f      	ldr	r2, [pc, #60]	; (8004004 <fully_connected_run+0xf4>)
 8003fc8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003fcc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	da09      	bge.n	8003fe8 <fully_connected_run+0xd8>
            i16_max_val = aq15_out_Buf[i];
 8003fd4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003fd8:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <fully_connected_run+0xf4>)
 8003fda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fde:	81fb      	strh	r3, [r7, #14]
            *prediction = i;
 8003fe0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	601a      	str	r2, [r3, #0]
    for(i = 0; i < LAYER_3_OU_DIM; i++) {
 8003fe8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3301      	adds	r3, #1
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	81bb      	strh	r3, [r7, #12]
 8003ff4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003ff8:	2b05      	cmp	r3, #5
 8003ffa:	dde2      	ble.n	8003fc2 <fully_connected_run+0xb2>
        }
    }
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	24000874 	.word	0x24000874
 8004008:	24000c68 	.word	0x24000c68
 800400c:	240008a0 	.word	0x240008a0
 8004010:	2400105c 	.word	0x2400105c
 8004014:	24000c94 	.word	0x24000c94
 8004018:	24001450 	.word	0x24001450
 800401c:	24001088 	.word	0x24001088

08004020 <inst_absolute>:
#include "functions.h"

//**********************************************************************************************//
// Preprocessing - Instantaneous values (6 features)
// To use with instantaneous values
void inst_absolute(float32_t in[], float32_t out[]){
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
	arm_abs_f32(&in[0], &out[0], frameSize);
 800402a:	4b05      	ldr	r3, [pc, #20]	; (8004040 <inst_absolute+0x20>)
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	6839      	ldr	r1, [r7, #0]
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fc fbf0 	bl	8000818 <arm_abs_f32>
}
 8004038:	bf00      	nop
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	0801420c 	.word	0x0801420c

08004044 <complex_inst_absolute>:

// To use with complex input values
void complex_inst_absolute(float32_t in[], float32_t out[]){
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
	arm_cmplx_mag_f32(&in[0], &out[0], frameSize);
 800404e:	4b05      	ldr	r3, [pc, #20]	; (8004064 <complex_inst_absolute+0x20>)
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	6839      	ldr	r1, [r7, #0]
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fc fdcc 	bl	8000bf4 <arm_cmplx_mag_f32>
}
 800405c:	bf00      	nop
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	0801420c 	.word	0x0801420c

08004068 <inst_phase>:

void inst_phase(float32_t in[], float32_t out[]){
 8004068:	b590      	push	{r4, r7, lr}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
	int j = 0;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8004076:	2300      	movs	r3, #0
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	e020      	b.n	80040be <inst_phase+0x56>
		out[j] = atan2f(in[i+1], in[i]);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	3301      	adds	r3, #1
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4413      	add	r3, r2
 8004086:	edd3 7a00 	vldr	s15, [r3]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	4413      	add	r3, r2
 8004092:	ed93 7a00 	vldr	s14, [r3]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	18d4      	adds	r4, r2, r3
 800409e:	eef0 0a47 	vmov.f32	s1, s14
 80040a2:	eeb0 0a67 	vmov.f32	s0, s15
 80040a6:	f009 ffcf 	bl	800e048 <atan2f>
 80040aa:	eef0 7a40 	vmov.f32	s15, s0
 80040ae:	edc4 7a00 	vstr	s15, [r4]
		j++;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3301      	adds	r3, #1
 80040b6:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	3302      	adds	r3, #2
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <inst_phase+0x6c>)
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	dbd8      	blt.n	800407c <inst_phase+0x14>
	}
}
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd90      	pop	{r4, r7, pc}
 80040d2:	bf00      	nop
 80040d4:	0801420c 	.word	0x0801420c

080040d8 <unwrap>:

void unwrap(float32_t in[], float32_t out[]){
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
	uint16_t k = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	82fb      	strh	r3, [r7, #22]
	float32_t alpha = M_PI;
 80040e6:	4b48      	ldr	r3, [pc, #288]	; (8004208 <unwrap+0x130>)
 80040e8:	60fb      	str	r3, [r7, #12]
	float32_t diff = 0.0f;
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < (frameSize - 1); i++){
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	e052      	b.n	800419c <unwrap+0xc4>
		out[i] = in[i] + 2*M_PI*k;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4413      	add	r3, r2
 80040fe:	edd3 7a00 	vldr	s15, [r3]
 8004102:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004106:	8afb      	ldrh	r3, [r7, #22]
 8004108:	ee07 3a90 	vmov	s15, r3
 800410c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004110:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8004200 <unwrap+0x128>
 8004114:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004118:	ee36 7b07 	vadd.f64	d7, d6, d7
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	4413      	add	r3, r2
 8004124:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004128:	edc3 7a00 	vstr	s15, [r3]
		diff = fabsf(in[i+1] - in[i]);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	3301      	adds	r3, #1
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	4413      	add	r3, r2
 8004136:	ed93 7a00 	vldr	s14, [r3]
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	4413      	add	r3, r2
 8004142:	edd3 7a00 	vldr	s15, [r3]
 8004146:	ee77 7a67 	vsub.f32	s15, s14, s15
 800414a:	eef0 7ae7 	vabs.f32	s15, s15
 800414e:	edc7 7a02 	vstr	s15, [r7, #8]
		if(diff > alpha){
 8004152:	ed97 7a02 	vldr	s14, [r7, #8]
 8004156:	edd7 7a03 	vldr	s15, [r7, #12]
 800415a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800415e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004162:	dd18      	ble.n	8004196 <unwrap+0xbe>
			if(in[i+1] < in[i]){
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	3301      	adds	r3, #1
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	4413      	add	r3, r2
 800416e:	ed93 7a00 	vldr	s14, [r3]
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	4413      	add	r3, r2
 800417a:	edd3 7a00 	vldr	s15, [r3]
 800417e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004186:	d503      	bpl.n	8004190 <unwrap+0xb8>
				k++;
 8004188:	8afb      	ldrh	r3, [r7, #22]
 800418a:	3301      	adds	r3, #1
 800418c:	82fb      	strh	r3, [r7, #22]
 800418e:	e002      	b.n	8004196 <unwrap+0xbe>
			} else {
				k--;
 8004190:	8afb      	ldrh	r3, [r7, #22]
 8004192:	3b01      	subs	r3, #1
 8004194:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (frameSize - 1); i++){
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	3301      	adds	r3, #1
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	4b1b      	ldr	r3, [pc, #108]	; (800420c <unwrap+0x134>)
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	dba6      	blt.n	80040f6 <unwrap+0x1e>
			}
		}
	}
	out[frameSize-1] = in[frameSize-1] + 2*M_PI*k;
 80041a8:	4b18      	ldr	r3, [pc, #96]	; (800420c <unwrap+0x134>)
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	4413      	add	r3, r2
 80041ba:	edd3 7a00 	vldr	s15, [r3]
 80041be:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80041c2:	8afb      	ldrh	r3, [r7, #22]
 80041c4:	ee07 3a90 	vmov	s15, r3
 80041c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80041cc:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8004200 <unwrap+0x128>
 80041d0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80041d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80041d8:	4b0c      	ldr	r3, [pc, #48]	; (800420c <unwrap+0x134>)
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	461a      	mov	r2, r3
 80041de:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	4413      	add	r3, r2
 80041ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80041ee:	edc3 7a00 	vstr	s15, [r3]
}
 80041f2:	bf00      	nop
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	54442d18 	.word	0x54442d18
 8004204:	401921fb 	.word	0x401921fb
 8004208:	40490fdb 	.word	0x40490fdb
 800420c:	0801420c 	.word	0x0801420c

08004210 <inst_frequency>:

void inst_frequency(float32_t in[], float32_t out[]){
 8004210:	b580      	push	{r7, lr}
 8004212:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	4b53      	ldr	r3, [pc, #332]	; (8004368 <inst_frequency+0x158>)
 800421c:	f244 0210 	movw	r2, #16400	; 0x4010
 8004220:	443a      	add	r2, r7
 8004222:	4413      	add	r3, r2
 8004224:	6018      	str	r0, [r3, #0]
 8004226:	4b51      	ldr	r3, [pc, #324]	; (800436c <inst_frequency+0x15c>)
 8004228:	f244 0210 	movw	r2, #16400	; 0x4010
 800422c:	443a      	add	r2, r7
 800422e:	4413      	add	r3, r2
 8004230:	6019      	str	r1, [r3, #0]
	float32_t phase[2048] = {0};
 8004232:	4b4f      	ldr	r3, [pc, #316]	; (8004370 <inst_frequency+0x160>)
 8004234:	f244 0210 	movw	r2, #16400	; 0x4010
 8004238:	443a      	add	r2, r7
 800423a:	4413      	add	r3, r2
 800423c:	4618      	mov	r0, r3
 800423e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004242:	461a      	mov	r2, r3
 8004244:	2100      	movs	r1, #0
 8004246:	f009 fcc8 	bl	800dbda <memset>
	float32_t unwrapped_phase[2048] = {0};
 800424a:	4b4a      	ldr	r3, [pc, #296]	; (8004374 <inst_frequency+0x164>)
 800424c:	f244 0210 	movw	r2, #16400	; 0x4010
 8004250:	443a      	add	r2, r7
 8004252:	4413      	add	r3, r2
 8004254:	4618      	mov	r0, r3
 8004256:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800425a:	461a      	mov	r2, r3
 800425c:	2100      	movs	r1, #0
 800425e:	f009 fcbc 	bl	800dbda <memset>
	float32_t C = 1 / M_TWOPI;
 8004262:	4b45      	ldr	r3, [pc, #276]	; (8004378 <inst_frequency+0x168>)
 8004264:	f244 0208 	movw	r2, #16392	; 0x4008
 8004268:	443a      	add	r2, r7
 800426a:	6013      	str	r3, [r2, #0]
	inst_phase(&in[0], &phase[0]);
 800426c:	4a40      	ldr	r2, [pc, #256]	; (8004370 <inst_frequency+0x160>)
 800426e:	f244 0310 	movw	r3, #16400	; 0x4010
 8004272:	443b      	add	r3, r7
 8004274:	441a      	add	r2, r3
 8004276:	4b3c      	ldr	r3, [pc, #240]	; (8004368 <inst_frequency+0x158>)
 8004278:	f244 0110 	movw	r1, #16400	; 0x4010
 800427c:	4439      	add	r1, r7
 800427e:	440b      	add	r3, r1
 8004280:	4611      	mov	r1, r2
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	f7ff fef0 	bl	8004068 <inst_phase>
	unwrap(&phase[0], &unwrapped_phase[0]);
 8004288:	4a3a      	ldr	r2, [pc, #232]	; (8004374 <inst_frequency+0x164>)
 800428a:	f244 0310 	movw	r3, #16400	; 0x4010
 800428e:	443b      	add	r3, r7
 8004290:	441a      	add	r2, r3
 8004292:	4b37      	ldr	r3, [pc, #220]	; (8004370 <inst_frequency+0x160>)
 8004294:	f244 0110 	movw	r1, #16400	; 0x4010
 8004298:	4439      	add	r1, r7
 800429a:	440b      	add	r3, r1
 800429c:	4611      	mov	r1, r2
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff ff1a 	bl	80040d8 <unwrap>
	for(int i = 0; i < (frameSize-1); i++){
 80042a4:	2300      	movs	r3, #0
 80042a6:	f244 020c 	movw	r2, #16396	; 0x400c
 80042aa:	443a      	add	r2, r7
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e03a      	b.n	8004326 <inst_frequency+0x116>
		out[i] = C*(unwrapped_phase[i + 1] - unwrapped_phase[i]);
 80042b0:	f244 030c 	movw	r3, #16396	; 0x400c
 80042b4:	443b      	add	r3, r7
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	4b2e      	ldr	r3, [pc, #184]	; (8004374 <inst_frequency+0x164>)
 80042bc:	f244 0110 	movw	r1, #16400	; 0x4010
 80042c0:	4439      	add	r1, r7
 80042c2:	440b      	add	r3, r1
 80042c4:	0092      	lsls	r2, r2, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	ed93 7a00 	vldr	s14, [r3]
 80042cc:	4b29      	ldr	r3, [pc, #164]	; (8004374 <inst_frequency+0x164>)
 80042ce:	f244 0210 	movw	r2, #16400	; 0x4010
 80042d2:	443a      	add	r2, r7
 80042d4:	4413      	add	r3, r2
 80042d6:	f244 020c 	movw	r2, #16396	; 0x400c
 80042da:	443a      	add	r2, r7
 80042dc:	6812      	ldr	r2, [r2, #0]
 80042de:	0092      	lsls	r2, r2, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	edd3 7a00 	vldr	s15, [r3]
 80042e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042ea:	f244 030c 	movw	r3, #16396	; 0x400c
 80042ee:	443b      	add	r3, r7
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	009a      	lsls	r2, r3, #2
 80042f4:	4b1d      	ldr	r3, [pc, #116]	; (800436c <inst_frequency+0x15c>)
 80042f6:	f244 0110 	movw	r1, #16400	; 0x4010
 80042fa:	4439      	add	r1, r7
 80042fc:	440b      	add	r3, r1
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4413      	add	r3, r2
 8004302:	f244 0208 	movw	r2, #16392	; 0x4008
 8004306:	443a      	add	r2, r7
 8004308:	edd2 7a00 	vldr	s15, [r2]
 800430c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004310:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < (frameSize-1); i++){
 8004314:	f244 030c 	movw	r3, #16396	; 0x400c
 8004318:	443b      	add	r3, r7
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3301      	adds	r3, #1
 800431e:	f244 020c 	movw	r2, #16396	; 0x400c
 8004322:	443a      	add	r2, r7
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	4b15      	ldr	r3, [pc, #84]	; (800437c <inst_frequency+0x16c>)
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	3b01      	subs	r3, #1
 800432c:	f244 020c 	movw	r2, #16396	; 0x400c
 8004330:	443a      	add	r2, r7
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	dbbb      	blt.n	80042b0 <inst_frequency+0xa0>
	}
	out[frameSize - 1] = 0;
 8004338:	4b10      	ldr	r3, [pc, #64]	; (800437c <inst_frequency+0x16c>)
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004342:	4413      	add	r3, r2
 8004344:	009a      	lsls	r2, r3, #2
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <inst_frequency+0x15c>)
 8004348:	f244 0110 	movw	r1, #16400	; 0x4010
 800434c:	4439      	add	r1, r7
 800434e:	440b      	add	r3, r1
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4413      	add	r3, r2
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
}
 800435a:	bf00      	nop
 800435c:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	ffffbff4 	.word	0xffffbff4
 800436c:	ffffbff0 	.word	0xffffbff0
 8004370:	ffffdff8 	.word	0xffffdff8
 8004374:	ffffbff8 	.word	0xffffbff8
 8004378:	3e22f983 	.word	0x3e22f983
 800437c:	0801420c 	.word	0x0801420c

08004380 <inst_centralized_normalized_absolute>:

void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 8004380:	b580      	push	{r7, lr}
 8004382:	b08a      	sub	sp, #40	; 0x28
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
	float32_t mean = 0, max = 0;
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	613b      	str	r3, [r7, #16]
	uint32_t max_index = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]
	float32_t *absolute, *normalized;
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 800439a:	4b36      	ldr	r3, [pc, #216]	; (8004474 <inst_centralized_normalized_absolute+0xf4>)
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f009 f9c9 	bl	800d738 <malloc>
 80043a6:	4603      	mov	r3, r0
 80043a8:	61fb      	str	r3, [r7, #28]
	normalized = (float32_t *) malloc(frameSize * sizeof(float32_t));
 80043aa:	4b32      	ldr	r3, [pc, #200]	; (8004474 <inst_centralized_normalized_absolute+0xf4>)
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f009 f9c1 	bl	800d738 <malloc>
 80043b6:	4603      	mov	r3, r0
 80043b8:	61bb      	str	r3, [r7, #24]
	complex_inst_absolute(in, &absolute[0]);
 80043ba:	69f9      	ldr	r1, [r7, #28]
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff fe41 	bl	8004044 <complex_inst_absolute>
	arm_max_f32(absolute, frameSize, &max, &max_index);
 80043c2:	4b2c      	ldr	r3, [pc, #176]	; (8004474 <inst_centralized_normalized_absolute+0xf4>)
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	4619      	mov	r1, r3
 80043c8:	f107 030c 	add.w	r3, r7, #12
 80043cc:	f107 0210 	add.w	r2, r7, #16
 80043d0:	69f8      	ldr	r0, [r7, #28]
 80043d2:	f7fc fe83 	bl	80010dc <arm_max_f32>
	for(int a = 0; a < frameSize; a++){
 80043d6:	2300      	movs	r3, #0
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
 80043da:	e012      	b.n	8004402 <inst_centralized_normalized_absolute+0x82>
		normalized[a] = absolute[a] / max;
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	69fa      	ldr	r2, [r7, #28]
 80043e2:	4413      	add	r3, r2
 80043e4:	edd3 6a00 	vldr	s13, [r3]
 80043e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4413      	add	r3, r2
 80043f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043f8:	edc3 7a00 	vstr	s15, [r3]
	for(int a = 0; a < frameSize; a++){
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	3301      	adds	r3, #1
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
 8004402:	4b1c      	ldr	r3, [pc, #112]	; (8004474 <inst_centralized_normalized_absolute+0xf4>)
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	4293      	cmp	r3, r2
 800440c:	dbe6      	blt.n	80043dc <inst_centralized_normalized_absolute+0x5c>
	}
	arm_mean_f32(&normalized[0], frameSize, &mean);
 800440e:	4b19      	ldr	r3, [pc, #100]	; (8004474 <inst_centralized_normalized_absolute+0xf4>)
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	4619      	mov	r1, r3
 8004414:	f107 0314 	add.w	r3, r7, #20
 8004418:	461a      	mov	r2, r3
 800441a:	69b8      	ldr	r0, [r7, #24]
 800441c:	f7fc fef4 	bl	8001208 <arm_mean_f32>
	for(int i = 0; i < frameSize; i++){
 8004420:	2300      	movs	r3, #0
 8004422:	623b      	str	r3, [r7, #32]
 8004424:	e016      	b.n	8004454 <inst_centralized_normalized_absolute+0xd4>
		out[i] = normalized[i] / mean - 1;
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	4413      	add	r3, r2
 800442e:	edd3 6a00 	vldr	s13, [r3]
 8004432:	ed97 7a05 	vldr	s14, [r7, #20]
 8004436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	4413      	add	r3, r2
 8004442:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004446:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800444a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < frameSize; i++){
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	3301      	adds	r3, #1
 8004452:	623b      	str	r3, [r7, #32]
 8004454:	4b07      	ldr	r3, [pc, #28]	; (8004474 <inst_centralized_normalized_absolute+0xf4>)
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	4293      	cmp	r3, r2
 800445e:	dbe2      	blt.n	8004426 <inst_centralized_normalized_absolute+0xa6>
	}
	free(absolute);
 8004460:	69f8      	ldr	r0, [r7, #28]
 8004462:	f009 f971 	bl	800d748 <free>
	free(normalized);
 8004466:	69b8      	ldr	r0, [r7, #24]
 8004468:	f009 f96e 	bl	800d748 <free>
}
 800446c:	bf00      	nop
 800446e:	3728      	adds	r7, #40	; 0x28
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	0801420c 	.word	0x0801420c

08004478 <std_dev>:

void std_dev(float32_t in[], float32_t *out) {
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
	arm_std_f32(&in[0], frameSize, out);
 8004482:	4b05      	ldr	r3, [pc, #20]	; (8004498 <std_dev+0x20>)
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	4619      	mov	r1, r3
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fc ffc1 	bl	8001412 <arm_std_f32>
}
 8004490:	bf00      	nop
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	0801420c 	.word	0x0801420c

0800449c <mean_of_signal_magnitude>:
//**********************************************************************************************//
// Feature number 6
void mean_of_signal_magnitude(float32_t in[], float32_t *out) {
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
	arm_mean_f32(&in[0], frameSize, out);
 80044a6:	4b05      	ldr	r3, [pc, #20]	; (80044bc <mean_of_signal_magnitude+0x20>)
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	4619      	mov	r1, r3
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fc feaa 	bl	8001208 <arm_mean_f32>
}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	0801420c 	.word	0x0801420c

080044c0 <squared_mean_of_signal_magnitude>:

// Feature number 7
void squared_mean_of_signal_magnitude(float32_t in[], float32_t *out) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
	float32_t mean_of_signal_magnitude;
	arm_mean_f32(&in[0], frameSize, &mean_of_signal_magnitude);
 80044ca:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <squared_mean_of_signal_magnitude+0x38>)
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	4619      	mov	r1, r3
 80044d0:	f107 030c 	add.w	r3, r7, #12
 80044d4:	461a      	mov	r2, r3
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fc fe96 	bl	8001208 <arm_mean_f32>
	*out = mean_of_signal_magnitude * mean_of_signal_magnitude;
 80044dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80044e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80044e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	edc3 7a00 	vstr	s15, [r3]
}
 80044ee:	bf00      	nop
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	0801420c 	.word	0x0801420c

080044fc <normalized_sqrt_of_sum_of_amp>:

// Feature number 8
void normalized_sqrt_of_sum_of_amp(float32_t in[], float32_t *out) {
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
	float32_t sum = 0.0f;
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < frameSize; i++){
 800450c:	2300      	movs	r3, #0
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	e00e      	b.n	8004530 <normalized_sqrt_of_sum_of_amp+0x34>
		sum += in[i];
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	4413      	add	r3, r2
 800451a:	edd3 7a00 	vldr	s15, [r3]
 800451e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004526:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < frameSize; i++){
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	3301      	adds	r3, #1
 800452e:	60bb      	str	r3, [r7, #8]
 8004530:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <normalized_sqrt_of_sum_of_amp+0x6c>)
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	4293      	cmp	r3, r2
 800453a:	dbea      	blt.n	8004512 <normalized_sqrt_of_sum_of_amp+0x16>
	}
	*out = sqrtf(sum)/frameSize;
 800453c:	ed97 0a03 	vldr	s0, [r7, #12]
 8004540:	f009 fd86 	bl	800e050 <sqrtf>
 8004544:	eef0 6a40 	vmov.f32	s13, s0
 8004548:	4b07      	ldr	r3, [pc, #28]	; (8004568 <normalized_sqrt_of_sum_of_amp+0x6c>)
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	ee07 3a90 	vmov	s15, r3
 8004550:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	edc3 7a00 	vstr	s15, [r3]
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	0801420c 	.word	0x0801420c

0800456c <ratio_iq>:

// Feature number 9
void ratio_iq(float32_t in[], float32_t *out) {
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
	// ft_output = np.sum(np.power(np.imag(signal_input), 2)) / np.sum(np.power(np.real(signal_input), 2))
	float32_t sum_of_real_squared = 0.0f;
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
	float32_t sum_of_imag_squared = 0.0f;
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 2*frameSize; i+=2){
 8004582:	2300      	movs	r3, #0
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	e02c      	b.n	80045e2 <ratio_iq+0x76>
		sum_of_real_squared += in[i]*in[i];
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	4413      	add	r3, r2
 8004590:	ed93 7a00 	vldr	s14, [r3]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	4413      	add	r3, r2
 800459c:	edd3 7a00 	vldr	s15, [r3]
 80045a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80045a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045ac:	edc7 7a05 	vstr	s15, [r7, #20]
		sum_of_imag_squared += in[i+1]*in[i+1];
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	3301      	adds	r3, #1
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	4413      	add	r3, r2
 80045ba:	ed93 7a00 	vldr	s14, [r3]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3301      	adds	r3, #1
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	4413      	add	r3, r2
 80045c8:	edd3 7a00 	vldr	s15, [r3]
 80045cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80045d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045d8:	edc7 7a04 	vstr	s15, [r7, #16]
	for(int i = 0; i < 2*frameSize; i+=2){
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3302      	adds	r3, #2
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	4b0a      	ldr	r3, [pc, #40]	; (800460c <ratio_iq+0xa0>)
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	dbcc      	blt.n	8004588 <ratio_iq+0x1c>
	}
	*out = sum_of_imag_squared / sum_of_real_squared;
 80045ee:	edd7 6a04 	vldr	s13, [r7, #16]
 80045f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80045f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	edc3 7a00 	vstr	s15, [r3]
}
 8004600:	bf00      	nop
 8004602:	371c      	adds	r7, #28
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	0801420c 	.word	0x0801420c

08004610 <gmax>:

// Feature number 10
void gmax(float32_t in[], float32_t *out){
 8004610:	b580      	push	{r7, lr}
 8004612:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 8004616:	b08a      	sub	sp, #40	; 0x28
 8004618:	af00      	add	r7, sp, #0
 800461a:	4b61      	ldr	r3, [pc, #388]	; (80047a0 <gmax+0x190>)
 800461c:	f244 0228 	movw	r2, #16424	; 0x4028
 8004620:	443a      	add	r2, r7
 8004622:	4413      	add	r3, r2
 8004624:	6018      	str	r0, [r3, #0]
 8004626:	4b5f      	ldr	r3, [pc, #380]	; (80047a4 <gmax+0x194>)
 8004628:	f244 0228 	movw	r2, #16424	; 0x4028
 800462c:	443a      	add	r2, r7
 800462e:	4413      	add	r3, r2
 8004630:	6019      	str	r1, [r3, #0]
	uint32_t fftSize = 2048;
 8004632:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004636:	f244 0220 	movw	r2, #16416	; 0x4020
 800463a:	443a      	add	r2, r7
 800463c:	6013      	str	r3, [r2, #0]
	uint32_t ifftFlag = 0;
 800463e:	2300      	movs	r3, #0
 8004640:	f244 021c 	movw	r2, #16412	; 0x401c
 8004644:	443a      	add	r2, r7
 8004646:	6013      	str	r3, [r2, #0]
	uint32_t doBitReverse = 1;
 8004648:	2301      	movs	r3, #1
 800464a:	f244 0218 	movw	r2, #16408	; 0x4018
 800464e:	443a      	add	r2, r7
 8004650:	6013      	str	r3, [r2, #0]
	uint32_t maxValueIndex; //Unused
	float32_t maxValue;
	float32_t *result_mag;
	float32_t result_fft[4096] = {0};
 8004652:	4b55      	ldr	r3, [pc, #340]	; (80047a8 <gmax+0x198>)
 8004654:	f244 0228 	movw	r2, #16424	; 0x4028
 8004658:	443a      	add	r2, r7
 800465a:	4413      	add	r3, r2
 800465c:	4618      	mov	r0, r3
 800465e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004662:	461a      	mov	r2, r3
 8004664:	2100      	movs	r1, #0
 8004666:	f009 fab8 	bl	800dbda <memset>

	result_mag = (float32_t *) malloc(fftSize * sizeof(float32_t));
 800466a:	f244 0320 	movw	r3, #16416	; 0x4020
 800466e:	443b      	add	r3, r7
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4618      	mov	r0, r3
 8004676:	f009 f85f 	bl	800d738 <malloc>
 800467a:	4603      	mov	r3, r0
 800467c:	f244 0214 	movw	r2, #16404	; 0x4014
 8004680:	443a      	add	r2, r7
 8004682:	6013      	str	r3, [r2, #0]

	// Copy array to calculate
	for(int i = 0; i < frameSize*2; i++){
 8004684:	2300      	movs	r3, #0
 8004686:	f244 0224 	movw	r2, #16420	; 0x4024
 800468a:	443a      	add	r2, r7
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e021      	b.n	80046d4 <gmax+0xc4>
		result_fft[i] = in[i];
 8004690:	f244 0324 	movw	r3, #16420	; 0x4024
 8004694:	443b      	add	r3, r7
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	009a      	lsls	r2, r3, #2
 800469a:	4b41      	ldr	r3, [pc, #260]	; (80047a0 <gmax+0x190>)
 800469c:	f244 0128 	movw	r1, #16424	; 0x4028
 80046a0:	4439      	add	r1, r7
 80046a2:	440b      	add	r3, r1
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4413      	add	r3, r2
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4b3f      	ldr	r3, [pc, #252]	; (80047a8 <gmax+0x198>)
 80046ac:	f244 0128 	movw	r1, #16424	; 0x4028
 80046b0:	4439      	add	r1, r7
 80046b2:	440b      	add	r3, r1
 80046b4:	f244 0124 	movw	r1, #16420	; 0x4024
 80046b8:	4439      	add	r1, r7
 80046ba:	6809      	ldr	r1, [r1, #0]
 80046bc:	0089      	lsls	r1, r1, #2
 80046be:	440b      	add	r3, r1
 80046c0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < frameSize*2; i++){
 80046c2:	f244 0324 	movw	r3, #16420	; 0x4024
 80046c6:	443b      	add	r3, r7
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3301      	adds	r3, #1
 80046cc:	f244 0224 	movw	r2, #16420	; 0x4024
 80046d0:	443a      	add	r2, r7
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	4b35      	ldr	r3, [pc, #212]	; (80047ac <gmax+0x19c>)
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	f244 0224 	movw	r2, #16420	; 0x4024
 80046de:	443a      	add	r2, r7
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	dbd4      	blt.n	8004690 <gmax+0x80>
	}

	arm_cfft_f32(&arm_cfft_sR_f32_len2048, &result_fft[0], ifftFlag, doBitReverse);
 80046e6:	f244 031c 	movw	r3, #16412	; 0x401c
 80046ea:	443b      	add	r3, r7
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	f244 0318 	movw	r3, #16408	; 0x4018
 80046f4:	443b      	add	r3, r7
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	492b      	ldr	r1, [pc, #172]	; (80047a8 <gmax+0x198>)
 80046fc:	f244 0028 	movw	r0, #16424	; 0x4028
 8004700:	4438      	add	r0, r7
 8004702:	4401      	add	r1, r0
 8004704:	482a      	ldr	r0, [pc, #168]	; (80047b0 <gmax+0x1a0>)
 8004706:	f7fe f833 	bl	8002770 <arm_cfft_f32>
	arm_cmplx_mag_f32(result_fft, result_mag, fftSize);
 800470a:	4b27      	ldr	r3, [pc, #156]	; (80047a8 <gmax+0x198>)
 800470c:	f244 0228 	movw	r2, #16424	; 0x4028
 8004710:	443a      	add	r2, r7
 8004712:	4413      	add	r3, r2
 8004714:	f244 0220 	movw	r2, #16416	; 0x4020
 8004718:	443a      	add	r2, r7
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	f244 0114 	movw	r1, #16404	; 0x4014
 8004720:	4439      	add	r1, r7
 8004722:	6809      	ldr	r1, [r1, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f7fc fa65 	bl	8000bf4 <arm_cmplx_mag_f32>
	arm_max_f32(result_mag, fftSize, &maxValue, &maxValueIndex);
 800472a:	f244 0310 	movw	r3, #16400	; 0x4010
 800472e:	443b      	add	r3, r7
 8004730:	f244 020c 	movw	r2, #16396	; 0x400c
 8004734:	443a      	add	r2, r7
 8004736:	f244 0120 	movw	r1, #16416	; 0x4020
 800473a:	4439      	add	r1, r7
 800473c:	6809      	ldr	r1, [r1, #0]
 800473e:	f244 0014 	movw	r0, #16404	; 0x4014
 8004742:	4438      	add	r0, r7
 8004744:	6800      	ldr	r0, [r0, #0]
 8004746:	f7fc fcc9 	bl	80010dc <arm_max_f32>
	*out = maxValue*maxValue/fftSize;
 800474a:	f244 030c 	movw	r3, #16396	; 0x400c
 800474e:	443b      	add	r3, r7
 8004750:	ed93 7a00 	vldr	s14, [r3]
 8004754:	f244 030c 	movw	r3, #16396	; 0x400c
 8004758:	443b      	add	r3, r7
 800475a:	edd3 7a00 	vldr	s15, [r3]
 800475e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004762:	f244 0320 	movw	r3, #16416	; 0x4020
 8004766:	443b      	add	r3, r7
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	ee07 3a90 	vmov	s15, r3
 800476e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004776:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <gmax+0x194>)
 8004778:	f244 0228 	movw	r2, #16424	; 0x4028
 800477c:	443a      	add	r2, r7
 800477e:	4413      	add	r3, r2
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	edc3 7a00 	vstr	s15, [r3]
	free(result_mag);
 8004786:	f244 0314 	movw	r3, #16404	; 0x4014
 800478a:	443b      	add	r3, r7
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	f008 ffdb 	bl	800d748 <free>
}
 8004792:	bf00      	nop
 8004794:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 8004798:	3728      	adds	r7, #40	; 0x28
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	ffffbfdc 	.word	0xffffbfdc
 80047a4:	ffffbfd8 	.word	0xffffbfd8
 80047a8:	ffffbfe4 	.word	0xffffbfe4
 80047ac:	0801420c 	.word	0x0801420c
 80047b0:	080141fc 	.word	0x080141fc

080047b4 <kurtosis_of_abs_amplitude>:

// Features number 11 and 12
void kurtosis_of_abs_amplitude(float32_t in[], float32_t *out, uint32_t blockSize){
 80047b4:	b5b0      	push	{r4, r5, r7, lr}
 80047b6:	b094      	sub	sp, #80	; 0x50
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
 80047c0:	466b      	mov	r3, sp
 80047c2:	461d      	mov	r5, r3
	float32_t mean_array[blockSize];
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	4603      	mov	r3, r0
 80047c8:	3b01      	subs	r3, #1
 80047ca:	637b      	str	r3, [r7, #52]	; 0x34
 80047cc:	4601      	mov	r1, r0
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	f04f 0400 	mov.w	r4, #0
 80047da:	0154      	lsls	r4, r2, #5
 80047dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047e0:	014b      	lsls	r3, r1, #5
 80047e2:	4601      	mov	r1, r0
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	f04f 0400 	mov.w	r4, #0
 80047f0:	0154      	lsls	r4, r2, #5
 80047f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047f6:	014b      	lsls	r3, r1, #5
 80047f8:	0083      	lsls	r3, r0, #2
 80047fa:	3303      	adds	r3, #3
 80047fc:	3307      	adds	r3, #7
 80047fe:	08db      	lsrs	r3, r3, #3
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	ebad 0d03 	sub.w	sp, sp, r3
 8004806:	466b      	mov	r3, sp
 8004808:	3303      	adds	r3, #3
 800480a:	089b      	lsrs	r3, r3, #2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t x_1[blockSize];
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	4603      	mov	r3, r0
 8004814:	3b01      	subs	r3, #1
 8004816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004818:	4601      	mov	r1, r0
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	f04f 0400 	mov.w	r4, #0
 8004826:	0154      	lsls	r4, r2, #5
 8004828:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800482c:	014b      	lsls	r3, r1, #5
 800482e:	4601      	mov	r1, r0
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	f04f 0400 	mov.w	r4, #0
 800483c:	0154      	lsls	r4, r2, #5
 800483e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004842:	014b      	lsls	r3, r1, #5
 8004844:	0083      	lsls	r3, r0, #2
 8004846:	3303      	adds	r3, #3
 8004848:	3307      	adds	r3, #7
 800484a:	08db      	lsrs	r3, r3, #3
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	ebad 0d03 	sub.w	sp, sp, r3
 8004852:	466b      	mov	r3, sp
 8004854:	3303      	adds	r3, #3
 8004856:	089b      	lsrs	r3, r3, #2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t x_2[blockSize];
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4603      	mov	r3, r0
 8004860:	3b01      	subs	r3, #1
 8004862:	647b      	str	r3, [r7, #68]	; 0x44
 8004864:	4601      	mov	r1, r0
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	f04f 0400 	mov.w	r4, #0
 8004872:	0154      	lsls	r4, r2, #5
 8004874:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004878:	014b      	lsls	r3, r1, #5
 800487a:	4601      	mov	r1, r0
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	f04f 0400 	mov.w	r4, #0
 8004888:	0154      	lsls	r4, r2, #5
 800488a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800488e:	014b      	lsls	r3, r1, #5
 8004890:	0083      	lsls	r3, r0, #2
 8004892:	3303      	adds	r3, #3
 8004894:	3307      	adds	r3, #7
 8004896:	08db      	lsrs	r3, r3, #3
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	ebad 0d03 	sub.w	sp, sp, r3
 800489e:	466b      	mov	r3, sp
 80048a0:	3303      	adds	r3, #3
 80048a2:	089b      	lsrs	r3, r3, #2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t temp_1[blockSize];
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	4603      	mov	r3, r0
 80048ac:	3b01      	subs	r3, #1
 80048ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b0:	4601      	mov	r1, r0
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	f04f 0400 	mov.w	r4, #0
 80048be:	0154      	lsls	r4, r2, #5
 80048c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048c4:	014b      	lsls	r3, r1, #5
 80048c6:	4601      	mov	r1, r0
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	f04f 0400 	mov.w	r4, #0
 80048d4:	0154      	lsls	r4, r2, #5
 80048d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048da:	014b      	lsls	r3, r1, #5
 80048dc:	0083      	lsls	r3, r0, #2
 80048de:	3303      	adds	r3, #3
 80048e0:	3307      	adds	r3, #7
 80048e2:	08db      	lsrs	r3, r3, #3
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	ebad 0d03 	sub.w	sp, sp, r3
 80048ea:	466b      	mov	r3, sp
 80048ec:	3303      	adds	r3, #3
 80048ee:	089b      	lsrs	r3, r3, #2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	633b      	str	r3, [r7, #48]	; 0x30
	float32_t temp_2[blockSize];
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	4603      	mov	r3, r0
 80048f8:	3b01      	subs	r3, #1
 80048fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048fc:	4601      	mov	r1, r0
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	f04f 0400 	mov.w	r4, #0
 800490a:	0154      	lsls	r4, r2, #5
 800490c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004910:	014b      	lsls	r3, r1, #5
 8004912:	4601      	mov	r1, r0
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	f04f 0400 	mov.w	r4, #0
 8004920:	0154      	lsls	r4, r2, #5
 8004922:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004926:	014b      	lsls	r3, r1, #5
 8004928:	0083      	lsls	r3, r0, #2
 800492a:	3303      	adds	r3, #3
 800492c:	3307      	adds	r3, #7
 800492e:	08db      	lsrs	r3, r3, #3
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	ebad 0d03 	sub.w	sp, sp, r3
 8004936:	466b      	mov	r3, sp
 8004938:	3303      	adds	r3, #3
 800493a:	089b      	lsrs	r3, r3, #2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t result[blockSize];
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	4603      	mov	r3, r0
 8004944:	3b01      	subs	r3, #1
 8004946:	627b      	str	r3, [r7, #36]	; 0x24
 8004948:	4601      	mov	r1, r0
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	f04f 0400 	mov.w	r4, #0
 8004956:	0154      	lsls	r4, r2, #5
 8004958:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800495c:	014b      	lsls	r3, r1, #5
 800495e:	4601      	mov	r1, r0
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	f04f 0400 	mov.w	r4, #0
 800496c:	0154      	lsls	r4, r2, #5
 800496e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004972:	014b      	lsls	r3, r1, #5
 8004974:	0083      	lsls	r3, r0, #2
 8004976:	3303      	adds	r3, #3
 8004978:	3307      	adds	r3, #7
 800497a:	08db      	lsrs	r3, r3, #3
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	ebad 0d03 	sub.w	sp, sp, r3
 8004982:	466b      	mov	r3, sp
 8004984:	3303      	adds	r3, #3
 8004986:	089b      	lsrs	r3, r3, #2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	623b      	str	r3, [r7, #32]
	float32_t mean, m4, m2;
	// Calculate mean
	arm_mean_f32(&in[0], blockSize, &mean);
 800498c:	f107 031c 	add.w	r3, r7, #28
 8004990:	461a      	mov	r2, r3
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f7fc fc37 	bl	8001208 <arm_mean_f32>
	// Transform scalar into vector
	arm_fill_f32(mean, &mean_array[0], blockSize);
 800499a:	edd7 7a07 	vldr	s15, [r7, #28]
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	4618      	mov	r0, r3
 80049a4:	eeb0 0a67 	vmov.f32	s0, s15
 80049a8:	f7fc fe80 	bl	80016ac <arm_fill_f32>
	// Calculate (x - mean)
	arm_sub_f32(&in[0], &mean_array[0], &x_1[0], blockSize);
 80049ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f7fc f819 	bl	80009ea <arm_sub_f32>
	// Make a copy of (x - mean)
	arm_copy_f32(&x_1[0], &x_2[0], blockSize);
 80049b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fc fe23 	bl	800160a <arm_copy_f32>
	// Calculate (x - mean) ^ 4
	arm_mult_f32(&x_1[0], &x_2[0], &temp_1[0], blockSize); // temp1 = (x - u)^2
 80049c4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80049c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80049c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f7fb ff8a 	bl	80008e4 <arm_mult_f32>
	arm_mult_f32(&temp_1[0], &x_2[0], &temp_2[0], blockSize); // temp2 = (x - u)^3
 80049d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80049d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f7fb ff84 	bl	80008e4 <arm_mult_f32>
	arm_mult_f32(&temp_2[0], &x_2[0], &result[0], blockSize); // result = (x - u)^4
 80049dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80049e0:	6a3a      	ldr	r2, [r7, #32]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f7fb ff7e 	bl	80008e4 <arm_mult_f32>
	// Calculate mean of (x - mean) ^ 4
	arm_mean_f32(&result[0], blockSize, &m4);
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	f107 0218 	add.w	r2, r7, #24
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fc fc09 	bl	8001208 <arm_mean_f32>
	// Calculate mean of (x - mean) ^ 2
	arm_mean_f32(&temp_1[0], blockSize, &m2);
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	f107 0214 	add.w	r2, r7, #20
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fc fc02 	bl	8001208 <arm_mean_f32>
	*out = m4 / (m2*m2) - 3;
 8004a04:	edd7 6a06 	vldr	s13, [r7, #24]
 8004a08:	ed97 7a05 	vldr	s14, [r7, #20]
 8004a0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a18:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004a1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	edc3 7a00 	vstr	s15, [r3]
 8004a26:	46ad      	mov	sp, r5
}
 8004a28:	bf00      	nop
 8004a2a:	3750      	adds	r7, #80	; 0x50
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bdb0      	pop	{r4, r5, r7, pc}

08004a30 <kurtosis_of_abs_freq>:

void kurtosis_of_abs_freq(float32_t in[], float32_t *out, uint32_t blockSize){
 8004a30:	b5b0      	push	{r4, r5, r7, lr}
 8004a32:	b094      	sub	sp, #80	; 0x50
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	466b      	mov	r3, sp
 8004a3e:	461d      	mov	r5, r3
	float32_t mean_array[blockSize];
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	4603      	mov	r3, r0
 8004a44:	3b01      	subs	r3, #1
 8004a46:	637b      	str	r3, [r7, #52]	; 0x34
 8004a48:	4601      	mov	r1, r0
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	f04f 0400 	mov.w	r4, #0
 8004a56:	0154      	lsls	r4, r2, #5
 8004a58:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a5c:	014b      	lsls	r3, r1, #5
 8004a5e:	4601      	mov	r1, r0
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	f04f 0400 	mov.w	r4, #0
 8004a6c:	0154      	lsls	r4, r2, #5
 8004a6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a72:	014b      	lsls	r3, r1, #5
 8004a74:	0083      	lsls	r3, r0, #2
 8004a76:	3303      	adds	r3, #3
 8004a78:	3307      	adds	r3, #7
 8004a7a:	08db      	lsrs	r3, r3, #3
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	ebad 0d03 	sub.w	sp, sp, r3
 8004a82:	466b      	mov	r3, sp
 8004a84:	3303      	adds	r3, #3
 8004a86:	089b      	lsrs	r3, r3, #2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t x_1[blockSize];
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	4603      	mov	r3, r0
 8004a90:	3b01      	subs	r3, #1
 8004a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a94:	4601      	mov	r1, r0
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	f04f 0400 	mov.w	r4, #0
 8004aa2:	0154      	lsls	r4, r2, #5
 8004aa4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004aa8:	014b      	lsls	r3, r1, #5
 8004aaa:	4601      	mov	r1, r0
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	f04f 0400 	mov.w	r4, #0
 8004ab8:	0154      	lsls	r4, r2, #5
 8004aba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004abe:	014b      	lsls	r3, r1, #5
 8004ac0:	0083      	lsls	r3, r0, #2
 8004ac2:	3303      	adds	r3, #3
 8004ac4:	3307      	adds	r3, #7
 8004ac6:	08db      	lsrs	r3, r3, #3
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	ebad 0d03 	sub.w	sp, sp, r3
 8004ace:	466b      	mov	r3, sp
 8004ad0:	3303      	adds	r3, #3
 8004ad2:	089b      	lsrs	r3, r3, #2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t x_2[blockSize];
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	4603      	mov	r3, r0
 8004adc:	3b01      	subs	r3, #1
 8004ade:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae0:	4601      	mov	r1, r0
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	f04f 0400 	mov.w	r4, #0
 8004aee:	0154      	lsls	r4, r2, #5
 8004af0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004af4:	014b      	lsls	r3, r1, #5
 8004af6:	4601      	mov	r1, r0
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	f04f 0400 	mov.w	r4, #0
 8004b04:	0154      	lsls	r4, r2, #5
 8004b06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b0a:	014b      	lsls	r3, r1, #5
 8004b0c:	0083      	lsls	r3, r0, #2
 8004b0e:	3303      	adds	r3, #3
 8004b10:	3307      	adds	r3, #7
 8004b12:	08db      	lsrs	r3, r3, #3
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	ebad 0d03 	sub.w	sp, sp, r3
 8004b1a:	466b      	mov	r3, sp
 8004b1c:	3303      	adds	r3, #3
 8004b1e:	089b      	lsrs	r3, r3, #2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t temp_1[blockSize];
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	4603      	mov	r3, r0
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b2c:	4601      	mov	r1, r0
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	f04f 0400 	mov.w	r4, #0
 8004b3a:	0154      	lsls	r4, r2, #5
 8004b3c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b40:	014b      	lsls	r3, r1, #5
 8004b42:	4601      	mov	r1, r0
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	f04f 0400 	mov.w	r4, #0
 8004b50:	0154      	lsls	r4, r2, #5
 8004b52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b56:	014b      	lsls	r3, r1, #5
 8004b58:	0083      	lsls	r3, r0, #2
 8004b5a:	3303      	adds	r3, #3
 8004b5c:	3307      	adds	r3, #7
 8004b5e:	08db      	lsrs	r3, r3, #3
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	ebad 0d03 	sub.w	sp, sp, r3
 8004b66:	466b      	mov	r3, sp
 8004b68:	3303      	adds	r3, #3
 8004b6a:	089b      	lsrs	r3, r3, #2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	633b      	str	r3, [r7, #48]	; 0x30
	float32_t temp_2[blockSize];
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	4603      	mov	r3, r0
 8004b74:	3b01      	subs	r3, #1
 8004b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b78:	4601      	mov	r1, r0
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	f04f 0400 	mov.w	r4, #0
 8004b86:	0154      	lsls	r4, r2, #5
 8004b88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b8c:	014b      	lsls	r3, r1, #5
 8004b8e:	4601      	mov	r1, r0
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	f04f 0400 	mov.w	r4, #0
 8004b9c:	0154      	lsls	r4, r2, #5
 8004b9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ba2:	014b      	lsls	r3, r1, #5
 8004ba4:	0083      	lsls	r3, r0, #2
 8004ba6:	3303      	adds	r3, #3
 8004ba8:	3307      	adds	r3, #7
 8004baa:	08db      	lsrs	r3, r3, #3
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	ebad 0d03 	sub.w	sp, sp, r3
 8004bb2:	466b      	mov	r3, sp
 8004bb4:	3303      	adds	r3, #3
 8004bb6:	089b      	lsrs	r3, r3, #2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t result[blockSize];
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc4:	4601      	mov	r1, r0
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	f04f 0400 	mov.w	r4, #0
 8004bd2:	0154      	lsls	r4, r2, #5
 8004bd4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004bd8:	014b      	lsls	r3, r1, #5
 8004bda:	4601      	mov	r1, r0
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	f04f 0400 	mov.w	r4, #0
 8004be8:	0154      	lsls	r4, r2, #5
 8004bea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004bee:	014b      	lsls	r3, r1, #5
 8004bf0:	0083      	lsls	r3, r0, #2
 8004bf2:	3303      	adds	r3, #3
 8004bf4:	3307      	adds	r3, #7
 8004bf6:	08db      	lsrs	r3, r3, #3
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	ebad 0d03 	sub.w	sp, sp, r3
 8004bfe:	466b      	mov	r3, sp
 8004c00:	3303      	adds	r3, #3
 8004c02:	089b      	lsrs	r3, r3, #2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	623b      	str	r3, [r7, #32]
	float32_t mean, m4, m2;
	// Calculate mean
	arm_mean_f32(&in[0], blockSize, &mean);
 8004c08:	f107 031c 	add.w	r3, r7, #28
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f7fc faf9 	bl	8001208 <arm_mean_f32>
	// Transform scalar into vector
	arm_fill_f32(mean, &mean_array[0], blockSize);
 8004c16:	edd7 7a07 	vldr	s15, [r7, #28]
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	eeb0 0a67 	vmov.f32	s0, s15
 8004c24:	f7fc fd42 	bl	80016ac <arm_fill_f32>
	// Calculate (x - mean)
	arm_sub_f32(&in[0], &mean_array[0], &x_1[0], blockSize);
 8004c28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f7fb fedb 	bl	80009ea <arm_sub_f32>
	// Make a copy of (x - mean)
	arm_copy_f32(&x_1[0], &x_2[0], blockSize);
 8004c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c36:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fc fce5 	bl	800160a <arm_copy_f32>
	// Calculate (x - mean) ^ 4
	arm_mult_f32(&x_1[0], &x_2[0], &temp_1[0], blockSize); // temp1 = (x - u)^2
 8004c40:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004c42:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f7fb fe4c 	bl	80008e4 <arm_mult_f32>
	arm_mult_f32(&temp_1[0], &x_2[0], &temp_2[0], blockSize); // temp2 = (x - u)^3
 8004c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c4e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f7fb fe46 	bl	80008e4 <arm_mult_f32>
	arm_mult_f32(&temp_2[0], &x_2[0], &result[0], blockSize); // result = (x - u)^4
 8004c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c5a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004c5c:	6a3a      	ldr	r2, [r7, #32]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f7fb fe40 	bl	80008e4 <arm_mult_f32>
	// Calculate mean of (x - mean) ^ 4
	arm_mean_f32(&result[0], blockSize, &m4);
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	f107 0218 	add.w	r2, r7, #24
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fc facb 	bl	8001208 <arm_mean_f32>
	// Calculate mean of (x - mean) ^ 2
	arm_mean_f32(&temp_1[0], blockSize, &m2);
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	f107 0214 	add.w	r2, r7, #20
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fc fac4 	bl	8001208 <arm_mean_f32>
	*out = m4 / (m2*m2) - 3;
 8004c80:	edd7 6a06 	vldr	s13, [r7, #24]
 8004c84:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c88:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c94:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004c98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	edc3 7a00 	vstr	s15, [r3]
 8004ca2:	46ad      	mov	sp, r5
}
 8004ca4:	bf00      	nop
 8004ca6:	3750      	adds	r7, #80	; 0x50
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bdb0      	pop	{r4, r5, r7, pc}

08004cac <moment20>:

// Central moment definition
// Mpq = E[x^(p-q).x*^q]
void moment20(float32_t in[], float32_t *out){
 8004cac:	b5b0      	push	{r4, r5, r7, lr}
 8004cae:	b08c      	sub	sp, #48	; 0x30
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
 8004cb6:	466b      	mov	r3, sp
 8004cb8:	461d      	mov	r5, r3
	float32_t in_cp[frameSize*2];
 8004cba:	4b69      	ldr	r3, [pc, #420]	; (8004e60 <moment20+0x1b4>)
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cc4:	4b66      	ldr	r3, [pc, #408]	; (8004e60 <moment20+0x1b4>)
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	4619      	mov	r1, r3
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	f04f 0400 	mov.w	r4, #0
 8004cd8:	0154      	lsls	r4, r2, #5
 8004cda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004cde:	014b      	lsls	r3, r1, #5
 8004ce0:	4b5f      	ldr	r3, [pc, #380]	; (8004e60 <moment20+0x1b4>)
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	f04f 0400 	mov.w	r4, #0
 8004cf4:	0154      	lsls	r4, r2, #5
 8004cf6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004cfa:	014b      	lsls	r3, r1, #5
 8004cfc:	4b58      	ldr	r3, [pc, #352]	; (8004e60 <moment20+0x1b4>)
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	3303      	adds	r3, #3
 8004d04:	3307      	adds	r3, #7
 8004d06:	08db      	lsrs	r3, r3, #3
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	ebad 0d03 	sub.w	sp, sp, r3
 8004d0e:	466b      	mov	r3, sp
 8004d10:	3303      	adds	r3, #3
 8004d12:	089b      	lsrs	r3, r3, #2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	61fb      	str	r3, [r7, #28]
	float32_t m20[frameSize*2]; // in^2
 8004d18:	4b51      	ldr	r3, [pc, #324]	; (8004e60 <moment20+0x1b4>)
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	61bb      	str	r3, [r7, #24]
 8004d22:	4b4f      	ldr	r3, [pc, #316]	; (8004e60 <moment20+0x1b4>)
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	4619      	mov	r1, r3
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	f04f 0400 	mov.w	r4, #0
 8004d36:	0154      	lsls	r4, r2, #5
 8004d38:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d3c:	014b      	lsls	r3, r1, #5
 8004d3e:	4b48      	ldr	r3, [pc, #288]	; (8004e60 <moment20+0x1b4>)
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	4619      	mov	r1, r3
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	f04f 0400 	mov.w	r4, #0
 8004d52:	0154      	lsls	r4, r2, #5
 8004d54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d58:	014b      	lsls	r3, r1, #5
 8004d5a:	4b41      	ldr	r3, [pc, #260]	; (8004e60 <moment20+0x1b4>)
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	3303      	adds	r3, #3
 8004d62:	3307      	adds	r3, #7
 8004d64:	08db      	lsrs	r3, r3, #3
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	ebad 0d03 	sub.w	sp, sp, r3
 8004d6c:	466b      	mov	r3, sp
 8004d6e:	3303      	adds	r3, #3
 8004d70:	089b      	lsrs	r3, r3, #2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	617b      	str	r3, [r7, #20]
	float32_t m20_real = 0, m20_imag = 0, m20_real_mean = 0, m20_imag_mean = 0;
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	623b      	str	r3, [r7, #32]
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	613b      	str	r3, [r7, #16]
 8004d88:	f04f 0300 	mov.w	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8004d8e:	69f9      	ldr	r1, [r7, #28]
 8004d90:	4b33      	ldr	r3, [pc, #204]	; (8004e60 <moment20+0x1b4>)
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	461a      	mov	r2, r3
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7fc fc36 	bl	800160a <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8004d9e:	69f9      	ldr	r1, [r7, #28]
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	4b2f      	ldr	r3, [pc, #188]	; (8004e60 <moment20+0x1b4>)
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7fc f843 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8004dac:	2300      	movs	r3, #0
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db0:	e01b      	b.n	8004dea <moment20+0x13e>
		m20_real += m20[i];
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	edd3 7a00 	vldr	s15, [r3]
 8004dbe:	ed97 7a08 	vldr	s14, [r7, #32]
 8004dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dc6:	edc7 7a08 	vstr	s15, [r7, #32]
		m20_imag += m20[i+1];
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	3301      	adds	r3, #1
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	edd3 7a00 	vldr	s15, [r3]
 8004dd8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004de0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for(int i = 0; i < frameSize*2; i+=2){
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	3302      	adds	r3, #2
 8004de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dea:	4b1d      	ldr	r3, [pc, #116]	; (8004e60 <moment20+0x1b4>)
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004df2:	429a      	cmp	r2, r3
 8004df4:	dbdd      	blt.n	8004db2 <moment20+0x106>
	}
	m20_real_mean = m20_real / frameSize;
 8004df6:	4b1a      	ldr	r3, [pc, #104]	; (8004e60 <moment20+0x1b4>)
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e02:	edd7 6a08 	vldr	s13, [r7, #32]
 8004e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e0a:	edc7 7a04 	vstr	s15, [r7, #16]
	m20_imag_mean = m20_imag / frameSize;
 8004e0e:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <moment20+0x1b4>)
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e1a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e22:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(m20_real_mean*m20_real_mean + m20_imag_mean*m20_imag_mean);
 8004e26:	ed97 7a04 	vldr	s14, [r7, #16]
 8004e2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e32:	edd7 6a03 	vldr	s13, [r7, #12]
 8004e36:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e42:	eeb0 0a67 	vmov.f32	s0, s15
 8004e46:	f009 f903 	bl	800e050 <sqrtf>
 8004e4a:	eef0 7a40 	vmov.f32	s15, s0
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	edc3 7a00 	vstr	s15, [r3]
 8004e54:	46ad      	mov	sp, r5
}
 8004e56:	bf00      	nop
 8004e58:	3730      	adds	r7, #48	; 0x30
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	0801420c 	.word	0x0801420c

08004e64 <moment21>:

void moment21(float32_t in[], float32_t *out){
 8004e64:	b5b0      	push	{r4, r5, r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
 8004e6e:	466b      	mov	r3, sp
 8004e70:	461d      	mov	r5, r3
	float32_t in_conj[frameSize*2];
 8004e72:	4b55      	ldr	r3, [pc, #340]	; (8004fc8 <moment21+0x164>)
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	4b52      	ldr	r3, [pc, #328]	; (8004fc8 <moment21+0x164>)
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	4619      	mov	r1, r3
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	f04f 0400 	mov.w	r4, #0
 8004e90:	0154      	lsls	r4, r2, #5
 8004e92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e96:	014b      	lsls	r3, r1, #5
 8004e98:	4b4b      	ldr	r3, [pc, #300]	; (8004fc8 <moment21+0x164>)
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	f04f 0400 	mov.w	r4, #0
 8004eac:	0154      	lsls	r4, r2, #5
 8004eae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004eb2:	014b      	lsls	r3, r1, #5
 8004eb4:	4b44      	ldr	r3, [pc, #272]	; (8004fc8 <moment21+0x164>)
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	3303      	adds	r3, #3
 8004ebc:	3307      	adds	r3, #7
 8004ebe:	08db      	lsrs	r3, r3, #3
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	ebad 0d03 	sub.w	sp, sp, r3
 8004ec6:	466b      	mov	r3, sp
 8004ec8:	3303      	adds	r3, #3
 8004eca:	089b      	lsrs	r3, r3, #2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	61bb      	str	r3, [r7, #24]
	float32_t m21[frameSize*2];
 8004ed0:	4b3d      	ldr	r3, [pc, #244]	; (8004fc8 <moment21+0x164>)
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	61fb      	str	r3, [r7, #28]
 8004eda:	4b3b      	ldr	r3, [pc, #236]	; (8004fc8 <moment21+0x164>)
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	f04f 0300 	mov.w	r3, #0
 8004eea:	f04f 0400 	mov.w	r4, #0
 8004eee:	0154      	lsls	r4, r2, #5
 8004ef0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ef4:	014b      	lsls	r3, r1, #5
 8004ef6:	4b34      	ldr	r3, [pc, #208]	; (8004fc8 <moment21+0x164>)
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	4619      	mov	r1, r3
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	f04f 0400 	mov.w	r4, #0
 8004f0a:	0154      	lsls	r4, r2, #5
 8004f0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f10:	014b      	lsls	r3, r1, #5
 8004f12:	4b2d      	ldr	r3, [pc, #180]	; (8004fc8 <moment21+0x164>)
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	3303      	adds	r3, #3
 8004f1a:	3307      	adds	r3, #7
 8004f1c:	08db      	lsrs	r3, r3, #3
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	ebad 0d03 	sub.w	sp, sp, r3
 8004f24:	466b      	mov	r3, sp
 8004f26:	3303      	adds	r3, #3
 8004f28:	089b      	lsrs	r3, r3, #2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	613b      	str	r3, [r7, #16]
	float32_t in_mag[frameSize];
 8004f2e:	4b26      	ldr	r3, [pc, #152]	; (8004fc8 <moment21+0x164>)
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	4b24      	ldr	r3, [pc, #144]	; (8004fc8 <moment21+0x164>)
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b299      	uxth	r1, r3
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	f04f 0300 	mov.w	r3, #0
 8004f44:	f04f 0400 	mov.w	r4, #0
 8004f48:	0154      	lsls	r4, r2, #5
 8004f4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f4e:	014b      	lsls	r3, r1, #5
 8004f50:	4b1d      	ldr	r3, [pc, #116]	; (8004fc8 <moment21+0x164>)
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	b299      	uxth	r1, r3
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	f04f 0300 	mov.w	r3, #0
 8004f5e:	f04f 0400 	mov.w	r4, #0
 8004f62:	0154      	lsls	r4, r2, #5
 8004f64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f68:	014b      	lsls	r3, r1, #5
 8004f6a:	4b17      	ldr	r3, [pc, #92]	; (8004fc8 <moment21+0x164>)
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	3303      	adds	r3, #3
 8004f72:	3307      	adds	r3, #7
 8004f74:	08db      	lsrs	r3, r3, #3
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	ebad 0d03 	sub.w	sp, sp, r3
 8004f7c:	466b      	mov	r3, sp
 8004f7e:	3303      	adds	r3, #3
 8004f80:	089b      	lsrs	r3, r3, #2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	60bb      	str	r3, [r7, #8]
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8004f86:	69b9      	ldr	r1, [r7, #24]
 8004f88:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <moment21+0x164>)
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fb fda6 	bl	8000ae0 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_conj[0], &m21[0], frameSize);
 8004f94:	69b9      	ldr	r1, [r7, #24]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <moment21+0x164>)
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7fb ff48 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mag_f32(&m21[0], &in_mag[0], frameSize);
 8004fa2:	6938      	ldr	r0, [r7, #16]
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <moment21+0x164>)
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	f7fb fe22 	bl	8000bf4 <arm_cmplx_mag_f32>
	arm_mean_f32(&in_mag[0], frameSize, out);
 8004fb0:	68b8      	ldr	r0, [r7, #8]
 8004fb2:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <moment21+0x164>)
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	f7fc f925 	bl	8001208 <arm_mean_f32>
 8004fbe:	46ad      	mov	sp, r5
	// Calculating the mean after the absolute value here works because there
	// is no imaginary part in the number M21, different from M20
}
 8004fc0:	bf00      	nop
 8004fc2:	3720      	adds	r7, #32
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8004fc8:	0801420c 	.word	0x0801420c

08004fcc <moment22>:

void moment22(float32_t in[], float32_t *out){
 8004fcc:	b5b0      	push	{r4, r5, r7, lr}
 8004fce:	b08e      	sub	sp, #56	; 0x38
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
 8004fd6:	466b      	mov	r3, sp
 8004fd8:	461d      	mov	r5, r3
	float32_t in_conj[frameSize*2];
 8004fda:	4b84      	ldr	r3, [pc, #528]	; (80051ec <moment22+0x220>)
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fe4:	4b81      	ldr	r3, [pc, #516]	; (80051ec <moment22+0x220>)
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	4619      	mov	r1, r3
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	f04f 0400 	mov.w	r4, #0
 8004ff8:	0154      	lsls	r4, r2, #5
 8004ffa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ffe:	014b      	lsls	r3, r1, #5
 8005000:	4b7a      	ldr	r3, [pc, #488]	; (80051ec <moment22+0x220>)
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	4619      	mov	r1, r3
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	f04f 0400 	mov.w	r4, #0
 8005014:	0154      	lsls	r4, r2, #5
 8005016:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800501a:	014b      	lsls	r3, r1, #5
 800501c:	4b73      	ldr	r3, [pc, #460]	; (80051ec <moment22+0x220>)
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	3303      	adds	r3, #3
 8005024:	3307      	adds	r3, #7
 8005026:	08db      	lsrs	r3, r3, #3
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	ebad 0d03 	sub.w	sp, sp, r3
 800502e:	466b      	mov	r3, sp
 8005030:	3303      	adds	r3, #3
 8005032:	089b      	lsrs	r3, r3, #2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	633b      	str	r3, [r7, #48]	; 0x30
	float32_t in_conj_cp[frameSize*2];
 8005038:	4b6c      	ldr	r3, [pc, #432]	; (80051ec <moment22+0x220>)
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	3b01      	subs	r3, #1
 8005040:	637b      	str	r3, [r7, #52]	; 0x34
 8005042:	4b6a      	ldr	r3, [pc, #424]	; (80051ec <moment22+0x220>)
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	4619      	mov	r1, r3
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	f04f 0400 	mov.w	r4, #0
 8005056:	0154      	lsls	r4, r2, #5
 8005058:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800505c:	014b      	lsls	r3, r1, #5
 800505e:	4b63      	ldr	r3, [pc, #396]	; (80051ec <moment22+0x220>)
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	4619      	mov	r1, r3
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	f04f 0400 	mov.w	r4, #0
 8005072:	0154      	lsls	r4, r2, #5
 8005074:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005078:	014b      	lsls	r3, r1, #5
 800507a:	4b5c      	ldr	r3, [pc, #368]	; (80051ec <moment22+0x220>)
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	3303      	adds	r3, #3
 8005082:	3307      	adds	r3, #7
 8005084:	08db      	lsrs	r3, r3, #3
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	ebad 0d03 	sub.w	sp, sp, r3
 800508c:	466b      	mov	r3, sp
 800508e:	3303      	adds	r3, #3
 8005090:	089b      	lsrs	r3, r3, #2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	61fb      	str	r3, [r7, #28]
	float32_t m22[frameSize*2]; // in^2
 8005096:	4b55      	ldr	r3, [pc, #340]	; (80051ec <moment22+0x220>)
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	3b01      	subs	r3, #1
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	4b52      	ldr	r3, [pc, #328]	; (80051ec <moment22+0x220>)
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	4619      	mov	r1, r3
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	f04f 0400 	mov.w	r4, #0
 80050b4:	0154      	lsls	r4, r2, #5
 80050b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050ba:	014b      	lsls	r3, r1, #5
 80050bc:	4b4b      	ldr	r3, [pc, #300]	; (80051ec <moment22+0x220>)
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	4619      	mov	r1, r3
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	f04f 0400 	mov.w	r4, #0
 80050d0:	0154      	lsls	r4, r2, #5
 80050d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050d6:	014b      	lsls	r3, r1, #5
 80050d8:	4b44      	ldr	r3, [pc, #272]	; (80051ec <moment22+0x220>)
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	3303      	adds	r3, #3
 80050e0:	3307      	adds	r3, #7
 80050e2:	08db      	lsrs	r3, r3, #3
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	ebad 0d03 	sub.w	sp, sp, r3
 80050ea:	466b      	mov	r3, sp
 80050ec:	3303      	adds	r3, #3
 80050ee:	089b      	lsrs	r3, r3, #2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	617b      	str	r3, [r7, #20]
	float32_t m22_real = 0, m22_imag = 0, m22_real_mean = 0, m22_imag_mean = 0;
 80050f4:	f04f 0300 	mov.w	r3, #0
 80050f8:	623b      	str	r3, [r7, #32]
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	f04f 0300 	mov.w	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 800510c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800510e:	4b37      	ldr	r3, [pc, #220]	; (80051ec <moment22+0x220>)
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7fb fce3 	bl	8000ae0 <arm_cmplx_conj_f32>
	arm_copy_f32(&in_conj[0], &in_conj_cp[0], frameSize*2);
 800511a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800511c:	69f9      	ldr	r1, [r7, #28]
 800511e:	4b33      	ldr	r3, [pc, #204]	; (80051ec <moment22+0x220>)
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	461a      	mov	r2, r3
 8005126:	f7fc fa70 	bl	800160a <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in_conj[0], &in_conj_cp[0], &m22[0], frameSize);
 800512a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800512c:	69f9      	ldr	r1, [r7, #28]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4b2e      	ldr	r3, [pc, #184]	; (80051ec <moment22+0x220>)
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	f7fb fe7d 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8005138:	2300      	movs	r3, #0
 800513a:	62bb      	str	r3, [r7, #40]	; 0x28
 800513c:	e01b      	b.n	8005176 <moment22+0x1aa>
		m22_real += m22[i];
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	edd3 7a00 	vldr	s15, [r3]
 800514a:	ed97 7a08 	vldr	s14, [r7, #32]
 800514e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005152:	edc7 7a08 	vstr	s15, [r7, #32]
		m22_imag += m22[i+1];
 8005156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005158:	3301      	adds	r3, #1
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	edd3 7a00 	vldr	s15, [r3]
 8005164:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005168:	ee77 7a27 	vadd.f32	s15, s14, s15
 800516c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for(int i = 0; i < frameSize*2; i+=2){
 8005170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005172:	3302      	adds	r3, #2
 8005174:	62bb      	str	r3, [r7, #40]	; 0x28
 8005176:	4b1d      	ldr	r3, [pc, #116]	; (80051ec <moment22+0x220>)
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800517e:	429a      	cmp	r2, r3
 8005180:	dbdd      	blt.n	800513e <moment22+0x172>
	}
	m22_real_mean = m22_real / frameSize;
 8005182:	4b1a      	ldr	r3, [pc, #104]	; (80051ec <moment22+0x220>)
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800518e:	edd7 6a08 	vldr	s13, [r7, #32]
 8005192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005196:	edc7 7a04 	vstr	s15, [r7, #16]
	m22_imag_mean = m22_imag / frameSize;
 800519a:	4b14      	ldr	r3, [pc, #80]	; (80051ec <moment22+0x220>)
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	ee07 3a90 	vmov	s15, r3
 80051a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051a6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80051aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051ae:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(m22_real_mean*m22_real_mean + m22_imag_mean*m22_imag_mean);
 80051b2:	ed97 7a04 	vldr	s14, [r7, #16]
 80051b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80051ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051be:	edd7 6a03 	vldr	s13, [r7, #12]
 80051c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80051c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051ce:	eeb0 0a67 	vmov.f32	s0, s15
 80051d2:	f008 ff3d 	bl	800e050 <sqrtf>
 80051d6:	eef0 7a40 	vmov.f32	s15, s0
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	edc3 7a00 	vstr	s15, [r3]
 80051e0:	46ad      	mov	sp, r5
}
 80051e2:	bf00      	nop
 80051e4:	3738      	adds	r7, #56	; 0x38
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bdb0      	pop	{r4, r5, r7, pc}
 80051ea:	bf00      	nop
 80051ec:	0801420c 	.word	0x0801420c

080051f0 <moment40>:

void moment40(float32_t in[], float32_t *out){
 80051f0:	b5b0      	push	{r4, r5, r7, lr}
 80051f2:	b090      	sub	sp, #64	; 0x40
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
 80051fa:	466b      	mov	r3, sp
 80051fc:	461d      	mov	r5, r3
	float32_t in_cp[frameSize*2];
 80051fe:	4b9c      	ldr	r3, [pc, #624]	; (8005470 <moment40+0x280>)
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	3b01      	subs	r3, #1
 8005206:	633b      	str	r3, [r7, #48]	; 0x30
 8005208:	4b99      	ldr	r3, [pc, #612]	; (8005470 <moment40+0x280>)
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	4619      	mov	r1, r3
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	f04f 0400 	mov.w	r4, #0
 800521c:	0154      	lsls	r4, r2, #5
 800521e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005222:	014b      	lsls	r3, r1, #5
 8005224:	4b92      	ldr	r3, [pc, #584]	; (8005470 <moment40+0x280>)
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	4619      	mov	r1, r3
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	f04f 0400 	mov.w	r4, #0
 8005238:	0154      	lsls	r4, r2, #5
 800523a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800523e:	014b      	lsls	r3, r1, #5
 8005240:	4b8b      	ldr	r3, [pc, #556]	; (8005470 <moment40+0x280>)
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	3303      	adds	r3, #3
 8005248:	3307      	adds	r3, #7
 800524a:	08db      	lsrs	r3, r3, #3
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	ebad 0d03 	sub.w	sp, sp, r3
 8005252:	466b      	mov	r3, sp
 8005254:	3303      	adds	r3, #3
 8005256:	089b      	lsrs	r3, r3, #2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	637b      	str	r3, [r7, #52]	; 0x34
	float32_t m20[frameSize*2]; // in^2
 800525c:	4b84      	ldr	r3, [pc, #528]	; (8005470 <moment40+0x280>)
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	3b01      	subs	r3, #1
 8005264:	63bb      	str	r3, [r7, #56]	; 0x38
 8005266:	4b82      	ldr	r3, [pc, #520]	; (8005470 <moment40+0x280>)
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	4619      	mov	r1, r3
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	f04f 0400 	mov.w	r4, #0
 800527a:	0154      	lsls	r4, r2, #5
 800527c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005280:	014b      	lsls	r3, r1, #5
 8005282:	4b7b      	ldr	r3, [pc, #492]	; (8005470 <moment40+0x280>)
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	4619      	mov	r1, r3
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	f04f 0300 	mov.w	r3, #0
 8005292:	f04f 0400 	mov.w	r4, #0
 8005296:	0154      	lsls	r4, r2, #5
 8005298:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800529c:	014b      	lsls	r3, r1, #5
 800529e:	4b74      	ldr	r3, [pc, #464]	; (8005470 <moment40+0x280>)
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	3303      	adds	r3, #3
 80052a6:	3307      	adds	r3, #7
 80052a8:	08db      	lsrs	r3, r3, #3
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	ebad 0d03 	sub.w	sp, sp, r3
 80052b0:	466b      	mov	r3, sp
 80052b2:	3303      	adds	r3, #3
 80052b4:	089b      	lsrs	r3, r3, #2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	float32_t m30[frameSize]; // in^3
 80052ba:	4b6d      	ldr	r3, [pc, #436]	; (8005470 <moment40+0x280>)
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	3b01      	subs	r3, #1
 80052c0:	623b      	str	r3, [r7, #32]
 80052c2:	4b6b      	ldr	r3, [pc, #428]	; (8005470 <moment40+0x280>)
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	b299      	uxth	r1, r3
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	f04f 0400 	mov.w	r4, #0
 80052d4:	0154      	lsls	r4, r2, #5
 80052d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80052da:	014b      	lsls	r3, r1, #5
 80052dc:	4b64      	ldr	r3, [pc, #400]	; (8005470 <moment40+0x280>)
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	b299      	uxth	r1, r3
 80052e2:	f04f 0200 	mov.w	r2, #0
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	f04f 0400 	mov.w	r4, #0
 80052ee:	0154      	lsls	r4, r2, #5
 80052f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80052f4:	014b      	lsls	r3, r1, #5
 80052f6:	4b5e      	ldr	r3, [pc, #376]	; (8005470 <moment40+0x280>)
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	3303      	adds	r3, #3
 80052fe:	3307      	adds	r3, #7
 8005300:	08db      	lsrs	r3, r3, #3
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	ebad 0d03 	sub.w	sp, sp, r3
 8005308:	466b      	mov	r3, sp
 800530a:	3303      	adds	r3, #3
 800530c:	089b      	lsrs	r3, r3, #2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	61fb      	str	r3, [r7, #28]
	float32_t m40[frameSize]; // in^4
 8005312:	4b57      	ldr	r3, [pc, #348]	; (8005470 <moment40+0x280>)
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	3b01      	subs	r3, #1
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	4b55      	ldr	r3, [pc, #340]	; (8005470 <moment40+0x280>)
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	b299      	uxth	r1, r3
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	f04f 0400 	mov.w	r4, #0
 800532c:	0154      	lsls	r4, r2, #5
 800532e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005332:	014b      	lsls	r3, r1, #5
 8005334:	4b4e      	ldr	r3, [pc, #312]	; (8005470 <moment40+0x280>)
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	b299      	uxth	r1, r3
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	f04f 0400 	mov.w	r4, #0
 8005346:	0154      	lsls	r4, r2, #5
 8005348:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800534c:	014b      	lsls	r3, r1, #5
 800534e:	4b48      	ldr	r3, [pc, #288]	; (8005470 <moment40+0x280>)
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	3303      	adds	r3, #3
 8005356:	3307      	adds	r3, #7
 8005358:	08db      	lsrs	r3, r3, #3
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	ebad 0d03 	sub.w	sp, sp, r3
 8005360:	466b      	mov	r3, sp
 8005362:	3303      	adds	r3, #3
 8005364:	089b      	lsrs	r3, r3, #2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	617b      	str	r3, [r7, #20]
	float32_t m40_real = 0.0f, m40_imag = 0.0f;
 800536a:	f04f 0300 	mov.w	r3, #0
 800536e:	627b      	str	r3, [r7, #36]	; 0x24
 8005370:	f04f 0300 	mov.w	r3, #0
 8005374:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t m40_real_mean = 0.0f, m40_imag_mean = 0.0f;
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8005382:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005384:	4b3a      	ldr	r3, [pc, #232]	; (8005470 <moment40+0x280>)
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	461a      	mov	r2, r3
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7fc f93c 	bl	800160a <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8005392:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005394:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005396:	4b36      	ldr	r3, [pc, #216]	; (8005470 <moment40+0x280>)
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fb fd49 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 80053a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80053a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053a4:	69fa      	ldr	r2, [r7, #28]
 80053a6:	4b32      	ldr	r3, [pc, #200]	; (8005470 <moment40+0x280>)
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	f7fb fd42 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 80053ae:	69f8      	ldr	r0, [r7, #28]
 80053b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4b2e      	ldr	r3, [pc, #184]	; (8005470 <moment40+0x280>)
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	f7fb fd3b 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 80053bc:	2300      	movs	r3, #0
 80053be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c0:	e01b      	b.n	80053fa <moment40+0x20a>
		m40_real += m40[i];
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	edd3 7a00 	vldr	s15, [r3]
 80053ce:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80053d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		m40_imag += m40[i+1];
 80053da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053dc:	3301      	adds	r3, #1
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	edd3 7a00 	vldr	s15, [r3]
 80053e8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80053ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053f0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	for(int i = 0; i < frameSize*2; i+=2){
 80053f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f6:	3302      	adds	r3, #2
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053fa:	4b1d      	ldr	r3, [pc, #116]	; (8005470 <moment40+0x280>)
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005402:	429a      	cmp	r2, r3
 8005404:	dbdd      	blt.n	80053c2 <moment40+0x1d2>
	}
	m40_real_mean = m40_real / frameSize;
 8005406:	4b1a      	ldr	r3, [pc, #104]	; (8005470 <moment40+0x280>)
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005412:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800541a:	edc7 7a04 	vstr	s15, [r7, #16]
	m40_imag_mean = m40_imag / frameSize;
 800541e:	4b14      	ldr	r3, [pc, #80]	; (8005470 <moment40+0x280>)
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	ee07 3a90 	vmov	s15, r3
 8005426:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800542a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800542e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005432:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(m40_real_mean*m40_real_mean + m40_imag_mean*m40_imag_mean);
 8005436:	ed97 7a04 	vldr	s14, [r7, #16]
 800543a:	edd7 7a04 	vldr	s15, [r7, #16]
 800543e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005442:	edd7 6a03 	vldr	s13, [r7, #12]
 8005446:	edd7 7a03 	vldr	s15, [r7, #12]
 800544a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800544e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005452:	eeb0 0a67 	vmov.f32	s0, s15
 8005456:	f008 fdfb 	bl	800e050 <sqrtf>
 800545a:	eef0 7a40 	vmov.f32	s15, s0
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	edc3 7a00 	vstr	s15, [r3]
 8005464:	46ad      	mov	sp, r5
}
 8005466:	bf00      	nop
 8005468:	3740      	adds	r7, #64	; 0x40
 800546a:	46bd      	mov	sp, r7
 800546c:	bdb0      	pop	{r4, r5, r7, pc}
 800546e:	bf00      	nop
 8005470:	0801420c 	.word	0x0801420c

08005474 <moment41>:

void moment41(float32_t in[], float32_t *out){
 8005474:	b5b0      	push	{r4, r5, r7, lr}
 8005476:	b092      	sub	sp, #72	; 0x48
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
 800547e:	466b      	mov	r3, sp
 8005480:	461d      	mov	r5, r3
	float32_t in_cp[frameSize*2];
 8005482:	4bb7      	ldr	r3, [pc, #732]	; (8005760 <moment41+0x2ec>)
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	3b01      	subs	r3, #1
 800548a:	637b      	str	r3, [r7, #52]	; 0x34
 800548c:	4bb4      	ldr	r3, [pc, #720]	; (8005760 <moment41+0x2ec>)
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	4619      	mov	r1, r3
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	f04f 0400 	mov.w	r4, #0
 80054a0:	0154      	lsls	r4, r2, #5
 80054a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80054a6:	014b      	lsls	r3, r1, #5
 80054a8:	4bad      	ldr	r3, [pc, #692]	; (8005760 <moment41+0x2ec>)
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	4619      	mov	r1, r3
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	f04f 0400 	mov.w	r4, #0
 80054bc:	0154      	lsls	r4, r2, #5
 80054be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80054c2:	014b      	lsls	r3, r1, #5
 80054c4:	4ba6      	ldr	r3, [pc, #664]	; (8005760 <moment41+0x2ec>)
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	3303      	adds	r3, #3
 80054cc:	3307      	adds	r3, #7
 80054ce:	08db      	lsrs	r3, r3, #3
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	ebad 0d03 	sub.w	sp, sp, r3
 80054d6:	466b      	mov	r3, sp
 80054d8:	3303      	adds	r3, #3
 80054da:	089b      	lsrs	r3, r3, #2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t in_conj[frameSize*2];
 80054e0:	4b9f      	ldr	r3, [pc, #636]	; (8005760 <moment41+0x2ec>)
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	3b01      	subs	r3, #1
 80054e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054ea:	4b9d      	ldr	r3, [pc, #628]	; (8005760 <moment41+0x2ec>)
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	4619      	mov	r1, r3
 80054f2:	f04f 0200 	mov.w	r2, #0
 80054f6:	f04f 0300 	mov.w	r3, #0
 80054fa:	f04f 0400 	mov.w	r4, #0
 80054fe:	0154      	lsls	r4, r2, #5
 8005500:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005504:	014b      	lsls	r3, r1, #5
 8005506:	4b96      	ldr	r3, [pc, #600]	; (8005760 <moment41+0x2ec>)
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	4619      	mov	r1, r3
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	f04f 0300 	mov.w	r3, #0
 8005516:	f04f 0400 	mov.w	r4, #0
 800551a:	0154      	lsls	r4, r2, #5
 800551c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005520:	014b      	lsls	r3, r1, #5
 8005522:	4b8f      	ldr	r3, [pc, #572]	; (8005760 <moment41+0x2ec>)
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	3303      	adds	r3, #3
 800552a:	3307      	adds	r3, #7
 800552c:	08db      	lsrs	r3, r3, #3
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	ebad 0d03 	sub.w	sp, sp, r3
 8005534:	466b      	mov	r3, sp
 8005536:	3303      	adds	r3, #3
 8005538:	089b      	lsrs	r3, r3, #2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m20[frameSize*2]; // in^2
 800553e:	4b88      	ldr	r3, [pc, #544]	; (8005760 <moment41+0x2ec>)
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	3b01      	subs	r3, #1
 8005546:	647b      	str	r3, [r7, #68]	; 0x44
 8005548:	4b85      	ldr	r3, [pc, #532]	; (8005760 <moment41+0x2ec>)
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	4619      	mov	r1, r3
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	f04f 0400 	mov.w	r4, #0
 800555c:	0154      	lsls	r4, r2, #5
 800555e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005562:	014b      	lsls	r3, r1, #5
 8005564:	4b7e      	ldr	r3, [pc, #504]	; (8005760 <moment41+0x2ec>)
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	4619      	mov	r1, r3
 800556c:	f04f 0200 	mov.w	r2, #0
 8005570:	f04f 0300 	mov.w	r3, #0
 8005574:	f04f 0400 	mov.w	r4, #0
 8005578:	0154      	lsls	r4, r2, #5
 800557a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800557e:	014b      	lsls	r3, r1, #5
 8005580:	4b77      	ldr	r3, [pc, #476]	; (8005760 <moment41+0x2ec>)
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	3303      	adds	r3, #3
 8005588:	3307      	adds	r3, #7
 800558a:	08db      	lsrs	r3, r3, #3
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	ebad 0d03 	sub.w	sp, sp, r3
 8005592:	466b      	mov	r3, sp
 8005594:	3303      	adds	r3, #3
 8005596:	089b      	lsrs	r3, r3, #2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t m30[frameSize]; // in^3
 800559c:	4b70      	ldr	r3, [pc, #448]	; (8005760 <moment41+0x2ec>)
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	623b      	str	r3, [r7, #32]
 80055a4:	4b6e      	ldr	r3, [pc, #440]	; (8005760 <moment41+0x2ec>)
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b299      	uxth	r1, r3
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	f04f 0300 	mov.w	r3, #0
 80055b2:	f04f 0400 	mov.w	r4, #0
 80055b6:	0154      	lsls	r4, r2, #5
 80055b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80055bc:	014b      	lsls	r3, r1, #5
 80055be:	4b68      	ldr	r3, [pc, #416]	; (8005760 <moment41+0x2ec>)
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	b299      	uxth	r1, r3
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	f04f 0400 	mov.w	r4, #0
 80055d0:	0154      	lsls	r4, r2, #5
 80055d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80055d6:	014b      	lsls	r3, r1, #5
 80055d8:	4b61      	ldr	r3, [pc, #388]	; (8005760 <moment41+0x2ec>)
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	3303      	adds	r3, #3
 80055e0:	3307      	adds	r3, #7
 80055e2:	08db      	lsrs	r3, r3, #3
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	ebad 0d03 	sub.w	sp, sp, r3
 80055ea:	466b      	mov	r3, sp
 80055ec:	3303      	adds	r3, #3
 80055ee:	089b      	lsrs	r3, r3, #2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	61fb      	str	r3, [r7, #28]
	float32_t m41[frameSize]; // in^4
 80055f4:	4b5a      	ldr	r3, [pc, #360]	; (8005760 <moment41+0x2ec>)
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	61bb      	str	r3, [r7, #24]
 80055fc:	4b58      	ldr	r3, [pc, #352]	; (8005760 <moment41+0x2ec>)
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b299      	uxth	r1, r3
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	f04f 0300 	mov.w	r3, #0
 800560a:	f04f 0400 	mov.w	r4, #0
 800560e:	0154      	lsls	r4, r2, #5
 8005610:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005614:	014b      	lsls	r3, r1, #5
 8005616:	4b52      	ldr	r3, [pc, #328]	; (8005760 <moment41+0x2ec>)
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b299      	uxth	r1, r3
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	f04f 0400 	mov.w	r4, #0
 8005628:	0154      	lsls	r4, r2, #5
 800562a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800562e:	014b      	lsls	r3, r1, #5
 8005630:	4b4b      	ldr	r3, [pc, #300]	; (8005760 <moment41+0x2ec>)
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	3303      	adds	r3, #3
 8005638:	3307      	adds	r3, #7
 800563a:	08db      	lsrs	r3, r3, #3
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	ebad 0d03 	sub.w	sp, sp, r3
 8005642:	466b      	mov	r3, sp
 8005644:	3303      	adds	r3, #3
 8005646:	089b      	lsrs	r3, r3, #2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	617b      	str	r3, [r7, #20]
	float32_t m41_real = 0.0f, m41_imag = 0.0f;
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	62bb      	str	r3, [r7, #40]	; 0x28
 8005652:	f04f 0300 	mov.w	r3, #0
 8005656:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t m41_real_mean = 0.0f, m41_imag_mean = 0.0f;
 8005658:	f04f 0300 	mov.w	r3, #0
 800565c:	613b      	str	r3, [r7, #16]
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8005664:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005666:	4b3e      	ldr	r3, [pc, #248]	; (8005760 <moment41+0x2ec>)
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	461a      	mov	r2, r3
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fb ffcb 	bl	800160a <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8005674:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005676:	4b3a      	ldr	r3, [pc, #232]	; (8005760 <moment41+0x2ec>)
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7fb fa2f 	bl	8000ae0 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8005682:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005686:	4b36      	ldr	r3, [pc, #216]	; (8005760 <moment41+0x2ec>)
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7fb fbd1 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8005690:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005692:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005694:	69fa      	ldr	r2, [r7, #28]
 8005696:	4b32      	ldr	r3, [pc, #200]	; (8005760 <moment41+0x2ec>)
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	f7fb fbca 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_conj[0], &m41[0], frameSize);
 800569e:	69f8      	ldr	r0, [r7, #28]
 80056a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	4b2e      	ldr	r3, [pc, #184]	; (8005760 <moment41+0x2ec>)
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	f7fb fbc3 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 80056ac:	2300      	movs	r3, #0
 80056ae:	633b      	str	r3, [r7, #48]	; 0x30
 80056b0:	e01b      	b.n	80056ea <moment41+0x276>
		m41_real += m41[i];
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	edd3 7a00 	vldr	s15, [r3]
 80056be:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80056c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056c6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		m41_imag += m41[i+1];
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	3301      	adds	r3, #1
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	edd3 7a00 	vldr	s15, [r3]
 80056d8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80056dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056e0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i < frameSize*2; i+=2){
 80056e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e6:	3302      	adds	r3, #2
 80056e8:	633b      	str	r3, [r7, #48]	; 0x30
 80056ea:	4b1d      	ldr	r3, [pc, #116]	; (8005760 <moment41+0x2ec>)
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f2:	429a      	cmp	r2, r3
 80056f4:	dbdd      	blt.n	80056b2 <moment41+0x23e>
	}
	m41_real_mean = m41_real / frameSize;
 80056f6:	4b1a      	ldr	r3, [pc, #104]	; (8005760 <moment41+0x2ec>)
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005702:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800570a:	edc7 7a04 	vstr	s15, [r7, #16]
	m41_imag_mean = m41_imag / frameSize;
 800570e:	4b14      	ldr	r3, [pc, #80]	; (8005760 <moment41+0x2ec>)
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	ee07 3a90 	vmov	s15, r3
 8005716:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800571a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800571e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005722:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(m41_real_mean*m41_real_mean + m41_imag_mean*m41_imag_mean);
 8005726:	ed97 7a04 	vldr	s14, [r7, #16]
 800572a:	edd7 7a04 	vldr	s15, [r7, #16]
 800572e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005732:	edd7 6a03 	vldr	s13, [r7, #12]
 8005736:	edd7 7a03 	vldr	s15, [r7, #12]
 800573a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800573e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005742:	eeb0 0a67 	vmov.f32	s0, s15
 8005746:	f008 fc83 	bl	800e050 <sqrtf>
 800574a:	eef0 7a40 	vmov.f32	s15, s0
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	edc3 7a00 	vstr	s15, [r3]
 8005754:	46ad      	mov	sp, r5
}
 8005756:	bf00      	nop
 8005758:	3748      	adds	r7, #72	; 0x48
 800575a:	46bd      	mov	sp, r7
 800575c:	bdb0      	pop	{r4, r5, r7, pc}
 800575e:	bf00      	nop
 8005760:	0801420c 	.word	0x0801420c

08005764 <moment42>:

void moment42(float32_t in[], float32_t *out){
 8005764:	b5b0      	push	{r4, r5, r7, lr}
 8005766:	b092      	sub	sp, #72	; 0x48
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
 800576e:	466b      	mov	r3, sp
 8005770:	461d      	mov	r5, r3
	float32_t in_cp[frameSize*2];
 8005772:	4bb7      	ldr	r3, [pc, #732]	; (8005a50 <moment42+0x2ec>)
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	3b01      	subs	r3, #1
 800577a:	637b      	str	r3, [r7, #52]	; 0x34
 800577c:	4bb4      	ldr	r3, [pc, #720]	; (8005a50 <moment42+0x2ec>)
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	4619      	mov	r1, r3
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	f04f 0400 	mov.w	r4, #0
 8005790:	0154      	lsls	r4, r2, #5
 8005792:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005796:	014b      	lsls	r3, r1, #5
 8005798:	4bad      	ldr	r3, [pc, #692]	; (8005a50 <moment42+0x2ec>)
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	4619      	mov	r1, r3
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	f04f 0400 	mov.w	r4, #0
 80057ac:	0154      	lsls	r4, r2, #5
 80057ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80057b2:	014b      	lsls	r3, r1, #5
 80057b4:	4ba6      	ldr	r3, [pc, #664]	; (8005a50 <moment42+0x2ec>)
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	3303      	adds	r3, #3
 80057bc:	3307      	adds	r3, #7
 80057be:	08db      	lsrs	r3, r3, #3
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	ebad 0d03 	sub.w	sp, sp, r3
 80057c6:	466b      	mov	r3, sp
 80057c8:	3303      	adds	r3, #3
 80057ca:	089b      	lsrs	r3, r3, #2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t in_conj[frameSize*2];
 80057d0:	4b9f      	ldr	r3, [pc, #636]	; (8005a50 <moment42+0x2ec>)
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	3b01      	subs	r3, #1
 80057d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057da:	4b9d      	ldr	r3, [pc, #628]	; (8005a50 <moment42+0x2ec>)
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	4619      	mov	r1, r3
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	f04f 0300 	mov.w	r3, #0
 80057ea:	f04f 0400 	mov.w	r4, #0
 80057ee:	0154      	lsls	r4, r2, #5
 80057f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80057f4:	014b      	lsls	r3, r1, #5
 80057f6:	4b96      	ldr	r3, [pc, #600]	; (8005a50 <moment42+0x2ec>)
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	4619      	mov	r1, r3
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	f04f 0300 	mov.w	r3, #0
 8005806:	f04f 0400 	mov.w	r4, #0
 800580a:	0154      	lsls	r4, r2, #5
 800580c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005810:	014b      	lsls	r3, r1, #5
 8005812:	4b8f      	ldr	r3, [pc, #572]	; (8005a50 <moment42+0x2ec>)
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	3303      	adds	r3, #3
 800581a:	3307      	adds	r3, #7
 800581c:	08db      	lsrs	r3, r3, #3
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	ebad 0d03 	sub.w	sp, sp, r3
 8005824:	466b      	mov	r3, sp
 8005826:	3303      	adds	r3, #3
 8005828:	089b      	lsrs	r3, r3, #2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m20[frameSize*2]; // in^2
 800582e:	4b88      	ldr	r3, [pc, #544]	; (8005a50 <moment42+0x2ec>)
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	3b01      	subs	r3, #1
 8005836:	647b      	str	r3, [r7, #68]	; 0x44
 8005838:	4b85      	ldr	r3, [pc, #532]	; (8005a50 <moment42+0x2ec>)
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	4619      	mov	r1, r3
 8005840:	f04f 0200 	mov.w	r2, #0
 8005844:	f04f 0300 	mov.w	r3, #0
 8005848:	f04f 0400 	mov.w	r4, #0
 800584c:	0154      	lsls	r4, r2, #5
 800584e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005852:	014b      	lsls	r3, r1, #5
 8005854:	4b7e      	ldr	r3, [pc, #504]	; (8005a50 <moment42+0x2ec>)
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	4619      	mov	r1, r3
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	f04f 0400 	mov.w	r4, #0
 8005868:	0154      	lsls	r4, r2, #5
 800586a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800586e:	014b      	lsls	r3, r1, #5
 8005870:	4b77      	ldr	r3, [pc, #476]	; (8005a50 <moment42+0x2ec>)
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	3303      	adds	r3, #3
 8005878:	3307      	adds	r3, #7
 800587a:	08db      	lsrs	r3, r3, #3
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	ebad 0d03 	sub.w	sp, sp, r3
 8005882:	466b      	mov	r3, sp
 8005884:	3303      	adds	r3, #3
 8005886:	089b      	lsrs	r3, r3, #2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t m31[frameSize]; // in^3
 800588c:	4b70      	ldr	r3, [pc, #448]	; (8005a50 <moment42+0x2ec>)
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	3b01      	subs	r3, #1
 8005892:	623b      	str	r3, [r7, #32]
 8005894:	4b6e      	ldr	r3, [pc, #440]	; (8005a50 <moment42+0x2ec>)
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	b299      	uxth	r1, r3
 800589a:	f04f 0200 	mov.w	r2, #0
 800589e:	f04f 0300 	mov.w	r3, #0
 80058a2:	f04f 0400 	mov.w	r4, #0
 80058a6:	0154      	lsls	r4, r2, #5
 80058a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80058ac:	014b      	lsls	r3, r1, #5
 80058ae:	4b68      	ldr	r3, [pc, #416]	; (8005a50 <moment42+0x2ec>)
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	b299      	uxth	r1, r3
 80058b4:	f04f 0200 	mov.w	r2, #0
 80058b8:	f04f 0300 	mov.w	r3, #0
 80058bc:	f04f 0400 	mov.w	r4, #0
 80058c0:	0154      	lsls	r4, r2, #5
 80058c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80058c6:	014b      	lsls	r3, r1, #5
 80058c8:	4b61      	ldr	r3, [pc, #388]	; (8005a50 <moment42+0x2ec>)
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	3303      	adds	r3, #3
 80058d0:	3307      	adds	r3, #7
 80058d2:	08db      	lsrs	r3, r3, #3
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	ebad 0d03 	sub.w	sp, sp, r3
 80058da:	466b      	mov	r3, sp
 80058dc:	3303      	adds	r3, #3
 80058de:	089b      	lsrs	r3, r3, #2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	61fb      	str	r3, [r7, #28]
	float32_t m42[frameSize]; // in^4
 80058e4:	4b5a      	ldr	r3, [pc, #360]	; (8005a50 <moment42+0x2ec>)
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	3b01      	subs	r3, #1
 80058ea:	61bb      	str	r3, [r7, #24]
 80058ec:	4b58      	ldr	r3, [pc, #352]	; (8005a50 <moment42+0x2ec>)
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	b299      	uxth	r1, r3
 80058f2:	f04f 0200 	mov.w	r2, #0
 80058f6:	f04f 0300 	mov.w	r3, #0
 80058fa:	f04f 0400 	mov.w	r4, #0
 80058fe:	0154      	lsls	r4, r2, #5
 8005900:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005904:	014b      	lsls	r3, r1, #5
 8005906:	4b52      	ldr	r3, [pc, #328]	; (8005a50 <moment42+0x2ec>)
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	b299      	uxth	r1, r3
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	f04f 0300 	mov.w	r3, #0
 8005914:	f04f 0400 	mov.w	r4, #0
 8005918:	0154      	lsls	r4, r2, #5
 800591a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800591e:	014b      	lsls	r3, r1, #5
 8005920:	4b4b      	ldr	r3, [pc, #300]	; (8005a50 <moment42+0x2ec>)
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	3303      	adds	r3, #3
 8005928:	3307      	adds	r3, #7
 800592a:	08db      	lsrs	r3, r3, #3
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	ebad 0d03 	sub.w	sp, sp, r3
 8005932:	466b      	mov	r3, sp
 8005934:	3303      	adds	r3, #3
 8005936:	089b      	lsrs	r3, r3, #2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	617b      	str	r3, [r7, #20]
	float32_t m42_real = 0.0f, m42_imag = 0.0f;
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	62bb      	str	r3, [r7, #40]	; 0x28
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t m42_real_mean = 0.0f, m42_imag_mean = 0.0f;
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	613b      	str	r3, [r7, #16]
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8005954:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005956:	4b3e      	ldr	r3, [pc, #248]	; (8005a50 <moment42+0x2ec>)
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	461a      	mov	r2, r3
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7fb fe53 	bl	800160a <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8005964:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005966:	4b3a      	ldr	r3, [pc, #232]	; (8005a50 <moment42+0x2ec>)
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7fb f8b7 	bl	8000ae0 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8005972:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005976:	4b36      	ldr	r3, [pc, #216]	; (8005a50 <moment42+0x2ec>)
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fb fa59 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_conj[0], &m31[0], frameSize);
 8005980:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005982:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	4b32      	ldr	r3, [pc, #200]	; (8005a50 <moment42+0x2ec>)
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	f7fb fa52 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m31[0], &in_conj[0], &m42[0], frameSize);
 800598e:	69f8      	ldr	r0, [r7, #28]
 8005990:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4b2e      	ldr	r3, [pc, #184]	; (8005a50 <moment42+0x2ec>)
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	f7fb fa4b 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 800599c:	2300      	movs	r3, #0
 800599e:	633b      	str	r3, [r7, #48]	; 0x30
 80059a0:	e01b      	b.n	80059da <moment42+0x276>
		m42_real += m42[i];
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	edd3 7a00 	vldr	s15, [r3]
 80059ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80059b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059b6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		m42_imag += m42[i+1];
 80059ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059bc:	3301      	adds	r3, #1
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	edd3 7a00 	vldr	s15, [r3]
 80059c8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80059cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059d0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i < frameSize*2; i+=2){
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	3302      	adds	r3, #2
 80059d8:	633b      	str	r3, [r7, #48]	; 0x30
 80059da:	4b1d      	ldr	r3, [pc, #116]	; (8005a50 <moment42+0x2ec>)
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059e2:	429a      	cmp	r2, r3
 80059e4:	dbdd      	blt.n	80059a2 <moment42+0x23e>
	}
	m42_real_mean = m42_real / frameSize;
 80059e6:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <moment42+0x2ec>)
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	ee07 3a90 	vmov	s15, r3
 80059ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059f2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80059f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059fa:	edc7 7a04 	vstr	s15, [r7, #16]
	m42_imag_mean = m42_imag / frameSize;
 80059fe:	4b14      	ldr	r3, [pc, #80]	; (8005a50 <moment42+0x2ec>)
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	ee07 3a90 	vmov	s15, r3
 8005a06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a0a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8005a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a12:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(m42_real_mean*m42_real_mean + m42_imag_mean*m42_imag_mean);
 8005a16:	ed97 7a04 	vldr	s14, [r7, #16]
 8005a1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a22:	edd7 6a03 	vldr	s13, [r7, #12]
 8005a26:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a32:	eeb0 0a67 	vmov.f32	s0, s15
 8005a36:	f008 fb0b 	bl	800e050 <sqrtf>
 8005a3a:	eef0 7a40 	vmov.f32	s15, s0
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	edc3 7a00 	vstr	s15, [r3]
 8005a44:	46ad      	mov	sp, r5
}
 8005a46:	bf00      	nop
 8005a48:	3748      	adds	r7, #72	; 0x48
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	0801420c 	.word	0x0801420c

08005a54 <moment43>:

void moment43(float32_t in[], float32_t *out){
 8005a54:	b5b0      	push	{r4, r5, r7, lr}
 8005a56:	b092      	sub	sp, #72	; 0x48
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
 8005a5e:	466b      	mov	r3, sp
 8005a60:	461d      	mov	r5, r3
	float32_t in_cp[frameSize*2];
 8005a62:	4bb7      	ldr	r3, [pc, #732]	; (8005d40 <moment43+0x2ec>)
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a6c:	4bb4      	ldr	r3, [pc, #720]	; (8005d40 <moment43+0x2ec>)
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	4619      	mov	r1, r3
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	f04f 0300 	mov.w	r3, #0
 8005a7c:	f04f 0400 	mov.w	r4, #0
 8005a80:	0154      	lsls	r4, r2, #5
 8005a82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a86:	014b      	lsls	r3, r1, #5
 8005a88:	4bad      	ldr	r3, [pc, #692]	; (8005d40 <moment43+0x2ec>)
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	4619      	mov	r1, r3
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	f04f 0400 	mov.w	r4, #0
 8005a9c:	0154      	lsls	r4, r2, #5
 8005a9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005aa2:	014b      	lsls	r3, r1, #5
 8005aa4:	4ba6      	ldr	r3, [pc, #664]	; (8005d40 <moment43+0x2ec>)
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	3303      	adds	r3, #3
 8005aac:	3307      	adds	r3, #7
 8005aae:	08db      	lsrs	r3, r3, #3
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	ebad 0d03 	sub.w	sp, sp, r3
 8005ab6:	466b      	mov	r3, sp
 8005ab8:	3303      	adds	r3, #3
 8005aba:	089b      	lsrs	r3, r3, #2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t in_conj[frameSize*2];
 8005ac0:	4b9f      	ldr	r3, [pc, #636]	; (8005d40 <moment43+0x2ec>)
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aca:	4b9d      	ldr	r3, [pc, #628]	; (8005d40 <moment43+0x2ec>)
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	f04f 0300 	mov.w	r3, #0
 8005ada:	f04f 0400 	mov.w	r4, #0
 8005ade:	0154      	lsls	r4, r2, #5
 8005ae0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005ae4:	014b      	lsls	r3, r1, #5
 8005ae6:	4b96      	ldr	r3, [pc, #600]	; (8005d40 <moment43+0x2ec>)
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	4619      	mov	r1, r3
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	f04f 0400 	mov.w	r4, #0
 8005afa:	0154      	lsls	r4, r2, #5
 8005afc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b00:	014b      	lsls	r3, r1, #5
 8005b02:	4b8f      	ldr	r3, [pc, #572]	; (8005d40 <moment43+0x2ec>)
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	3303      	adds	r3, #3
 8005b0a:	3307      	adds	r3, #7
 8005b0c:	08db      	lsrs	r3, r3, #3
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	ebad 0d03 	sub.w	sp, sp, r3
 8005b14:	466b      	mov	r3, sp
 8005b16:	3303      	adds	r3, #3
 8005b18:	089b      	lsrs	r3, r3, #2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m21[frameSize*2]; // in^2
 8005b1e:	4b88      	ldr	r3, [pc, #544]	; (8005d40 <moment43+0x2ec>)
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	3b01      	subs	r3, #1
 8005b26:	647b      	str	r3, [r7, #68]	; 0x44
 8005b28:	4b85      	ldr	r3, [pc, #532]	; (8005d40 <moment43+0x2ec>)
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	4619      	mov	r1, r3
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	f04f 0400 	mov.w	r4, #0
 8005b3c:	0154      	lsls	r4, r2, #5
 8005b3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b42:	014b      	lsls	r3, r1, #5
 8005b44:	4b7e      	ldr	r3, [pc, #504]	; (8005d40 <moment43+0x2ec>)
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	f04f 0300 	mov.w	r3, #0
 8005b54:	f04f 0400 	mov.w	r4, #0
 8005b58:	0154      	lsls	r4, r2, #5
 8005b5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b5e:	014b      	lsls	r3, r1, #5
 8005b60:	4b77      	ldr	r3, [pc, #476]	; (8005d40 <moment43+0x2ec>)
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	3303      	adds	r3, #3
 8005b68:	3307      	adds	r3, #7
 8005b6a:	08db      	lsrs	r3, r3, #3
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	ebad 0d03 	sub.w	sp, sp, r3
 8005b72:	466b      	mov	r3, sp
 8005b74:	3303      	adds	r3, #3
 8005b76:	089b      	lsrs	r3, r3, #2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t m32[frameSize]; // in^3
 8005b7c:	4b70      	ldr	r3, [pc, #448]	; (8005d40 <moment43+0x2ec>)
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	623b      	str	r3, [r7, #32]
 8005b84:	4b6e      	ldr	r3, [pc, #440]	; (8005d40 <moment43+0x2ec>)
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	b299      	uxth	r1, r3
 8005b8a:	f04f 0200 	mov.w	r2, #0
 8005b8e:	f04f 0300 	mov.w	r3, #0
 8005b92:	f04f 0400 	mov.w	r4, #0
 8005b96:	0154      	lsls	r4, r2, #5
 8005b98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b9c:	014b      	lsls	r3, r1, #5
 8005b9e:	4b68      	ldr	r3, [pc, #416]	; (8005d40 <moment43+0x2ec>)
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b299      	uxth	r1, r3
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	f04f 0300 	mov.w	r3, #0
 8005bac:	f04f 0400 	mov.w	r4, #0
 8005bb0:	0154      	lsls	r4, r2, #5
 8005bb2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005bb6:	014b      	lsls	r3, r1, #5
 8005bb8:	4b61      	ldr	r3, [pc, #388]	; (8005d40 <moment43+0x2ec>)
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	3303      	adds	r3, #3
 8005bc0:	3307      	adds	r3, #7
 8005bc2:	08db      	lsrs	r3, r3, #3
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	ebad 0d03 	sub.w	sp, sp, r3
 8005bca:	466b      	mov	r3, sp
 8005bcc:	3303      	adds	r3, #3
 8005bce:	089b      	lsrs	r3, r3, #2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	61fb      	str	r3, [r7, #28]
	float32_t m43[frameSize]; // in^4
 8005bd4:	4b5a      	ldr	r3, [pc, #360]	; (8005d40 <moment43+0x2ec>)
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	61bb      	str	r3, [r7, #24]
 8005bdc:	4b58      	ldr	r3, [pc, #352]	; (8005d40 <moment43+0x2ec>)
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	b299      	uxth	r1, r3
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	f04f 0400 	mov.w	r4, #0
 8005bee:	0154      	lsls	r4, r2, #5
 8005bf0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005bf4:	014b      	lsls	r3, r1, #5
 8005bf6:	4b52      	ldr	r3, [pc, #328]	; (8005d40 <moment43+0x2ec>)
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	b299      	uxth	r1, r3
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	f04f 0300 	mov.w	r3, #0
 8005c04:	f04f 0400 	mov.w	r4, #0
 8005c08:	0154      	lsls	r4, r2, #5
 8005c0a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005c0e:	014b      	lsls	r3, r1, #5
 8005c10:	4b4b      	ldr	r3, [pc, #300]	; (8005d40 <moment43+0x2ec>)
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	3303      	adds	r3, #3
 8005c18:	3307      	adds	r3, #7
 8005c1a:	08db      	lsrs	r3, r3, #3
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	ebad 0d03 	sub.w	sp, sp, r3
 8005c22:	466b      	mov	r3, sp
 8005c24:	3303      	adds	r3, #3
 8005c26:	089b      	lsrs	r3, r3, #2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	617b      	str	r3, [r7, #20]
	float32_t m43_real = 0.0f, m43_imag = 0.0f;
 8005c2c:	f04f 0300 	mov.w	r3, #0
 8005c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c32:	f04f 0300 	mov.w	r3, #0
 8005c36:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t m43_real_mean = 0.0f, m43_imag_mean = 0.0f;
 8005c38:	f04f 0300 	mov.w	r3, #0
 8005c3c:	613b      	str	r3, [r7, #16]
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8005c44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c46:	4b3e      	ldr	r3, [pc, #248]	; (8005d40 <moment43+0x2ec>)
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fb fcdb 	bl	800160a <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8005c54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c56:	4b3a      	ldr	r3, [pc, #232]	; (8005d40 <moment43+0x2ec>)
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7fa ff3f 	bl	8000ae0 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_conj[0], &m21[0], frameSize);
 8005c62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c66:	4b36      	ldr	r3, [pc, #216]	; (8005d40 <moment43+0x2ec>)
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7fb f8e1 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m21[0], &in_conj[0], &m32[0], frameSize);
 8005c70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c74:	69fa      	ldr	r2, [r7, #28]
 8005c76:	4b32      	ldr	r3, [pc, #200]	; (8005d40 <moment43+0x2ec>)
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	f7fb f8da 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m32[0], &in_conj[0], &m43[0], frameSize);
 8005c7e:	69f8      	ldr	r0, [r7, #28]
 8005c80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4b2e      	ldr	r3, [pc, #184]	; (8005d40 <moment43+0x2ec>)
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	f7fb f8d3 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	633b      	str	r3, [r7, #48]	; 0x30
 8005c90:	e01b      	b.n	8005cca <moment43+0x276>
		m43_real += m43[i];
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	edd3 7a00 	vldr	s15, [r3]
 8005c9e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ca6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		m43_imag += m43[i+1];
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	3301      	adds	r3, #1
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	edd3 7a00 	vldr	s15, [r3]
 8005cb8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cc0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i < frameSize*2; i+=2){
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	3302      	adds	r3, #2
 8005cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8005cca:	4b1d      	ldr	r3, [pc, #116]	; (8005d40 <moment43+0x2ec>)
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	dbdd      	blt.n	8005c92 <moment43+0x23e>
	}
	m43_real_mean = m43_real / frameSize;
 8005cd6:	4b1a      	ldr	r3, [pc, #104]	; (8005d40 <moment43+0x2ec>)
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ce2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cea:	edc7 7a04 	vstr	s15, [r7, #16]
	m43_imag_mean = m43_imag / frameSize;
 8005cee:	4b14      	ldr	r3, [pc, #80]	; (8005d40 <moment43+0x2ec>)
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cfa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8005cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d02:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(m43_real_mean*m43_real_mean + m43_imag_mean*m43_imag_mean);
 8005d06:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d12:	edd7 6a03 	vldr	s13, [r7, #12]
 8005d16:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d22:	eeb0 0a67 	vmov.f32	s0, s15
 8005d26:	f008 f993 	bl	800e050 <sqrtf>
 8005d2a:	eef0 7a40 	vmov.f32	s15, s0
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	edc3 7a00 	vstr	s15, [r3]
 8005d34:	46ad      	mov	sp, r5
}
 8005d36:	bf00      	nop
 8005d38:	3748      	adds	r7, #72	; 0x48
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	0801420c 	.word	0x0801420c

08005d44 <moment60>:

void moment60(float32_t in[], float32_t *out){
 8005d44:	b5b0      	push	{r4, r5, r7, lr}
 8005d46:	b094      	sub	sp, #80	; 0x50
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
 8005d4e:	466b      	mov	r3, sp
 8005d50:	461d      	mov	r5, r3
	float32_t in_cp[frameSize*2];
 8005d52:	4ba4      	ldr	r3, [pc, #656]	; (8005fe4 <moment60+0x2a0>)
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d5c:	4ba1      	ldr	r3, [pc, #644]	; (8005fe4 <moment60+0x2a0>)
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	4619      	mov	r1, r3
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	f04f 0300 	mov.w	r3, #0
 8005d6c:	f04f 0400 	mov.w	r4, #0
 8005d70:	0154      	lsls	r4, r2, #5
 8005d72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005d76:	014b      	lsls	r3, r1, #5
 8005d78:	4b9a      	ldr	r3, [pc, #616]	; (8005fe4 <moment60+0x2a0>)
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	005b      	lsls	r3, r3, #1
 8005d7e:	4619      	mov	r1, r3
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	f04f 0400 	mov.w	r4, #0
 8005d8c:	0154      	lsls	r4, r2, #5
 8005d8e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005d92:	014b      	lsls	r3, r1, #5
 8005d94:	4b93      	ldr	r3, [pc, #588]	; (8005fe4 <moment60+0x2a0>)
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	3303      	adds	r3, #3
 8005d9c:	3307      	adds	r3, #7
 8005d9e:	08db      	lsrs	r3, r3, #3
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	ebad 0d03 	sub.w	sp, sp, r3
 8005da6:	466b      	mov	r3, sp
 8005da8:	3303      	adds	r3, #3
 8005daa:	089b      	lsrs	r3, r3, #2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t m20[frameSize*2]; // in^2
 8005db0:	4b8c      	ldr	r3, [pc, #560]	; (8005fe4 <moment60+0x2a0>)
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	3b01      	subs	r3, #1
 8005db8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dba:	4b8a      	ldr	r3, [pc, #552]	; (8005fe4 <moment60+0x2a0>)
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	f04f 0200 	mov.w	r2, #0
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	f04f 0400 	mov.w	r4, #0
 8005dce:	0154      	lsls	r4, r2, #5
 8005dd0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005dd4:	014b      	lsls	r3, r1, #5
 8005dd6:	4b83      	ldr	r3, [pc, #524]	; (8005fe4 <moment60+0x2a0>)
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	4619      	mov	r1, r3
 8005dde:	f04f 0200 	mov.w	r2, #0
 8005de2:	f04f 0300 	mov.w	r3, #0
 8005de6:	f04f 0400 	mov.w	r4, #0
 8005dea:	0154      	lsls	r4, r2, #5
 8005dec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005df0:	014b      	lsls	r3, r1, #5
 8005df2:	4b7c      	ldr	r3, [pc, #496]	; (8005fe4 <moment60+0x2a0>)
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	3303      	adds	r3, #3
 8005dfa:	3307      	adds	r3, #7
 8005dfc:	08db      	lsrs	r3, r3, #3
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	ebad 0d03 	sub.w	sp, sp, r3
 8005e04:	466b      	mov	r3, sp
 8005e06:	3303      	adds	r3, #3
 8005e08:	089b      	lsrs	r3, r3, #2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m30[frameSize]; // in^3
 8005e0e:	4b75      	ldr	r3, [pc, #468]	; (8005fe4 <moment60+0x2a0>)
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	647b      	str	r3, [r7, #68]	; 0x44
 8005e16:	4b73      	ldr	r3, [pc, #460]	; (8005fe4 <moment60+0x2a0>)
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	b299      	uxth	r1, r3
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	f04f 0300 	mov.w	r3, #0
 8005e24:	f04f 0400 	mov.w	r4, #0
 8005e28:	0154      	lsls	r4, r2, #5
 8005e2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005e2e:	014b      	lsls	r3, r1, #5
 8005e30:	4b6c      	ldr	r3, [pc, #432]	; (8005fe4 <moment60+0x2a0>)
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b299      	uxth	r1, r3
 8005e36:	f04f 0200 	mov.w	r2, #0
 8005e3a:	f04f 0300 	mov.w	r3, #0
 8005e3e:	f04f 0400 	mov.w	r4, #0
 8005e42:	0154      	lsls	r4, r2, #5
 8005e44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005e48:	014b      	lsls	r3, r1, #5
 8005e4a:	4b66      	ldr	r3, [pc, #408]	; (8005fe4 <moment60+0x2a0>)
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	3303      	adds	r3, #3
 8005e52:	3307      	adds	r3, #7
 8005e54:	08db      	lsrs	r3, r3, #3
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	ebad 0d03 	sub.w	sp, sp, r3
 8005e5c:	466b      	mov	r3, sp
 8005e5e:	3303      	adds	r3, #3
 8005e60:	089b      	lsrs	r3, r3, #2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t m40[frameSize]; // in^4
 8005e66:	4b5f      	ldr	r3, [pc, #380]	; (8005fe4 <moment60+0x2a0>)
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e6e:	4b5d      	ldr	r3, [pc, #372]	; (8005fe4 <moment60+0x2a0>)
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b299      	uxth	r1, r3
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	f04f 0300 	mov.w	r3, #0
 8005e7c:	f04f 0400 	mov.w	r4, #0
 8005e80:	0154      	lsls	r4, r2, #5
 8005e82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005e86:	014b      	lsls	r3, r1, #5
 8005e88:	4b56      	ldr	r3, [pc, #344]	; (8005fe4 <moment60+0x2a0>)
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	b299      	uxth	r1, r3
 8005e8e:	f04f 0200 	mov.w	r2, #0
 8005e92:	f04f 0300 	mov.w	r3, #0
 8005e96:	f04f 0400 	mov.w	r4, #0
 8005e9a:	0154      	lsls	r4, r2, #5
 8005e9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005ea0:	014b      	lsls	r3, r1, #5
 8005ea2:	4b50      	ldr	r3, [pc, #320]	; (8005fe4 <moment60+0x2a0>)
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	3303      	adds	r3, #3
 8005eaa:	3307      	adds	r3, #7
 8005eac:	08db      	lsrs	r3, r3, #3
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	ebad 0d03 	sub.w	sp, sp, r3
 8005eb4:	466b      	mov	r3, sp
 8005eb6:	3303      	adds	r3, #3
 8005eb8:	089b      	lsrs	r3, r3, #2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t m50[frameSize]; // in^5
 8005ebe:	4b49      	ldr	r3, [pc, #292]	; (8005fe4 <moment60+0x2a0>)
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	623b      	str	r3, [r7, #32]
 8005ec6:	4b47      	ldr	r3, [pc, #284]	; (8005fe4 <moment60+0x2a0>)
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	b299      	uxth	r1, r3
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	f04f 0400 	mov.w	r4, #0
 8005ed8:	0154      	lsls	r4, r2, #5
 8005eda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005ede:	014b      	lsls	r3, r1, #5
 8005ee0:	4b40      	ldr	r3, [pc, #256]	; (8005fe4 <moment60+0x2a0>)
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b299      	uxth	r1, r3
 8005ee6:	f04f 0200 	mov.w	r2, #0
 8005eea:	f04f 0300 	mov.w	r3, #0
 8005eee:	f04f 0400 	mov.w	r4, #0
 8005ef2:	0154      	lsls	r4, r2, #5
 8005ef4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005ef8:	014b      	lsls	r3, r1, #5
 8005efa:	4b3a      	ldr	r3, [pc, #232]	; (8005fe4 <moment60+0x2a0>)
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	3303      	adds	r3, #3
 8005f02:	3307      	adds	r3, #7
 8005f04:	08db      	lsrs	r3, r3, #3
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	ebad 0d03 	sub.w	sp, sp, r3
 8005f0c:	466b      	mov	r3, sp
 8005f0e:	3303      	adds	r3, #3
 8005f10:	089b      	lsrs	r3, r3, #2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	61fb      	str	r3, [r7, #28]
	float32_t m60[frameSize]; // in^6
 8005f16:	4b33      	ldr	r3, [pc, #204]	; (8005fe4 <moment60+0x2a0>)
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	61bb      	str	r3, [r7, #24]
 8005f1e:	4b31      	ldr	r3, [pc, #196]	; (8005fe4 <moment60+0x2a0>)
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	b299      	uxth	r1, r3
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	f04f 0400 	mov.w	r4, #0
 8005f30:	0154      	lsls	r4, r2, #5
 8005f32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f36:	014b      	lsls	r3, r1, #5
 8005f38:	4b2a      	ldr	r3, [pc, #168]	; (8005fe4 <moment60+0x2a0>)
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	b299      	uxth	r1, r3
 8005f3e:	f04f 0200 	mov.w	r2, #0
 8005f42:	f04f 0300 	mov.w	r3, #0
 8005f46:	f04f 0400 	mov.w	r4, #0
 8005f4a:	0154      	lsls	r4, r2, #5
 8005f4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f50:	014b      	lsls	r3, r1, #5
 8005f52:	4b24      	ldr	r3, [pc, #144]	; (8005fe4 <moment60+0x2a0>)
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	3303      	adds	r3, #3
 8005f5a:	3307      	adds	r3, #7
 8005f5c:	08db      	lsrs	r3, r3, #3
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	ebad 0d03 	sub.w	sp, sp, r3
 8005f64:	466b      	mov	r3, sp
 8005f66:	3303      	adds	r3, #3
 8005f68:	089b      	lsrs	r3, r3, #2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	617b      	str	r3, [r7, #20]
	float32_t m60_real = 0.0f, m60_imag = 0.0f;
 8005f6e:	f04f 0300 	mov.w	r3, #0
 8005f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f74:	f04f 0300 	mov.w	r3, #0
 8005f78:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t m60_real_mean = 0.0f, m60_imag_mean = 0.0f;
 8005f7a:	f04f 0300 	mov.w	r3, #0
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8005f86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f88:	4b16      	ldr	r3, [pc, #88]	; (8005fe4 <moment60+0x2a0>)
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	461a      	mov	r2, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7fb fb3a 	bl	800160a <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8005f96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f9a:	4b12      	ldr	r3, [pc, #72]	; (8005fe4 <moment60+0x2a0>)
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fa ff47 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8005fa4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005fa6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005faa:	4b0e      	ldr	r3, [pc, #56]	; (8005fe4 <moment60+0x2a0>)
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	f7fa ff40 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 8005fb2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005fb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb8:	4b0a      	ldr	r3, [pc, #40]	; (8005fe4 <moment60+0x2a0>)
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	f7fa ff39 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m40[0], &in_cp[0], &m50[0], frameSize);
 8005fc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fc4:	69fa      	ldr	r2, [r7, #28]
 8005fc6:	4b07      	ldr	r3, [pc, #28]	; (8005fe4 <moment60+0x2a0>)
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	f7fa ff32 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m50[0], &in_cp[0], &m60[0], frameSize);
 8005fce:	69f8      	ldr	r0, [r7, #28]
 8005fd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	4b03      	ldr	r3, [pc, #12]	; (8005fe4 <moment60+0x2a0>)
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	f7fa ff2b 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8005fdc:	2300      	movs	r3, #0
 8005fde:	633b      	str	r3, [r7, #48]	; 0x30
 8005fe0:	e01e      	b.n	8006020 <moment60+0x2dc>
 8005fe2:	bf00      	nop
 8005fe4:	0801420c 	.word	0x0801420c
		m60_real += m60[i];
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	edd3 7a00 	vldr	s15, [r3]
 8005ff4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ffc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		m60_imag += m60[i+1];
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	3301      	adds	r3, #1
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	edd3 7a00 	vldr	s15, [r3]
 800600e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006016:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i < frameSize*2; i+=2){
 800601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601c:	3302      	adds	r3, #2
 800601e:	633b      	str	r3, [r7, #48]	; 0x30
 8006020:	4b1c      	ldr	r3, [pc, #112]	; (8006094 <moment60+0x350>)
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006028:	429a      	cmp	r2, r3
 800602a:	dbdd      	blt.n	8005fe8 <moment60+0x2a4>
	}
	m60_real_mean = m60_real / frameSize;
 800602c:	4b19      	ldr	r3, [pc, #100]	; (8006094 <moment60+0x350>)
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	ee07 3a90 	vmov	s15, r3
 8006034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006038:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800603c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006040:	edc7 7a04 	vstr	s15, [r7, #16]
	m60_imag_mean = m60_imag / frameSize;
 8006044:	4b13      	ldr	r3, [pc, #76]	; (8006094 <moment60+0x350>)
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	ee07 3a90 	vmov	s15, r3
 800604c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006050:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8006054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006058:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(m60_real_mean*m60_real_mean + m60_imag_mean*m60_imag_mean);
 800605c:	ed97 7a04 	vldr	s14, [r7, #16]
 8006060:	edd7 7a04 	vldr	s15, [r7, #16]
 8006064:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006068:	edd7 6a03 	vldr	s13, [r7, #12]
 800606c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006070:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006078:	eeb0 0a67 	vmov.f32	s0, s15
 800607c:	f007 ffe8 	bl	800e050 <sqrtf>
 8006080:	eef0 7a40 	vmov.f32	s15, s0
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	edc3 7a00 	vstr	s15, [r3]
 800608a:	46ad      	mov	sp, r5
}
 800608c:	bf00      	nop
 800608e:	3750      	adds	r7, #80	; 0x50
 8006090:	46bd      	mov	sp, r7
 8006092:	bdb0      	pop	{r4, r5, r7, pc}
 8006094:	0801420c 	.word	0x0801420c

08006098 <moment61>:

void moment61(float32_t in[], float32_t *out){
 8006098:	b5b0      	push	{r4, r5, r7, lr}
 800609a:	b096      	sub	sp, #88	; 0x58
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
 80060a2:	466b      	mov	r3, sp
 80060a4:	461d      	mov	r5, r3
	float32_t in_cp[frameSize*2];
 80060a6:	4bbf      	ldr	r3, [pc, #764]	; (80063a4 <moment61+0x30c>)
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	3b01      	subs	r3, #1
 80060ae:	637b      	str	r3, [r7, #52]	; 0x34
 80060b0:	4bbc      	ldr	r3, [pc, #752]	; (80063a4 <moment61+0x30c>)
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	4619      	mov	r1, r3
 80060b8:	f04f 0200 	mov.w	r2, #0
 80060bc:	f04f 0300 	mov.w	r3, #0
 80060c0:	f04f 0400 	mov.w	r4, #0
 80060c4:	0154      	lsls	r4, r2, #5
 80060c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80060ca:	014b      	lsls	r3, r1, #5
 80060cc:	4bb5      	ldr	r3, [pc, #724]	; (80063a4 <moment61+0x30c>)
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	4619      	mov	r1, r3
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	f04f 0300 	mov.w	r3, #0
 80060dc:	f04f 0400 	mov.w	r4, #0
 80060e0:	0154      	lsls	r4, r2, #5
 80060e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80060e6:	014b      	lsls	r3, r1, #5
 80060e8:	4bae      	ldr	r3, [pc, #696]	; (80063a4 <moment61+0x30c>)
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	3303      	adds	r3, #3
 80060f0:	3307      	adds	r3, #7
 80060f2:	08db      	lsrs	r3, r3, #3
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	ebad 0d03 	sub.w	sp, sp, r3
 80060fa:	466b      	mov	r3, sp
 80060fc:	3303      	adds	r3, #3
 80060fe:	089b      	lsrs	r3, r3, #2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t in_conj[frameSize*2];
 8006104:	4ba7      	ldr	r3, [pc, #668]	; (80063a4 <moment61+0x30c>)
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	3b01      	subs	r3, #1
 800610c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800610e:	4ba5      	ldr	r3, [pc, #660]	; (80063a4 <moment61+0x30c>)
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	4619      	mov	r1, r3
 8006116:	f04f 0200 	mov.w	r2, #0
 800611a:	f04f 0300 	mov.w	r3, #0
 800611e:	f04f 0400 	mov.w	r4, #0
 8006122:	0154      	lsls	r4, r2, #5
 8006124:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006128:	014b      	lsls	r3, r1, #5
 800612a:	4b9e      	ldr	r3, [pc, #632]	; (80063a4 <moment61+0x30c>)
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	4619      	mov	r1, r3
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	f04f 0300 	mov.w	r3, #0
 800613a:	f04f 0400 	mov.w	r4, #0
 800613e:	0154      	lsls	r4, r2, #5
 8006140:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006144:	014b      	lsls	r3, r1, #5
 8006146:	4b97      	ldr	r3, [pc, #604]	; (80063a4 <moment61+0x30c>)
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	3303      	adds	r3, #3
 800614e:	3307      	adds	r3, #7
 8006150:	08db      	lsrs	r3, r3, #3
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	ebad 0d03 	sub.w	sp, sp, r3
 8006158:	466b      	mov	r3, sp
 800615a:	3303      	adds	r3, #3
 800615c:	089b      	lsrs	r3, r3, #2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m20[frameSize*2]; // in^2
 8006162:	4b90      	ldr	r3, [pc, #576]	; (80063a4 <moment61+0x30c>)
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	3b01      	subs	r3, #1
 800616a:	647b      	str	r3, [r7, #68]	; 0x44
 800616c:	4b8d      	ldr	r3, [pc, #564]	; (80063a4 <moment61+0x30c>)
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	4619      	mov	r1, r3
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	f04f 0400 	mov.w	r4, #0
 8006180:	0154      	lsls	r4, r2, #5
 8006182:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006186:	014b      	lsls	r3, r1, #5
 8006188:	4b86      	ldr	r3, [pc, #536]	; (80063a4 <moment61+0x30c>)
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	4619      	mov	r1, r3
 8006190:	f04f 0200 	mov.w	r2, #0
 8006194:	f04f 0300 	mov.w	r3, #0
 8006198:	f04f 0400 	mov.w	r4, #0
 800619c:	0154      	lsls	r4, r2, #5
 800619e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80061a2:	014b      	lsls	r3, r1, #5
 80061a4:	4b7f      	ldr	r3, [pc, #508]	; (80063a4 <moment61+0x30c>)
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	3303      	adds	r3, #3
 80061ac:	3307      	adds	r3, #7
 80061ae:	08db      	lsrs	r3, r3, #3
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	ebad 0d03 	sub.w	sp, sp, r3
 80061b6:	466b      	mov	r3, sp
 80061b8:	3303      	adds	r3, #3
 80061ba:	089b      	lsrs	r3, r3, #2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t m30[frameSize]; // in^3
 80061c0:	4b78      	ldr	r3, [pc, #480]	; (80063a4 <moment61+0x30c>)
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061c8:	4b76      	ldr	r3, [pc, #472]	; (80063a4 <moment61+0x30c>)
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	b299      	uxth	r1, r3
 80061ce:	f04f 0200 	mov.w	r2, #0
 80061d2:	f04f 0300 	mov.w	r3, #0
 80061d6:	f04f 0400 	mov.w	r4, #0
 80061da:	0154      	lsls	r4, r2, #5
 80061dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80061e0:	014b      	lsls	r3, r1, #5
 80061e2:	4b70      	ldr	r3, [pc, #448]	; (80063a4 <moment61+0x30c>)
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b299      	uxth	r1, r3
 80061e8:	f04f 0200 	mov.w	r2, #0
 80061ec:	f04f 0300 	mov.w	r3, #0
 80061f0:	f04f 0400 	mov.w	r4, #0
 80061f4:	0154      	lsls	r4, r2, #5
 80061f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80061fa:	014b      	lsls	r3, r1, #5
 80061fc:	4b69      	ldr	r3, [pc, #420]	; (80063a4 <moment61+0x30c>)
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	3303      	adds	r3, #3
 8006204:	3307      	adds	r3, #7
 8006206:	08db      	lsrs	r3, r3, #3
 8006208:	00db      	lsls	r3, r3, #3
 800620a:	ebad 0d03 	sub.w	sp, sp, r3
 800620e:	466b      	mov	r3, sp
 8006210:	3303      	adds	r3, #3
 8006212:	089b      	lsrs	r3, r3, #2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	653b      	str	r3, [r7, #80]	; 0x50
	float32_t m40[frameSize]; // in^4
 8006218:	4b62      	ldr	r3, [pc, #392]	; (80063a4 <moment61+0x30c>)
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	3b01      	subs	r3, #1
 800621e:	657b      	str	r3, [r7, #84]	; 0x54
 8006220:	4b60      	ldr	r3, [pc, #384]	; (80063a4 <moment61+0x30c>)
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	b299      	uxth	r1, r3
 8006226:	f04f 0200 	mov.w	r2, #0
 800622a:	f04f 0300 	mov.w	r3, #0
 800622e:	f04f 0400 	mov.w	r4, #0
 8006232:	0154      	lsls	r4, r2, #5
 8006234:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006238:	014b      	lsls	r3, r1, #5
 800623a:	4b5a      	ldr	r3, [pc, #360]	; (80063a4 <moment61+0x30c>)
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b299      	uxth	r1, r3
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	f04f 0300 	mov.w	r3, #0
 8006248:	f04f 0400 	mov.w	r4, #0
 800624c:	0154      	lsls	r4, r2, #5
 800624e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006252:	014b      	lsls	r3, r1, #5
 8006254:	4b53      	ldr	r3, [pc, #332]	; (80063a4 <moment61+0x30c>)
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	3303      	adds	r3, #3
 800625c:	3307      	adds	r3, #7
 800625e:	08db      	lsrs	r3, r3, #3
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	ebad 0d03 	sub.w	sp, sp, r3
 8006266:	466b      	mov	r3, sp
 8006268:	3303      	adds	r3, #3
 800626a:	089b      	lsrs	r3, r3, #2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t m50[frameSize]; // in^5
 8006270:	4b4c      	ldr	r3, [pc, #304]	; (80063a4 <moment61+0x30c>)
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	3b01      	subs	r3, #1
 8006276:	623b      	str	r3, [r7, #32]
 8006278:	4b4a      	ldr	r3, [pc, #296]	; (80063a4 <moment61+0x30c>)
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	b299      	uxth	r1, r3
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	f04f 0300 	mov.w	r3, #0
 8006286:	f04f 0400 	mov.w	r4, #0
 800628a:	0154      	lsls	r4, r2, #5
 800628c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006290:	014b      	lsls	r3, r1, #5
 8006292:	4b44      	ldr	r3, [pc, #272]	; (80063a4 <moment61+0x30c>)
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	b299      	uxth	r1, r3
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	f04f 0300 	mov.w	r3, #0
 80062a0:	f04f 0400 	mov.w	r4, #0
 80062a4:	0154      	lsls	r4, r2, #5
 80062a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80062aa:	014b      	lsls	r3, r1, #5
 80062ac:	4b3d      	ldr	r3, [pc, #244]	; (80063a4 <moment61+0x30c>)
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	3303      	adds	r3, #3
 80062b4:	3307      	adds	r3, #7
 80062b6:	08db      	lsrs	r3, r3, #3
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	ebad 0d03 	sub.w	sp, sp, r3
 80062be:	466b      	mov	r3, sp
 80062c0:	3303      	adds	r3, #3
 80062c2:	089b      	lsrs	r3, r3, #2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	61fb      	str	r3, [r7, #28]
	float32_t m61[frameSize]; // in^6
 80062c8:	4b36      	ldr	r3, [pc, #216]	; (80063a4 <moment61+0x30c>)
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	61bb      	str	r3, [r7, #24]
 80062d0:	4b34      	ldr	r3, [pc, #208]	; (80063a4 <moment61+0x30c>)
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b299      	uxth	r1, r3
 80062d6:	f04f 0200 	mov.w	r2, #0
 80062da:	f04f 0300 	mov.w	r3, #0
 80062de:	f04f 0400 	mov.w	r4, #0
 80062e2:	0154      	lsls	r4, r2, #5
 80062e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80062e8:	014b      	lsls	r3, r1, #5
 80062ea:	4b2e      	ldr	r3, [pc, #184]	; (80063a4 <moment61+0x30c>)
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	b299      	uxth	r1, r3
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	f04f 0400 	mov.w	r4, #0
 80062fc:	0154      	lsls	r4, r2, #5
 80062fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006302:	014b      	lsls	r3, r1, #5
 8006304:	4b27      	ldr	r3, [pc, #156]	; (80063a4 <moment61+0x30c>)
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	3303      	adds	r3, #3
 800630c:	3307      	adds	r3, #7
 800630e:	08db      	lsrs	r3, r3, #3
 8006310:	00db      	lsls	r3, r3, #3
 8006312:	ebad 0d03 	sub.w	sp, sp, r3
 8006316:	466b      	mov	r3, sp
 8006318:	3303      	adds	r3, #3
 800631a:	089b      	lsrs	r3, r3, #2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	617b      	str	r3, [r7, #20]
	float32_t m61_real = 0.0f, m61_imag = 0.0f;
 8006320:	f04f 0300 	mov.w	r3, #0
 8006324:	62bb      	str	r3, [r7, #40]	; 0x28
 8006326:	f04f 0300 	mov.w	r3, #0
 800632a:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t m61_real_mean = 0.0f, m61_imag_mean = 0.0f;
 800632c:	f04f 0300 	mov.w	r3, #0
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	f04f 0300 	mov.w	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8006338:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800633a:	4b1a      	ldr	r3, [pc, #104]	; (80063a4 <moment61+0x30c>)
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	461a      	mov	r2, r3
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fb f961 	bl	800160a <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8006348:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800634a:	4b16      	ldr	r3, [pc, #88]	; (80063a4 <moment61+0x30c>)
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7fa fbc5 	bl	8000ae0 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8006356:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800635a:	4b12      	ldr	r3, [pc, #72]	; (80063a4 <moment61+0x30c>)
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7fa fd67 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8006364:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006368:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800636a:	4b0e      	ldr	r3, [pc, #56]	; (80063a4 <moment61+0x30c>)
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	f7fa fd60 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 8006372:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006374:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006378:	4b0a      	ldr	r3, [pc, #40]	; (80063a4 <moment61+0x30c>)
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	f7fa fd59 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m40[0], &in_cp[0], &m50[0], frameSize);
 8006380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006382:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006384:	69fa      	ldr	r2, [r7, #28]
 8006386:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <moment61+0x30c>)
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	f7fa fd52 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m50[0], &in_conj[0], &m61[0], frameSize);
 800638e:	69f8      	ldr	r0, [r7, #28]
 8006390:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4b03      	ldr	r3, [pc, #12]	; (80063a4 <moment61+0x30c>)
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	f7fa fd4b 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 800639c:	2300      	movs	r3, #0
 800639e:	633b      	str	r3, [r7, #48]	; 0x30
 80063a0:	e01e      	b.n	80063e0 <moment61+0x348>
 80063a2:	bf00      	nop
 80063a4:	0801420c 	.word	0x0801420c
		m61_real += m61[i];
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	edd3 7a00 	vldr	s15, [r3]
 80063b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80063b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063bc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		m61_imag += m61[i+1];
 80063c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c2:	3301      	adds	r3, #1
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	edd3 7a00 	vldr	s15, [r3]
 80063ce:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80063d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063d6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i < frameSize*2; i+=2){
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	3302      	adds	r3, #2
 80063de:	633b      	str	r3, [r7, #48]	; 0x30
 80063e0:	4b1c      	ldr	r3, [pc, #112]	; (8006454 <moment61+0x3bc>)
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063e8:	429a      	cmp	r2, r3
 80063ea:	dbdd      	blt.n	80063a8 <moment61+0x310>
	}
	m61_real_mean = m61_real / frameSize;
 80063ec:	4b19      	ldr	r3, [pc, #100]	; (8006454 <moment61+0x3bc>)
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	ee07 3a90 	vmov	s15, r3
 80063f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063f8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80063fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006400:	edc7 7a04 	vstr	s15, [r7, #16]
	m61_imag_mean = m61_imag / frameSize;
 8006404:	4b13      	ldr	r3, [pc, #76]	; (8006454 <moment61+0x3bc>)
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	ee07 3a90 	vmov	s15, r3
 800640c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006410:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8006414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006418:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(m61_real_mean*m61_real_mean + m61_imag_mean*m61_imag_mean);
 800641c:	ed97 7a04 	vldr	s14, [r7, #16]
 8006420:	edd7 7a04 	vldr	s15, [r7, #16]
 8006424:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006428:	edd7 6a03 	vldr	s13, [r7, #12]
 800642c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006430:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006438:	eeb0 0a67 	vmov.f32	s0, s15
 800643c:	f007 fe08 	bl	800e050 <sqrtf>
 8006440:	eef0 7a40 	vmov.f32	s15, s0
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	edc3 7a00 	vstr	s15, [r3]
 800644a:	46ad      	mov	sp, r5
}
 800644c:	bf00      	nop
 800644e:	3758      	adds	r7, #88	; 0x58
 8006450:	46bd      	mov	sp, r7
 8006452:	bdb0      	pop	{r4, r5, r7, pc}
 8006454:	0801420c 	.word	0x0801420c

08006458 <moment62>:

void moment62(float32_t in[], float32_t *out){
 8006458:	b5b0      	push	{r4, r5, r7, lr}
 800645a:	b096      	sub	sp, #88	; 0x58
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
 8006462:	466b      	mov	r3, sp
 8006464:	461d      	mov	r5, r3
	float32_t in_cp[frameSize*2];
 8006466:	4bbf      	ldr	r3, [pc, #764]	; (8006764 <moment62+0x30c>)
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	3b01      	subs	r3, #1
 800646e:	637b      	str	r3, [r7, #52]	; 0x34
 8006470:	4bbc      	ldr	r3, [pc, #752]	; (8006764 <moment62+0x30c>)
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	4619      	mov	r1, r3
 8006478:	f04f 0200 	mov.w	r2, #0
 800647c:	f04f 0300 	mov.w	r3, #0
 8006480:	f04f 0400 	mov.w	r4, #0
 8006484:	0154      	lsls	r4, r2, #5
 8006486:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800648a:	014b      	lsls	r3, r1, #5
 800648c:	4bb5      	ldr	r3, [pc, #724]	; (8006764 <moment62+0x30c>)
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	4619      	mov	r1, r3
 8006494:	f04f 0200 	mov.w	r2, #0
 8006498:	f04f 0300 	mov.w	r3, #0
 800649c:	f04f 0400 	mov.w	r4, #0
 80064a0:	0154      	lsls	r4, r2, #5
 80064a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80064a6:	014b      	lsls	r3, r1, #5
 80064a8:	4bae      	ldr	r3, [pc, #696]	; (8006764 <moment62+0x30c>)
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	00db      	lsls	r3, r3, #3
 80064ae:	3303      	adds	r3, #3
 80064b0:	3307      	adds	r3, #7
 80064b2:	08db      	lsrs	r3, r3, #3
 80064b4:	00db      	lsls	r3, r3, #3
 80064b6:	ebad 0d03 	sub.w	sp, sp, r3
 80064ba:	466b      	mov	r3, sp
 80064bc:	3303      	adds	r3, #3
 80064be:	089b      	lsrs	r3, r3, #2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t in_conj[frameSize*2];
 80064c4:	4ba7      	ldr	r3, [pc, #668]	; (8006764 <moment62+0x30c>)
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	3b01      	subs	r3, #1
 80064cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064ce:	4ba5      	ldr	r3, [pc, #660]	; (8006764 <moment62+0x30c>)
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	4619      	mov	r1, r3
 80064d6:	f04f 0200 	mov.w	r2, #0
 80064da:	f04f 0300 	mov.w	r3, #0
 80064de:	f04f 0400 	mov.w	r4, #0
 80064e2:	0154      	lsls	r4, r2, #5
 80064e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80064e8:	014b      	lsls	r3, r1, #5
 80064ea:	4b9e      	ldr	r3, [pc, #632]	; (8006764 <moment62+0x30c>)
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	4619      	mov	r1, r3
 80064f2:	f04f 0200 	mov.w	r2, #0
 80064f6:	f04f 0300 	mov.w	r3, #0
 80064fa:	f04f 0400 	mov.w	r4, #0
 80064fe:	0154      	lsls	r4, r2, #5
 8006500:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006504:	014b      	lsls	r3, r1, #5
 8006506:	4b97      	ldr	r3, [pc, #604]	; (8006764 <moment62+0x30c>)
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	3303      	adds	r3, #3
 800650e:	3307      	adds	r3, #7
 8006510:	08db      	lsrs	r3, r3, #3
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	ebad 0d03 	sub.w	sp, sp, r3
 8006518:	466b      	mov	r3, sp
 800651a:	3303      	adds	r3, #3
 800651c:	089b      	lsrs	r3, r3, #2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m20[frameSize*2]; // in^2
 8006522:	4b90      	ldr	r3, [pc, #576]	; (8006764 <moment62+0x30c>)
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	3b01      	subs	r3, #1
 800652a:	647b      	str	r3, [r7, #68]	; 0x44
 800652c:	4b8d      	ldr	r3, [pc, #564]	; (8006764 <moment62+0x30c>)
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	4619      	mov	r1, r3
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	f04f 0400 	mov.w	r4, #0
 8006540:	0154      	lsls	r4, r2, #5
 8006542:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006546:	014b      	lsls	r3, r1, #5
 8006548:	4b86      	ldr	r3, [pc, #536]	; (8006764 <moment62+0x30c>)
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	005b      	lsls	r3, r3, #1
 800654e:	4619      	mov	r1, r3
 8006550:	f04f 0200 	mov.w	r2, #0
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	f04f 0400 	mov.w	r4, #0
 800655c:	0154      	lsls	r4, r2, #5
 800655e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006562:	014b      	lsls	r3, r1, #5
 8006564:	4b7f      	ldr	r3, [pc, #508]	; (8006764 <moment62+0x30c>)
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	3303      	adds	r3, #3
 800656c:	3307      	adds	r3, #7
 800656e:	08db      	lsrs	r3, r3, #3
 8006570:	00db      	lsls	r3, r3, #3
 8006572:	ebad 0d03 	sub.w	sp, sp, r3
 8006576:	466b      	mov	r3, sp
 8006578:	3303      	adds	r3, #3
 800657a:	089b      	lsrs	r3, r3, #2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t m30[frameSize]; // in^3
 8006580:	4b78      	ldr	r3, [pc, #480]	; (8006764 <moment62+0x30c>)
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	3b01      	subs	r3, #1
 8006586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006588:	4b76      	ldr	r3, [pc, #472]	; (8006764 <moment62+0x30c>)
 800658a:	881b      	ldrh	r3, [r3, #0]
 800658c:	b299      	uxth	r1, r3
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	f04f 0300 	mov.w	r3, #0
 8006596:	f04f 0400 	mov.w	r4, #0
 800659a:	0154      	lsls	r4, r2, #5
 800659c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80065a0:	014b      	lsls	r3, r1, #5
 80065a2:	4b70      	ldr	r3, [pc, #448]	; (8006764 <moment62+0x30c>)
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	b299      	uxth	r1, r3
 80065a8:	f04f 0200 	mov.w	r2, #0
 80065ac:	f04f 0300 	mov.w	r3, #0
 80065b0:	f04f 0400 	mov.w	r4, #0
 80065b4:	0154      	lsls	r4, r2, #5
 80065b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80065ba:	014b      	lsls	r3, r1, #5
 80065bc:	4b69      	ldr	r3, [pc, #420]	; (8006764 <moment62+0x30c>)
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	3303      	adds	r3, #3
 80065c4:	3307      	adds	r3, #7
 80065c6:	08db      	lsrs	r3, r3, #3
 80065c8:	00db      	lsls	r3, r3, #3
 80065ca:	ebad 0d03 	sub.w	sp, sp, r3
 80065ce:	466b      	mov	r3, sp
 80065d0:	3303      	adds	r3, #3
 80065d2:	089b      	lsrs	r3, r3, #2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	653b      	str	r3, [r7, #80]	; 0x50
	float32_t m40[frameSize]; // in^4
 80065d8:	4b62      	ldr	r3, [pc, #392]	; (8006764 <moment62+0x30c>)
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	3b01      	subs	r3, #1
 80065de:	657b      	str	r3, [r7, #84]	; 0x54
 80065e0:	4b60      	ldr	r3, [pc, #384]	; (8006764 <moment62+0x30c>)
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	b299      	uxth	r1, r3
 80065e6:	f04f 0200 	mov.w	r2, #0
 80065ea:	f04f 0300 	mov.w	r3, #0
 80065ee:	f04f 0400 	mov.w	r4, #0
 80065f2:	0154      	lsls	r4, r2, #5
 80065f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80065f8:	014b      	lsls	r3, r1, #5
 80065fa:	4b5a      	ldr	r3, [pc, #360]	; (8006764 <moment62+0x30c>)
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	b299      	uxth	r1, r3
 8006600:	f04f 0200 	mov.w	r2, #0
 8006604:	f04f 0300 	mov.w	r3, #0
 8006608:	f04f 0400 	mov.w	r4, #0
 800660c:	0154      	lsls	r4, r2, #5
 800660e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006612:	014b      	lsls	r3, r1, #5
 8006614:	4b53      	ldr	r3, [pc, #332]	; (8006764 <moment62+0x30c>)
 8006616:	881b      	ldrh	r3, [r3, #0]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	3303      	adds	r3, #3
 800661c:	3307      	adds	r3, #7
 800661e:	08db      	lsrs	r3, r3, #3
 8006620:	00db      	lsls	r3, r3, #3
 8006622:	ebad 0d03 	sub.w	sp, sp, r3
 8006626:	466b      	mov	r3, sp
 8006628:	3303      	adds	r3, #3
 800662a:	089b      	lsrs	r3, r3, #2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t m51[frameSize]; // in^5
 8006630:	4b4c      	ldr	r3, [pc, #304]	; (8006764 <moment62+0x30c>)
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	3b01      	subs	r3, #1
 8006636:	623b      	str	r3, [r7, #32]
 8006638:	4b4a      	ldr	r3, [pc, #296]	; (8006764 <moment62+0x30c>)
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b299      	uxth	r1, r3
 800663e:	f04f 0200 	mov.w	r2, #0
 8006642:	f04f 0300 	mov.w	r3, #0
 8006646:	f04f 0400 	mov.w	r4, #0
 800664a:	0154      	lsls	r4, r2, #5
 800664c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006650:	014b      	lsls	r3, r1, #5
 8006652:	4b44      	ldr	r3, [pc, #272]	; (8006764 <moment62+0x30c>)
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	b299      	uxth	r1, r3
 8006658:	f04f 0200 	mov.w	r2, #0
 800665c:	f04f 0300 	mov.w	r3, #0
 8006660:	f04f 0400 	mov.w	r4, #0
 8006664:	0154      	lsls	r4, r2, #5
 8006666:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800666a:	014b      	lsls	r3, r1, #5
 800666c:	4b3d      	ldr	r3, [pc, #244]	; (8006764 <moment62+0x30c>)
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	3303      	adds	r3, #3
 8006674:	3307      	adds	r3, #7
 8006676:	08db      	lsrs	r3, r3, #3
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	ebad 0d03 	sub.w	sp, sp, r3
 800667e:	466b      	mov	r3, sp
 8006680:	3303      	adds	r3, #3
 8006682:	089b      	lsrs	r3, r3, #2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	61fb      	str	r3, [r7, #28]
	float32_t m62[frameSize]; // in^6
 8006688:	4b36      	ldr	r3, [pc, #216]	; (8006764 <moment62+0x30c>)
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	3b01      	subs	r3, #1
 800668e:	61bb      	str	r3, [r7, #24]
 8006690:	4b34      	ldr	r3, [pc, #208]	; (8006764 <moment62+0x30c>)
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	b299      	uxth	r1, r3
 8006696:	f04f 0200 	mov.w	r2, #0
 800669a:	f04f 0300 	mov.w	r3, #0
 800669e:	f04f 0400 	mov.w	r4, #0
 80066a2:	0154      	lsls	r4, r2, #5
 80066a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80066a8:	014b      	lsls	r3, r1, #5
 80066aa:	4b2e      	ldr	r3, [pc, #184]	; (8006764 <moment62+0x30c>)
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	b299      	uxth	r1, r3
 80066b0:	f04f 0200 	mov.w	r2, #0
 80066b4:	f04f 0300 	mov.w	r3, #0
 80066b8:	f04f 0400 	mov.w	r4, #0
 80066bc:	0154      	lsls	r4, r2, #5
 80066be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80066c2:	014b      	lsls	r3, r1, #5
 80066c4:	4b27      	ldr	r3, [pc, #156]	; (8006764 <moment62+0x30c>)
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	3303      	adds	r3, #3
 80066cc:	3307      	adds	r3, #7
 80066ce:	08db      	lsrs	r3, r3, #3
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	ebad 0d03 	sub.w	sp, sp, r3
 80066d6:	466b      	mov	r3, sp
 80066d8:	3303      	adds	r3, #3
 80066da:	089b      	lsrs	r3, r3, #2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	617b      	str	r3, [r7, #20]
	float32_t m62_real = 0.0f, m62_imag = 0.0f;
 80066e0:	f04f 0300 	mov.w	r3, #0
 80066e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80066e6:	f04f 0300 	mov.w	r3, #0
 80066ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t m62_real_mean = 0.0f, m62_imag_mean = 0.0f;
 80066ec:	f04f 0300 	mov.w	r3, #0
 80066f0:	613b      	str	r3, [r7, #16]
 80066f2:	f04f 0300 	mov.w	r3, #0
 80066f6:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 80066f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066fa:	4b1a      	ldr	r3, [pc, #104]	; (8006764 <moment62+0x30c>)
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	461a      	mov	r2, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7fa ff81 	bl	800160a <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8006708:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800670a:	4b16      	ldr	r3, [pc, #88]	; (8006764 <moment62+0x30c>)
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7fa f9e5 	bl	8000ae0 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8006716:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006718:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800671a:	4b12      	ldr	r3, [pc, #72]	; (8006764 <moment62+0x30c>)
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7fa fb87 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8006724:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006726:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006728:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800672a:	4b0e      	ldr	r3, [pc, #56]	; (8006764 <moment62+0x30c>)
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	f7fa fb80 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 8006732:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006734:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006738:	4b0a      	ldr	r3, [pc, #40]	; (8006764 <moment62+0x30c>)
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	f7fa fb79 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m40[0], &in_conj[0], &m51[0], frameSize);
 8006740:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006742:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006744:	69fa      	ldr	r2, [r7, #28]
 8006746:	4b07      	ldr	r3, [pc, #28]	; (8006764 <moment62+0x30c>)
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	f7fa fb72 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m51[0], &in_conj[0], &m62[0], frameSize);
 800674e:	69f8      	ldr	r0, [r7, #28]
 8006750:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	4b03      	ldr	r3, [pc, #12]	; (8006764 <moment62+0x30c>)
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	f7fa fb6b 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 800675c:	2300      	movs	r3, #0
 800675e:	633b      	str	r3, [r7, #48]	; 0x30
 8006760:	e01e      	b.n	80067a0 <moment62+0x348>
 8006762:	bf00      	nop
 8006764:	0801420c 	.word	0x0801420c
		m62_real += m62[i];
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	edd3 7a00 	vldr	s15, [r3]
 8006774:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800677c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		m62_imag += m62[i+1];
 8006780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006782:	3301      	adds	r3, #1
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	edd3 7a00 	vldr	s15, [r3]
 800678e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006796:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i < frameSize*2; i+=2){
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	3302      	adds	r3, #2
 800679e:	633b      	str	r3, [r7, #48]	; 0x30
 80067a0:	4b1c      	ldr	r3, [pc, #112]	; (8006814 <moment62+0x3bc>)
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067a8:	429a      	cmp	r2, r3
 80067aa:	dbdd      	blt.n	8006768 <moment62+0x310>
	}
	m62_real_mean = m62_real / frameSize;
 80067ac:	4b19      	ldr	r3, [pc, #100]	; (8006814 <moment62+0x3bc>)
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	ee07 3a90 	vmov	s15, r3
 80067b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067b8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80067bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067c0:	edc7 7a04 	vstr	s15, [r7, #16]
	m62_imag_mean = m62_imag / frameSize;
 80067c4:	4b13      	ldr	r3, [pc, #76]	; (8006814 <moment62+0x3bc>)
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	ee07 3a90 	vmov	s15, r3
 80067cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067d0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80067d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067d8:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(m62_real_mean*m62_real_mean + m62_imag_mean*m62_imag_mean);
 80067dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80067e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80067e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067e8:	edd7 6a03 	vldr	s13, [r7, #12]
 80067ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80067f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067f8:	eeb0 0a67 	vmov.f32	s0, s15
 80067fc:	f007 fc28 	bl	800e050 <sqrtf>
 8006800:	eef0 7a40 	vmov.f32	s15, s0
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	edc3 7a00 	vstr	s15, [r3]
 800680a:	46ad      	mov	sp, r5
}
 800680c:	bf00      	nop
 800680e:	3758      	adds	r7, #88	; 0x58
 8006810:	46bd      	mov	sp, r7
 8006812:	bdb0      	pop	{r4, r5, r7, pc}
 8006814:	0801420c 	.word	0x0801420c

08006818 <moment63>:

void moment63(float32_t in[], float32_t *out){
 8006818:	b5b0      	push	{r4, r5, r7, lr}
 800681a:	b096      	sub	sp, #88	; 0x58
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
 8006822:	466b      	mov	r3, sp
 8006824:	461d      	mov	r5, r3
	float32_t in_cp[frameSize*2];
 8006826:	4bbf      	ldr	r3, [pc, #764]	; (8006b24 <moment63+0x30c>)
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	005b      	lsls	r3, r3, #1
 800682c:	3b01      	subs	r3, #1
 800682e:	637b      	str	r3, [r7, #52]	; 0x34
 8006830:	4bbc      	ldr	r3, [pc, #752]	; (8006b24 <moment63+0x30c>)
 8006832:	881b      	ldrh	r3, [r3, #0]
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	4619      	mov	r1, r3
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	f04f 0400 	mov.w	r4, #0
 8006844:	0154      	lsls	r4, r2, #5
 8006846:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800684a:	014b      	lsls	r3, r1, #5
 800684c:	4bb5      	ldr	r3, [pc, #724]	; (8006b24 <moment63+0x30c>)
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	005b      	lsls	r3, r3, #1
 8006852:	4619      	mov	r1, r3
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	f04f 0400 	mov.w	r4, #0
 8006860:	0154      	lsls	r4, r2, #5
 8006862:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006866:	014b      	lsls	r3, r1, #5
 8006868:	4bae      	ldr	r3, [pc, #696]	; (8006b24 <moment63+0x30c>)
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	3303      	adds	r3, #3
 8006870:	3307      	adds	r3, #7
 8006872:	08db      	lsrs	r3, r3, #3
 8006874:	00db      	lsls	r3, r3, #3
 8006876:	ebad 0d03 	sub.w	sp, sp, r3
 800687a:	466b      	mov	r3, sp
 800687c:	3303      	adds	r3, #3
 800687e:	089b      	lsrs	r3, r3, #2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t in_conj[frameSize*2];
 8006884:	4ba7      	ldr	r3, [pc, #668]	; (8006b24 <moment63+0x30c>)
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	3b01      	subs	r3, #1
 800688c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800688e:	4ba5      	ldr	r3, [pc, #660]	; (8006b24 <moment63+0x30c>)
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	005b      	lsls	r3, r3, #1
 8006894:	4619      	mov	r1, r3
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	f04f 0400 	mov.w	r4, #0
 80068a2:	0154      	lsls	r4, r2, #5
 80068a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80068a8:	014b      	lsls	r3, r1, #5
 80068aa:	4b9e      	ldr	r3, [pc, #632]	; (8006b24 <moment63+0x30c>)
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	4619      	mov	r1, r3
 80068b2:	f04f 0200 	mov.w	r2, #0
 80068b6:	f04f 0300 	mov.w	r3, #0
 80068ba:	f04f 0400 	mov.w	r4, #0
 80068be:	0154      	lsls	r4, r2, #5
 80068c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80068c4:	014b      	lsls	r3, r1, #5
 80068c6:	4b97      	ldr	r3, [pc, #604]	; (8006b24 <moment63+0x30c>)
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	3303      	adds	r3, #3
 80068ce:	3307      	adds	r3, #7
 80068d0:	08db      	lsrs	r3, r3, #3
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	ebad 0d03 	sub.w	sp, sp, r3
 80068d8:	466b      	mov	r3, sp
 80068da:	3303      	adds	r3, #3
 80068dc:	089b      	lsrs	r3, r3, #2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m20[frameSize*2]; // in^2
 80068e2:	4b90      	ldr	r3, [pc, #576]	; (8006b24 <moment63+0x30c>)
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	005b      	lsls	r3, r3, #1
 80068e8:	3b01      	subs	r3, #1
 80068ea:	647b      	str	r3, [r7, #68]	; 0x44
 80068ec:	4b8d      	ldr	r3, [pc, #564]	; (8006b24 <moment63+0x30c>)
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	4619      	mov	r1, r3
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	f04f 0300 	mov.w	r3, #0
 80068fc:	f04f 0400 	mov.w	r4, #0
 8006900:	0154      	lsls	r4, r2, #5
 8006902:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006906:	014b      	lsls	r3, r1, #5
 8006908:	4b86      	ldr	r3, [pc, #536]	; (8006b24 <moment63+0x30c>)
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	4619      	mov	r1, r3
 8006910:	f04f 0200 	mov.w	r2, #0
 8006914:	f04f 0300 	mov.w	r3, #0
 8006918:	f04f 0400 	mov.w	r4, #0
 800691c:	0154      	lsls	r4, r2, #5
 800691e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006922:	014b      	lsls	r3, r1, #5
 8006924:	4b7f      	ldr	r3, [pc, #508]	; (8006b24 <moment63+0x30c>)
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	00db      	lsls	r3, r3, #3
 800692a:	3303      	adds	r3, #3
 800692c:	3307      	adds	r3, #7
 800692e:	08db      	lsrs	r3, r3, #3
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	ebad 0d03 	sub.w	sp, sp, r3
 8006936:	466b      	mov	r3, sp
 8006938:	3303      	adds	r3, #3
 800693a:	089b      	lsrs	r3, r3, #2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t m30[frameSize]; // in^3
 8006940:	4b78      	ldr	r3, [pc, #480]	; (8006b24 <moment63+0x30c>)
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	3b01      	subs	r3, #1
 8006946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006948:	4b76      	ldr	r3, [pc, #472]	; (8006b24 <moment63+0x30c>)
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b299      	uxth	r1, r3
 800694e:	f04f 0200 	mov.w	r2, #0
 8006952:	f04f 0300 	mov.w	r3, #0
 8006956:	f04f 0400 	mov.w	r4, #0
 800695a:	0154      	lsls	r4, r2, #5
 800695c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006960:	014b      	lsls	r3, r1, #5
 8006962:	4b70      	ldr	r3, [pc, #448]	; (8006b24 <moment63+0x30c>)
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	b299      	uxth	r1, r3
 8006968:	f04f 0200 	mov.w	r2, #0
 800696c:	f04f 0300 	mov.w	r3, #0
 8006970:	f04f 0400 	mov.w	r4, #0
 8006974:	0154      	lsls	r4, r2, #5
 8006976:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800697a:	014b      	lsls	r3, r1, #5
 800697c:	4b69      	ldr	r3, [pc, #420]	; (8006b24 <moment63+0x30c>)
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	3303      	adds	r3, #3
 8006984:	3307      	adds	r3, #7
 8006986:	08db      	lsrs	r3, r3, #3
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	ebad 0d03 	sub.w	sp, sp, r3
 800698e:	466b      	mov	r3, sp
 8006990:	3303      	adds	r3, #3
 8006992:	089b      	lsrs	r3, r3, #2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	653b      	str	r3, [r7, #80]	; 0x50
	float32_t m41[frameSize]; // in^4
 8006998:	4b62      	ldr	r3, [pc, #392]	; (8006b24 <moment63+0x30c>)
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	3b01      	subs	r3, #1
 800699e:	657b      	str	r3, [r7, #84]	; 0x54
 80069a0:	4b60      	ldr	r3, [pc, #384]	; (8006b24 <moment63+0x30c>)
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	b299      	uxth	r1, r3
 80069a6:	f04f 0200 	mov.w	r2, #0
 80069aa:	f04f 0300 	mov.w	r3, #0
 80069ae:	f04f 0400 	mov.w	r4, #0
 80069b2:	0154      	lsls	r4, r2, #5
 80069b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80069b8:	014b      	lsls	r3, r1, #5
 80069ba:	4b5a      	ldr	r3, [pc, #360]	; (8006b24 <moment63+0x30c>)
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b299      	uxth	r1, r3
 80069c0:	f04f 0200 	mov.w	r2, #0
 80069c4:	f04f 0300 	mov.w	r3, #0
 80069c8:	f04f 0400 	mov.w	r4, #0
 80069cc:	0154      	lsls	r4, r2, #5
 80069ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80069d2:	014b      	lsls	r3, r1, #5
 80069d4:	4b53      	ldr	r3, [pc, #332]	; (8006b24 <moment63+0x30c>)
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	3303      	adds	r3, #3
 80069dc:	3307      	adds	r3, #7
 80069de:	08db      	lsrs	r3, r3, #3
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	ebad 0d03 	sub.w	sp, sp, r3
 80069e6:	466b      	mov	r3, sp
 80069e8:	3303      	adds	r3, #3
 80069ea:	089b      	lsrs	r3, r3, #2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t m52[frameSize]; // in^5
 80069f0:	4b4c      	ldr	r3, [pc, #304]	; (8006b24 <moment63+0x30c>)
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	3b01      	subs	r3, #1
 80069f6:	623b      	str	r3, [r7, #32]
 80069f8:	4b4a      	ldr	r3, [pc, #296]	; (8006b24 <moment63+0x30c>)
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	b299      	uxth	r1, r3
 80069fe:	f04f 0200 	mov.w	r2, #0
 8006a02:	f04f 0300 	mov.w	r3, #0
 8006a06:	f04f 0400 	mov.w	r4, #0
 8006a0a:	0154      	lsls	r4, r2, #5
 8006a0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006a10:	014b      	lsls	r3, r1, #5
 8006a12:	4b44      	ldr	r3, [pc, #272]	; (8006b24 <moment63+0x30c>)
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	b299      	uxth	r1, r3
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	f04f 0400 	mov.w	r4, #0
 8006a24:	0154      	lsls	r4, r2, #5
 8006a26:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006a2a:	014b      	lsls	r3, r1, #5
 8006a2c:	4b3d      	ldr	r3, [pc, #244]	; (8006b24 <moment63+0x30c>)
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	3303      	adds	r3, #3
 8006a34:	3307      	adds	r3, #7
 8006a36:	08db      	lsrs	r3, r3, #3
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	ebad 0d03 	sub.w	sp, sp, r3
 8006a3e:	466b      	mov	r3, sp
 8006a40:	3303      	adds	r3, #3
 8006a42:	089b      	lsrs	r3, r3, #2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	61fb      	str	r3, [r7, #28]
	float32_t m63[frameSize]; // in^6
 8006a48:	4b36      	ldr	r3, [pc, #216]	; (8006b24 <moment63+0x30c>)
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	61bb      	str	r3, [r7, #24]
 8006a50:	4b34      	ldr	r3, [pc, #208]	; (8006b24 <moment63+0x30c>)
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	b299      	uxth	r1, r3
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	f04f 0300 	mov.w	r3, #0
 8006a5e:	f04f 0400 	mov.w	r4, #0
 8006a62:	0154      	lsls	r4, r2, #5
 8006a64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006a68:	014b      	lsls	r3, r1, #5
 8006a6a:	4b2e      	ldr	r3, [pc, #184]	; (8006b24 <moment63+0x30c>)
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	b299      	uxth	r1, r3
 8006a70:	f04f 0200 	mov.w	r2, #0
 8006a74:	f04f 0300 	mov.w	r3, #0
 8006a78:	f04f 0400 	mov.w	r4, #0
 8006a7c:	0154      	lsls	r4, r2, #5
 8006a7e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006a82:	014b      	lsls	r3, r1, #5
 8006a84:	4b27      	ldr	r3, [pc, #156]	; (8006b24 <moment63+0x30c>)
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	3303      	adds	r3, #3
 8006a8c:	3307      	adds	r3, #7
 8006a8e:	08db      	lsrs	r3, r3, #3
 8006a90:	00db      	lsls	r3, r3, #3
 8006a92:	ebad 0d03 	sub.w	sp, sp, r3
 8006a96:	466b      	mov	r3, sp
 8006a98:	3303      	adds	r3, #3
 8006a9a:	089b      	lsrs	r3, r3, #2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	617b      	str	r3, [r7, #20]
	float32_t m63_real = 0.0f, m63_imag = 0.0f;
 8006aa0:	f04f 0300 	mov.w	r3, #0
 8006aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aa6:	f04f 0300 	mov.w	r3, #0
 8006aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t m63_real_mean = 0.0f, m63_imag_mean = 0.0f;
 8006aac:	f04f 0300 	mov.w	r3, #0
 8006ab0:	613b      	str	r3, [r7, #16]
 8006ab2:	f04f 0300 	mov.w	r3, #0
 8006ab6:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8006ab8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006aba:	4b1a      	ldr	r3, [pc, #104]	; (8006b24 <moment63+0x30c>)
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fa fda1 	bl	800160a <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8006ac8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006aca:	4b16      	ldr	r3, [pc, #88]	; (8006b24 <moment63+0x30c>)
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7fa f805 	bl	8000ae0 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8006ad6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ada:	4b12      	ldr	r3, [pc, #72]	; (8006b24 <moment63+0x30c>)
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7fa f9a7 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8006ae4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006ae6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ae8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006aea:	4b0e      	ldr	r3, [pc, #56]	; (8006b24 <moment63+0x30c>)
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	f7fa f9a0 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_conj[0], &m41[0], frameSize);
 8006af2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006af4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af8:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <moment63+0x30c>)
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	f7fa f999 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m41[0], &in_conj[0], &m52[0], frameSize);
 8006b00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b04:	69fa      	ldr	r2, [r7, #28]
 8006b06:	4b07      	ldr	r3, [pc, #28]	; (8006b24 <moment63+0x30c>)
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	f7fa f992 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m52[0], &in_conj[0], &m63[0], frameSize);
 8006b0e:	69f8      	ldr	r0, [r7, #28]
 8006b10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	4b03      	ldr	r3, [pc, #12]	; (8006b24 <moment63+0x30c>)
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	f7fa f98b 	bl	8000e32 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	633b      	str	r3, [r7, #48]	; 0x30
 8006b20:	e01e      	b.n	8006b60 <moment63+0x348>
 8006b22:	bf00      	nop
 8006b24:	0801420c 	.word	0x0801420c
		m63_real += m63[i];
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	edd3 7a00 	vldr	s15, [r3]
 8006b34:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b3c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		m63_imag += m63[i+1];
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	3301      	adds	r3, #1
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	edd3 7a00 	vldr	s15, [r3]
 8006b4e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b56:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i < frameSize*2; i+=2){
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	3302      	adds	r3, #2
 8006b5e:	633b      	str	r3, [r7, #48]	; 0x30
 8006b60:	4b1c      	ldr	r3, [pc, #112]	; (8006bd4 <moment63+0x3bc>)
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	dbdd      	blt.n	8006b28 <moment63+0x310>
	}
	m63_real_mean = m63_real / frameSize;
 8006b6c:	4b19      	ldr	r3, [pc, #100]	; (8006bd4 <moment63+0x3bc>)
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	ee07 3a90 	vmov	s15, r3
 8006b74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b78:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8006b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b80:	edc7 7a04 	vstr	s15, [r7, #16]
	m63_imag_mean = m63_imag / frameSize;
 8006b84:	4b13      	ldr	r3, [pc, #76]	; (8006bd4 <moment63+0x3bc>)
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	ee07 3a90 	vmov	s15, r3
 8006b8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b90:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8006b94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b98:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(m63_real_mean*m63_real_mean + m63_imag_mean*m63_imag_mean);
 8006b9c:	ed97 7a04 	vldr	s14, [r7, #16]
 8006ba0:	edd7 7a04 	vldr	s15, [r7, #16]
 8006ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ba8:	edd7 6a03 	vldr	s13, [r7, #12]
 8006bac:	edd7 7a03 	vldr	s15, [r7, #12]
 8006bb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8006bbc:	f007 fa48 	bl	800e050 <sqrtf>
 8006bc0:	eef0 7a40 	vmov.f32	s15, s0
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	edc3 7a00 	vstr	s15, [r3]
 8006bca:	46ad      	mov	sp, r5
}
 8006bcc:	bf00      	nop
 8006bce:	3758      	adds	r7, #88	; 0x58
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8006bd4:	0801420c 	.word	0x0801420c

08006bd8 <cumulant_20>:

// Features no 13, 14, 15, 16, 17, 18, 19, 20 and 21
void cumulant_20(float32_t in[], float32_t *out){
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
	moment20(&in[0], out);
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7fe f861 	bl	8004cac <moment20>
};
 8006bea:	bf00      	nop
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <cumulant_21>:
void cumulant_21(float32_t in[], float32_t *out){
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b082      	sub	sp, #8
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
	moment21(&in[0], out);
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7fe f930 	bl	8004e64 <moment21>
};
 8006c04:	bf00      	nop
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <cumulant_40>:

void cumulant_40(float32_t in[], float32_t *out){
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
	float32_t m40, m20;
	moment20(&in[0], &m20);
 8006c16:	f107 0308 	add.w	r3, r7, #8
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7fe f845 	bl	8004cac <moment20>
	moment40(&in[0], &m40);
 8006c22:	f107 030c 	add.w	r3, r7, #12
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7fe fae1 	bl	80051f0 <moment40>
	*out = fabsf(m40 - 3*m20*m20);
 8006c2e:	ed97 7a03 	vldr	s14, [r7, #12]
 8006c32:	edd7 7a02 	vldr	s15, [r7, #8]
 8006c36:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8006c3a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006c3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c4a:	eef0 7ae7 	vabs.f32	s15, s15
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	edc3 7a00 	vstr	s15, [r3]
};
 8006c54:	bf00      	nop
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <cumulant_41>:
void cumulant_41(float32_t in[], float32_t *out){
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
	float32_t m41, m20, m21;
	moment41(&in[0], &m41);
 8006c66:	f107 0314 	add.w	r3, r7, #20
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7fe fc01 	bl	8005474 <moment41>
	moment20(&in[0], &m20);
 8006c72:	f107 0310 	add.w	r3, r7, #16
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7fe f817 	bl	8004cac <moment20>
	moment21(&in[0], &m21);
 8006c7e:	f107 030c 	add.w	r3, r7, #12
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7fe f8ed 	bl	8004e64 <moment21>
	*out = fabsf(m41 - 3*m20*m21);
 8006c8a:	ed97 7a05 	vldr	s14, [r7, #20]
 8006c8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006c92:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8006c96:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006c9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ca2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ca6:	eef0 7ae7 	vabs.f32	s15, s15
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	edc3 7a00 	vstr	s15, [r3]
};
 8006cb0:	bf00      	nop
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <cumulant_42>:
void cumulant_42(float32_t in[], float32_t *out){
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
	float32_t m42, m20, m21, temp;
	moment42(&in[0], &m42);
 8006cc2:	f107 0310 	add.w	r3, r7, #16
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7fe fd4b 	bl	8005764 <moment42>
	moment20(&in[0], &m20);
 8006cce:	f107 030c 	add.w	r3, r7, #12
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7fd ffe9 	bl	8004cac <moment20>
	moment21(&in[0], &m21);
 8006cda:	f107 0308 	add.w	r3, r7, #8
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7fe f8bf 	bl	8004e64 <moment21>
	temp = fabsf(m20);
 8006ce6:	edd7 7a03 	vldr	s15, [r7, #12]
 8006cea:	eef0 7ae7 	vabs.f32	s15, s15
 8006cee:	edc7 7a05 	vstr	s15, [r7, #20]
	*out = fabsf(m42 - temp*temp - 2*m21*m21);
 8006cf2:	ed97 7a04 	vldr	s14, [r7, #16]
 8006cf6:	edd7 6a05 	vldr	s13, [r7, #20]
 8006cfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8006cfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006d06:	edd7 7a02 	vldr	s15, [r7, #8]
 8006d0a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006d0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006d12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d1a:	eef0 7ae7 	vabs.f32	s15, s15
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	edc3 7a00 	vstr	s15, [r3]
};
 8006d24:	bf00      	nop
 8006d26:	3718      	adds	r7, #24
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <cumulant_60>:
void cumulant_60(float32_t in[], float32_t *out){
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
	float32_t m60, m40, m20;
	moment20(&in[0], &m20);
 8006d36:	f107 030c 	add.w	r3, r7, #12
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7fd ffb5 	bl	8004cac <moment20>
	moment40(&in[0], &m40);
 8006d42:	f107 0310 	add.w	r3, r7, #16
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7fe fa51 	bl	80051f0 <moment40>
	moment60(&in[0], &m60);
 8006d4e:	f107 0314 	add.w	r3, r7, #20
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7fe fff5 	bl	8005d44 <moment60>
	*out = fabsf(m60 - 15*m20*m40 + 30*m20*m20*m20);
 8006d5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8006d5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d62:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8006d66:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006d6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8006d6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006d76:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d7a:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8006d7e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006d82:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d86:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006d8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d96:	eef0 7ae7 	vabs.f32	s15, s15
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	edc3 7a00 	vstr	s15, [r3]
};
 8006da0:	bf00      	nop
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <cumulant_61>:
void cumulant_61(float32_t in[], float32_t *out){
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b088      	sub	sp, #32
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
	//M61 - 5 M21 M40 - 10 M20 M41 + 30 M20 M20 M21
	float32_t m61, m21, m40, m20, m41;
	moment20(&in[0], &m20);
 8006db2:	f107 0310 	add.w	r3, r7, #16
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7fd ff77 	bl	8004cac <moment20>
	moment21(&in[0], &m21);
 8006dbe:	f107 0318 	add.w	r3, r7, #24
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7fe f84d 	bl	8004e64 <moment21>
	moment40(&in[0], &m40);
 8006dca:	f107 0314 	add.w	r3, r7, #20
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7fe fa0d 	bl	80051f0 <moment40>
	moment41(&in[0], &m41);
 8006dd6:	f107 030c 	add.w	r3, r7, #12
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7fe fb49 	bl	8005474 <moment41>
	moment61(&in[0], &m61);
 8006de2:	f107 031c 	add.w	r3, r7, #28
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7ff f955 	bl	8006098 <moment61>
	*out = fabsf(m61 - 5*m21*m40 - 10*m20*m41 + 30*m20*m20*m21);
 8006dee:	ed97 7a07 	vldr	s14, [r7, #28]
 8006df2:	edd7 7a06 	vldr	s15, [r7, #24]
 8006df6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8006dfa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006dfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006e0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8006e0e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006e12:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006e16:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006e22:	edd7 7a04 	vldr	s15, [r7, #16]
 8006e26:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8006e2a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006e2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006e32:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006e36:	edd7 7a06 	vldr	s15, [r7, #24]
 8006e3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e42:	eef0 7ae7 	vabs.f32	s15, s15
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	edc3 7a00 	vstr	s15, [r3]
};
 8006e4c:	bf00      	nop
 8006e4e:	3720      	adds	r7, #32
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <cumulant_62>:
void cumulant_62(float32_t in[], float32_t *out){
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b08a      	sub	sp, #40	; 0x28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
	// M62 - 6 M20 M42 - 8 M21 M41 - M22 M40 + 6 M20 M20 M22 + 24 M21 M21 M22
	float32_t m62, m20, m42, m21, m41, m22, m40;
	moment20(&in[0], &m20);
 8006e5e:	f107 0320 	add.w	r3, r7, #32
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7fd ff21 	bl	8004cac <moment20>
	moment21(&in[0], &m21);
 8006e6a:	f107 0318 	add.w	r3, r7, #24
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7fd fff7 	bl	8004e64 <moment21>
	moment22(&in[0], &m22);
 8006e76:	f107 0310 	add.w	r3, r7, #16
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7fe f8a5 	bl	8004fcc <moment22>
	moment40(&in[0], &m40);
 8006e82:	f107 030c 	add.w	r3, r7, #12
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7fe f9b1 	bl	80051f0 <moment40>
	moment41(&in[0], &m41);
 8006e8e:	f107 0314 	add.w	r3, r7, #20
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7fe faed 	bl	8005474 <moment41>
	moment42(&in[0], &m42);
 8006e9a:	f107 031c 	add.w	r3, r7, #28
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7fe fc5f 	bl	8005764 <moment42>
	moment62(&in[0], &m62);
 8006ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eaa:	4619      	mov	r1, r3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7ff fad3 	bl	8006458 <moment62>
	*out = fabsf(m62 - 6*m20*m42 - 8*m21*m41 - m22*m40 + 6*m20*m20*m22 + 24*m21*m21*m22);
 8006eb2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006eb6:	edd7 7a08 	vldr	s15, [r7, #32]
 8006eba:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8006ebe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006ec2:	edd7 7a07 	vldr	s15, [r7, #28]
 8006ec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006eca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ece:	edd7 7a06 	vldr	s15, [r7, #24]
 8006ed2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8006ed6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006eda:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ede:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ee2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ee6:	edd7 6a04 	vldr	s13, [r7, #16]
 8006eea:	edd7 7a03 	vldr	s15, [r7, #12]
 8006eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ef2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ef6:	edd7 7a08 	vldr	s15, [r7, #32]
 8006efa:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8006efe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006f02:	edd7 7a08 	vldr	s15, [r7, #32]
 8006f06:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006f0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8006f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f16:	edd7 7a06 	vldr	s15, [r7, #24]
 8006f1a:	eef3 6a08 	vmov.f32	s13, #56	; 0x41c00000  24.0
 8006f1e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006f22:	edd7 7a06 	vldr	s15, [r7, #24]
 8006f26:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006f2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8006f2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f36:	eef0 7ae7 	vabs.f32	s15, s15
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	edc3 7a00 	vstr	s15, [r3]
};
 8006f40:	bf00      	nop
 8006f42:	3728      	adds	r7, #40	; 0x28
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <cumulant_63>:
void cumulant_63(float32_t in[], float32_t *out){
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b08a      	sub	sp, #40	; 0x28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
	// M63 - 9 M21 M42 + 12 M21 M21 M21 - 3 M20 M43 - 3 M22 M41 + 18 M20 M21 M22
	float32_t m63, m21, m42, m20, m43, m22, m41;
	moment20(&in[0], &m20);
 8006f52:	f107 0318 	add.w	r3, r7, #24
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7fd fea7 	bl	8004cac <moment20>
	moment21(&in[0], &m21);
 8006f5e:	f107 0320 	add.w	r3, r7, #32
 8006f62:	4619      	mov	r1, r3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f7fd ff7d 	bl	8004e64 <moment21>
	moment22(&in[0], &m22);
 8006f6a:	f107 0310 	add.w	r3, r7, #16
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7fe f82b 	bl	8004fcc <moment22>
	moment41(&in[0], &m41);
 8006f76:	f107 030c 	add.w	r3, r7, #12
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7fe fa79 	bl	8005474 <moment41>
	moment42(&in[0], &m42);
 8006f82:	f107 031c 	add.w	r3, r7, #28
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7fe fbeb 	bl	8005764 <moment42>
	moment43(&in[0], &m43);
 8006f8e:	f107 0314 	add.w	r3, r7, #20
 8006f92:	4619      	mov	r1, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7fe fd5d 	bl	8005a54 <moment43>
	moment63(&in[0], &m63);
 8006f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7ff fc39 	bl	8006818 <moment63>
	*out = fabsf(m63 - 9*m21*m42 + 12*m21*m21*m21 - 3*m20*m43 - 3*m22*m41 + 18*m20*m21*m22);
 8006fa6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006faa:	edd7 7a08 	vldr	s15, [r7, #32]
 8006fae:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8006fb2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006fb6:	edd7 7a07 	vldr	s15, [r7, #28]
 8006fba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006fbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006fc2:	edd7 7a08 	vldr	s15, [r7, #32]
 8006fc6:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8006fca:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006fce:	edd7 7a08 	vldr	s15, [r7, #32]
 8006fd2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006fd6:	edd7 7a08 	vldr	s15, [r7, #32]
 8006fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006fde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006fe2:	edd7 7a06 	vldr	s15, [r7, #24]
 8006fe6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8006fea:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006fee:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ff6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ffa:	edd7 7a04 	vldr	s15, [r7, #16]
 8006ffe:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8007002:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007006:	edd7 7a03 	vldr	s15, [r7, #12]
 800700a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800700e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007012:	edd7 7a06 	vldr	s15, [r7, #24]
 8007016:	eef3 6a02 	vmov.f32	s13, #50	; 0x41900000  18.0
 800701a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800701e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007022:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007026:	edd7 7a04 	vldr	s15, [r7, #16]
 800702a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800702e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007032:	eef0 7ae7 	vabs.f32	s15, s15
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	edc3 7a00 	vstr	s15, [r3]
};
 800703c:	bf00      	nop
 800703e:	3728      	adds	r7, #40	; 0x28
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b08c      	sub	sp, #48	; 0x30
 8007048:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800704a:	f107 031c 	add.w	r3, r7, #28
 800704e:	2200      	movs	r2, #0
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	605a      	str	r2, [r3, #4]
 8007054:	609a      	str	r2, [r3, #8]
 8007056:	60da      	str	r2, [r3, #12]
 8007058:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800705a:	4b4b      	ldr	r3, [pc, #300]	; (8007188 <MX_GPIO_Init+0x144>)
 800705c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007060:	4a49      	ldr	r2, [pc, #292]	; (8007188 <MX_GPIO_Init+0x144>)
 8007062:	f043 0304 	orr.w	r3, r3, #4
 8007066:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800706a:	4b47      	ldr	r3, [pc, #284]	; (8007188 <MX_GPIO_Init+0x144>)
 800706c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007070:	f003 0304 	and.w	r3, r3, #4
 8007074:	61bb      	str	r3, [r7, #24]
 8007076:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007078:	4b43      	ldr	r3, [pc, #268]	; (8007188 <MX_GPIO_Init+0x144>)
 800707a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800707e:	4a42      	ldr	r2, [pc, #264]	; (8007188 <MX_GPIO_Init+0x144>)
 8007080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007088:	4b3f      	ldr	r3, [pc, #252]	; (8007188 <MX_GPIO_Init+0x144>)
 800708a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800708e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007092:	617b      	str	r3, [r7, #20]
 8007094:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007096:	4b3c      	ldr	r3, [pc, #240]	; (8007188 <MX_GPIO_Init+0x144>)
 8007098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800709c:	4a3a      	ldr	r2, [pc, #232]	; (8007188 <MX_GPIO_Init+0x144>)
 800709e:	f043 0302 	orr.w	r3, r3, #2
 80070a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80070a6:	4b38      	ldr	r3, [pc, #224]	; (8007188 <MX_GPIO_Init+0x144>)
 80070a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	613b      	str	r3, [r7, #16]
 80070b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80070b4:	4b34      	ldr	r3, [pc, #208]	; (8007188 <MX_GPIO_Init+0x144>)
 80070b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070ba:	4a33      	ldr	r2, [pc, #204]	; (8007188 <MX_GPIO_Init+0x144>)
 80070bc:	f043 0308 	orr.w	r3, r3, #8
 80070c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80070c4:	4b30      	ldr	r3, [pc, #192]	; (8007188 <MX_GPIO_Init+0x144>)
 80070c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070ca:	f003 0308 	and.w	r3, r3, #8
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80070d2:	4b2d      	ldr	r3, [pc, #180]	; (8007188 <MX_GPIO_Init+0x144>)
 80070d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070d8:	4a2b      	ldr	r2, [pc, #172]	; (8007188 <MX_GPIO_Init+0x144>)
 80070da:	f043 0301 	orr.w	r3, r3, #1
 80070de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80070e2:	4b29      	ldr	r3, [pc, #164]	; (8007188 <MX_GPIO_Init+0x144>)
 80070e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	60bb      	str	r3, [r7, #8]
 80070ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80070f0:	4b25      	ldr	r3, [pc, #148]	; (8007188 <MX_GPIO_Init+0x144>)
 80070f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070f6:	4a24      	ldr	r2, [pc, #144]	; (8007188 <MX_GPIO_Init+0x144>)
 80070f8:	f043 0310 	orr.w	r3, r3, #16
 80070fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007100:	4b21      	ldr	r3, [pc, #132]	; (8007188 <MX_GPIO_Init+0x144>)
 8007102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007106:	f003 0310 	and.w	r3, r3, #16
 800710a:	607b      	str	r3, [r7, #4]
 800710c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800710e:	2200      	movs	r2, #0
 8007110:	f244 0101 	movw	r1, #16385	; 0x4001
 8007114:	481d      	ldr	r0, [pc, #116]	; (800718c <MX_GPIO_Init+0x148>)
 8007116:	f001 fdef 	bl	8008cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800711a:	2200      	movs	r2, #0
 800711c:	2102      	movs	r1, #2
 800711e:	481c      	ldr	r0, [pc, #112]	; (8007190 <MX_GPIO_Init+0x14c>)
 8007120:	f001 fdea 	bl	8008cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8007124:	f244 0301 	movw	r3, #16385	; 0x4001
 8007128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800712a:	2301      	movs	r3, #1
 800712c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800712e:	2300      	movs	r3, #0
 8007130:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007132:	2300      	movs	r3, #0
 8007134:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007136:	f107 031c 	add.w	r3, r7, #28
 800713a:	4619      	mov	r1, r3
 800713c:	4813      	ldr	r0, [pc, #76]	; (800718c <MX_GPIO_Init+0x148>)
 800713e:	f001 fc2b 	bl	8008998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8007142:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8007146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007148:	2302      	movs	r3, #2
 800714a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800714c:	2300      	movs	r3, #0
 800714e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007150:	2300      	movs	r3, #0
 8007152:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8007154:	230a      	movs	r3, #10
 8007156:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007158:	f107 031c 	add.w	r3, r7, #28
 800715c:	4619      	mov	r1, r3
 800715e:	480d      	ldr	r0, [pc, #52]	; (8007194 <MX_GPIO_Init+0x150>)
 8007160:	f001 fc1a 	bl	8008998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8007164:	2302      	movs	r3, #2
 8007166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007168:	2301      	movs	r3, #1
 800716a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800716c:	2300      	movs	r3, #0
 800716e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007170:	2300      	movs	r3, #0
 8007172:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8007174:	f107 031c 	add.w	r3, r7, #28
 8007178:	4619      	mov	r1, r3
 800717a:	4805      	ldr	r0, [pc, #20]	; (8007190 <MX_GPIO_Init+0x14c>)
 800717c:	f001 fc0c 	bl	8008998 <HAL_GPIO_Init>

}
 8007180:	bf00      	nop
 8007182:	3730      	adds	r7, #48	; 0x30
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	58024400 	.word	0x58024400
 800718c:	58020400 	.word	0x58020400
 8007190:	58021000 	.word	0x58021000
 8007194:	58020000 	.word	0x58020000

08007198 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800719c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80071a0:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80071a4:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <SCB_EnableICache+0x3c>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80071ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80071b0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80071b4:	4b07      	ldr	r3, [pc, #28]	; (80071d4 <SCB_EnableICache+0x3c>)
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	4a06      	ldr	r2, [pc, #24]	; (80071d4 <SCB_EnableICache+0x3c>)
 80071ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071be:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80071c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80071c4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80071c8:	bf00      	nop
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	e000ed00 	.word	0xe000ed00

080071d8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80071de:	4b1d      	ldr	r3, [pc, #116]	; (8007254 <SCB_EnableDCache+0x7c>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80071e6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80071ea:	4b1a      	ldr	r3, [pc, #104]	; (8007254 <SCB_EnableDCache+0x7c>)
 80071ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071f0:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	0b5b      	lsrs	r3, r3, #13
 80071f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80071fa:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	08db      	lsrs	r3, r3, #3
 8007200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007204:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800720e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007214:	490f      	ldr	r1, [pc, #60]	; (8007254 <SCB_EnableDCache+0x7c>)
 8007216:	4313      	orrs	r3, r2
 8007218:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	1e5a      	subs	r2, r3, #1
 8007220:	60ba      	str	r2, [r7, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1ef      	bne.n	8007206 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	1e5a      	subs	r2, r3, #1
 800722a:	60fa      	str	r2, [r7, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e5      	bne.n	80071fc <SCB_EnableDCache+0x24>
 8007230:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8007234:	4b07      	ldr	r3, [pc, #28]	; (8007254 <SCB_EnableDCache+0x7c>)
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	4a06      	ldr	r2, [pc, #24]	; (8007254 <SCB_EnableDCache+0x7c>)
 800723a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800723e:	6153      	str	r3, [r2, #20]
 8007240:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007244:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8007248:	bf00      	nop
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	e000ed00 	.word	0xe000ed00

08007258 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b08e      	sub	sp, #56	; 0x38
 800725c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	/*****************************************************************************************************/
	q15_t q15_input_vector[22] = {0};
 800725e:	f107 0308 	add.w	r3, r7, #8
 8007262:	222c      	movs	r2, #44	; 0x2c
 8007264:	2100      	movs	r1, #0
 8007266:	4618      	mov	r0, r3
 8007268:	f006 fcb7 	bl	800dbda <memset>
	/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 800726c:	f7ff ff94 	bl	8007198 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8007270:	f7ff ffb2 	bl	80071d8 <SCB_EnableDCache>

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8007274:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007278:	637b      	str	r3, [r7, #52]	; 0x34
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800727a:	bf00      	nop
 800727c:	4b33      	ldr	r3, [pc, #204]	; (800734c <main+0xf4>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d004      	beq.n	8007292 <main+0x3a>
 8007288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800728a:	1e5a      	subs	r2, r3, #1
 800728c:	637a      	str	r2, [r7, #52]	; 0x34
 800728e:	2b00      	cmp	r3, #0
 8007290:	dcf4      	bgt.n	800727c <main+0x24>
	if ( timeout < 0 )
 8007292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007294:	2b00      	cmp	r3, #0
 8007296:	da01      	bge.n	800729c <main+0x44>
	{
		Error_Handler();
 8007298:	f000 fdae 	bl	8007df8 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800729c:	f000 ff68 	bl	8008170 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80072a0:	f000 fa9a 	bl	80077d8 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80072a4:	4b29      	ldr	r3, [pc, #164]	; (800734c <main+0xf4>)
 80072a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072aa:	4a28      	ldr	r2, [pc, #160]	; (800734c <main+0xf4>)
 80072ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80072b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80072b4:	4b25      	ldr	r3, [pc, #148]	; (800734c <main+0xf4>)
 80072b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072be:	607b      	str	r3, [r7, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80072c2:	2000      	movs	r0, #0
 80072c4:	f001 fd32 	bl	8008d2c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80072c8:	2100      	movs	r1, #0
 80072ca:	2000      	movs	r0, #0
 80072cc:	f001 fd48 	bl	8008d60 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80072d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072d4:	637b      	str	r3, [r7, #52]	; 0x34
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80072d6:	bf00      	nop
 80072d8:	4b1c      	ldr	r3, [pc, #112]	; (800734c <main+0xf4>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d104      	bne.n	80072ee <main+0x96>
 80072e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e6:	1e5a      	subs	r2, r3, #1
 80072e8:	637a      	str	r2, [r7, #52]	; 0x34
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	dcf4      	bgt.n	80072d8 <main+0x80>
	if ( timeout < 0 )
 80072ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	da01      	bge.n	80072f8 <main+0xa0>
	{
		Error_Handler();
 80072f4:	f000 fd80 	bl	8007df8 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80072f8:	f7ff fea4 	bl	8007044 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80072fc:	f000 fe70 	bl	8007fe0 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8007300:	f000 fe00 	bl	8007f04 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	/*****************************************************************************************************/
	// HRTimer enable
	__HAL_TIM_ENABLE(&htim2);
 8007304:	4b12      	ldr	r3, [pc, #72]	; (8007350 <main+0xf8>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	4b11      	ldr	r3, [pc, #68]	; (8007350 <main+0xf8>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f042 0201 	orr.w	r2, r2, #1
 8007312:	601a      	str	r2, [r3, #0]
	__HAL_TIM_UIFREMAP_DISABLE(&htim2);
 8007314:	4b0e      	ldr	r3, [pc, #56]	; (8007350 <main+0xf8>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	4b0d      	ldr	r3, [pc, #52]	; (8007350 <main+0xf8>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007322:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim2);
 8007324:	480a      	ldr	r0, [pc, #40]	; (8007350 <main+0xf8>)
 8007326:	f004 f875 	bl	800b414 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800732a:	4b09      	ldr	r3, [pc, #36]	; (8007350 <main+0xf8>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2200      	movs	r2, #0
 8007330:	625a      	str	r2, [r3, #36]	; 0x24
	// Put UART peripheral in reception process
	if(HAL_UART_Receive_IT(&huart3, &rxBuffer.bytes[0], RX_DATA_SIZE*4) != HAL_OK)
 8007332:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007336:	4907      	ldr	r1, [pc, #28]	; (8007354 <main+0xfc>)
 8007338:	4807      	ldr	r0, [pc, #28]	; (8007358 <main+0x100>)
 800733a:	f004 fbfd 	bl	800bb38 <HAL_UART_Receive_IT>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d013      	beq.n	800736c <main+0x114>
	{
		Error_Handler();
 8007344:	f000 fd58 	bl	8007df8 <Error_Handler>
	}
	// Wait for message
	while (UartReady != SET)
 8007348:	e010      	b.n	800736c <main+0x114>
 800734a:	bf00      	nop
 800734c:	58024400 	.word	0x58024400
 8007350:	24015584 	.word	0x24015584
 8007354:	2401147c 	.word	0x2401147c
 8007358:	240155d0 	.word	0x240155d0
	{
		HAL_Delay(500);
 800735c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007360:	f000 ff98 	bl	8008294 <HAL_Delay>
		blink_green();
 8007364:	f000 fb32 	bl	80079cc <blink_green>
		blink_green();
 8007368:	f000 fb30 	bl	80079cc <blink_green>
	while (UartReady != SET)
 800736c:	4b98      	ldr	r3, [pc, #608]	; (80075d0 <main+0x378>)
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b01      	cmp	r3, #1
 8007374:	d1f2      	bne.n	800735c <main+0x104>
	}
	UartReady = RESET;
 8007376:	4b96      	ldr	r3, [pc, #600]	; (80075d0 <main+0x378>)
 8007378:	2200      	movs	r2, #0
 800737a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 800737c:	2201      	movs	r2, #1
 800737e:	2101      	movs	r1, #1
 8007380:	4894      	ldr	r0, [pc, #592]	; (80075d4 <main+0x37c>)
 8007382:	f001 fcb9 	bl	8008cf8 <HAL_GPIO_WritePin>
	if(rxBuffer.bytes[8191] != 0 && (processed == 0)){
 8007386:	4a94      	ldr	r2, [pc, #592]	; (80075d8 <main+0x380>)
 8007388:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800738c:	4413      	add	r3, r2
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d008      	beq.n	80073a6 <main+0x14e>
 8007394:	4b91      	ldr	r3, [pc, #580]	; (80075dc <main+0x384>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d104      	bne.n	80073a6 <main+0x14e>
		HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 800739c:	2201      	movs	r2, #1
 800739e:	2102      	movs	r1, #2
 80073a0:	488f      	ldr	r0, [pc, #572]	; (80075e0 <main+0x388>)
 80073a2:	f001 fca9 	bl	8008cf8 <HAL_GPIO_WritePin>
	}
	/*****************************************************************************************************/
	// Instantaneous absolute value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80073a6:	4b8f      	ldr	r3, [pc, #572]	; (80075e4 <main+0x38c>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2200      	movs	r2, #0
 80073ac:	625a      	str	r2, [r3, #36]	; 0x24
	complex_inst_absolute(&rxBuffer.number[0], &instAbs.number[0]);
 80073ae:	498e      	ldr	r1, [pc, #568]	; (80075e8 <main+0x390>)
 80073b0:	4889      	ldr	r0, [pc, #548]	; (80075d8 <main+0x380>)
 80073b2:	f7fc fe47 	bl	8004044 <complex_inst_absolute>
	counter_array.number[0] = __HAL_TIM_GET_COUNTER(&htim2);
 80073b6:	4b8b      	ldr	r3, [pc, #556]	; (80075e4 <main+0x38c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073bc:	4a8b      	ldr	r2, [pc, #556]	; (80075ec <main+0x394>)
 80073be:	6013      	str	r3, [r2, #0]
	transmit_array(&instAbs.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[0]);
 80073c0:	4a8a      	ldr	r2, [pc, #552]	; (80075ec <main+0x394>)
 80073c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80073c6:	4888      	ldr	r0, [pc, #544]	; (80075e8 <main+0x390>)
 80073c8:	f000 fbc6 	bl	8007b58 <transmit_array>

	// Instantaneous phase value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80073cc:	4b85      	ldr	r3, [pc, #532]	; (80075e4 <main+0x38c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2200      	movs	r2, #0
 80073d2:	625a      	str	r2, [r3, #36]	; 0x24
	inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 80073d4:	4986      	ldr	r1, [pc, #536]	; (80075f0 <main+0x398>)
 80073d6:	4880      	ldr	r0, [pc, #512]	; (80075d8 <main+0x380>)
 80073d8:	f7fc fe46 	bl	8004068 <inst_phase>
	counter_array.number[1] = __HAL_TIM_GET_COUNTER(&htim2);
 80073dc:	4b81      	ldr	r3, [pc, #516]	; (80075e4 <main+0x38c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e2:	4a82      	ldr	r2, [pc, #520]	; (80075ec <main+0x394>)
 80073e4:	6053      	str	r3, [r2, #4]
	transmit_array(&instPhase.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[4]);
 80073e6:	4a83      	ldr	r2, [pc, #524]	; (80075f4 <main+0x39c>)
 80073e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80073ec:	4880      	ldr	r0, [pc, #512]	; (80075f0 <main+0x398>)
 80073ee:	f000 fbb3 	bl	8007b58 <transmit_array>

	// Instantaneous unwrapped phase value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80073f2:	4b7c      	ldr	r3, [pc, #496]	; (80075e4 <main+0x38c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2200      	movs	r2, #0
 80073f8:	625a      	str	r2, [r3, #36]	; 0x24
	inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 80073fa:	497d      	ldr	r1, [pc, #500]	; (80075f0 <main+0x398>)
 80073fc:	4876      	ldr	r0, [pc, #472]	; (80075d8 <main+0x380>)
 80073fe:	f7fc fe33 	bl	8004068 <inst_phase>
	unwrap(&instPhase.number[0], &instUnwrappedPhase.number[0]);
 8007402:	497d      	ldr	r1, [pc, #500]	; (80075f8 <main+0x3a0>)
 8007404:	487a      	ldr	r0, [pc, #488]	; (80075f0 <main+0x398>)
 8007406:	f7fc fe67 	bl	80040d8 <unwrap>
	counter_array.number[2] = __HAL_TIM_GET_COUNTER(&htim2);
 800740a:	4b76      	ldr	r3, [pc, #472]	; (80075e4 <main+0x38c>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	4a76      	ldr	r2, [pc, #472]	; (80075ec <main+0x394>)
 8007412:	6093      	str	r3, [r2, #8]
	transmit_array(&instUnwrappedPhase.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[8]);
 8007414:	4a79      	ldr	r2, [pc, #484]	; (80075fc <main+0x3a4>)
 8007416:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800741a:	4877      	ldr	r0, [pc, #476]	; (80075f8 <main+0x3a0>)
 800741c:	f000 fb9c 	bl	8007b58 <transmit_array>

	// Instantaneous frequency value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8007420:	4b70      	ldr	r3, [pc, #448]	; (80075e4 <main+0x38c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2200      	movs	r2, #0
 8007426:	625a      	str	r2, [r3, #36]	; 0x24
	inst_frequency(&rxBuffer.number[0], &instFreq.number[0]);
 8007428:	4975      	ldr	r1, [pc, #468]	; (8007600 <main+0x3a8>)
 800742a:	486b      	ldr	r0, [pc, #428]	; (80075d8 <main+0x380>)
 800742c:	f7fc fef0 	bl	8004210 <inst_frequency>
	counter_array.number[3] = __HAL_TIM_GET_COUNTER(&htim2);
 8007430:	4b6c      	ldr	r3, [pc, #432]	; (80075e4 <main+0x38c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	4a6d      	ldr	r2, [pc, #436]	; (80075ec <main+0x394>)
 8007438:	60d3      	str	r3, [r2, #12]
	transmit_array(&instFreq.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[12]);
 800743a:	4a72      	ldr	r2, [pc, #456]	; (8007604 <main+0x3ac>)
 800743c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007440:	486f      	ldr	r0, [pc, #444]	; (8007600 <main+0x3a8>)
 8007442:	f000 fb89 	bl	8007b58 <transmit_array>

	// Instantaneous centered normalized absolute value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8007446:	4b67      	ldr	r3, [pc, #412]	; (80075e4 <main+0x38c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2200      	movs	r2, #0
 800744c:	625a      	str	r2, [r3, #36]	; 0x24
	inst_centralized_normalized_absolute(&rxBuffer.number[0], &instCNAbs.number[0]);
 800744e:	496e      	ldr	r1, [pc, #440]	; (8007608 <main+0x3b0>)
 8007450:	4861      	ldr	r0, [pc, #388]	; (80075d8 <main+0x380>)
 8007452:	f7fc ff95 	bl	8004380 <inst_centralized_normalized_absolute>
	counter_array.number[4] = __HAL_TIM_GET_COUNTER(&htim2);
 8007456:	4b63      	ldr	r3, [pc, #396]	; (80075e4 <main+0x38c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745c:	4a63      	ldr	r2, [pc, #396]	; (80075ec <main+0x394>)
 800745e:	6113      	str	r3, [r2, #16]
	transmit_array(&instCNAbs.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[16]);
 8007460:	4a6a      	ldr	r2, [pc, #424]	; (800760c <main+0x3b4>)
 8007462:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007466:	4868      	ldr	r0, [pc, #416]	; (8007608 <main+0x3b0>)
 8007468:	f000 fb76 	bl	8007b58 <transmit_array>

	/*****************************************************************************************************/
	// Standard deviation of the instantaneous phase
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800746c:	4b5d      	ldr	r3, [pc, #372]	; (80075e4 <main+0x38c>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2200      	movs	r2, #0
 8007472:	625a      	str	r2, [r3, #36]	; 0x24
	std_dev(&instPhase.number[0], &ft_array.number[0]);
 8007474:	4966      	ldr	r1, [pc, #408]	; (8007610 <main+0x3b8>)
 8007476:	485e      	ldr	r0, [pc, #376]	; (80075f0 <main+0x398>)
 8007478:	f7fc fffe 	bl	8004478 <std_dev>
	counter_array.number[5] = __HAL_TIM_GET_COUNTER(&htim2);
 800747c:	4b59      	ldr	r3, [pc, #356]	; (80075e4 <main+0x38c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007482:	4a5a      	ldr	r2, [pc, #360]	; (80075ec <main+0x394>)
 8007484:	6153      	str	r3, [r2, #20]
	// transmit_features(&ft0.bytes[0], &counter.bytes[0]);

	// Standard deviation of the absolute instantaneous phase
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8007486:	4b57      	ldr	r3, [pc, #348]	; (80075e4 <main+0x38c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2200      	movs	r2, #0
 800748c:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(&instPhase.number[0], &instAbsPhase.number[0]);
 800748e:	4961      	ldr	r1, [pc, #388]	; (8007614 <main+0x3bc>)
 8007490:	4857      	ldr	r0, [pc, #348]	; (80075f0 <main+0x398>)
 8007492:	f7fc fdc5 	bl	8004020 <inst_absolute>
	std_dev(&instAbsPhase.number[0], &ft_array.number[1]);
 8007496:	4960      	ldr	r1, [pc, #384]	; (8007618 <main+0x3c0>)
 8007498:	485e      	ldr	r0, [pc, #376]	; (8007614 <main+0x3bc>)
 800749a:	f7fc ffed 	bl	8004478 <std_dev>
	counter_array.number[6] = __HAL_TIM_GET_COUNTER(&htim2);
 800749e:	4b51      	ldr	r3, [pc, #324]	; (80075e4 <main+0x38c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	4a51      	ldr	r2, [pc, #324]	; (80075ec <main+0x394>)
 80074a6:	6193      	str	r3, [r2, #24]
	// transmit_features(&ft1.bytes[0], &counter.bytes[0]);

	// Standard deviation of the instantaneous frequency
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80074a8:	4b4e      	ldr	r3, [pc, #312]	; (80075e4 <main+0x38c>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2200      	movs	r2, #0
 80074ae:	625a      	str	r2, [r3, #36]	; 0x24
	std_dev(&instFreq.number[0], &ft_array.number[2]);
 80074b0:	495a      	ldr	r1, [pc, #360]	; (800761c <main+0x3c4>)
 80074b2:	4853      	ldr	r0, [pc, #332]	; (8007600 <main+0x3a8>)
 80074b4:	f7fc ffe0 	bl	8004478 <std_dev>
	counter_array.number[7] = __HAL_TIM_GET_COUNTER(&htim2);
 80074b8:	4b4a      	ldr	r3, [pc, #296]	; (80075e4 <main+0x38c>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	4a4b      	ldr	r2, [pc, #300]	; (80075ec <main+0x394>)
 80074c0:	61d3      	str	r3, [r2, #28]
	// transmit_features(&ft2.bytes[0], &counter.bytes[0]);

	// Standard deviation of the absolute instantaneous frequency
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80074c2:	4b48      	ldr	r3, [pc, #288]	; (80075e4 <main+0x38c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2200      	movs	r2, #0
 80074c8:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(&instFreq.number[0], &instAbsFreq.number[0]);
 80074ca:	4955      	ldr	r1, [pc, #340]	; (8007620 <main+0x3c8>)
 80074cc:	484c      	ldr	r0, [pc, #304]	; (8007600 <main+0x3a8>)
 80074ce:	f7fc fda7 	bl	8004020 <inst_absolute>
	std_dev(&instAbsFreq.number[0], &ft_array.number[3]);
 80074d2:	4954      	ldr	r1, [pc, #336]	; (8007624 <main+0x3cc>)
 80074d4:	4852      	ldr	r0, [pc, #328]	; (8007620 <main+0x3c8>)
 80074d6:	f7fc ffcf 	bl	8004478 <std_dev>
	counter_array.number[8] = __HAL_TIM_GET_COUNTER(&htim2);
 80074da:	4b42      	ldr	r3, [pc, #264]	; (80075e4 <main+0x38c>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	4a42      	ldr	r2, [pc, #264]	; (80075ec <main+0x394>)
 80074e2:	6213      	str	r3, [r2, #32]
	// transmit_features(&ft3.bytes[0], &counter.bytes[0]);

	// Standard deviation of the centralized normalized absolute amplitude
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80074e4:	4b3f      	ldr	r3, [pc, #252]	; (80075e4 <main+0x38c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2200      	movs	r2, #0
 80074ea:	625a      	str	r2, [r3, #36]	; 0x24
	std_dev(&instCNAbs.number[0], &ft_array.number[4]);
 80074ec:	494e      	ldr	r1, [pc, #312]	; (8007628 <main+0x3d0>)
 80074ee:	4846      	ldr	r0, [pc, #280]	; (8007608 <main+0x3b0>)
 80074f0:	f7fc ffc2 	bl	8004478 <std_dev>
	counter_array.number[9] = __HAL_TIM_GET_COUNTER(&htim2);
 80074f4:	4b3b      	ldr	r3, [pc, #236]	; (80075e4 <main+0x38c>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	4a3c      	ldr	r2, [pc, #240]	; (80075ec <main+0x394>)
 80074fc:	6253      	str	r3, [r2, #36]	; 0x24
	// transmit_features(&ft4.bytes[0], &counter.bytes[0]);

	// Standard deviation of the absolute centralized normalized absolute amplitude
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80074fe:	4b39      	ldr	r3, [pc, #228]	; (80075e4 <main+0x38c>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2200      	movs	r2, #0
 8007504:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(&instCNAbs.number[0], &instAbsCNAbs.number[0]);
 8007506:	4949      	ldr	r1, [pc, #292]	; (800762c <main+0x3d4>)
 8007508:	483f      	ldr	r0, [pc, #252]	; (8007608 <main+0x3b0>)
 800750a:	f7fc fd89 	bl	8004020 <inst_absolute>
	std_dev(&instAbsCNAbs.number[0], &ft_array.number[5]);
 800750e:	4948      	ldr	r1, [pc, #288]	; (8007630 <main+0x3d8>)
 8007510:	4846      	ldr	r0, [pc, #280]	; (800762c <main+0x3d4>)
 8007512:	f7fc ffb1 	bl	8004478 <std_dev>
	counter_array.number[10] = __HAL_TIM_GET_COUNTER(&htim2);
 8007516:	4b33      	ldr	r3, [pc, #204]	; (80075e4 <main+0x38c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	4a33      	ldr	r2, [pc, #204]	; (80075ec <main+0x394>)
 800751e:	6293      	str	r3, [r2, #40]	; 0x28
	// transmit_features(&ft5.bytes[0], &counter.bytes[0]);

	// Mean Value of the Signal Magnitude
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8007520:	4b30      	ldr	r3, [pc, #192]	; (80075e4 <main+0x38c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2200      	movs	r2, #0
 8007526:	625a      	str	r2, [r3, #36]	; 0x24
	mean_of_signal_magnitude(&instAbs.number[0], &ft_array.number[6]);
 8007528:	4942      	ldr	r1, [pc, #264]	; (8007634 <main+0x3dc>)
 800752a:	482f      	ldr	r0, [pc, #188]	; (80075e8 <main+0x390>)
 800752c:	f7fc ffb6 	bl	800449c <mean_of_signal_magnitude>
	counter_array.number[11] = __HAL_TIM_GET_COUNTER(&htim2);
 8007530:	4b2c      	ldr	r3, [pc, #176]	; (80075e4 <main+0x38c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	4a2d      	ldr	r2, [pc, #180]	; (80075ec <main+0x394>)
 8007538:	62d3      	str	r3, [r2, #44]	; 0x2c
	// transmit_features(&ft6.bytes[0], &counter.bytes[0]);

	// Squared Mean of the Signal Magnitude
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800753a:	4b2a      	ldr	r3, [pc, #168]	; (80075e4 <main+0x38c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2200      	movs	r2, #0
 8007540:	625a      	str	r2, [r3, #36]	; 0x24
	squared_mean_of_signal_magnitude(&instAbs.number[0], &ft_array.number[7]);
 8007542:	493d      	ldr	r1, [pc, #244]	; (8007638 <main+0x3e0>)
 8007544:	4828      	ldr	r0, [pc, #160]	; (80075e8 <main+0x390>)
 8007546:	f7fc ffbb 	bl	80044c0 <squared_mean_of_signal_magnitude>
	counter_array.number[12] = __HAL_TIM_GET_COUNTER(&htim2);
 800754a:	4b26      	ldr	r3, [pc, #152]	; (80075e4 <main+0x38c>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	4a26      	ldr	r2, [pc, #152]	; (80075ec <main+0x394>)
 8007552:	6313      	str	r3, [r2, #48]	; 0x30
	// transmit_features(&ft7.bytes[0], &counter.bytes[0]);

	// Normalized Sqrt Value of Sum of Amplitude
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8007554:	4b23      	ldr	r3, [pc, #140]	; (80075e4 <main+0x38c>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2200      	movs	r2, #0
 800755a:	625a      	str	r2, [r3, #36]	; 0x24
	normalized_sqrt_of_sum_of_amp(&instAbs.number[0], &ft_array.number[8]);
 800755c:	4937      	ldr	r1, [pc, #220]	; (800763c <main+0x3e4>)
 800755e:	4822      	ldr	r0, [pc, #136]	; (80075e8 <main+0x390>)
 8007560:	f7fc ffcc 	bl	80044fc <normalized_sqrt_of_sum_of_amp>
	counter_array.number[13] = __HAL_TIM_GET_COUNTER(&htim2);
 8007564:	4b1f      	ldr	r3, [pc, #124]	; (80075e4 <main+0x38c>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756a:	4a20      	ldr	r2, [pc, #128]	; (80075ec <main+0x394>)
 800756c:	6353      	str	r3, [r2, #52]	; 0x34
	// transmit_features(&ft8.bytes[0], &counter.bytes[0]);

	// Ratio of I/Q Components
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800756e:	4b1d      	ldr	r3, [pc, #116]	; (80075e4 <main+0x38c>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2200      	movs	r2, #0
 8007574:	625a      	str	r2, [r3, #36]	; 0x24
	ratio_iq(&rxBuffer.number[0], &ft_array.number[9]);
 8007576:	4932      	ldr	r1, [pc, #200]	; (8007640 <main+0x3e8>)
 8007578:	4817      	ldr	r0, [pc, #92]	; (80075d8 <main+0x380>)
 800757a:	f7fc fff7 	bl	800456c <ratio_iq>
	counter_array.number[14] = __HAL_TIM_GET_COUNTER(&htim2);
 800757e:	4b19      	ldr	r3, [pc, #100]	; (80075e4 <main+0x38c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	4a19      	ldr	r2, [pc, #100]	; (80075ec <main+0x394>)
 8007586:	6393      	str	r3, [r2, #56]	; 0x38
	// transmit_features(&ft9.bytes[0], &counter.bytes[0]);

	// Gmax
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8007588:	4b16      	ldr	r3, [pc, #88]	; (80075e4 <main+0x38c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2200      	movs	r2, #0
 800758e:	625a      	str	r2, [r3, #36]	; 0x24
	gmax(&rxBuffer.number[0], &ft_array.number[10]);
 8007590:	492c      	ldr	r1, [pc, #176]	; (8007644 <main+0x3ec>)
 8007592:	4811      	ldr	r0, [pc, #68]	; (80075d8 <main+0x380>)
 8007594:	f7fd f83c 	bl	8004610 <gmax>
	counter_array.number[15] = __HAL_TIM_GET_COUNTER(&htim2);
 8007598:	4b12      	ldr	r3, [pc, #72]	; (80075e4 <main+0x38c>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759e:	4a13      	ldr	r2, [pc, #76]	; (80075ec <main+0x394>)
 80075a0:	63d3      	str	r3, [r2, #60]	; 0x3c
	// transmit_features(&ft10.bytes[0], &counter.bytes[0]);

	// Kurtosis of the Absolute Amplitude
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80075a2:	4b10      	ldr	r3, [pc, #64]	; (80075e4 <main+0x38c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2200      	movs	r2, #0
 80075a8:	625a      	str	r2, [r3, #36]	; 0x24
	kurtosis_of_abs_amplitude(&instAbs.number[0], &ft_array.number[11], frameSize);
 80075aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80075ae:	461a      	mov	r2, r3
 80075b0:	4925      	ldr	r1, [pc, #148]	; (8007648 <main+0x3f0>)
 80075b2:	480d      	ldr	r0, [pc, #52]	; (80075e8 <main+0x390>)
 80075b4:	f7fd f8fe 	bl	80047b4 <kurtosis_of_abs_amplitude>
	counter_array.number[16] = __HAL_TIM_GET_COUNTER(&htim2);
 80075b8:	4b0a      	ldr	r3, [pc, #40]	; (80075e4 <main+0x38c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	4a0b      	ldr	r2, [pc, #44]	; (80075ec <main+0x394>)
 80075c0:	6413      	str	r3, [r2, #64]	; 0x40
	// transmit_features(&ft11.bytes[0], &counter.bytes[0]);

	// Kurtosis of the Absolute Frequency
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80075c2:	4b08      	ldr	r3, [pc, #32]	; (80075e4 <main+0x38c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2200      	movs	r2, #0
 80075c8:	625a      	str	r2, [r3, #36]	; 0x24
	kurtosis_of_abs_freq(&instAbsFreq.number[0], &ft_array.number[12], frameSize - 1);
 80075ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80075ce:	e03d      	b.n	800764c <main+0x3f4>
 80075d0:	24015549 	.word	0x24015549
 80075d4:	58020400 	.word	0x58020400
 80075d8:	2401147c 	.word	0x2401147c
 80075dc:	24015548 	.word	0x24015548
 80075e0:	58021000 	.word	0x58021000
 80075e4:	24015584 	.word	0x24015584
 80075e8:	2400147c 	.word	0x2400147c
 80075ec:	2401547c 	.word	0x2401547c
 80075f0:	2400347c 	.word	0x2400347c
 80075f4:	24015480 	.word	0x24015480
 80075f8:	2400747c 	.word	0x2400747c
 80075fc:	24015484 	.word	0x24015484
 8007600:	2400947c 	.word	0x2400947c
 8007604:	24015488 	.word	0x24015488
 8007608:	2400d47c 	.word	0x2400d47c
 800760c:	2401548c 	.word	0x2401548c
 8007610:	240154ec 	.word	0x240154ec
 8007614:	2400547c 	.word	0x2400547c
 8007618:	240154f0 	.word	0x240154f0
 800761c:	240154f4 	.word	0x240154f4
 8007620:	2400b47c 	.word	0x2400b47c
 8007624:	240154f8 	.word	0x240154f8
 8007628:	240154fc 	.word	0x240154fc
 800762c:	2400f47c 	.word	0x2400f47c
 8007630:	24015500 	.word	0x24015500
 8007634:	24015504 	.word	0x24015504
 8007638:	24015508 	.word	0x24015508
 800763c:	2401550c 	.word	0x2401550c
 8007640:	24015510 	.word	0x24015510
 8007644:	24015514 	.word	0x24015514
 8007648:	24015518 	.word	0x24015518
 800764c:	3b01      	subs	r3, #1
 800764e:	461a      	mov	r2, r3
 8007650:	494f      	ldr	r1, [pc, #316]	; (8007790 <main+0x538>)
 8007652:	4850      	ldr	r0, [pc, #320]	; (8007794 <main+0x53c>)
 8007654:	f7fd f9ec 	bl	8004a30 <kurtosis_of_abs_freq>
	counter_array.number[17] = __HAL_TIM_GET_COUNTER(&htim2);
 8007658:	4b4f      	ldr	r3, [pc, #316]	; (8007798 <main+0x540>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	4a4f      	ldr	r2, [pc, #316]	; (800779c <main+0x544>)
 8007660:	6453      	str	r3, [r2, #68]	; 0x44
	// transmit_features(&ft12.bytes[0], &counter.bytes[0]);

	// Cumulant 20
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8007662:	4b4d      	ldr	r3, [pc, #308]	; (8007798 <main+0x540>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2200      	movs	r2, #0
 8007668:	625a      	str	r2, [r3, #36]	; 0x24
	cumulant_20(&rxBuffer.number[0], &ft_array.number[13]);
 800766a:	494d      	ldr	r1, [pc, #308]	; (80077a0 <main+0x548>)
 800766c:	484d      	ldr	r0, [pc, #308]	; (80077a4 <main+0x54c>)
 800766e:	f7ff fab3 	bl	8006bd8 <cumulant_20>
	counter_array.number[18] = __HAL_TIM_GET_COUNTER(&htim2);
 8007672:	4b49      	ldr	r3, [pc, #292]	; (8007798 <main+0x540>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	4a48      	ldr	r2, [pc, #288]	; (800779c <main+0x544>)
 800767a:	6493      	str	r3, [r2, #72]	; 0x48
	// transmit_features(&ft13.bytes[0], &counter.bytes[0]);

	// Cumulant 21
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800767c:	4b46      	ldr	r3, [pc, #280]	; (8007798 <main+0x540>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2200      	movs	r2, #0
 8007682:	625a      	str	r2, [r3, #36]	; 0x24
	cumulant_21(&rxBuffer.number[0], &ft_array.number[14]);
 8007684:	4948      	ldr	r1, [pc, #288]	; (80077a8 <main+0x550>)
 8007686:	4847      	ldr	r0, [pc, #284]	; (80077a4 <main+0x54c>)
 8007688:	f7ff fab3 	bl	8006bf2 <cumulant_21>
	counter_array.number[19] = __HAL_TIM_GET_COUNTER(&htim2);
 800768c:	4b42      	ldr	r3, [pc, #264]	; (8007798 <main+0x540>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007692:	4a42      	ldr	r2, [pc, #264]	; (800779c <main+0x544>)
 8007694:	64d3      	str	r3, [r2, #76]	; 0x4c
	// transmit_features(&ft14.bytes[0], &counter.bytes[0]);

	// Cumulant 40
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8007696:	4b40      	ldr	r3, [pc, #256]	; (8007798 <main+0x540>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2200      	movs	r2, #0
 800769c:	625a      	str	r2, [r3, #36]	; 0x24
	cumulant_40(&rxBuffer.number[0], &ft_array.number[15]);
 800769e:	4943      	ldr	r1, [pc, #268]	; (80077ac <main+0x554>)
 80076a0:	4840      	ldr	r0, [pc, #256]	; (80077a4 <main+0x54c>)
 80076a2:	f7ff fab3 	bl	8006c0c <cumulant_40>
	counter_array.number[20] = __HAL_TIM_GET_COUNTER(&htim2);
 80076a6:	4b3c      	ldr	r3, [pc, #240]	; (8007798 <main+0x540>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ac:	4a3b      	ldr	r2, [pc, #236]	; (800779c <main+0x544>)
 80076ae:	6513      	str	r3, [r2, #80]	; 0x50
	// transmit_features(&ft15.bytes[0], &counter.bytes[0]);

	// Cumulant 41
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80076b0:	4b39      	ldr	r3, [pc, #228]	; (8007798 <main+0x540>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2200      	movs	r2, #0
 80076b6:	625a      	str	r2, [r3, #36]	; 0x24
	cumulant_41(&rxBuffer.number[0], &ft_array.number[16]);
 80076b8:	493d      	ldr	r1, [pc, #244]	; (80077b0 <main+0x558>)
 80076ba:	483a      	ldr	r0, [pc, #232]	; (80077a4 <main+0x54c>)
 80076bc:	f7ff face 	bl	8006c5c <cumulant_41>
	counter_array.number[21] = __HAL_TIM_GET_COUNTER(&htim2);
 80076c0:	4b35      	ldr	r3, [pc, #212]	; (8007798 <main+0x540>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	4a35      	ldr	r2, [pc, #212]	; (800779c <main+0x544>)
 80076c8:	6553      	str	r3, [r2, #84]	; 0x54
	// transmit_features(&ft16.bytes[0], &counter.bytes[0]);

	// Cumulant 42
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80076ca:	4b33      	ldr	r3, [pc, #204]	; (8007798 <main+0x540>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2200      	movs	r2, #0
 80076d0:	625a      	str	r2, [r3, #36]	; 0x24
	cumulant_42(&rxBuffer.number[0], &ft_array.number[17]);
 80076d2:	4938      	ldr	r1, [pc, #224]	; (80077b4 <main+0x55c>)
 80076d4:	4833      	ldr	r0, [pc, #204]	; (80077a4 <main+0x54c>)
 80076d6:	f7ff faef 	bl	8006cb8 <cumulant_42>
	counter_array.number[22] = __HAL_TIM_GET_COUNTER(&htim2);
 80076da:	4b2f      	ldr	r3, [pc, #188]	; (8007798 <main+0x540>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	4a2e      	ldr	r2, [pc, #184]	; (800779c <main+0x544>)
 80076e2:	6593      	str	r3, [r2, #88]	; 0x58
	// transmit_features(&ft17.bytes[0], &counter.bytes[0]);

	// Cumulant 60
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80076e4:	4b2c      	ldr	r3, [pc, #176]	; (8007798 <main+0x540>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2200      	movs	r2, #0
 80076ea:	625a      	str	r2, [r3, #36]	; 0x24
	cumulant_60(&rxBuffer.number[0], &ft_array.number[18]);
 80076ec:	4932      	ldr	r1, [pc, #200]	; (80077b8 <main+0x560>)
 80076ee:	482d      	ldr	r0, [pc, #180]	; (80077a4 <main+0x54c>)
 80076f0:	f7ff fb1c 	bl	8006d2c <cumulant_60>
	counter_array.number[23] = __HAL_TIM_GET_COUNTER(&htim2);
 80076f4:	4b28      	ldr	r3, [pc, #160]	; (8007798 <main+0x540>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	4a28      	ldr	r2, [pc, #160]	; (800779c <main+0x544>)
 80076fc:	65d3      	str	r3, [r2, #92]	; 0x5c
	// transmit_features(&ft18.bytes[0], &counter.bytes[0]);

	// Cumulant 61
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80076fe:	4b26      	ldr	r3, [pc, #152]	; (8007798 <main+0x540>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2200      	movs	r2, #0
 8007704:	625a      	str	r2, [r3, #36]	; 0x24
	cumulant_61(&rxBuffer.number[0], &ft_array.number[19]);
 8007706:	492d      	ldr	r1, [pc, #180]	; (80077bc <main+0x564>)
 8007708:	4826      	ldr	r0, [pc, #152]	; (80077a4 <main+0x54c>)
 800770a:	f7ff fb4d 	bl	8006da8 <cumulant_61>
	counter_array.number[24] = __HAL_TIM_GET_COUNTER(&htim2);
 800770e:	4b22      	ldr	r3, [pc, #136]	; (8007798 <main+0x540>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007714:	4a21      	ldr	r2, [pc, #132]	; (800779c <main+0x544>)
 8007716:	6613      	str	r3, [r2, #96]	; 0x60
	// transmit_features(&ft19.bytes[0], &counter.bytes[0]);

	// Cumulant 62
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8007718:	4b1f      	ldr	r3, [pc, #124]	; (8007798 <main+0x540>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2200      	movs	r2, #0
 800771e:	625a      	str	r2, [r3, #36]	; 0x24
	cumulant_62(&rxBuffer.number[0], &ft_array.number[20]);
 8007720:	4927      	ldr	r1, [pc, #156]	; (80077c0 <main+0x568>)
 8007722:	4820      	ldr	r0, [pc, #128]	; (80077a4 <main+0x54c>)
 8007724:	f7ff fb96 	bl	8006e54 <cumulant_62>
	counter_array.number[25] = __HAL_TIM_GET_COUNTER(&htim2);
 8007728:	4b1b      	ldr	r3, [pc, #108]	; (8007798 <main+0x540>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772e:	4a1b      	ldr	r2, [pc, #108]	; (800779c <main+0x544>)
 8007730:	6653      	str	r3, [r2, #100]	; 0x64
	// transmit_features(&ft20.bytes[0], &counter.bytes[0]);

	// Cumulant 63
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8007732:	4b19      	ldr	r3, [pc, #100]	; (8007798 <main+0x540>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2200      	movs	r2, #0
 8007738:	625a      	str	r2, [r3, #36]	; 0x24
	cumulant_63(&rxBuffer.number[0], &ft_array.number[21]);
 800773a:	4922      	ldr	r1, [pc, #136]	; (80077c4 <main+0x56c>)
 800773c:	4819      	ldr	r0, [pc, #100]	; (80077a4 <main+0x54c>)
 800773e:	f7ff fc03 	bl	8006f48 <cumulant_63>
	counter_array.number[26] = __HAL_TIM_GET_COUNTER(&htim2);
 8007742:	4b15      	ldr	r3, [pc, #84]	; (8007798 <main+0x540>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	4a14      	ldr	r2, [pc, #80]	; (800779c <main+0x544>)
 800774a:	6693      	str	r3, [r2, #104]	; 0x68
	// transmit_features(&ft21.bytes[0], &counter.bytes[0]);

	transmit_features(&ft_array.bytes[0], &counter_array.bytes[20]);
 800774c:	491e      	ldr	r1, [pc, #120]	; (80077c8 <main+0x570>)
 800774e:	481f      	ldr	r0, [pc, #124]	; (80077cc <main+0x574>)
 8007750:	f000 f9aa 	bl	8007aa8 <transmit_features>

	// Evaluate neural network
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8007754:	4b10      	ldr	r3, [pc, #64]	; (8007798 <main+0x540>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2200      	movs	r2, #0
 800775a:	625a      	str	r2, [r3, #36]	; 0x24
	quantize_features(&ft_array.number[0], &q15_input_vector[0]);
 800775c:	f107 0308 	add.w	r3, r7, #8
 8007760:	4619      	mov	r1, r3
 8007762:	481a      	ldr	r0, [pc, #104]	; (80077cc <main+0x574>)
 8007764:	f000 fa54 	bl	8007c10 <quantize_features>
	fully_connected_run(&q15_input_vector[0], &predicted.number);
 8007768:	f107 0308 	add.w	r3, r7, #8
 800776c:	4918      	ldr	r1, [pc, #96]	; (80077d0 <main+0x578>)
 800776e:	4618      	mov	r0, r3
 8007770:	f7fc fbce 	bl	8003f10 <fully_connected_run>
	counter_array.number[27] = __HAL_TIM_GET_COUNTER(&htim2);
 8007774:	4b08      	ldr	r3, [pc, #32]	; (8007798 <main+0x540>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777a:	4a08      	ldr	r2, [pc, #32]	; (800779c <main+0x544>)
 800777c:	66d3      	str	r3, [r2, #108]	; 0x6c
	transmit_prediction(&predicted.bytes[0], &counter_array.bytes[4*27]);
 800777e:	4915      	ldr	r1, [pc, #84]	; (80077d4 <main+0x57c>)
 8007780:	4813      	ldr	r0, [pc, #76]	; (80077d0 <main+0x578>)
 8007782:	f000 f939 	bl	80079f8 <transmit_prediction>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	/*****************************************************************************************************/
	clear_leds();
 8007786:	f000 f8d9 	bl	800793c <clear_leds>

		/*************************************************************************************************/
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		blink_orange_slow();
 800778a:	f000 f907 	bl	800799c <blink_orange_slow>
 800778e:	e7fc      	b.n	800778a <main+0x532>
 8007790:	2401551c 	.word	0x2401551c
 8007794:	2400b47c 	.word	0x2400b47c
 8007798:	24015584 	.word	0x24015584
 800779c:	2401547c 	.word	0x2401547c
 80077a0:	24015520 	.word	0x24015520
 80077a4:	2401147c 	.word	0x2401147c
 80077a8:	24015524 	.word	0x24015524
 80077ac:	24015528 	.word	0x24015528
 80077b0:	2401552c 	.word	0x2401552c
 80077b4:	24015530 	.word	0x24015530
 80077b8:	24015534 	.word	0x24015534
 80077bc:	24015538 	.word	0x24015538
 80077c0:	2401553c 	.word	0x2401553c
 80077c4:	24015540 	.word	0x24015540
 80077c8:	24015490 	.word	0x24015490
 80077cc:	240154ec 	.word	0x240154ec
 80077d0:	24015544 	.word	0x24015544
 80077d4:	240154e8 	.word	0x240154e8

080077d8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b0cc      	sub	sp, #304	; 0x130
 80077dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80077de:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80077e2:	224c      	movs	r2, #76	; 0x4c
 80077e4:	2100      	movs	r1, #0
 80077e6:	4618      	mov	r0, r3
 80077e8:	f006 f9f7 	bl	800dbda <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80077ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80077f0:	2220      	movs	r2, #32
 80077f2:	2100      	movs	r1, #0
 80077f4:	4618      	mov	r0, r3
 80077f6:	f006 f9f0 	bl	800dbda <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80077fa:	f107 0308 	add.w	r3, r7, #8
 80077fe:	4618      	mov	r0, r3
 8007800:	23bc      	movs	r3, #188	; 0xbc
 8007802:	461a      	mov	r2, r3
 8007804:	2100      	movs	r1, #0
 8007806:	f006 f9e8 	bl	800dbda <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800780a:	2004      	movs	r0, #4
 800780c:	f001 fabc 	bl	8008d88 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007810:	1d3b      	adds	r3, r7, #4
 8007812:	2200      	movs	r2, #0
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	4b47      	ldr	r3, [pc, #284]	; (8007934 <SystemClock_Config+0x15c>)
 8007818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781a:	4a46      	ldr	r2, [pc, #280]	; (8007934 <SystemClock_Config+0x15c>)
 800781c:	f023 0301 	bic.w	r3, r3, #1
 8007820:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007822:	4b44      	ldr	r3, [pc, #272]	; (8007934 <SystemClock_Config+0x15c>)
 8007824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007826:	f003 0201 	and.w	r2, r3, #1
 800782a:	1d3b      	adds	r3, r7, #4
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	4b42      	ldr	r3, [pc, #264]	; (8007938 <SystemClock_Config+0x160>)
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	4a41      	ldr	r2, [pc, #260]	; (8007938 <SystemClock_Config+0x160>)
 8007834:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007838:	6193      	str	r3, [r2, #24]
 800783a:	4b3f      	ldr	r3, [pc, #252]	; (8007938 <SystemClock_Config+0x160>)
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8007842:	1d3b      	adds	r3, r7, #4
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	1d3b      	adds	r3, r7, #4
 8007848:	681b      	ldr	r3, [r3, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800784a:	bf00      	nop
 800784c:	4b3a      	ldr	r3, [pc, #232]	; (8007938 <SystemClock_Config+0x160>)
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007858:	d1f8      	bne.n	800784c <SystemClock_Config+0x74>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800785a:	2302      	movs	r3, #2
 800785c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8007860:	2301      	movs	r3, #1
 8007862:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007866:	2340      	movs	r3, #64	; 0x40
 8007868:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800786c:	2302      	movs	r3, #2
 800786e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007872:	2300      	movs	r3, #0
 8007874:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8007878:	2304      	movs	r3, #4
 800787a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	RCC_OscInitStruct.PLL.PLLN = 50;
 800787e:	2332      	movs	r3, #50	; 0x32
 8007880:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	RCC_OscInitStruct.PLL.PLLP = 2;
 8007884:	2302      	movs	r3, #2
 8007886:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800788a:	2302      	movs	r3, #2
 800788c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8007890:	2302      	movs	r3, #2
 8007892:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8007896:	230c      	movs	r3, #12
 8007898:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800789c:	2300      	movs	r3, #0
 800789e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80078a2:	2300      	movs	r3, #0
 80078a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80078a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80078ac:	4618      	mov	r0, r3
 80078ae:	f001 fac5 	bl	8008e3c <HAL_RCC_OscConfig>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d001      	beq.n	80078bc <SystemClock_Config+0xe4>
	{
		Error_Handler();
 80078b8:	f000 fa9e 	bl	8007df8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80078bc:	233f      	movs	r3, #63	; 0x3f
 80078be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80078c2:	2303      	movs	r3, #3
 80078c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80078c8:	2300      	movs	r3, #0
 80078ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80078ce:	2308      	movs	r3, #8
 80078d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80078d4:	2340      	movs	r3, #64	; 0x40
 80078d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80078da:	2340      	movs	r3, #64	; 0x40
 80078dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80078e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80078e8:	2340      	movs	r3, #64	; 0x40
 80078ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80078ee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80078f2:	2102      	movs	r1, #2
 80078f4:	4618      	mov	r0, r3
 80078f6:	f001 feb1 	bl	800965c <HAL_RCC_ClockConfig>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <SystemClock_Config+0x12c>
	{
		Error_Handler();
 8007900:	f000 fa7a 	bl	8007df8 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007904:	f107 0308 	add.w	r3, r7, #8
 8007908:	2202      	movs	r2, #2
 800790a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 800790c:	f107 0308 	add.w	r3, r7, #8
 8007910:	2203      	movs	r2, #3
 8007912:	675a      	str	r2, [r3, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007914:	f107 0308 	add.w	r3, r7, #8
 8007918:	4618      	mov	r0, r3
 800791a:	f002 fa23 	bl	8009d64 <HAL_RCCEx_PeriphCLKConfig>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <SystemClock_Config+0x150>
	{
		Error_Handler();
 8007924:	f000 fa68 	bl	8007df8 <Error_Handler>
	}
}
 8007928:	bf00      	nop
 800792a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	58000400 	.word	0x58000400
 8007938:	58024800 	.word	0x58024800

0800793c <clear_leds>:

/* USER CODE BEGIN 4 */
void clear_leds(){
 800793c:	b580      	push	{r7, lr}
 800793e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8007940:	2200      	movs	r2, #0
 8007942:	2101      	movs	r1, #1
 8007944:	4807      	ldr	r0, [pc, #28]	; (8007964 <clear_leds+0x28>)
 8007946:	f001 f9d7 	bl	8008cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 800794a:	2200      	movs	r2, #0
 800794c:	2102      	movs	r1, #2
 800794e:	4806      	ldr	r0, [pc, #24]	; (8007968 <clear_leds+0x2c>)
 8007950:	f001 f9d2 	bl	8008cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8007954:	2200      	movs	r2, #0
 8007956:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800795a:	4802      	ldr	r0, [pc, #8]	; (8007964 <clear_leds+0x28>)
 800795c:	f001 f9cc 	bl	8008cf8 <HAL_GPIO_WritePin>
}
 8007960:	bf00      	nop
 8007962:	bd80      	pop	{r7, pc}
 8007964:	58020400 	.word	0x58020400
 8007968:	58021000 	.word	0x58021000

0800796c <blink_red_fast>:
void light_leds(){
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
}
void blink_red_fast(){
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8007970:	2200      	movs	r2, #0
 8007972:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007976:	4808      	ldr	r0, [pc, #32]	; (8007998 <blink_red_fast+0x2c>)
 8007978:	f001 f9be 	bl	8008cf8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800797c:	2032      	movs	r0, #50	; 0x32
 800797e:	f000 fc89 	bl	8008294 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8007982:	2201      	movs	r2, #1
 8007984:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007988:	4803      	ldr	r0, [pc, #12]	; (8007998 <blink_red_fast+0x2c>)
 800798a:	f001 f9b5 	bl	8008cf8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800798e:	2032      	movs	r0, #50	; 0x32
 8007990:	f000 fc80 	bl	8008294 <HAL_Delay>
}
 8007994:	bf00      	nop
 8007996:	bd80      	pop	{r7, pc}
 8007998:	58020400 	.word	0x58020400

0800799c <blink_orange_slow>:
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_orange_slow(){
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 80079a0:	2200      	movs	r2, #0
 80079a2:	2102      	movs	r1, #2
 80079a4:	4808      	ldr	r0, [pc, #32]	; (80079c8 <blink_orange_slow+0x2c>)
 80079a6:	f001 f9a7 	bl	8008cf8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80079aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079ae:	f000 fc71 	bl	8008294 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 80079b2:	2201      	movs	r2, #1
 80079b4:	2102      	movs	r1, #2
 80079b6:	4804      	ldr	r0, [pc, #16]	; (80079c8 <blink_orange_slow+0x2c>)
 80079b8:	f001 f99e 	bl	8008cf8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80079bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079c0:	f000 fc68 	bl	8008294 <HAL_Delay>
}
 80079c4:	bf00      	nop
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	58021000 	.word	0x58021000

080079cc <blink_green>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_green(){
 80079cc:	b580      	push	{r7, lr}
 80079ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 80079d0:	2200      	movs	r2, #0
 80079d2:	2101      	movs	r1, #1
 80079d4:	4807      	ldr	r0, [pc, #28]	; (80079f4 <blink_green+0x28>)
 80079d6:	f001 f98f 	bl	8008cf8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80079da:	20c8      	movs	r0, #200	; 0xc8
 80079dc:	f000 fc5a 	bl	8008294 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 80079e0:	2201      	movs	r2, #1
 80079e2:	2101      	movs	r1, #1
 80079e4:	4803      	ldr	r0, [pc, #12]	; (80079f4 <blink_green+0x28>)
 80079e6:	f001 f987 	bl	8008cf8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80079ea:	20c8      	movs	r0, #200	; 0xc8
 80079ec:	f000 fc52 	bl	8008294 <HAL_Delay>
}
 80079f0:	bf00      	nop
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	58020400 	.word	0x58020400

080079f8 <transmit_prediction>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(500);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(500);
}
void transmit_prediction(uint8_t *value, uint8_t *counter){
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8007a02:	4825      	ldr	r0, [pc, #148]	; (8007a98 <transmit_prediction+0xa0>)
 8007a04:	f005 f94c 	bl	800cca0 <UART_CheckIdleState>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d13f      	bne.n	8007a8e <transmit_prediction+0x96>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8007a0e:	2204      	movs	r2, #4
 8007a10:	4922      	ldr	r1, [pc, #136]	; (8007a9c <transmit_prediction+0xa4>)
 8007a12:	4821      	ldr	r0, [pc, #132]	; (8007a98 <transmit_prediction+0xa0>)
 8007a14:	f004 f80c 	bl	800ba30 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8007a18:	e001      	b.n	8007a1e <transmit_prediction+0x26>
			blink_red_fast();
 8007a1a:	f7ff ffa7 	bl	800796c <blink_red_fast>
		while(UartReady != SET){
 8007a1e:	4b20      	ldr	r3, [pc, #128]	; (8007aa0 <transmit_prediction+0xa8>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d1f8      	bne.n	8007a1a <transmit_prediction+0x22>
		}
		UartReady = RESET;
 8007a28:	4b1d      	ldr	r3, [pc, #116]	; (8007aa0 <transmit_prediction+0xa8>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &value[0], 4);
 8007a2e:	2204      	movs	r2, #4
 8007a30:	6879      	ldr	r1, [r7, #4]
 8007a32:	4819      	ldr	r0, [pc, #100]	; (8007a98 <transmit_prediction+0xa0>)
 8007a34:	f003 fffc 	bl	800ba30 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8007a38:	e001      	b.n	8007a3e <transmit_prediction+0x46>
			blink_red_fast();
 8007a3a:	f7ff ff97 	bl	800796c <blink_red_fast>
		while(UartReady != SET){
 8007a3e:	4b18      	ldr	r3, [pc, #96]	; (8007aa0 <transmit_prediction+0xa8>)
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d1f8      	bne.n	8007a3a <transmit_prediction+0x42>
		}
		UartReady = RESET;
 8007a48:	4b15      	ldr	r3, [pc, #84]	; (8007aa0 <transmit_prediction+0xa8>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &counter[0], 4);
 8007a4e:	2204      	movs	r2, #4
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	4811      	ldr	r0, [pc, #68]	; (8007a98 <transmit_prediction+0xa0>)
 8007a54:	f003 ffec 	bl	800ba30 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8007a58:	e001      	b.n	8007a5e <transmit_prediction+0x66>
			blink_red_fast();
 8007a5a:	f7ff ff87 	bl	800796c <blink_red_fast>
		while(UartReady != SET){
 8007a5e:	4b10      	ldr	r3, [pc, #64]	; (8007aa0 <transmit_prediction+0xa8>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d1f8      	bne.n	8007a5a <transmit_prediction+0x62>
		}
		UartReady = RESET;
 8007a68:	4b0d      	ldr	r3, [pc, #52]	; (8007aa0 <transmit_prediction+0xa8>)
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8007a6e:	2204      	movs	r2, #4
 8007a70:	490c      	ldr	r1, [pc, #48]	; (8007aa4 <transmit_prediction+0xac>)
 8007a72:	4809      	ldr	r0, [pc, #36]	; (8007a98 <transmit_prediction+0xa0>)
 8007a74:	f003 ffdc 	bl	800ba30 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8007a78:	e001      	b.n	8007a7e <transmit_prediction+0x86>
			blink_red_fast();
 8007a7a:	f7ff ff77 	bl	800796c <blink_red_fast>
		while(UartReady != SET){
 8007a7e:	4b08      	ldr	r3, [pc, #32]	; (8007aa0 <transmit_prediction+0xa8>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d1f8      	bne.n	8007a7a <transmit_prediction+0x82>
		}
		UartReady = RESET;
 8007a88:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <transmit_prediction+0xa8>)
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	701a      	strb	r2, [r3, #0]
	}
}
 8007a8e:	bf00      	nop
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	240155d0 	.word	0x240155d0
 8007a9c:	08014210 	.word	0x08014210
 8007aa0:	24015549 	.word	0x24015549
 8007aa4:	08014214 	.word	0x08014214

08007aa8 <transmit_features>:
void transmit_features(uint8_t *value, uint8_t *counter){
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8007ab2:	4825      	ldr	r0, [pc, #148]	; (8007b48 <transmit_features+0xa0>)
 8007ab4:	f005 f8f4 	bl	800cca0 <UART_CheckIdleState>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d13f      	bne.n	8007b3e <transmit_features+0x96>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8007abe:	2204      	movs	r2, #4
 8007ac0:	4922      	ldr	r1, [pc, #136]	; (8007b4c <transmit_features+0xa4>)
 8007ac2:	4821      	ldr	r0, [pc, #132]	; (8007b48 <transmit_features+0xa0>)
 8007ac4:	f003 ffb4 	bl	800ba30 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8007ac8:	e001      	b.n	8007ace <transmit_features+0x26>
			blink_red_fast();
 8007aca:	f7ff ff4f 	bl	800796c <blink_red_fast>
		while(UartReady != SET){
 8007ace:	4b20      	ldr	r3, [pc, #128]	; (8007b50 <transmit_features+0xa8>)
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d1f8      	bne.n	8007aca <transmit_features+0x22>
		}
		UartReady = RESET;
 8007ad8:	4b1d      	ldr	r3, [pc, #116]	; (8007b50 <transmit_features+0xa8>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &value[0], 4*22);
 8007ade:	2258      	movs	r2, #88	; 0x58
 8007ae0:	6879      	ldr	r1, [r7, #4]
 8007ae2:	4819      	ldr	r0, [pc, #100]	; (8007b48 <transmit_features+0xa0>)
 8007ae4:	f003 ffa4 	bl	800ba30 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8007ae8:	e001      	b.n	8007aee <transmit_features+0x46>
			blink_red_fast();
 8007aea:	f7ff ff3f 	bl	800796c <blink_red_fast>
		while(UartReady != SET){
 8007aee:	4b18      	ldr	r3, [pc, #96]	; (8007b50 <transmit_features+0xa8>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d1f8      	bne.n	8007aea <transmit_features+0x42>
		}
		UartReady = RESET;
 8007af8:	4b15      	ldr	r3, [pc, #84]	; (8007b50 <transmit_features+0xa8>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &counter[0], 4*22);
 8007afe:	2258      	movs	r2, #88	; 0x58
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	4811      	ldr	r0, [pc, #68]	; (8007b48 <transmit_features+0xa0>)
 8007b04:	f003 ff94 	bl	800ba30 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8007b08:	e001      	b.n	8007b0e <transmit_features+0x66>
			blink_red_fast();
 8007b0a:	f7ff ff2f 	bl	800796c <blink_red_fast>
		while(UartReady != SET){
 8007b0e:	4b10      	ldr	r3, [pc, #64]	; (8007b50 <transmit_features+0xa8>)
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d1f8      	bne.n	8007b0a <transmit_features+0x62>
		}
		UartReady = RESET;
 8007b18:	4b0d      	ldr	r3, [pc, #52]	; (8007b50 <transmit_features+0xa8>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8007b1e:	2204      	movs	r2, #4
 8007b20:	490c      	ldr	r1, [pc, #48]	; (8007b54 <transmit_features+0xac>)
 8007b22:	4809      	ldr	r0, [pc, #36]	; (8007b48 <transmit_features+0xa0>)
 8007b24:	f003 ff84 	bl	800ba30 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8007b28:	e001      	b.n	8007b2e <transmit_features+0x86>
			blink_red_fast();
 8007b2a:	f7ff ff1f 	bl	800796c <blink_red_fast>
		while(UartReady != SET){
 8007b2e:	4b08      	ldr	r3, [pc, #32]	; (8007b50 <transmit_features+0xa8>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d1f8      	bne.n	8007b2a <transmit_features+0x82>
		}
		UartReady = RESET;
 8007b38:	4b05      	ldr	r3, [pc, #20]	; (8007b50 <transmit_features+0xa8>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	701a      	strb	r2, [r3, #0]
	}
}
 8007b3e:	bf00      	nop
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	240155d0 	.word	0x240155d0
 8007b4c:	08014210 	.word	0x08014210
 8007b50:	24015549 	.word	0x24015549
 8007b54:	08014214 	.word	0x08014214

08007b58 <transmit_array>:
void transmit_array(uint8_t *array, uint16_t size, uint8_t *counter){
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	460b      	mov	r3, r1
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	817b      	strh	r3, [r7, #10]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8007b66:	4826      	ldr	r0, [pc, #152]	; (8007c00 <transmit_array+0xa8>)
 8007b68:	f005 f89a 	bl	800cca0 <UART_CheckIdleState>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d140      	bne.n	8007bf4 <transmit_array+0x9c>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8007b72:	2204      	movs	r2, #4
 8007b74:	4923      	ldr	r1, [pc, #140]	; (8007c04 <transmit_array+0xac>)
 8007b76:	4822      	ldr	r0, [pc, #136]	; (8007c00 <transmit_array+0xa8>)
 8007b78:	f003 ff5a 	bl	800ba30 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8007b7c:	e001      	b.n	8007b82 <transmit_array+0x2a>
			blink_red_fast();
 8007b7e:	f7ff fef5 	bl	800796c <blink_red_fast>
		while(UartReady != SET){
 8007b82:	4b21      	ldr	r3, [pc, #132]	; (8007c08 <transmit_array+0xb0>)
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d1f8      	bne.n	8007b7e <transmit_array+0x26>
		}
		UartReady = RESET;
 8007b8c:	4b1e      	ldr	r3, [pc, #120]	; (8007c08 <transmit_array+0xb0>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &array[0], size);
 8007b92:	897b      	ldrh	r3, [r7, #10]
 8007b94:	461a      	mov	r2, r3
 8007b96:	68f9      	ldr	r1, [r7, #12]
 8007b98:	4819      	ldr	r0, [pc, #100]	; (8007c00 <transmit_array+0xa8>)
 8007b9a:	f003 ff49 	bl	800ba30 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8007b9e:	e001      	b.n	8007ba4 <transmit_array+0x4c>
			blink_red_fast();
 8007ba0:	f7ff fee4 	bl	800796c <blink_red_fast>
		while(UartReady != SET){
 8007ba4:	4b18      	ldr	r3, [pc, #96]	; (8007c08 <transmit_array+0xb0>)
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d1f8      	bne.n	8007ba0 <transmit_array+0x48>
		}
		UartReady = RESET;
 8007bae:	4b16      	ldr	r3, [pc, #88]	; (8007c08 <transmit_array+0xb0>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &counter[0], 4);
 8007bb4:	2204      	movs	r2, #4
 8007bb6:	6879      	ldr	r1, [r7, #4]
 8007bb8:	4811      	ldr	r0, [pc, #68]	; (8007c00 <transmit_array+0xa8>)
 8007bba:	f003 ff39 	bl	800ba30 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8007bbe:	e001      	b.n	8007bc4 <transmit_array+0x6c>
			blink_red_fast();
 8007bc0:	f7ff fed4 	bl	800796c <blink_red_fast>
		while(UartReady != SET){
 8007bc4:	4b10      	ldr	r3, [pc, #64]	; (8007c08 <transmit_array+0xb0>)
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d1f8      	bne.n	8007bc0 <transmit_array+0x68>
		}
		UartReady = RESET;
 8007bce:	4b0e      	ldr	r3, [pc, #56]	; (8007c08 <transmit_array+0xb0>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8007bd4:	2204      	movs	r2, #4
 8007bd6:	490d      	ldr	r1, [pc, #52]	; (8007c0c <transmit_array+0xb4>)
 8007bd8:	4809      	ldr	r0, [pc, #36]	; (8007c00 <transmit_array+0xa8>)
 8007bda:	f003 ff29 	bl	800ba30 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8007bde:	e001      	b.n	8007be4 <transmit_array+0x8c>
			blink_red_fast();
 8007be0:	f7ff fec4 	bl	800796c <blink_red_fast>
		while(UartReady != SET){
 8007be4:	4b08      	ldr	r3, [pc, #32]	; (8007c08 <transmit_array+0xb0>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d1f8      	bne.n	8007be0 <transmit_array+0x88>
		}
		UartReady = RESET;
 8007bee:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <transmit_array+0xb0>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	701a      	strb	r2, [r3, #0]
	}
	blink_orange_slow();
 8007bf4:	f7ff fed2 	bl	800799c <blink_orange_slow>
}
 8007bf8:	bf00      	nop
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	240155d0 	.word	0x240155d0
 8007c04:	08014210 	.word	0x08014210
 8007c08:	24015549 	.word	0x24015549
 8007c0c:	08014214 	.word	0x08014214

08007c10 <quantize_features>:
void quantize_features(float32_t in[], q15_t out[]){
 8007c10:	b580      	push	{r7, lr}
 8007c12:	ed2d 8b02 	vpush	{d8}
 8007c16:	b08c      	sub	sp, #48	; 0x30
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
	const int16_t min_int16_t = SHRT_MIN;
 8007c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c22:	85bb      	strh	r3, [r7, #44]	; 0x2c
	const int16_t max_int16_t = SHRT_MAX;
 8007c24:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007c28:	857b      	strh	r3, [r7, #42]	; 0x2a
	const float32_t max_float = FLT_MAX;
 8007c2a:	4b62      	ldr	r3, [pc, #392]	; (8007db4 <quantize_features+0x1a4>)
 8007c2c:	627b      	str	r3, [r7, #36]	; 0x24

	float32_t min_range = 0.0f;
 8007c2e:	f04f 0300 	mov.w	r3, #0
 8007c32:	617b      	str	r3, [r7, #20]
	uint32_t min_index = 0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	613b      	str	r3, [r7, #16]
	float32_t max_range = 0.0f;
 8007c38:	f04f 0300 	mov.w	r3, #0
 8007c3c:	60fb      	str	r3, [r7, #12]
	uint32_t max_index = 0;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	60bb      	str	r3, [r7, #8]
	float32_t scale_factor_from_min_side = 0.0f;
 8007c42:	f04f 0300 	mov.w	r3, #0
 8007c46:	623b      	str	r3, [r7, #32]
	float32_t scale_factor_from_max_side = 0.0f;
 8007c48:	f04f 0300 	mov.w	r3, #0
 8007c4c:	61fb      	str	r3, [r7, #28]
	float32_t scale_factor = 0.0f;
 8007c4e:	f04f 0300 	mov.w	r3, #0
 8007c52:	61bb      	str	r3, [r7, #24]

	arm_min_f32(in, number_of_features, &min_range, &min_index);
 8007c54:	2116      	movs	r1, #22
 8007c56:	f107 0310 	add.w	r3, r7, #16
 8007c5a:	f107 0214 	add.w	r2, r7, #20
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7f9 fb41 	bl	80012e6 <arm_min_f32>
	arm_max_f32(in, number_of_features, &max_range, &max_index);
 8007c64:	2116      	movs	r1, #22
 8007c66:	f107 0308 	add.w	r3, r7, #8
 8007c6a:	f107 020c 	add.w	r2, r7, #12
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7f9 fa34 	bl	80010dc <arm_max_f32>
	scale_factor_from_min_side = (min_int16_t * min_range > 0) ? min_int16_t / min_range : max_float;
 8007c74:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8007c78:	ee07 3a90 	vmov	s15, r3
 8007c7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c80:	edd7 7a05 	vldr	s15, [r7, #20]
 8007c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c90:	dd0a      	ble.n	8007ca8 <quantize_features+0x98>
 8007c92:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8007c96:	ee07 3a90 	vmov	s15, r3
 8007c9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007c9e:	ed97 7a05 	vldr	s14, [r7, #20]
 8007ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ca6:	e001      	b.n	8007cac <quantize_features+0x9c>
 8007ca8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007cac:	edc7 7a08 	vstr	s15, [r7, #32]
	scale_factor_from_max_side = (max_int16_t * max_range > 0) ? max_int16_t / max_range : max_float;
 8007cb0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007cb4:	ee07 3a90 	vmov	s15, r3
 8007cb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007cbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8007cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ccc:	dd0a      	ble.n	8007ce4 <quantize_features+0xd4>
 8007cce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007cd2:	ee07 3a90 	vmov	s15, r3
 8007cd6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007cda:	ed97 7a03 	vldr	s14, [r7, #12]
 8007cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ce2:	e001      	b.n	8007ce8 <quantize_features+0xd8>
 8007ce4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007ce8:	edc7 7a07 	vstr	s15, [r7, #28]
	scale_factor = fminf(scale_factor_from_min_side, scale_factor_from_max_side);
 8007cec:	edd7 0a07 	vldr	s1, [r7, #28]
 8007cf0:	ed97 0a08 	vldr	s0, [r7, #32]
 8007cf4:	f006 f94b 	bl	800df8e <fminf>
 8007cf8:	ed87 0a06 	vstr	s0, [r7, #24]

	min_range = min_int16_t / scale_factor;
 8007cfc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8007d00:	ee07 3a90 	vmov	s15, r3
 8007d04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007d08:	ed97 7a06 	vldr	s14, [r7, #24]
 8007d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d10:	edc7 7a05 	vstr	s15, [r7, #20]
	max_range = max_int16_t / scale_factor;
 8007d14:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007d18:	ee07 3a90 	vmov	s15, r3
 8007d1c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007d20:	ed97 7a06 	vldr	s14, [r7, #24]
 8007d24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d28:	edc7 7a03 	vstr	s15, [r7, #12]

	for(uint8_t i = 0; i < number_of_features; i++){
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007d32:	e034      	b.n	8007d9e <quantize_features+0x18e>
		out[i] = (int16_t) roundf(fminf(max_range, fmaxf(min_range, in[i])) * scale_factor);
 8007d34:	ed97 8a03 	vldr	s16, [r7, #12]
 8007d38:	edd7 7a05 	vldr	s15, [r7, #20]
 8007d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	4413      	add	r3, r2
 8007d46:	ed93 7a00 	vldr	s14, [r3]
 8007d4a:	eef0 0a47 	vmov.f32	s1, s14
 8007d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8007d52:	f006 f901 	bl	800df58 <fmaxf>
 8007d56:	eef0 7a40 	vmov.f32	s15, s0
 8007d5a:	eef0 0a67 	vmov.f32	s1, s15
 8007d5e:	eeb0 0a48 	vmov.f32	s0, s16
 8007d62:	f006 f914 	bl	800df8e <fminf>
 8007d66:	eeb0 7a40 	vmov.f32	s14, s0
 8007d6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8007d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d72:	eeb0 0a67 	vmov.f32	s0, s15
 8007d76:	f006 f941 	bl	800dffc <roundf>
 8007d7a:	eef0 7a40 	vmov.f32	s15, s0
 8007d7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d82:	005b      	lsls	r3, r3, #1
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	4413      	add	r3, r2
 8007d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d8c:	ee17 2a90 	vmov	r2, s15
 8007d90:	b212      	sxth	r2, r2
 8007d92:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < number_of_features; i++){
 8007d94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d98:	3301      	adds	r3, #1
 8007d9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007d9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007da2:	2216      	movs	r2, #22
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d3c5      	bcc.n	8007d34 <quantize_features+0x124>
	}
}
 8007da8:	bf00      	nop
 8007daa:	3730      	adds	r7, #48	; 0x30
 8007dac:	46bd      	mov	sp, r7
 8007dae:	ecbd 8b02 	vpop	{d8}
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	7f7fffff 	.word	0x7f7fffff

08007db8 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart3){
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8007dc0:	4b04      	ldr	r3, [pc, #16]	; (8007dd4 <HAL_UART_TxCpltCallback+0x1c>)
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	701a      	strb	r2, [r3, #0]
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	24015549 	.word	0x24015549

08007dd8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart3){
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8007de0:	4b04      	ldr	r3, [pc, #16]	; (8007df4 <HAL_UART_RxCpltCallback+0x1c>)
 8007de2:	2201      	movs	r2, #1
 8007de4:	701a      	strb	r2, [r3, #0]
}
 8007de6:	bf00      	nop
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	24015549 	.word	0x24015549

08007df8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8007dfc:	bf00      	nop
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
	...

08007e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e0e:	4b0a      	ldr	r3, [pc, #40]	; (8007e38 <HAL_MspInit+0x30>)
 8007e10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e14:	4a08      	ldr	r2, [pc, #32]	; (8007e38 <HAL_MspInit+0x30>)
 8007e16:	f043 0302 	orr.w	r3, r3, #2
 8007e1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007e1e:	4b06      	ldr	r3, [pc, #24]	; (8007e38 <HAL_MspInit+0x30>)
 8007e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	607b      	str	r3, [r7, #4]
 8007e2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	58024400 	.word	0x58024400

08007e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007e40:	bf00      	nop
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007e4e:	e7fe      	b.n	8007e4e <HardFault_Handler+0x4>

08007e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007e50:	b480      	push	{r7}
 8007e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007e54:	e7fe      	b.n	8007e54 <MemManage_Handler+0x4>

08007e56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007e56:	b480      	push	{r7}
 8007e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007e5a:	e7fe      	b.n	8007e5a <BusFault_Handler+0x4>

08007e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007e60:	e7fe      	b.n	8007e60 <UsageFault_Handler+0x4>

08007e62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007e62:	b480      	push	{r7}
 8007e64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007e66:	bf00      	nop
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007e70:	b480      	push	{r7}
 8007e72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007e74:	bf00      	nop
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007e82:	bf00      	nop
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007e90:	f000 f9e0 	bl	8008254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007e94:	bf00      	nop
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007e9c:	4802      	ldr	r0, [pc, #8]	; (8007ea8 <USART3_IRQHandler+0x10>)
 8007e9e:	f003 ff23 	bl	800bce8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007ea2:	bf00      	nop
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	240155d0 	.word	0x240155d0

08007eac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007eb4:	4b11      	ldr	r3, [pc, #68]	; (8007efc <_sbrk+0x50>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d102      	bne.n	8007ec2 <_sbrk+0x16>
		heap_end = &end;
 8007ebc:	4b0f      	ldr	r3, [pc, #60]	; (8007efc <_sbrk+0x50>)
 8007ebe:	4a10      	ldr	r2, [pc, #64]	; (8007f00 <_sbrk+0x54>)
 8007ec0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007ec2:	4b0e      	ldr	r3, [pc, #56]	; (8007efc <_sbrk+0x50>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007ec8:	4b0c      	ldr	r3, [pc, #48]	; (8007efc <_sbrk+0x50>)
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4413      	add	r3, r2
 8007ed0:	466a      	mov	r2, sp
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d907      	bls.n	8007ee6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007ed6:	f005 fc05 	bl	800d6e4 <__errno>
 8007eda:	4602      	mov	r2, r0
 8007edc:	230c      	movs	r3, #12
 8007ede:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ee4:	e006      	b.n	8007ef4 <_sbrk+0x48>
	}

	heap_end += incr;
 8007ee6:	4b05      	ldr	r3, [pc, #20]	; (8007efc <_sbrk+0x50>)
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4413      	add	r3, r2
 8007eee:	4a03      	ldr	r2, [pc, #12]	; (8007efc <_sbrk+0x50>)
 8007ef0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	2401554c 	.word	0x2401554c
 8007f00:	24015670 	.word	0x24015670

08007f04 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b088      	sub	sp, #32
 8007f08:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f0a:	f107 0310 	add.w	r3, r7, #16
 8007f0e:	2200      	movs	r2, #0
 8007f10:	601a      	str	r2, [r3, #0]
 8007f12:	605a      	str	r2, [r3, #4]
 8007f14:	609a      	str	r2, [r3, #8]
 8007f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f18:	1d3b      	adds	r3, r7, #4
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	605a      	str	r2, [r3, #4]
 8007f20:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8007f22:	4b1e      	ldr	r3, [pc, #120]	; (8007f9c <MX_TIM2_Init+0x98>)
 8007f24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007f28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007f2a:	4b1c      	ldr	r3, [pc, #112]	; (8007f9c <MX_TIM2_Init+0x98>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f30:	4b1a      	ldr	r3, [pc, #104]	; (8007f9c <MX_TIM2_Init+0x98>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8007f36:	4b19      	ldr	r3, [pc, #100]	; (8007f9c <MX_TIM2_Init+0x98>)
 8007f38:	f04f 32ff 	mov.w	r2, #4294967295
 8007f3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f3e:	4b17      	ldr	r3, [pc, #92]	; (8007f9c <MX_TIM2_Init+0x98>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007f44:	4b15      	ldr	r3, [pc, #84]	; (8007f9c <MX_TIM2_Init+0x98>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007f4a:	4814      	ldr	r0, [pc, #80]	; (8007f9c <MX_TIM2_Init+0x98>)
 8007f4c:	f003 fa0a 	bl	800b364 <HAL_TIM_Base_Init>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8007f56:	f7ff ff4f 	bl	8007df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007f60:	f107 0310 	add.w	r3, r7, #16
 8007f64:	4619      	mov	r1, r3
 8007f66:	480d      	ldr	r0, [pc, #52]	; (8007f9c <MX_TIM2_Init+0x98>)
 8007f68:	f003 fa82 	bl	800b470 <HAL_TIM_ConfigClockSource>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8007f72:	f7ff ff41 	bl	8007df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007f76:	2300      	movs	r3, #0
 8007f78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007f7e:	1d3b      	adds	r3, r7, #4
 8007f80:	4619      	mov	r1, r3
 8007f82:	4806      	ldr	r0, [pc, #24]	; (8007f9c <MX_TIM2_Init+0x98>)
 8007f84:	f003 fc7c 	bl	800b880 <HAL_TIMEx_MasterConfigSynchronization>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8007f8e:	f7ff ff33 	bl	8007df8 <Error_Handler>
  }

}
 8007f92:	bf00      	nop
 8007f94:	3720      	adds	r7, #32
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	24015584 	.word	0x24015584

08007fa0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb0:	d10e      	bne.n	8007fd0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007fb2:	4b0a      	ldr	r3, [pc, #40]	; (8007fdc <HAL_TIM_Base_MspInit+0x3c>)
 8007fb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007fb8:	4a08      	ldr	r2, [pc, #32]	; (8007fdc <HAL_TIM_Base_MspInit+0x3c>)
 8007fba:	f043 0301 	orr.w	r3, r3, #1
 8007fbe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007fc2:	4b06      	ldr	r3, [pc, #24]	; (8007fdc <HAL_TIM_Base_MspInit+0x3c>)
 8007fc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	60fb      	str	r3, [r7, #12]
 8007fce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8007fd0:	bf00      	nop
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	58024400 	.word	0x58024400

08007fe0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8007fe4:	4b22      	ldr	r3, [pc, #136]	; (8008070 <MX_USART3_UART_Init+0x90>)
 8007fe6:	4a23      	ldr	r2, [pc, #140]	; (8008074 <MX_USART3_UART_Init+0x94>)
 8007fe8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007fea:	4b21      	ldr	r3, [pc, #132]	; (8008070 <MX_USART3_UART_Init+0x90>)
 8007fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007ff0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007ff2:	4b1f      	ldr	r3, [pc, #124]	; (8008070 <MX_USART3_UART_Init+0x90>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007ff8:	4b1d      	ldr	r3, [pc, #116]	; (8008070 <MX_USART3_UART_Init+0x90>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007ffe:	4b1c      	ldr	r3, [pc, #112]	; (8008070 <MX_USART3_UART_Init+0x90>)
 8008000:	2200      	movs	r2, #0
 8008002:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008004:	4b1a      	ldr	r3, [pc, #104]	; (8008070 <MX_USART3_UART_Init+0x90>)
 8008006:	220c      	movs	r2, #12
 8008008:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800800a:	4b19      	ldr	r3, [pc, #100]	; (8008070 <MX_USART3_UART_Init+0x90>)
 800800c:	2200      	movs	r2, #0
 800800e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008010:	4b17      	ldr	r3, [pc, #92]	; (8008070 <MX_USART3_UART_Init+0x90>)
 8008012:	2200      	movs	r2, #0
 8008014:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008016:	4b16      	ldr	r3, [pc, #88]	; (8008070 <MX_USART3_UART_Init+0x90>)
 8008018:	2200      	movs	r2, #0
 800801a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800801c:	4b14      	ldr	r3, [pc, #80]	; (8008070 <MX_USART3_UART_Init+0x90>)
 800801e:	2200      	movs	r2, #0
 8008020:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008022:	4b13      	ldr	r3, [pc, #76]	; (8008070 <MX_USART3_UART_Init+0x90>)
 8008024:	2200      	movs	r2, #0
 8008026:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008028:	4811      	ldr	r0, [pc, #68]	; (8008070 <MX_USART3_UART_Init+0x90>)
 800802a:	f003 fcb1 	bl	800b990 <HAL_UART_Init>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8008034:	f7ff fee0 	bl	8007df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008038:	2100      	movs	r1, #0
 800803a:	480d      	ldr	r0, [pc, #52]	; (8008070 <MX_USART3_UART_Init+0x90>)
 800803c:	f005 fa6d 	bl	800d51a <HAL_UARTEx_SetTxFifoThreshold>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d001      	beq.n	800804a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8008046:	f7ff fed7 	bl	8007df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800804a:	2100      	movs	r1, #0
 800804c:	4808      	ldr	r0, [pc, #32]	; (8008070 <MX_USART3_UART_Init+0x90>)
 800804e:	f005 faa2 	bl	800d596 <HAL_UARTEx_SetRxFifoThreshold>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8008058:	f7ff fece 	bl	8007df8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800805c:	4804      	ldr	r0, [pc, #16]	; (8008070 <MX_USART3_UART_Init+0x90>)
 800805e:	f005 fa23 	bl	800d4a8 <HAL_UARTEx_DisableFifoMode>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8008068:	f7ff fec6 	bl	8007df8 <Error_Handler>
  }

}
 800806c:	bf00      	nop
 800806e:	bd80      	pop	{r7, pc}
 8008070:	240155d0 	.word	0x240155d0
 8008074:	40004800 	.word	0x40004800

08008078 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b08a      	sub	sp, #40	; 0x28
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008080:	f107 0314 	add.w	r3, r7, #20
 8008084:	2200      	movs	r2, #0
 8008086:	601a      	str	r2, [r3, #0]
 8008088:	605a      	str	r2, [r3, #4]
 800808a:	609a      	str	r2, [r3, #8]
 800808c:	60da      	str	r2, [r3, #12]
 800808e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a1e      	ldr	r2, [pc, #120]	; (8008110 <HAL_UART_MspInit+0x98>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d136      	bne.n	8008108 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800809a:	4b1e      	ldr	r3, [pc, #120]	; (8008114 <HAL_UART_MspInit+0x9c>)
 800809c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80080a0:	4a1c      	ldr	r2, [pc, #112]	; (8008114 <HAL_UART_MspInit+0x9c>)
 80080a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80080aa:	4b1a      	ldr	r3, [pc, #104]	; (8008114 <HAL_UART_MspInit+0x9c>)
 80080ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80080b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080b4:	613b      	str	r3, [r7, #16]
 80080b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80080b8:	4b16      	ldr	r3, [pc, #88]	; (8008114 <HAL_UART_MspInit+0x9c>)
 80080ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080be:	4a15      	ldr	r2, [pc, #84]	; (8008114 <HAL_UART_MspInit+0x9c>)
 80080c0:	f043 0308 	orr.w	r3, r3, #8
 80080c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80080c8:	4b12      	ldr	r3, [pc, #72]	; (8008114 <HAL_UART_MspInit+0x9c>)
 80080ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080ce:	f003 0308 	and.w	r3, r3, #8
 80080d2:	60fb      	str	r3, [r7, #12]
 80080d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80080d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80080da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080dc:	2302      	movs	r3, #2
 80080de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e0:	2300      	movs	r3, #0
 80080e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080e4:	2300      	movs	r3, #0
 80080e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80080e8:	2307      	movs	r3, #7
 80080ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80080ec:	f107 0314 	add.w	r3, r7, #20
 80080f0:	4619      	mov	r1, r3
 80080f2:	4809      	ldr	r0, [pc, #36]	; (8008118 <HAL_UART_MspInit+0xa0>)
 80080f4:	f000 fc50 	bl	8008998 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80080f8:	2200      	movs	r2, #0
 80080fa:	2100      	movs	r1, #0
 80080fc:	2027      	movs	r0, #39	; 0x27
 80080fe:	f000 f9d2 	bl	80084a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8008102:	2027      	movs	r0, #39	; 0x27
 8008104:	f000 f9e9 	bl	80084da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8008108:	bf00      	nop
 800810a:	3728      	adds	r7, #40	; 0x28
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	40004800 	.word	0x40004800
 8008114:	58024400 	.word	0x58024400
 8008118:	58020c00 	.word	0x58020c00

0800811c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800811c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008154 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008120:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008122:	e003      	b.n	800812c <LoopCopyDataInit>

08008124 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008124:	4b0c      	ldr	r3, [pc, #48]	; (8008158 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008126:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008128:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800812a:	3104      	adds	r1, #4

0800812c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800812c:	480b      	ldr	r0, [pc, #44]	; (800815c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800812e:	4b0c      	ldr	r3, [pc, #48]	; (8008160 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008130:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008132:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008134:	d3f6      	bcc.n	8008124 <CopyDataInit>
  ldr  r2, =_sbss
 8008136:	4a0b      	ldr	r2, [pc, #44]	; (8008164 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008138:	e002      	b.n	8008140 <LoopFillZerobss>

0800813a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800813a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800813c:	f842 3b04 	str.w	r3, [r2], #4

08008140 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008140:	4b09      	ldr	r3, [pc, #36]	; (8008168 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008142:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008144:	d3f9      	bcc.n	800813a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008146:	f7f8 faf7 	bl	8000738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800814a:	f005 fad1 	bl	800d6f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800814e:	f7ff f883 	bl	8007258 <main>
  bx  lr    
 8008152:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008154:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008158:	08014270 	.word	0x08014270
  ldr  r0, =_sdata
 800815c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8008160:	24000858 	.word	0x24000858
  ldr  r2, =_sbss
 8008164:	24000858 	.word	0x24000858
  ldr  r3, = _ebss
 8008168:	24015670 	.word	0x24015670

0800816c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800816c:	e7fe      	b.n	800816c <ADC3_IRQHandler>
	...

08008170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008176:	2003      	movs	r0, #3
 8008178:	f000 f98a 	bl	8008490 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800817c:	f001 fc24 	bl	80099c8 <HAL_RCC_GetSysClockFreq>
 8008180:	4601      	mov	r1, r0
 8008182:	4b15      	ldr	r3, [pc, #84]	; (80081d8 <HAL_Init+0x68>)
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	0a1b      	lsrs	r3, r3, #8
 8008188:	f003 030f 	and.w	r3, r3, #15
 800818c:	4a13      	ldr	r2, [pc, #76]	; (80081dc <HAL_Init+0x6c>)
 800818e:	5cd3      	ldrb	r3, [r2, r3]
 8008190:	f003 031f 	and.w	r3, r3, #31
 8008194:	fa21 f303 	lsr.w	r3, r1, r3
 8008198:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800819a:	4b0f      	ldr	r3, [pc, #60]	; (80081d8 <HAL_Init+0x68>)
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	f003 030f 	and.w	r3, r3, #15
 80081a2:	4a0e      	ldr	r2, [pc, #56]	; (80081dc <HAL_Init+0x6c>)
 80081a4:	5cd3      	ldrb	r3, [r2, r3]
 80081a6:	f003 031f 	and.w	r3, r3, #31
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	fa22 f303 	lsr.w	r3, r2, r3
 80081b0:	4a0b      	ldr	r2, [pc, #44]	; (80081e0 <HAL_Init+0x70>)
 80081b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80081b4:	4a0b      	ldr	r2, [pc, #44]	; (80081e4 <HAL_Init+0x74>)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80081ba:	2000      	movs	r0, #0
 80081bc:	f000 f814 	bl	80081e8 <HAL_InitTick>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e002      	b.n	80081d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80081ca:	f7ff fe1d 	bl	8007e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	58024400 	.word	0x58024400
 80081dc:	0800e42c 	.word	0x0800e42c
 80081e0:	24000004 	.word	0x24000004
 80081e4:	24000000 	.word	0x24000000

080081e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80081f0:	4b15      	ldr	r3, [pc, #84]	; (8008248 <HAL_InitTick+0x60>)
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d101      	bne.n	80081fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e021      	b.n	8008240 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80081fc:	4b13      	ldr	r3, [pc, #76]	; (800824c <HAL_InitTick+0x64>)
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	4b11      	ldr	r3, [pc, #68]	; (8008248 <HAL_InitTick+0x60>)
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	4619      	mov	r1, r3
 8008206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800820a:	fbb3 f3f1 	udiv	r3, r3, r1
 800820e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008212:	4618      	mov	r0, r3
 8008214:	f000 f96f 	bl	80084f6 <HAL_SYSTICK_Config>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e00e      	b.n	8008240 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b0f      	cmp	r3, #15
 8008226:	d80a      	bhi.n	800823e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008228:	2200      	movs	r2, #0
 800822a:	6879      	ldr	r1, [r7, #4]
 800822c:	f04f 30ff 	mov.w	r0, #4294967295
 8008230:	f000 f939 	bl	80084a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008234:	4a06      	ldr	r2, [pc, #24]	; (8008250 <HAL_InitTick+0x68>)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800823a:	2300      	movs	r3, #0
 800823c:	e000      	b.n	8008240 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
}
 8008240:	4618      	mov	r0, r3
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	2400000c 	.word	0x2400000c
 800824c:	24000000 	.word	0x24000000
 8008250:	24000008 	.word	0x24000008

08008254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008254:	b480      	push	{r7}
 8008256:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008258:	4b06      	ldr	r3, [pc, #24]	; (8008274 <HAL_IncTick+0x20>)
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	461a      	mov	r2, r3
 800825e:	4b06      	ldr	r3, [pc, #24]	; (8008278 <HAL_IncTick+0x24>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4413      	add	r3, r2
 8008264:	4a04      	ldr	r2, [pc, #16]	; (8008278 <HAL_IncTick+0x24>)
 8008266:	6013      	str	r3, [r2, #0]
}
 8008268:	bf00      	nop
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	2400000c 	.word	0x2400000c
 8008278:	2401565c 	.word	0x2401565c

0800827c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800827c:	b480      	push	{r7}
 800827e:	af00      	add	r7, sp, #0
  return uwTick;
 8008280:	4b03      	ldr	r3, [pc, #12]	; (8008290 <HAL_GetTick+0x14>)
 8008282:	681b      	ldr	r3, [r3, #0]
}
 8008284:	4618      	mov	r0, r3
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	2401565c 	.word	0x2401565c

08008294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800829c:	f7ff ffee 	bl	800827c <HAL_GetTick>
 80082a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ac:	d005      	beq.n	80082ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80082ae:	4b09      	ldr	r3, [pc, #36]	; (80082d4 <HAL_Delay+0x40>)
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	461a      	mov	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	4413      	add	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80082ba:	bf00      	nop
 80082bc:	f7ff ffde 	bl	800827c <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d8f7      	bhi.n	80082bc <HAL_Delay+0x28>
  {
  }
}
 80082cc:	bf00      	nop
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	2400000c 	.word	0x2400000c

080082d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80082d8:	b480      	push	{r7}
 80082da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80082dc:	4b03      	ldr	r3, [pc, #12]	; (80082ec <HAL_GetREVID+0x14>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	0c1b      	lsrs	r3, r3, #16
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	5c001000 	.word	0x5c001000

080082f0 <__NVIC_SetPriorityGrouping>:
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f003 0307 	and.w	r3, r3, #7
 80082fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008300:	4b0b      	ldr	r3, [pc, #44]	; (8008330 <__NVIC_SetPriorityGrouping+0x40>)
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800830c:	4013      	ands	r3, r2
 800830e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008318:	4b06      	ldr	r3, [pc, #24]	; (8008334 <__NVIC_SetPriorityGrouping+0x44>)
 800831a:	4313      	orrs	r3, r2
 800831c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800831e:	4a04      	ldr	r2, [pc, #16]	; (8008330 <__NVIC_SetPriorityGrouping+0x40>)
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	60d3      	str	r3, [r2, #12]
}
 8008324:	bf00      	nop
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr
 8008330:	e000ed00 	.word	0xe000ed00
 8008334:	05fa0000 	.word	0x05fa0000

08008338 <__NVIC_GetPriorityGrouping>:
{
 8008338:	b480      	push	{r7}
 800833a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800833c:	4b04      	ldr	r3, [pc, #16]	; (8008350 <__NVIC_GetPriorityGrouping+0x18>)
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	0a1b      	lsrs	r3, r3, #8
 8008342:	f003 0307 	and.w	r3, r3, #7
}
 8008346:	4618      	mov	r0, r3
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr
 8008350:	e000ed00 	.word	0xe000ed00

08008354 <__NVIC_EnableIRQ>:
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	4603      	mov	r3, r0
 800835c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800835e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008362:	2b00      	cmp	r3, #0
 8008364:	db0b      	blt.n	800837e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008366:	88fb      	ldrh	r3, [r7, #6]
 8008368:	f003 021f 	and.w	r2, r3, #31
 800836c:	4907      	ldr	r1, [pc, #28]	; (800838c <__NVIC_EnableIRQ+0x38>)
 800836e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008372:	095b      	lsrs	r3, r3, #5
 8008374:	2001      	movs	r0, #1
 8008376:	fa00 f202 	lsl.w	r2, r0, r2
 800837a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	e000e100 	.word	0xe000e100

08008390 <__NVIC_SetPriority>:
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	4603      	mov	r3, r0
 8008398:	6039      	str	r1, [r7, #0]
 800839a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800839c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	db0a      	blt.n	80083ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	490c      	ldr	r1, [pc, #48]	; (80083dc <__NVIC_SetPriority+0x4c>)
 80083aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80083ae:	0112      	lsls	r2, r2, #4
 80083b0:	b2d2      	uxtb	r2, r2
 80083b2:	440b      	add	r3, r1
 80083b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80083b8:	e00a      	b.n	80083d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	4908      	ldr	r1, [pc, #32]	; (80083e0 <__NVIC_SetPriority+0x50>)
 80083c0:	88fb      	ldrh	r3, [r7, #6]
 80083c2:	f003 030f 	and.w	r3, r3, #15
 80083c6:	3b04      	subs	r3, #4
 80083c8:	0112      	lsls	r2, r2, #4
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	440b      	add	r3, r1
 80083ce:	761a      	strb	r2, [r3, #24]
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	e000e100 	.word	0xe000e100
 80083e0:	e000ed00 	.word	0xe000ed00

080083e4 <NVIC_EncodePriority>:
{
 80083e4:	b480      	push	{r7}
 80083e6:	b089      	sub	sp, #36	; 0x24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f003 0307 	and.w	r3, r3, #7
 80083f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	f1c3 0307 	rsb	r3, r3, #7
 80083fe:	2b04      	cmp	r3, #4
 8008400:	bf28      	it	cs
 8008402:	2304      	movcs	r3, #4
 8008404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	3304      	adds	r3, #4
 800840a:	2b06      	cmp	r3, #6
 800840c:	d902      	bls.n	8008414 <NVIC_EncodePriority+0x30>
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	3b03      	subs	r3, #3
 8008412:	e000      	b.n	8008416 <NVIC_EncodePriority+0x32>
 8008414:	2300      	movs	r3, #0
 8008416:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008418:	f04f 32ff 	mov.w	r2, #4294967295
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	fa02 f303 	lsl.w	r3, r2, r3
 8008422:	43da      	mvns	r2, r3
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	401a      	ands	r2, r3
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800842c:	f04f 31ff 	mov.w	r1, #4294967295
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	fa01 f303 	lsl.w	r3, r1, r3
 8008436:	43d9      	mvns	r1, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800843c:	4313      	orrs	r3, r2
}
 800843e:	4618      	mov	r0, r3
 8008440:	3724      	adds	r7, #36	; 0x24
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
	...

0800844c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3b01      	subs	r3, #1
 8008458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800845c:	d301      	bcc.n	8008462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800845e:	2301      	movs	r3, #1
 8008460:	e00f      	b.n	8008482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008462:	4a0a      	ldr	r2, [pc, #40]	; (800848c <SysTick_Config+0x40>)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	3b01      	subs	r3, #1
 8008468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800846a:	210f      	movs	r1, #15
 800846c:	f04f 30ff 	mov.w	r0, #4294967295
 8008470:	f7ff ff8e 	bl	8008390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008474:	4b05      	ldr	r3, [pc, #20]	; (800848c <SysTick_Config+0x40>)
 8008476:	2200      	movs	r2, #0
 8008478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800847a:	4b04      	ldr	r3, [pc, #16]	; (800848c <SysTick_Config+0x40>)
 800847c:	2207      	movs	r2, #7
 800847e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	e000e010 	.word	0xe000e010

08008490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff ff29 	bl	80082f0 <__NVIC_SetPriorityGrouping>
}
 800849e:	bf00      	nop
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b086      	sub	sp, #24
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	4603      	mov	r3, r0
 80084ae:	60b9      	str	r1, [r7, #8]
 80084b0:	607a      	str	r2, [r7, #4]
 80084b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80084b4:	f7ff ff40 	bl	8008338 <__NVIC_GetPriorityGrouping>
 80084b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	68b9      	ldr	r1, [r7, #8]
 80084be:	6978      	ldr	r0, [r7, #20]
 80084c0:	f7ff ff90 	bl	80083e4 <NVIC_EncodePriority>
 80084c4:	4602      	mov	r2, r0
 80084c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80084ca:	4611      	mov	r1, r2
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7ff ff5f 	bl	8008390 <__NVIC_SetPriority>
}
 80084d2:	bf00      	nop
 80084d4:	3718      	adds	r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b082      	sub	sp, #8
 80084de:	af00      	add	r7, sp, #0
 80084e0:	4603      	mov	r3, r0
 80084e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80084e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7ff ff33 	bl	8008354 <__NVIC_EnableIRQ>
}
 80084ee:	bf00      	nop
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b082      	sub	sp, #8
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7ff ffa4 	bl	800844c <SysTick_Config>
 8008504:	4603      	mov	r3, r0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
	...

08008510 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d101      	bne.n	8008522 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e205      	b.n	800892e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b02      	cmp	r3, #2
 800852c:	d004      	beq.n	8008538 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2280      	movs	r2, #128	; 0x80
 8008532:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e1fa      	b.n	800892e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a8c      	ldr	r2, [pc, #560]	; (8008770 <HAL_DMA_Abort_IT+0x260>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d04a      	beq.n	80085d8 <HAL_DMA_Abort_IT+0xc8>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a8b      	ldr	r2, [pc, #556]	; (8008774 <HAL_DMA_Abort_IT+0x264>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d045      	beq.n	80085d8 <HAL_DMA_Abort_IT+0xc8>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a89      	ldr	r2, [pc, #548]	; (8008778 <HAL_DMA_Abort_IT+0x268>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d040      	beq.n	80085d8 <HAL_DMA_Abort_IT+0xc8>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a88      	ldr	r2, [pc, #544]	; (800877c <HAL_DMA_Abort_IT+0x26c>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d03b      	beq.n	80085d8 <HAL_DMA_Abort_IT+0xc8>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a86      	ldr	r2, [pc, #536]	; (8008780 <HAL_DMA_Abort_IT+0x270>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d036      	beq.n	80085d8 <HAL_DMA_Abort_IT+0xc8>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a85      	ldr	r2, [pc, #532]	; (8008784 <HAL_DMA_Abort_IT+0x274>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d031      	beq.n	80085d8 <HAL_DMA_Abort_IT+0xc8>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a83      	ldr	r2, [pc, #524]	; (8008788 <HAL_DMA_Abort_IT+0x278>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d02c      	beq.n	80085d8 <HAL_DMA_Abort_IT+0xc8>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a82      	ldr	r2, [pc, #520]	; (800878c <HAL_DMA_Abort_IT+0x27c>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d027      	beq.n	80085d8 <HAL_DMA_Abort_IT+0xc8>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a80      	ldr	r2, [pc, #512]	; (8008790 <HAL_DMA_Abort_IT+0x280>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d022      	beq.n	80085d8 <HAL_DMA_Abort_IT+0xc8>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a7f      	ldr	r2, [pc, #508]	; (8008794 <HAL_DMA_Abort_IT+0x284>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d01d      	beq.n	80085d8 <HAL_DMA_Abort_IT+0xc8>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a7d      	ldr	r2, [pc, #500]	; (8008798 <HAL_DMA_Abort_IT+0x288>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d018      	beq.n	80085d8 <HAL_DMA_Abort_IT+0xc8>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a7c      	ldr	r2, [pc, #496]	; (800879c <HAL_DMA_Abort_IT+0x28c>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d013      	beq.n	80085d8 <HAL_DMA_Abort_IT+0xc8>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a7a      	ldr	r2, [pc, #488]	; (80087a0 <HAL_DMA_Abort_IT+0x290>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d00e      	beq.n	80085d8 <HAL_DMA_Abort_IT+0xc8>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a79      	ldr	r2, [pc, #484]	; (80087a4 <HAL_DMA_Abort_IT+0x294>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d009      	beq.n	80085d8 <HAL_DMA_Abort_IT+0xc8>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a77      	ldr	r2, [pc, #476]	; (80087a8 <HAL_DMA_Abort_IT+0x298>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d004      	beq.n	80085d8 <HAL_DMA_Abort_IT+0xc8>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a76      	ldr	r2, [pc, #472]	; (80087ac <HAL_DMA_Abort_IT+0x29c>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d101      	bne.n	80085dc <HAL_DMA_Abort_IT+0xcc>
 80085d8:	2301      	movs	r3, #1
 80085da:	e000      	b.n	80085de <HAL_DMA_Abort_IT+0xce>
 80085dc:	2300      	movs	r3, #0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d065      	beq.n	80086ae <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2204      	movs	r2, #4
 80085e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a60      	ldr	r2, [pc, #384]	; (8008770 <HAL_DMA_Abort_IT+0x260>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d04a      	beq.n	800868a <HAL_DMA_Abort_IT+0x17a>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a5e      	ldr	r2, [pc, #376]	; (8008774 <HAL_DMA_Abort_IT+0x264>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d045      	beq.n	800868a <HAL_DMA_Abort_IT+0x17a>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a5d      	ldr	r2, [pc, #372]	; (8008778 <HAL_DMA_Abort_IT+0x268>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d040      	beq.n	800868a <HAL_DMA_Abort_IT+0x17a>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a5b      	ldr	r2, [pc, #364]	; (800877c <HAL_DMA_Abort_IT+0x26c>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d03b      	beq.n	800868a <HAL_DMA_Abort_IT+0x17a>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a5a      	ldr	r2, [pc, #360]	; (8008780 <HAL_DMA_Abort_IT+0x270>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d036      	beq.n	800868a <HAL_DMA_Abort_IT+0x17a>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a58      	ldr	r2, [pc, #352]	; (8008784 <HAL_DMA_Abort_IT+0x274>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d031      	beq.n	800868a <HAL_DMA_Abort_IT+0x17a>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a57      	ldr	r2, [pc, #348]	; (8008788 <HAL_DMA_Abort_IT+0x278>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d02c      	beq.n	800868a <HAL_DMA_Abort_IT+0x17a>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a55      	ldr	r2, [pc, #340]	; (800878c <HAL_DMA_Abort_IT+0x27c>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d027      	beq.n	800868a <HAL_DMA_Abort_IT+0x17a>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a54      	ldr	r2, [pc, #336]	; (8008790 <HAL_DMA_Abort_IT+0x280>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d022      	beq.n	800868a <HAL_DMA_Abort_IT+0x17a>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a52      	ldr	r2, [pc, #328]	; (8008794 <HAL_DMA_Abort_IT+0x284>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d01d      	beq.n	800868a <HAL_DMA_Abort_IT+0x17a>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a51      	ldr	r2, [pc, #324]	; (8008798 <HAL_DMA_Abort_IT+0x288>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d018      	beq.n	800868a <HAL_DMA_Abort_IT+0x17a>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a4f      	ldr	r2, [pc, #316]	; (800879c <HAL_DMA_Abort_IT+0x28c>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d013      	beq.n	800868a <HAL_DMA_Abort_IT+0x17a>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a4e      	ldr	r2, [pc, #312]	; (80087a0 <HAL_DMA_Abort_IT+0x290>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d00e      	beq.n	800868a <HAL_DMA_Abort_IT+0x17a>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a4c      	ldr	r2, [pc, #304]	; (80087a4 <HAL_DMA_Abort_IT+0x294>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d009      	beq.n	800868a <HAL_DMA_Abort_IT+0x17a>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a4b      	ldr	r2, [pc, #300]	; (80087a8 <HAL_DMA_Abort_IT+0x298>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d004      	beq.n	800868a <HAL_DMA_Abort_IT+0x17a>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a49      	ldr	r2, [pc, #292]	; (80087ac <HAL_DMA_Abort_IT+0x29c>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d108      	bne.n	800869c <HAL_DMA_Abort_IT+0x18c>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f022 0201 	bic.w	r2, r2, #1
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	e147      	b.n	800892c <HAL_DMA_Abort_IT+0x41c>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f022 0201 	bic.w	r2, r2, #1
 80086aa:	601a      	str	r2, [r3, #0]
 80086ac:	e13e      	b.n	800892c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f022 020e 	bic.w	r2, r2, #14
 80086bc:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a2b      	ldr	r2, [pc, #172]	; (8008770 <HAL_DMA_Abort_IT+0x260>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d04a      	beq.n	800875e <HAL_DMA_Abort_IT+0x24e>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a29      	ldr	r2, [pc, #164]	; (8008774 <HAL_DMA_Abort_IT+0x264>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d045      	beq.n	800875e <HAL_DMA_Abort_IT+0x24e>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a28      	ldr	r2, [pc, #160]	; (8008778 <HAL_DMA_Abort_IT+0x268>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d040      	beq.n	800875e <HAL_DMA_Abort_IT+0x24e>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a26      	ldr	r2, [pc, #152]	; (800877c <HAL_DMA_Abort_IT+0x26c>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d03b      	beq.n	800875e <HAL_DMA_Abort_IT+0x24e>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a25      	ldr	r2, [pc, #148]	; (8008780 <HAL_DMA_Abort_IT+0x270>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d036      	beq.n	800875e <HAL_DMA_Abort_IT+0x24e>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a23      	ldr	r2, [pc, #140]	; (8008784 <HAL_DMA_Abort_IT+0x274>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d031      	beq.n	800875e <HAL_DMA_Abort_IT+0x24e>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a22      	ldr	r2, [pc, #136]	; (8008788 <HAL_DMA_Abort_IT+0x278>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d02c      	beq.n	800875e <HAL_DMA_Abort_IT+0x24e>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a20      	ldr	r2, [pc, #128]	; (800878c <HAL_DMA_Abort_IT+0x27c>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d027      	beq.n	800875e <HAL_DMA_Abort_IT+0x24e>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a1f      	ldr	r2, [pc, #124]	; (8008790 <HAL_DMA_Abort_IT+0x280>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d022      	beq.n	800875e <HAL_DMA_Abort_IT+0x24e>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a1d      	ldr	r2, [pc, #116]	; (8008794 <HAL_DMA_Abort_IT+0x284>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d01d      	beq.n	800875e <HAL_DMA_Abort_IT+0x24e>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a1c      	ldr	r2, [pc, #112]	; (8008798 <HAL_DMA_Abort_IT+0x288>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d018      	beq.n	800875e <HAL_DMA_Abort_IT+0x24e>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a1a      	ldr	r2, [pc, #104]	; (800879c <HAL_DMA_Abort_IT+0x28c>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d013      	beq.n	800875e <HAL_DMA_Abort_IT+0x24e>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a19      	ldr	r2, [pc, #100]	; (80087a0 <HAL_DMA_Abort_IT+0x290>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d00e      	beq.n	800875e <HAL_DMA_Abort_IT+0x24e>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a17      	ldr	r2, [pc, #92]	; (80087a4 <HAL_DMA_Abort_IT+0x294>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d009      	beq.n	800875e <HAL_DMA_Abort_IT+0x24e>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a16      	ldr	r2, [pc, #88]	; (80087a8 <HAL_DMA_Abort_IT+0x298>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d004      	beq.n	800875e <HAL_DMA_Abort_IT+0x24e>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a14      	ldr	r2, [pc, #80]	; (80087ac <HAL_DMA_Abort_IT+0x29c>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d128      	bne.n	80087b0 <HAL_DMA_Abort_IT+0x2a0>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f022 0201 	bic.w	r2, r2, #1
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	e027      	b.n	80087c0 <HAL_DMA_Abort_IT+0x2b0>
 8008770:	40020010 	.word	0x40020010
 8008774:	40020028 	.word	0x40020028
 8008778:	40020040 	.word	0x40020040
 800877c:	40020058 	.word	0x40020058
 8008780:	40020070 	.word	0x40020070
 8008784:	40020088 	.word	0x40020088
 8008788:	400200a0 	.word	0x400200a0
 800878c:	400200b8 	.word	0x400200b8
 8008790:	40020410 	.word	0x40020410
 8008794:	40020428 	.word	0x40020428
 8008798:	40020440 	.word	0x40020440
 800879c:	40020458 	.word	0x40020458
 80087a0:	40020470 	.word	0x40020470
 80087a4:	40020488 	.word	0x40020488
 80087a8:	400204a0 	.word	0x400204a0
 80087ac:	400204b8 	.word	0x400204b8
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f022 0201 	bic.w	r2, r2, #1
 80087be:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a5c      	ldr	r2, [pc, #368]	; (8008938 <HAL_DMA_Abort_IT+0x428>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d072      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a5b      	ldr	r2, [pc, #364]	; (800893c <HAL_DMA_Abort_IT+0x42c>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d06d      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a59      	ldr	r2, [pc, #356]	; (8008940 <HAL_DMA_Abort_IT+0x430>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d068      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a58      	ldr	r2, [pc, #352]	; (8008944 <HAL_DMA_Abort_IT+0x434>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d063      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a56      	ldr	r2, [pc, #344]	; (8008948 <HAL_DMA_Abort_IT+0x438>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d05e      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a55      	ldr	r2, [pc, #340]	; (800894c <HAL_DMA_Abort_IT+0x43c>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d059      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a53      	ldr	r2, [pc, #332]	; (8008950 <HAL_DMA_Abort_IT+0x440>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d054      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a52      	ldr	r2, [pc, #328]	; (8008954 <HAL_DMA_Abort_IT+0x444>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d04f      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a50      	ldr	r2, [pc, #320]	; (8008958 <HAL_DMA_Abort_IT+0x448>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d04a      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a4f      	ldr	r2, [pc, #316]	; (800895c <HAL_DMA_Abort_IT+0x44c>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d045      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a4d      	ldr	r2, [pc, #308]	; (8008960 <HAL_DMA_Abort_IT+0x450>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d040      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a4c      	ldr	r2, [pc, #304]	; (8008964 <HAL_DMA_Abort_IT+0x454>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d03b      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a4a      	ldr	r2, [pc, #296]	; (8008968 <HAL_DMA_Abort_IT+0x458>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d036      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a49      	ldr	r2, [pc, #292]	; (800896c <HAL_DMA_Abort_IT+0x45c>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d031      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a47      	ldr	r2, [pc, #284]	; (8008970 <HAL_DMA_Abort_IT+0x460>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d02c      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a46      	ldr	r2, [pc, #280]	; (8008974 <HAL_DMA_Abort_IT+0x464>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d027      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a44      	ldr	r2, [pc, #272]	; (8008978 <HAL_DMA_Abort_IT+0x468>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d022      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a43      	ldr	r2, [pc, #268]	; (800897c <HAL_DMA_Abort_IT+0x46c>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d01d      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a41      	ldr	r2, [pc, #260]	; (8008980 <HAL_DMA_Abort_IT+0x470>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d018      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a40      	ldr	r2, [pc, #256]	; (8008984 <HAL_DMA_Abort_IT+0x474>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d013      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a3e      	ldr	r2, [pc, #248]	; (8008988 <HAL_DMA_Abort_IT+0x478>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d00e      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a3d      	ldr	r2, [pc, #244]	; (800898c <HAL_DMA_Abort_IT+0x47c>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d009      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a3b      	ldr	r2, [pc, #236]	; (8008990 <HAL_DMA_Abort_IT+0x480>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d004      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x3a0>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a3a      	ldr	r2, [pc, #232]	; (8008994 <HAL_DMA_Abort_IT+0x484>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d101      	bne.n	80088b4 <HAL_DMA_Abort_IT+0x3a4>
 80088b0:	2301      	movs	r3, #1
 80088b2:	e000      	b.n	80088b6 <HAL_DMA_Abort_IT+0x3a6>
 80088b4:	2300      	movs	r3, #0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d028      	beq.n	800890c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088c8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088d4:	f003 031f 	and.w	r3, r3, #31
 80088d8:	2201      	movs	r2, #1
 80088da:	409a      	lsls	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80088e8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00c      	beq.n	800890c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008900:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800890a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008920:	2b00      	cmp	r3, #0
 8008922:	d003      	beq.n	800892c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	40020010 	.word	0x40020010
 800893c:	40020028 	.word	0x40020028
 8008940:	40020040 	.word	0x40020040
 8008944:	40020058 	.word	0x40020058
 8008948:	40020070 	.word	0x40020070
 800894c:	40020088 	.word	0x40020088
 8008950:	400200a0 	.word	0x400200a0
 8008954:	400200b8 	.word	0x400200b8
 8008958:	40020410 	.word	0x40020410
 800895c:	40020428 	.word	0x40020428
 8008960:	40020440 	.word	0x40020440
 8008964:	40020458 	.word	0x40020458
 8008968:	40020470 	.word	0x40020470
 800896c:	40020488 	.word	0x40020488
 8008970:	400204a0 	.word	0x400204a0
 8008974:	400204b8 	.word	0x400204b8
 8008978:	58025408 	.word	0x58025408
 800897c:	5802541c 	.word	0x5802541c
 8008980:	58025430 	.word	0x58025430
 8008984:	58025444 	.word	0x58025444
 8008988:	58025458 	.word	0x58025458
 800898c:	5802546c 	.word	0x5802546c
 8008990:	58025480 	.word	0x58025480
 8008994:	58025494 	.word	0x58025494

08008998 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008998:	b480      	push	{r7}
 800899a:	b089      	sub	sp, #36	; 0x24
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80089a6:	4b89      	ldr	r3, [pc, #548]	; (8008bcc <HAL_GPIO_Init+0x234>)
 80089a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80089aa:	e194      	b.n	8008cd6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	2101      	movs	r1, #1
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	fa01 f303 	lsl.w	r3, r1, r3
 80089b8:	4013      	ands	r3, r2
 80089ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f000 8186 	beq.w	8008cd0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d00b      	beq.n	80089e4 <HAL_GPIO_Init+0x4c>
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d007      	beq.n	80089e4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80089d8:	2b11      	cmp	r3, #17
 80089da:	d003      	beq.n	80089e4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	2b12      	cmp	r3, #18
 80089e2:	d130      	bne.n	8008a46 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	005b      	lsls	r3, r3, #1
 80089ee:	2203      	movs	r2, #3
 80089f0:	fa02 f303 	lsl.w	r3, r2, r3
 80089f4:	43db      	mvns	r3, r3
 80089f6:	69ba      	ldr	r2, [r7, #24]
 80089f8:	4013      	ands	r3, r2
 80089fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	fa02 f303 	lsl.w	r3, r2, r3
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a22:	43db      	mvns	r3, r3
 8008a24:	69ba      	ldr	r2, [r7, #24]
 8008a26:	4013      	ands	r3, r2
 8008a28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	091b      	lsrs	r3, r3, #4
 8008a30:	f003 0201 	and.w	r2, r3, #1
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	fa02 f303 	lsl.w	r3, r2, r3
 8008a3a:	69ba      	ldr	r2, [r7, #24]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	69ba      	ldr	r2, [r7, #24]
 8008a44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	005b      	lsls	r3, r3, #1
 8008a50:	2203      	movs	r2, #3
 8008a52:	fa02 f303 	lsl.w	r3, r2, r3
 8008a56:	43db      	mvns	r3, r3
 8008a58:	69ba      	ldr	r2, [r7, #24]
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	689a      	ldr	r2, [r3, #8]
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	005b      	lsls	r3, r3, #1
 8008a66:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d003      	beq.n	8008a86 <HAL_GPIO_Init+0xee>
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	2b12      	cmp	r3, #18
 8008a84:	d123      	bne.n	8008ace <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	08da      	lsrs	r2, r3, #3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3208      	adds	r2, #8
 8008a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	f003 0307 	and.w	r3, r3, #7
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	220f      	movs	r2, #15
 8008a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa2:	43db      	mvns	r3, r3
 8008aa4:	69ba      	ldr	r2, [r7, #24]
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	691a      	ldr	r2, [r3, #16]
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	f003 0307 	and.w	r3, r3, #7
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aba:	69ba      	ldr	r2, [r7, #24]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	08da      	lsrs	r2, r3, #3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	3208      	adds	r2, #8
 8008ac8:	69b9      	ldr	r1, [r7, #24]
 8008aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	2203      	movs	r2, #3
 8008ada:	fa02 f303 	lsl.w	r3, r2, r3
 8008ade:	43db      	mvns	r3, r3
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	f003 0203 	and.w	r2, r3, #3
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	005b      	lsls	r3, r3, #1
 8008af2:	fa02 f303 	lsl.w	r3, r2, r3
 8008af6:	69ba      	ldr	r2, [r7, #24]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	69ba      	ldr	r2, [r7, #24]
 8008b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 80e0 	beq.w	8008cd0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b10:	4b2f      	ldr	r3, [pc, #188]	; (8008bd0 <HAL_GPIO_Init+0x238>)
 8008b12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b16:	4a2e      	ldr	r2, [pc, #184]	; (8008bd0 <HAL_GPIO_Init+0x238>)
 8008b18:	f043 0302 	orr.w	r3, r3, #2
 8008b1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008b20:	4b2b      	ldr	r3, [pc, #172]	; (8008bd0 <HAL_GPIO_Init+0x238>)
 8008b22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b26:	f003 0302 	and.w	r3, r3, #2
 8008b2a:	60fb      	str	r3, [r7, #12]
 8008b2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b2e:	4a29      	ldr	r2, [pc, #164]	; (8008bd4 <HAL_GPIO_Init+0x23c>)
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	089b      	lsrs	r3, r3, #2
 8008b34:	3302      	adds	r3, #2
 8008b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	f003 0303 	and.w	r3, r3, #3
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	220f      	movs	r2, #15
 8008b46:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4a:	43db      	mvns	r3, r3
 8008b4c:	69ba      	ldr	r2, [r7, #24]
 8008b4e:	4013      	ands	r3, r2
 8008b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a20      	ldr	r2, [pc, #128]	; (8008bd8 <HAL_GPIO_Init+0x240>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d052      	beq.n	8008c00 <HAL_GPIO_Init+0x268>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a1f      	ldr	r2, [pc, #124]	; (8008bdc <HAL_GPIO_Init+0x244>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d031      	beq.n	8008bc6 <HAL_GPIO_Init+0x22e>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a1e      	ldr	r2, [pc, #120]	; (8008be0 <HAL_GPIO_Init+0x248>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d02b      	beq.n	8008bc2 <HAL_GPIO_Init+0x22a>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a1d      	ldr	r2, [pc, #116]	; (8008be4 <HAL_GPIO_Init+0x24c>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d025      	beq.n	8008bbe <HAL_GPIO_Init+0x226>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a1c      	ldr	r2, [pc, #112]	; (8008be8 <HAL_GPIO_Init+0x250>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d01f      	beq.n	8008bba <HAL_GPIO_Init+0x222>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a1b      	ldr	r2, [pc, #108]	; (8008bec <HAL_GPIO_Init+0x254>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d019      	beq.n	8008bb6 <HAL_GPIO_Init+0x21e>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a1a      	ldr	r2, [pc, #104]	; (8008bf0 <HAL_GPIO_Init+0x258>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d013      	beq.n	8008bb2 <HAL_GPIO_Init+0x21a>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a19      	ldr	r2, [pc, #100]	; (8008bf4 <HAL_GPIO_Init+0x25c>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d00d      	beq.n	8008bae <HAL_GPIO_Init+0x216>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a18      	ldr	r2, [pc, #96]	; (8008bf8 <HAL_GPIO_Init+0x260>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d007      	beq.n	8008baa <HAL_GPIO_Init+0x212>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a17      	ldr	r2, [pc, #92]	; (8008bfc <HAL_GPIO_Init+0x264>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d101      	bne.n	8008ba6 <HAL_GPIO_Init+0x20e>
 8008ba2:	2309      	movs	r3, #9
 8008ba4:	e02d      	b.n	8008c02 <HAL_GPIO_Init+0x26a>
 8008ba6:	230a      	movs	r3, #10
 8008ba8:	e02b      	b.n	8008c02 <HAL_GPIO_Init+0x26a>
 8008baa:	2308      	movs	r3, #8
 8008bac:	e029      	b.n	8008c02 <HAL_GPIO_Init+0x26a>
 8008bae:	2307      	movs	r3, #7
 8008bb0:	e027      	b.n	8008c02 <HAL_GPIO_Init+0x26a>
 8008bb2:	2306      	movs	r3, #6
 8008bb4:	e025      	b.n	8008c02 <HAL_GPIO_Init+0x26a>
 8008bb6:	2305      	movs	r3, #5
 8008bb8:	e023      	b.n	8008c02 <HAL_GPIO_Init+0x26a>
 8008bba:	2304      	movs	r3, #4
 8008bbc:	e021      	b.n	8008c02 <HAL_GPIO_Init+0x26a>
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e01f      	b.n	8008c02 <HAL_GPIO_Init+0x26a>
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	e01d      	b.n	8008c02 <HAL_GPIO_Init+0x26a>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e01b      	b.n	8008c02 <HAL_GPIO_Init+0x26a>
 8008bca:	bf00      	nop
 8008bcc:	58000080 	.word	0x58000080
 8008bd0:	58024400 	.word	0x58024400
 8008bd4:	58000400 	.word	0x58000400
 8008bd8:	58020000 	.word	0x58020000
 8008bdc:	58020400 	.word	0x58020400
 8008be0:	58020800 	.word	0x58020800
 8008be4:	58020c00 	.word	0x58020c00
 8008be8:	58021000 	.word	0x58021000
 8008bec:	58021400 	.word	0x58021400
 8008bf0:	58021800 	.word	0x58021800
 8008bf4:	58021c00 	.word	0x58021c00
 8008bf8:	58022000 	.word	0x58022000
 8008bfc:	58022400 	.word	0x58022400
 8008c00:	2300      	movs	r3, #0
 8008c02:	69fa      	ldr	r2, [r7, #28]
 8008c04:	f002 0203 	and.w	r2, r2, #3
 8008c08:	0092      	lsls	r2, r2, #2
 8008c0a:	4093      	lsls	r3, r2
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c12:	4938      	ldr	r1, [pc, #224]	; (8008cf4 <HAL_GPIO_Init+0x35c>)
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	089b      	lsrs	r3, r3, #2
 8008c18:	3302      	adds	r3, #2
 8008c1a:	69ba      	ldr	r2, [r7, #24]
 8008c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	43db      	mvns	r3, r3
 8008c2a:	69ba      	ldr	r2, [r7, #24]
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d003      	beq.n	8008c44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008c3c:	69ba      	ldr	r2, [r7, #24]
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	69ba      	ldr	r2, [r7, #24]
 8008c48:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	43db      	mvns	r3, r3
 8008c54:	69ba      	ldr	r2, [r7, #24]
 8008c56:	4013      	ands	r3, r2
 8008c58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d003      	beq.n	8008c6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008c66:	69ba      	ldr	r2, [r7, #24]
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	43db      	mvns	r3, r3
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	4013      	ands	r3, r2
 8008c84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d003      	beq.n	8008c9a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8008c92:	69ba      	ldr	r2, [r7, #24]
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008c9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	43db      	mvns	r3, r3
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d003      	beq.n	8008cc8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8008cc0:	69ba      	ldr	r2, [r7, #24]
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008cc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f47f ae63 	bne.w	80089ac <HAL_GPIO_Init+0x14>
  }
}
 8008ce6:	bf00      	nop
 8008ce8:	3724      	adds	r7, #36	; 0x24
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	58000400 	.word	0x58000400

08008cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	807b      	strh	r3, [r7, #2]
 8008d04:	4613      	mov	r3, r2
 8008d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d08:	787b      	ldrb	r3, [r7, #1]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d0e:	887a      	ldrh	r2, [r7, #2]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008d14:	e003      	b.n	8008d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008d16:	887b      	ldrh	r3, [r7, #2]
 8008d18:	041a      	lsls	r2, r3, #16
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	619a      	str	r2, [r3, #24]
}
 8008d1e:	bf00      	nop
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
	...

08008d2c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8008d34:	4a08      	ldr	r2, [pc, #32]	; (8008d58 <HAL_HSEM_FastTake+0x2c>)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3320      	adds	r3, #32
 8008d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d3e:	4a07      	ldr	r2, [pc, #28]	; (8008d5c <HAL_HSEM_FastTake+0x30>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d101      	bne.n	8008d48 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	e000      	b.n	8008d4a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	370c      	adds	r7, #12
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	58026400 	.word	0x58026400
 8008d5c:	80000300 	.word	0x80000300

08008d60 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8008d6a:	4906      	ldr	r1, [pc, #24]	; (8008d84 <HAL_HSEM_Release+0x24>)
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr
 8008d84:	58026400 	.word	0x58026400

08008d88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008d90:	4b29      	ldr	r3, [pc, #164]	; (8008e38 <HAL_PWREx_ConfigSupply+0xb0>)
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	f003 0307 	and.w	r3, r3, #7
 8008d98:	2b06      	cmp	r3, #6
 8008d9a:	d00a      	beq.n	8008db2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d9c:	4b26      	ldr	r3, [pc, #152]	; (8008e38 <HAL_PWREx_ConfigSupply+0xb0>)
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d001      	beq.n	8008dae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e040      	b.n	8008e30 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	e03e      	b.n	8008e30 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008db2:	4b21      	ldr	r3, [pc, #132]	; (8008e38 <HAL_PWREx_ConfigSupply+0xb0>)
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8008dba:	491f      	ldr	r1, [pc, #124]	; (8008e38 <HAL_PWREx_ConfigSupply+0xb0>)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008dc2:	f7ff fa5b 	bl	800827c <HAL_GetTick>
 8008dc6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008dc8:	e009      	b.n	8008dde <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008dca:	f7ff fa57 	bl	800827c <HAL_GetTick>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dd8:	d901      	bls.n	8008dde <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e028      	b.n	8008e30 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008dde:	4b16      	ldr	r3, [pc, #88]	; (8008e38 <HAL_PWREx_ConfigSupply+0xb0>)
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dea:	d1ee      	bne.n	8008dca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b1e      	cmp	r3, #30
 8008df0:	d008      	beq.n	8008e04 <HAL_PWREx_ConfigSupply+0x7c>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b2e      	cmp	r3, #46	; 0x2e
 8008df6:	d005      	beq.n	8008e04 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2b1d      	cmp	r3, #29
 8008dfc:	d002      	beq.n	8008e04 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2b2d      	cmp	r3, #45	; 0x2d
 8008e02:	d114      	bne.n	8008e2e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8008e04:	f7ff fa3a 	bl	800827c <HAL_GetTick>
 8008e08:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008e0a:	e009      	b.n	8008e20 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008e0c:	f7ff fa36 	bl	800827c <HAL_GetTick>
 8008e10:	4602      	mov	r2, r0
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e1a:	d901      	bls.n	8008e20 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e007      	b.n	8008e30 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008e20:	4b05      	ldr	r3, [pc, #20]	; (8008e38 <HAL_PWREx_ConfigSupply+0xb0>)
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e2c:	d1ee      	bne.n	8008e0c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	58024800 	.word	0x58024800

08008e3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b08c      	sub	sp, #48	; 0x30
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d101      	bne.n	8008e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e3ff      	b.n	800964e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0301 	and.w	r3, r3, #1
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f000 8087 	beq.w	8008f6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e5c:	4b99      	ldr	r3, [pc, #612]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e66:	4b97      	ldr	r3, [pc, #604]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6e:	2b10      	cmp	r3, #16
 8008e70:	d007      	beq.n	8008e82 <HAL_RCC_OscConfig+0x46>
 8008e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e74:	2b18      	cmp	r3, #24
 8008e76:	d110      	bne.n	8008e9a <HAL_RCC_OscConfig+0x5e>
 8008e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7a:	f003 0303 	and.w	r3, r3, #3
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d10b      	bne.n	8008e9a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e82:	4b90      	ldr	r3, [pc, #576]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d06c      	beq.n	8008f68 <HAL_RCC_OscConfig+0x12c>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d168      	bne.n	8008f68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e3d9      	b.n	800964e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ea2:	d106      	bne.n	8008eb2 <HAL_RCC_OscConfig+0x76>
 8008ea4:	4b87      	ldr	r3, [pc, #540]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a86      	ldr	r2, [pc, #536]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	e02e      	b.n	8008f10 <HAL_RCC_OscConfig+0xd4>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10c      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x98>
 8008eba:	4b82      	ldr	r3, [pc, #520]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a81      	ldr	r2, [pc, #516]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ec4:	6013      	str	r3, [r2, #0]
 8008ec6:	4b7f      	ldr	r3, [pc, #508]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a7e      	ldr	r2, [pc, #504]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008ecc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ed0:	6013      	str	r3, [r2, #0]
 8008ed2:	e01d      	b.n	8008f10 <HAL_RCC_OscConfig+0xd4>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008edc:	d10c      	bne.n	8008ef8 <HAL_RCC_OscConfig+0xbc>
 8008ede:	4b79      	ldr	r3, [pc, #484]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a78      	ldr	r2, [pc, #480]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ee8:	6013      	str	r3, [r2, #0]
 8008eea:	4b76      	ldr	r3, [pc, #472]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a75      	ldr	r2, [pc, #468]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ef4:	6013      	str	r3, [r2, #0]
 8008ef6:	e00b      	b.n	8008f10 <HAL_RCC_OscConfig+0xd4>
 8008ef8:	4b72      	ldr	r3, [pc, #456]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a71      	ldr	r2, [pc, #452]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f02:	6013      	str	r3, [r2, #0]
 8008f04:	4b6f      	ldr	r3, [pc, #444]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a6e      	ldr	r2, [pc, #440]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d013      	beq.n	8008f40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f18:	f7ff f9b0 	bl	800827c <HAL_GetTick>
 8008f1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f1e:	e008      	b.n	8008f32 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f20:	f7ff f9ac 	bl	800827c <HAL_GetTick>
 8008f24:	4602      	mov	r2, r0
 8008f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	2b64      	cmp	r3, #100	; 0x64
 8008f2c:	d901      	bls.n	8008f32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e38d      	b.n	800964e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f32:	4b64      	ldr	r3, [pc, #400]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d0f0      	beq.n	8008f20 <HAL_RCC_OscConfig+0xe4>
 8008f3e:	e014      	b.n	8008f6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f40:	f7ff f99c 	bl	800827c <HAL_GetTick>
 8008f44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f46:	e008      	b.n	8008f5a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f48:	f7ff f998 	bl	800827c <HAL_GetTick>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	2b64      	cmp	r3, #100	; 0x64
 8008f54:	d901      	bls.n	8008f5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e379      	b.n	800964e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f5a:	4b5a      	ldr	r3, [pc, #360]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1f0      	bne.n	8008f48 <HAL_RCC_OscConfig+0x10c>
 8008f66:	e000      	b.n	8008f6a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0302 	and.w	r3, r3, #2
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f000 80ae 	beq.w	80090d4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f78:	4b52      	ldr	r3, [pc, #328]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f82:	4b50      	ldr	r3, [pc, #320]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f86:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d007      	beq.n	8008f9e <HAL_RCC_OscConfig+0x162>
 8008f8e:	6a3b      	ldr	r3, [r7, #32]
 8008f90:	2b18      	cmp	r3, #24
 8008f92:	d13a      	bne.n	800900a <HAL_RCC_OscConfig+0x1ce>
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	f003 0303 	and.w	r3, r3, #3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d135      	bne.n	800900a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f9e:	4b49      	ldr	r3, [pc, #292]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 0304 	and.w	r3, r3, #4
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d005      	beq.n	8008fb6 <HAL_RCC_OscConfig+0x17a>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d101      	bne.n	8008fb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e34b      	b.n	800964e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fb6:	f7ff f98f 	bl	80082d8 <HAL_GetREVID>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	f241 0303 	movw	r3, #4099	; 0x1003
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d817      	bhi.n	8008ff4 <HAL_RCC_OscConfig+0x1b8>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	2b40      	cmp	r3, #64	; 0x40
 8008fca:	d108      	bne.n	8008fde <HAL_RCC_OscConfig+0x1a2>
 8008fcc:	4b3d      	ldr	r3, [pc, #244]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008fd4:	4a3b      	ldr	r2, [pc, #236]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fda:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fdc:	e07a      	b.n	80090d4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fde:	4b39      	ldr	r3, [pc, #228]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	031b      	lsls	r3, r3, #12
 8008fec:	4935      	ldr	r1, [pc, #212]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ff2:	e06f      	b.n	80090d4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ff4:	4b33      	ldr	r3, [pc, #204]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	061b      	lsls	r3, r3, #24
 8009002:	4930      	ldr	r1, [pc, #192]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8009004:	4313      	orrs	r3, r2
 8009006:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009008:	e064      	b.n	80090d4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d045      	beq.n	800909e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009012:	4b2c      	ldr	r3, [pc, #176]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f023 0219 	bic.w	r2, r3, #25
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	4929      	ldr	r1, [pc, #164]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8009020:	4313      	orrs	r3, r2
 8009022:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009024:	f7ff f92a 	bl	800827c <HAL_GetTick>
 8009028:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800902a:	e008      	b.n	800903e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800902c:	f7ff f926 	bl	800827c <HAL_GetTick>
 8009030:	4602      	mov	r2, r0
 8009032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	2b02      	cmp	r3, #2
 8009038:	d901      	bls.n	800903e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e307      	b.n	800964e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800903e:	4b21      	ldr	r3, [pc, #132]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 0304 	and.w	r3, r3, #4
 8009046:	2b00      	cmp	r3, #0
 8009048:	d0f0      	beq.n	800902c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800904a:	f7ff f945 	bl	80082d8 <HAL_GetREVID>
 800904e:	4602      	mov	r2, r0
 8009050:	f241 0303 	movw	r3, #4099	; 0x1003
 8009054:	429a      	cmp	r2, r3
 8009056:	d817      	bhi.n	8009088 <HAL_RCC_OscConfig+0x24c>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	2b40      	cmp	r3, #64	; 0x40
 800905e:	d108      	bne.n	8009072 <HAL_RCC_OscConfig+0x236>
 8009060:	4b18      	ldr	r3, [pc, #96]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009068:	4a16      	ldr	r2, [pc, #88]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 800906a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800906e:	6053      	str	r3, [r2, #4]
 8009070:	e030      	b.n	80090d4 <HAL_RCC_OscConfig+0x298>
 8009072:	4b14      	ldr	r3, [pc, #80]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	031b      	lsls	r3, r3, #12
 8009080:	4910      	ldr	r1, [pc, #64]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8009082:	4313      	orrs	r3, r2
 8009084:	604b      	str	r3, [r1, #4]
 8009086:	e025      	b.n	80090d4 <HAL_RCC_OscConfig+0x298>
 8009088:	4b0e      	ldr	r3, [pc, #56]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	061b      	lsls	r3, r3, #24
 8009096:	490b      	ldr	r1, [pc, #44]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 8009098:	4313      	orrs	r3, r2
 800909a:	604b      	str	r3, [r1, #4]
 800909c:	e01a      	b.n	80090d4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800909e:	4b09      	ldr	r3, [pc, #36]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a08      	ldr	r2, [pc, #32]	; (80090c4 <HAL_RCC_OscConfig+0x288>)
 80090a4:	f023 0301 	bic.w	r3, r3, #1
 80090a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090aa:	f7ff f8e7 	bl	800827c <HAL_GetTick>
 80090ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80090b0:	e00a      	b.n	80090c8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090b2:	f7ff f8e3 	bl	800827c <HAL_GetTick>
 80090b6:	4602      	mov	r2, r0
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d903      	bls.n	80090c8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e2c4      	b.n	800964e <HAL_RCC_OscConfig+0x812>
 80090c4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80090c8:	4ba4      	ldr	r3, [pc, #656]	; (800935c <HAL_RCC_OscConfig+0x520>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0304 	and.w	r3, r3, #4
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1ee      	bne.n	80090b2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0310 	and.w	r3, r3, #16
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f000 80a9 	beq.w	8009234 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090e2:	4b9e      	ldr	r3, [pc, #632]	; (800935c <HAL_RCC_OscConfig+0x520>)
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80090ec:	4b9b      	ldr	r3, [pc, #620]	; (800935c <HAL_RCC_OscConfig+0x520>)
 80090ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	2b08      	cmp	r3, #8
 80090f6:	d007      	beq.n	8009108 <HAL_RCC_OscConfig+0x2cc>
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	2b18      	cmp	r3, #24
 80090fc:	d13a      	bne.n	8009174 <HAL_RCC_OscConfig+0x338>
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f003 0303 	and.w	r3, r3, #3
 8009104:	2b01      	cmp	r3, #1
 8009106:	d135      	bne.n	8009174 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009108:	4b94      	ldr	r3, [pc, #592]	; (800935c <HAL_RCC_OscConfig+0x520>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009110:	2b00      	cmp	r3, #0
 8009112:	d005      	beq.n	8009120 <HAL_RCC_OscConfig+0x2e4>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	69db      	ldr	r3, [r3, #28]
 8009118:	2b80      	cmp	r3, #128	; 0x80
 800911a:	d001      	beq.n	8009120 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e296      	b.n	800964e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009120:	f7ff f8da 	bl	80082d8 <HAL_GetREVID>
 8009124:	4602      	mov	r2, r0
 8009126:	f241 0303 	movw	r3, #4099	; 0x1003
 800912a:	429a      	cmp	r2, r3
 800912c:	d817      	bhi.n	800915e <HAL_RCC_OscConfig+0x322>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a1b      	ldr	r3, [r3, #32]
 8009132:	2b20      	cmp	r3, #32
 8009134:	d108      	bne.n	8009148 <HAL_RCC_OscConfig+0x30c>
 8009136:	4b89      	ldr	r3, [pc, #548]	; (800935c <HAL_RCC_OscConfig+0x520>)
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800913e:	4a87      	ldr	r2, [pc, #540]	; (800935c <HAL_RCC_OscConfig+0x520>)
 8009140:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009144:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009146:	e075      	b.n	8009234 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009148:	4b84      	ldr	r3, [pc, #528]	; (800935c <HAL_RCC_OscConfig+0x520>)
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a1b      	ldr	r3, [r3, #32]
 8009154:	069b      	lsls	r3, r3, #26
 8009156:	4981      	ldr	r1, [pc, #516]	; (800935c <HAL_RCC_OscConfig+0x520>)
 8009158:	4313      	orrs	r3, r2
 800915a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800915c:	e06a      	b.n	8009234 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800915e:	4b7f      	ldr	r3, [pc, #508]	; (800935c <HAL_RCC_OscConfig+0x520>)
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a1b      	ldr	r3, [r3, #32]
 800916a:	061b      	lsls	r3, r3, #24
 800916c:	497b      	ldr	r1, [pc, #492]	; (800935c <HAL_RCC_OscConfig+0x520>)
 800916e:	4313      	orrs	r3, r2
 8009170:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009172:	e05f      	b.n	8009234 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	69db      	ldr	r3, [r3, #28]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d042      	beq.n	8009202 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800917c:	4b77      	ldr	r3, [pc, #476]	; (800935c <HAL_RCC_OscConfig+0x520>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a76      	ldr	r2, [pc, #472]	; (800935c <HAL_RCC_OscConfig+0x520>)
 8009182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009188:	f7ff f878 	bl	800827c <HAL_GetTick>
 800918c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800918e:	e008      	b.n	80091a2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009190:	f7ff f874 	bl	800827c <HAL_GetTick>
 8009194:	4602      	mov	r2, r0
 8009196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	2b02      	cmp	r3, #2
 800919c:	d901      	bls.n	80091a2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	e255      	b.n	800964e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80091a2:	4b6e      	ldr	r3, [pc, #440]	; (800935c <HAL_RCC_OscConfig+0x520>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0f0      	beq.n	8009190 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091ae:	f7ff f893 	bl	80082d8 <HAL_GetREVID>
 80091b2:	4602      	mov	r2, r0
 80091b4:	f241 0303 	movw	r3, #4099	; 0x1003
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d817      	bhi.n	80091ec <HAL_RCC_OscConfig+0x3b0>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a1b      	ldr	r3, [r3, #32]
 80091c0:	2b20      	cmp	r3, #32
 80091c2:	d108      	bne.n	80091d6 <HAL_RCC_OscConfig+0x39a>
 80091c4:	4b65      	ldr	r3, [pc, #404]	; (800935c <HAL_RCC_OscConfig+0x520>)
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80091cc:	4a63      	ldr	r2, [pc, #396]	; (800935c <HAL_RCC_OscConfig+0x520>)
 80091ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091d2:	6053      	str	r3, [r2, #4]
 80091d4:	e02e      	b.n	8009234 <HAL_RCC_OscConfig+0x3f8>
 80091d6:	4b61      	ldr	r3, [pc, #388]	; (800935c <HAL_RCC_OscConfig+0x520>)
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a1b      	ldr	r3, [r3, #32]
 80091e2:	069b      	lsls	r3, r3, #26
 80091e4:	495d      	ldr	r1, [pc, #372]	; (800935c <HAL_RCC_OscConfig+0x520>)
 80091e6:	4313      	orrs	r3, r2
 80091e8:	604b      	str	r3, [r1, #4]
 80091ea:	e023      	b.n	8009234 <HAL_RCC_OscConfig+0x3f8>
 80091ec:	4b5b      	ldr	r3, [pc, #364]	; (800935c <HAL_RCC_OscConfig+0x520>)
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a1b      	ldr	r3, [r3, #32]
 80091f8:	061b      	lsls	r3, r3, #24
 80091fa:	4958      	ldr	r1, [pc, #352]	; (800935c <HAL_RCC_OscConfig+0x520>)
 80091fc:	4313      	orrs	r3, r2
 80091fe:	60cb      	str	r3, [r1, #12]
 8009200:	e018      	b.n	8009234 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009202:	4b56      	ldr	r3, [pc, #344]	; (800935c <HAL_RCC_OscConfig+0x520>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a55      	ldr	r2, [pc, #340]	; (800935c <HAL_RCC_OscConfig+0x520>)
 8009208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800920c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800920e:	f7ff f835 	bl	800827c <HAL_GetTick>
 8009212:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009214:	e008      	b.n	8009228 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009216:	f7ff f831 	bl	800827c <HAL_GetTick>
 800921a:	4602      	mov	r2, r0
 800921c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	2b02      	cmp	r3, #2
 8009222:	d901      	bls.n	8009228 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8009224:	2303      	movs	r3, #3
 8009226:	e212      	b.n	800964e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009228:	4b4c      	ldr	r3, [pc, #304]	; (800935c <HAL_RCC_OscConfig+0x520>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1f0      	bne.n	8009216 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 0308 	and.w	r3, r3, #8
 800923c:	2b00      	cmp	r3, #0
 800923e:	d036      	beq.n	80092ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	695b      	ldr	r3, [r3, #20]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d019      	beq.n	800927c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009248:	4b44      	ldr	r3, [pc, #272]	; (800935c <HAL_RCC_OscConfig+0x520>)
 800924a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800924c:	4a43      	ldr	r2, [pc, #268]	; (800935c <HAL_RCC_OscConfig+0x520>)
 800924e:	f043 0301 	orr.w	r3, r3, #1
 8009252:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009254:	f7ff f812 	bl	800827c <HAL_GetTick>
 8009258:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800925a:	e008      	b.n	800926e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800925c:	f7ff f80e 	bl	800827c <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	2b02      	cmp	r3, #2
 8009268:	d901      	bls.n	800926e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e1ef      	b.n	800964e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800926e:	4b3b      	ldr	r3, [pc, #236]	; (800935c <HAL_RCC_OscConfig+0x520>)
 8009270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009272:	f003 0302 	and.w	r3, r3, #2
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0f0      	beq.n	800925c <HAL_RCC_OscConfig+0x420>
 800927a:	e018      	b.n	80092ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800927c:	4b37      	ldr	r3, [pc, #220]	; (800935c <HAL_RCC_OscConfig+0x520>)
 800927e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009280:	4a36      	ldr	r2, [pc, #216]	; (800935c <HAL_RCC_OscConfig+0x520>)
 8009282:	f023 0301 	bic.w	r3, r3, #1
 8009286:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009288:	f7fe fff8 	bl	800827c <HAL_GetTick>
 800928c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800928e:	e008      	b.n	80092a2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009290:	f7fe fff4 	bl	800827c <HAL_GetTick>
 8009294:	4602      	mov	r2, r0
 8009296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	2b02      	cmp	r3, #2
 800929c:	d901      	bls.n	80092a2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800929e:	2303      	movs	r3, #3
 80092a0:	e1d5      	b.n	800964e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80092a2:	4b2e      	ldr	r3, [pc, #184]	; (800935c <HAL_RCC_OscConfig+0x520>)
 80092a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092a6:	f003 0302 	and.w	r3, r3, #2
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1f0      	bne.n	8009290 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 0320 	and.w	r3, r3, #32
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d036      	beq.n	8009328 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	699b      	ldr	r3, [r3, #24]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d019      	beq.n	80092f6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80092c2:	4b26      	ldr	r3, [pc, #152]	; (800935c <HAL_RCC_OscConfig+0x520>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a25      	ldr	r2, [pc, #148]	; (800935c <HAL_RCC_OscConfig+0x520>)
 80092c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80092cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80092ce:	f7fe ffd5 	bl	800827c <HAL_GetTick>
 80092d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80092d4:	e008      	b.n	80092e8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80092d6:	f7fe ffd1 	bl	800827c <HAL_GetTick>
 80092da:	4602      	mov	r2, r0
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d901      	bls.n	80092e8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e1b2      	b.n	800964e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80092e8:	4b1c      	ldr	r3, [pc, #112]	; (800935c <HAL_RCC_OscConfig+0x520>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d0f0      	beq.n	80092d6 <HAL_RCC_OscConfig+0x49a>
 80092f4:	e018      	b.n	8009328 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80092f6:	4b19      	ldr	r3, [pc, #100]	; (800935c <HAL_RCC_OscConfig+0x520>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a18      	ldr	r2, [pc, #96]	; (800935c <HAL_RCC_OscConfig+0x520>)
 80092fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009300:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009302:	f7fe ffbb 	bl	800827c <HAL_GetTick>
 8009306:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009308:	e008      	b.n	800931c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800930a:	f7fe ffb7 	bl	800827c <HAL_GetTick>
 800930e:	4602      	mov	r2, r0
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	1ad3      	subs	r3, r2, r3
 8009314:	2b02      	cmp	r3, #2
 8009316:	d901      	bls.n	800931c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8009318:	2303      	movs	r3, #3
 800931a:	e198      	b.n	800964e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800931c:	4b0f      	ldr	r3, [pc, #60]	; (800935c <HAL_RCC_OscConfig+0x520>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1f0      	bne.n	800930a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0304 	and.w	r3, r3, #4
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 8085 	beq.w	8009440 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009336:	4b0a      	ldr	r3, [pc, #40]	; (8009360 <HAL_RCC_OscConfig+0x524>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a09      	ldr	r2, [pc, #36]	; (8009360 <HAL_RCC_OscConfig+0x524>)
 800933c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009340:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009342:	f7fe ff9b 	bl	800827c <HAL_GetTick>
 8009346:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009348:	e00c      	b.n	8009364 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800934a:	f7fe ff97 	bl	800827c <HAL_GetTick>
 800934e:	4602      	mov	r2, r0
 8009350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	2b64      	cmp	r3, #100	; 0x64
 8009356:	d905      	bls.n	8009364 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8009358:	2303      	movs	r3, #3
 800935a:	e178      	b.n	800964e <HAL_RCC_OscConfig+0x812>
 800935c:	58024400 	.word	0x58024400
 8009360:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009364:	4b96      	ldr	r3, [pc, #600]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800936c:	2b00      	cmp	r3, #0
 800936e:	d0ec      	beq.n	800934a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d106      	bne.n	8009386 <HAL_RCC_OscConfig+0x54a>
 8009378:	4b92      	ldr	r3, [pc, #584]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 800937a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800937c:	4a91      	ldr	r2, [pc, #580]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 800937e:	f043 0301 	orr.w	r3, r3, #1
 8009382:	6713      	str	r3, [r2, #112]	; 0x70
 8009384:	e02d      	b.n	80093e2 <HAL_RCC_OscConfig+0x5a6>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10c      	bne.n	80093a8 <HAL_RCC_OscConfig+0x56c>
 800938e:	4b8d      	ldr	r3, [pc, #564]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 8009390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009392:	4a8c      	ldr	r2, [pc, #560]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 8009394:	f023 0301 	bic.w	r3, r3, #1
 8009398:	6713      	str	r3, [r2, #112]	; 0x70
 800939a:	4b8a      	ldr	r3, [pc, #552]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 800939c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800939e:	4a89      	ldr	r2, [pc, #548]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 80093a0:	f023 0304 	bic.w	r3, r3, #4
 80093a4:	6713      	str	r3, [r2, #112]	; 0x70
 80093a6:	e01c      	b.n	80093e2 <HAL_RCC_OscConfig+0x5a6>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	2b05      	cmp	r3, #5
 80093ae:	d10c      	bne.n	80093ca <HAL_RCC_OscConfig+0x58e>
 80093b0:	4b84      	ldr	r3, [pc, #528]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 80093b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b4:	4a83      	ldr	r2, [pc, #524]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 80093b6:	f043 0304 	orr.w	r3, r3, #4
 80093ba:	6713      	str	r3, [r2, #112]	; 0x70
 80093bc:	4b81      	ldr	r3, [pc, #516]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 80093be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c0:	4a80      	ldr	r2, [pc, #512]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 80093c2:	f043 0301 	orr.w	r3, r3, #1
 80093c6:	6713      	str	r3, [r2, #112]	; 0x70
 80093c8:	e00b      	b.n	80093e2 <HAL_RCC_OscConfig+0x5a6>
 80093ca:	4b7e      	ldr	r3, [pc, #504]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 80093cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ce:	4a7d      	ldr	r2, [pc, #500]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 80093d0:	f023 0301 	bic.w	r3, r3, #1
 80093d4:	6713      	str	r3, [r2, #112]	; 0x70
 80093d6:	4b7b      	ldr	r3, [pc, #492]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 80093d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093da:	4a7a      	ldr	r2, [pc, #488]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 80093dc:	f023 0304 	bic.w	r3, r3, #4
 80093e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d015      	beq.n	8009416 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093ea:	f7fe ff47 	bl	800827c <HAL_GetTick>
 80093ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093f0:	e00a      	b.n	8009408 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093f2:	f7fe ff43 	bl	800827c <HAL_GetTick>
 80093f6:	4602      	mov	r2, r0
 80093f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009400:	4293      	cmp	r3, r2
 8009402:	d901      	bls.n	8009408 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e122      	b.n	800964e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009408:	4b6e      	ldr	r3, [pc, #440]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 800940a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800940c:	f003 0302 	and.w	r3, r3, #2
 8009410:	2b00      	cmp	r3, #0
 8009412:	d0ee      	beq.n	80093f2 <HAL_RCC_OscConfig+0x5b6>
 8009414:	e014      	b.n	8009440 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009416:	f7fe ff31 	bl	800827c <HAL_GetTick>
 800941a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800941c:	e00a      	b.n	8009434 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800941e:	f7fe ff2d 	bl	800827c <HAL_GetTick>
 8009422:	4602      	mov	r2, r0
 8009424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	f241 3288 	movw	r2, #5000	; 0x1388
 800942c:	4293      	cmp	r3, r2
 800942e:	d901      	bls.n	8009434 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8009430:	2303      	movs	r3, #3
 8009432:	e10c      	b.n	800964e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009434:	4b63      	ldr	r3, [pc, #396]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 8009436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009438:	f003 0302 	and.w	r3, r3, #2
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1ee      	bne.n	800941e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 8101 	beq.w	800964c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800944a:	4b5e      	ldr	r3, [pc, #376]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009452:	2b18      	cmp	r3, #24
 8009454:	f000 80bc 	beq.w	80095d0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945c:	2b02      	cmp	r3, #2
 800945e:	f040 8095 	bne.w	800958c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009462:	4b58      	ldr	r3, [pc, #352]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a57      	ldr	r2, [pc, #348]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 8009468:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800946c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800946e:	f7fe ff05 	bl	800827c <HAL_GetTick>
 8009472:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009474:	e008      	b.n	8009488 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009476:	f7fe ff01 	bl	800827c <HAL_GetTick>
 800947a:	4602      	mov	r2, r0
 800947c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	2b02      	cmp	r3, #2
 8009482:	d901      	bls.n	8009488 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8009484:	2303      	movs	r3, #3
 8009486:	e0e2      	b.n	800964e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009488:	4b4e      	ldr	r3, [pc, #312]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1f0      	bne.n	8009476 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009494:	4b4b      	ldr	r3, [pc, #300]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 8009496:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009498:	4b4b      	ldr	r3, [pc, #300]	; (80095c8 <HAL_RCC_OscConfig+0x78c>)
 800949a:	4013      	ands	r3, r2
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80094a4:	0112      	lsls	r2, r2, #4
 80094a6:	430a      	orrs	r2, r1
 80094a8:	4946      	ldr	r1, [pc, #280]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 80094aa:	4313      	orrs	r3, r2
 80094ac:	628b      	str	r3, [r1, #40]	; 0x28
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b2:	3b01      	subs	r3, #1
 80094b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094bc:	3b01      	subs	r3, #1
 80094be:	025b      	lsls	r3, r3, #9
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	431a      	orrs	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c8:	3b01      	subs	r3, #1
 80094ca:	041b      	lsls	r3, r3, #16
 80094cc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80094d0:	431a      	orrs	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d6:	3b01      	subs	r3, #1
 80094d8:	061b      	lsls	r3, r3, #24
 80094da:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80094de:	4939      	ldr	r1, [pc, #228]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 80094e0:	4313      	orrs	r3, r2
 80094e2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80094e4:	4b37      	ldr	r3, [pc, #220]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 80094e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e8:	4a36      	ldr	r2, [pc, #216]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 80094ea:	f023 0301 	bic.w	r3, r3, #1
 80094ee:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80094f0:	4b34      	ldr	r3, [pc, #208]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 80094f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094f4:	4b35      	ldr	r3, [pc, #212]	; (80095cc <HAL_RCC_OscConfig+0x790>)
 80094f6:	4013      	ands	r3, r2
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80094fc:	00d2      	lsls	r2, r2, #3
 80094fe:	4931      	ldr	r1, [pc, #196]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 8009500:	4313      	orrs	r3, r2
 8009502:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009504:	4b2f      	ldr	r3, [pc, #188]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 8009506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009508:	f023 020c 	bic.w	r2, r3, #12
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009510:	492c      	ldr	r1, [pc, #176]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 8009512:	4313      	orrs	r3, r2
 8009514:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009516:	4b2b      	ldr	r3, [pc, #172]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	f023 0202 	bic.w	r2, r3, #2
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009522:	4928      	ldr	r1, [pc, #160]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 8009524:	4313      	orrs	r3, r2
 8009526:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009528:	4b26      	ldr	r3, [pc, #152]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 800952a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952c:	4a25      	ldr	r2, [pc, #148]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 800952e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009532:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009534:	4b23      	ldr	r3, [pc, #140]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 8009536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009538:	4a22      	ldr	r2, [pc, #136]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 800953a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800953e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009540:	4b20      	ldr	r3, [pc, #128]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 8009542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009544:	4a1f      	ldr	r2, [pc, #124]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 8009546:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800954a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800954c:	4b1d      	ldr	r3, [pc, #116]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	4a1c      	ldr	r2, [pc, #112]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 8009552:	f043 0301 	orr.w	r3, r3, #1
 8009556:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009558:	4b1a      	ldr	r3, [pc, #104]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a19      	ldr	r2, [pc, #100]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 800955e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009564:	f7fe fe8a 	bl	800827c <HAL_GetTick>
 8009568:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800956a:	e008      	b.n	800957e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800956c:	f7fe fe86 	bl	800827c <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	2b02      	cmp	r3, #2
 8009578:	d901      	bls.n	800957e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800957a:	2303      	movs	r3, #3
 800957c:	e067      	b.n	800964e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800957e:	4b11      	ldr	r3, [pc, #68]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009586:	2b00      	cmp	r3, #0
 8009588:	d0f0      	beq.n	800956c <HAL_RCC_OscConfig+0x730>
 800958a:	e05f      	b.n	800964c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800958c:	4b0d      	ldr	r3, [pc, #52]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a0c      	ldr	r2, [pc, #48]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 8009592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009598:	f7fe fe70 	bl	800827c <HAL_GetTick>
 800959c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800959e:	e008      	b.n	80095b2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095a0:	f7fe fe6c 	bl	800827c <HAL_GetTick>
 80095a4:	4602      	mov	r2, r0
 80095a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d901      	bls.n	80095b2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80095ae:	2303      	movs	r3, #3
 80095b0:	e04d      	b.n	800964e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80095b2:	4b04      	ldr	r3, [pc, #16]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1f0      	bne.n	80095a0 <HAL_RCC_OscConfig+0x764>
 80095be:	e045      	b.n	800964c <HAL_RCC_OscConfig+0x810>
 80095c0:	58024800 	.word	0x58024800
 80095c4:	58024400 	.word	0x58024400
 80095c8:	fffffc0c 	.word	0xfffffc0c
 80095cc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80095d0:	4b21      	ldr	r3, [pc, #132]	; (8009658 <HAL_RCC_OscConfig+0x81c>)
 80095d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80095d6:	4b20      	ldr	r3, [pc, #128]	; (8009658 <HAL_RCC_OscConfig+0x81c>)
 80095d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095da:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d031      	beq.n	8009648 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	f003 0203 	and.w	r2, r3, #3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d12a      	bne.n	8009648 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	091b      	lsrs	r3, r3, #4
 80095f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095fe:	429a      	cmp	r2, r3
 8009600:	d122      	bne.n	8009648 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800960c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800960e:	429a      	cmp	r2, r3
 8009610:	d11a      	bne.n	8009648 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	0a5b      	lsrs	r3, r3, #9
 8009616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800961e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009620:	429a      	cmp	r2, r3
 8009622:	d111      	bne.n	8009648 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	0c1b      	lsrs	r3, r3, #16
 8009628:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009630:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009632:	429a      	cmp	r2, r3
 8009634:	d108      	bne.n	8009648 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	0e1b      	lsrs	r3, r3, #24
 800963a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009642:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009644:	429a      	cmp	r2, r3
 8009646:	d001      	beq.n	800964c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	e000      	b.n	800964e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3730      	adds	r7, #48	; 0x30
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	58024400 	.word	0x58024400

0800965c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d101      	bne.n	8009670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	e19c      	b.n	80099aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009670:	4b8a      	ldr	r3, [pc, #552]	; (800989c <HAL_RCC_ClockConfig+0x240>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 030f 	and.w	r3, r3, #15
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	429a      	cmp	r2, r3
 800967c:	d910      	bls.n	80096a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800967e:	4b87      	ldr	r3, [pc, #540]	; (800989c <HAL_RCC_ClockConfig+0x240>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f023 020f 	bic.w	r2, r3, #15
 8009686:	4985      	ldr	r1, [pc, #532]	; (800989c <HAL_RCC_ClockConfig+0x240>)
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	4313      	orrs	r3, r2
 800968c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800968e:	4b83      	ldr	r3, [pc, #524]	; (800989c <HAL_RCC_ClockConfig+0x240>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 030f 	and.w	r3, r3, #15
 8009696:	683a      	ldr	r2, [r7, #0]
 8009698:	429a      	cmp	r2, r3
 800969a:	d001      	beq.n	80096a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	e184      	b.n	80099aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 0304 	and.w	r3, r3, #4
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d010      	beq.n	80096ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	691a      	ldr	r2, [r3, #16]
 80096b0:	4b7b      	ldr	r3, [pc, #492]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80096b2:	699b      	ldr	r3, [r3, #24]
 80096b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d908      	bls.n	80096ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80096bc:	4b78      	ldr	r3, [pc, #480]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80096be:	699b      	ldr	r3, [r3, #24]
 80096c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	4975      	ldr	r1, [pc, #468]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80096ca:	4313      	orrs	r3, r2
 80096cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 0308 	and.w	r3, r3, #8
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d010      	beq.n	80096fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	695a      	ldr	r2, [r3, #20]
 80096de:	4b70      	ldr	r3, [pc, #448]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d908      	bls.n	80096fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80096ea:	4b6d      	ldr	r3, [pc, #436]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80096ec:	69db      	ldr	r3, [r3, #28]
 80096ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	496a      	ldr	r1, [pc, #424]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80096f8:	4313      	orrs	r3, r2
 80096fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f003 0310 	and.w	r3, r3, #16
 8009704:	2b00      	cmp	r3, #0
 8009706:	d010      	beq.n	800972a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	699a      	ldr	r2, [r3, #24]
 800970c:	4b64      	ldr	r3, [pc, #400]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 800970e:	69db      	ldr	r3, [r3, #28]
 8009710:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009714:	429a      	cmp	r2, r3
 8009716:	d908      	bls.n	800972a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009718:	4b61      	ldr	r3, [pc, #388]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	495e      	ldr	r1, [pc, #376]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 8009726:	4313      	orrs	r3, r2
 8009728:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 0320 	and.w	r3, r3, #32
 8009732:	2b00      	cmp	r3, #0
 8009734:	d010      	beq.n	8009758 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	69da      	ldr	r2, [r3, #28]
 800973a:	4b59      	ldr	r3, [pc, #356]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009742:	429a      	cmp	r2, r3
 8009744:	d908      	bls.n	8009758 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009746:	4b56      	ldr	r3, [pc, #344]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 8009748:	6a1b      	ldr	r3, [r3, #32]
 800974a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	69db      	ldr	r3, [r3, #28]
 8009752:	4953      	ldr	r1, [pc, #332]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 8009754:	4313      	orrs	r3, r2
 8009756:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 0302 	and.w	r3, r3, #2
 8009760:	2b00      	cmp	r3, #0
 8009762:	d010      	beq.n	8009786 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	68da      	ldr	r2, [r3, #12]
 8009768:	4b4d      	ldr	r3, [pc, #308]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	f003 030f 	and.w	r3, r3, #15
 8009770:	429a      	cmp	r2, r3
 8009772:	d908      	bls.n	8009786 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009774:	4b4a      	ldr	r3, [pc, #296]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	f023 020f 	bic.w	r2, r3, #15
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	4947      	ldr	r1, [pc, #284]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 8009782:	4313      	orrs	r3, r2
 8009784:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	2b00      	cmp	r3, #0
 8009790:	d055      	beq.n	800983e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009792:	4b43      	ldr	r3, [pc, #268]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 8009794:	699b      	ldr	r3, [r3, #24]
 8009796:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	4940      	ldr	r1, [pc, #256]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80097a0:	4313      	orrs	r3, r2
 80097a2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d107      	bne.n	80097bc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097ac:	4b3c      	ldr	r3, [pc, #240]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d121      	bne.n	80097fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e0f6      	b.n	80099aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	2b03      	cmp	r3, #3
 80097c2:	d107      	bne.n	80097d4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80097c4:	4b36      	ldr	r3, [pc, #216]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d115      	bne.n	80097fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e0ea      	b.n	80099aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d107      	bne.n	80097ec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80097dc:	4b30      	ldr	r3, [pc, #192]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d109      	bne.n	80097fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	e0de      	b.n	80099aa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097ec:	4b2c      	ldr	r3, [pc, #176]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 0304 	and.w	r3, r3, #4
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e0d6      	b.n	80099aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80097fc:	4b28      	ldr	r3, [pc, #160]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	f023 0207 	bic.w	r2, r3, #7
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	4925      	ldr	r1, [pc, #148]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 800980a:	4313      	orrs	r3, r2
 800980c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800980e:	f7fe fd35 	bl	800827c <HAL_GetTick>
 8009812:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009814:	e00a      	b.n	800982c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009816:	f7fe fd31 	bl	800827c <HAL_GetTick>
 800981a:	4602      	mov	r2, r0
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	f241 3288 	movw	r2, #5000	; 0x1388
 8009824:	4293      	cmp	r3, r2
 8009826:	d901      	bls.n	800982c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009828:	2303      	movs	r3, #3
 800982a:	e0be      	b.n	80099aa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800982c:	4b1c      	ldr	r3, [pc, #112]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	00db      	lsls	r3, r3, #3
 800983a:	429a      	cmp	r2, r3
 800983c:	d1eb      	bne.n	8009816 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 0302 	and.w	r3, r3, #2
 8009846:	2b00      	cmp	r3, #0
 8009848:	d010      	beq.n	800986c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68da      	ldr	r2, [r3, #12]
 800984e:	4b14      	ldr	r3, [pc, #80]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	f003 030f 	and.w	r3, r3, #15
 8009856:	429a      	cmp	r2, r3
 8009858:	d208      	bcs.n	800986c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800985a:	4b11      	ldr	r3, [pc, #68]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	f023 020f 	bic.w	r2, r3, #15
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	490e      	ldr	r1, [pc, #56]	; (80098a0 <HAL_RCC_ClockConfig+0x244>)
 8009868:	4313      	orrs	r3, r2
 800986a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800986c:	4b0b      	ldr	r3, [pc, #44]	; (800989c <HAL_RCC_ClockConfig+0x240>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f003 030f 	and.w	r3, r3, #15
 8009874:	683a      	ldr	r2, [r7, #0]
 8009876:	429a      	cmp	r2, r3
 8009878:	d214      	bcs.n	80098a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800987a:	4b08      	ldr	r3, [pc, #32]	; (800989c <HAL_RCC_ClockConfig+0x240>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f023 020f 	bic.w	r2, r3, #15
 8009882:	4906      	ldr	r1, [pc, #24]	; (800989c <HAL_RCC_ClockConfig+0x240>)
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	4313      	orrs	r3, r2
 8009888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800988a:	4b04      	ldr	r3, [pc, #16]	; (800989c <HAL_RCC_ClockConfig+0x240>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 030f 	and.w	r3, r3, #15
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	429a      	cmp	r2, r3
 8009896:	d005      	beq.n	80098a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	e086      	b.n	80099aa <HAL_RCC_ClockConfig+0x34e>
 800989c:	52002000 	.word	0x52002000
 80098a0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 0304 	and.w	r3, r3, #4
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d010      	beq.n	80098d2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	691a      	ldr	r2, [r3, #16]
 80098b4:	4b3f      	ldr	r3, [pc, #252]	; (80099b4 <HAL_RCC_ClockConfig+0x358>)
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098bc:	429a      	cmp	r2, r3
 80098be:	d208      	bcs.n	80098d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80098c0:	4b3c      	ldr	r3, [pc, #240]	; (80099b4 <HAL_RCC_ClockConfig+0x358>)
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	4939      	ldr	r1, [pc, #228]	; (80099b4 <HAL_RCC_ClockConfig+0x358>)
 80098ce:	4313      	orrs	r3, r2
 80098d0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 0308 	and.w	r3, r3, #8
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d010      	beq.n	8009900 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	695a      	ldr	r2, [r3, #20]
 80098e2:	4b34      	ldr	r3, [pc, #208]	; (80099b4 <HAL_RCC_ClockConfig+0x358>)
 80098e4:	69db      	ldr	r3, [r3, #28]
 80098e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d208      	bcs.n	8009900 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80098ee:	4b31      	ldr	r3, [pc, #196]	; (80099b4 <HAL_RCC_ClockConfig+0x358>)
 80098f0:	69db      	ldr	r3, [r3, #28]
 80098f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	695b      	ldr	r3, [r3, #20]
 80098fa:	492e      	ldr	r1, [pc, #184]	; (80099b4 <HAL_RCC_ClockConfig+0x358>)
 80098fc:	4313      	orrs	r3, r2
 80098fe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 0310 	and.w	r3, r3, #16
 8009908:	2b00      	cmp	r3, #0
 800990a:	d010      	beq.n	800992e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	699a      	ldr	r2, [r3, #24]
 8009910:	4b28      	ldr	r3, [pc, #160]	; (80099b4 <HAL_RCC_ClockConfig+0x358>)
 8009912:	69db      	ldr	r3, [r3, #28]
 8009914:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009918:	429a      	cmp	r2, r3
 800991a:	d208      	bcs.n	800992e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800991c:	4b25      	ldr	r3, [pc, #148]	; (80099b4 <HAL_RCC_ClockConfig+0x358>)
 800991e:	69db      	ldr	r3, [r3, #28]
 8009920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	4922      	ldr	r1, [pc, #136]	; (80099b4 <HAL_RCC_ClockConfig+0x358>)
 800992a:	4313      	orrs	r3, r2
 800992c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 0320 	and.w	r3, r3, #32
 8009936:	2b00      	cmp	r3, #0
 8009938:	d010      	beq.n	800995c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	69da      	ldr	r2, [r3, #28]
 800993e:	4b1d      	ldr	r3, [pc, #116]	; (80099b4 <HAL_RCC_ClockConfig+0x358>)
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009946:	429a      	cmp	r2, r3
 8009948:	d208      	bcs.n	800995c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800994a:	4b1a      	ldr	r3, [pc, #104]	; (80099b4 <HAL_RCC_ClockConfig+0x358>)
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	4917      	ldr	r1, [pc, #92]	; (80099b4 <HAL_RCC_ClockConfig+0x358>)
 8009958:	4313      	orrs	r3, r2
 800995a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800995c:	f000 f834 	bl	80099c8 <HAL_RCC_GetSysClockFreq>
 8009960:	4601      	mov	r1, r0
 8009962:	4b14      	ldr	r3, [pc, #80]	; (80099b4 <HAL_RCC_ClockConfig+0x358>)
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	0a1b      	lsrs	r3, r3, #8
 8009968:	f003 030f 	and.w	r3, r3, #15
 800996c:	4a12      	ldr	r2, [pc, #72]	; (80099b8 <HAL_RCC_ClockConfig+0x35c>)
 800996e:	5cd3      	ldrb	r3, [r2, r3]
 8009970:	f003 031f 	and.w	r3, r3, #31
 8009974:	fa21 f303 	lsr.w	r3, r1, r3
 8009978:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800997a:	4b0e      	ldr	r3, [pc, #56]	; (80099b4 <HAL_RCC_ClockConfig+0x358>)
 800997c:	699b      	ldr	r3, [r3, #24]
 800997e:	f003 030f 	and.w	r3, r3, #15
 8009982:	4a0d      	ldr	r2, [pc, #52]	; (80099b8 <HAL_RCC_ClockConfig+0x35c>)
 8009984:	5cd3      	ldrb	r3, [r2, r3]
 8009986:	f003 031f 	and.w	r3, r3, #31
 800998a:	693a      	ldr	r2, [r7, #16]
 800998c:	fa22 f303 	lsr.w	r3, r2, r3
 8009990:	4a0a      	ldr	r2, [pc, #40]	; (80099bc <HAL_RCC_ClockConfig+0x360>)
 8009992:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009994:	4a0a      	ldr	r2, [pc, #40]	; (80099c0 <HAL_RCC_ClockConfig+0x364>)
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800999a:	4b0a      	ldr	r3, [pc, #40]	; (80099c4 <HAL_RCC_ClockConfig+0x368>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fe fc22 	bl	80081e8 <HAL_InitTick>
 80099a4:	4603      	mov	r3, r0
 80099a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3718      	adds	r7, #24
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	58024400 	.word	0x58024400
 80099b8:	0800e42c 	.word	0x0800e42c
 80099bc:	24000004 	.word	0x24000004
 80099c0:	24000000 	.word	0x24000000
 80099c4:	24000008 	.word	0x24000008

080099c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b089      	sub	sp, #36	; 0x24
 80099cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099ce:	4baf      	ldr	r3, [pc, #700]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099d6:	2b18      	cmp	r3, #24
 80099d8:	f200 814e 	bhi.w	8009c78 <HAL_RCC_GetSysClockFreq+0x2b0>
 80099dc:	a201      	add	r2, pc, #4	; (adr r2, 80099e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80099de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e2:	bf00      	nop
 80099e4:	08009a49 	.word	0x08009a49
 80099e8:	08009c79 	.word	0x08009c79
 80099ec:	08009c79 	.word	0x08009c79
 80099f0:	08009c79 	.word	0x08009c79
 80099f4:	08009c79 	.word	0x08009c79
 80099f8:	08009c79 	.word	0x08009c79
 80099fc:	08009c79 	.word	0x08009c79
 8009a00:	08009c79 	.word	0x08009c79
 8009a04:	08009a6f 	.word	0x08009a6f
 8009a08:	08009c79 	.word	0x08009c79
 8009a0c:	08009c79 	.word	0x08009c79
 8009a10:	08009c79 	.word	0x08009c79
 8009a14:	08009c79 	.word	0x08009c79
 8009a18:	08009c79 	.word	0x08009c79
 8009a1c:	08009c79 	.word	0x08009c79
 8009a20:	08009c79 	.word	0x08009c79
 8009a24:	08009a75 	.word	0x08009a75
 8009a28:	08009c79 	.word	0x08009c79
 8009a2c:	08009c79 	.word	0x08009c79
 8009a30:	08009c79 	.word	0x08009c79
 8009a34:	08009c79 	.word	0x08009c79
 8009a38:	08009c79 	.word	0x08009c79
 8009a3c:	08009c79 	.word	0x08009c79
 8009a40:	08009c79 	.word	0x08009c79
 8009a44:	08009a7b 	.word	0x08009a7b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a48:	4b90      	ldr	r3, [pc, #576]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 0320 	and.w	r3, r3, #32
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d009      	beq.n	8009a68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a54:	4b8d      	ldr	r3, [pc, #564]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	08db      	lsrs	r3, r3, #3
 8009a5a:	f003 0303 	and.w	r3, r3, #3
 8009a5e:	4a8c      	ldr	r2, [pc, #560]	; (8009c90 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8009a60:	fa22 f303 	lsr.w	r3, r2, r3
 8009a64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009a66:	e10a      	b.n	8009c7e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009a68:	4b89      	ldr	r3, [pc, #548]	; (8009c90 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8009a6a:	61bb      	str	r3, [r7, #24]
    break;
 8009a6c:	e107      	b.n	8009c7e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009a6e:	4b89      	ldr	r3, [pc, #548]	; (8009c94 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8009a70:	61bb      	str	r3, [r7, #24]
    break;
 8009a72:	e104      	b.n	8009c7e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009a74:	4b88      	ldr	r3, [pc, #544]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8009a76:	61bb      	str	r3, [r7, #24]
    break;
 8009a78:	e101      	b.n	8009c7e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a7a:	4b84      	ldr	r3, [pc, #528]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7e:	f003 0303 	and.w	r3, r3, #3
 8009a82:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009a84:	4b81      	ldr	r3, [pc, #516]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a88:	091b      	lsrs	r3, r3, #4
 8009a8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a8e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009a90:	4b7e      	ldr	r3, [pc, #504]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a94:	f003 0301 	and.w	r3, r3, #1
 8009a98:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009a9a:	4b7c      	ldr	r3, [pc, #496]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a9e:	08db      	lsrs	r3, r3, #3
 8009aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	fb02 f303 	mul.w	r3, r2, r3
 8009aaa:	ee07 3a90 	vmov	s15, r3
 8009aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 80da 	beq.w	8009c72 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d05a      	beq.n	8009b7a <HAL_RCC_GetSysClockFreq+0x1b2>
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d302      	bcc.n	8009ace <HAL_RCC_GetSysClockFreq+0x106>
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d078      	beq.n	8009bbe <HAL_RCC_GetSysClockFreq+0x1f6>
 8009acc:	e099      	b.n	8009c02 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ace:	4b6f      	ldr	r3, [pc, #444]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 0320 	and.w	r3, r3, #32
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d02d      	beq.n	8009b36 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ada:	4b6c      	ldr	r3, [pc, #432]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	08db      	lsrs	r3, r3, #3
 8009ae0:	f003 0303 	and.w	r3, r3, #3
 8009ae4:	4a6a      	ldr	r2, [pc, #424]	; (8009c90 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8009ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aea:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	ee07 3a90 	vmov	s15, r3
 8009af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	ee07 3a90 	vmov	s15, r3
 8009afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b04:	4b61      	ldr	r3, [pc, #388]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b0c:	ee07 3a90 	vmov	s15, r3
 8009b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b14:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b18:	eddf 5a60 	vldr	s11, [pc, #384]	; 8009c9c <HAL_RCC_GetSysClockFreq+0x2d4>
 8009b1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b30:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009b34:	e087      	b.n	8009c46 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	ee07 3a90 	vmov	s15, r3
 8009b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b40:	eddf 6a57 	vldr	s13, [pc, #348]	; 8009ca0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8009b44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b48:	4b50      	ldr	r3, [pc, #320]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b50:	ee07 3a90 	vmov	s15, r3
 8009b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b58:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b5c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8009c9c <HAL_RCC_GetSysClockFreq+0x2d4>
 8009b60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b78:	e065      	b.n	8009c46 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	ee07 3a90 	vmov	s15, r3
 8009b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b84:	eddf 6a47 	vldr	s13, [pc, #284]	; 8009ca4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8009b88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b8c:	4b3f      	ldr	r3, [pc, #252]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b94:	ee07 3a90 	vmov	s15, r3
 8009b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ba0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009c9c <HAL_RCC_GetSysClockFreq+0x2d4>
 8009ba4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ba8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bbc:	e043      	b.n	8009c46 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	ee07 3a90 	vmov	s15, r3
 8009bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8009ca8 <HAL_RCC_GetSysClockFreq+0x2e0>
 8009bcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bd0:	4b2e      	ldr	r3, [pc, #184]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd8:	ee07 3a90 	vmov	s15, r3
 8009bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009be0:	ed97 6a02 	vldr	s12, [r7, #8]
 8009be4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8009c9c <HAL_RCC_GetSysClockFreq+0x2d4>
 8009be8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bfc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c00:	e021      	b.n	8009c46 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	ee07 3a90 	vmov	s15, r3
 8009c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c0c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8009ca4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8009c10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c14:	4b1d      	ldr	r3, [pc, #116]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c1c:	ee07 3a90 	vmov	s15, r3
 8009c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c24:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c28:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8009c9c <HAL_RCC_GetSysClockFreq+0x2d4>
 8009c2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c44:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009c46:	4b11      	ldr	r3, [pc, #68]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c4a:	0a5b      	lsrs	r3, r3, #9
 8009c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c50:	3301      	adds	r3, #1
 8009c52:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	ee07 3a90 	vmov	s15, r3
 8009c5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009c5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c6a:	ee17 3a90 	vmov	r3, s15
 8009c6e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009c70:	e005      	b.n	8009c7e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8009c72:	2300      	movs	r3, #0
 8009c74:	61bb      	str	r3, [r7, #24]
    break;
 8009c76:	e002      	b.n	8009c7e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8009c78:	4b06      	ldr	r3, [pc, #24]	; (8009c94 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8009c7a:	61bb      	str	r3, [r7, #24]
    break;
 8009c7c:	bf00      	nop
  }

  return sysclockfreq;
 8009c7e:	69bb      	ldr	r3, [r7, #24]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3724      	adds	r7, #36	; 0x24
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr
 8009c8c:	58024400 	.word	0x58024400
 8009c90:	03d09000 	.word	0x03d09000
 8009c94:	003d0900 	.word	0x003d0900
 8009c98:	02625a00 	.word	0x02625a00
 8009c9c:	46000000 	.word	0x46000000
 8009ca0:	4c742400 	.word	0x4c742400
 8009ca4:	4a742400 	.word	0x4a742400
 8009ca8:	4c189680 	.word	0x4c189680

08009cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009cb2:	f7ff fe89 	bl	80099c8 <HAL_RCC_GetSysClockFreq>
 8009cb6:	4601      	mov	r1, r0
 8009cb8:	4b10      	ldr	r3, [pc, #64]	; (8009cfc <HAL_RCC_GetHCLKFreq+0x50>)
 8009cba:	699b      	ldr	r3, [r3, #24]
 8009cbc:	0a1b      	lsrs	r3, r3, #8
 8009cbe:	f003 030f 	and.w	r3, r3, #15
 8009cc2:	4a0f      	ldr	r2, [pc, #60]	; (8009d00 <HAL_RCC_GetHCLKFreq+0x54>)
 8009cc4:	5cd3      	ldrb	r3, [r2, r3]
 8009cc6:	f003 031f 	and.w	r3, r3, #31
 8009cca:	fa21 f303 	lsr.w	r3, r1, r3
 8009cce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009cd0:	4b0a      	ldr	r3, [pc, #40]	; (8009cfc <HAL_RCC_GetHCLKFreq+0x50>)
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	f003 030f 	and.w	r3, r3, #15
 8009cd8:	4a09      	ldr	r2, [pc, #36]	; (8009d00 <HAL_RCC_GetHCLKFreq+0x54>)
 8009cda:	5cd3      	ldrb	r3, [r2, r3]
 8009cdc:	f003 031f 	and.w	r3, r3, #31
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ce6:	4a07      	ldr	r2, [pc, #28]	; (8009d04 <HAL_RCC_GetHCLKFreq+0x58>)
 8009ce8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009cea:	4a07      	ldr	r2, [pc, #28]	; (8009d08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009cf0:	4b04      	ldr	r3, [pc, #16]	; (8009d04 <HAL_RCC_GetHCLKFreq+0x58>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3708      	adds	r7, #8
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	58024400 	.word	0x58024400
 8009d00:	0800e42c 	.word	0x0800e42c
 8009d04:	24000004 	.word	0x24000004
 8009d08:	24000000 	.word	0x24000000

08009d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009d10:	f7ff ffcc 	bl	8009cac <HAL_RCC_GetHCLKFreq>
 8009d14:	4601      	mov	r1, r0
 8009d16:	4b06      	ldr	r3, [pc, #24]	; (8009d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d18:	69db      	ldr	r3, [r3, #28]
 8009d1a:	091b      	lsrs	r3, r3, #4
 8009d1c:	f003 0307 	and.w	r3, r3, #7
 8009d20:	4a04      	ldr	r2, [pc, #16]	; (8009d34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d22:	5cd3      	ldrb	r3, [r2, r3]
 8009d24:	f003 031f 	and.w	r3, r3, #31
 8009d28:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	58024400 	.word	0x58024400
 8009d34:	0800e42c 	.word	0x0800e42c

08009d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009d3c:	f7ff ffb6 	bl	8009cac <HAL_RCC_GetHCLKFreq>
 8009d40:	4601      	mov	r1, r0
 8009d42:	4b06      	ldr	r3, [pc, #24]	; (8009d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d44:	69db      	ldr	r3, [r3, #28]
 8009d46:	0a1b      	lsrs	r3, r3, #8
 8009d48:	f003 0307 	and.w	r3, r3, #7
 8009d4c:	4a04      	ldr	r2, [pc, #16]	; (8009d60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d4e:	5cd3      	ldrb	r3, [r2, r3]
 8009d50:	f003 031f 	and.w	r3, r3, #31
 8009d54:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	58024400 	.word	0x58024400
 8009d60:	0800e42c 	.word	0x0800e42c

08009d64 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d70:	2300      	movs	r3, #0
 8009d72:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d03d      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d88:	d013      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8009d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d8e:	d802      	bhi.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d007      	beq.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8009d94:	e01f      	b.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8009d96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d9a:	d013      	beq.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8009d9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009da0:	d01c      	beq.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8009da2:	e018      	b.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009da4:	4baf      	ldr	r3, [pc, #700]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da8:	4aae      	ldr	r2, [pc, #696]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009db0:	e015      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	3304      	adds	r3, #4
 8009db6:	2102      	movs	r1, #2
 8009db8:	4618      	mov	r0, r3
 8009dba:	f001 f96f 	bl	800b09c <RCCEx_PLL2_Config>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009dc2:	e00c      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	3324      	adds	r3, #36	; 0x24
 8009dc8:	2102      	movs	r1, #2
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f001 fa18 	bl	800b200 <RCCEx_PLL3_Config>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009dd4:	e003      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	75fb      	strb	r3, [r7, #23]
      break;
 8009dda:	e000      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8009ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dde:	7dfb      	ldrb	r3, [r7, #23]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d109      	bne.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009de4:	4b9f      	ldr	r3, [pc, #636]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009df0:	499c      	ldr	r1, [pc, #624]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009df2:	4313      	orrs	r3, r2
 8009df4:	650b      	str	r3, [r1, #80]	; 0x50
 8009df6:	e001      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009df8:	7dfb      	ldrb	r3, [r7, #23]
 8009dfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d03d      	beq.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e0c:	2b04      	cmp	r3, #4
 8009e0e:	d826      	bhi.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8009e10:	a201      	add	r2, pc, #4	; (adr r2, 8009e18 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8009e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e16:	bf00      	nop
 8009e18:	08009e2d 	.word	0x08009e2d
 8009e1c:	08009e3b 	.word	0x08009e3b
 8009e20:	08009e4d 	.word	0x08009e4d
 8009e24:	08009e65 	.word	0x08009e65
 8009e28:	08009e65 	.word	0x08009e65
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e2c:	4b8d      	ldr	r3, [pc, #564]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e30:	4a8c      	ldr	r2, [pc, #560]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e38:	e015      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	2100      	movs	r1, #0
 8009e40:	4618      	mov	r0, r3
 8009e42:	f001 f92b 	bl	800b09c <RCCEx_PLL2_Config>
 8009e46:	4603      	mov	r3, r0
 8009e48:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e4a:	e00c      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	3324      	adds	r3, #36	; 0x24
 8009e50:	2100      	movs	r1, #0
 8009e52:	4618      	mov	r0, r3
 8009e54:	f001 f9d4 	bl	800b200 <RCCEx_PLL3_Config>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e5c:	e003      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	75fb      	strb	r3, [r7, #23]
      break;
 8009e62:	e000      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8009e64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e66:	7dfb      	ldrb	r3, [r7, #23]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d109      	bne.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e6c:	4b7d      	ldr	r3, [pc, #500]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e70:	f023 0207 	bic.w	r2, r3, #7
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e78:	497a      	ldr	r1, [pc, #488]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	650b      	str	r3, [r1, #80]	; 0x50
 8009e7e:	e001      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e80:	7dfb      	ldrb	r3, [r7, #23]
 8009e82:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d03e      	beq.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e94:	2b80      	cmp	r3, #128	; 0x80
 8009e96:	d01c      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8009e98:	2b80      	cmp	r3, #128	; 0x80
 8009e9a:	d804      	bhi.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d008      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8009ea0:	2b40      	cmp	r3, #64	; 0x40
 8009ea2:	d00d      	beq.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8009ea4:	e01e      	b.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009ea6:	2bc0      	cmp	r3, #192	; 0xc0
 8009ea8:	d01f      	beq.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x186>
 8009eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eae:	d01e      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009eb0:	e018      	b.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eb2:	4b6c      	ldr	r3, [pc, #432]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb6:	4a6b      	ldr	r2, [pc, #428]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009ebe:	e017      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	3304      	adds	r3, #4
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f001 f8e8 	bl	800b09c <RCCEx_PLL2_Config>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009ed0:	e00e      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	3324      	adds	r3, #36	; 0x24
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f001 f991 	bl	800b200 <RCCEx_PLL3_Config>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009ee2:	e005      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ee8:	e002      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8009eea:	bf00      	nop
 8009eec:	e000      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8009eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ef0:	7dfb      	ldrb	r3, [r7, #23]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d109      	bne.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009ef6:	4b5b      	ldr	r3, [pc, #364]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009efa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f02:	4958      	ldr	r1, [pc, #352]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009f04:	4313      	orrs	r3, r2
 8009f06:	650b      	str	r3, [r1, #80]	; 0x50
 8009f08:	e001      	b.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f0a:	7dfb      	ldrb	r3, [r7, #23]
 8009f0c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d044      	beq.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f24:	d01f      	beq.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009f26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f2a:	d805      	bhi.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00a      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009f30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f34:	d00e      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8009f36:	e01f      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8009f38:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009f3c:	d01f      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8009f3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f42:	d01e      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009f44:	e018      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f46:	4b47      	ldr	r3, [pc, #284]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4a:	4a46      	ldr	r2, [pc, #280]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f52:	e017      	b.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	3304      	adds	r3, #4
 8009f58:	2100      	movs	r1, #0
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f001 f89e 	bl	800b09c <RCCEx_PLL2_Config>
 8009f60:	4603      	mov	r3, r0
 8009f62:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009f64:	e00e      	b.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	3324      	adds	r3, #36	; 0x24
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f001 f947 	bl	800b200 <RCCEx_PLL3_Config>
 8009f72:	4603      	mov	r3, r0
 8009f74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f76:	e005      	b.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f7c:	e002      	b.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8009f7e:	bf00      	nop
 8009f80:	e000      	b.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8009f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f84:	7dfb      	ldrb	r3, [r7, #23]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d10a      	bne.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009f8a:	4b36      	ldr	r3, [pc, #216]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f8e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f98:	4932      	ldr	r1, [pc, #200]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	658b      	str	r3, [r1, #88]	; 0x58
 8009f9e:	e001      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa0:	7dfb      	ldrb	r3, [r7, #23]
 8009fa2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d044      	beq.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009fb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fba:	d01f      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009fbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fc0:	d805      	bhi.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00a      	beq.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x278>
 8009fc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009fca:	d00e      	beq.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x286>
 8009fcc:	e01f      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8009fce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009fd2:	d01f      	beq.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009fd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009fd8:	d01e      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009fda:	e018      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fdc:	4b21      	ldr	r3, [pc, #132]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe0:	4a20      	ldr	r2, [pc, #128]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fe6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009fe8:	e017      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	3304      	adds	r3, #4
 8009fee:	2100      	movs	r1, #0
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f001 f853 	bl	800b09c <RCCEx_PLL2_Config>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009ffa:	e00e      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	3324      	adds	r3, #36	; 0x24
 800a000:	2100      	movs	r1, #0
 800a002:	4618      	mov	r0, r3
 800a004:	f001 f8fc 	bl	800b200 <RCCEx_PLL3_Config>
 800a008:	4603      	mov	r3, r0
 800a00a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a00c:	e005      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	75fb      	strb	r3, [r7, #23]
      break;
 800a012:	e002      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800a014:	bf00      	nop
 800a016:	e000      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800a018:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a01a:	7dfb      	ldrb	r3, [r7, #23]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10a      	bne.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a020:	4b10      	ldr	r3, [pc, #64]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a024:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a02e:	490d      	ldr	r1, [pc, #52]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a030:	4313      	orrs	r3, r2
 800a032:	658b      	str	r3, [r1, #88]	; 0x58
 800a034:	e001      	b.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a036:	7dfb      	ldrb	r3, [r7, #23]
 800a038:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a042:	2b00      	cmp	r3, #0
 800a044:	d035      	beq.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a04a:	2b10      	cmp	r3, #16
 800a04c:	d00c      	beq.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800a04e:	2b10      	cmp	r3, #16
 800a050:	d802      	bhi.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800a052:	2b00      	cmp	r3, #0
 800a054:	d01b      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800a056:	e017      	b.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800a058:	2b20      	cmp	r3, #32
 800a05a:	d00c      	beq.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800a05c:	2b30      	cmp	r3, #48	; 0x30
 800a05e:	d018      	beq.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800a060:	e012      	b.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800a062:	bf00      	nop
 800a064:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a068:	4baf      	ldr	r3, [pc, #700]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06c:	4aae      	ldr	r2, [pc, #696]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a06e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a072:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a074:	e00e      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	3304      	adds	r3, #4
 800a07a:	2102      	movs	r1, #2
 800a07c:	4618      	mov	r0, r3
 800a07e:	f001 f80d 	bl	800b09c <RCCEx_PLL2_Config>
 800a082:	4603      	mov	r3, r0
 800a084:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a086:	e005      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	75fb      	strb	r3, [r7, #23]
      break;
 800a08c:	e002      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800a08e:	bf00      	nop
 800a090:	e000      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800a092:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a094:	7dfb      	ldrb	r3, [r7, #23]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d109      	bne.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a09a:	4ba3      	ldr	r3, [pc, #652]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a09c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a09e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0a6:	49a0      	ldr	r1, [pc, #640]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a0ac:	e001      	b.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ae:	7dfb      	ldrb	r3, [r7, #23]
 800a0b0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d042      	beq.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0c6:	d01f      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800a0c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0cc:	d805      	bhi.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00a      	beq.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800a0d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0d6:	d00e      	beq.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 800a0d8:	e01f      	b.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800a0da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0de:	d01f      	beq.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800a0e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0e4:	d01e      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800a0e6:	e018      	b.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0e8:	4b8f      	ldr	r3, [pc, #572]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ec:	4a8e      	ldr	r2, [pc, #568]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a0ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a0f4:	e017      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	3304      	adds	r3, #4
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f000 ffcd 	bl	800b09c <RCCEx_PLL2_Config>
 800a102:	4603      	mov	r3, r0
 800a104:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a106:	e00e      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	3324      	adds	r3, #36	; 0x24
 800a10c:	2100      	movs	r1, #0
 800a10e:	4618      	mov	r0, r3
 800a110:	f001 f876 	bl	800b200 <RCCEx_PLL3_Config>
 800a114:	4603      	mov	r3, r0
 800a116:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a118:	e005      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	75fb      	strb	r3, [r7, #23]
      break;
 800a11e:	e002      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800a120:	bf00      	nop
 800a122:	e000      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800a124:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a126:	7dfb      	ldrb	r3, [r7, #23]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d109      	bne.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a12c:	4b7e      	ldr	r3, [pc, #504]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a12e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a130:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a138:	497b      	ldr	r1, [pc, #492]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a13a:	4313      	orrs	r3, r2
 800a13c:	650b      	str	r3, [r1, #80]	; 0x50
 800a13e:	e001      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a140:	7dfb      	ldrb	r3, [r7, #23]
 800a142:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d042      	beq.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a158:	d01b      	beq.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800a15a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a15e:	d805      	bhi.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800a160:	2b00      	cmp	r3, #0
 800a162:	d022      	beq.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x446>
 800a164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a168:	d00a      	beq.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800a16a:	e01b      	b.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800a16c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a170:	d01d      	beq.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800a172:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a176:	d01c      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800a178:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a17c:	d01b      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800a17e:	e011      	b.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	3304      	adds	r3, #4
 800a184:	2101      	movs	r1, #1
 800a186:	4618      	mov	r0, r3
 800a188:	f000 ff88 	bl	800b09c <RCCEx_PLL2_Config>
 800a18c:	4603      	mov	r3, r0
 800a18e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a190:	e012      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	3324      	adds	r3, #36	; 0x24
 800a196:	2101      	movs	r1, #1
 800a198:	4618      	mov	r0, r3
 800a19a:	f001 f831 	bl	800b200 <RCCEx_PLL3_Config>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a1a2:	e009      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	75fb      	strb	r3, [r7, #23]
      break;
 800a1a8:	e006      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800a1aa:	bf00      	nop
 800a1ac:	e004      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800a1ae:	bf00      	nop
 800a1b0:	e002      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800a1b2:	bf00      	nop
 800a1b4:	e000      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800a1b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1b8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d109      	bne.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a1be:	4b5a      	ldr	r3, [pc, #360]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a1c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1c2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1ca:	4957      	ldr	r1, [pc, #348]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	650b      	str	r3, [r1, #80]	; 0x50
 800a1d0:	e001      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1d2:	7dfb      	ldrb	r3, [r7, #23]
 800a1d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d044      	beq.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a1e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1ec:	d01b      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800a1ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1f2:	d805      	bhi.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d022      	beq.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a1f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1fc:	d00a      	beq.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800a1fe:	e01b      	b.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800a200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a204:	d01d      	beq.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a206:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a20a:	d01c      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800a20c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a210:	d01b      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a212:	e011      	b.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	3304      	adds	r3, #4
 800a218:	2101      	movs	r1, #1
 800a21a:	4618      	mov	r0, r3
 800a21c:	f000 ff3e 	bl	800b09c <RCCEx_PLL2_Config>
 800a220:	4603      	mov	r3, r0
 800a222:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a224:	e012      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	3324      	adds	r3, #36	; 0x24
 800a22a:	2101      	movs	r1, #1
 800a22c:	4618      	mov	r0, r3
 800a22e:	f000 ffe7 	bl	800b200 <RCCEx_PLL3_Config>
 800a232:	4603      	mov	r3, r0
 800a234:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a236:	e009      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a238:	2301      	movs	r3, #1
 800a23a:	75fb      	strb	r3, [r7, #23]
      break;
 800a23c:	e006      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800a23e:	bf00      	nop
 800a240:	e004      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800a242:	bf00      	nop
 800a244:	e002      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800a246:	bf00      	nop
 800a248:	e000      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800a24a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a24c:	7dfb      	ldrb	r3, [r7, #23]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10a      	bne.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a252:	4b35      	ldr	r3, [pc, #212]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a256:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a260:	4931      	ldr	r1, [pc, #196]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a262:	4313      	orrs	r3, r2
 800a264:	658b      	str	r3, [r1, #88]	; 0x58
 800a266:	e001      	b.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a268:	7dfb      	ldrb	r3, [r7, #23]
 800a26a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a274:	2b00      	cmp	r3, #0
 800a276:	d02d      	beq.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a27c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a280:	d005      	beq.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800a282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a286:	d009      	beq.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x538>
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d013      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800a28c:	e00f      	b.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a28e:	4b26      	ldr	r3, [pc, #152]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a292:	4a25      	ldr	r2, [pc, #148]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a298:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a29a:	e00c      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	3304      	adds	r3, #4
 800a2a0:	2101      	movs	r1, #1
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 fefa 	bl	800b09c <RCCEx_PLL2_Config>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a2ac:	e003      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	75fb      	strb	r3, [r7, #23]
      break;
 800a2b2:	e000      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800a2b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2b6:	7dfb      	ldrb	r3, [r7, #23]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d109      	bne.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a2bc:	4b1a      	ldr	r3, [pc, #104]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a2be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2c8:	4917      	ldr	r1, [pc, #92]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	650b      	str	r3, [r1, #80]	; 0x50
 800a2ce:	e001      	b.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d0:	7dfb      	ldrb	r3, [r7, #23]
 800a2d2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d035      	beq.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2e4:	2b03      	cmp	r3, #3
 800a2e6:	d81b      	bhi.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a2e8:	a201      	add	r2, pc, #4	; (adr r2, 800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800a2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ee:	bf00      	nop
 800a2f0:	0800a32d 	.word	0x0800a32d
 800a2f4:	0800a301 	.word	0x0800a301
 800a2f8:	0800a30f 	.word	0x0800a30f
 800a2fc:	0800a32d 	.word	0x0800a32d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a300:	4b09      	ldr	r3, [pc, #36]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a304:	4a08      	ldr	r2, [pc, #32]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a30a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a30c:	e00f      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	3304      	adds	r3, #4
 800a312:	2102      	movs	r1, #2
 800a314:	4618      	mov	r0, r3
 800a316:	f000 fec1 	bl	800b09c <RCCEx_PLL2_Config>
 800a31a:	4603      	mov	r3, r0
 800a31c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a31e:	e006      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	75fb      	strb	r3, [r7, #23]
      break;
 800a324:	e003      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800a326:	bf00      	nop
 800a328:	58024400 	.word	0x58024400
      break;
 800a32c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a32e:	7dfb      	ldrb	r3, [r7, #23]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d109      	bne.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a334:	4bba      	ldr	r3, [pc, #744]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a338:	f023 0203 	bic.w	r2, r3, #3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a340:	49b7      	ldr	r1, [pc, #732]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a342:	4313      	orrs	r3, r2
 800a344:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a346:	e001      	b.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a348:	7dfb      	ldrb	r3, [r7, #23]
 800a34a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a354:	2b00      	cmp	r3, #0
 800a356:	f000 8086 	beq.w	800a466 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a35a:	4bb2      	ldr	r3, [pc, #712]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4ab1      	ldr	r2, [pc, #708]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a364:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a366:	f7fd ff89 	bl	800827c <HAL_GetTick>
 800a36a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a36c:	e009      	b.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a36e:	f7fd ff85 	bl	800827c <HAL_GetTick>
 800a372:	4602      	mov	r2, r0
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	2b64      	cmp	r3, #100	; 0x64
 800a37a:	d902      	bls.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800a37c:	2303      	movs	r3, #3
 800a37e:	75fb      	strb	r3, [r7, #23]
        break;
 800a380:	e005      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a382:	4ba8      	ldr	r3, [pc, #672]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d0ef      	beq.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800a38e:	7dfb      	ldrb	r3, [r7, #23]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d166      	bne.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a394:	4ba2      	ldr	r3, [pc, #648]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a396:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a39e:	4053      	eors	r3, r2
 800a3a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d013      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a3a8:	4b9d      	ldr	r3, [pc, #628]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a3aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3b0:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a3b2:	4b9b      	ldr	r3, [pc, #620]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b6:	4a9a      	ldr	r2, [pc, #616]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a3b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3bc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a3be:	4b98      	ldr	r3, [pc, #608]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a3c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3c2:	4a97      	ldr	r2, [pc, #604]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a3c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3c8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a3ca:	4a95      	ldr	r2, [pc, #596]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a3d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3da:	d115      	bne.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3dc:	f7fd ff4e 	bl	800827c <HAL_GetTick>
 800a3e0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3e2:	e00b      	b.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3e4:	f7fd ff4a 	bl	800827c <HAL_GetTick>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	1ad3      	subs	r3, r2, r3
 800a3ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d902      	bls.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	75fb      	strb	r3, [r7, #23]
            break;
 800a3fa:	e005      	b.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3fc:	4b88      	ldr	r3, [pc, #544]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a3fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a400:	f003 0302 	and.w	r3, r3, #2
 800a404:	2b00      	cmp	r3, #0
 800a406:	d0ed      	beq.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800a408:	7dfb      	ldrb	r3, [r7, #23]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d126      	bne.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a41c:	d10d      	bne.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800a41e:	4b80      	ldr	r3, [pc, #512]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a42c:	0919      	lsrs	r1, r3, #4
 800a42e:	4b7e      	ldr	r3, [pc, #504]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800a430:	400b      	ands	r3, r1
 800a432:	497b      	ldr	r1, [pc, #492]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a434:	4313      	orrs	r3, r2
 800a436:	610b      	str	r3, [r1, #16]
 800a438:	e005      	b.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800a43a:	4b79      	ldr	r3, [pc, #484]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	4a78      	ldr	r2, [pc, #480]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a440:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a444:	6113      	str	r3, [r2, #16]
 800a446:	4b76      	ldr	r3, [pc, #472]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a448:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a454:	4972      	ldr	r1, [pc, #456]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a456:	4313      	orrs	r3, r2
 800a458:	670b      	str	r3, [r1, #112]	; 0x70
 800a45a:	e004      	b.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a45c:	7dfb      	ldrb	r3, [r7, #23]
 800a45e:	75bb      	strb	r3, [r7, #22]
 800a460:	e001      	b.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a462:	7dfb      	ldrb	r3, [r7, #23]
 800a464:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 0301 	and.w	r3, r3, #1
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d07d      	beq.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a476:	2b28      	cmp	r3, #40	; 0x28
 800a478:	d866      	bhi.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800a47a:	a201      	add	r2, pc, #4	; (adr r2, 800a480 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800a47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a480:	0800a54f 	.word	0x0800a54f
 800a484:	0800a549 	.word	0x0800a549
 800a488:	0800a549 	.word	0x0800a549
 800a48c:	0800a549 	.word	0x0800a549
 800a490:	0800a549 	.word	0x0800a549
 800a494:	0800a549 	.word	0x0800a549
 800a498:	0800a549 	.word	0x0800a549
 800a49c:	0800a549 	.word	0x0800a549
 800a4a0:	0800a525 	.word	0x0800a525
 800a4a4:	0800a549 	.word	0x0800a549
 800a4a8:	0800a549 	.word	0x0800a549
 800a4ac:	0800a549 	.word	0x0800a549
 800a4b0:	0800a549 	.word	0x0800a549
 800a4b4:	0800a549 	.word	0x0800a549
 800a4b8:	0800a549 	.word	0x0800a549
 800a4bc:	0800a549 	.word	0x0800a549
 800a4c0:	0800a537 	.word	0x0800a537
 800a4c4:	0800a549 	.word	0x0800a549
 800a4c8:	0800a549 	.word	0x0800a549
 800a4cc:	0800a549 	.word	0x0800a549
 800a4d0:	0800a549 	.word	0x0800a549
 800a4d4:	0800a549 	.word	0x0800a549
 800a4d8:	0800a549 	.word	0x0800a549
 800a4dc:	0800a549 	.word	0x0800a549
 800a4e0:	0800a54f 	.word	0x0800a54f
 800a4e4:	0800a549 	.word	0x0800a549
 800a4e8:	0800a549 	.word	0x0800a549
 800a4ec:	0800a549 	.word	0x0800a549
 800a4f0:	0800a549 	.word	0x0800a549
 800a4f4:	0800a549 	.word	0x0800a549
 800a4f8:	0800a549 	.word	0x0800a549
 800a4fc:	0800a549 	.word	0x0800a549
 800a500:	0800a54f 	.word	0x0800a54f
 800a504:	0800a549 	.word	0x0800a549
 800a508:	0800a549 	.word	0x0800a549
 800a50c:	0800a549 	.word	0x0800a549
 800a510:	0800a549 	.word	0x0800a549
 800a514:	0800a549 	.word	0x0800a549
 800a518:	0800a549 	.word	0x0800a549
 800a51c:	0800a549 	.word	0x0800a549
 800a520:	0800a54f 	.word	0x0800a54f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	3304      	adds	r3, #4
 800a528:	2101      	movs	r1, #1
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 fdb6 	bl	800b09c <RCCEx_PLL2_Config>
 800a530:	4603      	mov	r3, r0
 800a532:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a534:	e00c      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	3324      	adds	r3, #36	; 0x24
 800a53a:	2101      	movs	r1, #1
 800a53c:	4618      	mov	r0, r3
 800a53e:	f000 fe5f 	bl	800b200 <RCCEx_PLL3_Config>
 800a542:	4603      	mov	r3, r0
 800a544:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a546:	e003      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	75fb      	strb	r3, [r7, #23]
      break;
 800a54c:	e000      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800a54e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a550:	7dfb      	ldrb	r3, [r7, #23]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d109      	bne.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a556:	4b32      	ldr	r3, [pc, #200]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a55a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a562:	492f      	ldr	r1, [pc, #188]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a564:	4313      	orrs	r3, r2
 800a566:	654b      	str	r3, [r1, #84]	; 0x54
 800a568:	e001      	b.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a56a:	7dfb      	ldrb	r3, [r7, #23]
 800a56c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f003 0302 	and.w	r3, r3, #2
 800a576:	2b00      	cmp	r3, #0
 800a578:	d037      	beq.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a57e:	2b05      	cmp	r3, #5
 800a580:	d820      	bhi.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800a582:	a201      	add	r2, pc, #4	; (adr r2, 800a588 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800a584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a588:	0800a5cb 	.word	0x0800a5cb
 800a58c:	0800a5a1 	.word	0x0800a5a1
 800a590:	0800a5b3 	.word	0x0800a5b3
 800a594:	0800a5cb 	.word	0x0800a5cb
 800a598:	0800a5cb 	.word	0x0800a5cb
 800a59c:	0800a5cb 	.word	0x0800a5cb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	2101      	movs	r1, #1
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f000 fd78 	bl	800b09c <RCCEx_PLL2_Config>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a5b0:	e00c      	b.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	3324      	adds	r3, #36	; 0x24
 800a5b6:	2101      	movs	r1, #1
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 fe21 	bl	800b200 <RCCEx_PLL3_Config>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a5c2:	e003      	b.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	75fb      	strb	r3, [r7, #23]
      break;
 800a5c8:	e000      	b.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800a5ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5cc:	7dfb      	ldrb	r3, [r7, #23]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d109      	bne.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a5d2:	4b13      	ldr	r3, [pc, #76]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a5d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5d6:	f023 0207 	bic.w	r2, r3, #7
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5de:	4910      	ldr	r1, [pc, #64]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	654b      	str	r3, [r1, #84]	; 0x54
 800a5e4:	e001      	b.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5e6:	7dfb      	ldrb	r3, [r7, #23]
 800a5e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f003 0304 	and.w	r3, r3, #4
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d040      	beq.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5fc:	2b05      	cmp	r3, #5
 800a5fe:	d827      	bhi.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800a600:	a201      	add	r2, pc, #4	; (adr r2, 800a608 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800a602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a606:	bf00      	nop
 800a608:	0800a657 	.word	0x0800a657
 800a60c:	0800a62d 	.word	0x0800a62d
 800a610:	0800a63f 	.word	0x0800a63f
 800a614:	0800a657 	.word	0x0800a657
 800a618:	0800a657 	.word	0x0800a657
 800a61c:	0800a657 	.word	0x0800a657
 800a620:	58024400 	.word	0x58024400
 800a624:	58024800 	.word	0x58024800
 800a628:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	3304      	adds	r3, #4
 800a630:	2101      	movs	r1, #1
 800a632:	4618      	mov	r0, r3
 800a634:	f000 fd32 	bl	800b09c <RCCEx_PLL2_Config>
 800a638:	4603      	mov	r3, r0
 800a63a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a63c:	e00c      	b.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	3324      	adds	r3, #36	; 0x24
 800a642:	2101      	movs	r1, #1
 800a644:	4618      	mov	r0, r3
 800a646:	f000 fddb 	bl	800b200 <RCCEx_PLL3_Config>
 800a64a:	4603      	mov	r3, r0
 800a64c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a64e:	e003      	b.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	75fb      	strb	r3, [r7, #23]
      break;
 800a654:	e000      	b.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800a656:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a658:	7dfb      	ldrb	r3, [r7, #23]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d10a      	bne.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a65e:	4bb2      	ldr	r3, [pc, #712]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a662:	f023 0207 	bic.w	r2, r3, #7
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a66c:	49ae      	ldr	r1, [pc, #696]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a66e:	4313      	orrs	r3, r2
 800a670:	658b      	str	r3, [r1, #88]	; 0x58
 800a672:	e001      	b.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a674:	7dfb      	ldrb	r3, [r7, #23]
 800a676:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 0320 	and.w	r3, r3, #32
 800a680:	2b00      	cmp	r3, #0
 800a682:	d044      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a68a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a68e:	d01b      	beq.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800a690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a694:	d805      	bhi.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800a696:	2b00      	cmp	r3, #0
 800a698:	d022      	beq.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800a69a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a69e:	d00a      	beq.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800a6a0:	e01b      	b.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x976>
 800a6a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6a6:	d01d      	beq.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800a6a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6ac:	d01c      	beq.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800a6ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a6b2:	d01b      	beq.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x988>
 800a6b4:	e011      	b.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	3304      	adds	r3, #4
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f000 fced 	bl	800b09c <RCCEx_PLL2_Config>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a6c6:	e012      	b.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	3324      	adds	r3, #36	; 0x24
 800a6cc:	2102      	movs	r1, #2
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 fd96 	bl	800b200 <RCCEx_PLL3_Config>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a6d8:	e009      	b.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	75fb      	strb	r3, [r7, #23]
      break;
 800a6de:	e006      	b.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a6e0:	bf00      	nop
 800a6e2:	e004      	b.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a6e4:	bf00      	nop
 800a6e6:	e002      	b.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a6e8:	bf00      	nop
 800a6ea:	e000      	b.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a6ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6ee:	7dfb      	ldrb	r3, [r7, #23]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10a      	bne.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a6f4:	4b8c      	ldr	r3, [pc, #560]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a6f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6f8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a702:	4989      	ldr	r1, [pc, #548]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a704:	4313      	orrs	r3, r2
 800a706:	654b      	str	r3, [r1, #84]	; 0x54
 800a708:	e001      	b.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a70a:	7dfb      	ldrb	r3, [r7, #23]
 800a70c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a716:	2b00      	cmp	r3, #0
 800a718:	d044      	beq.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a724:	d01b      	beq.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800a726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a72a:	d805      	bhi.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d022      	beq.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a734:	d00a      	beq.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800a736:	e01b      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800a738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a73c:	d01d      	beq.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800a73e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a742:	d01c      	beq.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800a744:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a748:	d01b      	beq.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800a74a:	e011      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	3304      	adds	r3, #4
 800a750:	2100      	movs	r1, #0
 800a752:	4618      	mov	r0, r3
 800a754:	f000 fca2 	bl	800b09c <RCCEx_PLL2_Config>
 800a758:	4603      	mov	r3, r0
 800a75a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a75c:	e012      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	3324      	adds	r3, #36	; 0x24
 800a762:	2102      	movs	r1, #2
 800a764:	4618      	mov	r0, r3
 800a766:	f000 fd4b 	bl	800b200 <RCCEx_PLL3_Config>
 800a76a:	4603      	mov	r3, r0
 800a76c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a76e:	e009      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	75fb      	strb	r3, [r7, #23]
      break;
 800a774:	e006      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a776:	bf00      	nop
 800a778:	e004      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a77a:	bf00      	nop
 800a77c:	e002      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a77e:	bf00      	nop
 800a780:	e000      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a782:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a784:	7dfb      	ldrb	r3, [r7, #23]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10a      	bne.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a78a:	4b67      	ldr	r3, [pc, #412]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a78c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a78e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a798:	4963      	ldr	r1, [pc, #396]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a79a:	4313      	orrs	r3, r2
 800a79c:	658b      	str	r3, [r1, #88]	; 0x58
 800a79e:	e001      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7a0:	7dfb      	ldrb	r3, [r7, #23]
 800a7a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d044      	beq.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a7b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7ba:	d01b      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800a7bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7c0:	d805      	bhi.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d022      	beq.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a7c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7ca:	d00a      	beq.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a7cc:	e01b      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800a7ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7d2:	d01d      	beq.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a7d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a7d8:	d01c      	beq.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800a7da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a7de:	d01b      	beq.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800a7e0:	e011      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	3304      	adds	r3, #4
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f000 fc57 	bl	800b09c <RCCEx_PLL2_Config>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a7f2:	e012      	b.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	3324      	adds	r3, #36	; 0x24
 800a7f8:	2102      	movs	r1, #2
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f000 fd00 	bl	800b200 <RCCEx_PLL3_Config>
 800a800:	4603      	mov	r3, r0
 800a802:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a804:	e009      	b.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	75fb      	strb	r3, [r7, #23]
      break;
 800a80a:	e006      	b.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a80c:	bf00      	nop
 800a80e:	e004      	b.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a810:	bf00      	nop
 800a812:	e002      	b.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a814:	bf00      	nop
 800a816:	e000      	b.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a818:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a81a:	7dfb      	ldrb	r3, [r7, #23]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10a      	bne.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a820:	4b41      	ldr	r3, [pc, #260]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a824:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a82e:	493e      	ldr	r1, [pc, #248]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a830:	4313      	orrs	r3, r2
 800a832:	658b      	str	r3, [r1, #88]	; 0x58
 800a834:	e001      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a836:	7dfb      	ldrb	r3, [r7, #23]
 800a838:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f003 0308 	and.w	r3, r3, #8
 800a842:	2b00      	cmp	r3, #0
 800a844:	d01a      	beq.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a84c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a850:	d10a      	bne.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	3324      	adds	r3, #36	; 0x24
 800a856:	2102      	movs	r1, #2
 800a858:	4618      	mov	r0, r3
 800a85a:	f000 fcd1 	bl	800b200 <RCCEx_PLL3_Config>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d001      	beq.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a868:	4b2f      	ldr	r3, [pc, #188]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a86a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a86c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a876:	492c      	ldr	r1, [pc, #176]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a878:	4313      	orrs	r3, r2
 800a87a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f003 0310 	and.w	r3, r3, #16
 800a884:	2b00      	cmp	r3, #0
 800a886:	d01a      	beq.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a88e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a892:	d10a      	bne.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	3324      	adds	r3, #36	; 0x24
 800a898:	2102      	movs	r1, #2
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 fcb0 	bl	800b200 <RCCEx_PLL3_Config>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d001      	beq.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a8aa:	4b1f      	ldr	r3, [pc, #124]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a8ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8b8:	491b      	ldr	r1, [pc, #108]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d032      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a8d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8d4:	d00d      	beq.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800a8d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8da:	d016      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d111      	bne.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	3304      	adds	r3, #4
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f000 fbd8 	bl	800b09c <RCCEx_PLL2_Config>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a8f0:	e00c      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	3324      	adds	r3, #36	; 0x24
 800a8f6:	2102      	movs	r1, #2
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f000 fc81 	bl	800b200 <RCCEx_PLL3_Config>
 800a8fe:	4603      	mov	r3, r0
 800a900:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a902:	e003      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a904:	2301      	movs	r3, #1
 800a906:	75fb      	strb	r3, [r7, #23]
      break;
 800a908:	e000      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800a90a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a90c:	7dfb      	ldrb	r3, [r7, #23]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d10c      	bne.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a912:	4b05      	ldr	r3, [pc, #20]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a916:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a920:	4901      	ldr	r1, [pc, #4]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a922:	4313      	orrs	r3, r2
 800a924:	658b      	str	r3, [r1, #88]	; 0x58
 800a926:	e003      	b.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800a928:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a92c:	7dfb      	ldrb	r3, [r7, #23]
 800a92e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d02f      	beq.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a942:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a946:	d00c      	beq.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a948:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a94c:	d015      	beq.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800a94e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a952:	d10f      	bne.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a954:	4b79      	ldr	r3, [pc, #484]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a958:	4a78      	ldr	r2, [pc, #480]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a95a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a95e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a960:	e00c      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	3324      	adds	r3, #36	; 0x24
 800a966:	2101      	movs	r1, #1
 800a968:	4618      	mov	r0, r3
 800a96a:	f000 fc49 	bl	800b200 <RCCEx_PLL3_Config>
 800a96e:	4603      	mov	r3, r0
 800a970:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a972:	e003      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	75fb      	strb	r3, [r7, #23]
      break;
 800a978:	e000      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800a97a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a97c:	7dfb      	ldrb	r3, [r7, #23]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d10a      	bne.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a982:	4b6e      	ldr	r3, [pc, #440]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a986:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a990:	496a      	ldr	r1, [pc, #424]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a992:	4313      	orrs	r3, r2
 800a994:	654b      	str	r3, [r1, #84]	; 0x54
 800a996:	e001      	b.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a998:	7dfb      	ldrb	r3, [r7, #23]
 800a99a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d029      	beq.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d003      	beq.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800a9b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9b4:	d007      	beq.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a9b6:	e00f      	b.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9b8:	4b60      	ldr	r3, [pc, #384]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9bc:	4a5f      	ldr	r2, [pc, #380]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a9be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a9c4:	e00b      	b.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	3304      	adds	r3, #4
 800a9ca:	2102      	movs	r1, #2
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f000 fb65 	bl	800b09c <RCCEx_PLL2_Config>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a9d6:	e002      	b.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	75fb      	strb	r3, [r7, #23]
      break;
 800a9dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9de:	7dfb      	ldrb	r3, [r7, #23]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d109      	bne.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a9e4:	4b55      	ldr	r3, [pc, #340]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a9e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9f0:	4952      	ldr	r1, [pc, #328]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a9f6:	e001      	b.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9f8:	7dfb      	ldrb	r3, [r7, #23]
 800a9fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00a      	beq.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	3324      	adds	r3, #36	; 0x24
 800aa0c:	2102      	movs	r1, #2
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f000 fbf6 	bl	800b200 <RCCEx_PLL3_Config>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d001      	beq.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d02f      	beq.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa32:	d00c      	beq.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800aa34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa38:	d802      	bhi.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d011      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800aa3e:	e00d      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800aa40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa44:	d00f      	beq.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800aa46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa4a:	d00e      	beq.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800aa4c:	e006      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa4e:	4b3b      	ldr	r3, [pc, #236]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800aa50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa52:	4a3a      	ldr	r2, [pc, #232]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800aa54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800aa5a:	e007      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	75fb      	strb	r3, [r7, #23]
      break;
 800aa60:	e004      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800aa62:	bf00      	nop
 800aa64:	e002      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800aa66:	bf00      	nop
 800aa68:	e000      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800aa6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa6c:	7dfb      	ldrb	r3, [r7, #23]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d109      	bne.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aa72:	4b32      	ldr	r3, [pc, #200]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800aa74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa7e:	492f      	ldr	r1, [pc, #188]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800aa80:	4313      	orrs	r3, r2
 800aa82:	654b      	str	r3, [r1, #84]	; 0x54
 800aa84:	e001      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa86:	7dfb      	ldrb	r3, [r7, #23]
 800aa88:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d008      	beq.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800aa96:	4b29      	ldr	r3, [pc, #164]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800aa98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaa2:	4926      	ldr	r1, [pc, #152]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d009      	beq.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800aab4:	4b21      	ldr	r3, [pc, #132]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800aac2:	491e      	ldr	r1, [pc, #120]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800aac4:	4313      	orrs	r3, r2
 800aac6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d008      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800aad4:	4b19      	ldr	r3, [pc, #100]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800aad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aad8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aae0:	4916      	ldr	r1, [pc, #88]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800aae2:	4313      	orrs	r3, r2
 800aae4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00d      	beq.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aaf2:	4b12      	ldr	r3, [pc, #72]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	4a11      	ldr	r2, [pc, #68]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800aaf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aafc:	6113      	str	r3, [r2, #16]
 800aafe:	4b0f      	ldr	r3, [pc, #60]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800ab00:	691a      	ldr	r2, [r3, #16]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ab08:	490c      	ldr	r1, [pc, #48]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	da08      	bge.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ab16:	4b09      	ldr	r3, [pc, #36]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800ab18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab22:	4906      	ldr	r1, [pc, #24]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800ab24:	4313      	orrs	r3, r2
 800ab26:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800ab28:	7dbb      	ldrb	r3, [r7, #22]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d101      	bne.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	e000      	b.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3718      	adds	r7, #24
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	58024400 	.word	0x58024400

0800ab40 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ab44:	f7ff f8b2 	bl	8009cac <HAL_RCC_GetHCLKFreq>
 800ab48:	4601      	mov	r1, r0
 800ab4a:	4b06      	ldr	r3, [pc, #24]	; (800ab64 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ab4c:	6a1b      	ldr	r3, [r3, #32]
 800ab4e:	091b      	lsrs	r3, r3, #4
 800ab50:	f003 0307 	and.w	r3, r3, #7
 800ab54:	4a04      	ldr	r2, [pc, #16]	; (800ab68 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ab56:	5cd3      	ldrb	r3, [r2, r3]
 800ab58:	f003 031f 	and.w	r3, r3, #31
 800ab5c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	58024400 	.word	0x58024400
 800ab68:	0800e42c 	.word	0x0800e42c

0800ab6c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b089      	sub	sp, #36	; 0x24
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab74:	4b9d      	ldr	r3, [pc, #628]	; (800adec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab78:	f003 0303 	and.w	r3, r3, #3
 800ab7c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ab7e:	4b9b      	ldr	r3, [pc, #620]	; (800adec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab82:	0b1b      	lsrs	r3, r3, #12
 800ab84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab88:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ab8a:	4b98      	ldr	r3, [pc, #608]	; (800adec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8e:	091b      	lsrs	r3, r3, #4
 800ab90:	f003 0301 	and.w	r3, r3, #1
 800ab94:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ab96:	4b95      	ldr	r3, [pc, #596]	; (800adec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab9a:	08db      	lsrs	r3, r3, #3
 800ab9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aba0:	693a      	ldr	r2, [r7, #16]
 800aba2:	fb02 f303 	mul.w	r3, r2, r3
 800aba6:	ee07 3a90 	vmov	s15, r3
 800abaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f000 810a 	beq.w	800adce <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d05a      	beq.n	800ac76 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d302      	bcc.n	800abca <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d078      	beq.n	800acba <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800abc8:	e099      	b.n	800acfe <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abca:	4b88      	ldr	r3, [pc, #544]	; (800adec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f003 0320 	and.w	r3, r3, #32
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d02d      	beq.n	800ac32 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800abd6:	4b85      	ldr	r3, [pc, #532]	; (800adec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	08db      	lsrs	r3, r3, #3
 800abdc:	f003 0303 	and.w	r3, r3, #3
 800abe0:	4a83      	ldr	r2, [pc, #524]	; (800adf0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800abe2:	fa22 f303 	lsr.w	r3, r2, r3
 800abe6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	ee07 3a90 	vmov	s15, r3
 800abee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	ee07 3a90 	vmov	s15, r3
 800abf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac00:	4b7a      	ldr	r3, [pc, #488]	; (800adec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ac02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac08:	ee07 3a90 	vmov	s15, r3
 800ac0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac10:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac14:	eddf 5a77 	vldr	s11, [pc, #476]	; 800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ac18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac2c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ac30:	e087      	b.n	800ad42 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	ee07 3a90 	vmov	s15, r3
 800ac38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac3c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800adf8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800ac40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac44:	4b69      	ldr	r3, [pc, #420]	; (800adec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ac46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac4c:	ee07 3a90 	vmov	s15, r3
 800ac50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac54:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac58:	eddf 5a66 	vldr	s11, [pc, #408]	; 800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ac5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac74:	e065      	b.n	800ad42 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	ee07 3a90 	vmov	s15, r3
 800ac7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac80:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800adfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800ac84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac88:	4b58      	ldr	r3, [pc, #352]	; (800adec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ac8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac90:	ee07 3a90 	vmov	s15, r3
 800ac94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac98:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac9c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800aca0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aca4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aca8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acb4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acb8:	e043      	b.n	800ad42 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	ee07 3a90 	vmov	s15, r3
 800acc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acc4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800acc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800accc:	4b47      	ldr	r3, [pc, #284]	; (800adec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800acce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acd4:	ee07 3a90 	vmov	s15, r3
 800acd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acdc:	ed97 6a03 	vldr	s12, [r7, #12]
 800ace0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ace4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ace8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acf8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acfc:	e021      	b.n	800ad42 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	ee07 3a90 	vmov	s15, r3
 800ad04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad08:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800adfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800ad0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad10:	4b36      	ldr	r3, [pc, #216]	; (800adec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ad12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad18:	ee07 3a90 	vmov	s15, r3
 800ad1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad20:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad24:	eddf 5a33 	vldr	s11, [pc, #204]	; 800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ad28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad40:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ad42:	4b2a      	ldr	r3, [pc, #168]	; (800adec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ad44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad46:	0a5b      	lsrs	r3, r3, #9
 800ad48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad4c:	ee07 3a90 	vmov	s15, r3
 800ad50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad58:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad5c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad68:	ee17 2a90 	vmov	r2, s15
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ad70:	4b1e      	ldr	r3, [pc, #120]	; (800adec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ad72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad74:	0c1b      	lsrs	r3, r3, #16
 800ad76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad7a:	ee07 3a90 	vmov	s15, r3
 800ad7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad96:	ee17 2a90 	vmov	r2, s15
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ad9e:	4b13      	ldr	r3, [pc, #76]	; (800adec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ada0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada2:	0e1b      	lsrs	r3, r3, #24
 800ada4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ada8:	ee07 3a90 	vmov	s15, r3
 800adac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adb8:	edd7 6a07 	vldr	s13, [r7, #28]
 800adbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adc4:	ee17 2a90 	vmov	r2, s15
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800adcc:	e008      	b.n	800ade0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	609a      	str	r2, [r3, #8]
}
 800ade0:	bf00      	nop
 800ade2:	3724      	adds	r7, #36	; 0x24
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr
 800adec:	58024400 	.word	0x58024400
 800adf0:	03d09000 	.word	0x03d09000
 800adf4:	46000000 	.word	0x46000000
 800adf8:	4c742400 	.word	0x4c742400
 800adfc:	4a742400 	.word	0x4a742400
 800ae00:	4c189680 	.word	0x4c189680

0800ae04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b089      	sub	sp, #36	; 0x24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae0c:	4b9d      	ldr	r3, [pc, #628]	; (800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae10:	f003 0303 	and.w	r3, r3, #3
 800ae14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ae16:	4b9b      	ldr	r3, [pc, #620]	; (800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae1a:	0d1b      	lsrs	r3, r3, #20
 800ae1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ae22:	4b98      	ldr	r3, [pc, #608]	; (800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae26:	0a1b      	lsrs	r3, r3, #8
 800ae28:	f003 0301 	and.w	r3, r3, #1
 800ae2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ae2e:	4b95      	ldr	r3, [pc, #596]	; (800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae32:	08db      	lsrs	r3, r3, #3
 800ae34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae38:	693a      	ldr	r2, [r7, #16]
 800ae3a:	fb02 f303 	mul.w	r3, r2, r3
 800ae3e:	ee07 3a90 	vmov	s15, r3
 800ae42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f000 810a 	beq.w	800b066 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d05a      	beq.n	800af0e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d302      	bcc.n	800ae62 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800ae5c:	2b02      	cmp	r3, #2
 800ae5e:	d078      	beq.n	800af52 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800ae60:	e099      	b.n	800af96 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae62:	4b88      	ldr	r3, [pc, #544]	; (800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 0320 	and.w	r3, r3, #32
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d02d      	beq.n	800aeca <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae6e:	4b85      	ldr	r3, [pc, #532]	; (800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	08db      	lsrs	r3, r3, #3
 800ae74:	f003 0303 	and.w	r3, r3, #3
 800ae78:	4a83      	ldr	r2, [pc, #524]	; (800b088 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800ae7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae7e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	ee07 3a90 	vmov	s15, r3
 800ae86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	ee07 3a90 	vmov	s15, r3
 800ae90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae98:	4b7a      	ldr	r3, [pc, #488]	; (800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aea0:	ee07 3a90 	vmov	s15, r3
 800aea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aea8:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeac:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b08c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800aeb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aebc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aec4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aec8:	e087      	b.n	800afda <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	ee07 3a90 	vmov	s15, r3
 800aed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aed4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b090 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800aed8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aedc:	4b69      	ldr	r3, [pc, #420]	; (800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800aede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aee4:	ee07 3a90 	vmov	s15, r3
 800aee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeec:	ed97 6a03 	vldr	s12, [r7, #12]
 800aef0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b08c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800aef4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aef8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aefc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af0c:	e065      	b.n	800afda <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	ee07 3a90 	vmov	s15, r3
 800af14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af18:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800af1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af20:	4b58      	ldr	r3, [pc, #352]	; (800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800af22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af28:	ee07 3a90 	vmov	s15, r3
 800af2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af30:	ed97 6a03 	vldr	s12, [r7, #12]
 800af34:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b08c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800af38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af50:	e043      	b.n	800afda <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	ee07 3a90 	vmov	s15, r3
 800af58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af5c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b098 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800af60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af64:	4b47      	ldr	r3, [pc, #284]	; (800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800af66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af6c:	ee07 3a90 	vmov	s15, r3
 800af70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af74:	ed97 6a03 	vldr	s12, [r7, #12]
 800af78:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b08c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800af7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af94:	e021      	b.n	800afda <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	ee07 3a90 	vmov	s15, r3
 800af9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afa0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800b094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800afa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afa8:	4b36      	ldr	r3, [pc, #216]	; (800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800afaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afb0:	ee07 3a90 	vmov	s15, r3
 800afb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afb8:	ed97 6a03 	vldr	s12, [r7, #12]
 800afbc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b08c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800afc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afd8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800afda:	4b2a      	ldr	r3, [pc, #168]	; (800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800afdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afde:	0a5b      	lsrs	r3, r3, #9
 800afe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afe4:	ee07 3a90 	vmov	s15, r3
 800afe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aff0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aff4:	edd7 6a07 	vldr	s13, [r7, #28]
 800aff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800affc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b000:	ee17 2a90 	vmov	r2, s15
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b008:	4b1e      	ldr	r3, [pc, #120]	; (800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b00a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b00c:	0c1b      	lsrs	r3, r3, #16
 800b00e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b012:	ee07 3a90 	vmov	s15, r3
 800b016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b01a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b01e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b022:	edd7 6a07 	vldr	s13, [r7, #28]
 800b026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b02a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b02e:	ee17 2a90 	vmov	r2, s15
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b036:	4b13      	ldr	r3, [pc, #76]	; (800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b03a:	0e1b      	lsrs	r3, r3, #24
 800b03c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b040:	ee07 3a90 	vmov	s15, r3
 800b044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b048:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b04c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b050:	edd7 6a07 	vldr	s13, [r7, #28]
 800b054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b05c:	ee17 2a90 	vmov	r2, s15
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b064:	e008      	b.n	800b078 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2200      	movs	r2, #0
 800b06a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	609a      	str	r2, [r3, #8]
}
 800b078:	bf00      	nop
 800b07a:	3724      	adds	r7, #36	; 0x24
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr
 800b084:	58024400 	.word	0x58024400
 800b088:	03d09000 	.word	0x03d09000
 800b08c:	46000000 	.word	0x46000000
 800b090:	4c742400 	.word	0x4c742400
 800b094:	4a742400 	.word	0x4a742400
 800b098:	4c189680 	.word	0x4c189680

0800b09c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b0aa:	4b53      	ldr	r3, [pc, #332]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ae:	f003 0303 	and.w	r3, r3, #3
 800b0b2:	2b03      	cmp	r3, #3
 800b0b4:	d101      	bne.n	800b0ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e099      	b.n	800b1ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b0ba:	4b4f      	ldr	r3, [pc, #316]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a4e      	ldr	r2, [pc, #312]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b0c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b0c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0c6:	f7fd f8d9 	bl	800827c <HAL_GetTick>
 800b0ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0cc:	e008      	b.n	800b0e0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b0ce:	f7fd f8d5 	bl	800827c <HAL_GetTick>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	d901      	bls.n	800b0e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b0dc:	2303      	movs	r3, #3
 800b0de:	e086      	b.n	800b1ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0e0:	4b45      	ldr	r3, [pc, #276]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1f0      	bne.n	800b0ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b0ec:	4b42      	ldr	r3, [pc, #264]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	031b      	lsls	r3, r3, #12
 800b0fa:	493f      	ldr	r1, [pc, #252]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	628b      	str	r3, [r1, #40]	; 0x28
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	3b01      	subs	r3, #1
 800b106:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	3b01      	subs	r3, #1
 800b110:	025b      	lsls	r3, r3, #9
 800b112:	b29b      	uxth	r3, r3
 800b114:	431a      	orrs	r2, r3
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	3b01      	subs	r3, #1
 800b11c:	041b      	lsls	r3, r3, #16
 800b11e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b122:	431a      	orrs	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	3b01      	subs	r3, #1
 800b12a:	061b      	lsls	r3, r3, #24
 800b12c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b130:	4931      	ldr	r1, [pc, #196]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b132:	4313      	orrs	r3, r2
 800b134:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b136:	4b30      	ldr	r3, [pc, #192]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	695b      	ldr	r3, [r3, #20]
 800b142:	492d      	ldr	r1, [pc, #180]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b144:	4313      	orrs	r3, r2
 800b146:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b148:	4b2b      	ldr	r3, [pc, #172]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b14c:	f023 0220 	bic.w	r2, r3, #32
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	699b      	ldr	r3, [r3, #24]
 800b154:	4928      	ldr	r1, [pc, #160]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b156:	4313      	orrs	r3, r2
 800b158:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b15a:	4b27      	ldr	r3, [pc, #156]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b15e:	4a26      	ldr	r2, [pc, #152]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b160:	f023 0310 	bic.w	r3, r3, #16
 800b164:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b166:	4b24      	ldr	r3, [pc, #144]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b168:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b16a:	4b24      	ldr	r3, [pc, #144]	; (800b1fc <RCCEx_PLL2_Config+0x160>)
 800b16c:	4013      	ands	r3, r2
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	69d2      	ldr	r2, [r2, #28]
 800b172:	00d2      	lsls	r2, r2, #3
 800b174:	4920      	ldr	r1, [pc, #128]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b176:	4313      	orrs	r3, r2
 800b178:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b17a:	4b1f      	ldr	r3, [pc, #124]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17e:	4a1e      	ldr	r2, [pc, #120]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b180:	f043 0310 	orr.w	r3, r3, #16
 800b184:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d106      	bne.n	800b19a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b18c:	4b1a      	ldr	r3, [pc, #104]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b190:	4a19      	ldr	r2, [pc, #100]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b192:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b196:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b198:	e00f      	b.n	800b1ba <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d106      	bne.n	800b1ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b1a0:	4b15      	ldr	r3, [pc, #84]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a4:	4a14      	ldr	r2, [pc, #80]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b1a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b1ac:	e005      	b.n	800b1ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b1ae:	4b12      	ldr	r3, [pc, #72]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b2:	4a11      	ldr	r2, [pc, #68]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b1b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b1b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b1ba:	4b0f      	ldr	r3, [pc, #60]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a0e      	ldr	r2, [pc, #56]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b1c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b1c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1c6:	f7fd f859 	bl	800827c <HAL_GetTick>
 800b1ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1cc:	e008      	b.n	800b1e0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b1ce:	f7fd f855 	bl	800827c <HAL_GetTick>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	1ad3      	subs	r3, r2, r3
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	d901      	bls.n	800b1e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b1dc:	2303      	movs	r3, #3
 800b1de:	e006      	b.n	800b1ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1e0:	4b05      	ldr	r3, [pc, #20]	; (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d0f0      	beq.n	800b1ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3710      	adds	r7, #16
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	58024400 	.word	0x58024400
 800b1fc:	ffff0007 	.word	0xffff0007

0800b200 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b20a:	2300      	movs	r3, #0
 800b20c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b20e:	4b53      	ldr	r3, [pc, #332]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b212:	f003 0303 	and.w	r3, r3, #3
 800b216:	2b03      	cmp	r3, #3
 800b218:	d101      	bne.n	800b21e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	e099      	b.n	800b352 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b21e:	4b4f      	ldr	r3, [pc, #316]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4a4e      	ldr	r2, [pc, #312]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b22a:	f7fd f827 	bl	800827c <HAL_GetTick>
 800b22e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b230:	e008      	b.n	800b244 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b232:	f7fd f823 	bl	800827c <HAL_GetTick>
 800b236:	4602      	mov	r2, r0
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	d901      	bls.n	800b244 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b240:	2303      	movs	r3, #3
 800b242:	e086      	b.n	800b352 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b244:	4b45      	ldr	r3, [pc, #276]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d1f0      	bne.n	800b232 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b250:	4b42      	ldr	r3, [pc, #264]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b254:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	051b      	lsls	r3, r3, #20
 800b25e:	493f      	ldr	r1, [pc, #252]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b260:	4313      	orrs	r3, r2
 800b262:	628b      	str	r3, [r1, #40]	; 0x28
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	3b01      	subs	r3, #1
 800b26a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	3b01      	subs	r3, #1
 800b274:	025b      	lsls	r3, r3, #9
 800b276:	b29b      	uxth	r3, r3
 800b278:	431a      	orrs	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	3b01      	subs	r3, #1
 800b280:	041b      	lsls	r3, r3, #16
 800b282:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b286:	431a      	orrs	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	691b      	ldr	r3, [r3, #16]
 800b28c:	3b01      	subs	r3, #1
 800b28e:	061b      	lsls	r3, r3, #24
 800b290:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b294:	4931      	ldr	r1, [pc, #196]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b296:	4313      	orrs	r3, r2
 800b298:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b29a:	4b30      	ldr	r3, [pc, #192]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	695b      	ldr	r3, [r3, #20]
 800b2a6:	492d      	ldr	r1, [pc, #180]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b2ac:	4b2b      	ldr	r3, [pc, #172]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	699b      	ldr	r3, [r3, #24]
 800b2b8:	4928      	ldr	r1, [pc, #160]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b2be:	4b27      	ldr	r3, [pc, #156]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c2:	4a26      	ldr	r2, [pc, #152]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b2ca:	4b24      	ldr	r3, [pc, #144]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2ce:	4b24      	ldr	r3, [pc, #144]	; (800b360 <RCCEx_PLL3_Config+0x160>)
 800b2d0:	4013      	ands	r3, r2
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	69d2      	ldr	r2, [r2, #28]
 800b2d6:	00d2      	lsls	r2, r2, #3
 800b2d8:	4920      	ldr	r1, [pc, #128]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b2de:	4b1f      	ldr	r3, [pc, #124]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e2:	4a1e      	ldr	r2, [pc, #120]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d106      	bne.n	800b2fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b2f0:	4b1a      	ldr	r3, [pc, #104]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f4:	4a19      	ldr	r2, [pc, #100]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b2fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b2fc:	e00f      	b.n	800b31e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d106      	bne.n	800b312 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b304:	4b15      	ldr	r3, [pc, #84]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b308:	4a14      	ldr	r2, [pc, #80]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b30a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b30e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b310:	e005      	b.n	800b31e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b312:	4b12      	ldr	r3, [pc, #72]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b316:	4a11      	ldr	r2, [pc, #68]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b318:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b31c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b31e:	4b0f      	ldr	r3, [pc, #60]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4a0e      	ldr	r2, [pc, #56]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b32a:	f7fc ffa7 	bl	800827c <HAL_GetTick>
 800b32e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b330:	e008      	b.n	800b344 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b332:	f7fc ffa3 	bl	800827c <HAL_GetTick>
 800b336:	4602      	mov	r2, r0
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	1ad3      	subs	r3, r2, r3
 800b33c:	2b02      	cmp	r3, #2
 800b33e:	d901      	bls.n	800b344 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b340:	2303      	movs	r3, #3
 800b342:	e006      	b.n	800b352 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b344:	4b05      	ldr	r3, [pc, #20]	; (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d0f0      	beq.n	800b332 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b350:	7bfb      	ldrb	r3, [r7, #15]
}
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	58024400 	.word	0x58024400
 800b360:	ffff0007 	.word	0xffff0007

0800b364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d101      	bne.n	800b376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	e049      	b.n	800b40a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d106      	bne.n	800b390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f7fc fe08 	bl	8007fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2202      	movs	r2, #2
 800b394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	3304      	adds	r3, #4
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	4610      	mov	r0, r2
 800b3a4:	f000 f934 	bl	800b610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2201      	movs	r2, #1
 800b404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
	...

0800b414 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b422:	b2db      	uxtb	r3, r3
 800b424:	2b01      	cmp	r3, #1
 800b426:	d001      	beq.n	800b42c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	e019      	b.n	800b460 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2202      	movs	r2, #2
 800b430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	689a      	ldr	r2, [r3, #8]
 800b43a:	4b0c      	ldr	r3, [pc, #48]	; (800b46c <HAL_TIM_Base_Start+0x58>)
 800b43c:	4013      	ands	r3, r2
 800b43e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2b06      	cmp	r3, #6
 800b444:	d00b      	beq.n	800b45e <HAL_TIM_Base_Start+0x4a>
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b44c:	d007      	beq.n	800b45e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f042 0201 	orr.w	r2, r2, #1
 800b45c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b45e:	2300      	movs	r3, #0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3714      	adds	r7, #20
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr
 800b46c:	00010007 	.word	0x00010007

0800b470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b480:	2b01      	cmp	r3, #1
 800b482:	d101      	bne.n	800b488 <HAL_TIM_ConfigClockSource+0x18>
 800b484:	2302      	movs	r3, #2
 800b486:	e0b7      	b.n	800b5f8 <HAL_TIM_ConfigClockSource+0x188>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2202      	movs	r2, #2
 800b494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	4b57      	ldr	r3, [pc, #348]	; (800b600 <HAL_TIM_ConfigClockSource+0x190>)
 800b4a4:	4013      	ands	r3, r2
 800b4a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2b70      	cmp	r3, #112	; 0x70
 800b4be:	d02e      	beq.n	800b51e <HAL_TIM_ConfigClockSource+0xae>
 800b4c0:	2b70      	cmp	r3, #112	; 0x70
 800b4c2:	d812      	bhi.n	800b4ea <HAL_TIM_ConfigClockSource+0x7a>
 800b4c4:	2b30      	cmp	r3, #48	; 0x30
 800b4c6:	f000 8084 	beq.w	800b5d2 <HAL_TIM_ConfigClockSource+0x162>
 800b4ca:	2b30      	cmp	r3, #48	; 0x30
 800b4cc:	d806      	bhi.n	800b4dc <HAL_TIM_ConfigClockSource+0x6c>
 800b4ce:	2b10      	cmp	r3, #16
 800b4d0:	d07f      	beq.n	800b5d2 <HAL_TIM_ConfigClockSource+0x162>
 800b4d2:	2b20      	cmp	r3, #32
 800b4d4:	d07d      	beq.n	800b5d2 <HAL_TIM_ConfigClockSource+0x162>
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d07b      	beq.n	800b5d2 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800b4da:	e084      	b.n	800b5e6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800b4dc:	2b50      	cmp	r3, #80	; 0x50
 800b4de:	d048      	beq.n	800b572 <HAL_TIM_ConfigClockSource+0x102>
 800b4e0:	2b60      	cmp	r3, #96	; 0x60
 800b4e2:	d056      	beq.n	800b592 <HAL_TIM_ConfigClockSource+0x122>
 800b4e4:	2b40      	cmp	r3, #64	; 0x40
 800b4e6:	d064      	beq.n	800b5b2 <HAL_TIM_ConfigClockSource+0x142>
      break;
 800b4e8:	e07d      	b.n	800b5e6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800b4ea:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b4ee:	d070      	beq.n	800b5d2 <HAL_TIM_ConfigClockSource+0x162>
 800b4f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b4f4:	d809      	bhi.n	800b50a <HAL_TIM_ConfigClockSource+0x9a>
 800b4f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4fa:	d027      	beq.n	800b54c <HAL_TIM_ConfigClockSource+0xdc>
 800b4fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b500:	d067      	beq.n	800b5d2 <HAL_TIM_ConfigClockSource+0x162>
 800b502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b506:	d06d      	beq.n	800b5e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b508:	e06d      	b.n	800b5e6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800b50a:	4a3e      	ldr	r2, [pc, #248]	; (800b604 <HAL_TIM_ConfigClockSource+0x194>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d060      	beq.n	800b5d2 <HAL_TIM_ConfigClockSource+0x162>
 800b510:	4a3d      	ldr	r2, [pc, #244]	; (800b608 <HAL_TIM_ConfigClockSource+0x198>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d05d      	beq.n	800b5d2 <HAL_TIM_ConfigClockSource+0x162>
 800b516:	4a3d      	ldr	r2, [pc, #244]	; (800b60c <HAL_TIM_ConfigClockSource+0x19c>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d05a      	beq.n	800b5d2 <HAL_TIM_ConfigClockSource+0x162>
      break;
 800b51c:	e063      	b.n	800b5e6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6818      	ldr	r0, [r3, #0]
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	6899      	ldr	r1, [r3, #8]
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	685a      	ldr	r2, [r3, #4]
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	68db      	ldr	r3, [r3, #12]
 800b52e:	f000 f987 	bl	800b840 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b540:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	68fa      	ldr	r2, [r7, #12]
 800b548:	609a      	str	r2, [r3, #8]
      break;
 800b54a:	e04c      	b.n	800b5e6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6818      	ldr	r0, [r3, #0]
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	6899      	ldr	r1, [r3, #8]
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	685a      	ldr	r2, [r3, #4]
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	f000 f970 	bl	800b840 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	689a      	ldr	r2, [r3, #8]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b56e:	609a      	str	r2, [r3, #8]
      break;
 800b570:	e039      	b.n	800b5e6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6818      	ldr	r0, [r3, #0]
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	6859      	ldr	r1, [r3, #4]
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	461a      	mov	r2, r3
 800b580:	f000 f8e0 	bl	800b744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2150      	movs	r1, #80	; 0x50
 800b58a:	4618      	mov	r0, r3
 800b58c:	f000 f93a 	bl	800b804 <TIM_ITRx_SetConfig>
      break;
 800b590:	e029      	b.n	800b5e6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6818      	ldr	r0, [r3, #0]
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	6859      	ldr	r1, [r3, #4]
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	68db      	ldr	r3, [r3, #12]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	f000 f8ff 	bl	800b7a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	2160      	movs	r1, #96	; 0x60
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f000 f92a 	bl	800b804 <TIM_ITRx_SetConfig>
      break;
 800b5b0:	e019      	b.n	800b5e6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6818      	ldr	r0, [r3, #0]
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	6859      	ldr	r1, [r3, #4]
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	461a      	mov	r2, r3
 800b5c0:	f000 f8c0 	bl	800b744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2140      	movs	r1, #64	; 0x40
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f000 f91a 	bl	800b804 <TIM_ITRx_SetConfig>
      break;
 800b5d0:	e009      	b.n	800b5e6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4619      	mov	r1, r3
 800b5dc:	4610      	mov	r0, r2
 800b5de:	f000 f911 	bl	800b804 <TIM_ITRx_SetConfig>
      break;
 800b5e2:	e000      	b.n	800b5e6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800b5e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3710      	adds	r7, #16
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	ffceff88 	.word	0xffceff88
 800b604:	00100030 	.word	0x00100030
 800b608:	00100040 	.word	0x00100040
 800b60c:	00100020 	.word	0x00100020

0800b610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b610:	b480      	push	{r7}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4a40      	ldr	r2, [pc, #256]	; (800b724 <TIM_Base_SetConfig+0x114>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d013      	beq.n	800b650 <TIM_Base_SetConfig+0x40>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b62e:	d00f      	beq.n	800b650 <TIM_Base_SetConfig+0x40>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	4a3d      	ldr	r2, [pc, #244]	; (800b728 <TIM_Base_SetConfig+0x118>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d00b      	beq.n	800b650 <TIM_Base_SetConfig+0x40>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	4a3c      	ldr	r2, [pc, #240]	; (800b72c <TIM_Base_SetConfig+0x11c>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d007      	beq.n	800b650 <TIM_Base_SetConfig+0x40>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	4a3b      	ldr	r2, [pc, #236]	; (800b730 <TIM_Base_SetConfig+0x120>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d003      	beq.n	800b650 <TIM_Base_SetConfig+0x40>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4a3a      	ldr	r2, [pc, #232]	; (800b734 <TIM_Base_SetConfig+0x124>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d108      	bne.n	800b662 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	4313      	orrs	r3, r2
 800b660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4a2f      	ldr	r2, [pc, #188]	; (800b724 <TIM_Base_SetConfig+0x114>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d01f      	beq.n	800b6aa <TIM_Base_SetConfig+0x9a>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b670:	d01b      	beq.n	800b6aa <TIM_Base_SetConfig+0x9a>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	4a2c      	ldr	r2, [pc, #176]	; (800b728 <TIM_Base_SetConfig+0x118>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d017      	beq.n	800b6aa <TIM_Base_SetConfig+0x9a>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4a2b      	ldr	r2, [pc, #172]	; (800b72c <TIM_Base_SetConfig+0x11c>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d013      	beq.n	800b6aa <TIM_Base_SetConfig+0x9a>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	4a2a      	ldr	r2, [pc, #168]	; (800b730 <TIM_Base_SetConfig+0x120>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d00f      	beq.n	800b6aa <TIM_Base_SetConfig+0x9a>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4a29      	ldr	r2, [pc, #164]	; (800b734 <TIM_Base_SetConfig+0x124>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d00b      	beq.n	800b6aa <TIM_Base_SetConfig+0x9a>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	4a28      	ldr	r2, [pc, #160]	; (800b738 <TIM_Base_SetConfig+0x128>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d007      	beq.n	800b6aa <TIM_Base_SetConfig+0x9a>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4a27      	ldr	r2, [pc, #156]	; (800b73c <TIM_Base_SetConfig+0x12c>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d003      	beq.n	800b6aa <TIM_Base_SetConfig+0x9a>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4a26      	ldr	r2, [pc, #152]	; (800b740 <TIM_Base_SetConfig+0x130>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d108      	bne.n	800b6bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	695b      	ldr	r3, [r3, #20]
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	689a      	ldr	r2, [r3, #8]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	4a10      	ldr	r2, [pc, #64]	; (800b724 <TIM_Base_SetConfig+0x114>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d00f      	beq.n	800b708 <TIM_Base_SetConfig+0xf8>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	4a12      	ldr	r2, [pc, #72]	; (800b734 <TIM_Base_SetConfig+0x124>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d00b      	beq.n	800b708 <TIM_Base_SetConfig+0xf8>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	4a11      	ldr	r2, [pc, #68]	; (800b738 <TIM_Base_SetConfig+0x128>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d007      	beq.n	800b708 <TIM_Base_SetConfig+0xf8>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	4a10      	ldr	r2, [pc, #64]	; (800b73c <TIM_Base_SetConfig+0x12c>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d003      	beq.n	800b708 <TIM_Base_SetConfig+0xf8>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	4a0f      	ldr	r2, [pc, #60]	; (800b740 <TIM_Base_SetConfig+0x130>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d103      	bne.n	800b710 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	691a      	ldr	r2, [r3, #16]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2201      	movs	r2, #1
 800b714:	615a      	str	r2, [r3, #20]
}
 800b716:	bf00      	nop
 800b718:	3714      	adds	r7, #20
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop
 800b724:	40010000 	.word	0x40010000
 800b728:	40000400 	.word	0x40000400
 800b72c:	40000800 	.word	0x40000800
 800b730:	40000c00 	.word	0x40000c00
 800b734:	40010400 	.word	0x40010400
 800b738:	40014000 	.word	0x40014000
 800b73c:	40014400 	.word	0x40014400
 800b740:	40014800 	.word	0x40014800

0800b744 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b744:	b480      	push	{r7}
 800b746:	b087      	sub	sp, #28
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6a1b      	ldr	r3, [r3, #32]
 800b754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6a1b      	ldr	r3, [r3, #32]
 800b75a:	f023 0201 	bic.w	r2, r3, #1
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	699b      	ldr	r3, [r3, #24]
 800b766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b76e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	011b      	lsls	r3, r3, #4
 800b774:	693a      	ldr	r2, [r7, #16]
 800b776:	4313      	orrs	r3, r2
 800b778:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	f023 030a 	bic.w	r3, r3, #10
 800b780:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b782:	697a      	ldr	r2, [r7, #20]
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	4313      	orrs	r3, r2
 800b788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	693a      	ldr	r2, [r7, #16]
 800b78e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	697a      	ldr	r2, [r7, #20]
 800b794:	621a      	str	r2, [r3, #32]
}
 800b796:	bf00      	nop
 800b798:	371c      	adds	r7, #28
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7a2:	b480      	push	{r7}
 800b7a4:	b087      	sub	sp, #28
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	60f8      	str	r0, [r7, #12]
 800b7aa:	60b9      	str	r1, [r7, #8]
 800b7ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6a1b      	ldr	r3, [r3, #32]
 800b7b2:	f023 0210 	bic.w	r2, r3, #16
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	699b      	ldr	r3, [r3, #24]
 800b7be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6a1b      	ldr	r3, [r3, #32]
 800b7c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b7cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	031b      	lsls	r3, r3, #12
 800b7d2:	697a      	ldr	r2, [r7, #20]
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b7de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	011b      	lsls	r3, r3, #4
 800b7e4:	693a      	ldr	r2, [r7, #16]
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	697a      	ldr	r2, [r7, #20]
 800b7ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	693a      	ldr	r2, [r7, #16]
 800b7f4:	621a      	str	r2, [r3, #32]
}
 800b7f6:	bf00      	nop
 800b7f8:	371c      	adds	r7, #28
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr
	...

0800b804 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b804:	b480      	push	{r7}
 800b806:	b085      	sub	sp, #20
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	4b09      	ldr	r3, [pc, #36]	; (800b83c <TIM_ITRx_SetConfig+0x38>)
 800b818:	4013      	ands	r3, r2
 800b81a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b81c:	683a      	ldr	r2, [r7, #0]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	4313      	orrs	r3, r2
 800b822:	f043 0307 	orr.w	r3, r3, #7
 800b826:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	68fa      	ldr	r2, [r7, #12]
 800b82c:	609a      	str	r2, [r3, #8]
}
 800b82e:	bf00      	nop
 800b830:	3714      	adds	r7, #20
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr
 800b83a:	bf00      	nop
 800b83c:	ffcfff8f 	.word	0xffcfff8f

0800b840 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b840:	b480      	push	{r7}
 800b842:	b087      	sub	sp, #28
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
 800b84c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b85a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	021a      	lsls	r2, r3, #8
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	431a      	orrs	r2, r3
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	4313      	orrs	r3, r2
 800b868:	697a      	ldr	r2, [r7, #20]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	697a      	ldr	r2, [r7, #20]
 800b872:	609a      	str	r2, [r3, #8]
}
 800b874:	bf00      	nop
 800b876:	371c      	adds	r7, #28
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b890:	2b01      	cmp	r3, #1
 800b892:	d101      	bne.n	800b898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b894:	2302      	movs	r3, #2
 800b896:	e068      	b.n	800b96a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2201      	movs	r2, #1
 800b89c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2202      	movs	r2, #2
 800b8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a2e      	ldr	r2, [pc, #184]	; (800b978 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d004      	beq.n	800b8cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a2d      	ldr	r2, [pc, #180]	; (800b97c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d108      	bne.n	800b8de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b8d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	68fa      	ldr	r2, [r7, #12]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a1e      	ldr	r2, [pc, #120]	; (800b978 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d01d      	beq.n	800b93e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b90a:	d018      	beq.n	800b93e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a1b      	ldr	r2, [pc, #108]	; (800b980 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d013      	beq.n	800b93e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a1a      	ldr	r2, [pc, #104]	; (800b984 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d00e      	beq.n	800b93e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a18      	ldr	r2, [pc, #96]	; (800b988 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d009      	beq.n	800b93e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a13      	ldr	r2, [pc, #76]	; (800b97c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d004      	beq.n	800b93e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a14      	ldr	r2, [pc, #80]	; (800b98c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d10c      	bne.n	800b958 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b944:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	68ba      	ldr	r2, [r7, #8]
 800b94c:	4313      	orrs	r3, r2
 800b94e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	68ba      	ldr	r2, [r7, #8]
 800b956:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2201      	movs	r2, #1
 800b95c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	40010000 	.word	0x40010000
 800b97c:	40010400 	.word	0x40010400
 800b980:	40000400 	.word	0x40000400
 800b984:	40000800 	.word	0x40000800
 800b988:	40000c00 	.word	0x40000c00
 800b98c:	40001800 	.word	0x40001800

0800b990 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d101      	bne.n	800b9a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e042      	b.n	800ba28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d106      	bne.n	800b9ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f7fc fb5f 	bl	8008078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2224      	movs	r2, #36	; 0x24
 800b9be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f022 0201 	bic.w	r2, r2, #1
 800b9d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 fb12 	bl	800bffc <UART_SetConfig>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d101      	bne.n	800b9e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e022      	b.n	800ba28 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d002      	beq.n	800b9f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f001 f8b6 	bl	800cb5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	685a      	ldr	r2, [r3, #4]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	689a      	ldr	r2, [r3, #8]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f042 0201 	orr.w	r2, r2, #1
 800ba1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f001 f93d 	bl	800cca0 <UART_CheckIdleState>
 800ba26:	4603      	mov	r3, r0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3708      	adds	r7, #8
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba44:	2b20      	cmp	r3, #32
 800ba46:	d168      	bne.n	800bb1a <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d002      	beq.n	800ba54 <HAL_UART_Transmit_IT+0x24>
 800ba4e:	88fb      	ldrh	r3, [r7, #6]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d101      	bne.n	800ba58 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	e061      	b.n	800bb1c <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d101      	bne.n	800ba66 <HAL_UART_Transmit_IT+0x36>
 800ba62:	2302      	movs	r3, #2
 800ba64:	e05a      	b.n	800bb1c <HAL_UART_Transmit_IT+0xec>
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2201      	movs	r2, #1
 800ba6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	88fa      	ldrh	r2, [r7, #6]
 800ba78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	88fa      	ldrh	r2, [r7, #6]
 800ba80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2200      	movs	r2, #0
 800ba88:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2221      	movs	r2, #33	; 0x21
 800ba96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800baa2:	d11c      	bne.n	800bade <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baac:	d107      	bne.n	800babe <HAL_UART_Transmit_IT+0x8e>
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	691b      	ldr	r3, [r3, #16]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d103      	bne.n	800babe <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	4a1b      	ldr	r2, [pc, #108]	; (800bb28 <HAL_UART_Transmit_IT+0xf8>)
 800baba:	671a      	str	r2, [r3, #112]	; 0x70
 800babc:	e002      	b.n	800bac4 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	4a1a      	ldr	r2, [pc, #104]	; (800bb2c <HAL_UART_Transmit_IT+0xfc>)
 800bac2:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	689a      	ldr	r2, [r3, #8]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800bada:	609a      	str	r2, [r3, #8]
 800badc:	e01b      	b.n	800bb16 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bae6:	d107      	bne.n	800baf8 <HAL_UART_Transmit_IT+0xc8>
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	691b      	ldr	r3, [r3, #16]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d103      	bne.n	800baf8 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	4a0f      	ldr	r2, [pc, #60]	; (800bb30 <HAL_UART_Transmit_IT+0x100>)
 800baf4:	671a      	str	r2, [r3, #112]	; 0x70
 800baf6:	e002      	b.n	800bafe <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	4a0e      	ldr	r2, [pc, #56]	; (800bb34 <HAL_UART_Transmit_IT+0x104>)
 800bafc:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bb14:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800bb16:	2300      	movs	r3, #0
 800bb18:	e000      	b.n	800bb1c <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800bb1a:	2302      	movs	r3, #2
  }
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3714      	adds	r7, #20
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr
 800bb28:	0800d031 	.word	0x0800d031
 800bb2c:	0800cf97 	.word	0x0800cf97
 800bb30:	0800cf19 	.word	0x0800cf19
 800bb34:	0800cea5 	.word	0x0800cea5

0800bb38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	4613      	mov	r3, r2
 800bb44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb4c:	2b20      	cmp	r3, #32
 800bb4e:	f040 80bc 	bne.w	800bcca <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d002      	beq.n	800bb5e <HAL_UART_Receive_IT+0x26>
 800bb58:	88fb      	ldrh	r3, [r7, #6]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d101      	bne.n	800bb62 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e0b4      	b.n	800bccc <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d101      	bne.n	800bb70 <HAL_UART_Receive_IT+0x38>
 800bb6c:	2302      	movs	r3, #2
 800bb6e:	e0ad      	b.n	800bccc <HAL_UART_Receive_IT+0x194>
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2201      	movs	r2, #1
 800bb74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	68ba      	ldr	r2, [r7, #8]
 800bb7c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	88fa      	ldrh	r2, [r7, #6]
 800bb82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	88fa      	ldrh	r2, [r7, #6]
 800bb8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2200      	movs	r2, #0
 800bb92:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	689b      	ldr	r3, [r3, #8]
 800bb98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb9c:	d10e      	bne.n	800bbbc <HAL_UART_Receive_IT+0x84>
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d105      	bne.n	800bbb2 <HAL_UART_Receive_IT+0x7a>
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bbac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbb0:	e02d      	b.n	800bc0e <HAL_UART_Receive_IT+0xd6>
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	22ff      	movs	r2, #255	; 0xff
 800bbb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbba:	e028      	b.n	800bc0e <HAL_UART_Receive_IT+0xd6>
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10d      	bne.n	800bbe0 <HAL_UART_Receive_IT+0xa8>
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	691b      	ldr	r3, [r3, #16]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d104      	bne.n	800bbd6 <HAL_UART_Receive_IT+0x9e>
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	22ff      	movs	r2, #255	; 0xff
 800bbd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbd4:	e01b      	b.n	800bc0e <HAL_UART_Receive_IT+0xd6>
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	227f      	movs	r2, #127	; 0x7f
 800bbda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbde:	e016      	b.n	800bc0e <HAL_UART_Receive_IT+0xd6>
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbe8:	d10d      	bne.n	800bc06 <HAL_UART_Receive_IT+0xce>
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	691b      	ldr	r3, [r3, #16]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d104      	bne.n	800bbfc <HAL_UART_Receive_IT+0xc4>
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	227f      	movs	r2, #127	; 0x7f
 800bbf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbfa:	e008      	b.n	800bc0e <HAL_UART_Receive_IT+0xd6>
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	223f      	movs	r2, #63	; 0x3f
 800bc00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc04:	e003      	b.n	800bc0e <HAL_UART_Receive_IT+0xd6>
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2222      	movs	r2, #34	; 0x22
 800bc1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	689a      	ldr	r2, [r3, #8]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f042 0201 	orr.w	r2, r2, #1
 800bc2c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc36:	d12a      	bne.n	800bc8e <HAL_UART_Receive_IT+0x156>
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bc3e:	88fa      	ldrh	r2, [r7, #6]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d324      	bcc.n	800bc8e <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	689b      	ldr	r3, [r3, #8]
 800bc48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc4c:	d107      	bne.n	800bc5e <HAL_UART_Receive_IT+0x126>
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	691b      	ldr	r3, [r3, #16]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d103      	bne.n	800bc5e <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	4a1f      	ldr	r2, [pc, #124]	; (800bcd8 <HAL_UART_Receive_IT+0x1a0>)
 800bc5a:	66da      	str	r2, [r3, #108]	; 0x6c
 800bc5c:	e002      	b.n	800bc64 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	4a1e      	ldr	r2, [pc, #120]	; (800bcdc <HAL_UART_Receive_IT+0x1a4>)
 800bc62:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc7a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	689a      	ldr	r2, [r3, #8]
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bc8a:	609a      	str	r2, [r3, #8]
 800bc8c:	e01b      	b.n	800bcc6 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc96:	d107      	bne.n	800bca8 <HAL_UART_Receive_IT+0x170>
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	691b      	ldr	r3, [r3, #16]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d103      	bne.n	800bca8 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	4a0f      	ldr	r2, [pc, #60]	; (800bce0 <HAL_UART_Receive_IT+0x1a8>)
 800bca4:	66da      	str	r2, [r3, #108]	; 0x6c
 800bca6:	e002      	b.n	800bcae <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	4a0e      	ldr	r2, [pc, #56]	; (800bce4 <HAL_UART_Receive_IT+0x1ac>)
 800bcac:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800bcc4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	e000      	b.n	800bccc <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800bcca:	2302      	movs	r3, #2
  }
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3714      	adds	r7, #20
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr
 800bcd8:	0800d365 	.word	0x0800d365
 800bcdc:	0800d25d 	.word	0x0800d25d
 800bce0:	0800d1b3 	.word	0x0800d1b3
 800bce4:	0800d109 	.word	0x0800d109

0800bce8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b088      	sub	sp, #32
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	69db      	ldr	r3, [r3, #28]
 800bcf6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bd08:	69fa      	ldr	r2, [r7, #28]
 800bd0a:	f640 030f 	movw	r3, #2063	; 0x80f
 800bd0e:	4013      	ands	r3, r2
 800bd10:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d118      	bne.n	800bd4a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	f003 0320 	and.w	r3, r3, #32
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d013      	beq.n	800bd4a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	f003 0320 	and.w	r3, r3, #32
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d104      	bne.n	800bd36 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d009      	beq.n	800bd4a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f000 8145 	beq.w	800bfca <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	4798      	blx	r3
      }
      return;
 800bd48:	e13f      	b.n	800bfca <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f000 80e8 	beq.w	800bf22 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bd52:	697a      	ldr	r2, [r7, #20]
 800bd54:	4ba1      	ldr	r3, [pc, #644]	; (800bfdc <HAL_UART_IRQHandler+0x2f4>)
 800bd56:	4013      	ands	r3, r2
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d105      	bne.n	800bd68 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bd5c:	69ba      	ldr	r2, [r7, #24]
 800bd5e:	4ba0      	ldr	r3, [pc, #640]	; (800bfe0 <HAL_UART_IRQHandler+0x2f8>)
 800bd60:	4013      	ands	r3, r2
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	f000 80dd 	beq.w	800bf22 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	f003 0301 	and.w	r3, r3, #1
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d010      	beq.n	800bd94 <HAL_UART_IRQHandler+0xac>
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d00b      	beq.n	800bd94 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2201      	movs	r2, #1
 800bd82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd8a:	f043 0201 	orr.w	r2, r3, #1
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	f003 0302 	and.w	r3, r3, #2
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d010      	beq.n	800bdc0 <HAL_UART_IRQHandler+0xd8>
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f003 0301 	and.w	r3, r3, #1
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d00b      	beq.n	800bdc0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2202      	movs	r2, #2
 800bdae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdb6:	f043 0204 	orr.w	r2, r3, #4
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bdc0:	69fb      	ldr	r3, [r7, #28]
 800bdc2:	f003 0304 	and.w	r3, r3, #4
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d010      	beq.n	800bdec <HAL_UART_IRQHandler+0x104>
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	f003 0301 	and.w	r3, r3, #1
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d00b      	beq.n	800bdec <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	2204      	movs	r2, #4
 800bdda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bde2:	f043 0202 	orr.w	r2, r3, #2
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	f003 0308 	and.w	r3, r3, #8
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d015      	beq.n	800be22 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	f003 0320 	and.w	r3, r3, #32
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d104      	bne.n	800be0a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800be00:	697a      	ldr	r2, [r7, #20]
 800be02:	4b76      	ldr	r3, [pc, #472]	; (800bfdc <HAL_UART_IRQHandler+0x2f4>)
 800be04:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00b      	beq.n	800be22 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2208      	movs	r2, #8
 800be10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be18:	f043 0208 	orr.w	r2, r3, #8
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800be22:	69fb      	ldr	r3, [r7, #28]
 800be24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d011      	beq.n	800be50 <HAL_UART_IRQHandler+0x168>
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800be32:	2b00      	cmp	r3, #0
 800be34:	d00c      	beq.n	800be50 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be46:	f043 0220 	orr.w	r2, r3, #32
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be56:	2b00      	cmp	r3, #0
 800be58:	f000 80b9 	beq.w	800bfce <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	f003 0320 	and.w	r3, r3, #32
 800be62:	2b00      	cmp	r3, #0
 800be64:	d011      	beq.n	800be8a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800be66:	69bb      	ldr	r3, [r7, #24]
 800be68:	f003 0320 	and.w	r3, r3, #32
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d104      	bne.n	800be7a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be76:	2b00      	cmp	r3, #0
 800be78:	d007      	beq.n	800be8a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d003      	beq.n	800be8a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be90:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be9c:	2b40      	cmp	r3, #64	; 0x40
 800be9e:	d004      	beq.n	800beaa <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d031      	beq.n	800bf0e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 ffc0 	bl	800ce30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beba:	2b40      	cmp	r3, #64	; 0x40
 800bebc:	d123      	bne.n	800bf06 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	689a      	ldr	r2, [r3, #8]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800becc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d013      	beq.n	800befe <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800beda:	4a42      	ldr	r2, [pc, #264]	; (800bfe4 <HAL_UART_IRQHandler+0x2fc>)
 800bedc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7fc fb14 	bl	8008510 <HAL_DMA_Abort_IT>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d017      	beq.n	800bf1e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800bef8:	4610      	mov	r0, r2
 800befa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800befc:	e00f      	b.n	800bf1e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 f872 	bl	800bfe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf04:	e00b      	b.n	800bf1e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 f86e 	bl	800bfe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf0c:	e007      	b.n	800bf1e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 f86a 	bl	800bfe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800bf1c:	e057      	b.n	800bfce <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf1e:	bf00      	nop
    return;
 800bf20:	e055      	b.n	800bfce <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00d      	beq.n	800bf48 <HAL_UART_IRQHandler+0x260>
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d008      	beq.n	800bf48 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bf3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f001 fa93 	bl	800d46c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf46:	e045      	b.n	800bfd4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d012      	beq.n	800bf78 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bf52:	69bb      	ldr	r3, [r7, #24]
 800bf54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d104      	bne.n	800bf66 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d008      	beq.n	800bf78 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d031      	beq.n	800bfd2 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	4798      	blx	r3
    }
    return;
 800bf76:	e02c      	b.n	800bfd2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bf78:	69fb      	ldr	r3, [r7, #28]
 800bf7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d008      	beq.n	800bf94 <HAL_UART_IRQHandler+0x2ac>
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d003      	beq.n	800bf94 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f001 f8a1 	bl	800d0d4 <UART_EndTransmit_IT>
    return;
 800bf92:	e01f      	b.n	800bfd4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d008      	beq.n	800bfb0 <HAL_UART_IRQHandler+0x2c8>
 800bf9e:	69bb      	ldr	r3, [r7, #24]
 800bfa0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d003      	beq.n	800bfb0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f001 fa73 	bl	800d494 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bfae:	e011      	b.n	800bfd4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d00c      	beq.n	800bfd4 <HAL_UART_IRQHandler+0x2ec>
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	da09      	bge.n	800bfd4 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f001 fa5d 	bl	800d480 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bfc6:	bf00      	nop
 800bfc8:	e004      	b.n	800bfd4 <HAL_UART_IRQHandler+0x2ec>
      return;
 800bfca:	bf00      	nop
 800bfcc:	e002      	b.n	800bfd4 <HAL_UART_IRQHandler+0x2ec>
    return;
 800bfce:	bf00      	nop
 800bfd0:	e000      	b.n	800bfd4 <HAL_UART_IRQHandler+0x2ec>
    return;
 800bfd2:	bf00      	nop
  }
}
 800bfd4:	3720      	adds	r7, #32
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	10000001 	.word	0x10000001
 800bfe0:	04000120 	.word	0x04000120
 800bfe4:	0800ce79 	.word	0x0800ce79

0800bfe8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b083      	sub	sp, #12
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bff0:	bf00      	nop
 800bff2:	370c      	adds	r7, #12
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bffc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c000:	b08e      	sub	sp, #56	; 0x38
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c006:	2300      	movs	r3, #0
 800c008:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	689a      	ldr	r2, [r3, #8]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	691b      	ldr	r3, [r3, #16]
 800c014:	431a      	orrs	r2, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	695b      	ldr	r3, [r3, #20]
 800c01a:	431a      	orrs	r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	69db      	ldr	r3, [r3, #28]
 800c020:	4313      	orrs	r3, r2
 800c022:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c028:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c02a:	4313      	orrs	r3, r2
 800c02c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	4bc1      	ldr	r3, [pc, #772]	; (800c33c <UART_SetConfig+0x340>)
 800c036:	4013      	ands	r3, r2
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	6812      	ldr	r2, [r2, #0]
 800c03c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c03e:	430b      	orrs	r3, r1
 800c040:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	68da      	ldr	r2, [r3, #12]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	430a      	orrs	r2, r1
 800c056:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	699b      	ldr	r3, [r3, #24]
 800c05c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4ab7      	ldr	r2, [pc, #732]	; (800c340 <UART_SetConfig+0x344>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d004      	beq.n	800c072 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6a1b      	ldr	r3, [r3, #32]
 800c06c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c06e:	4313      	orrs	r3, r2
 800c070:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	689a      	ldr	r2, [r3, #8]
 800c078:	4bb2      	ldr	r3, [pc, #712]	; (800c344 <UART_SetConfig+0x348>)
 800c07a:	4013      	ands	r3, r2
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	6812      	ldr	r2, [r2, #0]
 800c080:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c082:	430b      	orrs	r3, r1
 800c084:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08c:	f023 010f 	bic.w	r1, r3, #15
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	430a      	orrs	r2, r1
 800c09a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4aa9      	ldr	r2, [pc, #676]	; (800c348 <UART_SetConfig+0x34c>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d177      	bne.n	800c196 <UART_SetConfig+0x19a>
 800c0a6:	4ba9      	ldr	r3, [pc, #676]	; (800c34c <UART_SetConfig+0x350>)
 800c0a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c0ae:	2b28      	cmp	r3, #40	; 0x28
 800c0b0:	d86c      	bhi.n	800c18c <UART_SetConfig+0x190>
 800c0b2:	a201      	add	r2, pc, #4	; (adr r2, 800c0b8 <UART_SetConfig+0xbc>)
 800c0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b8:	0800c15d 	.word	0x0800c15d
 800c0bc:	0800c18d 	.word	0x0800c18d
 800c0c0:	0800c18d 	.word	0x0800c18d
 800c0c4:	0800c18d 	.word	0x0800c18d
 800c0c8:	0800c18d 	.word	0x0800c18d
 800c0cc:	0800c18d 	.word	0x0800c18d
 800c0d0:	0800c18d 	.word	0x0800c18d
 800c0d4:	0800c18d 	.word	0x0800c18d
 800c0d8:	0800c165 	.word	0x0800c165
 800c0dc:	0800c18d 	.word	0x0800c18d
 800c0e0:	0800c18d 	.word	0x0800c18d
 800c0e4:	0800c18d 	.word	0x0800c18d
 800c0e8:	0800c18d 	.word	0x0800c18d
 800c0ec:	0800c18d 	.word	0x0800c18d
 800c0f0:	0800c18d 	.word	0x0800c18d
 800c0f4:	0800c18d 	.word	0x0800c18d
 800c0f8:	0800c16d 	.word	0x0800c16d
 800c0fc:	0800c18d 	.word	0x0800c18d
 800c100:	0800c18d 	.word	0x0800c18d
 800c104:	0800c18d 	.word	0x0800c18d
 800c108:	0800c18d 	.word	0x0800c18d
 800c10c:	0800c18d 	.word	0x0800c18d
 800c110:	0800c18d 	.word	0x0800c18d
 800c114:	0800c18d 	.word	0x0800c18d
 800c118:	0800c175 	.word	0x0800c175
 800c11c:	0800c18d 	.word	0x0800c18d
 800c120:	0800c18d 	.word	0x0800c18d
 800c124:	0800c18d 	.word	0x0800c18d
 800c128:	0800c18d 	.word	0x0800c18d
 800c12c:	0800c18d 	.word	0x0800c18d
 800c130:	0800c18d 	.word	0x0800c18d
 800c134:	0800c18d 	.word	0x0800c18d
 800c138:	0800c17d 	.word	0x0800c17d
 800c13c:	0800c18d 	.word	0x0800c18d
 800c140:	0800c18d 	.word	0x0800c18d
 800c144:	0800c18d 	.word	0x0800c18d
 800c148:	0800c18d 	.word	0x0800c18d
 800c14c:	0800c18d 	.word	0x0800c18d
 800c150:	0800c18d 	.word	0x0800c18d
 800c154:	0800c18d 	.word	0x0800c18d
 800c158:	0800c185 	.word	0x0800c185
 800c15c:	2301      	movs	r3, #1
 800c15e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c162:	e233      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c164:	2304      	movs	r3, #4
 800c166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c16a:	e22f      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c16c:	2308      	movs	r3, #8
 800c16e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c172:	e22b      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c174:	2310      	movs	r3, #16
 800c176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c17a:	e227      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c17c:	2320      	movs	r3, #32
 800c17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c182:	e223      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c184:	2340      	movs	r3, #64	; 0x40
 800c186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c18a:	e21f      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c18c:	2380      	movs	r3, #128	; 0x80
 800c18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c192:	bf00      	nop
 800c194:	e21a      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a6d      	ldr	r2, [pc, #436]	; (800c350 <UART_SetConfig+0x354>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d132      	bne.n	800c206 <UART_SetConfig+0x20a>
 800c1a0:	4b6a      	ldr	r3, [pc, #424]	; (800c34c <UART_SetConfig+0x350>)
 800c1a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1a4:	f003 0307 	and.w	r3, r3, #7
 800c1a8:	2b05      	cmp	r3, #5
 800c1aa:	d827      	bhi.n	800c1fc <UART_SetConfig+0x200>
 800c1ac:	a201      	add	r2, pc, #4	; (adr r2, 800c1b4 <UART_SetConfig+0x1b8>)
 800c1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b2:	bf00      	nop
 800c1b4:	0800c1cd 	.word	0x0800c1cd
 800c1b8:	0800c1d5 	.word	0x0800c1d5
 800c1bc:	0800c1dd 	.word	0x0800c1dd
 800c1c0:	0800c1e5 	.word	0x0800c1e5
 800c1c4:	0800c1ed 	.word	0x0800c1ed
 800c1c8:	0800c1f5 	.word	0x0800c1f5
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1d2:	e1fb      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c1d4:	2304      	movs	r3, #4
 800c1d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1da:	e1f7      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c1dc:	2308      	movs	r3, #8
 800c1de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1e2:	e1f3      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c1e4:	2310      	movs	r3, #16
 800c1e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1ea:	e1ef      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c1ec:	2320      	movs	r3, #32
 800c1ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1f2:	e1eb      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c1f4:	2340      	movs	r3, #64	; 0x40
 800c1f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1fa:	e1e7      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c1fc:	2380      	movs	r3, #128	; 0x80
 800c1fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c202:	bf00      	nop
 800c204:	e1e2      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a52      	ldr	r2, [pc, #328]	; (800c354 <UART_SetConfig+0x358>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d132      	bne.n	800c276 <UART_SetConfig+0x27a>
 800c210:	4b4e      	ldr	r3, [pc, #312]	; (800c34c <UART_SetConfig+0x350>)
 800c212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c214:	f003 0307 	and.w	r3, r3, #7
 800c218:	2b05      	cmp	r3, #5
 800c21a:	d827      	bhi.n	800c26c <UART_SetConfig+0x270>
 800c21c:	a201      	add	r2, pc, #4	; (adr r2, 800c224 <UART_SetConfig+0x228>)
 800c21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c222:	bf00      	nop
 800c224:	0800c23d 	.word	0x0800c23d
 800c228:	0800c245 	.word	0x0800c245
 800c22c:	0800c24d 	.word	0x0800c24d
 800c230:	0800c255 	.word	0x0800c255
 800c234:	0800c25d 	.word	0x0800c25d
 800c238:	0800c265 	.word	0x0800c265
 800c23c:	2300      	movs	r3, #0
 800c23e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c242:	e1c3      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c244:	2304      	movs	r3, #4
 800c246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c24a:	e1bf      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c24c:	2308      	movs	r3, #8
 800c24e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c252:	e1bb      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c254:	2310      	movs	r3, #16
 800c256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c25a:	e1b7      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c25c:	2320      	movs	r3, #32
 800c25e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c262:	e1b3      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c264:	2340      	movs	r3, #64	; 0x40
 800c266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c26a:	e1af      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c26c:	2380      	movs	r3, #128	; 0x80
 800c26e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c272:	bf00      	nop
 800c274:	e1aa      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a37      	ldr	r2, [pc, #220]	; (800c358 <UART_SetConfig+0x35c>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d132      	bne.n	800c2e6 <UART_SetConfig+0x2ea>
 800c280:	4b32      	ldr	r3, [pc, #200]	; (800c34c <UART_SetConfig+0x350>)
 800c282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c284:	f003 0307 	and.w	r3, r3, #7
 800c288:	2b05      	cmp	r3, #5
 800c28a:	d827      	bhi.n	800c2dc <UART_SetConfig+0x2e0>
 800c28c:	a201      	add	r2, pc, #4	; (adr r2, 800c294 <UART_SetConfig+0x298>)
 800c28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c292:	bf00      	nop
 800c294:	0800c2ad 	.word	0x0800c2ad
 800c298:	0800c2b5 	.word	0x0800c2b5
 800c29c:	0800c2bd 	.word	0x0800c2bd
 800c2a0:	0800c2c5 	.word	0x0800c2c5
 800c2a4:	0800c2cd 	.word	0x0800c2cd
 800c2a8:	0800c2d5 	.word	0x0800c2d5
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2b2:	e18b      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c2b4:	2304      	movs	r3, #4
 800c2b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2ba:	e187      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c2bc:	2308      	movs	r3, #8
 800c2be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2c2:	e183      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c2c4:	2310      	movs	r3, #16
 800c2c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2ca:	e17f      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c2cc:	2320      	movs	r3, #32
 800c2ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2d2:	e17b      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c2d4:	2340      	movs	r3, #64	; 0x40
 800c2d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2da:	e177      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c2dc:	2380      	movs	r3, #128	; 0x80
 800c2de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2e2:	bf00      	nop
 800c2e4:	e172      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a1c      	ldr	r2, [pc, #112]	; (800c35c <UART_SetConfig+0x360>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d144      	bne.n	800c37a <UART_SetConfig+0x37e>
 800c2f0:	4b16      	ldr	r3, [pc, #88]	; (800c34c <UART_SetConfig+0x350>)
 800c2f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2f4:	f003 0307 	and.w	r3, r3, #7
 800c2f8:	2b05      	cmp	r3, #5
 800c2fa:	d839      	bhi.n	800c370 <UART_SetConfig+0x374>
 800c2fc:	a201      	add	r2, pc, #4	; (adr r2, 800c304 <UART_SetConfig+0x308>)
 800c2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c302:	bf00      	nop
 800c304:	0800c31d 	.word	0x0800c31d
 800c308:	0800c325 	.word	0x0800c325
 800c30c:	0800c32d 	.word	0x0800c32d
 800c310:	0800c335 	.word	0x0800c335
 800c314:	0800c361 	.word	0x0800c361
 800c318:	0800c369 	.word	0x0800c369
 800c31c:	2300      	movs	r3, #0
 800c31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c322:	e153      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c324:	2304      	movs	r3, #4
 800c326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c32a:	e14f      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c32c:	2308      	movs	r3, #8
 800c32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c332:	e14b      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c334:	2310      	movs	r3, #16
 800c336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c33a:	e147      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c33c:	cfff69f3 	.word	0xcfff69f3
 800c340:	58000c00 	.word	0x58000c00
 800c344:	11fff4ff 	.word	0x11fff4ff
 800c348:	40011000 	.word	0x40011000
 800c34c:	58024400 	.word	0x58024400
 800c350:	40004400 	.word	0x40004400
 800c354:	40004800 	.word	0x40004800
 800c358:	40004c00 	.word	0x40004c00
 800c35c:	40005000 	.word	0x40005000
 800c360:	2320      	movs	r3, #32
 800c362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c366:	e131      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c368:	2340      	movs	r3, #64	; 0x40
 800c36a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c36e:	e12d      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c370:	2380      	movs	r3, #128	; 0x80
 800c372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c376:	bf00      	nop
 800c378:	e128      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4ab6      	ldr	r2, [pc, #728]	; (800c658 <UART_SetConfig+0x65c>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d178      	bne.n	800c476 <UART_SetConfig+0x47a>
 800c384:	4bb5      	ldr	r3, [pc, #724]	; (800c65c <UART_SetConfig+0x660>)
 800c386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c388:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c38c:	2b28      	cmp	r3, #40	; 0x28
 800c38e:	d86d      	bhi.n	800c46c <UART_SetConfig+0x470>
 800c390:	a201      	add	r2, pc, #4	; (adr r2, 800c398 <UART_SetConfig+0x39c>)
 800c392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c396:	bf00      	nop
 800c398:	0800c43d 	.word	0x0800c43d
 800c39c:	0800c46d 	.word	0x0800c46d
 800c3a0:	0800c46d 	.word	0x0800c46d
 800c3a4:	0800c46d 	.word	0x0800c46d
 800c3a8:	0800c46d 	.word	0x0800c46d
 800c3ac:	0800c46d 	.word	0x0800c46d
 800c3b0:	0800c46d 	.word	0x0800c46d
 800c3b4:	0800c46d 	.word	0x0800c46d
 800c3b8:	0800c445 	.word	0x0800c445
 800c3bc:	0800c46d 	.word	0x0800c46d
 800c3c0:	0800c46d 	.word	0x0800c46d
 800c3c4:	0800c46d 	.word	0x0800c46d
 800c3c8:	0800c46d 	.word	0x0800c46d
 800c3cc:	0800c46d 	.word	0x0800c46d
 800c3d0:	0800c46d 	.word	0x0800c46d
 800c3d4:	0800c46d 	.word	0x0800c46d
 800c3d8:	0800c44d 	.word	0x0800c44d
 800c3dc:	0800c46d 	.word	0x0800c46d
 800c3e0:	0800c46d 	.word	0x0800c46d
 800c3e4:	0800c46d 	.word	0x0800c46d
 800c3e8:	0800c46d 	.word	0x0800c46d
 800c3ec:	0800c46d 	.word	0x0800c46d
 800c3f0:	0800c46d 	.word	0x0800c46d
 800c3f4:	0800c46d 	.word	0x0800c46d
 800c3f8:	0800c455 	.word	0x0800c455
 800c3fc:	0800c46d 	.word	0x0800c46d
 800c400:	0800c46d 	.word	0x0800c46d
 800c404:	0800c46d 	.word	0x0800c46d
 800c408:	0800c46d 	.word	0x0800c46d
 800c40c:	0800c46d 	.word	0x0800c46d
 800c410:	0800c46d 	.word	0x0800c46d
 800c414:	0800c46d 	.word	0x0800c46d
 800c418:	0800c45d 	.word	0x0800c45d
 800c41c:	0800c46d 	.word	0x0800c46d
 800c420:	0800c46d 	.word	0x0800c46d
 800c424:	0800c46d 	.word	0x0800c46d
 800c428:	0800c46d 	.word	0x0800c46d
 800c42c:	0800c46d 	.word	0x0800c46d
 800c430:	0800c46d 	.word	0x0800c46d
 800c434:	0800c46d 	.word	0x0800c46d
 800c438:	0800c465 	.word	0x0800c465
 800c43c:	2301      	movs	r3, #1
 800c43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c442:	e0c3      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c444:	2304      	movs	r3, #4
 800c446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c44a:	e0bf      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c44c:	2308      	movs	r3, #8
 800c44e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c452:	e0bb      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c454:	2310      	movs	r3, #16
 800c456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c45a:	e0b7      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c45c:	2320      	movs	r3, #32
 800c45e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c462:	e0b3      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c464:	2340      	movs	r3, #64	; 0x40
 800c466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c46a:	e0af      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c46c:	2380      	movs	r3, #128	; 0x80
 800c46e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c472:	bf00      	nop
 800c474:	e0aa      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a79      	ldr	r2, [pc, #484]	; (800c660 <UART_SetConfig+0x664>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d132      	bne.n	800c4e6 <UART_SetConfig+0x4ea>
 800c480:	4b76      	ldr	r3, [pc, #472]	; (800c65c <UART_SetConfig+0x660>)
 800c482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c484:	f003 0307 	and.w	r3, r3, #7
 800c488:	2b05      	cmp	r3, #5
 800c48a:	d827      	bhi.n	800c4dc <UART_SetConfig+0x4e0>
 800c48c:	a201      	add	r2, pc, #4	; (adr r2, 800c494 <UART_SetConfig+0x498>)
 800c48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c492:	bf00      	nop
 800c494:	0800c4ad 	.word	0x0800c4ad
 800c498:	0800c4b5 	.word	0x0800c4b5
 800c49c:	0800c4bd 	.word	0x0800c4bd
 800c4a0:	0800c4c5 	.word	0x0800c4c5
 800c4a4:	0800c4cd 	.word	0x0800c4cd
 800c4a8:	0800c4d5 	.word	0x0800c4d5
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4b2:	e08b      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c4b4:	2304      	movs	r3, #4
 800c4b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ba:	e087      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c4bc:	2308      	movs	r3, #8
 800c4be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4c2:	e083      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c4c4:	2310      	movs	r3, #16
 800c4c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ca:	e07f      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c4cc:	2320      	movs	r3, #32
 800c4ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4d2:	e07b      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c4d4:	2340      	movs	r3, #64	; 0x40
 800c4d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4da:	e077      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c4dc:	2380      	movs	r3, #128	; 0x80
 800c4de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4e2:	bf00      	nop
 800c4e4:	e072      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a5e      	ldr	r2, [pc, #376]	; (800c664 <UART_SetConfig+0x668>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d132      	bne.n	800c556 <UART_SetConfig+0x55a>
 800c4f0:	4b5a      	ldr	r3, [pc, #360]	; (800c65c <UART_SetConfig+0x660>)
 800c4f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4f4:	f003 0307 	and.w	r3, r3, #7
 800c4f8:	2b05      	cmp	r3, #5
 800c4fa:	d827      	bhi.n	800c54c <UART_SetConfig+0x550>
 800c4fc:	a201      	add	r2, pc, #4	; (adr r2, 800c504 <UART_SetConfig+0x508>)
 800c4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c502:	bf00      	nop
 800c504:	0800c51d 	.word	0x0800c51d
 800c508:	0800c525 	.word	0x0800c525
 800c50c:	0800c52d 	.word	0x0800c52d
 800c510:	0800c535 	.word	0x0800c535
 800c514:	0800c53d 	.word	0x0800c53d
 800c518:	0800c545 	.word	0x0800c545
 800c51c:	2300      	movs	r3, #0
 800c51e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c522:	e053      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c524:	2304      	movs	r3, #4
 800c526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c52a:	e04f      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c52c:	2308      	movs	r3, #8
 800c52e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c532:	e04b      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c534:	2310      	movs	r3, #16
 800c536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c53a:	e047      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c53c:	2320      	movs	r3, #32
 800c53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c542:	e043      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c544:	2340      	movs	r3, #64	; 0x40
 800c546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c54a:	e03f      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c54c:	2380      	movs	r3, #128	; 0x80
 800c54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c552:	bf00      	nop
 800c554:	e03a      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4a43      	ldr	r2, [pc, #268]	; (800c668 <UART_SetConfig+0x66c>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d132      	bne.n	800c5c6 <UART_SetConfig+0x5ca>
 800c560:	4b3e      	ldr	r3, [pc, #248]	; (800c65c <UART_SetConfig+0x660>)
 800c562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c564:	f003 0307 	and.w	r3, r3, #7
 800c568:	2b05      	cmp	r3, #5
 800c56a:	d827      	bhi.n	800c5bc <UART_SetConfig+0x5c0>
 800c56c:	a201      	add	r2, pc, #4	; (adr r2, 800c574 <UART_SetConfig+0x578>)
 800c56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c572:	bf00      	nop
 800c574:	0800c58d 	.word	0x0800c58d
 800c578:	0800c595 	.word	0x0800c595
 800c57c:	0800c59d 	.word	0x0800c59d
 800c580:	0800c5a5 	.word	0x0800c5a5
 800c584:	0800c5ad 	.word	0x0800c5ad
 800c588:	0800c5b5 	.word	0x0800c5b5
 800c58c:	2302      	movs	r3, #2
 800c58e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c592:	e01b      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c594:	2304      	movs	r3, #4
 800c596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c59a:	e017      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c59c:	2308      	movs	r3, #8
 800c59e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5a2:	e013      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c5a4:	2310      	movs	r3, #16
 800c5a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5aa:	e00f      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c5ac:	2320      	movs	r3, #32
 800c5ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5b2:	e00b      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c5b4:	2340      	movs	r3, #64	; 0x40
 800c5b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5ba:	e007      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c5bc:	2380      	movs	r3, #128	; 0x80
 800c5be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5c2:	bf00      	nop
 800c5c4:	e002      	b.n	800c5cc <UART_SetConfig+0x5d0>
 800c5c6:	2380      	movs	r3, #128	; 0x80
 800c5c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a25      	ldr	r2, [pc, #148]	; (800c668 <UART_SetConfig+0x66c>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	f040 80b8 	bne.w	800c748 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c5d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c5dc:	2b08      	cmp	r3, #8
 800c5de:	d019      	beq.n	800c614 <UART_SetConfig+0x618>
 800c5e0:	2b08      	cmp	r3, #8
 800c5e2:	dc04      	bgt.n	800c5ee <UART_SetConfig+0x5f2>
 800c5e4:	2b02      	cmp	r3, #2
 800c5e6:	d009      	beq.n	800c5fc <UART_SetConfig+0x600>
 800c5e8:	2b04      	cmp	r3, #4
 800c5ea:	d00b      	beq.n	800c604 <UART_SetConfig+0x608>
 800c5ec:	e042      	b.n	800c674 <UART_SetConfig+0x678>
 800c5ee:	2b20      	cmp	r3, #32
 800c5f0:	d02b      	beq.n	800c64a <UART_SetConfig+0x64e>
 800c5f2:	2b40      	cmp	r3, #64	; 0x40
 800c5f4:	d02c      	beq.n	800c650 <UART_SetConfig+0x654>
 800c5f6:	2b10      	cmp	r3, #16
 800c5f8:	d014      	beq.n	800c624 <UART_SetConfig+0x628>
 800c5fa:	e03b      	b.n	800c674 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c5fc:	f7fe faa0 	bl	800ab40 <HAL_RCCEx_GetD3PCLK1Freq>
 800c600:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c602:	e03d      	b.n	800c680 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c604:	f107 0314 	add.w	r3, r7, #20
 800c608:	4618      	mov	r0, r3
 800c60a:	f7fe faaf 	bl	800ab6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c60e:	69bb      	ldr	r3, [r7, #24]
 800c610:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c612:	e035      	b.n	800c680 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c614:	f107 0308 	add.w	r3, r7, #8
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fe fbf3 	bl	800ae04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c622:	e02d      	b.n	800c680 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c624:	4b0d      	ldr	r3, [pc, #52]	; (800c65c <UART_SetConfig+0x660>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f003 0320 	and.w	r3, r3, #32
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d009      	beq.n	800c644 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c630:	4b0a      	ldr	r3, [pc, #40]	; (800c65c <UART_SetConfig+0x660>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	08db      	lsrs	r3, r3, #3
 800c636:	f003 0303 	and.w	r3, r3, #3
 800c63a:	4a0c      	ldr	r2, [pc, #48]	; (800c66c <UART_SetConfig+0x670>)
 800c63c:	fa22 f303 	lsr.w	r3, r2, r3
 800c640:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c642:	e01d      	b.n	800c680 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800c644:	4b09      	ldr	r3, [pc, #36]	; (800c66c <UART_SetConfig+0x670>)
 800c646:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c648:	e01a      	b.n	800c680 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c64a:	4b09      	ldr	r3, [pc, #36]	; (800c670 <UART_SetConfig+0x674>)
 800c64c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c64e:	e017      	b.n	800c680 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c650:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c654:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c656:	e013      	b.n	800c680 <UART_SetConfig+0x684>
 800c658:	40011400 	.word	0x40011400
 800c65c:	58024400 	.word	0x58024400
 800c660:	40007800 	.word	0x40007800
 800c664:	40007c00 	.word	0x40007c00
 800c668:	58000c00 	.word	0x58000c00
 800c66c:	03d09000 	.word	0x03d09000
 800c670:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800c674:	2300      	movs	r3, #0
 800c676:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c678:	2301      	movs	r3, #1
 800c67a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c67e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c682:	2b00      	cmp	r3, #0
 800c684:	f000 824d 	beq.w	800cb22 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c68c:	4aad      	ldr	r2, [pc, #692]	; (800c944 <UART_SetConfig+0x948>)
 800c68e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c692:	461a      	mov	r2, r3
 800c694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c696:	fbb3 f3f2 	udiv	r3, r3, r2
 800c69a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	685a      	ldr	r2, [r3, #4]
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	005b      	lsls	r3, r3, #1
 800c6a4:	4413      	add	r3, r2
 800c6a6:	6a3a      	ldr	r2, [r7, #32]
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d305      	bcc.n	800c6b8 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6b2:	6a3a      	ldr	r2, [r7, #32]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d903      	bls.n	800c6c0 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c6be:	e230      	b.n	800cb22 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f04f 0100 	mov.w	r1, #0
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6cc:	4a9d      	ldr	r2, [pc, #628]	; (800c944 <UART_SetConfig+0x948>)
 800c6ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	f04f 0400 	mov.w	r4, #0
 800c6d8:	461a      	mov	r2, r3
 800c6da:	4623      	mov	r3, r4
 800c6dc:	f7f3 feac 	bl	8000438 <__aeabi_uldivmod>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	460c      	mov	r4, r1
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	4622      	mov	r2, r4
 800c6e8:	f04f 0300 	mov.w	r3, #0
 800c6ec:	f04f 0400 	mov.w	r4, #0
 800c6f0:	0214      	lsls	r4, r2, #8
 800c6f2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c6f6:	020b      	lsls	r3, r1, #8
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	6852      	ldr	r2, [r2, #4]
 800c6fc:	0852      	lsrs	r2, r2, #1
 800c6fe:	4611      	mov	r1, r2
 800c700:	f04f 0200 	mov.w	r2, #0
 800c704:	eb13 0b01 	adds.w	fp, r3, r1
 800c708:	eb44 0c02 	adc.w	ip, r4, r2
 800c70c:	4658      	mov	r0, fp
 800c70e:	4661      	mov	r1, ip
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	f04f 0400 	mov.w	r4, #0
 800c718:	461a      	mov	r2, r3
 800c71a:	4623      	mov	r3, r4
 800c71c:	f7f3 fe8c 	bl	8000438 <__aeabi_uldivmod>
 800c720:	4603      	mov	r3, r0
 800c722:	460c      	mov	r4, r1
 800c724:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c728:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c72c:	d308      	bcc.n	800c740 <UART_SetConfig+0x744>
 800c72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c730:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c734:	d204      	bcs.n	800c740 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c73c:	60da      	str	r2, [r3, #12]
 800c73e:	e1f0      	b.n	800cb22 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800c740:	2301      	movs	r3, #1
 800c742:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c746:	e1ec      	b.n	800cb22 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	69db      	ldr	r3, [r3, #28]
 800c74c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c750:	f040 8100 	bne.w	800c954 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800c754:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c758:	2b40      	cmp	r3, #64	; 0x40
 800c75a:	f200 80b7 	bhi.w	800c8cc <UART_SetConfig+0x8d0>
 800c75e:	a201      	add	r2, pc, #4	; (adr r2, 800c764 <UART_SetConfig+0x768>)
 800c760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c764:	0800c869 	.word	0x0800c869
 800c768:	0800c871 	.word	0x0800c871
 800c76c:	0800c8cd 	.word	0x0800c8cd
 800c770:	0800c8cd 	.word	0x0800c8cd
 800c774:	0800c879 	.word	0x0800c879
 800c778:	0800c8cd 	.word	0x0800c8cd
 800c77c:	0800c8cd 	.word	0x0800c8cd
 800c780:	0800c8cd 	.word	0x0800c8cd
 800c784:	0800c889 	.word	0x0800c889
 800c788:	0800c8cd 	.word	0x0800c8cd
 800c78c:	0800c8cd 	.word	0x0800c8cd
 800c790:	0800c8cd 	.word	0x0800c8cd
 800c794:	0800c8cd 	.word	0x0800c8cd
 800c798:	0800c8cd 	.word	0x0800c8cd
 800c79c:	0800c8cd 	.word	0x0800c8cd
 800c7a0:	0800c8cd 	.word	0x0800c8cd
 800c7a4:	0800c899 	.word	0x0800c899
 800c7a8:	0800c8cd 	.word	0x0800c8cd
 800c7ac:	0800c8cd 	.word	0x0800c8cd
 800c7b0:	0800c8cd 	.word	0x0800c8cd
 800c7b4:	0800c8cd 	.word	0x0800c8cd
 800c7b8:	0800c8cd 	.word	0x0800c8cd
 800c7bc:	0800c8cd 	.word	0x0800c8cd
 800c7c0:	0800c8cd 	.word	0x0800c8cd
 800c7c4:	0800c8cd 	.word	0x0800c8cd
 800c7c8:	0800c8cd 	.word	0x0800c8cd
 800c7cc:	0800c8cd 	.word	0x0800c8cd
 800c7d0:	0800c8cd 	.word	0x0800c8cd
 800c7d4:	0800c8cd 	.word	0x0800c8cd
 800c7d8:	0800c8cd 	.word	0x0800c8cd
 800c7dc:	0800c8cd 	.word	0x0800c8cd
 800c7e0:	0800c8cd 	.word	0x0800c8cd
 800c7e4:	0800c8bf 	.word	0x0800c8bf
 800c7e8:	0800c8cd 	.word	0x0800c8cd
 800c7ec:	0800c8cd 	.word	0x0800c8cd
 800c7f0:	0800c8cd 	.word	0x0800c8cd
 800c7f4:	0800c8cd 	.word	0x0800c8cd
 800c7f8:	0800c8cd 	.word	0x0800c8cd
 800c7fc:	0800c8cd 	.word	0x0800c8cd
 800c800:	0800c8cd 	.word	0x0800c8cd
 800c804:	0800c8cd 	.word	0x0800c8cd
 800c808:	0800c8cd 	.word	0x0800c8cd
 800c80c:	0800c8cd 	.word	0x0800c8cd
 800c810:	0800c8cd 	.word	0x0800c8cd
 800c814:	0800c8cd 	.word	0x0800c8cd
 800c818:	0800c8cd 	.word	0x0800c8cd
 800c81c:	0800c8cd 	.word	0x0800c8cd
 800c820:	0800c8cd 	.word	0x0800c8cd
 800c824:	0800c8cd 	.word	0x0800c8cd
 800c828:	0800c8cd 	.word	0x0800c8cd
 800c82c:	0800c8cd 	.word	0x0800c8cd
 800c830:	0800c8cd 	.word	0x0800c8cd
 800c834:	0800c8cd 	.word	0x0800c8cd
 800c838:	0800c8cd 	.word	0x0800c8cd
 800c83c:	0800c8cd 	.word	0x0800c8cd
 800c840:	0800c8cd 	.word	0x0800c8cd
 800c844:	0800c8cd 	.word	0x0800c8cd
 800c848:	0800c8cd 	.word	0x0800c8cd
 800c84c:	0800c8cd 	.word	0x0800c8cd
 800c850:	0800c8cd 	.word	0x0800c8cd
 800c854:	0800c8cd 	.word	0x0800c8cd
 800c858:	0800c8cd 	.word	0x0800c8cd
 800c85c:	0800c8cd 	.word	0x0800c8cd
 800c860:	0800c8cd 	.word	0x0800c8cd
 800c864:	0800c8c5 	.word	0x0800c8c5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c868:	f7fd fa50 	bl	8009d0c <HAL_RCC_GetPCLK1Freq>
 800c86c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c86e:	e033      	b.n	800c8d8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c870:	f7fd fa62 	bl	8009d38 <HAL_RCC_GetPCLK2Freq>
 800c874:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c876:	e02f      	b.n	800c8d8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c878:	f107 0314 	add.w	r3, r7, #20
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7fe f975 	bl	800ab6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c882:	69bb      	ldr	r3, [r7, #24]
 800c884:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c886:	e027      	b.n	800c8d8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c888:	f107 0308 	add.w	r3, r7, #8
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7fe fab9 	bl	800ae04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c896:	e01f      	b.n	800c8d8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c898:	4b2b      	ldr	r3, [pc, #172]	; (800c948 <UART_SetConfig+0x94c>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f003 0320 	and.w	r3, r3, #32
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d009      	beq.n	800c8b8 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c8a4:	4b28      	ldr	r3, [pc, #160]	; (800c948 <UART_SetConfig+0x94c>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	08db      	lsrs	r3, r3, #3
 800c8aa:	f003 0303 	and.w	r3, r3, #3
 800c8ae:	4a27      	ldr	r2, [pc, #156]	; (800c94c <UART_SetConfig+0x950>)
 800c8b0:	fa22 f303 	lsr.w	r3, r2, r3
 800c8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c8b6:	e00f      	b.n	800c8d8 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800c8b8:	4b24      	ldr	r3, [pc, #144]	; (800c94c <UART_SetConfig+0x950>)
 800c8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c8bc:	e00c      	b.n	800c8d8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c8be:	4b24      	ldr	r3, [pc, #144]	; (800c950 <UART_SetConfig+0x954>)
 800c8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c8c2:	e009      	b.n	800c8d8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c8ca:	e005      	b.n	800c8d8 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c8d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	f000 8121 	beq.w	800cb22 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e4:	4a17      	ldr	r2, [pc, #92]	; (800c944 <UART_SetConfig+0x948>)
 800c8e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8f2:	005a      	lsls	r2, r3, #1
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	085b      	lsrs	r3, r3, #1
 800c8fa:	441a      	add	r2, r3
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	fbb2 f3f3 	udiv	r3, r2, r3
 800c904:	b29b      	uxth	r3, r3
 800c906:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90a:	2b0f      	cmp	r3, #15
 800c90c:	d916      	bls.n	800c93c <UART_SetConfig+0x940>
 800c90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c914:	d212      	bcs.n	800c93c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c918:	b29b      	uxth	r3, r3
 800c91a:	f023 030f 	bic.w	r3, r3, #15
 800c91e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c922:	085b      	lsrs	r3, r3, #1
 800c924:	b29b      	uxth	r3, r3
 800c926:	f003 0307 	and.w	r3, r3, #7
 800c92a:	b29a      	uxth	r2, r3
 800c92c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c92e:	4313      	orrs	r3, r2
 800c930:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c938:	60da      	str	r2, [r3, #12]
 800c93a:	e0f2      	b.n	800cb22 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800c93c:	2301      	movs	r3, #1
 800c93e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c942:	e0ee      	b.n	800cb22 <UART_SetConfig+0xb26>
 800c944:	08014218 	.word	0x08014218
 800c948:	58024400 	.word	0x58024400
 800c94c:	03d09000 	.word	0x03d09000
 800c950:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800c954:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c958:	2b40      	cmp	r3, #64	; 0x40
 800c95a:	f200 80b7 	bhi.w	800cacc <UART_SetConfig+0xad0>
 800c95e:	a201      	add	r2, pc, #4	; (adr r2, 800c964 <UART_SetConfig+0x968>)
 800c960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c964:	0800ca69 	.word	0x0800ca69
 800c968:	0800ca71 	.word	0x0800ca71
 800c96c:	0800cacd 	.word	0x0800cacd
 800c970:	0800cacd 	.word	0x0800cacd
 800c974:	0800ca79 	.word	0x0800ca79
 800c978:	0800cacd 	.word	0x0800cacd
 800c97c:	0800cacd 	.word	0x0800cacd
 800c980:	0800cacd 	.word	0x0800cacd
 800c984:	0800ca89 	.word	0x0800ca89
 800c988:	0800cacd 	.word	0x0800cacd
 800c98c:	0800cacd 	.word	0x0800cacd
 800c990:	0800cacd 	.word	0x0800cacd
 800c994:	0800cacd 	.word	0x0800cacd
 800c998:	0800cacd 	.word	0x0800cacd
 800c99c:	0800cacd 	.word	0x0800cacd
 800c9a0:	0800cacd 	.word	0x0800cacd
 800c9a4:	0800ca99 	.word	0x0800ca99
 800c9a8:	0800cacd 	.word	0x0800cacd
 800c9ac:	0800cacd 	.word	0x0800cacd
 800c9b0:	0800cacd 	.word	0x0800cacd
 800c9b4:	0800cacd 	.word	0x0800cacd
 800c9b8:	0800cacd 	.word	0x0800cacd
 800c9bc:	0800cacd 	.word	0x0800cacd
 800c9c0:	0800cacd 	.word	0x0800cacd
 800c9c4:	0800cacd 	.word	0x0800cacd
 800c9c8:	0800cacd 	.word	0x0800cacd
 800c9cc:	0800cacd 	.word	0x0800cacd
 800c9d0:	0800cacd 	.word	0x0800cacd
 800c9d4:	0800cacd 	.word	0x0800cacd
 800c9d8:	0800cacd 	.word	0x0800cacd
 800c9dc:	0800cacd 	.word	0x0800cacd
 800c9e0:	0800cacd 	.word	0x0800cacd
 800c9e4:	0800cabf 	.word	0x0800cabf
 800c9e8:	0800cacd 	.word	0x0800cacd
 800c9ec:	0800cacd 	.word	0x0800cacd
 800c9f0:	0800cacd 	.word	0x0800cacd
 800c9f4:	0800cacd 	.word	0x0800cacd
 800c9f8:	0800cacd 	.word	0x0800cacd
 800c9fc:	0800cacd 	.word	0x0800cacd
 800ca00:	0800cacd 	.word	0x0800cacd
 800ca04:	0800cacd 	.word	0x0800cacd
 800ca08:	0800cacd 	.word	0x0800cacd
 800ca0c:	0800cacd 	.word	0x0800cacd
 800ca10:	0800cacd 	.word	0x0800cacd
 800ca14:	0800cacd 	.word	0x0800cacd
 800ca18:	0800cacd 	.word	0x0800cacd
 800ca1c:	0800cacd 	.word	0x0800cacd
 800ca20:	0800cacd 	.word	0x0800cacd
 800ca24:	0800cacd 	.word	0x0800cacd
 800ca28:	0800cacd 	.word	0x0800cacd
 800ca2c:	0800cacd 	.word	0x0800cacd
 800ca30:	0800cacd 	.word	0x0800cacd
 800ca34:	0800cacd 	.word	0x0800cacd
 800ca38:	0800cacd 	.word	0x0800cacd
 800ca3c:	0800cacd 	.word	0x0800cacd
 800ca40:	0800cacd 	.word	0x0800cacd
 800ca44:	0800cacd 	.word	0x0800cacd
 800ca48:	0800cacd 	.word	0x0800cacd
 800ca4c:	0800cacd 	.word	0x0800cacd
 800ca50:	0800cacd 	.word	0x0800cacd
 800ca54:	0800cacd 	.word	0x0800cacd
 800ca58:	0800cacd 	.word	0x0800cacd
 800ca5c:	0800cacd 	.word	0x0800cacd
 800ca60:	0800cacd 	.word	0x0800cacd
 800ca64:	0800cac5 	.word	0x0800cac5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca68:	f7fd f950 	bl	8009d0c <HAL_RCC_GetPCLK1Freq>
 800ca6c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ca6e:	e033      	b.n	800cad8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca70:	f7fd f962 	bl	8009d38 <HAL_RCC_GetPCLK2Freq>
 800ca74:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ca76:	e02f      	b.n	800cad8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca78:	f107 0314 	add.w	r3, r7, #20
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f7fe f875 	bl	800ab6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca86:	e027      	b.n	800cad8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca88:	f107 0308 	add.w	r3, r7, #8
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7fe f9b9 	bl	800ae04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca96:	e01f      	b.n	800cad8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca98:	4b2c      	ldr	r3, [pc, #176]	; (800cb4c <UART_SetConfig+0xb50>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f003 0320 	and.w	r3, r3, #32
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d009      	beq.n	800cab8 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800caa4:	4b29      	ldr	r3, [pc, #164]	; (800cb4c <UART_SetConfig+0xb50>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	08db      	lsrs	r3, r3, #3
 800caaa:	f003 0303 	and.w	r3, r3, #3
 800caae:	4a28      	ldr	r2, [pc, #160]	; (800cb50 <UART_SetConfig+0xb54>)
 800cab0:	fa22 f303 	lsr.w	r3, r2, r3
 800cab4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cab6:	e00f      	b.n	800cad8 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800cab8:	4b25      	ldr	r3, [pc, #148]	; (800cb50 <UART_SetConfig+0xb54>)
 800caba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cabc:	e00c      	b.n	800cad8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cabe:	4b25      	ldr	r3, [pc, #148]	; (800cb54 <UART_SetConfig+0xb58>)
 800cac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cac2:	e009      	b.n	800cad8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cac4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cac8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800caca:	e005      	b.n	800cad8 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800cacc:	2300      	movs	r3, #0
 800cace:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cad0:	2301      	movs	r3, #1
 800cad2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cad6:	bf00      	nop
    }

    if (pclk != 0U)
 800cad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d021      	beq.n	800cb22 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae2:	4a1d      	ldr	r2, [pc, #116]	; (800cb58 <UART_SetConfig+0xb5c>)
 800cae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cae8:	461a      	mov	r2, r3
 800caea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caec:	fbb3 f2f2 	udiv	r2, r3, r2
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	085b      	lsrs	r3, r3, #1
 800caf6:	441a      	add	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb06:	2b0f      	cmp	r3, #15
 800cb08:	d908      	bls.n	800cb1c <UART_SetConfig+0xb20>
 800cb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb10:	d204      	bcs.n	800cb1c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb18:	60da      	str	r2, [r3, #12]
 800cb1a:	e002      	b.n	800cb22 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2201      	movs	r2, #1
 800cb26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2200      	movs	r2, #0
 800cb36:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800cb3e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3738      	adds	r7, #56	; 0x38
 800cb46:	46bd      	mov	sp, r7
 800cb48:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800cb4c:	58024400 	.word	0x58024400
 800cb50:	03d09000 	.word	0x03d09000
 800cb54:	003d0900 	.word	0x003d0900
 800cb58:	08014218 	.word	0x08014218

0800cb5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb68:	f003 0301 	and.w	r3, r3, #1
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00a      	beq.n	800cb86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	430a      	orrs	r2, r1
 800cb84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb8a:	f003 0302 	and.w	r3, r3, #2
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00a      	beq.n	800cba8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	430a      	orrs	r2, r1
 800cba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbac:	f003 0304 	and.w	r3, r3, #4
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00a      	beq.n	800cbca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	430a      	orrs	r2, r1
 800cbc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbce:	f003 0308 	and.w	r3, r3, #8
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d00a      	beq.n	800cbec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	430a      	orrs	r2, r1
 800cbea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbf0:	f003 0310 	and.w	r3, r3, #16
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d00a      	beq.n	800cc0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	689b      	ldr	r3, [r3, #8]
 800cbfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	430a      	orrs	r2, r1
 800cc0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc12:	f003 0320 	and.w	r3, r3, #32
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d00a      	beq.n	800cc30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	430a      	orrs	r2, r1
 800cc2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d01a      	beq.n	800cc72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	430a      	orrs	r2, r1
 800cc50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc5a:	d10a      	bne.n	800cc72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	430a      	orrs	r2, r1
 800cc70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d00a      	beq.n	800cc94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	430a      	orrs	r2, r1
 800cc92:	605a      	str	r2, [r3, #4]
  }
}
 800cc94:	bf00      	nop
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b086      	sub	sp, #24
 800cca4:	af02      	add	r7, sp, #8
 800cca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ccb0:	f7fb fae4 	bl	800827c <HAL_GetTick>
 800ccb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f003 0308 	and.w	r3, r3, #8
 800ccc0:	2b08      	cmp	r3, #8
 800ccc2:	d10e      	bne.n	800cce2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ccc8:	9300      	str	r3, [sp, #0]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2200      	movs	r2, #0
 800ccce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f000 f82c 	bl	800cd30 <UART_WaitOnFlagUntilTimeout>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d001      	beq.n	800cce2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccde:	2303      	movs	r3, #3
 800cce0:	e022      	b.n	800cd28 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f003 0304 	and.w	r3, r3, #4
 800ccec:	2b04      	cmp	r3, #4
 800ccee:	d10e      	bne.n	800cd0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ccf4:	9300      	str	r3, [sp, #0]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 f816 	bl	800cd30 <UART_WaitOnFlagUntilTimeout>
 800cd04:	4603      	mov	r3, r0
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d001      	beq.n	800cd0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd0a:	2303      	movs	r3, #3
 800cd0c:	e00c      	b.n	800cd28 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2220      	movs	r2, #32
 800cd12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2220      	movs	r2, #32
 800cd1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cd26:	2300      	movs	r3, #0
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3710      	adds	r7, #16
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	603b      	str	r3, [r7, #0]
 800cd3c:	4613      	mov	r3, r2
 800cd3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd40:	e062      	b.n	800ce08 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd42:	69bb      	ldr	r3, [r7, #24]
 800cd44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd48:	d05e      	beq.n	800ce08 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd4a:	f7fb fa97 	bl	800827c <HAL_GetTick>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	1ad3      	subs	r3, r2, r3
 800cd54:	69ba      	ldr	r2, [r7, #24]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d302      	bcc.n	800cd60 <UART_WaitOnFlagUntilTimeout+0x30>
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d11d      	bne.n	800cd9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	681a      	ldr	r2, [r3, #0]
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cd6e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	689a      	ldr	r2, [r3, #8]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f022 0201 	bic.w	r2, r2, #1
 800cd7e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2220      	movs	r2, #32
 800cd84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2220      	movs	r2, #32
 800cd8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2200      	movs	r2, #0
 800cd94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800cd98:	2303      	movs	r3, #3
 800cd9a:	e045      	b.n	800ce28 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f003 0304 	and.w	r3, r3, #4
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d02e      	beq.n	800ce08 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	69db      	ldr	r3, [r3, #28]
 800cdb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cdb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdb8:	d126      	bne.n	800ce08 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cdc2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cdd2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	689a      	ldr	r2, [r3, #8]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f022 0201 	bic.w	r2, r2, #1
 800cde2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2220      	movs	r2, #32
 800cde8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2220      	movs	r2, #32
 800cdf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2220      	movs	r2, #32
 800cdf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800ce04:	2303      	movs	r3, #3
 800ce06:	e00f      	b.n	800ce28 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	69da      	ldr	r2, [r3, #28]
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	4013      	ands	r3, r2
 800ce12:	68ba      	ldr	r2, [r7, #8]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	bf0c      	ite	eq
 800ce18:	2301      	moveq	r3, #1
 800ce1a:	2300      	movne	r3, #0
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	461a      	mov	r2, r3
 800ce20:	79fb      	ldrb	r3, [r7, #7]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d08d      	beq.n	800cd42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce26:	2300      	movs	r3, #0
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3710      	adds	r7, #16
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce30:	b480      	push	{r7}
 800ce32:	b083      	sub	sp, #12
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ce46:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	6899      	ldr	r1, [r3, #8]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	4b08      	ldr	r3, [pc, #32]	; (800ce74 <UART_EndRxTransfer+0x44>)
 800ce54:	400b      	ands	r3, r1
 800ce56:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2220      	movs	r2, #32
 800ce5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800ce66:	bf00      	nop
 800ce68:	370c      	adds	r7, #12
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	effffffe 	.word	0xeffffffe

0800ce78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2200      	movs	r2, #0
 800ce92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce96:	68f8      	ldr	r0, [r7, #12]
 800ce98:	f7ff f8a6 	bl	800bfe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce9c:	bf00      	nop
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cea4:	b480      	push	{r7}
 800cea6:	b083      	sub	sp, #12
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ceb2:	2b21      	cmp	r3, #33	; 0x21
 800ceb4:	d12a      	bne.n	800cf0c <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d110      	bne.n	800cee4 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ced0:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	681a      	ldr	r2, [r3, #0]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cee0:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800cee2:	e013      	b.n	800cf0c <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cee8:	781a      	ldrb	r2, [r3, #0]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cef4:	1c5a      	adds	r2, r3, #1
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	3b01      	subs	r3, #1
 800cf04:	b29a      	uxth	r2, r3
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800cf0c:	bf00      	nop
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b085      	sub	sp, #20
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf26:	2b21      	cmp	r3, #33	; 0x21
 800cf28:	d12f      	bne.n	800cf8a <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d110      	bne.n	800cf58 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cf44:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf54:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800cf56:	e018      	b.n	800cf8a <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	881b      	ldrh	r3, [r3, #0]
 800cf62:	461a      	mov	r2, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cf6c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf72:	1c9a      	adds	r2, r3, #2
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	3b01      	subs	r3, #1
 800cf82:	b29a      	uxth	r2, r3
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800cf8a:	bf00      	nop
 800cf8c:	3714      	adds	r7, #20
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf94:	4770      	bx	lr

0800cf96 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cf96:	b480      	push	{r7}
 800cf98:	b085      	sub	sp, #20
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cfa4:	2b21      	cmp	r3, #33	; 0x21
 800cfa6:	d13d      	bne.n	800d024 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cfae:	81fb      	strh	r3, [r7, #14]
 800cfb0:	e035      	b.n	800d01e <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cfb8:	b29b      	uxth	r3, r3
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d111      	bne.n	800cfe2 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	689a      	ldr	r2, [r3, #8]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800cfcc:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	681a      	ldr	r2, [r3, #0]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cfdc:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800cfde:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800cfe0:	e020      	b.n	800d024 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	69db      	ldr	r3, [r3, #28]
 800cfe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d013      	beq.n	800d018 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cff4:	781a      	ldrb	r2, [r3, #0]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d000:	1c5a      	adds	r2, r3, #1
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	3b01      	subs	r3, #1
 800d010:	b29a      	uxth	r2, r3
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d018:	89fb      	ldrh	r3, [r7, #14]
 800d01a:	3b01      	subs	r3, #1
 800d01c:	81fb      	strh	r3, [r7, #14]
 800d01e:	89fb      	ldrh	r3, [r7, #14]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d1c6      	bne.n	800cfb2 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800d024:	bf00      	nop
 800d026:	3714      	adds	r7, #20
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr

0800d030 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d03e:	2b21      	cmp	r3, #33	; 0x21
 800d040:	d142      	bne.n	800d0c8 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d048:	81fb      	strh	r3, [r7, #14]
 800d04a:	e03a      	b.n	800d0c2 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d052:	b29b      	uxth	r3, r3
 800d054:	2b00      	cmp	r3, #0
 800d056:	d111      	bne.n	800d07c <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	689a      	ldr	r2, [r3, #8]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800d066:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	681a      	ldr	r2, [r3, #0]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d076:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800d078:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800d07a:	e025      	b.n	800d0c8 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	69db      	ldr	r3, [r3, #28]
 800d082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d086:	2b00      	cmp	r3, #0
 800d088:	d018      	beq.n	800d0bc <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d08e:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	881b      	ldrh	r3, [r3, #0]
 800d094:	461a      	mov	r2, r3
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d09e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0a4:	1c9a      	adds	r2, r3, #2
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d0b0:	b29b      	uxth	r3, r3
 800d0b2:	3b01      	subs	r3, #1
 800d0b4:	b29a      	uxth	r2, r3
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d0bc:	89fb      	ldrh	r3, [r7, #14]
 800d0be:	3b01      	subs	r3, #1
 800d0c0:	81fb      	strh	r3, [r7, #14]
 800d0c2:	89fb      	ldrh	r3, [r7, #14]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d1c1      	bne.n	800d04c <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800d0c8:	bf00      	nop
 800d0ca:	3714      	adds	r7, #20
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d0ea:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2220      	movs	r2, #32
 800d0f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7fa fe5c 	bl	8007db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d100:	bf00      	nop
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d116:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d11e:	2b22      	cmp	r3, #34	; 0x22
 800d120:	d13b      	bne.n	800d19a <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d128:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d12a:	89bb      	ldrh	r3, [r7, #12]
 800d12c:	b2d9      	uxtb	r1, r3
 800d12e:	89fb      	ldrh	r3, [r7, #14]
 800d130:	b2da      	uxtb	r2, r3
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d136:	400a      	ands	r2, r1
 800d138:	b2d2      	uxtb	r2, r2
 800d13a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d140:	1c5a      	adds	r2, r3, #1
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d14c:	b29b      	uxth	r3, r3
 800d14e:	3b01      	subs	r3, #1
 800d150:	b29a      	uxth	r2, r3
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d15e:	b29b      	uxth	r3, r3
 800d160:	2b00      	cmp	r3, #0
 800d162:	d122      	bne.n	800d1aa <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d172:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	689a      	ldr	r2, [r3, #8]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f022 0201 	bic.w	r2, r2, #1
 800d182:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2220      	movs	r2, #32
 800d188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2200      	movs	r2, #0
 800d190:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f7fa fe20 	bl	8007dd8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d198:	e007      	b.n	800d1aa <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	699a      	ldr	r2, [r3, #24]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f042 0208 	orr.w	r2, r2, #8
 800d1a8:	619a      	str	r2, [r3, #24]
}
 800d1aa:	bf00      	nop
 800d1ac:	3710      	adds	r7, #16
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}

0800d1b2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d1b2:	b580      	push	{r7, lr}
 800d1b4:	b084      	sub	sp, #16
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d1c0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1c8:	2b22      	cmp	r3, #34	; 0x22
 800d1ca:	d13b      	bne.n	800d244 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1d2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1d8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800d1da:	89ba      	ldrh	r2, [r7, #12]
 800d1dc:	89fb      	ldrh	r3, [r7, #14]
 800d1de:	4013      	ands	r3, r2
 800d1e0:	b29a      	uxth	r2, r3
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1ea:	1c9a      	adds	r2, r3, #2
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d1f6:	b29b      	uxth	r3, r3
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	b29a      	uxth	r2, r3
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d208:	b29b      	uxth	r3, r3
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d122      	bne.n	800d254 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	681a      	ldr	r2, [r3, #0]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d21c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	689a      	ldr	r2, [r3, #8]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f022 0201 	bic.w	r2, r2, #1
 800d22c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2220      	movs	r2, #32
 800d232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2200      	movs	r2, #0
 800d23a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f7fa fdcb 	bl	8007dd8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d242:	e007      	b.n	800d254 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	699a      	ldr	r2, [r3, #24]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f042 0208 	orr.w	r2, r2, #8
 800d252:	619a      	str	r2, [r3, #24]
}
 800d254:	bf00      	nop
 800d256:	3710      	adds	r7, #16
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d26a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d272:	2b22      	cmp	r3, #34	; 0x22
 800d274:	d166      	bne.n	800d344 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d27c:	81fb      	strh	r3, [r7, #14]
 800d27e:	e03d      	b.n	800d2fc <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d286:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d288:	893b      	ldrh	r3, [r7, #8]
 800d28a:	b2d9      	uxtb	r1, r3
 800d28c:	89bb      	ldrh	r3, [r7, #12]
 800d28e:	b2da      	uxtb	r2, r3
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d294:	400a      	ands	r2, r1
 800d296:	b2d2      	uxtb	r2, r2
 800d298:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d29e:	1c5a      	adds	r2, r3, #1
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	3b01      	subs	r3, #1
 800d2ae:	b29a      	uxth	r2, r3
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d119      	bne.n	800d2f6 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d2d0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	6899      	ldr	r1, [r3, #8]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	4b1f      	ldr	r3, [pc, #124]	; (800d35c <UART_RxISR_8BIT_FIFOEN+0x100>)
 800d2de:	400b      	ands	r3, r1
 800d2e0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2220      	movs	r2, #32
 800d2e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f7fa fd71 	bl	8007dd8 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800d2f6:	89fb      	ldrh	r3, [r7, #14]
 800d2f8:	3b01      	subs	r3, #1
 800d2fa:	81fb      	strh	r3, [r7, #14]
 800d2fc:	89fb      	ldrh	r3, [r7, #14]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d1be      	bne.n	800d280 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d308:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d30a:	897b      	ldrh	r3, [r7, #10]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d021      	beq.n	800d354 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d316:	897a      	ldrh	r2, [r7, #10]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d21b      	bcs.n	800d354 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	689a      	ldr	r2, [r3, #8]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d32a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	4a0c      	ldr	r2, [pc, #48]	; (800d360 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800d330:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f042 0220 	orr.w	r2, r2, #32
 800d340:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d342:	e007      	b.n	800d354 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	699a      	ldr	r2, [r3, #24]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f042 0208 	orr.w	r2, r2, #8
 800d352:	619a      	str	r2, [r3, #24]
}
 800d354:	bf00      	nop
 800d356:	3710      	adds	r7, #16
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	effffffe 	.word	0xeffffffe
 800d360:	0800d109 	.word	0x0800d109

0800d364 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b086      	sub	sp, #24
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d372:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d37a:	2b22      	cmp	r3, #34	; 0x22
 800d37c:	d166      	bne.n	800d44c <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d384:	82fb      	strh	r3, [r7, #22]
 800d386:	e03d      	b.n	800d404 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d38e:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d394:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800d396:	8a3a      	ldrh	r2, [r7, #16]
 800d398:	8abb      	ldrh	r3, [r7, #20]
 800d39a:	4013      	ands	r3, r2
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3a6:	1c9a      	adds	r2, r3, #2
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	3b01      	subs	r3, #1
 800d3b6:	b29a      	uxth	r2, r3
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3c4:	b29b      	uxth	r3, r3
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d119      	bne.n	800d3fe <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d3d8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	6899      	ldr	r1, [r3, #8]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681a      	ldr	r2, [r3, #0]
 800d3e4:	4b1f      	ldr	r3, [pc, #124]	; (800d464 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800d3e6:	400b      	ands	r3, r1
 800d3e8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2220      	movs	r2, #32
 800d3ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f7fa fced 	bl	8007dd8 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800d3fe:	8afb      	ldrh	r3, [r7, #22]
 800d400:	3b01      	subs	r3, #1
 800d402:	82fb      	strh	r3, [r7, #22]
 800d404:	8afb      	ldrh	r3, [r7, #22]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d1be      	bne.n	800d388 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d410:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d412:	8a7b      	ldrh	r3, [r7, #18]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d021      	beq.n	800d45c <UART_RxISR_16BIT_FIFOEN+0xf8>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d41e:	8a7a      	ldrh	r2, [r7, #18]
 800d420:	429a      	cmp	r2, r3
 800d422:	d21b      	bcs.n	800d45c <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	689a      	ldr	r2, [r3, #8]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d432:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	4a0c      	ldr	r2, [pc, #48]	; (800d468 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800d438:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f042 0220 	orr.w	r2, r2, #32
 800d448:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d44a:	e007      	b.n	800d45c <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	699a      	ldr	r2, [r3, #24]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f042 0208 	orr.w	r2, r2, #8
 800d45a:	619a      	str	r2, [r3, #24]
}
 800d45c:	bf00      	nop
 800d45e:	3718      	adds	r7, #24
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	effffffe 	.word	0xeffffffe
 800d468:	0800d1b3 	.word	0x0800d1b3

0800d46c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d474:	bf00      	nop
 800d476:	370c      	adds	r7, #12
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d488:	bf00      	nop
 800d48a:	370c      	adds	r7, #12
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d49c:	bf00      	nop
 800d49e:	370c      	adds	r7, #12
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b085      	sub	sp, #20
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d101      	bne.n	800d4be <HAL_UARTEx_DisableFifoMode+0x16>
 800d4ba:	2302      	movs	r3, #2
 800d4bc:	e027      	b.n	800d50e <HAL_UARTEx_DisableFifoMode+0x66>
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2224      	movs	r2, #36	; 0x24
 800d4ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f022 0201 	bic.w	r2, r2, #1
 800d4e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d4ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	68fa      	ldr	r2, [r7, #12]
 800d4fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2220      	movs	r2, #32
 800d500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d50c:	2300      	movs	r3, #0
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3714      	adds	r7, #20
 800d512:	46bd      	mov	sp, r7
 800d514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d518:	4770      	bx	lr

0800d51a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d51a:	b580      	push	{r7, lr}
 800d51c:	b084      	sub	sp, #16
 800d51e:	af00      	add	r7, sp, #0
 800d520:	6078      	str	r0, [r7, #4]
 800d522:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d52a:	2b01      	cmp	r3, #1
 800d52c:	d101      	bne.n	800d532 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d52e:	2302      	movs	r3, #2
 800d530:	e02d      	b.n	800d58e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2201      	movs	r2, #1
 800d536:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2224      	movs	r2, #36	; 0x24
 800d53e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	681a      	ldr	r2, [r3, #0]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f022 0201 	bic.w	r2, r2, #1
 800d558:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	683a      	ldr	r2, [r7, #0]
 800d56a:	430a      	orrs	r2, r1
 800d56c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 f850 	bl	800d614 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	68fa      	ldr	r2, [r7, #12]
 800d57a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2220      	movs	r2, #32
 800d580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2200      	movs	r2, #0
 800d588:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d58c:	2300      	movs	r3, #0
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3710      	adds	r7, #16
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b084      	sub	sp, #16
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
 800d59e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d5a6:	2b01      	cmp	r3, #1
 800d5a8:	d101      	bne.n	800d5ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d5aa:	2302      	movs	r3, #2
 800d5ac:	e02d      	b.n	800d60a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2224      	movs	r2, #36	; 0x24
 800d5ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	681a      	ldr	r2, [r3, #0]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f022 0201 	bic.w	r2, r2, #1
 800d5d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	689b      	ldr	r3, [r3, #8]
 800d5dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	683a      	ldr	r2, [r7, #0]
 800d5e6:	430a      	orrs	r2, r1
 800d5e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 f812 	bl	800d614 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	68fa      	ldr	r2, [r7, #12]
 800d5f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2220      	movs	r2, #32
 800d5fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2200      	movs	r2, #0
 800d604:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d608:	2300      	movs	r3, #0
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3710      	adds	r7, #16
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
	...

0800d614 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d614:	b480      	push	{r7}
 800d616:	b089      	sub	sp, #36	; 0x24
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800d61c:	4a2f      	ldr	r2, [pc, #188]	; (800d6dc <UARTEx_SetNbDataToProcess+0xc8>)
 800d61e:	f107 0314 	add.w	r3, r7, #20
 800d622:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d626:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800d62a:	4a2d      	ldr	r2, [pc, #180]	; (800d6e0 <UARTEx_SetNbDataToProcess+0xcc>)
 800d62c:	f107 030c 	add.w	r3, r7, #12
 800d630:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d634:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d108      	bne.n	800d652 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2201      	movs	r2, #1
 800d644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2201      	movs	r2, #1
 800d64c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d650:	e03d      	b.n	800d6ce <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d652:	2310      	movs	r3, #16
 800d654:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d656:	2310      	movs	r3, #16
 800d658:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	689b      	ldr	r3, [r3, #8]
 800d660:	0e5b      	lsrs	r3, r3, #25
 800d662:	b2db      	uxtb	r3, r3
 800d664:	f003 0307 	and.w	r3, r3, #7
 800d668:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	689b      	ldr	r3, [r3, #8]
 800d670:	0f5b      	lsrs	r3, r3, #29
 800d672:	b2db      	uxtb	r3, r3
 800d674:	f003 0307 	and.w	r3, r3, #7
 800d678:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800d67a:	7fbb      	ldrb	r3, [r7, #30]
 800d67c:	7f3a      	ldrb	r2, [r7, #28]
 800d67e:	f107 0120 	add.w	r1, r7, #32
 800d682:	440a      	add	r2, r1
 800d684:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d688:	fb02 f303 	mul.w	r3, r2, r3
 800d68c:	7f3a      	ldrb	r2, [r7, #28]
 800d68e:	f107 0120 	add.w	r1, r7, #32
 800d692:	440a      	add	r2, r1
 800d694:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d698:	fb93 f3f2 	sdiv	r3, r3, r2
 800d69c:	b29a      	uxth	r2, r3
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800d6a4:	7ffb      	ldrb	r3, [r7, #31]
 800d6a6:	7f7a      	ldrb	r2, [r7, #29]
 800d6a8:	f107 0120 	add.w	r1, r7, #32
 800d6ac:	440a      	add	r2, r1
 800d6ae:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d6b2:	fb02 f303 	mul.w	r3, r2, r3
 800d6b6:	7f7a      	ldrb	r2, [r7, #29]
 800d6b8:	f107 0120 	add.w	r1, r7, #32
 800d6bc:	440a      	add	r2, r1
 800d6be:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d6c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d6c6:	b29a      	uxth	r2, r3
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d6ce:	bf00      	nop
 800d6d0:	3724      	adds	r7, #36	; 0x24
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr
 800d6da:	bf00      	nop
 800d6dc:	0800e41c 	.word	0x0800e41c
 800d6e0:	0800e424 	.word	0x0800e424

0800d6e4 <__errno>:
 800d6e4:	4b01      	ldr	r3, [pc, #4]	; (800d6ec <__errno+0x8>)
 800d6e6:	6818      	ldr	r0, [r3, #0]
 800d6e8:	4770      	bx	lr
 800d6ea:	bf00      	nop
 800d6ec:	24000010 	.word	0x24000010

0800d6f0 <__libc_init_array>:
 800d6f0:	b570      	push	{r4, r5, r6, lr}
 800d6f2:	4e0d      	ldr	r6, [pc, #52]	; (800d728 <__libc_init_array+0x38>)
 800d6f4:	4c0d      	ldr	r4, [pc, #52]	; (800d72c <__libc_init_array+0x3c>)
 800d6f6:	1ba4      	subs	r4, r4, r6
 800d6f8:	10a4      	asrs	r4, r4, #2
 800d6fa:	2500      	movs	r5, #0
 800d6fc:	42a5      	cmp	r5, r4
 800d6fe:	d109      	bne.n	800d714 <__libc_init_array+0x24>
 800d700:	4e0b      	ldr	r6, [pc, #44]	; (800d730 <__libc_init_array+0x40>)
 800d702:	4c0c      	ldr	r4, [pc, #48]	; (800d734 <__libc_init_array+0x44>)
 800d704:	f000 fe7e 	bl	800e404 <_init>
 800d708:	1ba4      	subs	r4, r4, r6
 800d70a:	10a4      	asrs	r4, r4, #2
 800d70c:	2500      	movs	r5, #0
 800d70e:	42a5      	cmp	r5, r4
 800d710:	d105      	bne.n	800d71e <__libc_init_array+0x2e>
 800d712:	bd70      	pop	{r4, r5, r6, pc}
 800d714:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d718:	4798      	blx	r3
 800d71a:	3501      	adds	r5, #1
 800d71c:	e7ee      	b.n	800d6fc <__libc_init_array+0xc>
 800d71e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d722:	4798      	blx	r3
 800d724:	3501      	adds	r5, #1
 800d726:	e7f2      	b.n	800d70e <__libc_init_array+0x1e>
 800d728:	08014264 	.word	0x08014264
 800d72c:	08014264 	.word	0x08014264
 800d730:	08014264 	.word	0x08014264
 800d734:	0801426c 	.word	0x0801426c

0800d738 <malloc>:
 800d738:	4b02      	ldr	r3, [pc, #8]	; (800d744 <malloc+0xc>)
 800d73a:	4601      	mov	r1, r0
 800d73c:	6818      	ldr	r0, [r3, #0]
 800d73e:	f000 b80b 	b.w	800d758 <_malloc_r>
 800d742:	bf00      	nop
 800d744:	24000010 	.word	0x24000010

0800d748 <free>:
 800d748:	4b02      	ldr	r3, [pc, #8]	; (800d754 <free+0xc>)
 800d74a:	4601      	mov	r1, r0
 800d74c:	6818      	ldr	r0, [r3, #0]
 800d74e:	f000 baef 	b.w	800dd30 <_free_r>
 800d752:	bf00      	nop
 800d754:	24000010 	.word	0x24000010

0800d758 <_malloc_r>:
 800d758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d75c:	f101 050b 	add.w	r5, r1, #11
 800d760:	2d16      	cmp	r5, #22
 800d762:	4606      	mov	r6, r0
 800d764:	d906      	bls.n	800d774 <_malloc_r+0x1c>
 800d766:	f035 0507 	bics.w	r5, r5, #7
 800d76a:	d504      	bpl.n	800d776 <_malloc_r+0x1e>
 800d76c:	230c      	movs	r3, #12
 800d76e:	6033      	str	r3, [r6, #0]
 800d770:	2400      	movs	r4, #0
 800d772:	e1a8      	b.n	800dac6 <_malloc_r+0x36e>
 800d774:	2510      	movs	r5, #16
 800d776:	428d      	cmp	r5, r1
 800d778:	d3f8      	bcc.n	800d76c <_malloc_r+0x14>
 800d77a:	4630      	mov	r0, r6
 800d77c:	f000 fa36 	bl	800dbec <__malloc_lock>
 800d780:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800d784:	4fc0      	ldr	r7, [pc, #768]	; (800da88 <_malloc_r+0x330>)
 800d786:	d238      	bcs.n	800d7fa <_malloc_r+0xa2>
 800d788:	f105 0208 	add.w	r2, r5, #8
 800d78c:	443a      	add	r2, r7
 800d78e:	f1a2 0108 	sub.w	r1, r2, #8
 800d792:	6854      	ldr	r4, [r2, #4]
 800d794:	428c      	cmp	r4, r1
 800d796:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 800d79a:	d102      	bne.n	800d7a2 <_malloc_r+0x4a>
 800d79c:	68d4      	ldr	r4, [r2, #12]
 800d79e:	42a2      	cmp	r2, r4
 800d7a0:	d010      	beq.n	800d7c4 <_malloc_r+0x6c>
 800d7a2:	6863      	ldr	r3, [r4, #4]
 800d7a4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800d7a8:	f023 0303 	bic.w	r3, r3, #3
 800d7ac:	60ca      	str	r2, [r1, #12]
 800d7ae:	4423      	add	r3, r4
 800d7b0:	6091      	str	r1, [r2, #8]
 800d7b2:	685a      	ldr	r2, [r3, #4]
 800d7b4:	f042 0201 	orr.w	r2, r2, #1
 800d7b8:	605a      	str	r2, [r3, #4]
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	f000 fa1c 	bl	800dbf8 <__malloc_unlock>
 800d7c0:	3408      	adds	r4, #8
 800d7c2:	e180      	b.n	800dac6 <_malloc_r+0x36e>
 800d7c4:	3302      	adds	r3, #2
 800d7c6:	4ab1      	ldr	r2, [pc, #708]	; (800da8c <_malloc_r+0x334>)
 800d7c8:	693c      	ldr	r4, [r7, #16]
 800d7ca:	4294      	cmp	r4, r2
 800d7cc:	4611      	mov	r1, r2
 800d7ce:	d075      	beq.n	800d8bc <_malloc_r+0x164>
 800d7d0:	6860      	ldr	r0, [r4, #4]
 800d7d2:	f020 0c03 	bic.w	ip, r0, #3
 800d7d6:	ebac 0005 	sub.w	r0, ip, r5
 800d7da:	280f      	cmp	r0, #15
 800d7dc:	dd48      	ble.n	800d870 <_malloc_r+0x118>
 800d7de:	1963      	adds	r3, r4, r5
 800d7e0:	f045 0501 	orr.w	r5, r5, #1
 800d7e4:	6065      	str	r5, [r4, #4]
 800d7e6:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800d7ea:	e9c3 2202 	strd	r2, r2, [r3, #8]
 800d7ee:	f040 0201 	orr.w	r2, r0, #1
 800d7f2:	605a      	str	r2, [r3, #4]
 800d7f4:	f844 000c 	str.w	r0, [r4, ip]
 800d7f8:	e7df      	b.n	800d7ba <_malloc_r+0x62>
 800d7fa:	0a6b      	lsrs	r3, r5, #9
 800d7fc:	d02a      	beq.n	800d854 <_malloc_r+0xfc>
 800d7fe:	2b04      	cmp	r3, #4
 800d800:	d812      	bhi.n	800d828 <_malloc_r+0xd0>
 800d802:	09ab      	lsrs	r3, r5, #6
 800d804:	3338      	adds	r3, #56	; 0x38
 800d806:	1c5a      	adds	r2, r3, #1
 800d808:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800d80c:	f1a2 0c08 	sub.w	ip, r2, #8
 800d810:	6854      	ldr	r4, [r2, #4]
 800d812:	4564      	cmp	r4, ip
 800d814:	d006      	beq.n	800d824 <_malloc_r+0xcc>
 800d816:	6862      	ldr	r2, [r4, #4]
 800d818:	f022 0203 	bic.w	r2, r2, #3
 800d81c:	1b50      	subs	r0, r2, r5
 800d81e:	280f      	cmp	r0, #15
 800d820:	dd1c      	ble.n	800d85c <_malloc_r+0x104>
 800d822:	3b01      	subs	r3, #1
 800d824:	3301      	adds	r3, #1
 800d826:	e7ce      	b.n	800d7c6 <_malloc_r+0x6e>
 800d828:	2b14      	cmp	r3, #20
 800d82a:	d801      	bhi.n	800d830 <_malloc_r+0xd8>
 800d82c:	335b      	adds	r3, #91	; 0x5b
 800d82e:	e7ea      	b.n	800d806 <_malloc_r+0xae>
 800d830:	2b54      	cmp	r3, #84	; 0x54
 800d832:	d802      	bhi.n	800d83a <_malloc_r+0xe2>
 800d834:	0b2b      	lsrs	r3, r5, #12
 800d836:	336e      	adds	r3, #110	; 0x6e
 800d838:	e7e5      	b.n	800d806 <_malloc_r+0xae>
 800d83a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800d83e:	d802      	bhi.n	800d846 <_malloc_r+0xee>
 800d840:	0beb      	lsrs	r3, r5, #15
 800d842:	3377      	adds	r3, #119	; 0x77
 800d844:	e7df      	b.n	800d806 <_malloc_r+0xae>
 800d846:	f240 5254 	movw	r2, #1364	; 0x554
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d804      	bhi.n	800d858 <_malloc_r+0x100>
 800d84e:	0cab      	lsrs	r3, r5, #18
 800d850:	337c      	adds	r3, #124	; 0x7c
 800d852:	e7d8      	b.n	800d806 <_malloc_r+0xae>
 800d854:	233f      	movs	r3, #63	; 0x3f
 800d856:	e7d6      	b.n	800d806 <_malloc_r+0xae>
 800d858:	237e      	movs	r3, #126	; 0x7e
 800d85a:	e7d4      	b.n	800d806 <_malloc_r+0xae>
 800d85c:	2800      	cmp	r0, #0
 800d85e:	68e1      	ldr	r1, [r4, #12]
 800d860:	db04      	blt.n	800d86c <_malloc_r+0x114>
 800d862:	68a3      	ldr	r3, [r4, #8]
 800d864:	60d9      	str	r1, [r3, #12]
 800d866:	608b      	str	r3, [r1, #8]
 800d868:	18a3      	adds	r3, r4, r2
 800d86a:	e7a2      	b.n	800d7b2 <_malloc_r+0x5a>
 800d86c:	460c      	mov	r4, r1
 800d86e:	e7d0      	b.n	800d812 <_malloc_r+0xba>
 800d870:	2800      	cmp	r0, #0
 800d872:	e9c7 2204 	strd	r2, r2, [r7, #16]
 800d876:	db07      	blt.n	800d888 <_malloc_r+0x130>
 800d878:	44a4      	add	ip, r4
 800d87a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800d87e:	f043 0301 	orr.w	r3, r3, #1
 800d882:	f8cc 3004 	str.w	r3, [ip, #4]
 800d886:	e798      	b.n	800d7ba <_malloc_r+0x62>
 800d888:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f080 8099 	bcs.w	800d9c4 <_malloc_r+0x26c>
 800d892:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800d896:	ea4f 0eac 	mov.w	lr, ip, asr #2
 800d89a:	2201      	movs	r2, #1
 800d89c:	f10c 0c01 	add.w	ip, ip, #1
 800d8a0:	fa02 f20e 	lsl.w	r2, r2, lr
 800d8a4:	4310      	orrs	r0, r2
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 800d8ac:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 800d8b0:	3a08      	subs	r2, #8
 800d8b2:	e9c4 0202 	strd	r0, r2, [r4, #8]
 800d8b6:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 800d8ba:	60c4      	str	r4, [r0, #12]
 800d8bc:	2001      	movs	r0, #1
 800d8be:	109a      	asrs	r2, r3, #2
 800d8c0:	fa00 f202 	lsl.w	r2, r0, r2
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	4290      	cmp	r0, r2
 800d8c8:	d326      	bcc.n	800d918 <_malloc_r+0x1c0>
 800d8ca:	4210      	tst	r0, r2
 800d8cc:	d106      	bne.n	800d8dc <_malloc_r+0x184>
 800d8ce:	f023 0303 	bic.w	r3, r3, #3
 800d8d2:	0052      	lsls	r2, r2, #1
 800d8d4:	4210      	tst	r0, r2
 800d8d6:	f103 0304 	add.w	r3, r3, #4
 800d8da:	d0fa      	beq.n	800d8d2 <_malloc_r+0x17a>
 800d8dc:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 800d8e0:	46e1      	mov	r9, ip
 800d8e2:	4698      	mov	r8, r3
 800d8e4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800d8e8:	454c      	cmp	r4, r9
 800d8ea:	f040 80af 	bne.w	800da4c <_malloc_r+0x2f4>
 800d8ee:	f108 0801 	add.w	r8, r8, #1
 800d8f2:	f018 0f03 	tst.w	r8, #3
 800d8f6:	f109 0908 	add.w	r9, r9, #8
 800d8fa:	d1f3      	bne.n	800d8e4 <_malloc_r+0x18c>
 800d8fc:	0798      	lsls	r0, r3, #30
 800d8fe:	f040 80e8 	bne.w	800dad2 <_malloc_r+0x37a>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	ea23 0302 	bic.w	r3, r3, r2
 800d908:	607b      	str	r3, [r7, #4]
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	0052      	lsls	r2, r2, #1
 800d90e:	4290      	cmp	r0, r2
 800d910:	d302      	bcc.n	800d918 <_malloc_r+0x1c0>
 800d912:	2a00      	cmp	r2, #0
 800d914:	f040 80ec 	bne.w	800daf0 <_malloc_r+0x398>
 800d918:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800d91c:	f8da 4004 	ldr.w	r4, [sl, #4]
 800d920:	f024 0203 	bic.w	r2, r4, #3
 800d924:	42aa      	cmp	r2, r5
 800d926:	d303      	bcc.n	800d930 <_malloc_r+0x1d8>
 800d928:	1b53      	subs	r3, r2, r5
 800d92a:	2b0f      	cmp	r3, #15
 800d92c:	f300 8140 	bgt.w	800dbb0 <_malloc_r+0x458>
 800d930:	4b57      	ldr	r3, [pc, #348]	; (800da90 <_malloc_r+0x338>)
 800d932:	9200      	str	r2, [sp, #0]
 800d934:	2008      	movs	r0, #8
 800d936:	681c      	ldr	r4, [r3, #0]
 800d938:	f000 f974 	bl	800dc24 <sysconf>
 800d93c:	4b55      	ldr	r3, [pc, #340]	; (800da94 <_malloc_r+0x33c>)
 800d93e:	9a00      	ldr	r2, [sp, #0]
 800d940:	6819      	ldr	r1, [r3, #0]
 800d942:	3410      	adds	r4, #16
 800d944:	3101      	adds	r1, #1
 800d946:	442c      	add	r4, r5
 800d948:	bf1f      	itttt	ne
 800d94a:	f104 34ff 	addne.w	r4, r4, #4294967295
 800d94e:	1824      	addne	r4, r4, r0
 800d950:	4241      	negne	r1, r0
 800d952:	400c      	andne	r4, r1
 800d954:	4680      	mov	r8, r0
 800d956:	4621      	mov	r1, r4
 800d958:	4630      	mov	r0, r6
 800d95a:	e9cd 2300 	strd	r2, r3, [sp]
 800d95e:	f000 f951 	bl	800dc04 <_sbrk_r>
 800d962:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d966:	4683      	mov	fp, r0
 800d968:	f000 80fb 	beq.w	800db62 <_malloc_r+0x40a>
 800d96c:	9a00      	ldr	r2, [sp, #0]
 800d96e:	9b01      	ldr	r3, [sp, #4]
 800d970:	eb0a 0102 	add.w	r1, sl, r2
 800d974:	4281      	cmp	r1, r0
 800d976:	d902      	bls.n	800d97e <_malloc_r+0x226>
 800d978:	45ba      	cmp	sl, r7
 800d97a:	f040 80f2 	bne.w	800db62 <_malloc_r+0x40a>
 800d97e:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800daa0 <_malloc_r+0x348>
 800d982:	f8d9 0000 	ldr.w	r0, [r9]
 800d986:	4559      	cmp	r1, fp
 800d988:	eb00 0e04 	add.w	lr, r0, r4
 800d98c:	f8c9 e000 	str.w	lr, [r9]
 800d990:	f108 3cff 	add.w	ip, r8, #4294967295
 800d994:	f040 80ae 	bne.w	800daf4 <_malloc_r+0x39c>
 800d998:	ea11 0f0c 	tst.w	r1, ip
 800d99c:	f040 80aa 	bne.w	800daf4 <_malloc_r+0x39c>
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	4414      	add	r4, r2
 800d9a4:	f044 0401 	orr.w	r4, r4, #1
 800d9a8:	605c      	str	r4, [r3, #4]
 800d9aa:	4a3b      	ldr	r2, [pc, #236]	; (800da98 <_malloc_r+0x340>)
 800d9ac:	f8d9 3000 	ldr.w	r3, [r9]
 800d9b0:	6811      	ldr	r1, [r2, #0]
 800d9b2:	428b      	cmp	r3, r1
 800d9b4:	bf88      	it	hi
 800d9b6:	6013      	strhi	r3, [r2, #0]
 800d9b8:	4a38      	ldr	r2, [pc, #224]	; (800da9c <_malloc_r+0x344>)
 800d9ba:	6811      	ldr	r1, [r2, #0]
 800d9bc:	428b      	cmp	r3, r1
 800d9be:	bf88      	it	hi
 800d9c0:	6013      	strhi	r3, [r2, #0]
 800d9c2:	e0ce      	b.n	800db62 <_malloc_r+0x40a>
 800d9c4:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800d9c8:	2a04      	cmp	r2, #4
 800d9ca:	d818      	bhi.n	800d9fe <_malloc_r+0x2a6>
 800d9cc:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800d9d0:	3238      	adds	r2, #56	; 0x38
 800d9d2:	f102 0e01 	add.w	lr, r2, #1
 800d9d6:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 800d9da:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 800d9de:	45f0      	cmp	r8, lr
 800d9e0:	d12b      	bne.n	800da3a <_malloc_r+0x2e2>
 800d9e2:	1092      	asrs	r2, r2, #2
 800d9e4:	f04f 0c01 	mov.w	ip, #1
 800d9e8:	fa0c f202 	lsl.w	r2, ip, r2
 800d9ec:	4310      	orrs	r0, r2
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800d9f4:	f8c8 4008 	str.w	r4, [r8, #8]
 800d9f8:	f8ce 400c 	str.w	r4, [lr, #12]
 800d9fc:	e75e      	b.n	800d8bc <_malloc_r+0x164>
 800d9fe:	2a14      	cmp	r2, #20
 800da00:	d801      	bhi.n	800da06 <_malloc_r+0x2ae>
 800da02:	325b      	adds	r2, #91	; 0x5b
 800da04:	e7e5      	b.n	800d9d2 <_malloc_r+0x27a>
 800da06:	2a54      	cmp	r2, #84	; 0x54
 800da08:	d803      	bhi.n	800da12 <_malloc_r+0x2ba>
 800da0a:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800da0e:	326e      	adds	r2, #110	; 0x6e
 800da10:	e7df      	b.n	800d9d2 <_malloc_r+0x27a>
 800da12:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800da16:	d803      	bhi.n	800da20 <_malloc_r+0x2c8>
 800da18:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800da1c:	3277      	adds	r2, #119	; 0x77
 800da1e:	e7d8      	b.n	800d9d2 <_malloc_r+0x27a>
 800da20:	f240 5e54 	movw	lr, #1364	; 0x554
 800da24:	4572      	cmp	r2, lr
 800da26:	bf9a      	itte	ls
 800da28:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800da2c:	327c      	addls	r2, #124	; 0x7c
 800da2e:	227e      	movhi	r2, #126	; 0x7e
 800da30:	e7cf      	b.n	800d9d2 <_malloc_r+0x27a>
 800da32:	f8de e008 	ldr.w	lr, [lr, #8]
 800da36:	45f0      	cmp	r8, lr
 800da38:	d005      	beq.n	800da46 <_malloc_r+0x2ee>
 800da3a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800da3e:	f022 0203 	bic.w	r2, r2, #3
 800da42:	4562      	cmp	r2, ip
 800da44:	d8f5      	bhi.n	800da32 <_malloc_r+0x2da>
 800da46:	f8de 800c 	ldr.w	r8, [lr, #12]
 800da4a:	e7d1      	b.n	800d9f0 <_malloc_r+0x298>
 800da4c:	6860      	ldr	r0, [r4, #4]
 800da4e:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800da52:	f020 0003 	bic.w	r0, r0, #3
 800da56:	eba0 0a05 	sub.w	sl, r0, r5
 800da5a:	f1ba 0f0f 	cmp.w	sl, #15
 800da5e:	dd21      	ble.n	800daa4 <_malloc_r+0x34c>
 800da60:	68a2      	ldr	r2, [r4, #8]
 800da62:	1963      	adds	r3, r4, r5
 800da64:	f045 0501 	orr.w	r5, r5, #1
 800da68:	6065      	str	r5, [r4, #4]
 800da6a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800da6e:	f8ce 2008 	str.w	r2, [lr, #8]
 800da72:	f04a 0201 	orr.w	r2, sl, #1
 800da76:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800da7a:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800da7e:	605a      	str	r2, [r3, #4]
 800da80:	f844 a000 	str.w	sl, [r4, r0]
 800da84:	e699      	b.n	800d7ba <_malloc_r+0x62>
 800da86:	bf00      	nop
 800da88:	24000440 	.word	0x24000440
 800da8c:	24000448 	.word	0x24000448
 800da90:	24015580 	.word	0x24015580
 800da94:	24000848 	.word	0x24000848
 800da98:	24015578 	.word	0x24015578
 800da9c:	2401557c 	.word	0x2401557c
 800daa0:	24015550 	.word	0x24015550
 800daa4:	f1ba 0f00 	cmp.w	sl, #0
 800daa8:	db11      	blt.n	800dace <_malloc_r+0x376>
 800daaa:	4420      	add	r0, r4
 800daac:	6843      	ldr	r3, [r0, #4]
 800daae:	f043 0301 	orr.w	r3, r3, #1
 800dab2:	6043      	str	r3, [r0, #4]
 800dab4:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800dab8:	4630      	mov	r0, r6
 800daba:	f8c3 e00c 	str.w	lr, [r3, #12]
 800dabe:	f8ce 3008 	str.w	r3, [lr, #8]
 800dac2:	f000 f899 	bl	800dbf8 <__malloc_unlock>
 800dac6:	4620      	mov	r0, r4
 800dac8:	b003      	add	sp, #12
 800daca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dace:	4674      	mov	r4, lr
 800dad0:	e70a      	b.n	800d8e8 <_malloc_r+0x190>
 800dad2:	f1ac 0008 	sub.w	r0, ip, #8
 800dad6:	f8dc c000 	ldr.w	ip, [ip]
 800dada:	4584      	cmp	ip, r0
 800dadc:	f103 33ff 	add.w	r3, r3, #4294967295
 800dae0:	f43f af0c 	beq.w	800d8fc <_malloc_r+0x1a4>
 800dae4:	e711      	b.n	800d90a <_malloc_r+0x1b2>
 800dae6:	3304      	adds	r3, #4
 800dae8:	0052      	lsls	r2, r2, #1
 800daea:	4210      	tst	r0, r2
 800daec:	d0fb      	beq.n	800dae6 <_malloc_r+0x38e>
 800daee:	e6f5      	b.n	800d8dc <_malloc_r+0x184>
 800daf0:	4643      	mov	r3, r8
 800daf2:	e7fa      	b.n	800daea <_malloc_r+0x392>
 800daf4:	6818      	ldr	r0, [r3, #0]
 800daf6:	9200      	str	r2, [sp, #0]
 800daf8:	3001      	adds	r0, #1
 800dafa:	bf1b      	ittet	ne
 800dafc:	ebab 0101 	subne.w	r1, fp, r1
 800db00:	4471      	addne	r1, lr
 800db02:	f8c3 b000 	streq.w	fp, [r3]
 800db06:	f8c9 1000 	strne.w	r1, [r9]
 800db0a:	f01b 0307 	ands.w	r3, fp, #7
 800db0e:	bf1c      	itt	ne
 800db10:	f1c3 0308 	rsbne	r3, r3, #8
 800db14:	449b      	addne	fp, r3
 800db16:	445c      	add	r4, fp
 800db18:	4498      	add	r8, r3
 800db1a:	ea04 030c 	and.w	r3, r4, ip
 800db1e:	eba8 0803 	sub.w	r8, r8, r3
 800db22:	4641      	mov	r1, r8
 800db24:	4630      	mov	r0, r6
 800db26:	f000 f86d 	bl	800dc04 <_sbrk_r>
 800db2a:	1c43      	adds	r3, r0, #1
 800db2c:	bf04      	itt	eq
 800db2e:	4658      	moveq	r0, fp
 800db30:	f04f 0800 	moveq.w	r8, #0
 800db34:	f8d9 3000 	ldr.w	r3, [r9]
 800db38:	f8c7 b008 	str.w	fp, [r7, #8]
 800db3c:	eba0 000b 	sub.w	r0, r0, fp
 800db40:	4440      	add	r0, r8
 800db42:	4443      	add	r3, r8
 800db44:	f040 0001 	orr.w	r0, r0, #1
 800db48:	45ba      	cmp	sl, r7
 800db4a:	9a00      	ldr	r2, [sp, #0]
 800db4c:	f8c9 3000 	str.w	r3, [r9]
 800db50:	f8cb 0004 	str.w	r0, [fp, #4]
 800db54:	f43f af29 	beq.w	800d9aa <_malloc_r+0x252>
 800db58:	2a0f      	cmp	r2, #15
 800db5a:	d810      	bhi.n	800db7e <_malloc_r+0x426>
 800db5c:	2301      	movs	r3, #1
 800db5e:	f8cb 3004 	str.w	r3, [fp, #4]
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	685a      	ldr	r2, [r3, #4]
 800db66:	f022 0203 	bic.w	r2, r2, #3
 800db6a:	42aa      	cmp	r2, r5
 800db6c:	eba2 0305 	sub.w	r3, r2, r5
 800db70:	d301      	bcc.n	800db76 <_malloc_r+0x41e>
 800db72:	2b0f      	cmp	r3, #15
 800db74:	dc1c      	bgt.n	800dbb0 <_malloc_r+0x458>
 800db76:	4630      	mov	r0, r6
 800db78:	f000 f83e 	bl	800dbf8 <__malloc_unlock>
 800db7c:	e5f8      	b.n	800d770 <_malloc_r+0x18>
 800db7e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800db82:	f1a2 040c 	sub.w	r4, r2, #12
 800db86:	f024 0407 	bic.w	r4, r4, #7
 800db8a:	f003 0301 	and.w	r3, r3, #1
 800db8e:	4323      	orrs	r3, r4
 800db90:	f8ca 3004 	str.w	r3, [sl, #4]
 800db94:	2205      	movs	r2, #5
 800db96:	eb0a 0304 	add.w	r3, sl, r4
 800db9a:	2c0f      	cmp	r4, #15
 800db9c:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800dba0:	f67f af03 	bls.w	800d9aa <_malloc_r+0x252>
 800dba4:	f10a 0108 	add.w	r1, sl, #8
 800dba8:	4630      	mov	r0, r6
 800dbaa:	f000 f8c1 	bl	800dd30 <_free_r>
 800dbae:	e6fc      	b.n	800d9aa <_malloc_r+0x252>
 800dbb0:	68bc      	ldr	r4, [r7, #8]
 800dbb2:	f045 0201 	orr.w	r2, r5, #1
 800dbb6:	4425      	add	r5, r4
 800dbb8:	f043 0301 	orr.w	r3, r3, #1
 800dbbc:	6062      	str	r2, [r4, #4]
 800dbbe:	60bd      	str	r5, [r7, #8]
 800dbc0:	606b      	str	r3, [r5, #4]
 800dbc2:	e5fa      	b.n	800d7ba <_malloc_r+0x62>

0800dbc4 <memcpy>:
 800dbc4:	b510      	push	{r4, lr}
 800dbc6:	1e43      	subs	r3, r0, #1
 800dbc8:	440a      	add	r2, r1
 800dbca:	4291      	cmp	r1, r2
 800dbcc:	d100      	bne.n	800dbd0 <memcpy+0xc>
 800dbce:	bd10      	pop	{r4, pc}
 800dbd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbd8:	e7f7      	b.n	800dbca <memcpy+0x6>

0800dbda <memset>:
 800dbda:	4402      	add	r2, r0
 800dbdc:	4603      	mov	r3, r0
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d100      	bne.n	800dbe4 <memset+0xa>
 800dbe2:	4770      	bx	lr
 800dbe4:	f803 1b01 	strb.w	r1, [r3], #1
 800dbe8:	e7f9      	b.n	800dbde <memset+0x4>
	...

0800dbec <__malloc_lock>:
 800dbec:	4801      	ldr	r0, [pc, #4]	; (800dbf4 <__malloc_lock+0x8>)
 800dbee:	f000 b95b 	b.w	800dea8 <__retarget_lock_acquire_recursive>
 800dbf2:	bf00      	nop
 800dbf4:	24015664 	.word	0x24015664

0800dbf8 <__malloc_unlock>:
 800dbf8:	4801      	ldr	r0, [pc, #4]	; (800dc00 <__malloc_unlock+0x8>)
 800dbfa:	f000 b956 	b.w	800deaa <__retarget_lock_release_recursive>
 800dbfe:	bf00      	nop
 800dc00:	24015664 	.word	0x24015664

0800dc04 <_sbrk_r>:
 800dc04:	b538      	push	{r3, r4, r5, lr}
 800dc06:	4c06      	ldr	r4, [pc, #24]	; (800dc20 <_sbrk_r+0x1c>)
 800dc08:	2300      	movs	r3, #0
 800dc0a:	4605      	mov	r5, r0
 800dc0c:	4608      	mov	r0, r1
 800dc0e:	6023      	str	r3, [r4, #0]
 800dc10:	f7fa f94c 	bl	8007eac <_sbrk>
 800dc14:	1c43      	adds	r3, r0, #1
 800dc16:	d102      	bne.n	800dc1e <_sbrk_r+0x1a>
 800dc18:	6823      	ldr	r3, [r4, #0]
 800dc1a:	b103      	cbz	r3, 800dc1e <_sbrk_r+0x1a>
 800dc1c:	602b      	str	r3, [r5, #0]
 800dc1e:	bd38      	pop	{r3, r4, r5, pc}
 800dc20:	2401566c 	.word	0x2401566c

0800dc24 <sysconf>:
 800dc24:	2808      	cmp	r0, #8
 800dc26:	b508      	push	{r3, lr}
 800dc28:	d006      	beq.n	800dc38 <sysconf+0x14>
 800dc2a:	f7ff fd5b 	bl	800d6e4 <__errno>
 800dc2e:	2316      	movs	r3, #22
 800dc30:	6003      	str	r3, [r0, #0]
 800dc32:	f04f 30ff 	mov.w	r0, #4294967295
 800dc36:	bd08      	pop	{r3, pc}
 800dc38:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800dc3c:	e7fb      	b.n	800dc36 <sysconf+0x12>
	...

0800dc40 <register_fini>:
 800dc40:	4b02      	ldr	r3, [pc, #8]	; (800dc4c <register_fini+0xc>)
 800dc42:	b113      	cbz	r3, 800dc4a <register_fini+0xa>
 800dc44:	4802      	ldr	r0, [pc, #8]	; (800dc50 <register_fini+0x10>)
 800dc46:	f000 b805 	b.w	800dc54 <atexit>
 800dc4a:	4770      	bx	lr
 800dc4c:	00000000 	.word	0x00000000
 800dc50:	0800dc61 	.word	0x0800dc61

0800dc54 <atexit>:
 800dc54:	2300      	movs	r3, #0
 800dc56:	4601      	mov	r1, r0
 800dc58:	461a      	mov	r2, r3
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f000 b926 	b.w	800deac <__register_exitproc>

0800dc60 <__libc_fini_array>:
 800dc60:	b538      	push	{r3, r4, r5, lr}
 800dc62:	4d07      	ldr	r5, [pc, #28]	; (800dc80 <__libc_fini_array+0x20>)
 800dc64:	4c07      	ldr	r4, [pc, #28]	; (800dc84 <__libc_fini_array+0x24>)
 800dc66:	1b64      	subs	r4, r4, r5
 800dc68:	10a4      	asrs	r4, r4, #2
 800dc6a:	b91c      	cbnz	r4, 800dc74 <__libc_fini_array+0x14>
 800dc6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc70:	f000 bbce 	b.w	800e410 <_fini>
 800dc74:	3c01      	subs	r4, #1
 800dc76:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800dc7a:	4798      	blx	r3
 800dc7c:	e7f5      	b.n	800dc6a <__libc_fini_array+0xa>
 800dc7e:	bf00      	nop
 800dc80:	0801426c 	.word	0x0801426c
 800dc84:	08014270 	.word	0x08014270

0800dc88 <_malloc_trim_r>:
 800dc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc8c:	4605      	mov	r5, r0
 800dc8e:	2008      	movs	r0, #8
 800dc90:	460c      	mov	r4, r1
 800dc92:	f7ff ffc7 	bl	800dc24 <sysconf>
 800dc96:	4f23      	ldr	r7, [pc, #140]	; (800dd24 <_malloc_trim_r+0x9c>)
 800dc98:	4680      	mov	r8, r0
 800dc9a:	4628      	mov	r0, r5
 800dc9c:	f7ff ffa6 	bl	800dbec <__malloc_lock>
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	685e      	ldr	r6, [r3, #4]
 800dca4:	f026 0603 	bic.w	r6, r6, #3
 800dca8:	1b34      	subs	r4, r6, r4
 800dcaa:	3c11      	subs	r4, #17
 800dcac:	4444      	add	r4, r8
 800dcae:	fbb4 f4f8 	udiv	r4, r4, r8
 800dcb2:	3c01      	subs	r4, #1
 800dcb4:	fb08 f404 	mul.w	r4, r8, r4
 800dcb8:	45a0      	cmp	r8, r4
 800dcba:	dd05      	ble.n	800dcc8 <_malloc_trim_r+0x40>
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	f7ff ff9b 	bl	800dbf8 <__malloc_unlock>
 800dcc2:	2000      	movs	r0, #0
 800dcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcc8:	2100      	movs	r1, #0
 800dcca:	4628      	mov	r0, r5
 800dccc:	f7ff ff9a 	bl	800dc04 <_sbrk_r>
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	4433      	add	r3, r6
 800dcd4:	4298      	cmp	r0, r3
 800dcd6:	d1f1      	bne.n	800dcbc <_malloc_trim_r+0x34>
 800dcd8:	4261      	negs	r1, r4
 800dcda:	4628      	mov	r0, r5
 800dcdc:	f7ff ff92 	bl	800dc04 <_sbrk_r>
 800dce0:	3001      	adds	r0, #1
 800dce2:	d110      	bne.n	800dd06 <_malloc_trim_r+0x7e>
 800dce4:	2100      	movs	r1, #0
 800dce6:	4628      	mov	r0, r5
 800dce8:	f7ff ff8c 	bl	800dc04 <_sbrk_r>
 800dcec:	68ba      	ldr	r2, [r7, #8]
 800dcee:	1a83      	subs	r3, r0, r2
 800dcf0:	2b0f      	cmp	r3, #15
 800dcf2:	dde3      	ble.n	800dcbc <_malloc_trim_r+0x34>
 800dcf4:	490c      	ldr	r1, [pc, #48]	; (800dd28 <_malloc_trim_r+0xa0>)
 800dcf6:	6809      	ldr	r1, [r1, #0]
 800dcf8:	1a40      	subs	r0, r0, r1
 800dcfa:	490c      	ldr	r1, [pc, #48]	; (800dd2c <_malloc_trim_r+0xa4>)
 800dcfc:	f043 0301 	orr.w	r3, r3, #1
 800dd00:	6008      	str	r0, [r1, #0]
 800dd02:	6053      	str	r3, [r2, #4]
 800dd04:	e7da      	b.n	800dcbc <_malloc_trim_r+0x34>
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	4a08      	ldr	r2, [pc, #32]	; (800dd2c <_malloc_trim_r+0xa4>)
 800dd0a:	1b36      	subs	r6, r6, r4
 800dd0c:	f046 0601 	orr.w	r6, r6, #1
 800dd10:	605e      	str	r6, [r3, #4]
 800dd12:	6813      	ldr	r3, [r2, #0]
 800dd14:	4628      	mov	r0, r5
 800dd16:	1b1c      	subs	r4, r3, r4
 800dd18:	6014      	str	r4, [r2, #0]
 800dd1a:	f7ff ff6d 	bl	800dbf8 <__malloc_unlock>
 800dd1e:	2001      	movs	r0, #1
 800dd20:	e7d0      	b.n	800dcc4 <_malloc_trim_r+0x3c>
 800dd22:	bf00      	nop
 800dd24:	24000440 	.word	0x24000440
 800dd28:	24000848 	.word	0x24000848
 800dd2c:	24015550 	.word	0x24015550

0800dd30 <_free_r>:
 800dd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd34:	4604      	mov	r4, r0
 800dd36:	4688      	mov	r8, r1
 800dd38:	2900      	cmp	r1, #0
 800dd3a:	f000 80ab 	beq.w	800de94 <_free_r+0x164>
 800dd3e:	f7ff ff55 	bl	800dbec <__malloc_lock>
 800dd42:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800dd46:	4d54      	ldr	r5, [pc, #336]	; (800de98 <_free_r+0x168>)
 800dd48:	f022 0001 	bic.w	r0, r2, #1
 800dd4c:	f1a8 0308 	sub.w	r3, r8, #8
 800dd50:	181f      	adds	r7, r3, r0
 800dd52:	68a9      	ldr	r1, [r5, #8]
 800dd54:	687e      	ldr	r6, [r7, #4]
 800dd56:	42b9      	cmp	r1, r7
 800dd58:	f026 0603 	bic.w	r6, r6, #3
 800dd5c:	f002 0201 	and.w	r2, r2, #1
 800dd60:	d11b      	bne.n	800dd9a <_free_r+0x6a>
 800dd62:	4430      	add	r0, r6
 800dd64:	b93a      	cbnz	r2, 800dd76 <_free_r+0x46>
 800dd66:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800dd6a:	1a9b      	subs	r3, r3, r2
 800dd6c:	4410      	add	r0, r2
 800dd6e:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800dd72:	60ca      	str	r2, [r1, #12]
 800dd74:	6091      	str	r1, [r2, #8]
 800dd76:	f040 0201 	orr.w	r2, r0, #1
 800dd7a:	605a      	str	r2, [r3, #4]
 800dd7c:	60ab      	str	r3, [r5, #8]
 800dd7e:	4b47      	ldr	r3, [pc, #284]	; (800de9c <_free_r+0x16c>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4283      	cmp	r3, r0
 800dd84:	d804      	bhi.n	800dd90 <_free_r+0x60>
 800dd86:	4b46      	ldr	r3, [pc, #280]	; (800dea0 <_free_r+0x170>)
 800dd88:	4620      	mov	r0, r4
 800dd8a:	6819      	ldr	r1, [r3, #0]
 800dd8c:	f7ff ff7c 	bl	800dc88 <_malloc_trim_r>
 800dd90:	4620      	mov	r0, r4
 800dd92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd96:	f7ff bf2f 	b.w	800dbf8 <__malloc_unlock>
 800dd9a:	607e      	str	r6, [r7, #4]
 800dd9c:	2a00      	cmp	r2, #0
 800dd9e:	d139      	bne.n	800de14 <_free_r+0xe4>
 800dda0:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800dda4:	1a5b      	subs	r3, r3, r1
 800dda6:	4408      	add	r0, r1
 800dda8:	6899      	ldr	r1, [r3, #8]
 800ddaa:	f105 0c08 	add.w	ip, r5, #8
 800ddae:	4561      	cmp	r1, ip
 800ddb0:	d032      	beq.n	800de18 <_free_r+0xe8>
 800ddb2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800ddb6:	f8c1 c00c 	str.w	ip, [r1, #12]
 800ddba:	f8cc 1008 	str.w	r1, [ip, #8]
 800ddbe:	19b9      	adds	r1, r7, r6
 800ddc0:	6849      	ldr	r1, [r1, #4]
 800ddc2:	07c9      	lsls	r1, r1, #31
 800ddc4:	d40a      	bmi.n	800dddc <_free_r+0xac>
 800ddc6:	4430      	add	r0, r6
 800ddc8:	68b9      	ldr	r1, [r7, #8]
 800ddca:	bb3a      	cbnz	r2, 800de1c <_free_r+0xec>
 800ddcc:	4e35      	ldr	r6, [pc, #212]	; (800dea4 <_free_r+0x174>)
 800ddce:	42b1      	cmp	r1, r6
 800ddd0:	d124      	bne.n	800de1c <_free_r+0xec>
 800ddd2:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800ddd6:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800ddda:	2201      	movs	r2, #1
 800dddc:	f040 0101 	orr.w	r1, r0, #1
 800dde0:	6059      	str	r1, [r3, #4]
 800dde2:	5018      	str	r0, [r3, r0]
 800dde4:	2a00      	cmp	r2, #0
 800dde6:	d1d3      	bne.n	800dd90 <_free_r+0x60>
 800dde8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800ddec:	d21a      	bcs.n	800de24 <_free_r+0xf4>
 800ddee:	08c0      	lsrs	r0, r0, #3
 800ddf0:	1081      	asrs	r1, r0, #2
 800ddf2:	2201      	movs	r2, #1
 800ddf4:	408a      	lsls	r2, r1
 800ddf6:	6869      	ldr	r1, [r5, #4]
 800ddf8:	3001      	adds	r0, #1
 800ddfa:	430a      	orrs	r2, r1
 800ddfc:	606a      	str	r2, [r5, #4]
 800ddfe:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800de02:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800de06:	3a08      	subs	r2, #8
 800de08:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800de0c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800de10:	60cb      	str	r3, [r1, #12]
 800de12:	e7bd      	b.n	800dd90 <_free_r+0x60>
 800de14:	2200      	movs	r2, #0
 800de16:	e7d2      	b.n	800ddbe <_free_r+0x8e>
 800de18:	2201      	movs	r2, #1
 800de1a:	e7d0      	b.n	800ddbe <_free_r+0x8e>
 800de1c:	68fe      	ldr	r6, [r7, #12]
 800de1e:	60ce      	str	r6, [r1, #12]
 800de20:	60b1      	str	r1, [r6, #8]
 800de22:	e7db      	b.n	800dddc <_free_r+0xac>
 800de24:	0a42      	lsrs	r2, r0, #9
 800de26:	2a04      	cmp	r2, #4
 800de28:	d813      	bhi.n	800de52 <_free_r+0x122>
 800de2a:	0982      	lsrs	r2, r0, #6
 800de2c:	3238      	adds	r2, #56	; 0x38
 800de2e:	1c51      	adds	r1, r2, #1
 800de30:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800de34:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800de38:	428e      	cmp	r6, r1
 800de3a:	d124      	bne.n	800de86 <_free_r+0x156>
 800de3c:	2001      	movs	r0, #1
 800de3e:	1092      	asrs	r2, r2, #2
 800de40:	fa00 f202 	lsl.w	r2, r0, r2
 800de44:	6868      	ldr	r0, [r5, #4]
 800de46:	4302      	orrs	r2, r0
 800de48:	606a      	str	r2, [r5, #4]
 800de4a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800de4e:	60b3      	str	r3, [r6, #8]
 800de50:	e7de      	b.n	800de10 <_free_r+0xe0>
 800de52:	2a14      	cmp	r2, #20
 800de54:	d801      	bhi.n	800de5a <_free_r+0x12a>
 800de56:	325b      	adds	r2, #91	; 0x5b
 800de58:	e7e9      	b.n	800de2e <_free_r+0xfe>
 800de5a:	2a54      	cmp	r2, #84	; 0x54
 800de5c:	d802      	bhi.n	800de64 <_free_r+0x134>
 800de5e:	0b02      	lsrs	r2, r0, #12
 800de60:	326e      	adds	r2, #110	; 0x6e
 800de62:	e7e4      	b.n	800de2e <_free_r+0xfe>
 800de64:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800de68:	d802      	bhi.n	800de70 <_free_r+0x140>
 800de6a:	0bc2      	lsrs	r2, r0, #15
 800de6c:	3277      	adds	r2, #119	; 0x77
 800de6e:	e7de      	b.n	800de2e <_free_r+0xfe>
 800de70:	f240 5154 	movw	r1, #1364	; 0x554
 800de74:	428a      	cmp	r2, r1
 800de76:	bf9a      	itte	ls
 800de78:	0c82      	lsrls	r2, r0, #18
 800de7a:	327c      	addls	r2, #124	; 0x7c
 800de7c:	227e      	movhi	r2, #126	; 0x7e
 800de7e:	e7d6      	b.n	800de2e <_free_r+0xfe>
 800de80:	6889      	ldr	r1, [r1, #8]
 800de82:	428e      	cmp	r6, r1
 800de84:	d004      	beq.n	800de90 <_free_r+0x160>
 800de86:	684a      	ldr	r2, [r1, #4]
 800de88:	f022 0203 	bic.w	r2, r2, #3
 800de8c:	4282      	cmp	r2, r0
 800de8e:	d8f7      	bhi.n	800de80 <_free_r+0x150>
 800de90:	68ce      	ldr	r6, [r1, #12]
 800de92:	e7da      	b.n	800de4a <_free_r+0x11a>
 800de94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de98:	24000440 	.word	0x24000440
 800de9c:	2400084c 	.word	0x2400084c
 800dea0:	24015580 	.word	0x24015580
 800dea4:	24000448 	.word	0x24000448

0800dea8 <__retarget_lock_acquire_recursive>:
 800dea8:	4770      	bx	lr

0800deaa <__retarget_lock_release_recursive>:
 800deaa:	4770      	bx	lr

0800deac <__register_exitproc>:
 800deac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800deb0:	4c26      	ldr	r4, [pc, #152]	; (800df4c <__register_exitproc+0xa0>)
 800deb2:	4606      	mov	r6, r0
 800deb4:	6820      	ldr	r0, [r4, #0]
 800deb6:	4698      	mov	r8, r3
 800deb8:	460f      	mov	r7, r1
 800deba:	4691      	mov	r9, r2
 800debc:	f7ff fff4 	bl	800dea8 <__retarget_lock_acquire_recursive>
 800dec0:	4b23      	ldr	r3, [pc, #140]	; (800df50 <__register_exitproc+0xa4>)
 800dec2:	681d      	ldr	r5, [r3, #0]
 800dec4:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800dec8:	b918      	cbnz	r0, 800ded2 <__register_exitproc+0x26>
 800deca:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800dece:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800ded2:	6843      	ldr	r3, [r0, #4]
 800ded4:	2b1f      	cmp	r3, #31
 800ded6:	dd19      	ble.n	800df0c <__register_exitproc+0x60>
 800ded8:	4b1e      	ldr	r3, [pc, #120]	; (800df54 <__register_exitproc+0xa8>)
 800deda:	b933      	cbnz	r3, 800deea <__register_exitproc+0x3e>
 800dedc:	6820      	ldr	r0, [r4, #0]
 800dede:	f7ff ffe4 	bl	800deaa <__retarget_lock_release_recursive>
 800dee2:	f04f 30ff 	mov.w	r0, #4294967295
 800dee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deea:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800deee:	f7ff fc23 	bl	800d738 <malloc>
 800def2:	2800      	cmp	r0, #0
 800def4:	d0f2      	beq.n	800dedc <__register_exitproc+0x30>
 800def6:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800defa:	6003      	str	r3, [r0, #0]
 800defc:	2200      	movs	r2, #0
 800defe:	6042      	str	r2, [r0, #4]
 800df00:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800df04:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800df08:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800df0c:	6843      	ldr	r3, [r0, #4]
 800df0e:	b19e      	cbz	r6, 800df38 <__register_exitproc+0x8c>
 800df10:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800df14:	2201      	movs	r2, #1
 800df16:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800df1a:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800df1e:	409a      	lsls	r2, r3
 800df20:	4311      	orrs	r1, r2
 800df22:	2e02      	cmp	r6, #2
 800df24:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800df28:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800df2c:	bf02      	ittt	eq
 800df2e:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800df32:	430a      	orreq	r2, r1
 800df34:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800df38:	1c5a      	adds	r2, r3, #1
 800df3a:	3302      	adds	r3, #2
 800df3c:	6042      	str	r2, [r0, #4]
 800df3e:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800df42:	6820      	ldr	r0, [r4, #0]
 800df44:	f7ff ffb1 	bl	800deaa <__retarget_lock_release_recursive>
 800df48:	2000      	movs	r0, #0
 800df4a:	e7cc      	b.n	800dee6 <__register_exitproc+0x3a>
 800df4c:	24000850 	.word	0x24000850
 800df50:	08014230 	.word	0x08014230
 800df54:	0800d739 	.word	0x0800d739

0800df58 <fmaxf>:
 800df58:	b508      	push	{r3, lr}
 800df5a:	ed2d 8b02 	vpush	{d8}
 800df5e:	eeb0 8a40 	vmov.f32	s16, s0
 800df62:	eef0 8a60 	vmov.f32	s17, s1
 800df66:	f000 f82d 	bl	800dfc4 <__fpclassifyf>
 800df6a:	b148      	cbz	r0, 800df80 <fmaxf+0x28>
 800df6c:	eeb0 0a68 	vmov.f32	s0, s17
 800df70:	f000 f828 	bl	800dfc4 <__fpclassifyf>
 800df74:	b130      	cbz	r0, 800df84 <fmaxf+0x2c>
 800df76:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800df7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df7e:	dc01      	bgt.n	800df84 <fmaxf+0x2c>
 800df80:	eeb0 8a68 	vmov.f32	s16, s17
 800df84:	eeb0 0a48 	vmov.f32	s0, s16
 800df88:	ecbd 8b02 	vpop	{d8}
 800df8c:	bd08      	pop	{r3, pc}

0800df8e <fminf>:
 800df8e:	b508      	push	{r3, lr}
 800df90:	ed2d 8b02 	vpush	{d8}
 800df94:	eeb0 8a40 	vmov.f32	s16, s0
 800df98:	eef0 8a60 	vmov.f32	s17, s1
 800df9c:	f000 f812 	bl	800dfc4 <__fpclassifyf>
 800dfa0:	b148      	cbz	r0, 800dfb6 <fminf+0x28>
 800dfa2:	eeb0 0a68 	vmov.f32	s0, s17
 800dfa6:	f000 f80d 	bl	800dfc4 <__fpclassifyf>
 800dfaa:	b130      	cbz	r0, 800dfba <fminf+0x2c>
 800dfac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800dfb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfb4:	d401      	bmi.n	800dfba <fminf+0x2c>
 800dfb6:	eeb0 8a68 	vmov.f32	s16, s17
 800dfba:	eeb0 0a48 	vmov.f32	s0, s16
 800dfbe:	ecbd 8b02 	vpop	{d8}
 800dfc2:	bd08      	pop	{r3, pc}

0800dfc4 <__fpclassifyf>:
 800dfc4:	ee10 3a10 	vmov	r3, s0
 800dfc8:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800dfcc:	d00d      	beq.n	800dfea <__fpclassifyf+0x26>
 800dfce:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800dfd2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800dfd6:	d30a      	bcc.n	800dfee <__fpclassifyf+0x2a>
 800dfd8:	4b07      	ldr	r3, [pc, #28]	; (800dff8 <__fpclassifyf+0x34>)
 800dfda:	1e42      	subs	r2, r0, #1
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d908      	bls.n	800dff2 <__fpclassifyf+0x2e>
 800dfe0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800dfe4:	4258      	negs	r0, r3
 800dfe6:	4158      	adcs	r0, r3
 800dfe8:	4770      	bx	lr
 800dfea:	2002      	movs	r0, #2
 800dfec:	4770      	bx	lr
 800dfee:	2004      	movs	r0, #4
 800dff0:	4770      	bx	lr
 800dff2:	2003      	movs	r0, #3
 800dff4:	4770      	bx	lr
 800dff6:	bf00      	nop
 800dff8:	007ffffe 	.word	0x007ffffe

0800dffc <roundf>:
 800dffc:	ee10 0a10 	vmov	r0, s0
 800e000:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e004:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800e008:	2a16      	cmp	r2, #22
 800e00a:	dc15      	bgt.n	800e038 <roundf+0x3c>
 800e00c:	2a00      	cmp	r2, #0
 800e00e:	da08      	bge.n	800e022 <roundf+0x26>
 800e010:	3201      	adds	r2, #1
 800e012:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800e016:	d101      	bne.n	800e01c <roundf+0x20>
 800e018:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800e01c:	ee00 3a10 	vmov	s0, r3
 800e020:	4770      	bx	lr
 800e022:	4908      	ldr	r1, [pc, #32]	; (800e044 <roundf+0x48>)
 800e024:	4111      	asrs	r1, r2
 800e026:	4208      	tst	r0, r1
 800e028:	d0fa      	beq.n	800e020 <roundf+0x24>
 800e02a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e02e:	4113      	asrs	r3, r2
 800e030:	4403      	add	r3, r0
 800e032:	ea23 0301 	bic.w	r3, r3, r1
 800e036:	e7f1      	b.n	800e01c <roundf+0x20>
 800e038:	2a80      	cmp	r2, #128	; 0x80
 800e03a:	d1f1      	bne.n	800e020 <roundf+0x24>
 800e03c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e040:	4770      	bx	lr
 800e042:	bf00      	nop
 800e044:	007fffff 	.word	0x007fffff

0800e048 <atan2f>:
 800e048:	f000 b852 	b.w	800e0f0 <__ieee754_atan2f>
 800e04c:	0000      	movs	r0, r0
	...

0800e050 <sqrtf>:
 800e050:	b500      	push	{lr}
 800e052:	ed2d 8b02 	vpush	{d8}
 800e056:	b08b      	sub	sp, #44	; 0x2c
 800e058:	eeb0 8a40 	vmov.f32	s16, s0
 800e05c:	f000 f8f2 	bl	800e244 <__ieee754_sqrtf>
 800e060:	4b21      	ldr	r3, [pc, #132]	; (800e0e8 <sqrtf+0x98>)
 800e062:	f993 3000 	ldrsb.w	r3, [r3]
 800e066:	1c5a      	adds	r2, r3, #1
 800e068:	d028      	beq.n	800e0bc <sqrtf+0x6c>
 800e06a:	eeb4 8a48 	vcmp.f32	s16, s16
 800e06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e072:	d623      	bvs.n	800e0bc <sqrtf+0x6c>
 800e074:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e07c:	d51e      	bpl.n	800e0bc <sqrtf+0x6c>
 800e07e:	2201      	movs	r2, #1
 800e080:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800e084:	9200      	str	r2, [sp, #0]
 800e086:	4a19      	ldr	r2, [pc, #100]	; (800e0ec <sqrtf+0x9c>)
 800e088:	9201      	str	r2, [sp, #4]
 800e08a:	2200      	movs	r2, #0
 800e08c:	9208      	str	r2, [sp, #32]
 800e08e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e092:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e096:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800e0e0 <sqrtf+0x90>
 800e09a:	b9a3      	cbnz	r3, 800e0c6 <sqrtf+0x76>
 800e09c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e0a0:	4668      	mov	r0, sp
 800e0a2:	f000 f8d2 	bl	800e24a <matherr>
 800e0a6:	b1a0      	cbz	r0, 800e0d2 <sqrtf+0x82>
 800e0a8:	9b08      	ldr	r3, [sp, #32]
 800e0aa:	b11b      	cbz	r3, 800e0b4 <sqrtf+0x64>
 800e0ac:	f7ff fb1a 	bl	800d6e4 <__errno>
 800e0b0:	9b08      	ldr	r3, [sp, #32]
 800e0b2:	6003      	str	r3, [r0, #0]
 800e0b4:	ed9d 0b06 	vldr	d0, [sp, #24]
 800e0b8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e0bc:	b00b      	add	sp, #44	; 0x2c
 800e0be:	ecbd 8b02 	vpop	{d8}
 800e0c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800e0c6:	2b02      	cmp	r3, #2
 800e0c8:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800e0cc:	ed8d 6b06 	vstr	d6, [sp, #24]
 800e0d0:	d1e6      	bne.n	800e0a0 <sqrtf+0x50>
 800e0d2:	f7ff fb07 	bl	800d6e4 <__errno>
 800e0d6:	2321      	movs	r3, #33	; 0x21
 800e0d8:	6003      	str	r3, [r0, #0]
 800e0da:	e7e5      	b.n	800e0a8 <sqrtf+0x58>
 800e0dc:	f3af 8000 	nop.w
	...
 800e0e8:	24000854 	.word	0x24000854
 800e0ec:	08014234 	.word	0x08014234

0800e0f0 <__ieee754_atan2f>:
 800e0f0:	ee10 2a90 	vmov	r2, s1
 800e0f4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800e0f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e0fc:	b510      	push	{r4, lr}
 800e0fe:	eef0 7a40 	vmov.f32	s15, s0
 800e102:	dc06      	bgt.n	800e112 <__ieee754_atan2f+0x22>
 800e104:	ee10 0a10 	vmov	r0, s0
 800e108:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e10c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e110:	dd04      	ble.n	800e11c <__ieee754_atan2f+0x2c>
 800e112:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e116:	eeb0 0a67 	vmov.f32	s0, s15
 800e11a:	bd10      	pop	{r4, pc}
 800e11c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800e120:	d103      	bne.n	800e12a <__ieee754_atan2f+0x3a>
 800e122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e126:	f000 b893 	b.w	800e250 <atanf>
 800e12a:	1794      	asrs	r4, r2, #30
 800e12c:	f004 0402 	and.w	r4, r4, #2
 800e130:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e134:	b93b      	cbnz	r3, 800e146 <__ieee754_atan2f+0x56>
 800e136:	2c02      	cmp	r4, #2
 800e138:	d06b      	beq.n	800e212 <__ieee754_atan2f+0x122>
 800e13a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800e218 <__ieee754_atan2f+0x128>
 800e13e:	2c03      	cmp	r4, #3
 800e140:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800e144:	e7e7      	b.n	800e116 <__ieee754_atan2f+0x26>
 800e146:	b939      	cbnz	r1, 800e158 <__ieee754_atan2f+0x68>
 800e148:	eddf 7a34 	vldr	s15, [pc, #208]	; 800e21c <__ieee754_atan2f+0x12c>
 800e14c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800e220 <__ieee754_atan2f+0x130>
 800e150:	2800      	cmp	r0, #0
 800e152:	fe67 7a87 	vselge.f32	s15, s15, s14
 800e156:	e7de      	b.n	800e116 <__ieee754_atan2f+0x26>
 800e158:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e15c:	d121      	bne.n	800e1a2 <__ieee754_atan2f+0xb2>
 800e15e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e162:	d111      	bne.n	800e188 <__ieee754_atan2f+0x98>
 800e164:	2c02      	cmp	r4, #2
 800e166:	d009      	beq.n	800e17c <__ieee754_atan2f+0x8c>
 800e168:	2c03      	cmp	r4, #3
 800e16a:	d00a      	beq.n	800e182 <__ieee754_atan2f+0x92>
 800e16c:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800e224 <__ieee754_atan2f+0x134>
 800e170:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800e228 <__ieee754_atan2f+0x138>
 800e174:	2c01      	cmp	r4, #1
 800e176:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800e17a:	e7cc      	b.n	800e116 <__ieee754_atan2f+0x26>
 800e17c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e22c <__ieee754_atan2f+0x13c>
 800e180:	e7c9      	b.n	800e116 <__ieee754_atan2f+0x26>
 800e182:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e230 <__ieee754_atan2f+0x140>
 800e186:	e7c6      	b.n	800e116 <__ieee754_atan2f+0x26>
 800e188:	2c02      	cmp	r4, #2
 800e18a:	d042      	beq.n	800e212 <__ieee754_atan2f+0x122>
 800e18c:	2c03      	cmp	r4, #3
 800e18e:	d005      	beq.n	800e19c <__ieee754_atan2f+0xac>
 800e190:	2c01      	cmp	r4, #1
 800e192:	eddf 7a28 	vldr	s15, [pc, #160]	; 800e234 <__ieee754_atan2f+0x144>
 800e196:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800e238 <__ieee754_atan2f+0x148>
 800e19a:	e7ec      	b.n	800e176 <__ieee754_atan2f+0x86>
 800e19c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800e218 <__ieee754_atan2f+0x128>
 800e1a0:	e7b9      	b.n	800e116 <__ieee754_atan2f+0x26>
 800e1a2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e1a6:	d0cf      	beq.n	800e148 <__ieee754_atan2f+0x58>
 800e1a8:	1a5b      	subs	r3, r3, r1
 800e1aa:	15db      	asrs	r3, r3, #23
 800e1ac:	2b3c      	cmp	r3, #60	; 0x3c
 800e1ae:	dc1a      	bgt.n	800e1e6 <__ieee754_atan2f+0xf6>
 800e1b0:	2a00      	cmp	r2, #0
 800e1b2:	da01      	bge.n	800e1b8 <__ieee754_atan2f+0xc8>
 800e1b4:	333c      	adds	r3, #60	; 0x3c
 800e1b6:	db19      	blt.n	800e1ec <__ieee754_atan2f+0xfc>
 800e1b8:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e1bc:	f000 f91a 	bl	800e3f4 <fabsf>
 800e1c0:	f000 f846 	bl	800e250 <atanf>
 800e1c4:	eef0 7a40 	vmov.f32	s15, s0
 800e1c8:	2c01      	cmp	r4, #1
 800e1ca:	d012      	beq.n	800e1f2 <__ieee754_atan2f+0x102>
 800e1cc:	2c02      	cmp	r4, #2
 800e1ce:	d017      	beq.n	800e200 <__ieee754_atan2f+0x110>
 800e1d0:	2c00      	cmp	r4, #0
 800e1d2:	d0a0      	beq.n	800e116 <__ieee754_atan2f+0x26>
 800e1d4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800e23c <__ieee754_atan2f+0x14c>
 800e1d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e1dc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800e240 <__ieee754_atan2f+0x150>
 800e1e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e1e4:	e797      	b.n	800e116 <__ieee754_atan2f+0x26>
 800e1e6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800e21c <__ieee754_atan2f+0x12c>
 800e1ea:	e7ed      	b.n	800e1c8 <__ieee754_atan2f+0xd8>
 800e1ec:	eddf 7a12 	vldr	s15, [pc, #72]	; 800e238 <__ieee754_atan2f+0x148>
 800e1f0:	e7ea      	b.n	800e1c8 <__ieee754_atan2f+0xd8>
 800e1f2:	ee17 3a90 	vmov	r3, s15
 800e1f6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e1fa:	ee07 3a90 	vmov	s15, r3
 800e1fe:	e78a      	b.n	800e116 <__ieee754_atan2f+0x26>
 800e200:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800e23c <__ieee754_atan2f+0x14c>
 800e204:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e208:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800e240 <__ieee754_atan2f+0x150>
 800e20c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e210:	e781      	b.n	800e116 <__ieee754_atan2f+0x26>
 800e212:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800e240 <__ieee754_atan2f+0x150>
 800e216:	e77e      	b.n	800e116 <__ieee754_atan2f+0x26>
 800e218:	c0490fdb 	.word	0xc0490fdb
 800e21c:	3fc90fdb 	.word	0x3fc90fdb
 800e220:	bfc90fdb 	.word	0xbfc90fdb
 800e224:	bf490fdb 	.word	0xbf490fdb
 800e228:	3f490fdb 	.word	0x3f490fdb
 800e22c:	4016cbe4 	.word	0x4016cbe4
 800e230:	c016cbe4 	.word	0xc016cbe4
 800e234:	80000000 	.word	0x80000000
 800e238:	00000000 	.word	0x00000000
 800e23c:	33bbbd2e 	.word	0x33bbbd2e
 800e240:	40490fdb 	.word	0x40490fdb

0800e244 <__ieee754_sqrtf>:
 800e244:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e248:	4770      	bx	lr

0800e24a <matherr>:
 800e24a:	2000      	movs	r0, #0
 800e24c:	4770      	bx	lr
	...

0800e250 <atanf>:
 800e250:	b538      	push	{r3, r4, r5, lr}
 800e252:	ee10 5a10 	vmov	r5, s0
 800e256:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e25a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800e25e:	eef0 7a40 	vmov.f32	s15, s0
 800e262:	db0f      	blt.n	800e284 <atanf+0x34>
 800e264:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800e268:	dd04      	ble.n	800e274 <atanf+0x24>
 800e26a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800e26e:	eeb0 0a67 	vmov.f32	s0, s15
 800e272:	bd38      	pop	{r3, r4, r5, pc}
 800e274:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800e3a8 <atanf+0x158>
 800e278:	eddf 7a4c 	vldr	s15, [pc, #304]	; 800e3ac <atanf+0x15c>
 800e27c:	2d00      	cmp	r5, #0
 800e27e:	fe77 7a87 	vselgt.f32	s15, s15, s14
 800e282:	e7f4      	b.n	800e26e <atanf+0x1e>
 800e284:	4b4a      	ldr	r3, [pc, #296]	; (800e3b0 <atanf+0x160>)
 800e286:	429c      	cmp	r4, r3
 800e288:	dc10      	bgt.n	800e2ac <atanf+0x5c>
 800e28a:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800e28e:	da0a      	bge.n	800e2a6 <atanf+0x56>
 800e290:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800e3b4 <atanf+0x164>
 800e294:	ee30 7a07 	vadd.f32	s14, s0, s14
 800e298:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e29c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800e2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2a4:	dce3      	bgt.n	800e26e <atanf+0x1e>
 800e2a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e2aa:	e013      	b.n	800e2d4 <atanf+0x84>
 800e2ac:	f000 f8a2 	bl	800e3f4 <fabsf>
 800e2b0:	4b41      	ldr	r3, [pc, #260]	; (800e3b8 <atanf+0x168>)
 800e2b2:	429c      	cmp	r4, r3
 800e2b4:	dc4f      	bgt.n	800e356 <atanf+0x106>
 800e2b6:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800e2ba:	429c      	cmp	r4, r3
 800e2bc:	dc41      	bgt.n	800e342 <atanf+0xf2>
 800e2be:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800e2c2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e2c6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e2d0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e2d4:	1c5a      	adds	r2, r3, #1
 800e2d6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e2da:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800e3bc <atanf+0x16c>
 800e2de:	eddf 5a38 	vldr	s11, [pc, #224]	; 800e3c0 <atanf+0x170>
 800e2e2:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800e3c4 <atanf+0x174>
 800e2e6:	ee66 6a06 	vmul.f32	s13, s12, s12
 800e2ea:	eee6 5a87 	vfma.f32	s11, s13, s14
 800e2ee:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800e3c8 <atanf+0x178>
 800e2f2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e2f6:	eddf 5a35 	vldr	s11, [pc, #212]	; 800e3cc <atanf+0x17c>
 800e2fa:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e2fe:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800e3d0 <atanf+0x180>
 800e302:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e306:	eddf 5a33 	vldr	s11, [pc, #204]	; 800e3d4 <atanf+0x184>
 800e30a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e30e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800e3d8 <atanf+0x188>
 800e312:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e316:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800e3dc <atanf+0x18c>
 800e31a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e31e:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800e3e0 <atanf+0x190>
 800e322:	eea7 5a26 	vfma.f32	s10, s14, s13
 800e326:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800e3e4 <atanf+0x194>
 800e32a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e32e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e332:	eea5 7a86 	vfma.f32	s14, s11, s12
 800e336:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e33a:	d121      	bne.n	800e380 <atanf+0x130>
 800e33c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e340:	e795      	b.n	800e26e <atanf+0x1e>
 800e342:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e346:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e34a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e34e:	2301      	movs	r3, #1
 800e350:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e354:	e7be      	b.n	800e2d4 <atanf+0x84>
 800e356:	4b24      	ldr	r3, [pc, #144]	; (800e3e8 <atanf+0x198>)
 800e358:	429c      	cmp	r4, r3
 800e35a:	dc0b      	bgt.n	800e374 <atanf+0x124>
 800e35c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800e360:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e364:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e368:	2302      	movs	r3, #2
 800e36a:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e36e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e372:	e7af      	b.n	800e2d4 <atanf+0x84>
 800e374:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e378:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e37c:	2303      	movs	r3, #3
 800e37e:	e7a9      	b.n	800e2d4 <atanf+0x84>
 800e380:	4a1a      	ldr	r2, [pc, #104]	; (800e3ec <atanf+0x19c>)
 800e382:	491b      	ldr	r1, [pc, #108]	; (800e3f0 <atanf+0x1a0>)
 800e384:	009b      	lsls	r3, r3, #2
 800e386:	441a      	add	r2, r3
 800e388:	440b      	add	r3, r1
 800e38a:	edd3 6a00 	vldr	s13, [r3]
 800e38e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e392:	2d00      	cmp	r5, #0
 800e394:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e398:	ed92 7a00 	vldr	s14, [r2]
 800e39c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e3a0:	bfb8      	it	lt
 800e3a2:	eef1 7a67 	vneglt.f32	s15, s15
 800e3a6:	e762      	b.n	800e26e <atanf+0x1e>
 800e3a8:	bfc90fdb 	.word	0xbfc90fdb
 800e3ac:	3fc90fdb 	.word	0x3fc90fdb
 800e3b0:	3edfffff 	.word	0x3edfffff
 800e3b4:	7149f2ca 	.word	0x7149f2ca
 800e3b8:	3f97ffff 	.word	0x3f97ffff
 800e3bc:	3c8569d7 	.word	0x3c8569d7
 800e3c0:	3d4bda59 	.word	0x3d4bda59
 800e3c4:	bd6ef16b 	.word	0xbd6ef16b
 800e3c8:	3d886b35 	.word	0x3d886b35
 800e3cc:	3dba2e6e 	.word	0x3dba2e6e
 800e3d0:	3e124925 	.word	0x3e124925
 800e3d4:	3eaaaaab 	.word	0x3eaaaaab
 800e3d8:	bd15a221 	.word	0xbd15a221
 800e3dc:	bd9d8795 	.word	0xbd9d8795
 800e3e0:	bde38e38 	.word	0xbde38e38
 800e3e4:	be4ccccd 	.word	0xbe4ccccd
 800e3e8:	401bffff 	.word	0x401bffff
 800e3ec:	0801423c 	.word	0x0801423c
 800e3f0:	0801424c 	.word	0x0801424c

0800e3f4 <fabsf>:
 800e3f4:	ee10 3a10 	vmov	r3, s0
 800e3f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e3fc:	ee00 3a10 	vmov	s0, r3
 800e400:	4770      	bx	lr
	...

0800e404 <_init>:
 800e404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e406:	bf00      	nop
 800e408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e40a:	bc08      	pop	{r3}
 800e40c:	469e      	mov	lr, r3
 800e40e:	4770      	bx	lr

0800e410 <_fini>:
 800e410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e412:	bf00      	nop
 800e414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e416:	bc08      	pop	{r3}
 800e418:	469e      	mov	lr, r3
 800e41a:	4770      	bx	lr
