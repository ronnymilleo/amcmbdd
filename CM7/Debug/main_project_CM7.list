
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009524  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080097bc  080097bc  000197bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009828  08009828  00019828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009830  08009830  00019830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009834  08009834  00019834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08009838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000fabc  24000078  080098b0  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400fb34  080098b0  0002fb34  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c319  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000471f  00000000  00000000  0004c3bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001558  00000000  00000000  00050ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000013c0  00000000  00000000  00052038  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003badb  00000000  00000000  000533f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001609f  00000000  00000000  0008eed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00185956  00000000  00000000  000a4f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000e9  00000000  00000000  0022a8c8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000057b0  00000000  00000000  0022a9b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00002073  00000000  00000000  00230164  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080097a4 	.word	0x080097a4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	080097a4 	.word	0x080097a4

080002d8 <__aeabi_ldivmod>:
 80002d8:	b97b      	cbnz	r3, 80002fa <__aeabi_ldivmod+0x22>
 80002da:	b972      	cbnz	r2, 80002fa <__aeabi_ldivmod+0x22>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bfbe      	ittt	lt
 80002e0:	2000      	movlt	r0, #0
 80002e2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002e6:	e006      	blt.n	80002f6 <__aeabi_ldivmod+0x1e>
 80002e8:	bf08      	it	eq
 80002ea:	2800      	cmpeq	r0, #0
 80002ec:	bf1c      	itt	ne
 80002ee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002f2:	f04f 30ff 	movne.w	r0, #4294967295
 80002f6:	f000 b9bd 	b.w	8000674 <__aeabi_idiv0>
 80002fa:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000302:	2900      	cmp	r1, #0
 8000304:	db09      	blt.n	800031a <__aeabi_ldivmod+0x42>
 8000306:	2b00      	cmp	r3, #0
 8000308:	db1a      	blt.n	8000340 <__aeabi_ldivmod+0x68>
 800030a:	f000 f84d 	bl	80003a8 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4770      	bx	lr
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	2b00      	cmp	r3, #0
 8000322:	db1b      	blt.n	800035c <__aeabi_ldivmod+0x84>
 8000324:	f000 f840 	bl	80003a8 <__udivmoddi4>
 8000328:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000330:	b004      	add	sp, #16
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	f000 f82f 	bl	80003a8 <__udivmoddi4>
 800034a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000352:	b004      	add	sp, #16
 8000354:	4240      	negs	r0, r0
 8000356:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035a:	4770      	bx	lr
 800035c:	4252      	negs	r2, r2
 800035e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000362:	f000 f821 	bl	80003a8 <__udivmoddi4>
 8000366:	f8dd e004 	ldr.w	lr, [sp, #4]
 800036a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036e:	b004      	add	sp, #16
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr

08000378 <__aeabi_uldivmod>:
 8000378:	b953      	cbnz	r3, 8000390 <__aeabi_uldivmod+0x18>
 800037a:	b94a      	cbnz	r2, 8000390 <__aeabi_uldivmod+0x18>
 800037c:	2900      	cmp	r1, #0
 800037e:	bf08      	it	eq
 8000380:	2800      	cmpeq	r0, #0
 8000382:	bf1c      	itt	ne
 8000384:	f04f 31ff 	movne.w	r1, #4294967295
 8000388:	f04f 30ff 	movne.w	r0, #4294967295
 800038c:	f000 b972 	b.w	8000674 <__aeabi_idiv0>
 8000390:	f1ad 0c08 	sub.w	ip, sp, #8
 8000394:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000398:	f000 f806 	bl	80003a8 <__udivmoddi4>
 800039c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a4:	b004      	add	sp, #16
 80003a6:	4770      	bx	lr

080003a8 <__udivmoddi4>:
 80003a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003ac:	9e08      	ldr	r6, [sp, #32]
 80003ae:	4604      	mov	r4, r0
 80003b0:	4688      	mov	r8, r1
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d14b      	bne.n	800044e <__udivmoddi4+0xa6>
 80003b6:	428a      	cmp	r2, r1
 80003b8:	4615      	mov	r5, r2
 80003ba:	d967      	bls.n	800048c <__udivmoddi4+0xe4>
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	b14a      	cbz	r2, 80003d6 <__udivmoddi4+0x2e>
 80003c2:	f1c2 0720 	rsb	r7, r2, #32
 80003c6:	fa01 f302 	lsl.w	r3, r1, r2
 80003ca:	fa20 f707 	lsr.w	r7, r0, r7
 80003ce:	4095      	lsls	r5, r2
 80003d0:	ea47 0803 	orr.w	r8, r7, r3
 80003d4:	4094      	lsls	r4, r2
 80003d6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003da:	0c23      	lsrs	r3, r4, #16
 80003dc:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e0:	fa1f fc85 	uxth.w	ip, r5
 80003e4:	fb0e 8817 	mls	r8, lr, r7, r8
 80003e8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ec:	fb07 f10c 	mul.w	r1, r7, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x60>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f107 30ff 	add.w	r0, r7, #4294967295
 80003fa:	f080 811b 	bcs.w	8000634 <__udivmoddi4+0x28c>
 80003fe:	4299      	cmp	r1, r3
 8000400:	f240 8118 	bls.w	8000634 <__udivmoddi4+0x28c>
 8000404:	3f02      	subs	r7, #2
 8000406:	442b      	add	r3, r5
 8000408:	1a5b      	subs	r3, r3, r1
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000410:	fb0e 3310 	mls	r3, lr, r0, r3
 8000414:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000418:	fb00 fc0c 	mul.w	ip, r0, ip
 800041c:	45a4      	cmp	ip, r4
 800041e:	d909      	bls.n	8000434 <__udivmoddi4+0x8c>
 8000420:	192c      	adds	r4, r5, r4
 8000422:	f100 33ff 	add.w	r3, r0, #4294967295
 8000426:	f080 8107 	bcs.w	8000638 <__udivmoddi4+0x290>
 800042a:	45a4      	cmp	ip, r4
 800042c:	f240 8104 	bls.w	8000638 <__udivmoddi4+0x290>
 8000430:	3802      	subs	r0, #2
 8000432:	442c      	add	r4, r5
 8000434:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000438:	eba4 040c 	sub.w	r4, r4, ip
 800043c:	2700      	movs	r7, #0
 800043e:	b11e      	cbz	r6, 8000448 <__udivmoddi4+0xa0>
 8000440:	40d4      	lsrs	r4, r2
 8000442:	2300      	movs	r3, #0
 8000444:	e9c6 4300 	strd	r4, r3, [r6]
 8000448:	4639      	mov	r1, r7
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	428b      	cmp	r3, r1
 8000450:	d909      	bls.n	8000466 <__udivmoddi4+0xbe>
 8000452:	2e00      	cmp	r6, #0
 8000454:	f000 80eb 	beq.w	800062e <__udivmoddi4+0x286>
 8000458:	2700      	movs	r7, #0
 800045a:	e9c6 0100 	strd	r0, r1, [r6]
 800045e:	4638      	mov	r0, r7
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	fab3 f783 	clz	r7, r3
 800046a:	2f00      	cmp	r7, #0
 800046c:	d147      	bne.n	80004fe <__udivmoddi4+0x156>
 800046e:	428b      	cmp	r3, r1
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xd0>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 80fa 	bhi.w	800066c <__udivmoddi4+0x2c4>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb61 0303 	sbc.w	r3, r1, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4698      	mov	r8, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d0e0      	beq.n	8000448 <__udivmoddi4+0xa0>
 8000486:	e9c6 4800 	strd	r4, r8, [r6]
 800048a:	e7dd      	b.n	8000448 <__udivmoddi4+0xa0>
 800048c:	b902      	cbnz	r2, 8000490 <__udivmoddi4+0xe8>
 800048e:	deff      	udf	#255	; 0xff
 8000490:	fab2 f282 	clz	r2, r2
 8000494:	2a00      	cmp	r2, #0
 8000496:	f040 808f 	bne.w	80005b8 <__udivmoddi4+0x210>
 800049a:	1b49      	subs	r1, r1, r5
 800049c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a0:	fa1f f885 	uxth.w	r8, r5
 80004a4:	2701      	movs	r7, #1
 80004a6:	fbb1 fcfe 	udiv	ip, r1, lr
 80004aa:	0c23      	lsrs	r3, r4, #16
 80004ac:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b4:	fb08 f10c 	mul.w	r1, r8, ip
 80004b8:	4299      	cmp	r1, r3
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x124>
 80004bc:	18eb      	adds	r3, r5, r3
 80004be:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x122>
 80004c4:	4299      	cmp	r1, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2bc>
 80004ca:	4684      	mov	ip, r0
 80004cc:	1a59      	subs	r1, r3, r1
 80004ce:	b2a3      	uxth	r3, r4
 80004d0:	fbb1 f0fe 	udiv	r0, r1, lr
 80004d4:	fb0e 1410 	mls	r4, lr, r0, r1
 80004d8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004dc:	fb08 f800 	mul.w	r8, r8, r0
 80004e0:	45a0      	cmp	r8, r4
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x14c>
 80004e4:	192c      	adds	r4, r5, r4
 80004e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x14a>
 80004ec:	45a0      	cmp	r8, r4
 80004ee:	f200 80b6 	bhi.w	800065e <__udivmoddi4+0x2b6>
 80004f2:	4618      	mov	r0, r3
 80004f4:	eba4 0408 	sub.w	r4, r4, r8
 80004f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004fc:	e79f      	b.n	800043e <__udivmoddi4+0x96>
 80004fe:	f1c7 0c20 	rsb	ip, r7, #32
 8000502:	40bb      	lsls	r3, r7
 8000504:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000508:	ea4e 0e03 	orr.w	lr, lr, r3
 800050c:	fa01 f407 	lsl.w	r4, r1, r7
 8000510:	fa20 f50c 	lsr.w	r5, r0, ip
 8000514:	fa21 f30c 	lsr.w	r3, r1, ip
 8000518:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800051c:	4325      	orrs	r5, r4
 800051e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000522:	0c2c      	lsrs	r4, r5, #16
 8000524:	fb08 3319 	mls	r3, r8, r9, r3
 8000528:	fa1f fa8e 	uxth.w	sl, lr
 800052c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000530:	fb09 f40a 	mul.w	r4, r9, sl
 8000534:	429c      	cmp	r4, r3
 8000536:	fa02 f207 	lsl.w	r2, r2, r7
 800053a:	fa00 f107 	lsl.w	r1, r0, r7
 800053e:	d90b      	bls.n	8000558 <__udivmoddi4+0x1b0>
 8000540:	eb1e 0303 	adds.w	r3, lr, r3
 8000544:	f109 30ff 	add.w	r0, r9, #4294967295
 8000548:	f080 8087 	bcs.w	800065a <__udivmoddi4+0x2b2>
 800054c:	429c      	cmp	r4, r3
 800054e:	f240 8084 	bls.w	800065a <__udivmoddi4+0x2b2>
 8000552:	f1a9 0902 	sub.w	r9, r9, #2
 8000556:	4473      	add	r3, lr
 8000558:	1b1b      	subs	r3, r3, r4
 800055a:	b2ad      	uxth	r5, r5
 800055c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000560:	fb08 3310 	mls	r3, r8, r0, r3
 8000564:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000568:	fb00 fa0a 	mul.w	sl, r0, sl
 800056c:	45a2      	cmp	sl, r4
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x1da>
 8000570:	eb1e 0404 	adds.w	r4, lr, r4
 8000574:	f100 33ff 	add.w	r3, r0, #4294967295
 8000578:	d26b      	bcs.n	8000652 <__udivmoddi4+0x2aa>
 800057a:	45a2      	cmp	sl, r4
 800057c:	d969      	bls.n	8000652 <__udivmoddi4+0x2aa>
 800057e:	3802      	subs	r0, #2
 8000580:	4474      	add	r4, lr
 8000582:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000586:	fba0 8902 	umull	r8, r9, r0, r2
 800058a:	eba4 040a 	sub.w	r4, r4, sl
 800058e:	454c      	cmp	r4, r9
 8000590:	46c2      	mov	sl, r8
 8000592:	464b      	mov	r3, r9
 8000594:	d354      	bcc.n	8000640 <__udivmoddi4+0x298>
 8000596:	d051      	beq.n	800063c <__udivmoddi4+0x294>
 8000598:	2e00      	cmp	r6, #0
 800059a:	d069      	beq.n	8000670 <__udivmoddi4+0x2c8>
 800059c:	ebb1 050a 	subs.w	r5, r1, sl
 80005a0:	eb64 0403 	sbc.w	r4, r4, r3
 80005a4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005a8:	40fd      	lsrs	r5, r7
 80005aa:	40fc      	lsrs	r4, r7
 80005ac:	ea4c 0505 	orr.w	r5, ip, r5
 80005b0:	e9c6 5400 	strd	r5, r4, [r6]
 80005b4:	2700      	movs	r7, #0
 80005b6:	e747      	b.n	8000448 <__udivmoddi4+0xa0>
 80005b8:	f1c2 0320 	rsb	r3, r2, #32
 80005bc:	fa20 f703 	lsr.w	r7, r0, r3
 80005c0:	4095      	lsls	r5, r2
 80005c2:	fa01 f002 	lsl.w	r0, r1, r2
 80005c6:	fa21 f303 	lsr.w	r3, r1, r3
 80005ca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005ce:	4338      	orrs	r0, r7
 80005d0:	0c01      	lsrs	r1, r0, #16
 80005d2:	fbb3 f7fe 	udiv	r7, r3, lr
 80005d6:	fa1f f885 	uxth.w	r8, r5
 80005da:	fb0e 3317 	mls	r3, lr, r7, r3
 80005de:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005e2:	fb07 f308 	mul.w	r3, r7, r8
 80005e6:	428b      	cmp	r3, r1
 80005e8:	fa04 f402 	lsl.w	r4, r4, r2
 80005ec:	d907      	bls.n	80005fe <__udivmoddi4+0x256>
 80005ee:	1869      	adds	r1, r5, r1
 80005f0:	f107 3cff 	add.w	ip, r7, #4294967295
 80005f4:	d22f      	bcs.n	8000656 <__udivmoddi4+0x2ae>
 80005f6:	428b      	cmp	r3, r1
 80005f8:	d92d      	bls.n	8000656 <__udivmoddi4+0x2ae>
 80005fa:	3f02      	subs	r7, #2
 80005fc:	4429      	add	r1, r5
 80005fe:	1acb      	subs	r3, r1, r3
 8000600:	b281      	uxth	r1, r0
 8000602:	fbb3 f0fe 	udiv	r0, r3, lr
 8000606:	fb0e 3310 	mls	r3, lr, r0, r3
 800060a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060e:	fb00 f308 	mul.w	r3, r0, r8
 8000612:	428b      	cmp	r3, r1
 8000614:	d907      	bls.n	8000626 <__udivmoddi4+0x27e>
 8000616:	1869      	adds	r1, r5, r1
 8000618:	f100 3cff 	add.w	ip, r0, #4294967295
 800061c:	d217      	bcs.n	800064e <__udivmoddi4+0x2a6>
 800061e:	428b      	cmp	r3, r1
 8000620:	d915      	bls.n	800064e <__udivmoddi4+0x2a6>
 8000622:	3802      	subs	r0, #2
 8000624:	4429      	add	r1, r5
 8000626:	1ac9      	subs	r1, r1, r3
 8000628:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800062c:	e73b      	b.n	80004a6 <__udivmoddi4+0xfe>
 800062e:	4637      	mov	r7, r6
 8000630:	4630      	mov	r0, r6
 8000632:	e709      	b.n	8000448 <__udivmoddi4+0xa0>
 8000634:	4607      	mov	r7, r0
 8000636:	e6e7      	b.n	8000408 <__udivmoddi4+0x60>
 8000638:	4618      	mov	r0, r3
 800063a:	e6fb      	b.n	8000434 <__udivmoddi4+0x8c>
 800063c:	4541      	cmp	r1, r8
 800063e:	d2ab      	bcs.n	8000598 <__udivmoddi4+0x1f0>
 8000640:	ebb8 0a02 	subs.w	sl, r8, r2
 8000644:	eb69 020e 	sbc.w	r2, r9, lr
 8000648:	3801      	subs	r0, #1
 800064a:	4613      	mov	r3, r2
 800064c:	e7a4      	b.n	8000598 <__udivmoddi4+0x1f0>
 800064e:	4660      	mov	r0, ip
 8000650:	e7e9      	b.n	8000626 <__udivmoddi4+0x27e>
 8000652:	4618      	mov	r0, r3
 8000654:	e795      	b.n	8000582 <__udivmoddi4+0x1da>
 8000656:	4667      	mov	r7, ip
 8000658:	e7d1      	b.n	80005fe <__udivmoddi4+0x256>
 800065a:	4681      	mov	r9, r0
 800065c:	e77c      	b.n	8000558 <__udivmoddi4+0x1b0>
 800065e:	3802      	subs	r0, #2
 8000660:	442c      	add	r4, r5
 8000662:	e747      	b.n	80004f4 <__udivmoddi4+0x14c>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	442b      	add	r3, r5
 800066a:	e72f      	b.n	80004cc <__udivmoddi4+0x124>
 800066c:	4638      	mov	r0, r7
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xda>
 8000670:	4637      	mov	r7, r6
 8000672:	e6e9      	b.n	8000448 <__udivmoddi4+0xa0>

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800067c:	4b2f      	ldr	r3, [pc, #188]	; (800073c <SystemInit+0xc4>)
 800067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000682:	4a2e      	ldr	r2, [pc, #184]	; (800073c <SystemInit+0xc4>)
 8000684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 800068c:	4b2b      	ldr	r3, [pc, #172]	; (800073c <SystemInit+0xc4>)
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	4a2a      	ldr	r2, [pc, #168]	; (800073c <SystemInit+0xc4>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000698:	4b29      	ldr	r3, [pc, #164]	; (8000740 <SystemInit+0xc8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a28      	ldr	r2, [pc, #160]	; (8000740 <SystemInit+0xc8>)
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006a4:	4b26      	ldr	r3, [pc, #152]	; (8000740 <SystemInit+0xc8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006aa:	4b25      	ldr	r3, [pc, #148]	; (8000740 <SystemInit+0xc8>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4924      	ldr	r1, [pc, #144]	; (8000740 <SystemInit+0xc8>)
 80006b0:	4b24      	ldr	r3, [pc, #144]	; (8000744 <SystemInit+0xcc>)
 80006b2:	4013      	ands	r3, r2
 80006b4:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006b6:	4b22      	ldr	r3, [pc, #136]	; (8000740 <SystemInit+0xc8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006bc:	4b20      	ldr	r3, [pc, #128]	; (8000740 <SystemInit+0xc8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006c2:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <SystemInit+0xc8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006c8:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <SystemInit+0xc8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006ce:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <SystemInit+0xc8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <SystemInit+0xc8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <SystemInit+0xc8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <SystemInit+0xc8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <SystemInit+0xc8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <SystemInit+0xc8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <SystemInit+0xc8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <SystemInit+0xc8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a10      	ldr	r2, [pc, #64]	; (8000740 <SystemInit+0xc8>)
 80006fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000702:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <SystemInit+0xc8>)
 8000706:	2200      	movs	r2, #0
 8000708:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <SystemInit+0xd0>)
 800070c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <SystemInit+0xd0>)
 8000710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000714:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <SystemInit+0xd4>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <SystemInit+0xd8>)
 800071c:	4013      	ands	r3, r2
 800071e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000722:	d202      	bcs.n	800072a <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <SystemInit+0xdc>)
 8000726:	2201      	movs	r2, #1
 8000728:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800072a:	4b04      	ldr	r3, [pc, #16]	; (800073c <SystemInit+0xc4>)
 800072c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000730:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00
 8000740:	58024400 	.word	0x58024400
 8000744:	eaf6ed7f 	.word	0xeaf6ed7f
 8000748:	580000c0 	.word	0x580000c0
 800074c:	5c001000 	.word	0x5c001000
 8000750:	ffff0000 	.word	0xffff0000
 8000754:	51008108 	.word	0x51008108

08000758 <arm_relu_q15>:
   * Optimized relu with QSUB instructions.
   *
   */

void arm_relu_q15(q15_t * data, uint16_t size)
{
 8000758:	b480      	push	{r7}
 800075a:	b08f      	sub	sp, #60	; 0x3c
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	807b      	strh	r3, [r7, #2]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    uint16_t  i = size >> 1;
 8000764:	887b      	ldrh	r3, [r7, #2]
 8000766:	085b      	lsrs	r3, r3, #1
 8000768:	86fb      	strh	r3, [r7, #54]	; 0x36
    q15_t    *pIn = data;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	613b      	str	r3, [r7, #16]
    q15_t    *pOut = data;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	60fb      	str	r3, [r7, #12]
    q31_t     in;
    q31_t     buf;
    q31_t     mask;

    while (i)
 8000772:	e032      	b.n	80007da <arm_relu_q15+0x82>
    {
        in = *__SIMD32(pIn)++;
 8000774:	f107 0210 	add.w	r2, r7, #16
 8000778:	6813      	ldr	r3, [r2, #0]
 800077a:	1d19      	adds	r1, r3, #4
 800077c:	6011      	str	r1, [r2, #0]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	633b      	str	r3, [r7, #48]	; 0x30

        /* extract the first bit */
        buf = __ROR(in & 0x80008000, 15);
 8000782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000784:	f003 2380 	and.w	r3, r3, #2147516416	; 0x80008000
 8000788:	61bb      	str	r3, [r7, #24]
 800078a:	230f      	movs	r3, #15
 800078c:	617b      	str	r3, [r7, #20]
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	f003 031f 	and.w	r3, r3, #31
 8000794:	617b      	str	r3, [r7, #20]
  if (op2 == 0U)
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d101      	bne.n	80007a0 <arm_relu_q15+0x48>
  {
    return op1;
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	e003      	b.n	80007a8 <arm_relu_q15+0x50>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 80007a0:	69ba      	ldr	r2, [r7, #24]
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	fa62 f303 	ror.w	r3, r2, r3
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* if MSB=1, mask will be 0xFF, 0x0 otherwise */
        mask = __QSUB16(0x00000000, buf);
 80007aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ac:	2200      	movs	r2, #0
 80007ae:	627a      	str	r2, [r7, #36]	; 0x24
 80007b0:	623b      	str	r3, [r7, #32]

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80007b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b4:	6a3a      	ldr	r2, [r7, #32]
 80007b6:	fad3 f312 	qsub16	r3, r3, r2
 80007ba:	61fb      	str	r3, [r7, #28]
  return(result);
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28

        *__SIMD32(pOut)++ = in & (~mask);
 80007c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007c2:	43d9      	mvns	r1, r3
 80007c4:	f107 020c 	add.w	r2, r7, #12
 80007c8:	6813      	ldr	r3, [r2, #0]
 80007ca:	1d18      	adds	r0, r3, #4
 80007cc:	6010      	str	r0, [r2, #0]
 80007ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007d0:	400a      	ands	r2, r1
 80007d2:	601a      	str	r2, [r3, #0]
        i--;
 80007d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80007d6:	3b01      	subs	r3, #1
 80007d8:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 80007da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1c9      	bne.n	8000774 <arm_relu_q15+0x1c>
    }

    if (size & 0x1)
 80007e0:	887b      	ldrh	r3, [r7, #2]
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d00a      	beq.n	8000800 <arm_relu_q15+0xa8>
    {
        if (*pIn < 0)
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	da02      	bge.n	80007fa <arm_relu_q15+0xa2>
        {
            *pIn = 0;
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	2200      	movs	r2, #0
 80007f8:	801a      	strh	r2, [r3, #0]
        }
        pIn++;
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	3302      	adds	r3, #2
 80007fe:	613b      	str	r3, [r7, #16]
            data[i] = 0;
    }

#endif                          /* ARM_MATH_DSP */

}
 8000800:	bf00      	nop
 8000802:	373c      	adds	r7, #60	; 0x3c
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <arm_fully_connected_q15>:
                        const uint16_t bias_shift,
                        const uint16_t out_shift, 
                        const q15_t * bias, 
                        q15_t * pOut,
                        q15_t * vec_buffer)
{
 800080c:	b480      	push	{r7}
 800080e:	b0b7      	sub	sp, #220	; 0xdc
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	4611      	mov	r1, r2
 8000818:	461a      	mov	r2, r3
 800081a:	460b      	mov	r3, r1
 800081c:	80fb      	strh	r3, [r7, #6]
 800081e:	4613      	mov	r3, r2
 8000820:	80bb      	strh	r3, [r7, #4]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    const q15_t *pB = pM;
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	61fb      	str	r3, [r7, #28]
    const q15_t *pB2 = pB + dim_vec;
 8000826:	69fa      	ldr	r2, [r7, #28]
 8000828:	88fb      	ldrh	r3, [r7, #6]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	4413      	add	r3, r2
 800082e:	61bb      	str	r3, [r7, #24]
    q15_t    *pO = pOut;
 8000830:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000834:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    const q15_t    *pA;
    const q15_t    *pBias = bias;
 8000838:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800083c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    uint16_t rowCnt = num_of_rows >> 1;
 8000840:	88bb      	ldrh	r3, [r7, #4]
 8000842:	085b      	lsrs	r3, r3, #1
 8000844:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce

    /* this loop loops over different output */
    while (rowCnt) {
 8000848:	e124      	b.n	8000a94 <arm_fully_connected_q15+0x288>
        q31_t     sum =  ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 800084a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800084e:	1c9a      	adds	r2, r3, #2
 8000850:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8000854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000858:	461a      	mov	r2, r3
 800085a:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800085e:	409a      	lsls	r2, r3
 8000860:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8000864:	3b01      	subs	r3, #1
 8000866:	2101      	movs	r1, #1
 8000868:	fa01 f303 	lsl.w	r3, r1, r3
 800086c:	4413      	add	r3, r2
 800086e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8000872:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000876:	1c9a      	adds	r2, r3, #2
 8000878:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800087c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000880:	461a      	mov	r2, r3
 8000882:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8000886:	409a      	lsls	r2, r3
 8000888:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 800088c:	3b01      	subs	r3, #1
 800088e:	2101      	movs	r1, #1
 8000890:	fa01 f303 	lsl.w	r3, r1, r3
 8000894:	4413      	add	r3, r2
 8000896:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

        uint16_t  colCnt = dim_vec >> 2;
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	089b      	lsrs	r3, r3, #2
 800089e:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2

        pA = pV;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	617b      	str	r3, [r7, #20]
        pB2 = pB + dim_vec;
 80008a6:	69fa      	ldr	r2, [r7, #28]
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4413      	add	r3, r2
 80008ae:	61bb      	str	r3, [r7, #24]

        while (colCnt)
 80008b0:	e07c      	b.n	80009ac <arm_fully_connected_q15+0x1a0>
        {
            q31_t     inV1, inM1, inM2;
            inV1 = *__SIMD32(pA)++;
 80008b2:	f107 0214 	add.w	r2, r7, #20
 80008b6:	6813      	ldr	r3, [r2, #0]
 80008b8:	1d19      	adds	r1, r3, #4
 80008ba:	6011      	str	r1, [r2, #0]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            inM1 = *__SIMD32(pB)++;
 80008c2:	f107 021c 	add.w	r2, r7, #28
 80008c6:	6813      	ldr	r3, [r2, #0]
 80008c8:	1d19      	adds	r1, r3, #4
 80008ca:	6011      	str	r1, [r2, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            sum = __SMLAD(inV1, inM1, sum);
 80008d2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80008d6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80008da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80008de:	64f9      	str	r1, [r7, #76]	; 0x4c
 80008e0:	64ba      	str	r2, [r7, #72]	; 0x48
 80008e2:	647b      	str	r3, [r7, #68]	; 0x44

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80008e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80008e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80008ea:	fb23 1302 	smlad	r3, r3, r2, r1
 80008ee:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80008f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            inM2 = *__SIMD32(pB2)++;
 80008f6:	f107 0218 	add.w	r2, r7, #24
 80008fa:	6813      	ldr	r3, [r2, #0]
 80008fc:	1d19      	adds	r1, r3, #4
 80008fe:	6011      	str	r1, [r2, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            sum2 = __SMLAD(inV1, inM2, sum2);
 8000906:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800090a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800090e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000912:	65f9      	str	r1, [r7, #92]	; 0x5c
 8000914:	65ba      	str	r2, [r7, #88]	; 0x58
 8000916:	657b      	str	r3, [r7, #84]	; 0x54
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800091a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800091c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800091e:	fb23 1302 	smlad	r3, r3, r2, r1
 8000922:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 8000924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000926:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

            inV1 = *__SIMD32(pA)++;
 800092a:	f107 0214 	add.w	r2, r7, #20
 800092e:	6813      	ldr	r3, [r2, #0]
 8000930:	1d19      	adds	r1, r3, #4
 8000932:	6011      	str	r1, [r2, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            inM1 = *__SIMD32(pB)++;
 800093a:	f107 021c 	add.w	r2, r7, #28
 800093e:	6813      	ldr	r3, [r2, #0]
 8000940:	1d19      	adds	r1, r3, #4
 8000942:	6011      	str	r1, [r2, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            sum = __SMLAD(inV1, inM1, sum);
 800094a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800094e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000952:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000956:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000958:	66ba      	str	r2, [r7, #104]	; 0x68
 800095a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800095c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800095e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000960:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000962:	fb23 1302 	smlad	r3, r3, r2, r1
 8000966:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8000968:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800096a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            inM2 = *__SIMD32(pB2)++;
 800096e:	f107 0218 	add.w	r2, r7, #24
 8000972:	6813      	ldr	r3, [r2, #0]
 8000974:	1d19      	adds	r1, r3, #4
 8000976:	6011      	str	r1, [r2, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            sum2 = __SMLAD(inV1, inM2, sum2);
 800097e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000982:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000986:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800098a:	67f9      	str	r1, [r7, #124]	; 0x7c
 800098c:	67ba      	str	r2, [r7, #120]	; 0x78
 800098e:	677b      	str	r3, [r7, #116]	; 0x74
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000990:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000992:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000994:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000996:	fb23 1302 	smlad	r3, r3, r2, r1
 800099a:	673b      	str	r3, [r7, #112]	; 0x70
  return(result);
 800099c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800099e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

            colCnt--;
 80009a2:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80009a6:	3b01      	subs	r3, #1
 80009a8:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        while (colCnt)
 80009ac:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f47f af7e 	bne.w	80008b2 <arm_fully_connected_q15+0xa6>
        }
        colCnt = dim_vec & 0x3;
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        while (colCnt)
 80009c0:	e02c      	b.n	8000a1c <arm_fully_connected_q15+0x210>
        {
            q15_t     inV = *pA++;
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	1c9a      	adds	r2, r3, #2
 80009c6:	617a      	str	r2, [r7, #20]
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
            q15_t     inM = *pB++;
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	1c9a      	adds	r2, r3, #2
 80009d2:	61fa      	str	r2, [r7, #28]
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
            q15_t     inM2 = *pB2++;
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	1c9a      	adds	r2, r3, #2
 80009de:	61ba      	str	r2, [r7, #24]
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

            sum += inV * inM;
 80009e6:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80009ea:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 80009ee:	fb02 f303 	mul.w	r3, r2, r3
 80009f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80009f6:	4413      	add	r3, r2
 80009f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            sum2 += inV * inM2;
 80009fc:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000a00:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 8000a04:	fb02 f303 	mul.w	r3, r2, r3
 8000a08:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000a0c:	4413      	add	r3, r2
 8000a0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            colCnt--;
 8000a12:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8000a16:	3b01      	subs	r3, #1
 8000a18:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        while (colCnt)
 8000a1c:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1ce      	bne.n	80009c2 <arm_fully_connected_q15+0x1b6>
        }                       /* while over colCnt */
        *pO++ =  (q15_t) (__SSAT((sum >> out_shift), 16));
 8000a24:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8000a28:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000a2c:	fa42 f303 	asr.w	r3, r2, r3
 8000a30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000a34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000a38:	f303 030f 	ssat	r3, #16, r3
 8000a3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000a40:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8000a44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000a48:	1c9a      	adds	r2, r3, #2
 8000a4a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000a4e:	b20a      	sxth	r2, r1
 8000a50:	801a      	strh	r2, [r3, #0]
        *pO++ = (q15_t) (__SSAT((sum2>> out_shift), 16));
 8000a52:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8000a56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000a5a:	fa42 f303 	asr.w	r3, r2, r3
 8000a5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000a62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000a66:	f303 030f 	ssat	r3, #16, r3
 8000a6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000a6e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8000a72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000a76:	1c9a      	adds	r2, r3, #2
 8000a78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000a7c:	b20a      	sxth	r2, r1
 8000a7e:	801a      	strh	r2, [r3, #0]
		
        /* adjust the pointers and counters */
        pB = pB + dim_vec;
 8000a80:	69fa      	ldr	r2, [r7, #28]
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4413      	add	r3, r2
 8000a88:	61fb      	str	r3, [r7, #28]
        rowCnt --;
 8000a8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    while (rowCnt) {
 8000a94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f47f aed6 	bne.w	800084a <arm_fully_connected_q15+0x3e>
    }

    rowCnt = num_of_rows & 0x1;
 8000a9e:	88bb      	ldrh	r3, [r7, #4]
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce

    while (rowCnt) {
 8000aa8:	e0a9      	b.n	8000bfe <arm_fully_connected_q15+0x3f2>
        q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8000aaa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000aae:	1c9a      	adds	r2, r3, #2
 8000ab0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8000ab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8000abe:	409a      	lsls	r2, r3
 8000ac0:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	4413      	add	r3, r2
 8000ace:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        uint16_t  colCnt = dim_vec >> 2;
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	089b      	lsrs	r3, r3, #2
 8000ad6:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba

        pA = pV;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	617b      	str	r3, [r7, #20]
      
        while (colCnt) {
 8000ade:	e048      	b.n	8000b72 <arm_fully_connected_q15+0x366>
            q31_t     inV1, inM1;
            inV1 = *__SIMD32(pA)++;
 8000ae0:	f107 0214 	add.w	r2, r7, #20
 8000ae4:	6813      	ldr	r3, [r2, #0]
 8000ae6:	1d19      	adds	r1, r3, #4
 8000ae8:	6011      	str	r1, [r2, #0]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            inM1 = *__SIMD32(pB)++;
 8000af0:	f107 021c 	add.w	r2, r7, #28
 8000af4:	6813      	ldr	r3, [r2, #0]
 8000af6:	1d19      	adds	r1, r3, #4
 8000af8:	6011      	str	r1, [r2, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            sum = __SMLAD(inV1, inM1, sum);
 8000b00:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000b04:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000b08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000b0c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000b0e:	62ba      	str	r2, [r7, #40]	; 0x28
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b18:	fb23 1302 	smlad	r3, r3, r2, r1
 8000b1c:	623b      	str	r3, [r7, #32]
  return(result);
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
 8000b20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            
            inV1 = *__SIMD32(pA)++;
 8000b24:	f107 0214 	add.w	r2, r7, #20
 8000b28:	6813      	ldr	r3, [r2, #0]
 8000b2a:	1d19      	adds	r1, r3, #4
 8000b2c:	6011      	str	r1, [r2, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            inM1 = *__SIMD32(pB)++;
 8000b34:	f107 021c 	add.w	r2, r7, #28
 8000b38:	6813      	ldr	r3, [r2, #0]
 8000b3a:	1d19      	adds	r1, r3, #4
 8000b3c:	6011      	str	r1, [r2, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            sum = __SMLAD(inV1, inM1, sum);
 8000b44:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000b48:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000b4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000b50:	63f9      	str	r1, [r7, #60]	; 0x3c
 8000b52:	63ba      	str	r2, [r7, #56]	; 0x38
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000b5c:	fb23 1302 	smlad	r3, r3, r2, r1
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8000b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
				
            colCnt--;
 8000b68:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        while (colCnt) {
 8000b72:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1b2      	bne.n	8000ae0 <arm_fully_connected_q15+0x2d4>
	}
			
	/* left-over of the vector */
	colCnt = dim_vec & 0x3;
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	f003 0303 	and.w	r3, r3, #3
 8000b80:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
	while(colCnt) {
 8000b84:	e01b      	b.n	8000bbe <arm_fully_connected_q15+0x3b2>
            q15_t     inV = *pA++;
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	1c9a      	adds	r2, r3, #2
 8000b8a:	617a      	str	r2, [r7, #20]
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            q15_t     inM = *pB++;
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	1c9a      	adds	r2, r3, #2
 8000b96:	61fa      	str	r2, [r7, #28]
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

            sum += inV * inM;
 8000b9e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8000ba2:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	; 0xac
 8000ba6:	fb02 f303 	mul.w	r3, r2, r3
 8000baa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000bae:	4413      	add	r3, r2
 8000bb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            colCnt--;
 8000bb4:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
	while(colCnt) {
 8000bbe:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d1df      	bne.n	8000b86 <arm_fully_connected_q15+0x37a>
	}

        *pO++ =  (q15_t) (__SSAT((sum >> out_shift), 16));
 8000bc6:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8000bca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000bce:	fa42 f303 	asr.w	r3, r2, r3
 8000bd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000bd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000bda:	f303 030f 	ssat	r3, #16, r3
 8000bde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000be2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8000be6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000bea:	1c9a      	adds	r2, r3, #2
 8000bec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000bf0:	b20a      	sxth	r2, r1
 8000bf2:	801a      	strh	r2, [r3, #0]
			
        rowCnt --;
 8000bf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    while (rowCnt) {
 8000bfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f47f af51 	bne.w	8000aaa <arm_fully_connected_q15+0x29e>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return (ARM_MATH_SUCCESS);
 8000c08:	2300      	movs	r3, #0

}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	37dc      	adds	r7, #220	; 0xdc
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <arm_softmax_q15>:
   *  with a log(2) scaling factor.
   *
   */

void arm_softmax_q15(const q15_t * vec_in, const uint16_t dim_vec, q15_t * p_out)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b093      	sub	sp, #76	; 0x4c
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	460b      	mov	r3, r1
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	817b      	strh	r3, [r7, #10]
    q31_t     sum;
    int16_t   i;
    uint8_t   shift;
    q31_t     base;
    base = -1 * 0x100000;
 8000c26:	4b5e      	ldr	r3, [pc, #376]	; (8000da0 <arm_softmax_q15+0x188>)
 8000c28:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < dim_vec; i++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000c30:	e019      	b.n	8000c66 <arm_softmax_q15+0x4e>
    {
        if (vec_in[i] > base)
 8000c32:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c40:	461a      	mov	r2, r3
 8000c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c44:	4293      	cmp	r3, r2
 8000c46:	da07      	bge.n	8000c58 <arm_softmax_q15+0x40>
        {
            base = vec_in[i];
 8000c48:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	4413      	add	r3, r2
 8000c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c56:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < dim_vec; i++)
 8000c58:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	3301      	adds	r3, #1
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000c66:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8000c6a:	897b      	ldrh	r3, [r7, #10]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	dbe0      	blt.n	8000c32 <arm_softmax_q15+0x1a>

    /* we ignore really small values  
     * anyway, they will be 0 after shrinking
     * to q15_t
     */
    base = base - 16;
 8000c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c72:	3b10      	subs	r3, #16
 8000c74:	63fb      	str	r3, [r7, #60]	; 0x3c

    sum = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	647b      	str	r3, [r7, #68]	; 0x44

    for (i = 0; i < dim_vec; i++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000c80:	e02b      	b.n	8000cda <arm_softmax_q15+0xc2>
    {
        if (vec_in[i] > base)
 8000c82:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c90:	461a      	mov	r2, r3
 8000c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c94:	4293      	cmp	r3, r2
 8000c96:	da19      	bge.n	8000ccc <arm_softmax_q15+0xb4>
        {
            shift = (uint8_t)__USAT(vec_in[i] - base, 5);
 8000c98:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	f383 0305 	usat	r3, #5, r3
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            sum += 0x1 << shift;
 8000cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000cc8:	4413      	add	r3, r2
 8000cca:	647b      	str	r3, [r7, #68]	; 0x44
    for (i = 0; i < dim_vec; i++)
 8000ccc:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000cda:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8000cde:	897b      	ldrh	r3, [r7, #10]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	dbce      	blt.n	8000c82 <arm_softmax_q15+0x6a>
        }
    }

    /* This is effectively (0x1 << 32) / sum */
    int64_t div_base = 0x100000000LL;
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	f04f 0401 	mov.w	r4, #1
 8000cec:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    int output_base = (int32_t)(div_base / sum);
 8000cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cf2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4623      	mov	r3, r4
 8000cfa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000cfe:	f7ff faeb 	bl	80002d8 <__aeabi_ldivmod>
 8000d02:	4603      	mov	r3, r0
 8000d04:	460c      	mov	r4, r1
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Final confidence will be output_base >> ( 17 - (vec_in[i] - base) )
     * so 32768 (0x1<<15) -> 100% confidence when sum = 0x1 << 16, output_base = 0x1 << 16
     * and vec_in[i]-base = 16
     */
    for (i = 0; i < dim_vec; i++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000d0e:	e03d      	b.n	8000d8c <arm_softmax_q15+0x174>
    {
        if (vec_in[i] > base) 
 8000d10:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4413      	add	r3, r2
 8000d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d22:	4293      	cmp	r3, r2
 8000d24:	da24      	bge.n	8000d70 <arm_softmax_q15+0x158>
        {
            /* Here minimum value of 17+base-vec[i] will be 1 */
            shift = (uint8_t)__USAT(17+base-vec_in[i], 5);
 8000d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d28:	3311      	adds	r3, #17
 8000d2a:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8000d2e:	0052      	lsls	r2, r2, #1
 8000d30:	68f9      	ldr	r1, [r7, #12]
 8000d32:	440a      	add	r2, r1
 8000d34:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d38:	1a9b      	subs	r3, r3, r2
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3e:	f383 0305 	usat	r3, #5, r3
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            p_out[i] = (q15_t) __SSAT((output_base >> shift), 16);
 8000d4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d50:	fa42 f303 	asr.w	r3, r2, r3
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	f303 030f 	ssat	r3, #16, r3
 8000d5c:	61bb      	str	r3, [r7, #24]
 8000d5e:	69b9      	ldr	r1, [r7, #24]
 8000d60:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	b20a      	sxth	r2, r1
 8000d6c:	801a      	strh	r2, [r3, #0]
 8000d6e:	e006      	b.n	8000d7e <arm_softmax_q15+0x166>
        } else
        {
            p_out[i] = 0;
 8000d70:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < dim_vec; i++)
 8000d7e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	3301      	adds	r3, #1
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000d8c:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8000d90:	897b      	ldrh	r3, [r7, #10]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	dbbc      	blt.n	8000d10 <arm_softmax_q15+0xf8>
        }
    }

}
 8000d96:	bf00      	nop
 8000d98:	374c      	adds	r7, #76	; 0x4c
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd90      	pop	{r4, r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	fff00000 	.word	0xfff00000

08000da4 <fully_connected_run>:
extern q15_t aq15_layer_4_biases[L4_OUT_DIM];
extern q15_t aq15_layer_5_weights[L5_IN_DIM*L5_OUT_DIM];
extern q15_t aq15_layer_5_biases[L5_OUT_DIM];

void fully_connected_run(q15_t *input_data, float32_t *prediction)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08e      	sub	sp, #56	; 0x38
 8000da8:	af06      	add	r7, sp, #24
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
	q15_t max_Value = 0, data[L1_IN_DIM] = {0};
 8000dae:	2300      	movs	r3, #0
 8000db0:	83fb      	strh	r3, [r7, #30]
 8000db2:	f107 0310 	add.w	r3, r7, #16
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
	uint32_t max_Index = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
	arm_copy_q15(&input_data[0], &data[0], L1_IN_DIM);
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	2206      	movs	r2, #6
 8000dc8:	4619      	mov	r1, r3
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f007 fd3c 	bl	8008848 <arm_copy_q15>
    // Input layer
    arm_fully_connected_q15(
 8000dd0:	f107 0010 	add.w	r0, r7, #16
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	9304      	str	r3, [sp, #16]
 8000dd8:	4b3a      	ldr	r3, [pc, #232]	; (8000ec4 <fully_connected_run+0x120>)
 8000dda:	9303      	str	r3, [sp, #12]
 8000ddc:	4b3a      	ldr	r3, [pc, #232]	; (8000ec8 <fully_connected_run+0x124>)
 8000dde:	9302      	str	r3, [sp, #8]
 8000de0:	230c      	movs	r3, #12
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	230b      	movs	r3, #11
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2306      	movs	r3, #6
 8000dea:	2206      	movs	r2, #6
 8000dec:	4937      	ldr	r1, [pc, #220]	; (8000ecc <fully_connected_run+0x128>)
 8000dee:	f7ff fd0d 	bl	800080c <arm_fully_connected_q15>
        L1_BIAS_SHIFT,
        L1_OUT_SHIFT,
        aq15_layer_1_biases,
        layer_1_out_Buf,
        NULL);
    arm_relu_q15(
 8000df2:	2106      	movs	r1, #6
 8000df4:	4833      	ldr	r0, [pc, #204]	; (8000ec4 <fully_connected_run+0x120>)
 8000df6:	f7ff fcaf 	bl	8000758 <arm_relu_q15>
    	layer_1_out_Buf,
        L1_OUT_DIM);

    // First hidden layer
    arm_fully_connected_q15(
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	9304      	str	r3, [sp, #16]
 8000dfe:	4b34      	ldr	r3, [pc, #208]	; (8000ed0 <fully_connected_run+0x12c>)
 8000e00:	9303      	str	r3, [sp, #12]
 8000e02:	4b34      	ldr	r3, [pc, #208]	; (8000ed4 <fully_connected_run+0x130>)
 8000e04:	9302      	str	r3, [sp, #8]
 8000e06:	230d      	movs	r3, #13
 8000e08:	9301      	str	r3, [sp, #4]
 8000e0a:	230c      	movs	r3, #12
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2324      	movs	r3, #36	; 0x24
 8000e10:	2206      	movs	r2, #6
 8000e12:	4931      	ldr	r1, [pc, #196]	; (8000ed8 <fully_connected_run+0x134>)
 8000e14:	482b      	ldr	r0, [pc, #172]	; (8000ec4 <fully_connected_run+0x120>)
 8000e16:	f7ff fcf9 	bl	800080c <arm_fully_connected_q15>
        L2_BIAS_SHIFT,
        L2_OUT_SHIFT,
		aq15_layer_2_biases,
        layer_2_out_Buf,
        NULL);
    arm_relu_q15(
 8000e1a:	2124      	movs	r1, #36	; 0x24
 8000e1c:	482c      	ldr	r0, [pc, #176]	; (8000ed0 <fully_connected_run+0x12c>)
 8000e1e:	f7ff fc9b 	bl	8000758 <arm_relu_q15>
    	layer_2_out_Buf,
		L2_OUT_DIM);

    // Second hidden layer
    arm_fully_connected_q15(
 8000e22:	2300      	movs	r3, #0
 8000e24:	9304      	str	r3, [sp, #16]
 8000e26:	4b2d      	ldr	r3, [pc, #180]	; (8000edc <fully_connected_run+0x138>)
 8000e28:	9303      	str	r3, [sp, #12]
 8000e2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <fully_connected_run+0x13c>)
 8000e2c:	9302      	str	r3, [sp, #8]
 8000e2e:	230f      	movs	r3, #15
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	230d      	movs	r3, #13
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2318      	movs	r3, #24
 8000e38:	2224      	movs	r2, #36	; 0x24
 8000e3a:	492a      	ldr	r1, [pc, #168]	; (8000ee4 <fully_connected_run+0x140>)
 8000e3c:	4824      	ldr	r0, [pc, #144]	; (8000ed0 <fully_connected_run+0x12c>)
 8000e3e:	f7ff fce5 	bl	800080c <arm_fully_connected_q15>
        L3_BIAS_SHIFT,
        L3_OUT_SHIFT,
		aq15_layer_3_biases,
        layer_3_out_Buf,
        NULL);
    arm_relu_q15(
 8000e42:	2118      	movs	r1, #24
 8000e44:	4825      	ldr	r0, [pc, #148]	; (8000edc <fully_connected_run+0x138>)
 8000e46:	f7ff fc87 	bl	8000758 <arm_relu_q15>
    	layer_3_out_Buf,
		L3_OUT_DIM);

    // Third hidden layer
    arm_fully_connected_q15(
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	9304      	str	r3, [sp, #16]
 8000e4e:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <fully_connected_run+0x144>)
 8000e50:	9303      	str	r3, [sp, #12]
 8000e52:	4b26      	ldr	r3, [pc, #152]	; (8000eec <fully_connected_run+0x148>)
 8000e54:	9302      	str	r3, [sp, #8]
 8000e56:	2310      	movs	r3, #16
 8000e58:	9301      	str	r3, [sp, #4]
 8000e5a:	230d      	movs	r3, #13
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	230c      	movs	r3, #12
 8000e60:	2218      	movs	r2, #24
 8000e62:	4923      	ldr	r1, [pc, #140]	; (8000ef0 <fully_connected_run+0x14c>)
 8000e64:	481d      	ldr	r0, [pc, #116]	; (8000edc <fully_connected_run+0x138>)
 8000e66:	f7ff fcd1 	bl	800080c <arm_fully_connected_q15>
        L4_BIAS_SHIFT,
        L4_OUT_SHIFT,
		aq15_layer_4_biases,
        layer_4_out_Buf,
        NULL);
    arm_relu_q15(
 8000e6a:	210c      	movs	r1, #12
 8000e6c:	481e      	ldr	r0, [pc, #120]	; (8000ee8 <fully_connected_run+0x144>)
 8000e6e:	f7ff fc73 	bl	8000758 <arm_relu_q15>
    	layer_4_out_Buf,
		L4_OUT_DIM);

    // Output layer
	arm_fully_connected_q15(
 8000e72:	2300      	movs	r3, #0
 8000e74:	9304      	str	r3, [sp, #16]
 8000e76:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <fully_connected_run+0x150>)
 8000e78:	9303      	str	r3, [sp, #12]
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <fully_connected_run+0x154>)
 8000e7c:	9302      	str	r3, [sp, #8]
 8000e7e:	230a      	movs	r3, #10
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	230a      	movs	r3, #10
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2306      	movs	r3, #6
 8000e88:	220c      	movs	r2, #12
 8000e8a:	491c      	ldr	r1, [pc, #112]	; (8000efc <fully_connected_run+0x158>)
 8000e8c:	4816      	ldr	r0, [pc, #88]	; (8000ee8 <fully_connected_run+0x144>)
 8000e8e:	f7ff fcbd 	bl	800080c <arm_fully_connected_q15>
		L5_BIAS_SHIFT,
		L5_OUT_SHIFT,
		aq15_layer_5_biases,
		layer_5_out_Buf,
		NULL);
    arm_softmax_q15(
 8000e92:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <fully_connected_run+0x15c>)
 8000e94:	2106      	movs	r1, #6
 8000e96:	4817      	ldr	r0, [pc, #92]	; (8000ef4 <fully_connected_run+0x150>)
 8000e98:	f7ff febe 	bl	8000c18 <arm_softmax_q15>
    	layer_5_out_Buf,
		L5_OUT_DIM,
        output_data);
    arm_max_q15(output_data, L5_OUT_DIM, &max_Value, &max_Index);
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	f107 021e 	add.w	r2, r7, #30
 8000ea4:	2106      	movs	r1, #6
 8000ea6:	4816      	ldr	r0, [pc, #88]	; (8000f00 <fully_connected_run+0x15c>)
 8000ea8:	f007 fdd2 	bl	8008a50 <arm_max_q15>
    *prediction = (float32_t) max_Index;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	ee07 3a90 	vmov	s15, r3
 8000eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	edc3 7a00 	vstr	s15, [r3]
}
 8000ebc:	bf00      	nop
 8000ebe:	3720      	adds	r7, #32
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	24000094 	.word	0x24000094
 8000ec8:	24000190 	.word	0x24000190
 8000ecc:	24000148 	.word	0x24000148
 8000ed0:	240000a0 	.word	0x240000a0
 8000ed4:	2400034c 	.word	0x2400034c
 8000ed8:	2400019c 	.word	0x2400019c
 8000edc:	240000e8 	.word	0x240000e8
 8000ee0:	24000a54 	.word	0x24000a54
 8000ee4:	24000394 	.word	0x24000394
 8000ee8:	24000118 	.word	0x24000118
 8000eec:	24000cc4 	.word	0x24000cc4
 8000ef0:	24000a84 	.word	0x24000a84
 8000ef4:	24000130 	.word	0x24000130
 8000ef8:	24000d6c 	.word	0x24000d6c
 8000efc:	24000cdc 	.word	0x24000cdc
 8000f00:	2400013c 	.word	0x2400013c

08000f04 <complex_inst_absolute>:
void inst_absolute(float32_t in[], float32_t out[]){
	arm_abs_f32(&in[0], &out[0], frameSize);
}

// To use with complex input values
void complex_inst_absolute(float32_t in[], float32_t out[]){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
	arm_cmplx_mag_f32(&in[0], &out[0], frameSize);
 8000f0e:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <complex_inst_absolute+0x20>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	6839      	ldr	r1, [r7, #0]
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f007 fefa 	bl	8008d10 <arm_cmplx_mag_f32>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	080097dc 	.word	0x080097dc

08000f28 <inst_phase>:

void inst_phase(float32_t in[], float32_t out[]){
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
	int j = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	e020      	b.n	8000f7e <inst_phase+0x56>
		out[j] = atan2f(in[i+1], in[i]);
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	edd3 7a00 	vldr	s15, [r3]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	ed93 7a00 	vldr	s14, [r3]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	18d4      	adds	r4, r2, r3
 8000f5e:	eef0 0a47 	vmov.f32	s1, s14
 8000f62:	eeb0 0a67 	vmov.f32	s0, s15
 8000f66:	f008 fa41 	bl	80093ec <atan2f>
 8000f6a:	eef0 7a40 	vmov.f32	s15, s0
 8000f6e:	edc4 7a00 	vstr	s15, [r4]
		j++;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	3301      	adds	r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <inst_phase+0x6c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	005a      	lsls	r2, r3, #1
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d8d8      	bhi.n	8000f3c <inst_phase+0x14>
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd90      	pop	{r4, r7, pc}
 8000f92:	bf00      	nop
 8000f94:	080097dc 	.word	0x080097dc

08000f98 <unwrap>:

void unwrap(float32_t in[], float32_t out[]){
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	466b      	mov	r3, sp
 8000fa4:	461d      	mov	r5, r3
	int32_t k = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t alpha = M_PI;
 8000faa:	4b8b      	ldr	r3, [pc, #556]	; (80011d8 <unwrap+0x240>)
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
	// float32_t diff = 0.0f;
	float32_t in_cp[frameSize];
 8000fae:	4b8b      	ldr	r3, [pc, #556]	; (80011dc <unwrap+0x244>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fb6:	4b89      	ldr	r3, [pc, #548]	; (80011dc <unwrap+0x244>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	f04f 0300 	mov.w	r3, #0
 8000fc4:	f04f 0400 	mov.w	r4, #0
 8000fc8:	0154      	lsls	r4, r2, #5
 8000fca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000fce:	014b      	lsls	r3, r1, #5
 8000fd0:	4b82      	ldr	r3, [pc, #520]	; (80011dc <unwrap+0x244>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	f04f 0400 	mov.w	r4, #0
 8000fe2:	0154      	lsls	r4, r2, #5
 8000fe4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000fe8:	014b      	lsls	r3, r1, #5
 8000fea:	4b7c      	ldr	r3, [pc, #496]	; (80011dc <unwrap+0x244>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	3303      	adds	r3, #3
 8000ff2:	3307      	adds	r3, #7
 8000ff4:	08db      	lsrs	r3, r3, #3
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	ebad 0d03 	sub.w	sp, sp, r3
 8000ffc:	466b      	mov	r3, sp
 8000ffe:	3303      	adds	r3, #3
 8001000:	089b      	lsrs	r3, r3, #2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	61fb      	str	r3, [r7, #28]
	float32_t sub[frameSize];
 8001006:	4b75      	ldr	r3, [pc, #468]	; (80011dc <unwrap+0x244>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	3b01      	subs	r3, #1
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	4b73      	ldr	r3, [pc, #460]	; (80011dc <unwrap+0x244>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	f04f 0300 	mov.w	r3, #0
 800101c:	f04f 0400 	mov.w	r4, #0
 8001020:	0154      	lsls	r4, r2, #5
 8001022:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001026:	014b      	lsls	r3, r1, #5
 8001028:	4b6c      	ldr	r3, [pc, #432]	; (80011dc <unwrap+0x244>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	f04f 0300 	mov.w	r3, #0
 8001036:	f04f 0400 	mov.w	r4, #0
 800103a:	0154      	lsls	r4, r2, #5
 800103c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001040:	014b      	lsls	r3, r1, #5
 8001042:	4b66      	ldr	r3, [pc, #408]	; (80011dc <unwrap+0x244>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	3303      	adds	r3, #3
 800104a:	3307      	adds	r3, #7
 800104c:	08db      	lsrs	r3, r3, #3
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	ebad 0d03 	sub.w	sp, sp, r3
 8001054:	466b      	mov	r3, sp
 8001056:	3303      	adds	r3, #3
 8001058:	089b      	lsrs	r3, r3, #2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	617b      	str	r3, [r7, #20]
	float32_t abs_sub[frameSize];
 800105e:	4b5f      	ldr	r3, [pc, #380]	; (80011dc <unwrap+0x244>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	3b01      	subs	r3, #1
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	4b5d      	ldr	r3, [pc, #372]	; (80011dc <unwrap+0x244>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	f04f 0400 	mov.w	r4, #0
 8001078:	0154      	lsls	r4, r2, #5
 800107a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800107e:	014b      	lsls	r3, r1, #5
 8001080:	4b56      	ldr	r3, [pc, #344]	; (80011dc <unwrap+0x244>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	f04f 0400 	mov.w	r4, #0
 8001092:	0154      	lsls	r4, r2, #5
 8001094:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001098:	014b      	lsls	r3, r1, #5
 800109a:	4b50      	ldr	r3, [pc, #320]	; (80011dc <unwrap+0x244>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	3303      	adds	r3, #3
 80010a2:	3307      	adds	r3, #7
 80010a4:	08db      	lsrs	r3, r3, #3
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	ebad 0d03 	sub.w	sp, sp, r3
 80010ac:	466b      	mov	r3, sp
 80010ae:	3303      	adds	r3, #3
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize);
 80010b6:	69f9      	ldr	r1, [r7, #28]
 80010b8:	4b48      	ldr	r3, [pc, #288]	; (80011dc <unwrap+0x244>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f007 fbe8 	bl	8008894 <arm_copy_f32>
	arm_sub_f32(&in[1], &in_cp[0], &sub[0], (frameSize - 1));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	1d18      	adds	r0, r3, #4
 80010c8:	69f9      	ldr	r1, [r7, #28]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	4b43      	ldr	r3, [pc, #268]	; (80011dc <unwrap+0x244>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	f007 ff55 	bl	8008f80 <arm_sub_f32>
	arm_abs_f32(&sub[0], &abs_sub[0], (frameSize - 1));
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	68f9      	ldr	r1, [r7, #12]
 80010da:	4b40      	ldr	r3, [pc, #256]	; (80011dc <unwrap+0x244>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	3b01      	subs	r3, #1
 80010e0:	461a      	mov	r2, r3
 80010e2:	f007 ffd9 	bl	8009098 <arm_abs_f32>
	for(int i = 0; i < (frameSize - 1); i++){
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
 80010ea:	e043      	b.n	8001174 <unwrap+0x1dc>
		out[i] = in[i] + 2*M_PI*k;
 80010ec:	6a3b      	ldr	r3, [r7, #32]
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	edd3 7a00 	vldr	s15, [r3]
 80010f8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001106:	ed9f 5b32 	vldr	d5, [pc, #200]	; 80011d0 <unwrap+0x238>
 800110a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800110e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001112:	6a3b      	ldr	r3, [r7, #32]
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	4413      	add	r3, r2
 800111a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800111e:	edc3 7a00 	vstr	s15, [r3]
		// diff = fabsf(in[i+1] - in[i]);
		// if(diff > alpha){
		if(abs_sub[i] > alpha){
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	edd3 7a00 	vldr	s15, [r3]
 800112e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001132:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113a:	d518      	bpl.n	800116e <unwrap+0x1d6>
			if(in[i+1] < in_cp[i]){
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	3301      	adds	r3, #1
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	ed93 7a00 	vldr	s14, [r3]
 800114a:	69fa      	ldr	r2, [r7, #28]
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	edd3 7a00 	vldr	s15, [r3]
 8001156:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115e:	d503      	bpl.n	8001168 <unwrap+0x1d0>
				k++;
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	3301      	adds	r3, #1
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
 8001166:	e002      	b.n	800116e <unwrap+0x1d6>
			} else {
				k--;
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	3b01      	subs	r3, #1
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < (frameSize - 1); i++){
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	3301      	adds	r3, #1
 8001172:	623b      	str	r3, [r7, #32]
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <unwrap+0x244>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	6a3b      	ldr	r3, [r7, #32]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8b5      	bhi.n	80010ec <unwrap+0x154>
			}
		}
	}
	out[frameSize-1] = in[frameSize-1] + 2*M_PI*k;
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <unwrap+0x244>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	4413      	add	r3, r2
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011a2:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80011d0 <unwrap+0x238>
 80011a6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80011aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <unwrap+0x244>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80011b6:	4413      	add	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	4413      	add	r3, r2
 80011be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011c2:	edc3 7a00 	vstr	s15, [r3]
 80011c6:	46ad      	mov	sp, r5
}
 80011c8:	bf00      	nop
 80011ca:	3730      	adds	r7, #48	; 0x30
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bdb0      	pop	{r4, r5, r7, pc}
 80011d0:	54442d18 	.word	0x54442d18
 80011d4:	401921fb 	.word	0x401921fb
 80011d8:	40490fdb 	.word	0x40490fdb
 80011dc:	080097dc 	.word	0x080097dc

080011e0 <inst_frequency>:

void inst_frequency(float32_t in[], float32_t out[]){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4b52      	ldr	r3, [pc, #328]	; (8001334 <inst_frequency+0x154>)
 80011ec:	f244 0210 	movw	r2, #16400	; 0x4010
 80011f0:	443a      	add	r2, r7
 80011f2:	4413      	add	r3, r2
 80011f4:	6018      	str	r0, [r3, #0]
 80011f6:	4b50      	ldr	r3, [pc, #320]	; (8001338 <inst_frequency+0x158>)
 80011f8:	f244 0210 	movw	r2, #16400	; 0x4010
 80011fc:	443a      	add	r2, r7
 80011fe:	4413      	add	r3, r2
 8001200:	6019      	str	r1, [r3, #0]
	float32_t phase[2048] = {0};
 8001202:	4b4e      	ldr	r3, [pc, #312]	; (800133c <inst_frequency+0x15c>)
 8001204:	f244 0210 	movw	r2, #16400	; 0x4010
 8001208:	443a      	add	r2, r7
 800120a:	4413      	add	r3, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001212:	461a      	mov	r2, r3
 8001214:	2100      	movs	r1, #0
 8001216:	f007 ffaf 	bl	8009178 <memset>
	float32_t unwrapped_phase[2048] = {0};
 800121a:	4b49      	ldr	r3, [pc, #292]	; (8001340 <inst_frequency+0x160>)
 800121c:	f244 0210 	movw	r2, #16400	; 0x4010
 8001220:	443a      	add	r2, r7
 8001222:	4413      	add	r3, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122a:	461a      	mov	r2, r3
 800122c:	2100      	movs	r1, #0
 800122e:	f007 ffa3 	bl	8009178 <memset>
	float32_t C = 1 / M_TWOPI;
 8001232:	4b44      	ldr	r3, [pc, #272]	; (8001344 <inst_frequency+0x164>)
 8001234:	f244 0208 	movw	r2, #16392	; 0x4008
 8001238:	443a      	add	r2, r7
 800123a:	6013      	str	r3, [r2, #0]
	inst_phase(&in[0], &phase[0]);
 800123c:	4a3f      	ldr	r2, [pc, #252]	; (800133c <inst_frequency+0x15c>)
 800123e:	f244 0310 	movw	r3, #16400	; 0x4010
 8001242:	443b      	add	r3, r7
 8001244:	441a      	add	r2, r3
 8001246:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <inst_frequency+0x154>)
 8001248:	f244 0110 	movw	r1, #16400	; 0x4010
 800124c:	4439      	add	r1, r7
 800124e:	440b      	add	r3, r1
 8001250:	4611      	mov	r1, r2
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	f7ff fe68 	bl	8000f28 <inst_phase>
	unwrap(&phase[0], &unwrapped_phase[0]);
 8001258:	4a39      	ldr	r2, [pc, #228]	; (8001340 <inst_frequency+0x160>)
 800125a:	f244 0310 	movw	r3, #16400	; 0x4010
 800125e:	443b      	add	r3, r7
 8001260:	441a      	add	r2, r3
 8001262:	4b36      	ldr	r3, [pc, #216]	; (800133c <inst_frequency+0x15c>)
 8001264:	f244 0110 	movw	r1, #16400	; 0x4010
 8001268:	4439      	add	r1, r7
 800126a:	440b      	add	r3, r1
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fe92 	bl	8000f98 <unwrap>
	for(int i = 0; i < (frameSize-1); i++){
 8001274:	2300      	movs	r3, #0
 8001276:	f244 020c 	movw	r2, #16396	; 0x400c
 800127a:	443a      	add	r2, r7
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e03a      	b.n	80012f6 <inst_frequency+0x116>
		out[i] = C*(unwrapped_phase[i + 1] - unwrapped_phase[i]);
 8001280:	f244 030c 	movw	r3, #16396	; 0x400c
 8001284:	443b      	add	r3, r7
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <inst_frequency+0x160>)
 800128c:	f244 0110 	movw	r1, #16400	; 0x4010
 8001290:	4439      	add	r1, r7
 8001292:	440b      	add	r3, r1
 8001294:	0092      	lsls	r2, r2, #2
 8001296:	4413      	add	r3, r2
 8001298:	ed93 7a00 	vldr	s14, [r3]
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <inst_frequency+0x160>)
 800129e:	f244 0210 	movw	r2, #16400	; 0x4010
 80012a2:	443a      	add	r2, r7
 80012a4:	4413      	add	r3, r2
 80012a6:	f244 020c 	movw	r2, #16396	; 0x400c
 80012aa:	443a      	add	r2, r7
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012ba:	f244 030c 	movw	r3, #16396	; 0x400c
 80012be:	443b      	add	r3, r7
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	009a      	lsls	r2, r3, #2
 80012c4:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <inst_frequency+0x158>)
 80012c6:	f244 0110 	movw	r1, #16400	; 0x4010
 80012ca:	4439      	add	r1, r7
 80012cc:	440b      	add	r3, r1
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	f244 0208 	movw	r2, #16392	; 0x4008
 80012d6:	443a      	add	r2, r7
 80012d8:	edd2 7a00 	vldr	s15, [r2]
 80012dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e0:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < (frameSize-1); i++){
 80012e4:	f244 030c 	movw	r3, #16396	; 0x400c
 80012e8:	443b      	add	r3, r7
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	f244 020c 	movw	r2, #16396	; 0x400c
 80012f2:	443a      	add	r2, r7
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <inst_frequency+0x168>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	1e5a      	subs	r2, r3, #1
 80012fc:	f244 030c 	movw	r3, #16396	; 0x400c
 8001300:	443b      	add	r3, r7
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d8bb      	bhi.n	8001280 <inst_frequency+0xa0>
	}
	out[frameSize - 1] = 0;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <inst_frequency+0x168>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001310:	4413      	add	r3, r2
 8001312:	009a      	lsls	r2, r3, #2
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <inst_frequency+0x158>)
 8001316:	f244 0110 	movw	r1, #16400	; 0x4010
 800131a:	4439      	add	r1, r7
 800131c:	440b      	add	r3, r1
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4413      	add	r3, r2
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
}
 8001328:	bf00      	nop
 800132a:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	ffffbff4 	.word	0xffffbff4
 8001338:	ffffbff0 	.word	0xffffbff0
 800133c:	ffffdff8 	.word	0xffffdff8
 8001340:	ffffbff8 	.word	0xffffbff8
 8001344:	3e22f983 	.word	0x3e22f983
 8001348:	080097dc 	.word	0x080097dc

0800134c <inst_centralized_normalized_absolute>:

void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
	float32_t mean = 0, max = 0;
 8001356:	f04f 0300 	mov.w	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
	uint32_t max_index = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
	float32_t *absolute, *normalized;
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8001366:	4b34      	ldr	r3, [pc, #208]	; (8001438 <inst_centralized_normalized_absolute+0xec>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4618      	mov	r0, r3
 800136e:	f007 fef3 	bl	8009158 <malloc>
 8001372:	4603      	mov	r3, r0
 8001374:	61fb      	str	r3, [r7, #28]
	normalized = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8001376:	4b30      	ldr	r3, [pc, #192]	; (8001438 <inst_centralized_normalized_absolute+0xec>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4618      	mov	r0, r3
 800137e:	f007 feeb 	bl	8009158 <malloc>
 8001382:	4603      	mov	r3, r0
 8001384:	61bb      	str	r3, [r7, #24]
	complex_inst_absolute(in, &absolute[0]);
 8001386:	69f9      	ldr	r1, [r7, #28]
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fdbb 	bl	8000f04 <complex_inst_absolute>
	arm_max_f32(absolute, frameSize, &max, &max_index);
 800138e:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <inst_centralized_normalized_absolute+0xec>)
 8001390:	6819      	ldr	r1, [r3, #0]
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	f107 0210 	add.w	r2, r7, #16
 800139a:	69f8      	ldr	r0, [r7, #28]
 800139c:	f007 fbb2 	bl	8008b04 <arm_max_f32>
	for(int a = 0; a < frameSize; a++){
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
 80013a4:	e012      	b.n	80013cc <inst_centralized_normalized_absolute+0x80>
		normalized[a] = absolute[a] / max;
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	4413      	add	r3, r2
 80013ae:	edd3 6a00 	vldr	s13, [r3]
 80013b2:	ed97 7a04 	vldr	s14, [r7, #16]
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4413      	add	r3, r2
 80013be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c2:	edc3 7a00 	vstr	s15, [r3]
	for(int a = 0; a < frameSize; a++){
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	3301      	adds	r3, #1
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
 80013cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <inst_centralized_normalized_absolute+0xec>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d3e7      	bcc.n	80013a6 <inst_centralized_normalized_absolute+0x5a>
	}
	arm_mean_f32(&normalized[0], frameSize, &mean);
 80013d6:	4b18      	ldr	r3, [pc, #96]	; (8001438 <inst_centralized_normalized_absolute+0xec>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f107 0214 	add.w	r2, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	69b8      	ldr	r0, [r7, #24]
 80013e2:	f007 faff 	bl	80089e4 <arm_mean_f32>
	for(int i = 0; i < frameSize; i++){
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
 80013ea:	e016      	b.n	800141a <inst_centralized_normalized_absolute+0xce>
		out[i] = normalized[i] / mean - 1;
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4413      	add	r3, r2
 80013f4:	edd3 6a00 	vldr	s13, [r3]
 80013f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80013fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	4413      	add	r3, r2
 8001408:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800140c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001410:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < frameSize; i++){
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	3301      	adds	r3, #1
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	6a3a      	ldr	r2, [r7, #32]
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <inst_centralized_normalized_absolute+0xec>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d3e3      	bcc.n	80013ec <inst_centralized_normalized_absolute+0xa0>
	}
	free(absolute);
 8001424:	69f8      	ldr	r0, [r7, #28]
 8001426:	f007 fe9f 	bl	8009168 <free>
	free(normalized);
 800142a:	69b8      	ldr	r0, [r7, #24]
 800142c:	f007 fe9c 	bl	8009168 <free>
}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	; 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	080097dc 	.word	0x080097dc

0800143c <std_dev>:

void std_dev(float32_t in[], float32_t *out) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
	arm_std_f32(&in[0], frameSize, out);
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <std_dev+0x20>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f007 fa50 	bl	80088f4 <arm_std_f32>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	080097dc 	.word	0x080097dc

08001460 <mean_of_signal_magnitude>:
//**********************************************************************************************//
// Feature number 6
void mean_of_signal_magnitude(float32_t in[], float32_t *out) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
	arm_mean_f32(&in[0], frameSize, out);
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <mean_of_signal_magnitude+0x20>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f007 fab6 	bl	80089e4 <arm_mean_f32>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	080097dc 	.word	0x080097dc

08001484 <kurtosis_of_abs_amplitude>:
	*out = maxValue*maxValue/fftSize;
	free(result_mag);
}

// Features number 11 and 12
void kurtosis_of_abs_amplitude(float32_t in[], float32_t *out, uint32_t blockSize){
 8001484:	b5b0      	push	{r4, r5, r7, lr}
 8001486:	b094      	sub	sp, #80	; 0x50
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	466b      	mov	r3, sp
 8001492:	461d      	mov	r5, r3
	float32_t mean_array[blockSize];
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	4603      	mov	r3, r0
 8001498:	3b01      	subs	r3, #1
 800149a:	637b      	str	r3, [r7, #52]	; 0x34
 800149c:	4601      	mov	r1, r0
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	f04f 0400 	mov.w	r4, #0
 80014aa:	0154      	lsls	r4, r2, #5
 80014ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014b0:	014b      	lsls	r3, r1, #5
 80014b2:	4601      	mov	r1, r0
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	f04f 0400 	mov.w	r4, #0
 80014c0:	0154      	lsls	r4, r2, #5
 80014c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014c6:	014b      	lsls	r3, r1, #5
 80014c8:	0083      	lsls	r3, r0, #2
 80014ca:	3303      	adds	r3, #3
 80014cc:	3307      	adds	r3, #7
 80014ce:	08db      	lsrs	r3, r3, #3
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	ebad 0d03 	sub.w	sp, sp, r3
 80014d6:	466b      	mov	r3, sp
 80014d8:	3303      	adds	r3, #3
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t x_1[blockSize];
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	4603      	mov	r3, r0
 80014e4:	3b01      	subs	r3, #1
 80014e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014e8:	4601      	mov	r1, r0
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	f04f 0400 	mov.w	r4, #0
 80014f6:	0154      	lsls	r4, r2, #5
 80014f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014fc:	014b      	lsls	r3, r1, #5
 80014fe:	4601      	mov	r1, r0
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	f04f 0400 	mov.w	r4, #0
 800150c:	0154      	lsls	r4, r2, #5
 800150e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001512:	014b      	lsls	r3, r1, #5
 8001514:	0083      	lsls	r3, r0, #2
 8001516:	3303      	adds	r3, #3
 8001518:	3307      	adds	r3, #7
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	ebad 0d03 	sub.w	sp, sp, r3
 8001522:	466b      	mov	r3, sp
 8001524:	3303      	adds	r3, #3
 8001526:	089b      	lsrs	r3, r3, #2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t x_2[blockSize];
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	4603      	mov	r3, r0
 8001530:	3b01      	subs	r3, #1
 8001532:	647b      	str	r3, [r7, #68]	; 0x44
 8001534:	4601      	mov	r1, r0
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	f04f 0300 	mov.w	r3, #0
 800153e:	f04f 0400 	mov.w	r4, #0
 8001542:	0154      	lsls	r4, r2, #5
 8001544:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001548:	014b      	lsls	r3, r1, #5
 800154a:	4601      	mov	r1, r0
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	f04f 0400 	mov.w	r4, #0
 8001558:	0154      	lsls	r4, r2, #5
 800155a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800155e:	014b      	lsls	r3, r1, #5
 8001560:	0083      	lsls	r3, r0, #2
 8001562:	3303      	adds	r3, #3
 8001564:	3307      	adds	r3, #7
 8001566:	08db      	lsrs	r3, r3, #3
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	ebad 0d03 	sub.w	sp, sp, r3
 800156e:	466b      	mov	r3, sp
 8001570:	3303      	adds	r3, #3
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t temp_1[blockSize];
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	4603      	mov	r3, r0
 800157c:	3b01      	subs	r3, #1
 800157e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001580:	4601      	mov	r1, r0
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	f04f 0400 	mov.w	r4, #0
 800158e:	0154      	lsls	r4, r2, #5
 8001590:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001594:	014b      	lsls	r3, r1, #5
 8001596:	4601      	mov	r1, r0
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	f04f 0400 	mov.w	r4, #0
 80015a4:	0154      	lsls	r4, r2, #5
 80015a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015aa:	014b      	lsls	r3, r1, #5
 80015ac:	0083      	lsls	r3, r0, #2
 80015ae:	3303      	adds	r3, #3
 80015b0:	3307      	adds	r3, #7
 80015b2:	08db      	lsrs	r3, r3, #3
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	ebad 0d03 	sub.w	sp, sp, r3
 80015ba:	466b      	mov	r3, sp
 80015bc:	3303      	adds	r3, #3
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
	float32_t temp_2[blockSize];
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	4603      	mov	r3, r0
 80015c8:	3b01      	subs	r3, #1
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015cc:	4601      	mov	r1, r0
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	f04f 0300 	mov.w	r3, #0
 80015d6:	f04f 0400 	mov.w	r4, #0
 80015da:	0154      	lsls	r4, r2, #5
 80015dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015e0:	014b      	lsls	r3, r1, #5
 80015e2:	4601      	mov	r1, r0
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	f04f 0400 	mov.w	r4, #0
 80015f0:	0154      	lsls	r4, r2, #5
 80015f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015f6:	014b      	lsls	r3, r1, #5
 80015f8:	0083      	lsls	r3, r0, #2
 80015fa:	3303      	adds	r3, #3
 80015fc:	3307      	adds	r3, #7
 80015fe:	08db      	lsrs	r3, r3, #3
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	ebad 0d03 	sub.w	sp, sp, r3
 8001606:	466b      	mov	r3, sp
 8001608:	3303      	adds	r3, #3
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t result[blockSize];
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	4603      	mov	r3, r0
 8001614:	3b01      	subs	r3, #1
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
 8001618:	4601      	mov	r1, r0
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	f04f 0400 	mov.w	r4, #0
 8001626:	0154      	lsls	r4, r2, #5
 8001628:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800162c:	014b      	lsls	r3, r1, #5
 800162e:	4601      	mov	r1, r0
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	f04f 0400 	mov.w	r4, #0
 800163c:	0154      	lsls	r4, r2, #5
 800163e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001642:	014b      	lsls	r3, r1, #5
 8001644:	0083      	lsls	r3, r0, #2
 8001646:	3303      	adds	r3, #3
 8001648:	3307      	adds	r3, #7
 800164a:	08db      	lsrs	r3, r3, #3
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	ebad 0d03 	sub.w	sp, sp, r3
 8001652:	466b      	mov	r3, sp
 8001654:	3303      	adds	r3, #3
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	623b      	str	r3, [r7, #32]
	float32_t mean, m4, m2;
	// Calculate mean
	arm_mean_f32(&in[0], blockSize, &mean);
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	461a      	mov	r2, r3
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f007 f9bd 	bl	80089e4 <arm_mean_f32>
	// Transform scalar into vector
	arm_fill_f32(mean, &mean_array[0], blockSize);
 800166a:	edd7 7a07 	vldr	s15, [r7, #28]
 800166e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4618      	mov	r0, r3
 8001674:	eeb0 0a67 	vmov.f32	s0, s15
 8001678:	f007 f8c8 	bl	800880c <arm_fill_f32>
	// Calculate (x - mean)
	arm_sub_f32(&in[0], &mean_array[0], &x_1[0], blockSize);
 800167c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800167e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f007 fc7c 	bl	8008f80 <arm_sub_f32>
	// Make a copy of (x - mean)
	arm_copy_f32(&x_1[0], &x_2[0], blockSize);
 8001688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800168a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	4618      	mov	r0, r3
 8001690:	f007 f900 	bl	8008894 <arm_copy_f32>
	// Calculate (x - mean) ^ 4
	arm_mult_f32(&x_1[0], &x_2[0], &temp_1[0], blockSize); // temp1 = (x - u)^2
 8001694:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001696:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f007 fcb6 	bl	800900c <arm_mult_f32>
	arm_mult_f32(&temp_1[0], &x_2[0], &temp_2[0], blockSize); // temp2 = (x - u)^3
 80016a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80016a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f007 fcb0 	bl	800900c <arm_mult_f32>
	arm_mult_f32(&temp_2[0], &x_2[0], &result[0], blockSize); // result = (x - u)^4
 80016ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80016b0:	6a3a      	ldr	r2, [r7, #32]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f007 fcaa 	bl	800900c <arm_mult_f32>
	// Calculate mean of (x - mean) ^ 4
	arm_mean_f32(&result[0], blockSize, &m4);
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	f107 0218 	add.w	r2, r7, #24
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f007 f98f 	bl	80089e4 <arm_mean_f32>
	// Calculate mean of (x - mean) ^ 2
	arm_mean_f32(&temp_1[0], blockSize, &m2);
 80016c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c8:	f107 0214 	add.w	r2, r7, #20
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f007 f988 	bl	80089e4 <arm_mean_f32>
	*out = m4 / (m2*m2) - 3;
 80016d4:	edd7 6a06 	vldr	s13, [r7, #24]
 80016d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80016dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80016e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80016ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	edc3 7a00 	vstr	s15, [r3]
 80016f6:	46ad      	mov	sp, r5
}
 80016f8:	bf00      	nop
 80016fa:	3750      	adds	r7, #80	; 0x50
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bdb0      	pop	{r4, r5, r7, pc}

08001700 <moment20>:
	*out = m4 / (m2*m2) - 3;
}

// Central moment definition
// Mpq = E[x^(p-q).x*^q]
void moment20(float32_t in[], float32_t out[]){
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	b08c      	sub	sp, #48	; 0x30
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	466b      	mov	r3, sp
 800170c:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 800170e:	4b61      	ldr	r3, [pc, #388]	; (8001894 <moment20+0x194>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800171a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float32_t in_cp[frameSize*2];
 800171e:	4b5d      	ldr	r3, [pc, #372]	; (8001894 <moment20+0x194>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	3b01      	subs	r3, #1
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001728:	4b5a      	ldr	r3, [pc, #360]	; (8001894 <moment20+0x194>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4619      	mov	r1, r3
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	f04f 0400 	mov.w	r4, #0
 800173c:	0154      	lsls	r4, r2, #5
 800173e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001742:	014b      	lsls	r3, r1, #5
 8001744:	4b53      	ldr	r3, [pc, #332]	; (8001894 <moment20+0x194>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4619      	mov	r1, r3
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	f04f 0400 	mov.w	r4, #0
 8001758:	0154      	lsls	r4, r2, #5
 800175a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800175e:	014b      	lsls	r3, r1, #5
 8001760:	4b4c      	ldr	r3, [pc, #304]	; (8001894 <moment20+0x194>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	3303      	adds	r3, #3
 8001768:	3307      	adds	r3, #7
 800176a:	08db      	lsrs	r3, r3, #3
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	ebad 0d03 	sub.w	sp, sp, r3
 8001772:	466b      	mov	r3, sp
 8001774:	3303      	adds	r3, #3
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	61bb      	str	r3, [r7, #24]
	float32_t m20[frameSize*2]; // in^2
 800177c:	4b45      	ldr	r3, [pc, #276]	; (8001894 <moment20+0x194>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	3b01      	subs	r3, #1
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	4b43      	ldr	r3, [pc, #268]	; (8001894 <moment20+0x194>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4619      	mov	r1, r3
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	f04f 0400 	mov.w	r4, #0
 800179a:	0154      	lsls	r4, r2, #5
 800179c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017a0:	014b      	lsls	r3, r1, #5
 80017a2:	4b3c      	ldr	r3, [pc, #240]	; (8001894 <moment20+0x194>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4619      	mov	r1, r3
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	f04f 0400 	mov.w	r4, #0
 80017b6:	0154      	lsls	r4, r2, #5
 80017b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017bc:	014b      	lsls	r3, r1, #5
 80017be:	4b35      	ldr	r3, [pc, #212]	; (8001894 <moment20+0x194>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	3303      	adds	r3, #3
 80017c6:	3307      	adds	r3, #7
 80017c8:	08db      	lsrs	r3, r3, #3
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	ebad 0d03 	sub.w	sp, sp, r3
 80017d0:	466b      	mov	r3, sp
 80017d2:	3303      	adds	r3, #3
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	613b      	str	r3, [r7, #16]
	float32_t m20_real = 0, m20_imag = 0, m20_real_mean = 0, m20_imag_mean = 0;
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 80017f2:	69b9      	ldr	r1, [r7, #24]
 80017f4:	4b27      	ldr	r3, [pc, #156]	; (8001894 <moment20+0x194>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	461a      	mov	r2, r3
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f007 f849 	bl	8008894 <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8001802:	69b9      	ldr	r1, [r7, #24]
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4b23      	ldr	r3, [pc, #140]	; (8001894 <moment20+0x194>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f007 f9e0 	bl	8008bd0 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
 8001814:	e01b      	b.n	800184e <moment20+0x14e>
		m20_real += m20[i];
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	ed97 7a07 	vldr	s14, [r7, #28]
 8001826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182a:	edc7 7a07 	vstr	s15, [r7, #28]
		m20_imag += m20[i+1];
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	3301      	adds	r3, #1
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001840:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001844:	edc7 7a08 	vstr	s15, [r7, #32]
	for(int i = 0; i < frameSize*2; i+=2){
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	3302      	adds	r3, #2
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <moment20+0x194>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	005a      	lsls	r2, r3, #1
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	429a      	cmp	r2, r3
 8001858:	d8dd      	bhi.n	8001816 <moment20+0x116>
	}
	m20_real_mean = m20_real / blockSize;
 800185a:	edd7 6a07 	vldr	s13, [r7, #28]
 800185e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001866:	edc7 7a03 	vstr	s15, [r7, #12]
	m20_imag_mean = m20_imag / blockSize;
 800186a:	edd7 6a08 	vldr	s13, [r7, #32]
 800186e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001876:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m20_real_mean;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	601a      	str	r2, [r3, #0]
	out[1] = m20_imag_mean;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	3304      	adds	r3, #4
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	46ad      	mov	sp, r5
	//*out = sqrtf(m20_real_mean*m20_real_mean + m20_imag_mean*m20_imag_mean);
}
 800188a:	bf00      	nop
 800188c:	3730      	adds	r7, #48	; 0x30
 800188e:	46bd      	mov	sp, r7
 8001890:	bdb0      	pop	{r4, r5, r7, pc}
 8001892:	bf00      	nop
 8001894:	080097dc 	.word	0x080097dc

08001898 <moment21>:

void moment21(float32_t in[], float32_t out[]){
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
 80018a2:	466b      	mov	r3, sp
 80018a4:	461d      	mov	r5, r3
	float32_t in_conj[frameSize*2];
 80018a6:	4b55      	ldr	r3, [pc, #340]	; (80019fc <moment21+0x164>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	3b01      	subs	r3, #1
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	4b52      	ldr	r3, [pc, #328]	; (80019fc <moment21+0x164>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4619      	mov	r1, r3
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	f04f 0400 	mov.w	r4, #0
 80018c4:	0154      	lsls	r4, r2, #5
 80018c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018ca:	014b      	lsls	r3, r1, #5
 80018cc:	4b4b      	ldr	r3, [pc, #300]	; (80019fc <moment21+0x164>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4619      	mov	r1, r3
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	f04f 0400 	mov.w	r4, #0
 80018e0:	0154      	lsls	r4, r2, #5
 80018e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018e6:	014b      	lsls	r3, r1, #5
 80018e8:	4b44      	ldr	r3, [pc, #272]	; (80019fc <moment21+0x164>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	3303      	adds	r3, #3
 80018f0:	3307      	adds	r3, #7
 80018f2:	08db      	lsrs	r3, r3, #3
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	ebad 0d03 	sub.w	sp, sp, r3
 80018fa:	466b      	mov	r3, sp
 80018fc:	3303      	adds	r3, #3
 80018fe:	089b      	lsrs	r3, r3, #2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	61bb      	str	r3, [r7, #24]
	float32_t m21[frameSize*2];
 8001904:	4b3d      	ldr	r3, [pc, #244]	; (80019fc <moment21+0x164>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	3b01      	subs	r3, #1
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	4b3b      	ldr	r3, [pc, #236]	; (80019fc <moment21+0x164>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4619      	mov	r1, r3
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	f04f 0400 	mov.w	r4, #0
 8001922:	0154      	lsls	r4, r2, #5
 8001924:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001928:	014b      	lsls	r3, r1, #5
 800192a:	4b34      	ldr	r3, [pc, #208]	; (80019fc <moment21+0x164>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4619      	mov	r1, r3
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	f04f 0400 	mov.w	r4, #0
 800193e:	0154      	lsls	r4, r2, #5
 8001940:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001944:	014b      	lsls	r3, r1, #5
 8001946:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <moment21+0x164>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	3303      	adds	r3, #3
 800194e:	3307      	adds	r3, #7
 8001950:	08db      	lsrs	r3, r3, #3
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	ebad 0d03 	sub.w	sp, sp, r3
 8001958:	466b      	mov	r3, sp
 800195a:	3303      	adds	r3, #3
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	613b      	str	r3, [r7, #16]
	float32_t in_mag[frameSize];
 8001962:	4b26      	ldr	r3, [pc, #152]	; (80019fc <moment21+0x164>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3b01      	subs	r3, #1
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b24      	ldr	r3, [pc, #144]	; (80019fc <moment21+0x164>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4619      	mov	r1, r3
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	f04f 0400 	mov.w	r4, #0
 800197c:	0154      	lsls	r4, r2, #5
 800197e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001982:	014b      	lsls	r3, r1, #5
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <moment21+0x164>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	f04f 0400 	mov.w	r4, #0
 8001996:	0154      	lsls	r4, r2, #5
 8001998:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800199c:	014b      	lsls	r3, r1, #5
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <moment21+0x164>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	3303      	adds	r3, #3
 80019a6:	3307      	adds	r3, #7
 80019a8:	08db      	lsrs	r3, r3, #3
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	ebad 0d03 	sub.w	sp, sp, r3
 80019b0:	466b      	mov	r3, sp
 80019b2:	3303      	adds	r3, #3
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	60bb      	str	r3, [r7, #8]
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 80019ba:	69b9      	ldr	r1, [r7, #24]
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <moment21+0x164>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f007 fa8c 	bl	8008ee0 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_conj[0], &m21[0], frameSize);
 80019c8:	69b9      	ldr	r1, [r7, #24]
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <moment21+0x164>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f007 f8fd 	bl	8008bd0 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mag_f32(&m21[0], &in_mag[0], frameSize);
 80019d6:	6938      	ldr	r0, [r7, #16]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <moment21+0x164>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	f007 f996 	bl	8008d10 <arm_cmplx_mag_f32>
	arm_mean_f32(&in_mag[0], frameSize, out);
 80019e4:	68b8      	ldr	r0, [r7, #8]
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <moment21+0x164>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	4619      	mov	r1, r3
 80019ee:	f006 fff9 	bl	80089e4 <arm_mean_f32>
 80019f2:	46ad      	mov	sp, r5
	// Calculating the mean after the absolute value here works because there
	// is no imaginary part in the number M21, different from M20
}
 80019f4:	bf00      	nop
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bdb0      	pop	{r4, r5, r7, pc}
 80019fc:	080097dc 	.word	0x080097dc

08001a00 <moment40>:
	out[0] = m22_real_mean;
	out[1] = m22_imag_mean;
	//*out = sqrtf(m22_real_mean*m22_real_mean + m22_imag_mean*m22_imag_mean);
}

void moment40(float32_t in[], float32_t out[]){
 8001a00:	b5b0      	push	{r4, r5, r7, lr}
 8001a02:	b090      	sub	sp, #64	; 0x40
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	466b      	mov	r3, sp
 8001a0c:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 8001a0e:	4b94      	ldr	r3, [pc, #592]	; (8001c60 <moment40+0x260>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a1a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float32_t in_cp[frameSize*2];
 8001a1e:	4b90      	ldr	r3, [pc, #576]	; (8001c60 <moment40+0x260>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	3b01      	subs	r3, #1
 8001a26:	637b      	str	r3, [r7, #52]	; 0x34
 8001a28:	4b8d      	ldr	r3, [pc, #564]	; (8001c60 <moment40+0x260>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	f04f 0400 	mov.w	r4, #0
 8001a3c:	0154      	lsls	r4, r2, #5
 8001a3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a42:	014b      	lsls	r3, r1, #5
 8001a44:	4b86      	ldr	r3, [pc, #536]	; (8001c60 <moment40+0x260>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	f04f 0400 	mov.w	r4, #0
 8001a58:	0154      	lsls	r4, r2, #5
 8001a5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a5e:	014b      	lsls	r3, r1, #5
 8001a60:	4b7f      	ldr	r3, [pc, #508]	; (8001c60 <moment40+0x260>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	3303      	adds	r3, #3
 8001a68:	3307      	adds	r3, #7
 8001a6a:	08db      	lsrs	r3, r3, #3
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	ebad 0d03 	sub.w	sp, sp, r3
 8001a72:	466b      	mov	r3, sp
 8001a74:	3303      	adds	r3, #3
 8001a76:	089b      	lsrs	r3, r3, #2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t m20[frameSize*2]; // in^2
 8001a7c:	4b78      	ldr	r3, [pc, #480]	; (8001c60 <moment40+0x260>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	3b01      	subs	r3, #1
 8001a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a86:	4b76      	ldr	r3, [pc, #472]	; (8001c60 <moment40+0x260>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	f04f 0400 	mov.w	r4, #0
 8001a9a:	0154      	lsls	r4, r2, #5
 8001a9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001aa0:	014b      	lsls	r3, r1, #5
 8001aa2:	4b6f      	ldr	r3, [pc, #444]	; (8001c60 <moment40+0x260>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	f04f 0400 	mov.w	r4, #0
 8001ab6:	0154      	lsls	r4, r2, #5
 8001ab8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001abc:	014b      	lsls	r3, r1, #5
 8001abe:	4b68      	ldr	r3, [pc, #416]	; (8001c60 <moment40+0x260>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	3303      	adds	r3, #3
 8001ac6:	3307      	adds	r3, #7
 8001ac8:	08db      	lsrs	r3, r3, #3
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	ebad 0d03 	sub.w	sp, sp, r3
 8001ad0:	466b      	mov	r3, sp
 8001ad2:	3303      	adds	r3, #3
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	623b      	str	r3, [r7, #32]
	float32_t m30[frameSize]; // in^3
 8001ada:	4b61      	ldr	r3, [pc, #388]	; (8001c60 <moment40+0x260>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	4b5f      	ldr	r3, [pc, #380]	; (8001c60 <moment40+0x260>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	f04f 0400 	mov.w	r4, #0
 8001af4:	0154      	lsls	r4, r2, #5
 8001af6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001afa:	014b      	lsls	r3, r1, #5
 8001afc:	4b58      	ldr	r3, [pc, #352]	; (8001c60 <moment40+0x260>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	f04f 0400 	mov.w	r4, #0
 8001b0e:	0154      	lsls	r4, r2, #5
 8001b10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b14:	014b      	lsls	r3, r1, #5
 8001b16:	4b52      	ldr	r3, [pc, #328]	; (8001c60 <moment40+0x260>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	3303      	adds	r3, #3
 8001b1e:	3307      	adds	r3, #7
 8001b20:	08db      	lsrs	r3, r3, #3
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	ebad 0d03 	sub.w	sp, sp, r3
 8001b28:	466b      	mov	r3, sp
 8001b2a:	3303      	adds	r3, #3
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	61bb      	str	r3, [r7, #24]
	float32_t m40[frameSize]; // in^4
 8001b32:	4b4b      	ldr	r3, [pc, #300]	; (8001c60 <moment40+0x260>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	4b49      	ldr	r3, [pc, #292]	; (8001c60 <moment40+0x260>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	f04f 0400 	mov.w	r4, #0
 8001b4c:	0154      	lsls	r4, r2, #5
 8001b4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b52:	014b      	lsls	r3, r1, #5
 8001b54:	4b42      	ldr	r3, [pc, #264]	; (8001c60 <moment40+0x260>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	f04f 0400 	mov.w	r4, #0
 8001b66:	0154      	lsls	r4, r2, #5
 8001b68:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b6c:	014b      	lsls	r3, r1, #5
 8001b6e:	4b3c      	ldr	r3, [pc, #240]	; (8001c60 <moment40+0x260>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	3303      	adds	r3, #3
 8001b76:	3307      	adds	r3, #7
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	ebad 0d03 	sub.w	sp, sp, r3
 8001b80:	466b      	mov	r3, sp
 8001b82:	3303      	adds	r3, #3
 8001b84:	089b      	lsrs	r3, r3, #2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	613b      	str	r3, [r7, #16]
	float32_t m40_real = 0.0f, m40_imag = 0.0f;
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t m40_real_mean = 0.0f, m40_imag_mean = 0.0f;
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8001ba2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <moment40+0x260>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	461a      	mov	r2, r3
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f006 fe71 	bl	8008894 <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8001bb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bb4:	6a3a      	ldr	r2, [r7, #32]
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <moment40+0x260>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f007 f808 	bl	8008bd0 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8001bc0:	6a38      	ldr	r0, [r7, #32]
 8001bc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <moment40+0x260>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f007 f801 	bl	8008bd0 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 8001bce:	69b8      	ldr	r0, [r7, #24]
 8001bd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <moment40+0x260>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f006 fffa 	bl	8008bd0 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001be0:	e01b      	b.n	8001c1a <moment40+0x21a>
		m40_real += m40[i];
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		m40_imag += m40[i+1];
 8001bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	edd3 7a00 	vldr	s15, [r3]
 8001c08:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c10:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	for(int i = 0; i < frameSize*2; i+=2){
 8001c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c16:	3302      	adds	r3, #2
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <moment40+0x260>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	005a      	lsls	r2, r3, #1
 8001c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d8dd      	bhi.n	8001be2 <moment40+0x1e2>
	}
	m40_real_mean = m40_real / blockSize;
 8001c26:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001c2a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c32:	edc7 7a03 	vstr	s15, [r7, #12]
	m40_imag_mean = m40_imag / blockSize;
 8001c36:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001c3a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c42:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m40_real_mean;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	601a      	str	r2, [r3, #0]
	out[1] = m40_imag_mean;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	3304      	adds	r3, #4
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	46ad      	mov	sp, r5
	// *out = sqrtf(m40_real_mean*m40_real_mean + m40_imag_mean*m40_imag_mean);
}
 8001c56:	bf00      	nop
 8001c58:	3740      	adds	r7, #64	; 0x40
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	080097dc 	.word	0x080097dc

08001c64 <moment42>:
	out[0] = m41_real_mean;
	out[1] = m41_imag_mean;
	// *out = sqrtf(m41_real_mean*m41_real_mean + m41_imag_mean*m41_imag_mean);
}

void moment42(float32_t in[], float32_t out[]){
 8001c64:	b5b0      	push	{r4, r5, r7, lr}
 8001c66:	b092      	sub	sp, #72	; 0x48
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	466b      	mov	r3, sp
 8001c70:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 8001c72:	4baf      	ldr	r3, [pc, #700]	; (8001f30 <moment42+0x2cc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	ee07 3a90 	vmov	s15, r3
 8001c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c7e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float32_t in_cp[frameSize*2];
 8001c82:	4bab      	ldr	r3, [pc, #684]	; (8001f30 <moment42+0x2cc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c8c:	4ba8      	ldr	r3, [pc, #672]	; (8001f30 <moment42+0x2cc>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4619      	mov	r1, r3
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	f04f 0400 	mov.w	r4, #0
 8001ca0:	0154      	lsls	r4, r2, #5
 8001ca2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ca6:	014b      	lsls	r3, r1, #5
 8001ca8:	4ba1      	ldr	r3, [pc, #644]	; (8001f30 <moment42+0x2cc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	f04f 0400 	mov.w	r4, #0
 8001cbc:	0154      	lsls	r4, r2, #5
 8001cbe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cc2:	014b      	lsls	r3, r1, #5
 8001cc4:	4b9a      	ldr	r3, [pc, #616]	; (8001f30 <moment42+0x2cc>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	3303      	adds	r3, #3
 8001ccc:	3307      	adds	r3, #7
 8001cce:	08db      	lsrs	r3, r3, #3
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	ebad 0d03 	sub.w	sp, sp, r3
 8001cd6:	466b      	mov	r3, sp
 8001cd8:	3303      	adds	r3, #3
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t in_conj[frameSize*2];
 8001ce0:	4b93      	ldr	r3, [pc, #588]	; (8001f30 <moment42+0x2cc>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cea:	4b91      	ldr	r3, [pc, #580]	; (8001f30 <moment42+0x2cc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	f04f 0400 	mov.w	r4, #0
 8001cfe:	0154      	lsls	r4, r2, #5
 8001d00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d04:	014b      	lsls	r3, r1, #5
 8001d06:	4b8a      	ldr	r3, [pc, #552]	; (8001f30 <moment42+0x2cc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	f04f 0400 	mov.w	r4, #0
 8001d1a:	0154      	lsls	r4, r2, #5
 8001d1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d20:	014b      	lsls	r3, r1, #5
 8001d22:	4b83      	ldr	r3, [pc, #524]	; (8001f30 <moment42+0x2cc>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	3303      	adds	r3, #3
 8001d2a:	3307      	adds	r3, #7
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	ebad 0d03 	sub.w	sp, sp, r3
 8001d34:	466b      	mov	r3, sp
 8001d36:	3303      	adds	r3, #3
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m20[frameSize*2]; // in^2
 8001d3e:	4b7c      	ldr	r3, [pc, #496]	; (8001f30 <moment42+0x2cc>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	3b01      	subs	r3, #1
 8001d46:	647b      	str	r3, [r7, #68]	; 0x44
 8001d48:	4b79      	ldr	r3, [pc, #484]	; (8001f30 <moment42+0x2cc>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	f04f 0400 	mov.w	r4, #0
 8001d5c:	0154      	lsls	r4, r2, #5
 8001d5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d62:	014b      	lsls	r3, r1, #5
 8001d64:	4b72      	ldr	r3, [pc, #456]	; (8001f30 <moment42+0x2cc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	f04f 0400 	mov.w	r4, #0
 8001d78:	0154      	lsls	r4, r2, #5
 8001d7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d7e:	014b      	lsls	r3, r1, #5
 8001d80:	4b6b      	ldr	r3, [pc, #428]	; (8001f30 <moment42+0x2cc>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	3303      	adds	r3, #3
 8001d88:	3307      	adds	r3, #7
 8001d8a:	08db      	lsrs	r3, r3, #3
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	ebad 0d03 	sub.w	sp, sp, r3
 8001d92:	466b      	mov	r3, sp
 8001d94:	3303      	adds	r3, #3
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	623b      	str	r3, [r7, #32]
	float32_t m31[frameSize]; // in^3
 8001d9c:	4b64      	ldr	r3, [pc, #400]	; (8001f30 <moment42+0x2cc>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	4b62      	ldr	r3, [pc, #392]	; (8001f30 <moment42+0x2cc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	f04f 0400 	mov.w	r4, #0
 8001db6:	0154      	lsls	r4, r2, #5
 8001db8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dbc:	014b      	lsls	r3, r1, #5
 8001dbe:	4b5c      	ldr	r3, [pc, #368]	; (8001f30 <moment42+0x2cc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	f04f 0400 	mov.w	r4, #0
 8001dd0:	0154      	lsls	r4, r2, #5
 8001dd2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dd6:	014b      	lsls	r3, r1, #5
 8001dd8:	4b55      	ldr	r3, [pc, #340]	; (8001f30 <moment42+0x2cc>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	3303      	adds	r3, #3
 8001de0:	3307      	adds	r3, #7
 8001de2:	08db      	lsrs	r3, r3, #3
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	ebad 0d03 	sub.w	sp, sp, r3
 8001dea:	466b      	mov	r3, sp
 8001dec:	3303      	adds	r3, #3
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	61bb      	str	r3, [r7, #24]
	float32_t m42[frameSize]; // in^4
 8001df4:	4b4e      	ldr	r3, [pc, #312]	; (8001f30 <moment42+0x2cc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	4b4c      	ldr	r3, [pc, #304]	; (8001f30 <moment42+0x2cc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	f04f 0400 	mov.w	r4, #0
 8001e0e:	0154      	lsls	r4, r2, #5
 8001e10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e14:	014b      	lsls	r3, r1, #5
 8001e16:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <moment42+0x2cc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	f04f 0400 	mov.w	r4, #0
 8001e28:	0154      	lsls	r4, r2, #5
 8001e2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e2e:	014b      	lsls	r3, r1, #5
 8001e30:	4b3f      	ldr	r3, [pc, #252]	; (8001f30 <moment42+0x2cc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	3303      	adds	r3, #3
 8001e38:	3307      	adds	r3, #7
 8001e3a:	08db      	lsrs	r3, r3, #3
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	ebad 0d03 	sub.w	sp, sp, r3
 8001e42:	466b      	mov	r3, sp
 8001e44:	3303      	adds	r3, #3
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	613b      	str	r3, [r7, #16]
	float32_t m42_real = 0.0f, m42_imag = 0.0f;
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t m42_real_mean = 0.0f, m42_imag_mean = 0.0f;
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8001e64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e66:	4b32      	ldr	r3, [pc, #200]	; (8001f30 <moment42+0x2cc>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f006 fd10 	bl	8008894 <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8001e74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001e76:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <moment42+0x2cc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f007 f82f 	bl	8008ee0 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8001e82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e84:	6a3a      	ldr	r2, [r7, #32]
 8001e86:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <moment42+0x2cc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f006 fea0 	bl	8008bd0 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_conj[0], &m31[0], frameSize);
 8001e90:	6a38      	ldr	r0, [r7, #32]
 8001e92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <moment42+0x2cc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f006 fe99 	bl	8008bd0 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m31[0], &in_conj[0], &m42[0], frameSize);
 8001e9e:	69b8      	ldr	r0, [r7, #24]
 8001ea0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <moment42+0x2cc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f006 fe92 	bl	8008bd0 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8001eac:	2300      	movs	r3, #0
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eb0:	e01b      	b.n	8001eea <moment42+0x286>
		m42_real += m42[i];
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	edd3 7a00 	vldr	s15, [r3]
 8001ebe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		m42_imag += m42[i+1];
 8001eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ecc:	3301      	adds	r3, #1
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	edd3 7a00 	vldr	s15, [r3]
 8001ed8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	for(int i = 0; i < frameSize*2; i+=2){
 8001ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <moment42+0x2cc>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	005a      	lsls	r2, r3, #1
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d8dd      	bhi.n	8001eb2 <moment42+0x24e>
	}
	m42_real_mean = m42_real / blockSize;
 8001ef6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001efa:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f02:	edc7 7a03 	vstr	s15, [r7, #12]
	m42_imag_mean = m42_imag / blockSize;
 8001f06:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f0a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f12:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m42_real_mean;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	601a      	str	r2, [r3, #0]
	out[1] = m42_imag_mean;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	46ad      	mov	sp, r5
	// *out = sqrtf(m42_real_mean*m42_real_mean + m42_imag_mean*m42_imag_mean);
}
 8001f26:	bf00      	nop
 8001f28:	3748      	adds	r7, #72	; 0x48
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	080097dc 	.word	0x080097dc

08001f34 <cumulant_40>:
};
void cumulant_21(float32_t in[], float32_t *out){
	moment21(&in[0], out);
};

void cumulant_40(float32_t in[], float32_t *out){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08c      	sub	sp, #48	; 0x30
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
	float32_t m40[2], m20[2];
	float32_t m20_2[2], _3_m20_2[2];
	float32_t temp[2];
	moment20(&in[0], &m20[0]); // m20 is complex
 8001f3e:	f107 0320 	add.w	r3, r7, #32
 8001f42:	4619      	mov	r1, r3
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff fbdb 	bl	8001700 <moment20>
	moment40(&in[0], &m40[0]); // m40 is complex
 8001f4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f4e:	4619      	mov	r1, r3
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff fd55 	bl	8001a00 <moment40>
	// From complex multiplication
	// (a + bi)(a + bi) = (a^2 - b^2) + (2ab)i
	// Calculate 3*m20^2
	m20_2[0] = m20[0] * m20[0] - m20[1] * m20[1];
 8001f56:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f5a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f62:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001f66:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f72:	edc7 7a06 	vstr	s15, [r7, #24]
	m20_2[1] = 2 * m20[0] * m20[1];
 8001f76:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f7a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001f7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f86:	edc7 7a07 	vstr	s15, [r7, #28]
	_3_m20_2[0] = m20_2[0] * 3;
 8001f8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f8e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001f92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f96:	edc7 7a04 	vstr	s15, [r7, #16]
	_3_m20_2[1] = m20_2[1] * 3;
 8001f9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f9e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa6:	edc7 7a05 	vstr	s15, [r7, #20]
	// Save temporary complex number and calculate absolute value
	temp[0] = m40[0] - _3_m20_2[0];
 8001faa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001fae:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb6:	edc7 7a02 	vstr	s15, [r7, #8]
	temp[1] = m40[1] - _3_m20_2[1];
 8001fba:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001fbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc6:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
 8001fca:	ed97 7a02 	vldr	s14, [r7, #8]
 8001fce:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fd6:	edd7 6a03 	vldr	s13, [r7, #12]
 8001fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fea:	f007 fa01 	bl	80093f0 <sqrtf>
 8001fee:	eef0 7a40 	vmov.f32	s15, s0
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	edc3 7a00 	vstr	s15, [r3]
	// *out = fabsf(m40 - 3*m20*m20);
};
 8001ff8:	bf00      	nop
 8001ffa:	3730      	adds	r7, #48	; 0x30
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <cumulant_42>:
	temp[0] = m41[0] - _3_m20_m21[0];
	temp[1] = m41[1] - _3_m20_m21[1];
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
	// *out = fabsf(m41 - 3*m20*m21);
};
void cumulant_42(float32_t in[], float32_t *out){
 8002000:	b580      	push	{r7, lr}
 8002002:	b08e      	sub	sp, #56	; 0x38
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
	float32_t m42[2], m20[2], m20_2[2], m21;
	float32_t _2_m21_2, abs_m20_2;
	float32_t temp[2];
	// From complex multiplication
	// Calculate 3*m20*m21
	moment42(&in[0], &m42[0]); // m42 is complex
 800200a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800200e:	4619      	mov	r1, r3
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff fe27 	bl	8001c64 <moment42>
	moment20(&in[0], &m20[0]); // m20 is complex
 8002016:	f107 0320 	add.w	r3, r7, #32
 800201a:	4619      	mov	r1, r3
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff fb6f 	bl	8001700 <moment20>
	moment21(&in[0], &m21);    // m21 is real
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff fc35 	bl	8001898 <moment21>
	// Calculate 2*m1^2
	_2_m21_2 = 2 * m21 * m21;
 800202e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002032:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002036:	edd7 7a05 	vldr	s15, [r7, #20]
 800203a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	// Calculate |m20^2|
	// From complex multiplication
	// (a + bi)(a + bi) = (a^2 - b^2) + (2ab)i
	m20_2[0] = m20[0] * m20[0] - m20[1] * m20[1];
 8002042:	ed97 7a08 	vldr	s14, [r7, #32]
 8002046:	edd7 7a08 	vldr	s15, [r7, #32]
 800204a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800204e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002052:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800205a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800205e:	edc7 7a06 	vstr	s15, [r7, #24]
	m20_2[1] = 2 * m20[0] * m20[1];
 8002062:	edd7 7a08 	vldr	s15, [r7, #32]
 8002066:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800206a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800206e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002072:	edc7 7a07 	vstr	s15, [r7, #28]
	abs_m20_2 = sqrtf(m20_2[0]*m20_2[0] + m20_2[1]*m20_2[1]);
 8002076:	ed97 7a06 	vldr	s14, [r7, #24]
 800207a:	edd7 7a06 	vldr	s15, [r7, #24]
 800207e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002082:	edd7 6a07 	vldr	s13, [r7, #28]
 8002086:	edd7 7a07 	vldr	s15, [r7, #28]
 800208a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800208e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002092:	eeb0 0a67 	vmov.f32	s0, s15
 8002096:	f007 f9ab 	bl	80093f0 <sqrtf>
 800209a:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	temp[0] = m42[0] - abs_m20_2 - _2_m21_2;
 800209e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80020a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80020a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020aa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80020ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b2:	edc7 7a03 	vstr	s15, [r7, #12]
	temp[1] = m42[1];
 80020b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b8:	613b      	str	r3, [r7, #16]
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
 80020ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80020be:	edd7 7a03 	vldr	s15, [r7, #12]
 80020c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c6:	edd7 6a04 	vldr	s13, [r7, #16]
 80020ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80020ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d6:	eeb0 0a67 	vmov.f32	s0, s15
 80020da:	f007 f989 	bl	80093f0 <sqrtf>
 80020de:	eef0 7a40 	vmov.f32	s15, s0
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	edc3 7a00 	vstr	s15, [r3]
	// *out = fabsf(m42 - fabsf(m20*m20) - 2*m21*m21);
};
 80020e8:	bf00      	nop
 80020ea:	3738      	adds	r7, #56	; 0x38
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08c      	sub	sp, #48	; 0x30
 80020f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f6:	f107 031c 	add.w	r3, r7, #28
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]
 8002100:	609a      	str	r2, [r3, #8]
 8002102:	60da      	str	r2, [r3, #12]
 8002104:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002106:	4b4b      	ldr	r3, [pc, #300]	; (8002234 <MX_GPIO_Init+0x144>)
 8002108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800210c:	4a49      	ldr	r2, [pc, #292]	; (8002234 <MX_GPIO_Init+0x144>)
 800210e:	f043 0304 	orr.w	r3, r3, #4
 8002112:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002116:	4b47      	ldr	r3, [pc, #284]	; (8002234 <MX_GPIO_Init+0x144>)
 8002118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002124:	4b43      	ldr	r3, [pc, #268]	; (8002234 <MX_GPIO_Init+0x144>)
 8002126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212a:	4a42      	ldr	r2, [pc, #264]	; (8002234 <MX_GPIO_Init+0x144>)
 800212c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002130:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002134:	4b3f      	ldr	r3, [pc, #252]	; (8002234 <MX_GPIO_Init+0x144>)
 8002136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002142:	4b3c      	ldr	r3, [pc, #240]	; (8002234 <MX_GPIO_Init+0x144>)
 8002144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002148:	4a3a      	ldr	r2, [pc, #232]	; (8002234 <MX_GPIO_Init+0x144>)
 800214a:	f043 0302 	orr.w	r3, r3, #2
 800214e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002152:	4b38      	ldr	r3, [pc, #224]	; (8002234 <MX_GPIO_Init+0x144>)
 8002154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002160:	4b34      	ldr	r3, [pc, #208]	; (8002234 <MX_GPIO_Init+0x144>)
 8002162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002166:	4a33      	ldr	r2, [pc, #204]	; (8002234 <MX_GPIO_Init+0x144>)
 8002168:	f043 0308 	orr.w	r3, r3, #8
 800216c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002170:	4b30      	ldr	r3, [pc, #192]	; (8002234 <MX_GPIO_Init+0x144>)
 8002172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800217e:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <MX_GPIO_Init+0x144>)
 8002180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002184:	4a2b      	ldr	r2, [pc, #172]	; (8002234 <MX_GPIO_Init+0x144>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800218e:	4b29      	ldr	r3, [pc, #164]	; (8002234 <MX_GPIO_Init+0x144>)
 8002190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800219c:	4b25      	ldr	r3, [pc, #148]	; (8002234 <MX_GPIO_Init+0x144>)
 800219e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a2:	4a24      	ldr	r2, [pc, #144]	; (8002234 <MX_GPIO_Init+0x144>)
 80021a4:	f043 0310 	orr.w	r3, r3, #16
 80021a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ac:	4b21      	ldr	r3, [pc, #132]	; (8002234 <MX_GPIO_Init+0x144>)
 80021ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80021ba:	2200      	movs	r2, #0
 80021bc:	f244 0101 	movw	r1, #16385	; 0x4001
 80021c0:	481d      	ldr	r0, [pc, #116]	; (8002238 <MX_GPIO_Init+0x148>)
 80021c2:	f001 fe2d 	bl	8003e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2102      	movs	r1, #2
 80021ca:	481c      	ldr	r0, [pc, #112]	; (800223c <MX_GPIO_Init+0x14c>)
 80021cc:	f001 fe28 	bl	8003e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80021d0:	f244 0301 	movw	r3, #16385	; 0x4001
 80021d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d6:	2301      	movs	r3, #1
 80021d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021de:	2300      	movs	r3, #0
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e2:	f107 031c 	add.w	r3, r7, #28
 80021e6:	4619      	mov	r1, r3
 80021e8:	4813      	ldr	r0, [pc, #76]	; (8002238 <MX_GPIO_Init+0x148>)
 80021ea:	f001 fc69 	bl	8003ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80021ee:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80021f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002200:	230a      	movs	r3, #10
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002204:	f107 031c 	add.w	r3, r7, #28
 8002208:	4619      	mov	r1, r3
 800220a:	480d      	ldr	r0, [pc, #52]	; (8002240 <MX_GPIO_Init+0x150>)
 800220c:	f001 fc58 	bl	8003ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002210:	2302      	movs	r3, #2
 8002212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002214:	2301      	movs	r3, #1
 8002216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	4619      	mov	r1, r3
 8002226:	4805      	ldr	r0, [pc, #20]	; (800223c <MX_GPIO_Init+0x14c>)
 8002228:	f001 fc4a 	bl	8003ac0 <HAL_GPIO_Init>

}
 800222c:	bf00      	nop
 800222e:	3730      	adds	r7, #48	; 0x30
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	58024400 	.word	0x58024400
 8002238:	58020400 	.word	0x58020400
 800223c:	58021000 	.word	0x58021000
 8002240:	58020000 	.word	0x58020000

08002244 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002248:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800224c:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <SCB_EnableICache+0x3c>)
 8002252:	2200      	movs	r2, #0
 8002254:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002258:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800225c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <SCB_EnableICache+0x3c>)
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	4a06      	ldr	r2, [pc, #24]	; (8002280 <SCB_EnableICache+0x3c>)
 8002266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800226c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002270:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800228a:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <SCB_EnableDCache+0x7c>)
 800228c:	2200      	movs	r2, #0
 800228e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002292:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002296:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <SCB_EnableDCache+0x7c>)
 8002298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800229c:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0b5b      	lsrs	r3, r3, #13
 80022a2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80022a6:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	08db      	lsrs	r3, r3, #3
 80022ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022b0:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80022ba:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80022c0:	490f      	ldr	r1, [pc, #60]	; (8002300 <SCB_EnableDCache+0x7c>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	1e5a      	subs	r2, r3, #1
 80022cc:	60ba      	str	r2, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1ef      	bne.n	80022b2 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1e5a      	subs	r2, r3, #1
 80022d6:	60fa      	str	r2, [r7, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e5      	bne.n	80022a8 <SCB_EnableDCache+0x24>
 80022dc:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80022e0:	4b07      	ldr	r3, [pc, #28]	; (8002300 <SCB_EnableDCache+0x7c>)
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	4a06      	ldr	r2, [pc, #24]	; (8002300 <SCB_EnableDCache+0x7c>)
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ea:	6153      	str	r3, [r2, #20]
 80022ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80022f0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	/*****************************************************************************************************/
	q15_t q15_input_vector[NUMBER_OF_FEATURES] = {0};
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
	uint8_t ft_counter = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	74fb      	strb	r3, [r7, #19]
	/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8002318:	f7ff ff94 	bl	8002244 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 800231c:	f7ff ffb2 	bl	8002284 <SCB_EnableDCache>

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8002320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002324:	617b      	str	r3, [r7, #20]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8002326:	bf00      	nop
 8002328:	4b7d      	ldr	r3, [pc, #500]	; (8002520 <main+0x21c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d004      	beq.n	800233e <main+0x3a>
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	1e5a      	subs	r2, r3, #1
 8002338:	617a      	str	r2, [r7, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	dcf4      	bgt.n	8002328 <main+0x24>
	if ( timeout < 0 )
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b00      	cmp	r3, #0
 8002342:	da01      	bge.n	8002348 <main+0x44>
	{
		Error_Handler();
 8002344:	f000 fdec 	bl	8002f20 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002348:	f000 ffa6 	bl	8003298 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800234c:	f000 fa7a 	bl	8002844 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8002350:	4b73      	ldr	r3, [pc, #460]	; (8002520 <main+0x21c>)
 8002352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002356:	4a72      	ldr	r2, [pc, #456]	; (8002520 <main+0x21c>)
 8002358:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800235c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002360:	4b6f      	ldr	r3, [pc, #444]	; (8002520 <main+0x21c>)
 8002362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800236e:	2000      	movs	r0, #0
 8002370:	f001 fd70 	bl	8003e54 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8002374:	2100      	movs	r1, #0
 8002376:	2000      	movs	r0, #0
 8002378:	f001 fd86 	bl	8003e88 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800237c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002380:	617b      	str	r3, [r7, #20]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8002382:	bf00      	nop
 8002384:	4b66      	ldr	r3, [pc, #408]	; (8002520 <main+0x21c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d104      	bne.n	800239a <main+0x96>
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	1e5a      	subs	r2, r3, #1
 8002394:	617a      	str	r2, [r7, #20]
 8002396:	2b00      	cmp	r3, #0
 8002398:	dcf4      	bgt.n	8002384 <main+0x80>
	if ( timeout < 0 )
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2b00      	cmp	r3, #0
 800239e:	da01      	bge.n	80023a4 <main+0xa0>
	{
		Error_Handler();
 80023a0:	f000 fdbe 	bl	8002f20 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80023a4:	f7ff fea4 	bl	80020f0 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80023a8:	f000 feae 	bl	8003108 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 80023ac:	f000 fe3e 	bl	800302c <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	/*****************************************************************************************************/
	// HRTimer enable
	__HAL_TIM_ENABLE(&htim2);
 80023b0:	4b5c      	ldr	r3, [pc, #368]	; (8002524 <main+0x220>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	4b5b      	ldr	r3, [pc, #364]	; (8002524 <main+0x220>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]
	__HAL_TIM_UIFREMAP_DISABLE(&htim2);
 80023c0:	4b58      	ldr	r3, [pc, #352]	; (8002524 <main+0x220>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	4b57      	ldr	r3, [pc, #348]	; (8002524 <main+0x220>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ce:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim2);
 80023d0:	4854      	ldr	r0, [pc, #336]	; (8002524 <main+0x220>)
 80023d2:	f004 f8b3 	bl	800653c <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80023d6:	4b53      	ldr	r3, [pc, #332]	; (8002524 <main+0x220>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2200      	movs	r2, #0
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24

	// Put UART peripheral in reception process
	if(HAL_UART_Receive_IT(&huart3, &rxWandB.bytes[0], (WEIGHTS + BIASES) * 2) != HAL_OK)
 80023de:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80023e2:	4951      	ldr	r1, [pc, #324]	; (8002528 <main+0x224>)
 80023e4:	4851      	ldr	r0, [pc, #324]	; (800252c <main+0x228>)
 80023e6:	f004 fc3b 	bl	8006c60 <HAL_UART_Receive_IT>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <main+0x102>
	{
		Error_Handler();
 80023f0:	f000 fd96 	bl	8002f20 <Error_Handler>
	}
	// Wait for message
	while (UartReady != SET)
 80023f4:	e007      	b.n	8002406 <main+0x102>
	{
		HAL_Delay(500);
 80023f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023fa:	f000 ffdf 	bl	80033bc <HAL_Delay>
		blink_green();
 80023fe:	f000 fb1b 	bl	8002a38 <blink_green>
		blink_green();
 8002402:	f000 fb19 	bl	8002a38 <blink_green>
	while (UartReady != SET)
 8002406:	4b4a      	ldr	r3, [pc, #296]	; (8002530 <main+0x22c>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b01      	cmp	r3, #1
 800240e:	d1f2      	bne.n	80023f6 <main+0xf2>
	}
	UartReady = RESET;
 8002410:	4b47      	ldr	r3, [pc, #284]	; (8002530 <main+0x22c>)
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8002416:	2201      	movs	r2, #1
 8002418:	2101      	movs	r1, #1
 800241a:	4846      	ldr	r0, [pc, #280]	; (8002534 <main+0x230>)
 800241c:	f001 fd00 	bl	8003e20 <HAL_GPIO_WritePin>
	if(rxWandB.bytes[(WEIGHTS + BIASES) * 2 - 1] != 0){ // Means: received everything
 8002420:	4b41      	ldr	r3, [pc, #260]	; (8002528 <main+0x224>)
 8002422:	f893 3c2f 	ldrb.w	r3, [r3, #3119]	; 0xc2f
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <main+0x132>
		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800242a:	2201      	movs	r2, #1
 800242c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002430:	4840      	ldr	r0, [pc, #256]	; (8002534 <main+0x230>)
 8002432:	f001 fcf5 	bl	8003e20 <HAL_GPIO_WritePin>
	}
	// Echo
	transmit_echo_wandb(&rxWandB.bytes[0], (WEIGHTS + BIASES) * 2);
 8002436:	f44f 6143 	mov.w	r1, #3120	; 0xc30
 800243a:	483b      	ldr	r0, [pc, #236]	; (8002528 <main+0x224>)
 800243c:	f000 fbca 	bl	8002bd4 <transmit_echo_wandb>

	// Copying weights
	arm_copy_q15(&rxWandB.number[0], &aq15_layer_1_weights[0], L1_IN_DIM*L1_OUT_DIM);
 8002440:	2224      	movs	r2, #36	; 0x24
 8002442:	493d      	ldr	r1, [pc, #244]	; (8002538 <main+0x234>)
 8002444:	4838      	ldr	r0, [pc, #224]	; (8002528 <main+0x224>)
 8002446:	f006 f9ff 	bl	8008848 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[L1_IN_DIM*L1_OUT_DIM], &aq15_layer_2_weights[0], L2_IN_DIM*L2_OUT_DIM);
 800244a:	22d8      	movs	r2, #216	; 0xd8
 800244c:	493b      	ldr	r1, [pc, #236]	; (800253c <main+0x238>)
 800244e:	483c      	ldr	r0, [pc, #240]	; (8002540 <main+0x23c>)
 8002450:	f006 f9fa 	bl	8008848 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[L1_IN_DIM*L1_OUT_DIM + L2_IN_DIM*L2_OUT_DIM], &aq15_layer_3_weights[0], L3_IN_DIM*L3_OUT_DIM);
 8002454:	f44f 7258 	mov.w	r2, #864	; 0x360
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <main+0x240>)
 800245a:	483b      	ldr	r0, [pc, #236]	; (8002548 <main+0x244>)
 800245c:	f006 f9f4 	bl	8008848 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[L1_IN_DIM*L1_OUT_DIM + L2_IN_DIM*L2_OUT_DIM + L3_IN_DIM*L3_OUT_DIM], &aq15_layer_4_weights[0], L4_IN_DIM*L4_OUT_DIM);
 8002460:	f44f 7290 	mov.w	r2, #288	; 0x120
 8002464:	4939      	ldr	r1, [pc, #228]	; (800254c <main+0x248>)
 8002466:	483a      	ldr	r0, [pc, #232]	; (8002550 <main+0x24c>)
 8002468:	f006 f9ee 	bl	8008848 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[L1_IN_DIM*L1_OUT_DIM + L2_IN_DIM*L2_OUT_DIM + L3_IN_DIM*L3_OUT_DIM + L4_IN_DIM*L4_OUT_DIM], &aq15_layer_5_weights[0], L5_IN_DIM*L5_OUT_DIM);
 800246c:	2248      	movs	r2, #72	; 0x48
 800246e:	4939      	ldr	r1, [pc, #228]	; (8002554 <main+0x250>)
 8002470:	4839      	ldr	r0, [pc, #228]	; (8002558 <main+0x254>)
 8002472:	f006 f9e9 	bl	8008848 <arm_copy_q15>

	// Copying biases
	arm_copy_q15(&rxWandB.number[WEIGHTS], &aq15_layer_1_biases[0], L1_OUT_DIM);
 8002476:	2206      	movs	r2, #6
 8002478:	4938      	ldr	r1, [pc, #224]	; (800255c <main+0x258>)
 800247a:	4839      	ldr	r0, [pc, #228]	; (8002560 <main+0x25c>)
 800247c:	f006 f9e4 	bl	8008848 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[WEIGHTS + L1_OUT_DIM], &aq15_layer_2_biases[0], L2_OUT_DIM);
 8002480:	2224      	movs	r2, #36	; 0x24
 8002482:	4938      	ldr	r1, [pc, #224]	; (8002564 <main+0x260>)
 8002484:	4838      	ldr	r0, [pc, #224]	; (8002568 <main+0x264>)
 8002486:	f006 f9df 	bl	8008848 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[WEIGHTS + L1_OUT_DIM + L2_OUT_DIM], &aq15_layer_3_biases[0], L3_OUT_DIM);
 800248a:	2218      	movs	r2, #24
 800248c:	4937      	ldr	r1, [pc, #220]	; (800256c <main+0x268>)
 800248e:	4838      	ldr	r0, [pc, #224]	; (8002570 <main+0x26c>)
 8002490:	f006 f9da 	bl	8008848 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[WEIGHTS + L1_OUT_DIM + L2_OUT_DIM + L3_OUT_DIM], &aq15_layer_4_biases[0], L4_OUT_DIM);
 8002494:	220c      	movs	r2, #12
 8002496:	4937      	ldr	r1, [pc, #220]	; (8002574 <main+0x270>)
 8002498:	4837      	ldr	r0, [pc, #220]	; (8002578 <main+0x274>)
 800249a:	f006 f9d5 	bl	8008848 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[WEIGHTS + L1_OUT_DIM + L2_OUT_DIM + L3_OUT_DIM + L4_OUT_DIM], &aq15_layer_5_biases[0], L5_OUT_DIM);
 800249e:	2206      	movs	r2, #6
 80024a0:	4936      	ldr	r1, [pc, #216]	; (800257c <main+0x278>)
 80024a2:	4837      	ldr	r0, [pc, #220]	; (8002580 <main+0x27c>)
 80024a4:	f006 f9d0 	bl	8008848 <arm_copy_q15>

	// Put UART peripheral in reception process
	if(HAL_UART_Receive_IT(&huart3, &rxScaler.bytes[0], NUMBER_OF_FEATURES * 2 * 4) != HAL_OK)
 80024a8:	2230      	movs	r2, #48	; 0x30
 80024aa:	4936      	ldr	r1, [pc, #216]	; (8002584 <main+0x280>)
 80024ac:	481f      	ldr	r0, [pc, #124]	; (800252c <main+0x228>)
 80024ae:	f004 fbd7 	bl	8006c60 <HAL_UART_Receive_IT>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <main+0x1ca>
	{
		Error_Handler();
 80024b8:	f000 fd32 	bl	8002f20 <Error_Handler>
	}
	// Wait for message
	while (UartReady != SET)
 80024bc:	e007      	b.n	80024ce <main+0x1ca>
	{
		HAL_Delay(500);
 80024be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024c2:	f000 ff7b 	bl	80033bc <HAL_Delay>
		blink_green();
 80024c6:	f000 fab7 	bl	8002a38 <blink_green>
		blink_green();
 80024ca:	f000 fab5 	bl	8002a38 <blink_green>
	while (UartReady != SET)
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <main+0x22c>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d1f2      	bne.n	80024be <main+0x1ba>
	}
	UartReady = RESET;
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <main+0x22c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 80024de:	2201      	movs	r2, #1
 80024e0:	2101      	movs	r1, #1
 80024e2:	4814      	ldr	r0, [pc, #80]	; (8002534 <main+0x230>)
 80024e4:	f001 fc9c 	bl	8003e20 <HAL_GPIO_WritePin>
	if(rxScaler.bytes[NUMBER_OF_FEATURES * 2 * 4 - 1] != 0){ // Means: received everything
 80024e8:	4b26      	ldr	r3, [pc, #152]	; (8002584 <main+0x280>)
 80024ea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <main+0x1fa>
		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80024f2:	2201      	movs	r2, #1
 80024f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024f8:	480e      	ldr	r0, [pc, #56]	; (8002534 <main+0x230>)
 80024fa:	f001 fc91 	bl	8003e20 <HAL_GPIO_WritePin>
	}
	// Echo
	transmit_echo_data(&rxScaler.bytes[0], NUMBER_OF_FEATURES * 2 * 4);
 80024fe:	2130      	movs	r1, #48	; 0x30
 8002500:	4820      	ldr	r0, [pc, #128]	; (8002584 <main+0x280>)
 8002502:	f000 fbb5 	bl	8002c70 <transmit_echo_data>
	/* USER CODE BEGIN WHILE */
	/*****************************************************************************************************/
	while (1)
	{
		// Put UART peripheral in reception process
		if(HAL_UART_Receive_IT(&huart3, &rxBuffer.bytes[0], RX_DATA_SIZE*4) != HAL_OK)
 8002506:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800250a:	491f      	ldr	r1, [pc, #124]	; (8002588 <main+0x284>)
 800250c:	4807      	ldr	r0, [pc, #28]	; (800252c <main+0x228>)
 800250e:	f004 fba7 	bl	8006c60 <HAL_UART_Receive_IT>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d041      	beq.n	800259c <main+0x298>
		{
			Error_Handler();
 8002518:	f000 fd02 	bl	8002f20 <Error_Handler>
		}
		// Wait for message
		while (UartReady != SET)
 800251c:	e03e      	b.n	800259c <main+0x298>
 800251e:	bf00      	nop
 8002520:	58024400 	.word	0x58024400
 8002524:	2400fa54 	.word	0x2400fa54
 8002528:	2400ed78 	.word	0x2400ed78
 800252c:	2400faa0 	.word	0x2400faa0
 8002530:	2400fa44 	.word	0x2400fa44
 8002534:	58020400 	.word	0x58020400
 8002538:	24000148 	.word	0x24000148
 800253c:	2400019c 	.word	0x2400019c
 8002540:	2400edc0 	.word	0x2400edc0
 8002544:	24000394 	.word	0x24000394
 8002548:	2400ef70 	.word	0x2400ef70
 800254c:	24000a84 	.word	0x24000a84
 8002550:	2400f630 	.word	0x2400f630
 8002554:	24000cdc 	.word	0x24000cdc
 8002558:	2400f870 	.word	0x2400f870
 800255c:	24000190 	.word	0x24000190
 8002560:	2400f900 	.word	0x2400f900
 8002564:	2400034c 	.word	0x2400034c
 8002568:	2400f90c 	.word	0x2400f90c
 800256c:	24000a54 	.word	0x24000a54
 8002570:	2400f954 	.word	0x2400f954
 8002574:	24000cc4 	.word	0x24000cc4
 8002578:	2400f984 	.word	0x2400f984
 800257c:	24000d6c 	.word	0x24000d6c
 8002580:	2400f99c 	.word	0x2400f99c
 8002584:	2400f9a8 	.word	0x2400f9a8
 8002588:	2400ad78 	.word	0x2400ad78
		{
			HAL_Delay(500);
 800258c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002590:	f000 ff14 	bl	80033bc <HAL_Delay>
			blink_green();
 8002594:	f000 fa50 	bl	8002a38 <blink_green>
			blink_green();
 8002598:	f000 fa4e 	bl	8002a38 <blink_green>
		while (UartReady != SET)
 800259c:	4b97      	ldr	r3, [pc, #604]	; (80027fc <main+0x4f8>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d1f2      	bne.n	800258c <main+0x288>
		}
		UartReady = RESET;
 80025a6:	4b95      	ldr	r3, [pc, #596]	; (80027fc <main+0x4f8>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 80025ac:	2064      	movs	r0, #100	; 0x64
 80025ae:	f000 ff05 	bl	80033bc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 80025b2:	2201      	movs	r2, #1
 80025b4:	2101      	movs	r1, #1
 80025b6:	4892      	ldr	r0, [pc, #584]	; (8002800 <main+0x4fc>)
 80025b8:	f001 fc32 	bl	8003e20 <HAL_GPIO_WritePin>
		if(rxBuffer.bytes[8191] != 0){ // Means: received everything
 80025bc:	4a91      	ldr	r2, [pc, #580]	; (8002804 <main+0x500>)
 80025be:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80025c2:	4413      	add	r3, r2
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d004      	beq.n	80025d4 <main+0x2d0>
			HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 80025ca:	2201      	movs	r2, #1
 80025cc:	2102      	movs	r1, #2
 80025ce:	488e      	ldr	r0, [pc, #568]	; (8002808 <main+0x504>)
 80025d0:	f001 fc26 	bl	8003e20 <HAL_GPIO_WritePin>
		}

		// Echo
		transmit_echo_data(&rxBuffer.bytes[0], RX_DATA_SIZE*4);
 80025d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025d8:	488a      	ldr	r0, [pc, #552]	; (8002804 <main+0x500>)
 80025da:	f000 fb49 	bl	8002c70 <transmit_echo_data>

		// Instantaneous absolute value
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80025de:	4b8b      	ldr	r3, [pc, #556]	; (800280c <main+0x508>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2200      	movs	r2, #0
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24
		complex_inst_absolute(&rxBuffer.number[0], &instAbs.number[0]);
 80025e6:	498a      	ldr	r1, [pc, #552]	; (8002810 <main+0x50c>)
 80025e8:	4886      	ldr	r0, [pc, #536]	; (8002804 <main+0x500>)
 80025ea:	f7fe fc8b 	bl	8000f04 <complex_inst_absolute>
		counter_array.number[0] = __HAL_TIM_GET_COUNTER(&htim2);
 80025ee:	4b87      	ldr	r3, [pc, #540]	; (800280c <main+0x508>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	4a87      	ldr	r2, [pc, #540]	; (8002814 <main+0x510>)
 80025f6:	6013      	str	r3, [r2, #0]
		//transmit_array(&instAbs.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[0]);

		// Instantaneous phase value
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80025f8:	4b84      	ldr	r3, [pc, #528]	; (800280c <main+0x508>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2200      	movs	r2, #0
 80025fe:	625a      	str	r2, [r3, #36]	; 0x24
		inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 8002600:	4985      	ldr	r1, [pc, #532]	; (8002818 <main+0x514>)
 8002602:	4880      	ldr	r0, [pc, #512]	; (8002804 <main+0x500>)
 8002604:	f7fe fc90 	bl	8000f28 <inst_phase>
		counter_array.number[1] = __HAL_TIM_GET_COUNTER(&htim2);
 8002608:	4b80      	ldr	r3, [pc, #512]	; (800280c <main+0x508>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	4a81      	ldr	r2, [pc, #516]	; (8002814 <main+0x510>)
 8002610:	6053      	str	r3, [r2, #4]
		//transmit_array(&instPhase.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[4]);

		// Instantaneous unwrapped phase value
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8002612:	4b7e      	ldr	r3, [pc, #504]	; (800280c <main+0x508>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2200      	movs	r2, #0
 8002618:	625a      	str	r2, [r3, #36]	; 0x24
		inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 800261a:	497f      	ldr	r1, [pc, #508]	; (8002818 <main+0x514>)
 800261c:	4879      	ldr	r0, [pc, #484]	; (8002804 <main+0x500>)
 800261e:	f7fe fc83 	bl	8000f28 <inst_phase>
		unwrap(&instPhase.number[0], &instUnwrappedPhase.number[0]);
 8002622:	497e      	ldr	r1, [pc, #504]	; (800281c <main+0x518>)
 8002624:	487c      	ldr	r0, [pc, #496]	; (8002818 <main+0x514>)
 8002626:	f7fe fcb7 	bl	8000f98 <unwrap>
		counter_array.number[2] = __HAL_TIM_GET_COUNTER(&htim2);
 800262a:	4b78      	ldr	r3, [pc, #480]	; (800280c <main+0x508>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	4a78      	ldr	r2, [pc, #480]	; (8002814 <main+0x510>)
 8002632:	6093      	str	r3, [r2, #8]
		//transmit_array(&instUnwrappedPhase.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[8]);

		// Instantaneous frequency value
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8002634:	4b75      	ldr	r3, [pc, #468]	; (800280c <main+0x508>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2200      	movs	r2, #0
 800263a:	625a      	str	r2, [r3, #36]	; 0x24
		inst_frequency(&rxBuffer.number[0], &instFreq.number[0]);
 800263c:	4978      	ldr	r1, [pc, #480]	; (8002820 <main+0x51c>)
 800263e:	4871      	ldr	r0, [pc, #452]	; (8002804 <main+0x500>)
 8002640:	f7fe fdce 	bl	80011e0 <inst_frequency>
		counter_array.number[3] = __HAL_TIM_GET_COUNTER(&htim2);
 8002644:	4b71      	ldr	r3, [pc, #452]	; (800280c <main+0x508>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	4a72      	ldr	r2, [pc, #456]	; (8002814 <main+0x510>)
 800264c:	60d3      	str	r3, [r2, #12]
		//transmit_array(&instFreq.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[12]);

		// Instantaneous centered normalized absolute value
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800264e:	4b6f      	ldr	r3, [pc, #444]	; (800280c <main+0x508>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2200      	movs	r2, #0
 8002654:	625a      	str	r2, [r3, #36]	; 0x24
		inst_centralized_normalized_absolute(&rxBuffer.number[0], &instCNAbs.number[0]);
 8002656:	4973      	ldr	r1, [pc, #460]	; (8002824 <main+0x520>)
 8002658:	486a      	ldr	r0, [pc, #424]	; (8002804 <main+0x500>)
 800265a:	f7fe fe77 	bl	800134c <inst_centralized_normalized_absolute>
		counter_array.number[4] = __HAL_TIM_GET_COUNTER(&htim2);
 800265e:	4b6b      	ldr	r3, [pc, #428]	; (800280c <main+0x508>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	4a6b      	ldr	r2, [pc, #428]	; (8002814 <main+0x510>)
 8002666:	6113      	str	r3, [r2, #16]
		//transmit_array(&instCNAbs.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[16]);


		/*****************************************************************************************************/
		ft_counter = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	74fb      	strb	r3, [r7, #19]
		ft_counter++;

		*/

		// Standard deviation of the instantaneous frequency
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800266c:	4b67      	ldr	r3, [pc, #412]	; (800280c <main+0x508>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2200      	movs	r2, #0
 8002672:	625a      	str	r2, [r3, #36]	; 0x24
		std_dev(&instFreq.number[0], &ft_array.number[ft_counter]);
 8002674:	7cfb      	ldrb	r3, [r7, #19]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4a6b      	ldr	r2, [pc, #428]	; (8002828 <main+0x524>)
 800267a:	4413      	add	r3, r2
 800267c:	4619      	mov	r1, r3
 800267e:	4868      	ldr	r0, [pc, #416]	; (8002820 <main+0x51c>)
 8002680:	f7fe fedc 	bl	800143c <std_dev>
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
 8002684:	4b61      	ldr	r3, [pc, #388]	; (800280c <main+0x508>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	3305      	adds	r3, #5
 800268c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800268e:	4961      	ldr	r1, [pc, #388]	; (8002814 <main+0x510>)
 8002690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ft_counter++;
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	3301      	adds	r3, #1
 8002698:	74fb      	strb	r3, [r7, #19]
		ft_counter++;

		*/

		// Standard deviation of the centralized normalized absolute amplitude
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800269a:	4b5c      	ldr	r3, [pc, #368]	; (800280c <main+0x508>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2200      	movs	r2, #0
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24
		std_dev(&instCNAbs.number[0], &ft_array.number[ft_counter]);
 80026a2:	7cfb      	ldrb	r3, [r7, #19]
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4a60      	ldr	r2, [pc, #384]	; (8002828 <main+0x524>)
 80026a8:	4413      	add	r3, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	485d      	ldr	r0, [pc, #372]	; (8002824 <main+0x520>)
 80026ae:	f7fe fec5 	bl	800143c <std_dev>
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
 80026b2:	4b56      	ldr	r3, [pc, #344]	; (800280c <main+0x508>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	7cfb      	ldrb	r3, [r7, #19]
 80026b8:	3305      	adds	r3, #5
 80026ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026bc:	4955      	ldr	r1, [pc, #340]	; (8002814 <main+0x510>)
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ft_counter++;
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	3301      	adds	r3, #1
 80026c6:	74fb      	strb	r3, [r7, #19]
		ft_counter++;

		*/

		// Mean Value of the Signal Magnitude
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80026c8:	4b50      	ldr	r3, [pc, #320]	; (800280c <main+0x508>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2200      	movs	r2, #0
 80026ce:	625a      	str	r2, [r3, #36]	; 0x24
		mean_of_signal_magnitude(&instAbs.number[0], &ft_array.number[ft_counter]);
 80026d0:	7cfb      	ldrb	r3, [r7, #19]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4a54      	ldr	r2, [pc, #336]	; (8002828 <main+0x524>)
 80026d6:	4413      	add	r3, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	484d      	ldr	r0, [pc, #308]	; (8002810 <main+0x50c>)
 80026dc:	f7fe fec0 	bl	8001460 <mean_of_signal_magnitude>
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
 80026e0:	4b4a      	ldr	r3, [pc, #296]	; (800280c <main+0x508>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	7cfb      	ldrb	r3, [r7, #19]
 80026e6:	3305      	adds	r3, #5
 80026e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ea:	494a      	ldr	r1, [pc, #296]	; (8002814 <main+0x510>)
 80026ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ft_counter++;
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	3301      	adds	r3, #1
 80026f4:	74fb      	strb	r3, [r7, #19]
		ft_counter++;

		*/

		// Kurtosis of the Absolute Amplitude
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80026f6:	4b45      	ldr	r3, [pc, #276]	; (800280c <main+0x508>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2200      	movs	r2, #0
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24
		kurtosis_of_abs_amplitude(&instAbs.number[0], &ft_array.number[ft_counter], frameSize);
 80026fe:	7cfb      	ldrb	r3, [r7, #19]
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4a49      	ldr	r2, [pc, #292]	; (8002828 <main+0x524>)
 8002704:	4413      	add	r3, r2
 8002706:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800270a:	4619      	mov	r1, r3
 800270c:	4840      	ldr	r0, [pc, #256]	; (8002810 <main+0x50c>)
 800270e:	f7fe feb9 	bl	8001484 <kurtosis_of_abs_amplitude>
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
 8002712:	4b3e      	ldr	r3, [pc, #248]	; (800280c <main+0x508>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	7cfb      	ldrb	r3, [r7, #19]
 8002718:	3305      	adds	r3, #5
 800271a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800271c:	493d      	ldr	r1, [pc, #244]	; (8002814 <main+0x510>)
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ft_counter++;
 8002722:	7cfb      	ldrb	r3, [r7, #19]
 8002724:	3301      	adds	r3, #1
 8002726:	74fb      	strb	r3, [r7, #19]
		ft_counter++;

		*/

		// Cumulant 40
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8002728:	4b38      	ldr	r3, [pc, #224]	; (800280c <main+0x508>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2200      	movs	r2, #0
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_40(&rxBuffer.number[0], &ft_array.number[ft_counter]);
 8002730:	7cfb      	ldrb	r3, [r7, #19]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4a3c      	ldr	r2, [pc, #240]	; (8002828 <main+0x524>)
 8002736:	4413      	add	r3, r2
 8002738:	4619      	mov	r1, r3
 800273a:	4832      	ldr	r0, [pc, #200]	; (8002804 <main+0x500>)
 800273c:	f7ff fbfa 	bl	8001f34 <cumulant_40>
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
 8002740:	4b32      	ldr	r3, [pc, #200]	; (800280c <main+0x508>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	7cfb      	ldrb	r3, [r7, #19]
 8002746:	3305      	adds	r3, #5
 8002748:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800274a:	4932      	ldr	r1, [pc, #200]	; (8002814 <main+0x510>)
 800274c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ft_counter++;
 8002750:	7cfb      	ldrb	r3, [r7, #19]
 8002752:	3301      	adds	r3, #1
 8002754:	74fb      	strb	r3, [r7, #19]
		ft_counter++;

		*/

		// Cumulant 42
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8002756:	4b2d      	ldr	r3, [pc, #180]	; (800280c <main+0x508>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2200      	movs	r2, #0
 800275c:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_42(&rxBuffer.number[0], &ft_array.number[ft_counter]);
 800275e:	7cfb      	ldrb	r3, [r7, #19]
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4a31      	ldr	r2, [pc, #196]	; (8002828 <main+0x524>)
 8002764:	4413      	add	r3, r2
 8002766:	4619      	mov	r1, r3
 8002768:	4826      	ldr	r0, [pc, #152]	; (8002804 <main+0x500>)
 800276a:	f7ff fc49 	bl	8002000 <cumulant_42>
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
 800276e:	4b27      	ldr	r3, [pc, #156]	; (800280c <main+0x508>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	7cfb      	ldrb	r3, [r7, #19]
 8002774:	3305      	adds	r3, #5
 8002776:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002778:	4926      	ldr	r1, [pc, #152]	; (8002814 <main+0x510>)
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ft_counter++;
 800277e:	7cfb      	ldrb	r3, [r7, #19]
 8002780:	3301      	adds	r3, #1
 8002782:	74fb      	strb	r3, [r7, #19]
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
		ft_counter++;

		*/

		transmit_features(&ft_array.bytes[0], &counter_array.bytes[4 * 5]);
 8002784:	4929      	ldr	r1, [pc, #164]	; (800282c <main+0x528>)
 8002786:	4828      	ldr	r0, [pc, #160]	; (8002828 <main+0x524>)
 8002788:	f000 f9c8 	bl	8002b1c <transmit_features>

		// Scale features (mean and var)
		preprocess_features(&ft_array.number[0], &scaled_ft_array.number[0]);
 800278c:	4928      	ldr	r1, [pc, #160]	; (8002830 <main+0x52c>)
 800278e:	4826      	ldr	r0, [pc, #152]	; (8002828 <main+0x524>)
 8002790:	f000 fabc 	bl	8002d0c <preprocess_features>
		min_range.number = -8.0f;
 8002794:	4b27      	ldr	r3, [pc, #156]	; (8002834 <main+0x530>)
 8002796:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 800279a:	601a      	str	r2, [r3, #0]
		max_range.number = 7.99951171875f;
 800279c:	4b26      	ldr	r3, [pc, #152]	; (8002838 <main+0x534>)
 800279e:	4a27      	ldr	r2, [pc, #156]	; (800283c <main+0x538>)
 80027a0:	601a      	str	r2, [r3, #0]

		// Evaluate neural network
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80027a2:	4b1a      	ldr	r3, [pc, #104]	; (800280c <main+0x508>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2200      	movs	r2, #0
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24
		quantize_features(&scaled_ft_array.number[0], min_range.number, max_range.number, &q15_input_vector[0]);
 80027aa:	4b22      	ldr	r3, [pc, #136]	; (8002834 <main+0x530>)
 80027ac:	edd3 7a00 	vldr	s15, [r3]
 80027b0:	4b21      	ldr	r3, [pc, #132]	; (8002838 <main+0x534>)
 80027b2:	ed93 7a00 	vldr	s14, [r3]
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	4619      	mov	r1, r3
 80027ba:	eef0 0a47 	vmov.f32	s1, s14
 80027be:	eeb0 0a67 	vmov.f32	s0, s15
 80027c2:	481b      	ldr	r0, [pc, #108]	; (8002830 <main+0x52c>)
 80027c4:	f000 fad6 	bl	8002d74 <quantize_features>
		fully_connected_run(&q15_input_vector[0], &predicted.number);
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	491d      	ldr	r1, [pc, #116]	; (8002840 <main+0x53c>)
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe fae9 	bl	8000da4 <fully_connected_run>
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <main+0x508>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	7cfb      	ldrb	r3, [r7, #19]
 80027d8:	3305      	adds	r3, #5
 80027da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027dc:	490d      	ldr	r1, [pc, #52]	; (8002814 <main+0x510>)
 80027de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		transmit_prediction(&predicted.bytes[0], &counter_array.bytes[4*(ft_counter + 5)]);
 80027e2:	7cfb      	ldrb	r3, [r7, #19]
 80027e4:	3305      	adds	r3, #5
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <main+0x510>)
 80027ea:	4413      	add	r3, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	4814      	ldr	r0, [pc, #80]	; (8002840 <main+0x53c>)
 80027f0:	f000 f938 	bl	8002a64 <transmit_prediction>
		/*************************************************************************************************/
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		blink_orange_slow();
 80027f4:	f000 f908 	bl	8002a08 <blink_orange_slow>
		if(HAL_UART_Receive_IT(&huart3, &rxBuffer.bytes[0], RX_DATA_SIZE*4) != HAL_OK)
 80027f8:	e685      	b.n	8002506 <main+0x202>
 80027fa:	bf00      	nop
 80027fc:	2400fa44 	.word	0x2400fa44
 8002800:	58020400 	.word	0x58020400
 8002804:	2400ad78 	.word	0x2400ad78
 8002808:	58021000 	.word	0x58021000
 800280c:	2400fa54 	.word	0x2400fa54
 8002810:	24000d78 	.word	0x24000d78
 8002814:	2400f9d8 	.word	0x2400f9d8
 8002818:	24002d78 	.word	0x24002d78
 800281c:	24004d78 	.word	0x24004d78
 8002820:	24006d78 	.word	0x24006d78
 8002824:	24008d78 	.word	0x24008d78
 8002828:	2400fa08 	.word	0x2400fa08
 800282c:	2400f9ec 	.word	0x2400f9ec
 8002830:	2400fa20 	.word	0x2400fa20
 8002834:	2400fa3c 	.word	0x2400fa3c
 8002838:	2400fa40 	.word	0x2400fa40
 800283c:	40fffc00 	.word	0x40fffc00
 8002840:	2400fa38 	.word	0x2400fa38

08002844 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b0cc      	sub	sp, #304	; 0x130
 8002848:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800284a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800284e:	224c      	movs	r2, #76	; 0x4c
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f006 fc90 	bl	8009178 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002858:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800285c:	2220      	movs	r2, #32
 800285e:	2100      	movs	r1, #0
 8002860:	4618      	mov	r0, r3
 8002862:	f006 fc89 	bl	8009178 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002866:	f107 0308 	add.w	r3, r7, #8
 800286a:	4618      	mov	r0, r3
 800286c:	23bc      	movs	r3, #188	; 0xbc
 800286e:	461a      	mov	r2, r3
 8002870:	2100      	movs	r1, #0
 8002872:	f006 fc81 	bl	8009178 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002876:	2004      	movs	r0, #4
 8002878:	f001 fb1a 	bl	8003eb0 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800287c:	1d3b      	adds	r3, r7, #4
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	4b47      	ldr	r3, [pc, #284]	; (80029a0 <SystemClock_Config+0x15c>)
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	4a46      	ldr	r2, [pc, #280]	; (80029a0 <SystemClock_Config+0x15c>)
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800288e:	4b44      	ldr	r3, [pc, #272]	; (80029a0 <SystemClock_Config+0x15c>)
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	f003 0201 	and.w	r2, r3, #1
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	4b42      	ldr	r3, [pc, #264]	; (80029a4 <SystemClock_Config+0x160>)
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	4a41      	ldr	r2, [pc, #260]	; (80029a4 <SystemClock_Config+0x160>)
 80028a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028a4:	6193      	str	r3, [r2, #24]
 80028a6:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <SystemClock_Config+0x160>)
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	681b      	ldr	r3, [r3, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80028b6:	bf00      	nop
 80028b8:	4b3a      	ldr	r3, [pc, #232]	; (80029a4 <SystemClock_Config+0x160>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c4:	d1f8      	bne.n	80028b8 <SystemClock_Config+0x74>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028c6:	2302      	movs	r3, #2
 80028c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028d2:	2340      	movs	r3, #64	; 0x40
 80028d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028d8:	2302      	movs	r3, #2
 80028da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028de:	2300      	movs	r3, #0
 80028e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80028e4:	2304      	movs	r3, #4
 80028e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	RCC_OscInitStruct.PLL.PLLN = 50;
 80028ea:	2332      	movs	r3, #50	; 0x32
 80028ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	RCC_OscInitStruct.PLL.PLLP = 2;
 80028f0:	2302      	movs	r3, #2
 80028f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80028f6:	2302      	movs	r3, #2
 80028f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80028fc:	2302      	movs	r3, #2
 80028fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002902:	230c      	movs	r3, #12
 8002904:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002908:	2300      	movs	r3, #0
 800290a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002914:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002918:	4618      	mov	r0, r3
 800291a:	f001 fb23 	bl	8003f64 <HAL_RCC_OscConfig>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <SystemClock_Config+0xe4>
	{
		Error_Handler();
 8002924:	f000 fafc 	bl	8002f20 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002928:	233f      	movs	r3, #63	; 0x3f
 800292a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800292e:	2303      	movs	r3, #3
 8002930:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002934:	2300      	movs	r3, #0
 8002936:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800293a:	2308      	movs	r3, #8
 800293c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002940:	2340      	movs	r3, #64	; 0x40
 8002942:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002946:	2340      	movs	r3, #64	; 0x40
 8002948:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800294c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002950:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002954:	2340      	movs	r3, #64	; 0x40
 8002956:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800295a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800295e:	2102      	movs	r1, #2
 8002960:	4618      	mov	r0, r3
 8002962:	f001 ff0f 	bl	8004784 <HAL_RCC_ClockConfig>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <SystemClock_Config+0x12c>
	{
		Error_Handler();
 800296c:	f000 fad8 	bl	8002f20 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002970:	f107 0308 	add.w	r3, r7, #8
 8002974:	2202      	movs	r2, #2
 8002976:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8002978:	f107 0308 	add.w	r3, r7, #8
 800297c:	2203      	movs	r2, #3
 800297e:	675a      	str	r2, [r3, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002980:	f107 0308 	add.w	r3, r7, #8
 8002984:	4618      	mov	r0, r3
 8002986:	f002 fa81 	bl	8004e8c <HAL_RCCEx_PeriphCLKConfig>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <SystemClock_Config+0x150>
	{
		Error_Handler();
 8002990:	f000 fac6 	bl	8002f20 <Error_Handler>
	}
}
 8002994:	bf00      	nop
 8002996:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	58000400 	.word	0x58000400
 80029a4:	58024800 	.word	0x58024800

080029a8 <clear_leds>:

/* USER CODE BEGIN 4 */
void clear_leds(){
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 80029ac:	2200      	movs	r2, #0
 80029ae:	2101      	movs	r1, #1
 80029b0:	4807      	ldr	r0, [pc, #28]	; (80029d0 <clear_leds+0x28>)
 80029b2:	f001 fa35 	bl	8003e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2102      	movs	r1, #2
 80029ba:	4806      	ldr	r0, [pc, #24]	; (80029d4 <clear_leds+0x2c>)
 80029bc:	f001 fa30 	bl	8003e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80029c0:	2200      	movs	r2, #0
 80029c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029c6:	4802      	ldr	r0, [pc, #8]	; (80029d0 <clear_leds+0x28>)
 80029c8:	f001 fa2a 	bl	8003e20 <HAL_GPIO_WritePin>
}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	58020400 	.word	0x58020400
 80029d4:	58021000 	.word	0x58021000

080029d8 <blink_red_fast>:
void light_leds(){
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
}
void blink_red_fast(){
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80029dc:	2200      	movs	r2, #0
 80029de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029e2:	4808      	ldr	r0, [pc, #32]	; (8002a04 <blink_red_fast+0x2c>)
 80029e4:	f001 fa1c 	bl	8003e20 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80029e8:	2032      	movs	r0, #50	; 0x32
 80029ea:	f000 fce7 	bl	80033bc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80029ee:	2201      	movs	r2, #1
 80029f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029f4:	4803      	ldr	r0, [pc, #12]	; (8002a04 <blink_red_fast+0x2c>)
 80029f6:	f001 fa13 	bl	8003e20 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80029fa:	2032      	movs	r0, #50	; 0x32
 80029fc:	f000 fcde 	bl	80033bc <HAL_Delay>
}
 8002a00:	bf00      	nop
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	58020400 	.word	0x58020400

08002a08 <blink_orange_slow>:
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_orange_slow(){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2102      	movs	r1, #2
 8002a10:	4808      	ldr	r0, [pc, #32]	; (8002a34 <blink_orange_slow+0x2c>)
 8002a12:	f001 fa05 	bl	8003e20 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002a16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a1a:	f000 fccf 	bl	80033bc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 8002a1e:	2201      	movs	r2, #1
 8002a20:	2102      	movs	r1, #2
 8002a22:	4804      	ldr	r0, [pc, #16]	; (8002a34 <blink_orange_slow+0x2c>)
 8002a24:	f001 f9fc 	bl	8003e20 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002a28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a2c:	f000 fcc6 	bl	80033bc <HAL_Delay>
}
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	58021000 	.word	0x58021000

08002a38 <blink_green>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_green(){
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2101      	movs	r1, #1
 8002a40:	4807      	ldr	r0, [pc, #28]	; (8002a60 <blink_green+0x28>)
 8002a42:	f001 f9ed 	bl	8003e20 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8002a46:	20c8      	movs	r0, #200	; 0xc8
 8002a48:	f000 fcb8 	bl	80033bc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	2101      	movs	r1, #1
 8002a50:	4803      	ldr	r0, [pc, #12]	; (8002a60 <blink_green+0x28>)
 8002a52:	f001 f9e5 	bl	8003e20 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8002a56:	20c8      	movs	r0, #200	; 0xc8
 8002a58:	f000 fcb0 	bl	80033bc <HAL_Delay>
}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	58020400 	.word	0x58020400

08002a64 <transmit_prediction>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(500);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(500);
}
void transmit_prediction(uint8_t *value, uint8_t *counter){
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8002a6e:	4827      	ldr	r0, [pc, #156]	; (8002b0c <transmit_prediction+0xa8>)
 8002a70:	f005 f9aa 	bl	8007dc8 <UART_CheckIdleState>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d13f      	bne.n	8002afa <transmit_prediction+0x96>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8002a7a:	2204      	movs	r2, #4
 8002a7c:	4924      	ldr	r1, [pc, #144]	; (8002b10 <transmit_prediction+0xac>)
 8002a7e:	4823      	ldr	r0, [pc, #140]	; (8002b0c <transmit_prediction+0xa8>)
 8002a80:	f004 f86a 	bl	8006b58 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002a84:	e001      	b.n	8002a8a <transmit_prediction+0x26>
			blink_red_fast();
 8002a86:	f7ff ffa7 	bl	80029d8 <blink_red_fast>
		while(UartReady != SET){
 8002a8a:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <transmit_prediction+0xb0>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d1f8      	bne.n	8002a86 <transmit_prediction+0x22>
		}
		UartReady = RESET;
 8002a94:	4b1f      	ldr	r3, [pc, #124]	; (8002b14 <transmit_prediction+0xb0>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &value[0], 4);
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	481b      	ldr	r0, [pc, #108]	; (8002b0c <transmit_prediction+0xa8>)
 8002aa0:	f004 f85a 	bl	8006b58 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002aa4:	e001      	b.n	8002aaa <transmit_prediction+0x46>
			blink_red_fast();
 8002aa6:	f7ff ff97 	bl	80029d8 <blink_red_fast>
		while(UartReady != SET){
 8002aaa:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <transmit_prediction+0xb0>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d1f8      	bne.n	8002aa6 <transmit_prediction+0x42>
		}
		UartReady = RESET;
 8002ab4:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <transmit_prediction+0xb0>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &counter[0], 4);
 8002aba:	2204      	movs	r2, #4
 8002abc:	6839      	ldr	r1, [r7, #0]
 8002abe:	4813      	ldr	r0, [pc, #76]	; (8002b0c <transmit_prediction+0xa8>)
 8002ac0:	f004 f84a 	bl	8006b58 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002ac4:	e001      	b.n	8002aca <transmit_prediction+0x66>
			blink_red_fast();
 8002ac6:	f7ff ff87 	bl	80029d8 <blink_red_fast>
		while(UartReady != SET){
 8002aca:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <transmit_prediction+0xb0>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d1f8      	bne.n	8002ac6 <transmit_prediction+0x62>
		}
		UartReady = RESET;
 8002ad4:	4b0f      	ldr	r3, [pc, #60]	; (8002b14 <transmit_prediction+0xb0>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8002ada:	2204      	movs	r2, #4
 8002adc:	490e      	ldr	r1, [pc, #56]	; (8002b18 <transmit_prediction+0xb4>)
 8002ade:	480b      	ldr	r0, [pc, #44]	; (8002b0c <transmit_prediction+0xa8>)
 8002ae0:	f004 f83a 	bl	8006b58 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002ae4:	e001      	b.n	8002aea <transmit_prediction+0x86>
			blink_red_fast();
 8002ae6:	f7ff ff77 	bl	80029d8 <blink_red_fast>
		while(UartReady != SET){
 8002aea:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <transmit_prediction+0xb0>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d1f8      	bne.n	8002ae6 <transmit_prediction+0x82>
		}
		UartReady = RESET;
 8002af4:	4b07      	ldr	r3, [pc, #28]	; (8002b14 <transmit_prediction+0xb0>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
	}
	blink_orange_slow();
 8002afa:	f7ff ff85 	bl	8002a08 <blink_orange_slow>
	clear_leds();
 8002afe:	f7ff ff53 	bl	80029a8 <clear_leds>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	2400faa0 	.word	0x2400faa0
 8002b10:	080097e0 	.word	0x080097e0
 8002b14:	2400fa44 	.word	0x2400fa44
 8002b18:	080097e4 	.word	0x080097e4

08002b1c <transmit_features>:
void transmit_features(uint8_t *value, uint8_t *counter){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8002b26:	4827      	ldr	r0, [pc, #156]	; (8002bc4 <transmit_features+0xa8>)
 8002b28:	f005 f94e 	bl	8007dc8 <UART_CheckIdleState>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d13f      	bne.n	8002bb2 <transmit_features+0x96>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8002b32:	2204      	movs	r2, #4
 8002b34:	4924      	ldr	r1, [pc, #144]	; (8002bc8 <transmit_features+0xac>)
 8002b36:	4823      	ldr	r0, [pc, #140]	; (8002bc4 <transmit_features+0xa8>)
 8002b38:	f004 f80e 	bl	8006b58 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002b3c:	e001      	b.n	8002b42 <transmit_features+0x26>
			blink_red_fast();
 8002b3e:	f7ff ff4b 	bl	80029d8 <blink_red_fast>
		while(UartReady != SET){
 8002b42:	4b22      	ldr	r3, [pc, #136]	; (8002bcc <transmit_features+0xb0>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d1f8      	bne.n	8002b3e <transmit_features+0x22>
		}
		UartReady = RESET;
 8002b4c:	4b1f      	ldr	r3, [pc, #124]	; (8002bcc <transmit_features+0xb0>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &value[0], 4 * NUMBER_OF_FEATURES);
 8002b52:	2218      	movs	r2, #24
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	481b      	ldr	r0, [pc, #108]	; (8002bc4 <transmit_features+0xa8>)
 8002b58:	f003 fffe 	bl	8006b58 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002b5c:	e001      	b.n	8002b62 <transmit_features+0x46>
			blink_red_fast();
 8002b5e:	f7ff ff3b 	bl	80029d8 <blink_red_fast>
		while(UartReady != SET){
 8002b62:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <transmit_features+0xb0>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d1f8      	bne.n	8002b5e <transmit_features+0x42>
		}
		UartReady = RESET;
 8002b6c:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <transmit_features+0xb0>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &counter[0], 4 * NUMBER_OF_FEATURES);
 8002b72:	2218      	movs	r2, #24
 8002b74:	6839      	ldr	r1, [r7, #0]
 8002b76:	4813      	ldr	r0, [pc, #76]	; (8002bc4 <transmit_features+0xa8>)
 8002b78:	f003 ffee 	bl	8006b58 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002b7c:	e001      	b.n	8002b82 <transmit_features+0x66>
			blink_red_fast();
 8002b7e:	f7ff ff2b 	bl	80029d8 <blink_red_fast>
		while(UartReady != SET){
 8002b82:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <transmit_features+0xb0>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d1f8      	bne.n	8002b7e <transmit_features+0x62>
		}
		UartReady = RESET;
 8002b8c:	4b0f      	ldr	r3, [pc, #60]	; (8002bcc <transmit_features+0xb0>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8002b92:	2204      	movs	r2, #4
 8002b94:	490e      	ldr	r1, [pc, #56]	; (8002bd0 <transmit_features+0xb4>)
 8002b96:	480b      	ldr	r0, [pc, #44]	; (8002bc4 <transmit_features+0xa8>)
 8002b98:	f003 ffde 	bl	8006b58 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002b9c:	e001      	b.n	8002ba2 <transmit_features+0x86>
			blink_red_fast();
 8002b9e:	f7ff ff1b 	bl	80029d8 <blink_red_fast>
		while(UartReady != SET){
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <transmit_features+0xb0>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d1f8      	bne.n	8002b9e <transmit_features+0x82>
		}
		UartReady = RESET;
 8002bac:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <transmit_features+0xb0>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
	}
	blink_orange_slow();
 8002bb2:	f7ff ff29 	bl	8002a08 <blink_orange_slow>
	clear_leds();
 8002bb6:	f7ff fef7 	bl	80029a8 <clear_leds>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	2400faa0 	.word	0x2400faa0
 8002bc8:	080097e0 	.word	0x080097e0
 8002bcc:	2400fa44 	.word	0x2400fa44
 8002bd0:	080097e4 	.word	0x080097e4

08002bd4 <transmit_echo_wandb>:
		UartReady = RESET;
	}
	blink_orange_slow();
	clear_leds();
}
void transmit_echo_wandb(uint8_t *array, uint16_t size){
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	807b      	strh	r3, [r7, #2]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8002be0:	481f      	ldr	r0, [pc, #124]	; (8002c60 <transmit_echo_wandb+0x8c>)
 8002be2:	f005 f8f1 	bl	8007dc8 <UART_CheckIdleState>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d130      	bne.n	8002c4e <transmit_echo_wandb+0x7a>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 2);
 8002bec:	2202      	movs	r2, #2
 8002bee:	491d      	ldr	r1, [pc, #116]	; (8002c64 <transmit_echo_wandb+0x90>)
 8002bf0:	481b      	ldr	r0, [pc, #108]	; (8002c60 <transmit_echo_wandb+0x8c>)
 8002bf2:	f003 ffb1 	bl	8006b58 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002bf6:	e001      	b.n	8002bfc <transmit_echo_wandb+0x28>
			blink_red_fast();
 8002bf8:	f7ff feee 	bl	80029d8 <blink_red_fast>
		while(UartReady != SET){
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <transmit_echo_wandb+0x94>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d1f8      	bne.n	8002bf8 <transmit_echo_wandb+0x24>
		}
		UartReady = RESET;
 8002c06:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <transmit_echo_wandb+0x94>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &array[0], size);
 8002c0c:	887b      	ldrh	r3, [r7, #2]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4813      	ldr	r0, [pc, #76]	; (8002c60 <transmit_echo_wandb+0x8c>)
 8002c14:	f003 ffa0 	bl	8006b58 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002c18:	e001      	b.n	8002c1e <transmit_echo_wandb+0x4a>
			blink_red_fast();
 8002c1a:	f7ff fedd 	bl	80029d8 <blink_red_fast>
		while(UartReady != SET){
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <transmit_echo_wandb+0x94>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d1f8      	bne.n	8002c1a <transmit_echo_wandb+0x46>
		}
		UartReady = RESET;
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <transmit_echo_wandb+0x94>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 2);
 8002c2e:	2202      	movs	r2, #2
 8002c30:	490e      	ldr	r1, [pc, #56]	; (8002c6c <transmit_echo_wandb+0x98>)
 8002c32:	480b      	ldr	r0, [pc, #44]	; (8002c60 <transmit_echo_wandb+0x8c>)
 8002c34:	f003 ff90 	bl	8006b58 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002c38:	e001      	b.n	8002c3e <transmit_echo_wandb+0x6a>
			blink_red_fast();
 8002c3a:	f7ff fecd 	bl	80029d8 <blink_red_fast>
		while(UartReady != SET){
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <transmit_echo_wandb+0x94>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d1f8      	bne.n	8002c3a <transmit_echo_wandb+0x66>
		}
		UartReady = RESET;
 8002c48:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <transmit_echo_wandb+0x94>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
	}
	blink_orange_slow();
 8002c4e:	f7ff fedb 	bl	8002a08 <blink_orange_slow>
	clear_leds();
 8002c52:	f7ff fea9 	bl	80029a8 <clear_leds>
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	2400faa0 	.word	0x2400faa0
 8002c64:	080097e0 	.word	0x080097e0
 8002c68:	2400fa44 	.word	0x2400fa44
 8002c6c:	080097e4 	.word	0x080097e4

08002c70 <transmit_echo_data>:
void transmit_echo_data(uint8_t *array, uint16_t size){
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	807b      	strh	r3, [r7, #2]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8002c7c:	481f      	ldr	r0, [pc, #124]	; (8002cfc <transmit_echo_data+0x8c>)
 8002c7e:	f005 f8a3 	bl	8007dc8 <UART_CheckIdleState>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d130      	bne.n	8002cea <transmit_echo_data+0x7a>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8002c88:	2204      	movs	r2, #4
 8002c8a:	491d      	ldr	r1, [pc, #116]	; (8002d00 <transmit_echo_data+0x90>)
 8002c8c:	481b      	ldr	r0, [pc, #108]	; (8002cfc <transmit_echo_data+0x8c>)
 8002c8e:	f003 ff63 	bl	8006b58 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002c92:	e001      	b.n	8002c98 <transmit_echo_data+0x28>
			blink_red_fast();
 8002c94:	f7ff fea0 	bl	80029d8 <blink_red_fast>
		while(UartReady != SET){
 8002c98:	4b1a      	ldr	r3, [pc, #104]	; (8002d04 <transmit_echo_data+0x94>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d1f8      	bne.n	8002c94 <transmit_echo_data+0x24>
		}
		UartReady = RESET;
 8002ca2:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <transmit_echo_data+0x94>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &array[0], size);
 8002ca8:	887b      	ldrh	r3, [r7, #2]
 8002caa:	461a      	mov	r2, r3
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4813      	ldr	r0, [pc, #76]	; (8002cfc <transmit_echo_data+0x8c>)
 8002cb0:	f003 ff52 	bl	8006b58 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002cb4:	e001      	b.n	8002cba <transmit_echo_data+0x4a>
			blink_red_fast();
 8002cb6:	f7ff fe8f 	bl	80029d8 <blink_red_fast>
		while(UartReady != SET){
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <transmit_echo_data+0x94>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d1f8      	bne.n	8002cb6 <transmit_echo_data+0x46>
		}
		UartReady = RESET;
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <transmit_echo_data+0x94>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8002cca:	2204      	movs	r2, #4
 8002ccc:	490e      	ldr	r1, [pc, #56]	; (8002d08 <transmit_echo_data+0x98>)
 8002cce:	480b      	ldr	r0, [pc, #44]	; (8002cfc <transmit_echo_data+0x8c>)
 8002cd0:	f003 ff42 	bl	8006b58 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002cd4:	e001      	b.n	8002cda <transmit_echo_data+0x6a>
			blink_red_fast();
 8002cd6:	f7ff fe7f 	bl	80029d8 <blink_red_fast>
		while(UartReady != SET){
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <transmit_echo_data+0x94>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d1f8      	bne.n	8002cd6 <transmit_echo_data+0x66>
		}
		UartReady = RESET;
 8002ce4:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <transmit_echo_data+0x94>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
	}
	blink_orange_slow();
 8002cea:	f7ff fe8d 	bl	8002a08 <blink_orange_slow>
	clear_leds();
 8002cee:	f7ff fe5b 	bl	80029a8 <clear_leds>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	2400faa0 	.word	0x2400faa0
 8002d00:	080097e0 	.word	0x080097e0
 8002d04:	2400fa44 	.word	0x2400fa44
 8002d08:	080097e4 	.word	0x080097e4

08002d0c <preprocess_features>:
void preprocess_features(float32_t in[], float32_t out[]){
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < NUMBER_OF_FEATURES; i++){
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]
 8002d1a:	e01f      	b.n	8002d5c <preprocess_features+0x50>
		out[i] = (in[i] - rxScaler.number[i]) / rxScaler.number[i + NUMBER_OF_FEATURES];
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	4413      	add	r3, r2
 8002d24:	ed93 7a00 	vldr	s14, [r3]
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	4a11      	ldr	r2, [pc, #68]	; (8002d70 <preprocess_features+0x64>)
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	edd3 7a00 	vldr	s15, [r3]
 8002d34:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	3306      	adds	r3, #6
 8002d3c:	4a0c      	ldr	r2, [pc, #48]	; (8002d70 <preprocess_features+0x64>)
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	ed93 7a00 	vldr	s14, [r3]
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d52:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < NUMBER_OF_FEATURES; i++){
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	2b05      	cmp	r3, #5
 8002d60:	d9dc      	bls.n	8002d1c <preprocess_features+0x10>
	}
}
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	2400f9a8 	.word	0x2400f9a8

08002d74 <quantize_features>:
void quantize_features(float32_t in[], float32_t min_float_range, float32_t max_float_range, q15_t out[]){
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08a      	sub	sp, #40	; 0x28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d80:	edc7 0a01 	vstr	s1, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
	const int16_t min_int16_t = SHRT_MIN;
 8002d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d8a:	84bb      	strh	r3, [r7, #36]	; 0x24
	const int16_t max_int16_t = SHRT_MAX;
 8002d8c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002d90:	847b      	strh	r3, [r7, #34]	; 0x22
	const float32_t max_float = FLT_MAX;
 8002d92:	4b52      	ldr	r3, [pc, #328]	; (8002edc <quantize_features+0x168>)
 8002d94:	61fb      	str	r3, [r7, #28]

	float32_t scale_factor_from_min_side = 0.0f;
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	61bb      	str	r3, [r7, #24]
	float32_t scale_factor_from_max_side = 0.0f;
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
	float32_t scale_factor = 0.0f;
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	613b      	str	r3, [r7, #16]

	scale_factor_from_min_side = (min_int16_t * min_float_range > 0) ? min_int16_t / min_float_range : max_float;
 8002da8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002dac:	ee07 3a90 	vmov	s15, r3
 8002db0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002db4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc4:	dd0a      	ble.n	8002ddc <quantize_features+0x68>
 8002dc6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002dca:	ee07 3a90 	vmov	s15, r3
 8002dce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002dd2:	ed97 7a02 	vldr	s14, [r7, #8]
 8002dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dda:	e001      	b.n	8002de0 <quantize_features+0x6c>
 8002ddc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002de0:	edc7 7a06 	vstr	s15, [r7, #24]
	scale_factor_from_max_side = (max_int16_t * max_float_range > 0) ? max_int16_t / max_float_range : max_float;
 8002de4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002de8:	ee07 3a90 	vmov	s15, r3
 8002dec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002df0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e00:	dd0a      	ble.n	8002e18 <quantize_features+0xa4>
 8002e02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002e06:	ee07 3a90 	vmov	s15, r3
 8002e0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e16:	e001      	b.n	8002e1c <quantize_features+0xa8>
 8002e18:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e1c:	edc7 7a05 	vstr	s15, [r7, #20]
	scale_factor = fminf(scale_factor_from_min_side, scale_factor_from_max_side);
 8002e20:	edd7 0a05 	vldr	s1, [r7, #20]
 8002e24:	ed97 0a06 	vldr	s0, [r7, #24]
 8002e28:	f006 fa83 	bl	8009332 <fminf>
 8002e2c:	ed87 0a04 	vstr	s0, [r7, #16]

	min_float_range = min_int16_t / scale_factor;
 8002e30:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002e34:	ee07 3a90 	vmov	s15, r3
 8002e38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e3c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e44:	edc7 7a02 	vstr	s15, [r7, #8]
	max_float_range = max_int16_t / scale_factor;
 8002e48:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002e4c:	ee07 3a90 	vmov	s15, r3
 8002e50:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e54:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e5c:	edc7 7a01 	vstr	s15, [r7, #4]

	for(uint8_t i = 0; i < NUMBER_OF_FEATURES; i++){
 8002e60:	2300      	movs	r3, #0
 8002e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e66:	e030      	b.n	8002eca <quantize_features+0x156>
		out[i] = (int16_t) roundf(fminf(max_float_range, fmaxf(min_float_range, in[i])) * scale_factor);
 8002e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4413      	add	r3, r2
 8002e72:	edd3 7a00 	vldr	s15, [r3]
 8002e76:	eef0 0a67 	vmov.f32	s1, s15
 8002e7a:	ed97 0a02 	vldr	s0, [r7, #8]
 8002e7e:	f006 fa3d 	bl	80092fc <fmaxf>
 8002e82:	eef0 7a40 	vmov.f32	s15, s0
 8002e86:	eef0 0a67 	vmov.f32	s1, s15
 8002e8a:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e8e:	f006 fa50 	bl	8009332 <fminf>
 8002e92:	eeb0 7a40 	vmov.f32	s14, s0
 8002e96:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea2:	f006 fa7d 	bl	80093a0 <roundf>
 8002ea6:	eef0 7a40 	vmov.f32	s15, s0
 8002eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eb8:	ee17 2a90 	vmov	r2, s15
 8002ebc:	b212      	sxth	r2, r2
 8002ebe:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < NUMBER_OF_FEATURES; i++){
 8002ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d9ca      	bls.n	8002e68 <quantize_features+0xf4>
	}
}
 8002ed2:	bf00      	nop
 8002ed4:	3728      	adds	r7, #40	; 0x28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	7f7fffff 	.word	0x7f7fffff

08002ee0 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart3){
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <HAL_UART_TxCpltCallback+0x1c>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	701a      	strb	r2, [r3, #0]
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	2400fa44 	.word	0x2400fa44

08002f00 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart3){
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <HAL_UART_RxCpltCallback+0x1c>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	2400fa44 	.word	0x2400fa44

08002f20 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <HAL_MspInit+0x30>)
 8002f38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f3c:	4a08      	ldr	r2, [pc, #32]	; (8002f60 <HAL_MspInit+0x30>)
 8002f3e:	f043 0302 	orr.w	r3, r3, #2
 8002f42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f46:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <HAL_MspInit+0x30>)
 8002f48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	58024400 	.word	0x58024400

08002f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f76:	e7fe      	b.n	8002f76 <HardFault_Handler+0x4>

08002f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f7c:	e7fe      	b.n	8002f7c <MemManage_Handler+0x4>

08002f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f82:	e7fe      	b.n	8002f82 <BusFault_Handler+0x4>

08002f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f88:	e7fe      	b.n	8002f88 <UsageFault_Handler+0x4>

08002f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb8:	f000 f9e0 	bl	800337c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002fc4:	4802      	ldr	r0, [pc, #8]	; (8002fd0 <USART3_IRQHandler+0x10>)
 8002fc6:	f003 ff23 	bl	8006e10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	2400faa0 	.word	0x2400faa0

08002fd4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002fdc:	4b11      	ldr	r3, [pc, #68]	; (8003024 <_sbrk+0x50>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d102      	bne.n	8002fea <_sbrk+0x16>
		heap_end = &end;
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <_sbrk+0x50>)
 8002fe6:	4a10      	ldr	r2, [pc, #64]	; (8003028 <_sbrk+0x54>)
 8002fe8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002fea:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <_sbrk+0x50>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <_sbrk+0x50>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	466a      	mov	r2, sp
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d907      	bls.n	800300e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002ffe:	f006 f881 	bl	8009104 <__errno>
 8003002:	4602      	mov	r2, r0
 8003004:	230c      	movs	r3, #12
 8003006:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003008:	f04f 33ff 	mov.w	r3, #4294967295
 800300c:	e006      	b.n	800301c <_sbrk+0x48>
	}

	heap_end += incr;
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <_sbrk+0x50>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	4a03      	ldr	r2, [pc, #12]	; (8003024 <_sbrk+0x50>)
 8003018:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800301a:	68fb      	ldr	r3, [r7, #12]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	2400fa48 	.word	0x2400fa48
 8003028:	2400fb38 	.word	0x2400fb38

0800302c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003032:	f107 0310 	add.w	r3, r7, #16
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	605a      	str	r2, [r3, #4]
 800303c:	609a      	str	r2, [r3, #8]
 800303e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003040:	1d3b      	adds	r3, r7, #4
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	605a      	str	r2, [r3, #4]
 8003048:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800304a:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <MX_TIM2_Init+0x98>)
 800304c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003050:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003052:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <MX_TIM2_Init+0x98>)
 8003054:	2200      	movs	r2, #0
 8003056:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003058:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <MX_TIM2_Init+0x98>)
 800305a:	2200      	movs	r2, #0
 800305c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800305e:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <MX_TIM2_Init+0x98>)
 8003060:	f04f 32ff 	mov.w	r2, #4294967295
 8003064:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003066:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <MX_TIM2_Init+0x98>)
 8003068:	2200      	movs	r2, #0
 800306a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800306c:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <MX_TIM2_Init+0x98>)
 800306e:	2200      	movs	r2, #0
 8003070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003072:	4814      	ldr	r0, [pc, #80]	; (80030c4 <MX_TIM2_Init+0x98>)
 8003074:	f003 fa0a 	bl	800648c <HAL_TIM_Base_Init>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800307e:	f7ff ff4f 	bl	8002f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003086:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003088:	f107 0310 	add.w	r3, r7, #16
 800308c:	4619      	mov	r1, r3
 800308e:	480d      	ldr	r0, [pc, #52]	; (80030c4 <MX_TIM2_Init+0x98>)
 8003090:	f003 fa82 	bl	8006598 <HAL_TIM_ConfigClockSource>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800309a:	f7ff ff41 	bl	8002f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800309e:	2300      	movs	r3, #0
 80030a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030a6:	1d3b      	adds	r3, r7, #4
 80030a8:	4619      	mov	r1, r3
 80030aa:	4806      	ldr	r0, [pc, #24]	; (80030c4 <MX_TIM2_Init+0x98>)
 80030ac:	f003 fc7c 	bl	80069a8 <HAL_TIMEx_MasterConfigSynchronization>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80030b6:	f7ff ff33 	bl	8002f20 <Error_Handler>
  }

}
 80030ba:	bf00      	nop
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	2400fa54 	.word	0x2400fa54

080030c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d8:	d10e      	bne.n	80030f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_TIM_Base_MspInit+0x3c>)
 80030dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030e0:	4a08      	ldr	r2, [pc, #32]	; (8003104 <HAL_TIM_Base_MspInit+0x3c>)
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_TIM_Base_MspInit+0x3c>)
 80030ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	58024400 	.word	0x58024400

08003108 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800310c:	4b22      	ldr	r3, [pc, #136]	; (8003198 <MX_USART3_UART_Init+0x90>)
 800310e:	4a23      	ldr	r2, [pc, #140]	; (800319c <MX_USART3_UART_Init+0x94>)
 8003110:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003112:	4b21      	ldr	r3, [pc, #132]	; (8003198 <MX_USART3_UART_Init+0x90>)
 8003114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003118:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800311a:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <MX_USART3_UART_Init+0x90>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003120:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <MX_USART3_UART_Init+0x90>)
 8003122:	2200      	movs	r2, #0
 8003124:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003126:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <MX_USART3_UART_Init+0x90>)
 8003128:	2200      	movs	r2, #0
 800312a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800312c:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <MX_USART3_UART_Init+0x90>)
 800312e:	220c      	movs	r2, #12
 8003130:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003132:	4b19      	ldr	r3, [pc, #100]	; (8003198 <MX_USART3_UART_Init+0x90>)
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003138:	4b17      	ldr	r3, [pc, #92]	; (8003198 <MX_USART3_UART_Init+0x90>)
 800313a:	2200      	movs	r2, #0
 800313c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800313e:	4b16      	ldr	r3, [pc, #88]	; (8003198 <MX_USART3_UART_Init+0x90>)
 8003140:	2200      	movs	r2, #0
 8003142:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003144:	4b14      	ldr	r3, [pc, #80]	; (8003198 <MX_USART3_UART_Init+0x90>)
 8003146:	2200      	movs	r2, #0
 8003148:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800314a:	4b13      	ldr	r3, [pc, #76]	; (8003198 <MX_USART3_UART_Init+0x90>)
 800314c:	2200      	movs	r2, #0
 800314e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003150:	4811      	ldr	r0, [pc, #68]	; (8003198 <MX_USART3_UART_Init+0x90>)
 8003152:	f003 fcb1 	bl	8006ab8 <HAL_UART_Init>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800315c:	f7ff fee0 	bl	8002f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003160:	2100      	movs	r1, #0
 8003162:	480d      	ldr	r0, [pc, #52]	; (8003198 <MX_USART3_UART_Init+0x90>)
 8003164:	f005 fa6d 	bl	8008642 <HAL_UARTEx_SetTxFifoThreshold>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800316e:	f7ff fed7 	bl	8002f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003172:	2100      	movs	r1, #0
 8003174:	4808      	ldr	r0, [pc, #32]	; (8003198 <MX_USART3_UART_Init+0x90>)
 8003176:	f005 faa2 	bl	80086be <HAL_UARTEx_SetRxFifoThreshold>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003180:	f7ff fece 	bl	8002f20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003184:	4804      	ldr	r0, [pc, #16]	; (8003198 <MX_USART3_UART_Init+0x90>)
 8003186:	f005 fa23 	bl	80085d0 <HAL_UARTEx_DisableFifoMode>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003190:	f7ff fec6 	bl	8002f20 <Error_Handler>
  }

}
 8003194:	bf00      	nop
 8003196:	bd80      	pop	{r7, pc}
 8003198:	2400faa0 	.word	0x2400faa0
 800319c:	40004800 	.word	0x40004800

080031a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08a      	sub	sp, #40	; 0x28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a8:	f107 0314 	add.w	r3, r7, #20
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	605a      	str	r2, [r3, #4]
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	60da      	str	r2, [r3, #12]
 80031b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1e      	ldr	r2, [pc, #120]	; (8003238 <HAL_UART_MspInit+0x98>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d136      	bne.n	8003230 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80031c2:	4b1e      	ldr	r3, [pc, #120]	; (800323c <HAL_UART_MspInit+0x9c>)
 80031c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031c8:	4a1c      	ldr	r2, [pc, #112]	; (800323c <HAL_UART_MspInit+0x9c>)
 80031ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031d2:	4b1a      	ldr	r3, [pc, #104]	; (800323c <HAL_UART_MspInit+0x9c>)
 80031d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031e0:	4b16      	ldr	r3, [pc, #88]	; (800323c <HAL_UART_MspInit+0x9c>)
 80031e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e6:	4a15      	ldr	r2, [pc, #84]	; (800323c <HAL_UART_MspInit+0x9c>)
 80031e8:	f043 0308 	orr.w	r3, r3, #8
 80031ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031f0:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_UART_MspInit+0x9c>)
 80031f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003204:	2302      	movs	r3, #2
 8003206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003208:	2300      	movs	r3, #0
 800320a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320c:	2300      	movs	r3, #0
 800320e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003210:	2307      	movs	r3, #7
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003214:	f107 0314 	add.w	r3, r7, #20
 8003218:	4619      	mov	r1, r3
 800321a:	4809      	ldr	r0, [pc, #36]	; (8003240 <HAL_UART_MspInit+0xa0>)
 800321c:	f000 fc50 	bl	8003ac0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003220:	2200      	movs	r2, #0
 8003222:	2100      	movs	r1, #0
 8003224:	2027      	movs	r0, #39	; 0x27
 8003226:	f000 f9d2 	bl	80035ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800322a:	2027      	movs	r0, #39	; 0x27
 800322c:	f000 f9e9 	bl	8003602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003230:	bf00      	nop
 8003232:	3728      	adds	r7, #40	; 0x28
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40004800 	.word	0x40004800
 800323c:	58024400 	.word	0x58024400
 8003240:	58020c00 	.word	0x58020c00

08003244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800327c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003248:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800324a:	e003      	b.n	8003254 <LoopCopyDataInit>

0800324c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800324c:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800324e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003250:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003252:	3104      	adds	r1, #4

08003254 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003254:	480b      	ldr	r0, [pc, #44]	; (8003284 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003256:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003258:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800325a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800325c:	d3f6      	bcc.n	800324c <CopyDataInit>
  ldr  r2, =_sbss
 800325e:	4a0b      	ldr	r2, [pc, #44]	; (800328c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003260:	e002      	b.n	8003268 <LoopFillZerobss>

08003262 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003262:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003264:	f842 3b04 	str.w	r3, [r2], #4

08003268 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003268:	4b09      	ldr	r3, [pc, #36]	; (8003290 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800326a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800326c:	d3f9      	bcc.n	8003262 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800326e:	f7fd fa03 	bl	8000678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003272:	f005 ff4d 	bl	8009110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003276:	f7ff f845 	bl	8002304 <main>
  bx  lr    
 800327a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800327c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003280:	08009838 	.word	0x08009838
  ldr  r0, =_sdata
 8003284:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8003288:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 800328c:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 8003290:	2400fb34 	.word	0x2400fb34

08003294 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003294:	e7fe      	b.n	8003294 <ADC3_IRQHandler>
	...

08003298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800329e:	2003      	movs	r0, #3
 80032a0:	f000 f98a 	bl	80035b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032a4:	f001 fc24 	bl	8004af0 <HAL_RCC_GetSysClockFreq>
 80032a8:	4601      	mov	r1, r0
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <HAL_Init+0x68>)
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	0a1b      	lsrs	r3, r3, #8
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	4a13      	ldr	r2, [pc, #76]	; (8003304 <HAL_Init+0x6c>)
 80032b6:	5cd3      	ldrb	r3, [r2, r3]
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	fa21 f303 	lsr.w	r3, r1, r3
 80032c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032c2:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <HAL_Init+0x68>)
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	4a0e      	ldr	r2, [pc, #56]	; (8003304 <HAL_Init+0x6c>)
 80032cc:	5cd3      	ldrb	r3, [r2, r3]
 80032ce:	f003 031f 	and.w	r3, r3, #31
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
 80032d8:	4a0b      	ldr	r2, [pc, #44]	; (8003308 <HAL_Init+0x70>)
 80032da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032dc:	4a0b      	ldr	r2, [pc, #44]	; (800330c <HAL_Init+0x74>)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032e2:	2000      	movs	r0, #0
 80032e4:	f000 f814 	bl	8003310 <HAL_InitTick>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e002      	b.n	80032f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80032f2:	f7ff fe1d 	bl	8002f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	58024400 	.word	0x58024400
 8003304:	080097cc 	.word	0x080097cc
 8003308:	24000004 	.word	0x24000004
 800330c:	24000000 	.word	0x24000000

08003310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003318:	4b15      	ldr	r3, [pc, #84]	; (8003370 <HAL_InitTick+0x60>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e021      	b.n	8003368 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003324:	4b13      	ldr	r3, [pc, #76]	; (8003374 <HAL_InitTick+0x64>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	4b11      	ldr	r3, [pc, #68]	; (8003370 <HAL_InitTick+0x60>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	4619      	mov	r1, r3
 800332e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003332:	fbb3 f3f1 	udiv	r3, r3, r1
 8003336:	fbb2 f3f3 	udiv	r3, r2, r3
 800333a:	4618      	mov	r0, r3
 800333c:	f000 f96f 	bl	800361e <HAL_SYSTICK_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e00e      	b.n	8003368 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b0f      	cmp	r3, #15
 800334e:	d80a      	bhi.n	8003366 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003350:	2200      	movs	r2, #0
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	f04f 30ff 	mov.w	r0, #4294967295
 8003358:	f000 f939 	bl	80035ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800335c:	4a06      	ldr	r2, [pc, #24]	; (8003378 <HAL_InitTick+0x68>)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	e000      	b.n	8003368 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
}
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	2400000c 	.word	0x2400000c
 8003374:	24000000 	.word	0x24000000
 8003378:	24000008 	.word	0x24000008

0800337c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003380:	4b06      	ldr	r3, [pc, #24]	; (800339c <HAL_IncTick+0x20>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	461a      	mov	r2, r3
 8003386:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <HAL_IncTick+0x24>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4413      	add	r3, r2
 800338c:	4a04      	ldr	r2, [pc, #16]	; (80033a0 <HAL_IncTick+0x24>)
 800338e:	6013      	str	r3, [r2, #0]
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	2400000c 	.word	0x2400000c
 80033a0:	2400fb2c 	.word	0x2400fb2c

080033a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  return uwTick;
 80033a8:	4b03      	ldr	r3, [pc, #12]	; (80033b8 <HAL_GetTick+0x14>)
 80033aa:	681b      	ldr	r3, [r3, #0]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	2400fb2c 	.word	0x2400fb2c

080033bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033c4:	f7ff ffee 	bl	80033a4 <HAL_GetTick>
 80033c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d005      	beq.n	80033e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033d6:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_Delay+0x40>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4413      	add	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033e2:	bf00      	nop
 80033e4:	f7ff ffde 	bl	80033a4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d8f7      	bhi.n	80033e4 <HAL_Delay+0x28>
  {
  }
}
 80033f4:	bf00      	nop
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	2400000c 	.word	0x2400000c

08003400 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003404:	4b03      	ldr	r3, [pc, #12]	; (8003414 <HAL_GetREVID+0x14>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	0c1b      	lsrs	r3, r3, #16
}
 800340a:	4618      	mov	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	5c001000 	.word	0x5c001000

08003418 <__NVIC_SetPriorityGrouping>:
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <__NVIC_SetPriorityGrouping+0x40>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003434:	4013      	ands	r3, r2
 8003436:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003440:	4b06      	ldr	r3, [pc, #24]	; (800345c <__NVIC_SetPriorityGrouping+0x44>)
 8003442:	4313      	orrs	r3, r2
 8003444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003446:	4a04      	ldr	r2, [pc, #16]	; (8003458 <__NVIC_SetPriorityGrouping+0x40>)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	60d3      	str	r3, [r2, #12]
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000ed00 	.word	0xe000ed00
 800345c:	05fa0000 	.word	0x05fa0000

08003460 <__NVIC_GetPriorityGrouping>:
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003464:	4b04      	ldr	r3, [pc, #16]	; (8003478 <__NVIC_GetPriorityGrouping+0x18>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	0a1b      	lsrs	r3, r3, #8
 800346a:	f003 0307 	and.w	r3, r3, #7
}
 800346e:	4618      	mov	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <__NVIC_EnableIRQ>:
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800348a:	2b00      	cmp	r3, #0
 800348c:	db0b      	blt.n	80034a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	f003 021f 	and.w	r2, r3, #31
 8003494:	4907      	ldr	r1, [pc, #28]	; (80034b4 <__NVIC_EnableIRQ+0x38>)
 8003496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2001      	movs	r0, #1
 800349e:	fa00 f202 	lsl.w	r2, r0, r2
 80034a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	e000e100 	.word	0xe000e100

080034b8 <__NVIC_SetPriority>:
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	6039      	str	r1, [r7, #0]
 80034c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	db0a      	blt.n	80034e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	490c      	ldr	r1, [pc, #48]	; (8003504 <__NVIC_SetPriority+0x4c>)
 80034d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034d6:	0112      	lsls	r2, r2, #4
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	440b      	add	r3, r1
 80034dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034e0:	e00a      	b.n	80034f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4908      	ldr	r1, [pc, #32]	; (8003508 <__NVIC_SetPriority+0x50>)
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	3b04      	subs	r3, #4
 80034f0:	0112      	lsls	r2, r2, #4
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	440b      	add	r3, r1
 80034f6:	761a      	strb	r2, [r3, #24]
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000e100 	.word	0xe000e100
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <NVIC_EncodePriority>:
{
 800350c:	b480      	push	{r7}
 800350e:	b089      	sub	sp, #36	; 0x24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f1c3 0307 	rsb	r3, r3, #7
 8003526:	2b04      	cmp	r3, #4
 8003528:	bf28      	it	cs
 800352a:	2304      	movcs	r3, #4
 800352c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3304      	adds	r3, #4
 8003532:	2b06      	cmp	r3, #6
 8003534:	d902      	bls.n	800353c <NVIC_EncodePriority+0x30>
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3b03      	subs	r3, #3
 800353a:	e000      	b.n	800353e <NVIC_EncodePriority+0x32>
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	f04f 32ff 	mov.w	r2, #4294967295
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43da      	mvns	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	401a      	ands	r2, r3
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003554:	f04f 31ff 	mov.w	r1, #4294967295
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	43d9      	mvns	r1, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003564:	4313      	orrs	r3, r2
}
 8003566:	4618      	mov	r0, r3
 8003568:	3724      	adds	r7, #36	; 0x24
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3b01      	subs	r3, #1
 8003580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003584:	d301      	bcc.n	800358a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003586:	2301      	movs	r3, #1
 8003588:	e00f      	b.n	80035aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800358a:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <SysTick_Config+0x40>)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3b01      	subs	r3, #1
 8003590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003592:	210f      	movs	r1, #15
 8003594:	f04f 30ff 	mov.w	r0, #4294967295
 8003598:	f7ff ff8e 	bl	80034b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <SysTick_Config+0x40>)
 800359e:	2200      	movs	r2, #0
 80035a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035a2:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <SysTick_Config+0x40>)
 80035a4:	2207      	movs	r2, #7
 80035a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	e000e010 	.word	0xe000e010

080035b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff ff29 	bl	8003418 <__NVIC_SetPriorityGrouping>
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b086      	sub	sp, #24
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	4603      	mov	r3, r0
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035dc:	f7ff ff40 	bl	8003460 <__NVIC_GetPriorityGrouping>
 80035e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	6978      	ldr	r0, [r7, #20]
 80035e8:	f7ff ff90 	bl	800350c <NVIC_EncodePriority>
 80035ec:	4602      	mov	r2, r0
 80035ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035f2:	4611      	mov	r1, r2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff5f 	bl	80034b8 <__NVIC_SetPriority>
}
 80035fa:	bf00      	nop
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	4603      	mov	r3, r0
 800360a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800360c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff ff33 	bl	800347c <__NVIC_EnableIRQ>
}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ffa4 	bl	8003574 <SysTick_Config>
 800362c:	4603      	mov	r3, r0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e205      	b.n	8003a56 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d004      	beq.n	8003660 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2280      	movs	r2, #128	; 0x80
 800365a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e1fa      	b.n	8003a56 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a8c      	ldr	r2, [pc, #560]	; (8003898 <HAL_DMA_Abort_IT+0x260>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d04a      	beq.n	8003700 <HAL_DMA_Abort_IT+0xc8>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a8b      	ldr	r2, [pc, #556]	; (800389c <HAL_DMA_Abort_IT+0x264>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d045      	beq.n	8003700 <HAL_DMA_Abort_IT+0xc8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a89      	ldr	r2, [pc, #548]	; (80038a0 <HAL_DMA_Abort_IT+0x268>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d040      	beq.n	8003700 <HAL_DMA_Abort_IT+0xc8>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a88      	ldr	r2, [pc, #544]	; (80038a4 <HAL_DMA_Abort_IT+0x26c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d03b      	beq.n	8003700 <HAL_DMA_Abort_IT+0xc8>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a86      	ldr	r2, [pc, #536]	; (80038a8 <HAL_DMA_Abort_IT+0x270>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d036      	beq.n	8003700 <HAL_DMA_Abort_IT+0xc8>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a85      	ldr	r2, [pc, #532]	; (80038ac <HAL_DMA_Abort_IT+0x274>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d031      	beq.n	8003700 <HAL_DMA_Abort_IT+0xc8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a83      	ldr	r2, [pc, #524]	; (80038b0 <HAL_DMA_Abort_IT+0x278>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d02c      	beq.n	8003700 <HAL_DMA_Abort_IT+0xc8>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a82      	ldr	r2, [pc, #520]	; (80038b4 <HAL_DMA_Abort_IT+0x27c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d027      	beq.n	8003700 <HAL_DMA_Abort_IT+0xc8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a80      	ldr	r2, [pc, #512]	; (80038b8 <HAL_DMA_Abort_IT+0x280>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d022      	beq.n	8003700 <HAL_DMA_Abort_IT+0xc8>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a7f      	ldr	r2, [pc, #508]	; (80038bc <HAL_DMA_Abort_IT+0x284>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d01d      	beq.n	8003700 <HAL_DMA_Abort_IT+0xc8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a7d      	ldr	r2, [pc, #500]	; (80038c0 <HAL_DMA_Abort_IT+0x288>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d018      	beq.n	8003700 <HAL_DMA_Abort_IT+0xc8>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a7c      	ldr	r2, [pc, #496]	; (80038c4 <HAL_DMA_Abort_IT+0x28c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d013      	beq.n	8003700 <HAL_DMA_Abort_IT+0xc8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a7a      	ldr	r2, [pc, #488]	; (80038c8 <HAL_DMA_Abort_IT+0x290>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00e      	beq.n	8003700 <HAL_DMA_Abort_IT+0xc8>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a79      	ldr	r2, [pc, #484]	; (80038cc <HAL_DMA_Abort_IT+0x294>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d009      	beq.n	8003700 <HAL_DMA_Abort_IT+0xc8>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a77      	ldr	r2, [pc, #476]	; (80038d0 <HAL_DMA_Abort_IT+0x298>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d004      	beq.n	8003700 <HAL_DMA_Abort_IT+0xc8>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a76      	ldr	r2, [pc, #472]	; (80038d4 <HAL_DMA_Abort_IT+0x29c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d101      	bne.n	8003704 <HAL_DMA_Abort_IT+0xcc>
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <HAL_DMA_Abort_IT+0xce>
 8003704:	2300      	movs	r3, #0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d065      	beq.n	80037d6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2204      	movs	r2, #4
 800370e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a60      	ldr	r2, [pc, #384]	; (8003898 <HAL_DMA_Abort_IT+0x260>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d04a      	beq.n	80037b2 <HAL_DMA_Abort_IT+0x17a>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a5e      	ldr	r2, [pc, #376]	; (800389c <HAL_DMA_Abort_IT+0x264>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d045      	beq.n	80037b2 <HAL_DMA_Abort_IT+0x17a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a5d      	ldr	r2, [pc, #372]	; (80038a0 <HAL_DMA_Abort_IT+0x268>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d040      	beq.n	80037b2 <HAL_DMA_Abort_IT+0x17a>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a5b      	ldr	r2, [pc, #364]	; (80038a4 <HAL_DMA_Abort_IT+0x26c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d03b      	beq.n	80037b2 <HAL_DMA_Abort_IT+0x17a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a5a      	ldr	r2, [pc, #360]	; (80038a8 <HAL_DMA_Abort_IT+0x270>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d036      	beq.n	80037b2 <HAL_DMA_Abort_IT+0x17a>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a58      	ldr	r2, [pc, #352]	; (80038ac <HAL_DMA_Abort_IT+0x274>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d031      	beq.n	80037b2 <HAL_DMA_Abort_IT+0x17a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a57      	ldr	r2, [pc, #348]	; (80038b0 <HAL_DMA_Abort_IT+0x278>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d02c      	beq.n	80037b2 <HAL_DMA_Abort_IT+0x17a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a55      	ldr	r2, [pc, #340]	; (80038b4 <HAL_DMA_Abort_IT+0x27c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d027      	beq.n	80037b2 <HAL_DMA_Abort_IT+0x17a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a54      	ldr	r2, [pc, #336]	; (80038b8 <HAL_DMA_Abort_IT+0x280>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d022      	beq.n	80037b2 <HAL_DMA_Abort_IT+0x17a>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a52      	ldr	r2, [pc, #328]	; (80038bc <HAL_DMA_Abort_IT+0x284>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d01d      	beq.n	80037b2 <HAL_DMA_Abort_IT+0x17a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a51      	ldr	r2, [pc, #324]	; (80038c0 <HAL_DMA_Abort_IT+0x288>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d018      	beq.n	80037b2 <HAL_DMA_Abort_IT+0x17a>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a4f      	ldr	r2, [pc, #316]	; (80038c4 <HAL_DMA_Abort_IT+0x28c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d013      	beq.n	80037b2 <HAL_DMA_Abort_IT+0x17a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a4e      	ldr	r2, [pc, #312]	; (80038c8 <HAL_DMA_Abort_IT+0x290>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d00e      	beq.n	80037b2 <HAL_DMA_Abort_IT+0x17a>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a4c      	ldr	r2, [pc, #304]	; (80038cc <HAL_DMA_Abort_IT+0x294>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d009      	beq.n	80037b2 <HAL_DMA_Abort_IT+0x17a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a4b      	ldr	r2, [pc, #300]	; (80038d0 <HAL_DMA_Abort_IT+0x298>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d004      	beq.n	80037b2 <HAL_DMA_Abort_IT+0x17a>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a49      	ldr	r2, [pc, #292]	; (80038d4 <HAL_DMA_Abort_IT+0x29c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d108      	bne.n	80037c4 <HAL_DMA_Abort_IT+0x18c>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0201 	bic.w	r2, r2, #1
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	e147      	b.n	8003a54 <HAL_DMA_Abort_IT+0x41c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0201 	bic.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	e13e      	b.n	8003a54 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 020e 	bic.w	r2, r2, #14
 80037e4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a2b      	ldr	r2, [pc, #172]	; (8003898 <HAL_DMA_Abort_IT+0x260>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d04a      	beq.n	8003886 <HAL_DMA_Abort_IT+0x24e>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a29      	ldr	r2, [pc, #164]	; (800389c <HAL_DMA_Abort_IT+0x264>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d045      	beq.n	8003886 <HAL_DMA_Abort_IT+0x24e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a28      	ldr	r2, [pc, #160]	; (80038a0 <HAL_DMA_Abort_IT+0x268>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d040      	beq.n	8003886 <HAL_DMA_Abort_IT+0x24e>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a26      	ldr	r2, [pc, #152]	; (80038a4 <HAL_DMA_Abort_IT+0x26c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d03b      	beq.n	8003886 <HAL_DMA_Abort_IT+0x24e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a25      	ldr	r2, [pc, #148]	; (80038a8 <HAL_DMA_Abort_IT+0x270>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d036      	beq.n	8003886 <HAL_DMA_Abort_IT+0x24e>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a23      	ldr	r2, [pc, #140]	; (80038ac <HAL_DMA_Abort_IT+0x274>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d031      	beq.n	8003886 <HAL_DMA_Abort_IT+0x24e>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a22      	ldr	r2, [pc, #136]	; (80038b0 <HAL_DMA_Abort_IT+0x278>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d02c      	beq.n	8003886 <HAL_DMA_Abort_IT+0x24e>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a20      	ldr	r2, [pc, #128]	; (80038b4 <HAL_DMA_Abort_IT+0x27c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d027      	beq.n	8003886 <HAL_DMA_Abort_IT+0x24e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1f      	ldr	r2, [pc, #124]	; (80038b8 <HAL_DMA_Abort_IT+0x280>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d022      	beq.n	8003886 <HAL_DMA_Abort_IT+0x24e>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a1d      	ldr	r2, [pc, #116]	; (80038bc <HAL_DMA_Abort_IT+0x284>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01d      	beq.n	8003886 <HAL_DMA_Abort_IT+0x24e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a1c      	ldr	r2, [pc, #112]	; (80038c0 <HAL_DMA_Abort_IT+0x288>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d018      	beq.n	8003886 <HAL_DMA_Abort_IT+0x24e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a1a      	ldr	r2, [pc, #104]	; (80038c4 <HAL_DMA_Abort_IT+0x28c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d013      	beq.n	8003886 <HAL_DMA_Abort_IT+0x24e>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a19      	ldr	r2, [pc, #100]	; (80038c8 <HAL_DMA_Abort_IT+0x290>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00e      	beq.n	8003886 <HAL_DMA_Abort_IT+0x24e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a17      	ldr	r2, [pc, #92]	; (80038cc <HAL_DMA_Abort_IT+0x294>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d009      	beq.n	8003886 <HAL_DMA_Abort_IT+0x24e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a16      	ldr	r2, [pc, #88]	; (80038d0 <HAL_DMA_Abort_IT+0x298>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d004      	beq.n	8003886 <HAL_DMA_Abort_IT+0x24e>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a14      	ldr	r2, [pc, #80]	; (80038d4 <HAL_DMA_Abort_IT+0x29c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d128      	bne.n	80038d8 <HAL_DMA_Abort_IT+0x2a0>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0201 	bic.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	e027      	b.n	80038e8 <HAL_DMA_Abort_IT+0x2b0>
 8003898:	40020010 	.word	0x40020010
 800389c:	40020028 	.word	0x40020028
 80038a0:	40020040 	.word	0x40020040
 80038a4:	40020058 	.word	0x40020058
 80038a8:	40020070 	.word	0x40020070
 80038ac:	40020088 	.word	0x40020088
 80038b0:	400200a0 	.word	0x400200a0
 80038b4:	400200b8 	.word	0x400200b8
 80038b8:	40020410 	.word	0x40020410
 80038bc:	40020428 	.word	0x40020428
 80038c0:	40020440 	.word	0x40020440
 80038c4:	40020458 	.word	0x40020458
 80038c8:	40020470 	.word	0x40020470
 80038cc:	40020488 	.word	0x40020488
 80038d0:	400204a0 	.word	0x400204a0
 80038d4:	400204b8 	.word	0x400204b8
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0201 	bic.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a5c      	ldr	r2, [pc, #368]	; (8003a60 <HAL_DMA_Abort_IT+0x428>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d072      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a5b      	ldr	r2, [pc, #364]	; (8003a64 <HAL_DMA_Abort_IT+0x42c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d06d      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a59      	ldr	r2, [pc, #356]	; (8003a68 <HAL_DMA_Abort_IT+0x430>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d068      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a58      	ldr	r2, [pc, #352]	; (8003a6c <HAL_DMA_Abort_IT+0x434>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d063      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a56      	ldr	r2, [pc, #344]	; (8003a70 <HAL_DMA_Abort_IT+0x438>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d05e      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a55      	ldr	r2, [pc, #340]	; (8003a74 <HAL_DMA_Abort_IT+0x43c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d059      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a53      	ldr	r2, [pc, #332]	; (8003a78 <HAL_DMA_Abort_IT+0x440>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d054      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a52      	ldr	r2, [pc, #328]	; (8003a7c <HAL_DMA_Abort_IT+0x444>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d04f      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a50      	ldr	r2, [pc, #320]	; (8003a80 <HAL_DMA_Abort_IT+0x448>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d04a      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a4f      	ldr	r2, [pc, #316]	; (8003a84 <HAL_DMA_Abort_IT+0x44c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d045      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a4d      	ldr	r2, [pc, #308]	; (8003a88 <HAL_DMA_Abort_IT+0x450>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d040      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a4c      	ldr	r2, [pc, #304]	; (8003a8c <HAL_DMA_Abort_IT+0x454>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d03b      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a4a      	ldr	r2, [pc, #296]	; (8003a90 <HAL_DMA_Abort_IT+0x458>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d036      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a49      	ldr	r2, [pc, #292]	; (8003a94 <HAL_DMA_Abort_IT+0x45c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d031      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a47      	ldr	r2, [pc, #284]	; (8003a98 <HAL_DMA_Abort_IT+0x460>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d02c      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a46      	ldr	r2, [pc, #280]	; (8003a9c <HAL_DMA_Abort_IT+0x464>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d027      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a44      	ldr	r2, [pc, #272]	; (8003aa0 <HAL_DMA_Abort_IT+0x468>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d022      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a43      	ldr	r2, [pc, #268]	; (8003aa4 <HAL_DMA_Abort_IT+0x46c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d01d      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a41      	ldr	r2, [pc, #260]	; (8003aa8 <HAL_DMA_Abort_IT+0x470>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d018      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a40      	ldr	r2, [pc, #256]	; (8003aac <HAL_DMA_Abort_IT+0x474>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d013      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a3e      	ldr	r2, [pc, #248]	; (8003ab0 <HAL_DMA_Abort_IT+0x478>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00e      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a3d      	ldr	r2, [pc, #244]	; (8003ab4 <HAL_DMA_Abort_IT+0x47c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d009      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a3b      	ldr	r2, [pc, #236]	; (8003ab8 <HAL_DMA_Abort_IT+0x480>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d004      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3a0>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a3a      	ldr	r2, [pc, #232]	; (8003abc <HAL_DMA_Abort_IT+0x484>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d101      	bne.n	80039dc <HAL_DMA_Abort_IT+0x3a4>
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <HAL_DMA_Abort_IT+0x3a6>
 80039dc:	2300      	movs	r3, #0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d028      	beq.n	8003a34 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039f0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	2201      	movs	r2, #1
 8003a02:	409a      	lsls	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a10:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00c      	beq.n	8003a34 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a28:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a32:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40020010 	.word	0x40020010
 8003a64:	40020028 	.word	0x40020028
 8003a68:	40020040 	.word	0x40020040
 8003a6c:	40020058 	.word	0x40020058
 8003a70:	40020070 	.word	0x40020070
 8003a74:	40020088 	.word	0x40020088
 8003a78:	400200a0 	.word	0x400200a0
 8003a7c:	400200b8 	.word	0x400200b8
 8003a80:	40020410 	.word	0x40020410
 8003a84:	40020428 	.word	0x40020428
 8003a88:	40020440 	.word	0x40020440
 8003a8c:	40020458 	.word	0x40020458
 8003a90:	40020470 	.word	0x40020470
 8003a94:	40020488 	.word	0x40020488
 8003a98:	400204a0 	.word	0x400204a0
 8003a9c:	400204b8 	.word	0x400204b8
 8003aa0:	58025408 	.word	0x58025408
 8003aa4:	5802541c 	.word	0x5802541c
 8003aa8:	58025430 	.word	0x58025430
 8003aac:	58025444 	.word	0x58025444
 8003ab0:	58025458 	.word	0x58025458
 8003ab4:	5802546c 	.word	0x5802546c
 8003ab8:	58025480 	.word	0x58025480
 8003abc:	58025494 	.word	0x58025494

08003ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b089      	sub	sp, #36	; 0x24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003ace:	4b89      	ldr	r3, [pc, #548]	; (8003cf4 <HAL_GPIO_Init+0x234>)
 8003ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ad2:	e194      	b.n	8003dfe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	2101      	movs	r1, #1
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 8186 	beq.w	8003df8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d00b      	beq.n	8003b0c <HAL_GPIO_Init+0x4c>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d007      	beq.n	8003b0c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b00:	2b11      	cmp	r3, #17
 8003b02:	d003      	beq.n	8003b0c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b12      	cmp	r3, #18
 8003b0a:	d130      	bne.n	8003b6e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	2203      	movs	r2, #3
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b42:	2201      	movs	r2, #1
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	091b      	lsrs	r3, r3, #4
 8003b58:	f003 0201 	and.w	r2, r3, #1
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	2203      	movs	r2, #3
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4013      	ands	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_Init+0xee>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b12      	cmp	r3, #18
 8003bac:	d123      	bne.n	8003bf6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	08da      	lsrs	r2, r3, #3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3208      	adds	r2, #8
 8003bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	220f      	movs	r2, #15
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	691a      	ldr	r2, [r3, #16]
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	08da      	lsrs	r2, r3, #3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3208      	adds	r2, #8
 8003bf0:	69b9      	ldr	r1, [r7, #24]
 8003bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	2203      	movs	r2, #3
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43db      	mvns	r3, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f003 0203 	and.w	r2, r3, #3
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 80e0 	beq.w	8003df8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c38:	4b2f      	ldr	r3, [pc, #188]	; (8003cf8 <HAL_GPIO_Init+0x238>)
 8003c3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c3e:	4a2e      	ldr	r2, [pc, #184]	; (8003cf8 <HAL_GPIO_Init+0x238>)
 8003c40:	f043 0302 	orr.w	r3, r3, #2
 8003c44:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c48:	4b2b      	ldr	r3, [pc, #172]	; (8003cf8 <HAL_GPIO_Init+0x238>)
 8003c4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c56:	4a29      	ldr	r2, [pc, #164]	; (8003cfc <HAL_GPIO_Init+0x23c>)
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	089b      	lsrs	r3, r3, #2
 8003c5c:	3302      	adds	r3, #2
 8003c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	220f      	movs	r2, #15
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4013      	ands	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a20      	ldr	r2, [pc, #128]	; (8003d00 <HAL_GPIO_Init+0x240>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d052      	beq.n	8003d28 <HAL_GPIO_Init+0x268>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a1f      	ldr	r2, [pc, #124]	; (8003d04 <HAL_GPIO_Init+0x244>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d031      	beq.n	8003cee <HAL_GPIO_Init+0x22e>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a1e      	ldr	r2, [pc, #120]	; (8003d08 <HAL_GPIO_Init+0x248>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d02b      	beq.n	8003cea <HAL_GPIO_Init+0x22a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a1d      	ldr	r2, [pc, #116]	; (8003d0c <HAL_GPIO_Init+0x24c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d025      	beq.n	8003ce6 <HAL_GPIO_Init+0x226>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a1c      	ldr	r2, [pc, #112]	; (8003d10 <HAL_GPIO_Init+0x250>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01f      	beq.n	8003ce2 <HAL_GPIO_Init+0x222>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a1b      	ldr	r2, [pc, #108]	; (8003d14 <HAL_GPIO_Init+0x254>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d019      	beq.n	8003cde <HAL_GPIO_Init+0x21e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a1a      	ldr	r2, [pc, #104]	; (8003d18 <HAL_GPIO_Init+0x258>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d013      	beq.n	8003cda <HAL_GPIO_Init+0x21a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a19      	ldr	r2, [pc, #100]	; (8003d1c <HAL_GPIO_Init+0x25c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00d      	beq.n	8003cd6 <HAL_GPIO_Init+0x216>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a18      	ldr	r2, [pc, #96]	; (8003d20 <HAL_GPIO_Init+0x260>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d007      	beq.n	8003cd2 <HAL_GPIO_Init+0x212>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a17      	ldr	r2, [pc, #92]	; (8003d24 <HAL_GPIO_Init+0x264>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d101      	bne.n	8003cce <HAL_GPIO_Init+0x20e>
 8003cca:	2309      	movs	r3, #9
 8003ccc:	e02d      	b.n	8003d2a <HAL_GPIO_Init+0x26a>
 8003cce:	230a      	movs	r3, #10
 8003cd0:	e02b      	b.n	8003d2a <HAL_GPIO_Init+0x26a>
 8003cd2:	2308      	movs	r3, #8
 8003cd4:	e029      	b.n	8003d2a <HAL_GPIO_Init+0x26a>
 8003cd6:	2307      	movs	r3, #7
 8003cd8:	e027      	b.n	8003d2a <HAL_GPIO_Init+0x26a>
 8003cda:	2306      	movs	r3, #6
 8003cdc:	e025      	b.n	8003d2a <HAL_GPIO_Init+0x26a>
 8003cde:	2305      	movs	r3, #5
 8003ce0:	e023      	b.n	8003d2a <HAL_GPIO_Init+0x26a>
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	e021      	b.n	8003d2a <HAL_GPIO_Init+0x26a>
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e01f      	b.n	8003d2a <HAL_GPIO_Init+0x26a>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e01d      	b.n	8003d2a <HAL_GPIO_Init+0x26a>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e01b      	b.n	8003d2a <HAL_GPIO_Init+0x26a>
 8003cf2:	bf00      	nop
 8003cf4:	58000080 	.word	0x58000080
 8003cf8:	58024400 	.word	0x58024400
 8003cfc:	58000400 	.word	0x58000400
 8003d00:	58020000 	.word	0x58020000
 8003d04:	58020400 	.word	0x58020400
 8003d08:	58020800 	.word	0x58020800
 8003d0c:	58020c00 	.word	0x58020c00
 8003d10:	58021000 	.word	0x58021000
 8003d14:	58021400 	.word	0x58021400
 8003d18:	58021800 	.word	0x58021800
 8003d1c:	58021c00 	.word	0x58021c00
 8003d20:	58022000 	.word	0x58022000
 8003d24:	58022400 	.word	0x58022400
 8003d28:	2300      	movs	r3, #0
 8003d2a:	69fa      	ldr	r2, [r7, #28]
 8003d2c:	f002 0203 	and.w	r2, r2, #3
 8003d30:	0092      	lsls	r2, r2, #2
 8003d32:	4093      	lsls	r3, r2
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d3a:	4938      	ldr	r1, [pc, #224]	; (8003e1c <HAL_GPIO_Init+0x35c>)
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	089b      	lsrs	r3, r3, #2
 8003d40:	3302      	adds	r3, #2
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	43db      	mvns	r3, r3
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4013      	ands	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	43db      	mvns	r3, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4013      	ands	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003dc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003df0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f47f ae63 	bne.w	8003ad4 <HAL_GPIO_Init+0x14>
  }
}
 8003e0e:	bf00      	nop
 8003e10:	3724      	adds	r7, #36	; 0x24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	58000400 	.word	0x58000400

08003e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	807b      	strh	r3, [r7, #2]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e30:	787b      	ldrb	r3, [r7, #1]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e36:	887a      	ldrh	r2, [r7, #2]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003e3c:	e003      	b.n	8003e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003e3e:	887b      	ldrh	r3, [r7, #2]
 8003e40:	041a      	lsls	r2, r3, #16
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	619a      	str	r2, [r3, #24]
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
	...

08003e54 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003e5c:	4a08      	ldr	r2, [pc, #32]	; (8003e80 <HAL_HSEM_FastTake+0x2c>)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3320      	adds	r3, #32
 8003e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e66:	4a07      	ldr	r2, [pc, #28]	; (8003e84 <HAL_HSEM_FastTake+0x30>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d101      	bne.n	8003e70 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	e000      	b.n	8003e72 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	58026400 	.word	0x58026400
 8003e84:	80000300 	.word	0x80000300

08003e88 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003e92:	4906      	ldr	r1, [pc, #24]	; (8003eac <HAL_HSEM_Release+0x24>)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	58026400 	.word	0x58026400

08003eb0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003eb8:	4b29      	ldr	r3, [pc, #164]	; (8003f60 <HAL_PWREx_ConfigSupply+0xb0>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	2b06      	cmp	r3, #6
 8003ec2:	d00a      	beq.n	8003eda <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003ec4:	4b26      	ldr	r3, [pc, #152]	; (8003f60 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d001      	beq.n	8003ed6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e040      	b.n	8003f58 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e03e      	b.n	8003f58 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003eda:	4b21      	ldr	r3, [pc, #132]	; (8003f60 <HAL_PWREx_ConfigSupply+0xb0>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003ee2:	491f      	ldr	r1, [pc, #124]	; (8003f60 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003eea:	f7ff fa5b 	bl	80033a4 <HAL_GetTick>
 8003eee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ef0:	e009      	b.n	8003f06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ef2:	f7ff fa57 	bl	80033a4 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f00:	d901      	bls.n	8003f06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e028      	b.n	8003f58 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f06:	4b16      	ldr	r3, [pc, #88]	; (8003f60 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f12:	d1ee      	bne.n	8003ef2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b1e      	cmp	r3, #30
 8003f18:	d008      	beq.n	8003f2c <HAL_PWREx_ConfigSupply+0x7c>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8003f1e:	d005      	beq.n	8003f2c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b1d      	cmp	r3, #29
 8003f24:	d002      	beq.n	8003f2c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b2d      	cmp	r3, #45	; 0x2d
 8003f2a:	d114      	bne.n	8003f56 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003f2c:	f7ff fa3a 	bl	80033a4 <HAL_GetTick>
 8003f30:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003f32:	e009      	b.n	8003f48 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f34:	f7ff fa36 	bl	80033a4 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f42:	d901      	bls.n	8003f48 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e007      	b.n	8003f58 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003f48:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f54:	d1ee      	bne.n	8003f34 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	58024800 	.word	0x58024800

08003f64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08c      	sub	sp, #48	; 0x30
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e3ff      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 8087 	beq.w	8004092 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f84:	4b99      	ldr	r3, [pc, #612]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f8e:	4b97      	ldr	r3, [pc, #604]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f96:	2b10      	cmp	r3, #16
 8003f98:	d007      	beq.n	8003faa <HAL_RCC_OscConfig+0x46>
 8003f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9c:	2b18      	cmp	r3, #24
 8003f9e:	d110      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x5e>
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d10b      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003faa:	4b90      	ldr	r3, [pc, #576]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d06c      	beq.n	8004090 <HAL_RCC_OscConfig+0x12c>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d168      	bne.n	8004090 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e3d9      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fca:	d106      	bne.n	8003fda <HAL_RCC_OscConfig+0x76>
 8003fcc:	4b87      	ldr	r3, [pc, #540]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a86      	ldr	r2, [pc, #536]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8003fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	e02e      	b.n	8004038 <HAL_RCC_OscConfig+0xd4>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x98>
 8003fe2:	4b82      	ldr	r3, [pc, #520]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a81      	ldr	r2, [pc, #516]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8003fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	4b7f      	ldr	r3, [pc, #508]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a7e      	ldr	r2, [pc, #504]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8003ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e01d      	b.n	8004038 <HAL_RCC_OscConfig+0xd4>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004004:	d10c      	bne.n	8004020 <HAL_RCC_OscConfig+0xbc>
 8004006:	4b79      	ldr	r3, [pc, #484]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a78      	ldr	r2, [pc, #480]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 800400c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	4b76      	ldr	r3, [pc, #472]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a75      	ldr	r2, [pc, #468]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8004018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	e00b      	b.n	8004038 <HAL_RCC_OscConfig+0xd4>
 8004020:	4b72      	ldr	r3, [pc, #456]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a71      	ldr	r2, [pc, #452]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8004026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	4b6f      	ldr	r3, [pc, #444]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a6e      	ldr	r2, [pc, #440]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8004032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d013      	beq.n	8004068 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7ff f9b0 	bl	80033a4 <HAL_GetTick>
 8004044:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004048:	f7ff f9ac 	bl	80033a4 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b64      	cmp	r3, #100	; 0x64
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e38d      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800405a:	4b64      	ldr	r3, [pc, #400]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0xe4>
 8004066:	e014      	b.n	8004092 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7ff f99c 	bl	80033a4 <HAL_GetTick>
 800406c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004070:	f7ff f998 	bl	80033a4 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	; 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e379      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004082:	4b5a      	ldr	r3, [pc, #360]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_OscConfig+0x10c>
 800408e:	e000      	b.n	8004092 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 80ae 	beq.w	80041fc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040a0:	4b52      	ldr	r3, [pc, #328]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040aa:	4b50      	ldr	r3, [pc, #320]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d007      	beq.n	80040c6 <HAL_RCC_OscConfig+0x162>
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	2b18      	cmp	r3, #24
 80040ba:	d13a      	bne.n	8004132 <HAL_RCC_OscConfig+0x1ce>
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d135      	bne.n	8004132 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040c6:	4b49      	ldr	r3, [pc, #292]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d005      	beq.n	80040de <HAL_RCC_OscConfig+0x17a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e34b      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040de:	f7ff f98f 	bl	8003400 <HAL_GetREVID>
 80040e2:	4602      	mov	r2, r0
 80040e4:	f241 0303 	movw	r3, #4099	; 0x1003
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d817      	bhi.n	800411c <HAL_RCC_OscConfig+0x1b8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	2b40      	cmp	r3, #64	; 0x40
 80040f2:	d108      	bne.n	8004106 <HAL_RCC_OscConfig+0x1a2>
 80040f4:	4b3d      	ldr	r3, [pc, #244]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80040fc:	4a3b      	ldr	r2, [pc, #236]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 80040fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004102:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004104:	e07a      	b.n	80041fc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004106:	4b39      	ldr	r3, [pc, #228]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	031b      	lsls	r3, r3, #12
 8004114:	4935      	ldr	r1, [pc, #212]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8004116:	4313      	orrs	r3, r2
 8004118:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800411a:	e06f      	b.n	80041fc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411c:	4b33      	ldr	r3, [pc, #204]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	061b      	lsls	r3, r3, #24
 800412a:	4930      	ldr	r1, [pc, #192]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 800412c:	4313      	orrs	r3, r2
 800412e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004130:	e064      	b.n	80041fc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d045      	beq.n	80041c6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800413a:	4b2c      	ldr	r3, [pc, #176]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f023 0219 	bic.w	r2, r3, #25
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	4929      	ldr	r1, [pc, #164]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8004148:	4313      	orrs	r3, r2
 800414a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7ff f92a 	bl	80033a4 <HAL_GetTick>
 8004150:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004154:	f7ff f926 	bl	80033a4 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e307      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004166:	4b21      	ldr	r3, [pc, #132]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004172:	f7ff f945 	bl	8003400 <HAL_GetREVID>
 8004176:	4602      	mov	r2, r0
 8004178:	f241 0303 	movw	r3, #4099	; 0x1003
 800417c:	429a      	cmp	r2, r3
 800417e:	d817      	bhi.n	80041b0 <HAL_RCC_OscConfig+0x24c>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	2b40      	cmp	r3, #64	; 0x40
 8004186:	d108      	bne.n	800419a <HAL_RCC_OscConfig+0x236>
 8004188:	4b18      	ldr	r3, [pc, #96]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004190:	4a16      	ldr	r2, [pc, #88]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 8004192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004196:	6053      	str	r3, [r2, #4]
 8004198:	e030      	b.n	80041fc <HAL_RCC_OscConfig+0x298>
 800419a:	4b14      	ldr	r3, [pc, #80]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	031b      	lsls	r3, r3, #12
 80041a8:	4910      	ldr	r1, [pc, #64]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	604b      	str	r3, [r1, #4]
 80041ae:	e025      	b.n	80041fc <HAL_RCC_OscConfig+0x298>
 80041b0:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	061b      	lsls	r3, r3, #24
 80041be:	490b      	ldr	r1, [pc, #44]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	604b      	str	r3, [r1, #4]
 80041c4:	e01a      	b.n	80041fc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c6:	4b09      	ldr	r3, [pc, #36]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a08      	ldr	r2, [pc, #32]	; (80041ec <HAL_RCC_OscConfig+0x288>)
 80041cc:	f023 0301 	bic.w	r3, r3, #1
 80041d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d2:	f7ff f8e7 	bl	80033a4 <HAL_GetTick>
 80041d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041d8:	e00a      	b.n	80041f0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041da:	f7ff f8e3 	bl	80033a4 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d903      	bls.n	80041f0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e2c4      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
 80041ec:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041f0:	4ba4      	ldr	r3, [pc, #656]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1ee      	bne.n	80041da <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 80a9 	beq.w	800435c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800420a:	4b9e      	ldr	r3, [pc, #632]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004212:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004214:	4b9b      	ldr	r3, [pc, #620]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2b08      	cmp	r3, #8
 800421e:	d007      	beq.n	8004230 <HAL_RCC_OscConfig+0x2cc>
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	2b18      	cmp	r3, #24
 8004224:	d13a      	bne.n	800429c <HAL_RCC_OscConfig+0x338>
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	2b01      	cmp	r3, #1
 800422e:	d135      	bne.n	800429c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004230:	4b94      	ldr	r3, [pc, #592]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <HAL_RCC_OscConfig+0x2e4>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	2b80      	cmp	r3, #128	; 0x80
 8004242:	d001      	beq.n	8004248 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e296      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004248:	f7ff f8da 	bl	8003400 <HAL_GetREVID>
 800424c:	4602      	mov	r2, r0
 800424e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004252:	429a      	cmp	r2, r3
 8004254:	d817      	bhi.n	8004286 <HAL_RCC_OscConfig+0x322>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	2b20      	cmp	r3, #32
 800425c:	d108      	bne.n	8004270 <HAL_RCC_OscConfig+0x30c>
 800425e:	4b89      	ldr	r3, [pc, #548]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004266:	4a87      	ldr	r2, [pc, #540]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 8004268:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800426c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800426e:	e075      	b.n	800435c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004270:	4b84      	ldr	r3, [pc, #528]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	069b      	lsls	r3, r3, #26
 800427e:	4981      	ldr	r1, [pc, #516]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 8004280:	4313      	orrs	r3, r2
 8004282:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004284:	e06a      	b.n	800435c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004286:	4b7f      	ldr	r3, [pc, #508]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	061b      	lsls	r3, r3, #24
 8004294:	497b      	ldr	r1, [pc, #492]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 8004296:	4313      	orrs	r3, r2
 8004298:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800429a:	e05f      	b.n	800435c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d042      	beq.n	800432a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80042a4:	4b77      	ldr	r3, [pc, #476]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a76      	ldr	r2, [pc, #472]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 80042aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b0:	f7ff f878 	bl	80033a4 <HAL_GetTick>
 80042b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80042b8:	f7ff f874 	bl	80033a4 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e255      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042ca:	4b6e      	ldr	r3, [pc, #440]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0f0      	beq.n	80042b8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042d6:	f7ff f893 	bl	8003400 <HAL_GetREVID>
 80042da:	4602      	mov	r2, r0
 80042dc:	f241 0303 	movw	r3, #4099	; 0x1003
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d817      	bhi.n	8004314 <HAL_RCC_OscConfig+0x3b0>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d108      	bne.n	80042fe <HAL_RCC_OscConfig+0x39a>
 80042ec:	4b65      	ldr	r3, [pc, #404]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80042f4:	4a63      	ldr	r2, [pc, #396]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 80042f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042fa:	6053      	str	r3, [r2, #4]
 80042fc:	e02e      	b.n	800435c <HAL_RCC_OscConfig+0x3f8>
 80042fe:	4b61      	ldr	r3, [pc, #388]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	069b      	lsls	r3, r3, #26
 800430c:	495d      	ldr	r1, [pc, #372]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 800430e:	4313      	orrs	r3, r2
 8004310:	604b      	str	r3, [r1, #4]
 8004312:	e023      	b.n	800435c <HAL_RCC_OscConfig+0x3f8>
 8004314:	4b5b      	ldr	r3, [pc, #364]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	061b      	lsls	r3, r3, #24
 8004322:	4958      	ldr	r1, [pc, #352]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 8004324:	4313      	orrs	r3, r2
 8004326:	60cb      	str	r3, [r1, #12]
 8004328:	e018      	b.n	800435c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800432a:	4b56      	ldr	r3, [pc, #344]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a55      	ldr	r2, [pc, #340]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 8004330:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004336:	f7ff f835 	bl	80033a4 <HAL_GetTick>
 800433a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800433e:	f7ff f831 	bl	80033a4 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e212      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004350:	4b4c      	ldr	r3, [pc, #304]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f0      	bne.n	800433e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d036      	beq.n	80043d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d019      	beq.n	80043a4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004370:	4b44      	ldr	r3, [pc, #272]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 8004372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004374:	4a43      	ldr	r2, [pc, #268]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437c:	f7ff f812 	bl	80033a4 <HAL_GetTick>
 8004380:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004384:	f7ff f80e 	bl	80033a4 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e1ef      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004396:	4b3b      	ldr	r3, [pc, #236]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 8004398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x420>
 80043a2:	e018      	b.n	80043d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043a4:	4b37      	ldr	r3, [pc, #220]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 80043a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a8:	4a36      	ldr	r2, [pc, #216]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 80043aa:	f023 0301 	bic.w	r3, r3, #1
 80043ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b0:	f7fe fff8 	bl	80033a4 <HAL_GetTick>
 80043b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043b8:	f7fe fff4 	bl	80033a4 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e1d5      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043ca:	4b2e      	ldr	r3, [pc, #184]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 80043cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1f0      	bne.n	80043b8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d036      	beq.n	8004450 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d019      	beq.n	800441e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043ea:	4b26      	ldr	r3, [pc, #152]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a25      	ldr	r2, [pc, #148]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 80043f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80043f6:	f7fe ffd5 	bl	80033a4 <HAL_GetTick>
 80043fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80043fe:	f7fe ffd1 	bl	80033a4 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e1b2      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004410:	4b1c      	ldr	r3, [pc, #112]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0f0      	beq.n	80043fe <HAL_RCC_OscConfig+0x49a>
 800441c:	e018      	b.n	8004450 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800441e:	4b19      	ldr	r3, [pc, #100]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a18      	ldr	r2, [pc, #96]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 8004424:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004428:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800442a:	f7fe ffbb 	bl	80033a4 <HAL_GetTick>
 800442e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004432:	f7fe ffb7 	bl	80033a4 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e198      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004444:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <HAL_RCC_OscConfig+0x520>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f0      	bne.n	8004432 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 8085 	beq.w	8004568 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800445e:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <HAL_RCC_OscConfig+0x524>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a09      	ldr	r2, [pc, #36]	; (8004488 <HAL_RCC_OscConfig+0x524>)
 8004464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004468:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800446a:	f7fe ff9b 	bl	80033a4 <HAL_GetTick>
 800446e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004470:	e00c      	b.n	800448c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004472:	f7fe ff97 	bl	80033a4 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b64      	cmp	r3, #100	; 0x64
 800447e:	d905      	bls.n	800448c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e178      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
 8004484:	58024400 	.word	0x58024400
 8004488:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800448c:	4b96      	ldr	r3, [pc, #600]	; (80046e8 <HAL_RCC_OscConfig+0x784>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0ec      	beq.n	8004472 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d106      	bne.n	80044ae <HAL_RCC_OscConfig+0x54a>
 80044a0:	4b92      	ldr	r3, [pc, #584]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	4a91      	ldr	r2, [pc, #580]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6713      	str	r3, [r2, #112]	; 0x70
 80044ac:	e02d      	b.n	800450a <HAL_RCC_OscConfig+0x5a6>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCC_OscConfig+0x56c>
 80044b6:	4b8d      	ldr	r3, [pc, #564]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	4a8c      	ldr	r2, [pc, #560]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	6713      	str	r3, [r2, #112]	; 0x70
 80044c2:	4b8a      	ldr	r3, [pc, #552]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 80044c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c6:	4a89      	ldr	r2, [pc, #548]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 80044c8:	f023 0304 	bic.w	r3, r3, #4
 80044cc:	6713      	str	r3, [r2, #112]	; 0x70
 80044ce:	e01c      	b.n	800450a <HAL_RCC_OscConfig+0x5a6>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b05      	cmp	r3, #5
 80044d6:	d10c      	bne.n	80044f2 <HAL_RCC_OscConfig+0x58e>
 80044d8:	4b84      	ldr	r3, [pc, #528]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	4a83      	ldr	r2, [pc, #524]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 80044de:	f043 0304 	orr.w	r3, r3, #4
 80044e2:	6713      	str	r3, [r2, #112]	; 0x70
 80044e4:	4b81      	ldr	r3, [pc, #516]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e8:	4a80      	ldr	r2, [pc, #512]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	6713      	str	r3, [r2, #112]	; 0x70
 80044f0:	e00b      	b.n	800450a <HAL_RCC_OscConfig+0x5a6>
 80044f2:	4b7e      	ldr	r3, [pc, #504]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f6:	4a7d      	ldr	r2, [pc, #500]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	6713      	str	r3, [r2, #112]	; 0x70
 80044fe:	4b7b      	ldr	r3, [pc, #492]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	4a7a      	ldr	r2, [pc, #488]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 8004504:	f023 0304 	bic.w	r3, r3, #4
 8004508:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d015      	beq.n	800453e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004512:	f7fe ff47 	bl	80033a4 <HAL_GetTick>
 8004516:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004518:	e00a      	b.n	8004530 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800451a:	f7fe ff43 	bl	80033a4 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	f241 3288 	movw	r2, #5000	; 0x1388
 8004528:	4293      	cmp	r3, r2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e122      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004530:	4b6e      	ldr	r3, [pc, #440]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 8004532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ee      	beq.n	800451a <HAL_RCC_OscConfig+0x5b6>
 800453c:	e014      	b.n	8004568 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453e:	f7fe ff31 	bl	80033a4 <HAL_GetTick>
 8004542:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004544:	e00a      	b.n	800455c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004546:	f7fe ff2d 	bl	80033a4 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	f241 3288 	movw	r2, #5000	; 0x1388
 8004554:	4293      	cmp	r3, r2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e10c      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800455c:	4b63      	ldr	r3, [pc, #396]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 800455e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1ee      	bne.n	8004546 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8101 	beq.w	8004774 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004572:	4b5e      	ldr	r3, [pc, #376]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800457a:	2b18      	cmp	r3, #24
 800457c:	f000 80bc 	beq.w	80046f8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	2b02      	cmp	r3, #2
 8004586:	f040 8095 	bne.w	80046b4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458a:	4b58      	ldr	r3, [pc, #352]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a57      	ldr	r2, [pc, #348]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 8004590:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004596:	f7fe ff05 	bl	80033a4 <HAL_GetTick>
 800459a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800459e:	f7fe ff01 	bl	80033a4 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e0e2      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045b0:	4b4e      	ldr	r3, [pc, #312]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f0      	bne.n	800459e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045bc:	4b4b      	ldr	r3, [pc, #300]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 80045be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045c0:	4b4b      	ldr	r3, [pc, #300]	; (80046f0 <HAL_RCC_OscConfig+0x78c>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80045cc:	0112      	lsls	r2, r2, #4
 80045ce:	430a      	orrs	r2, r1
 80045d0:	4946      	ldr	r1, [pc, #280]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	628b      	str	r3, [r1, #40]	; 0x28
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	3b01      	subs	r3, #1
 80045dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e4:	3b01      	subs	r3, #1
 80045e6:	025b      	lsls	r3, r3, #9
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	3b01      	subs	r3, #1
 80045f2:	041b      	lsls	r3, r3, #16
 80045f4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fe:	3b01      	subs	r3, #1
 8004600:	061b      	lsls	r3, r3, #24
 8004602:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004606:	4939      	ldr	r1, [pc, #228]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 8004608:	4313      	orrs	r3, r2
 800460a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800460c:	4b37      	ldr	r3, [pc, #220]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	4a36      	ldr	r2, [pc, #216]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 8004612:	f023 0301 	bic.w	r3, r3, #1
 8004616:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004618:	4b34      	ldr	r3, [pc, #208]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 800461a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800461c:	4b35      	ldr	r3, [pc, #212]	; (80046f4 <HAL_RCC_OscConfig+0x790>)
 800461e:	4013      	ands	r3, r2
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004624:	00d2      	lsls	r2, r2, #3
 8004626:	4931      	ldr	r1, [pc, #196]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 8004628:	4313      	orrs	r3, r2
 800462a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800462c:	4b2f      	ldr	r3, [pc, #188]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	f023 020c 	bic.w	r2, r3, #12
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	492c      	ldr	r1, [pc, #176]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 800463a:	4313      	orrs	r3, r2
 800463c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800463e:	4b2b      	ldr	r3, [pc, #172]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	f023 0202 	bic.w	r2, r3, #2
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	4928      	ldr	r1, [pc, #160]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 800464c:	4313      	orrs	r3, r2
 800464e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004650:	4b26      	ldr	r3, [pc, #152]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	4a25      	ldr	r2, [pc, #148]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 8004656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800465a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800465c:	4b23      	ldr	r3, [pc, #140]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	4a22      	ldr	r2, [pc, #136]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 8004662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004666:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004668:	4b20      	ldr	r3, [pc, #128]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	4a1f      	ldr	r2, [pc, #124]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 800466e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004672:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004674:	4b1d      	ldr	r3, [pc, #116]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	4a1c      	ldr	r2, [pc, #112]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004680:	4b1a      	ldr	r3, [pc, #104]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a19      	ldr	r2, [pc, #100]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 8004686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800468a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468c:	f7fe fe8a 	bl	80033a4 <HAL_GetTick>
 8004690:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004694:	f7fe fe86 	bl	80033a4 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e067      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046a6:	4b11      	ldr	r3, [pc, #68]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCC_OscConfig+0x730>
 80046b2:	e05f      	b.n	8004774 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b4:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a0c      	ldr	r2, [pc, #48]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 80046ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fe fe70 	bl	80033a4 <HAL_GetTick>
 80046c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fe fe6c 	bl	80033a4 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e04d      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046da:	4b04      	ldr	r3, [pc, #16]	; (80046ec <HAL_RCC_OscConfig+0x788>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x764>
 80046e6:	e045      	b.n	8004774 <HAL_RCC_OscConfig+0x810>
 80046e8:	58024800 	.word	0x58024800
 80046ec:	58024400 	.word	0x58024400
 80046f0:	fffffc0c 	.word	0xfffffc0c
 80046f4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80046f8:	4b21      	ldr	r3, [pc, #132]	; (8004780 <HAL_RCC_OscConfig+0x81c>)
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80046fe:	4b20      	ldr	r3, [pc, #128]	; (8004780 <HAL_RCC_OscConfig+0x81c>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	2b01      	cmp	r3, #1
 800470a:	d031      	beq.n	8004770 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f003 0203 	and.w	r2, r3, #3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004716:	429a      	cmp	r2, r3
 8004718:	d12a      	bne.n	8004770 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	091b      	lsrs	r3, r3, #4
 800471e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004726:	429a      	cmp	r2, r3
 8004728:	d122      	bne.n	8004770 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004736:	429a      	cmp	r2, r3
 8004738:	d11a      	bne.n	8004770 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	0a5b      	lsrs	r3, r3, #9
 800473e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004746:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004748:	429a      	cmp	r2, r3
 800474a:	d111      	bne.n	8004770 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	0c1b      	lsrs	r3, r3, #16
 8004750:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004758:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800475a:	429a      	cmp	r2, r3
 800475c:	d108      	bne.n	8004770 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	0e1b      	lsrs	r3, r3, #24
 8004762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800476c:	429a      	cmp	r2, r3
 800476e:	d001      	beq.n	8004774 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3730      	adds	r7, #48	; 0x30
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	58024400 	.word	0x58024400

08004784 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e19c      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004798:	4b8a      	ldr	r3, [pc, #552]	; (80049c4 <HAL_RCC_ClockConfig+0x240>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d910      	bls.n	80047c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a6:	4b87      	ldr	r3, [pc, #540]	; (80049c4 <HAL_RCC_ClockConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f023 020f 	bic.w	r2, r3, #15
 80047ae:	4985      	ldr	r1, [pc, #532]	; (80049c4 <HAL_RCC_ClockConfig+0x240>)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b6:	4b83      	ldr	r3, [pc, #524]	; (80049c4 <HAL_RCC_ClockConfig+0x240>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d001      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e184      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d010      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	4b7b      	ldr	r3, [pc, #492]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d908      	bls.n	80047f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047e4:	4b78      	ldr	r3, [pc, #480]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	4975      	ldr	r1, [pc, #468]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d010      	beq.n	8004824 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695a      	ldr	r2, [r3, #20]
 8004806:	4b70      	ldr	r3, [pc, #448]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800480e:	429a      	cmp	r2, r3
 8004810:	d908      	bls.n	8004824 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004812:	4b6d      	ldr	r3, [pc, #436]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	496a      	ldr	r1, [pc, #424]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 8004820:	4313      	orrs	r3, r2
 8004822:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0310 	and.w	r3, r3, #16
 800482c:	2b00      	cmp	r3, #0
 800482e:	d010      	beq.n	8004852 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699a      	ldr	r2, [r3, #24]
 8004834:	4b64      	ldr	r3, [pc, #400]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800483c:	429a      	cmp	r2, r3
 800483e:	d908      	bls.n	8004852 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004840:	4b61      	ldr	r3, [pc, #388]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	495e      	ldr	r1, [pc, #376]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 800484e:	4313      	orrs	r3, r2
 8004850:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	d010      	beq.n	8004880 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69da      	ldr	r2, [r3, #28]
 8004862:	4b59      	ldr	r3, [pc, #356]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800486a:	429a      	cmp	r2, r3
 800486c:	d908      	bls.n	8004880 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800486e:	4b56      	ldr	r3, [pc, #344]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	4953      	ldr	r1, [pc, #332]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 800487c:	4313      	orrs	r3, r2
 800487e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d010      	beq.n	80048ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	4b4d      	ldr	r3, [pc, #308]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	f003 030f 	and.w	r3, r3, #15
 8004898:	429a      	cmp	r2, r3
 800489a:	d908      	bls.n	80048ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800489c:	4b4a      	ldr	r3, [pc, #296]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	f023 020f 	bic.w	r2, r3, #15
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4947      	ldr	r1, [pc, #284]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d055      	beq.n	8004966 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80048ba:	4b43      	ldr	r3, [pc, #268]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	4940      	ldr	r1, [pc, #256]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d107      	bne.n	80048e4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048d4:	4b3c      	ldr	r3, [pc, #240]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d121      	bne.n	8004924 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0f6      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d107      	bne.n	80048fc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048ec:	4b36      	ldr	r3, [pc, #216]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d115      	bne.n	8004924 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e0ea      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d107      	bne.n	8004914 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004904:	4b30      	ldr	r3, [pc, #192]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490c:	2b00      	cmp	r3, #0
 800490e:	d109      	bne.n	8004924 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0de      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004914:	4b2c      	ldr	r3, [pc, #176]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e0d6      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004924:	4b28      	ldr	r3, [pc, #160]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f023 0207 	bic.w	r2, r3, #7
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	4925      	ldr	r1, [pc, #148]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 8004932:	4313      	orrs	r3, r2
 8004934:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004936:	f7fe fd35 	bl	80033a4 <HAL_GetTick>
 800493a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493c:	e00a      	b.n	8004954 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800493e:	f7fe fd31 	bl	80033a4 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	f241 3288 	movw	r2, #5000	; 0x1388
 800494c:	4293      	cmp	r3, r2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e0be      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004954:	4b1c      	ldr	r3, [pc, #112]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	429a      	cmp	r2, r3
 8004964:	d1eb      	bne.n	800493e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d010      	beq.n	8004994 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	4b14      	ldr	r3, [pc, #80]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	429a      	cmp	r2, r3
 8004980:	d208      	bcs.n	8004994 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004982:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	f023 020f 	bic.w	r2, r3, #15
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	490e      	ldr	r1, [pc, #56]	; (80049c8 <HAL_RCC_ClockConfig+0x244>)
 8004990:	4313      	orrs	r3, r2
 8004992:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <HAL_RCC_ClockConfig+0x240>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d214      	bcs.n	80049cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a2:	4b08      	ldr	r3, [pc, #32]	; (80049c4 <HAL_RCC_ClockConfig+0x240>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f023 020f 	bic.w	r2, r3, #15
 80049aa:	4906      	ldr	r1, [pc, #24]	; (80049c4 <HAL_RCC_ClockConfig+0x240>)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b2:	4b04      	ldr	r3, [pc, #16]	; (80049c4 <HAL_RCC_ClockConfig+0x240>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d005      	beq.n	80049cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e086      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x34e>
 80049c4:	52002000 	.word	0x52002000
 80049c8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d010      	beq.n	80049fa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	4b3f      	ldr	r3, [pc, #252]	; (8004adc <HAL_RCC_ClockConfig+0x358>)
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d208      	bcs.n	80049fa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049e8:	4b3c      	ldr	r3, [pc, #240]	; (8004adc <HAL_RCC_ClockConfig+0x358>)
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	4939      	ldr	r1, [pc, #228]	; (8004adc <HAL_RCC_ClockConfig+0x358>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d010      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	4b34      	ldr	r3, [pc, #208]	; (8004adc <HAL_RCC_ClockConfig+0x358>)
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d208      	bcs.n	8004a28 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a16:	4b31      	ldr	r3, [pc, #196]	; (8004adc <HAL_RCC_ClockConfig+0x358>)
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	492e      	ldr	r1, [pc, #184]	; (8004adc <HAL_RCC_ClockConfig+0x358>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d010      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699a      	ldr	r2, [r3, #24]
 8004a38:	4b28      	ldr	r3, [pc, #160]	; (8004adc <HAL_RCC_ClockConfig+0x358>)
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d208      	bcs.n	8004a56 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a44:	4b25      	ldr	r3, [pc, #148]	; (8004adc <HAL_RCC_ClockConfig+0x358>)
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	4922      	ldr	r1, [pc, #136]	; (8004adc <HAL_RCC_ClockConfig+0x358>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0320 	and.w	r3, r3, #32
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d010      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69da      	ldr	r2, [r3, #28]
 8004a66:	4b1d      	ldr	r3, [pc, #116]	; (8004adc <HAL_RCC_ClockConfig+0x358>)
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d208      	bcs.n	8004a84 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004a72:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <HAL_RCC_ClockConfig+0x358>)
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	4917      	ldr	r1, [pc, #92]	; (8004adc <HAL_RCC_ClockConfig+0x358>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a84:	f000 f834 	bl	8004af0 <HAL_RCC_GetSysClockFreq>
 8004a88:	4601      	mov	r1, r0
 8004a8a:	4b14      	ldr	r3, [pc, #80]	; (8004adc <HAL_RCC_ClockConfig+0x358>)
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	0a1b      	lsrs	r3, r3, #8
 8004a90:	f003 030f 	and.w	r3, r3, #15
 8004a94:	4a12      	ldr	r2, [pc, #72]	; (8004ae0 <HAL_RCC_ClockConfig+0x35c>)
 8004a96:	5cd3      	ldrb	r3, [r2, r3]
 8004a98:	f003 031f 	and.w	r3, r3, #31
 8004a9c:	fa21 f303 	lsr.w	r3, r1, r3
 8004aa0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004aa2:	4b0e      	ldr	r3, [pc, #56]	; (8004adc <HAL_RCC_ClockConfig+0x358>)
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	4a0d      	ldr	r2, [pc, #52]	; (8004ae0 <HAL_RCC_ClockConfig+0x35c>)
 8004aac:	5cd3      	ldrb	r3, [r2, r3]
 8004aae:	f003 031f 	and.w	r3, r3, #31
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab8:	4a0a      	ldr	r2, [pc, #40]	; (8004ae4 <HAL_RCC_ClockConfig+0x360>)
 8004aba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004abc:	4a0a      	ldr	r2, [pc, #40]	; (8004ae8 <HAL_RCC_ClockConfig+0x364>)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004ac2:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <HAL_RCC_ClockConfig+0x368>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fe fc22 	bl	8003310 <HAL_InitTick>
 8004acc:	4603      	mov	r3, r0
 8004ace:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	58024400 	.word	0x58024400
 8004ae0:	080097cc 	.word	0x080097cc
 8004ae4:	24000004 	.word	0x24000004
 8004ae8:	24000000 	.word	0x24000000
 8004aec:	24000008 	.word	0x24000008

08004af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b089      	sub	sp, #36	; 0x24
 8004af4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004af6:	4baf      	ldr	r3, [pc, #700]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004afe:	2b18      	cmp	r3, #24
 8004b00:	f200 814e 	bhi.w	8004da0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004b04:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004b71 	.word	0x08004b71
 8004b10:	08004da1 	.word	0x08004da1
 8004b14:	08004da1 	.word	0x08004da1
 8004b18:	08004da1 	.word	0x08004da1
 8004b1c:	08004da1 	.word	0x08004da1
 8004b20:	08004da1 	.word	0x08004da1
 8004b24:	08004da1 	.word	0x08004da1
 8004b28:	08004da1 	.word	0x08004da1
 8004b2c:	08004b97 	.word	0x08004b97
 8004b30:	08004da1 	.word	0x08004da1
 8004b34:	08004da1 	.word	0x08004da1
 8004b38:	08004da1 	.word	0x08004da1
 8004b3c:	08004da1 	.word	0x08004da1
 8004b40:	08004da1 	.word	0x08004da1
 8004b44:	08004da1 	.word	0x08004da1
 8004b48:	08004da1 	.word	0x08004da1
 8004b4c:	08004b9d 	.word	0x08004b9d
 8004b50:	08004da1 	.word	0x08004da1
 8004b54:	08004da1 	.word	0x08004da1
 8004b58:	08004da1 	.word	0x08004da1
 8004b5c:	08004da1 	.word	0x08004da1
 8004b60:	08004da1 	.word	0x08004da1
 8004b64:	08004da1 	.word	0x08004da1
 8004b68:	08004da1 	.word	0x08004da1
 8004b6c:	08004ba3 	.word	0x08004ba3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b70:	4b90      	ldr	r3, [pc, #576]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0320 	and.w	r3, r3, #32
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d009      	beq.n	8004b90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b7c:	4b8d      	ldr	r3, [pc, #564]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	08db      	lsrs	r3, r3, #3
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	4a8c      	ldr	r2, [pc, #560]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004b88:	fa22 f303 	lsr.w	r3, r2, r3
 8004b8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004b8e:	e10a      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b90:	4b89      	ldr	r3, [pc, #548]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004b92:	61bb      	str	r3, [r7, #24]
    break;
 8004b94:	e107      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004b96:	4b89      	ldr	r3, [pc, #548]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004b98:	61bb      	str	r3, [r7, #24]
    break;
 8004b9a:	e104      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004b9c:	4b88      	ldr	r3, [pc, #544]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004b9e:	61bb      	str	r3, [r7, #24]
    break;
 8004ba0:	e101      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ba2:	4b84      	ldr	r3, [pc, #528]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004bac:	4b81      	ldr	r3, [pc, #516]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb0:	091b      	lsrs	r3, r3, #4
 8004bb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bb6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004bb8:	4b7e      	ldr	r3, [pc, #504]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004bc2:	4b7c      	ldr	r3, [pc, #496]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc6:	08db      	lsrs	r3, r3, #3
 8004bc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	fb02 f303 	mul.w	r3, r2, r3
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bda:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 80da 	beq.w	8004d9a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d05a      	beq.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x1b2>
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d302      	bcc.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x106>
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d078      	beq.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x1f6>
 8004bf4:	e099      	b.n	8004d2a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bf6:	4b6f      	ldr	r3, [pc, #444]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d02d      	beq.n	8004c5e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c02:	4b6c      	ldr	r3, [pc, #432]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	08db      	lsrs	r3, r3, #3
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	4a6a      	ldr	r2, [pc, #424]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c12:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	ee07 3a90 	vmov	s15, r3
 8004c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c2c:	4b61      	ldr	r3, [pc, #388]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c34:	ee07 3a90 	vmov	s15, r3
 8004c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c3c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c40:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004dc4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004c44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c58:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004c5c:	e087      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	ee07 3a90 	vmov	s15, r3
 8004c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c68:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004dc8 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004c6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c70:	4b50      	ldr	r3, [pc, #320]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c78:	ee07 3a90 	vmov	s15, r3
 8004c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c80:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c84:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004dc4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004c88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ca0:	e065      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	ee07 3a90 	vmov	s15, r3
 8004ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cac:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004dcc <HAL_RCC_GetSysClockFreq+0x2dc>
 8004cb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cb4:	4b3f      	ldr	r3, [pc, #252]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cbc:	ee07 3a90 	vmov	s15, r3
 8004cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cc8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004dc4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004ccc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ce4:	e043      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	ee07 3a90 	vmov	s15, r3
 8004cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004dd0 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004cf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cf8:	4b2e      	ldr	r3, [pc, #184]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d00:	ee07 3a90 	vmov	s15, r3
 8004d04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d08:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d0c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004dc4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004d10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d28:	e021      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	ee07 3a90 	vmov	s15, r3
 8004d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d34:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004dcc <HAL_RCC_GetSysClockFreq+0x2dc>
 8004d38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d3c:	4b1d      	ldr	r3, [pc, #116]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d44:	ee07 3a90 	vmov	s15, r3
 8004d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d50:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004dc4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004d54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d6c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004d6e:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	0a5b      	lsrs	r3, r3, #9
 8004d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d78:	3301      	adds	r3, #1
 8004d7a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d86:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d92:	ee17 3a90 	vmov	r3, s15
 8004d96:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004d98:	e005      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61bb      	str	r3, [r7, #24]
    break;
 8004d9e:	e002      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004da0:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004da2:	61bb      	str	r3, [r7, #24]
    break;
 8004da4:	bf00      	nop
  }

  return sysclockfreq;
 8004da6:	69bb      	ldr	r3, [r7, #24]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3724      	adds	r7, #36	; 0x24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	58024400 	.word	0x58024400
 8004db8:	03d09000 	.word	0x03d09000
 8004dbc:	003d0900 	.word	0x003d0900
 8004dc0:	02625a00 	.word	0x02625a00
 8004dc4:	46000000 	.word	0x46000000
 8004dc8:	4c742400 	.word	0x4c742400
 8004dcc:	4a742400 	.word	0x4a742400
 8004dd0:	4c189680 	.word	0x4c189680

08004dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004dda:	f7ff fe89 	bl	8004af0 <HAL_RCC_GetSysClockFreq>
 8004dde:	4601      	mov	r1, r0
 8004de0:	4b10      	ldr	r3, [pc, #64]	; (8004e24 <HAL_RCC_GetHCLKFreq+0x50>)
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	0a1b      	lsrs	r3, r3, #8
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	4a0f      	ldr	r2, [pc, #60]	; (8004e28 <HAL_RCC_GetHCLKFreq+0x54>)
 8004dec:	5cd3      	ldrb	r3, [r2, r3]
 8004dee:	f003 031f 	and.w	r3, r3, #31
 8004df2:	fa21 f303 	lsr.w	r3, r1, r3
 8004df6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004df8:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <HAL_RCC_GetHCLKFreq+0x50>)
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	4a09      	ldr	r2, [pc, #36]	; (8004e28 <HAL_RCC_GetHCLKFreq+0x54>)
 8004e02:	5cd3      	ldrb	r3, [r2, r3]
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0e:	4a07      	ldr	r2, [pc, #28]	; (8004e2c <HAL_RCC_GetHCLKFreq+0x58>)
 8004e10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e12:	4a07      	ldr	r2, [pc, #28]	; (8004e30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004e18:	4b04      	ldr	r3, [pc, #16]	; (8004e2c <HAL_RCC_GetHCLKFreq+0x58>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	58024400 	.word	0x58024400
 8004e28:	080097cc 	.word	0x080097cc
 8004e2c:	24000004 	.word	0x24000004
 8004e30:	24000000 	.word	0x24000000

08004e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004e38:	f7ff ffcc 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004e3c:	4601      	mov	r1, r0
 8004e3e:	4b06      	ldr	r3, [pc, #24]	; (8004e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	091b      	lsrs	r3, r3, #4
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	4a04      	ldr	r2, [pc, #16]	; (8004e5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e4a:	5cd3      	ldrb	r3, [r2, r3]
 8004e4c:	f003 031f 	and.w	r3, r3, #31
 8004e50:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	58024400 	.word	0x58024400
 8004e5c:	080097cc 	.word	0x080097cc

08004e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004e64:	f7ff ffb6 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004e68:	4601      	mov	r1, r0
 8004e6a:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	0a1b      	lsrs	r3, r3, #8
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	4a04      	ldr	r2, [pc, #16]	; (8004e88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e76:	5cd3      	ldrb	r3, [r2, r3]
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	58024400 	.word	0x58024400
 8004e88:	080097cc 	.word	0x080097cc

08004e8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e94:	2300      	movs	r3, #0
 8004e96:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e98:	2300      	movs	r3, #0
 8004e9a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d03d      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eb0:	d013      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eb6:	d802      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004ebc:	e01f      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004ebe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ec2:	d013      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004ec4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ec8:	d01c      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004eca:	e018      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ecc:	4baf      	ldr	r3, [pc, #700]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	4aae      	ldr	r2, [pc, #696]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ed6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004ed8:	e015      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	3304      	adds	r3, #4
 8004ede:	2102      	movs	r1, #2
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f001 f96f 	bl	80061c4 <RCCEx_PLL2_Config>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004eea:	e00c      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3324      	adds	r3, #36	; 0x24
 8004ef0:	2102      	movs	r1, #2
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f001 fa18 	bl	8006328 <RCCEx_PLL3_Config>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004efc:	e003      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	75fb      	strb	r3, [r7, #23]
      break;
 8004f02:	e000      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004f04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f06:	7dfb      	ldrb	r3, [r7, #23]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d109      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004f0c:	4b9f      	ldr	r3, [pc, #636]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f18:	499c      	ldr	r1, [pc, #624]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	650b      	str	r3, [r1, #80]	; 0x50
 8004f1e:	e001      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f20:	7dfb      	ldrb	r3, [r7, #23]
 8004f22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d03d      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d826      	bhi.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004f38:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004f55 	.word	0x08004f55
 8004f44:	08004f63 	.word	0x08004f63
 8004f48:	08004f75 	.word	0x08004f75
 8004f4c:	08004f8d 	.word	0x08004f8d
 8004f50:	08004f8d 	.word	0x08004f8d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f54:	4b8d      	ldr	r3, [pc, #564]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	4a8c      	ldr	r2, [pc, #560]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f60:	e015      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3304      	adds	r3, #4
 8004f66:	2100      	movs	r1, #0
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f001 f92b 	bl	80061c4 <RCCEx_PLL2_Config>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f72:	e00c      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3324      	adds	r3, #36	; 0x24
 8004f78:	2100      	movs	r1, #0
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f001 f9d4 	bl	8006328 <RCCEx_PLL3_Config>
 8004f80:	4603      	mov	r3, r0
 8004f82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f84:	e003      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	75fb      	strb	r3, [r7, #23]
      break;
 8004f8a:	e000      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004f8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f8e:	7dfb      	ldrb	r3, [r7, #23]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d109      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f94:	4b7d      	ldr	r3, [pc, #500]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f98:	f023 0207 	bic.w	r2, r3, #7
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa0:	497a      	ldr	r1, [pc, #488]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	650b      	str	r3, [r1, #80]	; 0x50
 8004fa6:	e001      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa8:	7dfb      	ldrb	r3, [r7, #23]
 8004faa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d03e      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbc:	2b80      	cmp	r3, #128	; 0x80
 8004fbe:	d01c      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004fc0:	2b80      	cmp	r3, #128	; 0x80
 8004fc2:	d804      	bhi.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d008      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004fc8:	2b40      	cmp	r3, #64	; 0x40
 8004fca:	d00d      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004fcc:	e01e      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004fce:	2bc0      	cmp	r3, #192	; 0xc0
 8004fd0:	d01f      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fd6:	d01e      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004fd8:	e018      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fda:	4b6c      	ldr	r3, [pc, #432]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fde:	4a6b      	ldr	r2, [pc, #428]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fe4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004fe6:	e017      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3304      	adds	r3, #4
 8004fec:	2100      	movs	r1, #0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f001 f8e8 	bl	80061c4 <RCCEx_PLL2_Config>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004ff8:	e00e      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3324      	adds	r3, #36	; 0x24
 8004ffe:	2100      	movs	r1, #0
 8005000:	4618      	mov	r0, r3
 8005002:	f001 f991 	bl	8006328 <RCCEx_PLL3_Config>
 8005006:	4603      	mov	r3, r0
 8005008:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800500a:	e005      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	75fb      	strb	r3, [r7, #23]
      break;
 8005010:	e002      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005012:	bf00      	nop
 8005014:	e000      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005018:	7dfb      	ldrb	r3, [r7, #23]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d109      	bne.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800501e:	4b5b      	ldr	r3, [pc, #364]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005022:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502a:	4958      	ldr	r1, [pc, #352]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800502c:	4313      	orrs	r3, r2
 800502e:	650b      	str	r3, [r1, #80]	; 0x50
 8005030:	e001      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005032:	7dfb      	ldrb	r3, [r7, #23]
 8005034:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800503e:	2b00      	cmp	r3, #0
 8005040:	d044      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005048:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800504c:	d01f      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800504e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005052:	d805      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005058:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800505c:	d00e      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800505e:	e01f      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005060:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005064:	d01f      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005066:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800506a:	d01e      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800506c:	e018      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800506e:	4b47      	ldr	r3, [pc, #284]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005072:	4a46      	ldr	r2, [pc, #280]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005078:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800507a:	e017      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3304      	adds	r3, #4
 8005080:	2100      	movs	r1, #0
 8005082:	4618      	mov	r0, r3
 8005084:	f001 f89e 	bl	80061c4 <RCCEx_PLL2_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800508c:	e00e      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	3324      	adds	r3, #36	; 0x24
 8005092:	2100      	movs	r1, #0
 8005094:	4618      	mov	r0, r3
 8005096:	f001 f947 	bl	8006328 <RCCEx_PLL3_Config>
 800509a:	4603      	mov	r3, r0
 800509c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800509e:	e005      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	75fb      	strb	r3, [r7, #23]
      break;
 80050a4:	e002      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80050a6:	bf00      	nop
 80050a8:	e000      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80050aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050ac:	7dfb      	ldrb	r3, [r7, #23]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10a      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80050b2:	4b36      	ldr	r3, [pc, #216]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050c0:	4932      	ldr	r1, [pc, #200]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	658b      	str	r3, [r1, #88]	; 0x58
 80050c6:	e001      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
 80050ca:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d044      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80050de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050e2:	d01f      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80050e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050e8:	d805      	bhi.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80050ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050f2:	d00e      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80050f4:	e01f      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80050f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050fa:	d01f      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80050fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005100:	d01e      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005102:	e018      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005104:	4b21      	ldr	r3, [pc, #132]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	4a20      	ldr	r2, [pc, #128]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800510a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800510e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005110:	e017      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3304      	adds	r3, #4
 8005116:	2100      	movs	r1, #0
 8005118:	4618      	mov	r0, r3
 800511a:	f001 f853 	bl	80061c4 <RCCEx_PLL2_Config>
 800511e:	4603      	mov	r3, r0
 8005120:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005122:	e00e      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3324      	adds	r3, #36	; 0x24
 8005128:	2100      	movs	r1, #0
 800512a:	4618      	mov	r0, r3
 800512c:	f001 f8fc 	bl	8006328 <RCCEx_PLL3_Config>
 8005130:	4603      	mov	r3, r0
 8005132:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005134:	e005      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	75fb      	strb	r3, [r7, #23]
      break;
 800513a:	e002      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800513c:	bf00      	nop
 800513e:	e000      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005140:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005142:	7dfb      	ldrb	r3, [r7, #23]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005148:	4b10      	ldr	r3, [pc, #64]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800514a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005156:	490d      	ldr	r1, [pc, #52]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005158:	4313      	orrs	r3, r2
 800515a:	658b      	str	r3, [r1, #88]	; 0x58
 800515c:	e001      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515e:	7dfb      	ldrb	r3, [r7, #23]
 8005160:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d035      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005172:	2b10      	cmp	r3, #16
 8005174:	d00c      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005176:	2b10      	cmp	r3, #16
 8005178:	d802      	bhi.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800517a:	2b00      	cmp	r3, #0
 800517c:	d01b      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800517e:	e017      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005180:	2b20      	cmp	r3, #32
 8005182:	d00c      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005184:	2b30      	cmp	r3, #48	; 0x30
 8005186:	d018      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005188:	e012      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800518a:	bf00      	nop
 800518c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005190:	4baf      	ldr	r3, [pc, #700]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005194:	4aae      	ldr	r2, [pc, #696]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800519a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800519c:	e00e      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3304      	adds	r3, #4
 80051a2:	2102      	movs	r1, #2
 80051a4:	4618      	mov	r0, r3
 80051a6:	f001 f80d 	bl	80061c4 <RCCEx_PLL2_Config>
 80051aa:	4603      	mov	r3, r0
 80051ac:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80051ae:	e005      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	75fb      	strb	r3, [r7, #23]
      break;
 80051b4:	e002      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80051b6:	bf00      	nop
 80051b8:	e000      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80051ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d109      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80051c2:	4ba3      	ldr	r3, [pc, #652]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ce:	49a0      	ldr	r1, [pc, #640]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80051d4:	e001      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d6:	7dfb      	ldrb	r3, [r7, #23]
 80051d8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d042      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ee:	d01f      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80051f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f4:	d805      	bhi.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80051fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fe:	d00e      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005200:	e01f      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005202:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005206:	d01f      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800520c:	d01e      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800520e:	e018      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005210:	4b8f      	ldr	r3, [pc, #572]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	4a8e      	ldr	r2, [pc, #568]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800521a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800521c:	e017      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	3304      	adds	r3, #4
 8005222:	2100      	movs	r1, #0
 8005224:	4618      	mov	r0, r3
 8005226:	f000 ffcd 	bl	80061c4 <RCCEx_PLL2_Config>
 800522a:	4603      	mov	r3, r0
 800522c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800522e:	e00e      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3324      	adds	r3, #36	; 0x24
 8005234:	2100      	movs	r1, #0
 8005236:	4618      	mov	r0, r3
 8005238:	f001 f876 	bl	8006328 <RCCEx_PLL3_Config>
 800523c:	4603      	mov	r3, r0
 800523e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005240:	e005      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	75fb      	strb	r3, [r7, #23]
      break;
 8005246:	e002      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005248:	bf00      	nop
 800524a:	e000      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800524c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800524e:	7dfb      	ldrb	r3, [r7, #23]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d109      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005254:	4b7e      	ldr	r3, [pc, #504]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005258:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005260:	497b      	ldr	r1, [pc, #492]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005262:	4313      	orrs	r3, r2
 8005264:	650b      	str	r3, [r1, #80]	; 0x50
 8005266:	e001      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005268:	7dfb      	ldrb	r3, [r7, #23]
 800526a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d042      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800527c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005280:	d01b      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005282:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005286:	d805      	bhi.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005288:	2b00      	cmp	r3, #0
 800528a:	d022      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800528c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005290:	d00a      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005292:	e01b      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005294:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005298:	d01d      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800529a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800529e:	d01c      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80052a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052a4:	d01b      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x452>
 80052a6:	e011      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3304      	adds	r3, #4
 80052ac:	2101      	movs	r1, #1
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 ff88 	bl	80061c4 <RCCEx_PLL2_Config>
 80052b4:	4603      	mov	r3, r0
 80052b6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80052b8:	e012      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3324      	adds	r3, #36	; 0x24
 80052be:	2101      	movs	r1, #1
 80052c0:	4618      	mov	r0, r3
 80052c2:	f001 f831 	bl	8006328 <RCCEx_PLL3_Config>
 80052c6:	4603      	mov	r3, r0
 80052c8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80052ca:	e009      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	75fb      	strb	r3, [r7, #23]
      break;
 80052d0:	e006      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80052d2:	bf00      	nop
 80052d4:	e004      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80052d6:	bf00      	nop
 80052d8:	e002      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80052da:	bf00      	nop
 80052dc:	e000      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80052de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052e0:	7dfb      	ldrb	r3, [r7, #23]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d109      	bne.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80052e6:	4b5a      	ldr	r3, [pc, #360]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f2:	4957      	ldr	r1, [pc, #348]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	650b      	str	r3, [r1, #80]	; 0x50
 80052f8:	e001      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fa:	7dfb      	ldrb	r3, [r7, #23]
 80052fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d044      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005314:	d01b      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800531a:	d805      	bhi.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800531c:	2b00      	cmp	r3, #0
 800531e:	d022      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005320:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005324:	d00a      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005326:	e01b      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800532c:	d01d      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800532e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005332:	d01c      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005334:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005338:	d01b      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800533a:	e011      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3304      	adds	r3, #4
 8005340:	2101      	movs	r1, #1
 8005342:	4618      	mov	r0, r3
 8005344:	f000 ff3e 	bl	80061c4 <RCCEx_PLL2_Config>
 8005348:	4603      	mov	r3, r0
 800534a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800534c:	e012      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3324      	adds	r3, #36	; 0x24
 8005352:	2101      	movs	r1, #1
 8005354:	4618      	mov	r0, r3
 8005356:	f000 ffe7 	bl	8006328 <RCCEx_PLL3_Config>
 800535a:	4603      	mov	r3, r0
 800535c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800535e:	e009      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	75fb      	strb	r3, [r7, #23]
      break;
 8005364:	e006      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005366:	bf00      	nop
 8005368:	e004      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800536a:	bf00      	nop
 800536c:	e002      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800536e:	bf00      	nop
 8005370:	e000      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005374:	7dfb      	ldrb	r3, [r7, #23]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10a      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800537a:	4b35      	ldr	r3, [pc, #212]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800537c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005388:	4931      	ldr	r1, [pc, #196]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800538a:	4313      	orrs	r3, r2
 800538c:	658b      	str	r3, [r1, #88]	; 0x58
 800538e:	e001      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005390:	7dfb      	ldrb	r3, [r7, #23]
 8005392:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d02d      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053a8:	d005      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80053aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ae:	d009      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d013      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80053b4:	e00f      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053b6:	4b26      	ldr	r3, [pc, #152]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	4a25      	ldr	r2, [pc, #148]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80053c2:	e00c      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	3304      	adds	r3, #4
 80053c8:	2101      	movs	r1, #1
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fefa 	bl	80061c4 <RCCEx_PLL2_Config>
 80053d0:	4603      	mov	r3, r0
 80053d2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80053d4:	e003      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	75fb      	strb	r3, [r7, #23]
      break;
 80053da:	e000      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80053dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053de:	7dfb      	ldrb	r3, [r7, #23]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d109      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80053e4:	4b1a      	ldr	r3, [pc, #104]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f0:	4917      	ldr	r1, [pc, #92]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	650b      	str	r3, [r1, #80]	; 0x50
 80053f6:	e001      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f8:	7dfb      	ldrb	r3, [r7, #23]
 80053fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d035      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540c:	2b03      	cmp	r3, #3
 800540e:	d81b      	bhi.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005410:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005416:	bf00      	nop
 8005418:	08005455 	.word	0x08005455
 800541c:	08005429 	.word	0x08005429
 8005420:	08005437 	.word	0x08005437
 8005424:	08005455 	.word	0x08005455
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005428:	4b09      	ldr	r3, [pc, #36]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	4a08      	ldr	r2, [pc, #32]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800542e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005432:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005434:	e00f      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3304      	adds	r3, #4
 800543a:	2102      	movs	r1, #2
 800543c:	4618      	mov	r0, r3
 800543e:	f000 fec1 	bl	80061c4 <RCCEx_PLL2_Config>
 8005442:	4603      	mov	r3, r0
 8005444:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005446:	e006      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	75fb      	strb	r3, [r7, #23]
      break;
 800544c:	e003      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800544e:	bf00      	nop
 8005450:	58024400 	.word	0x58024400
      break;
 8005454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005456:	7dfb      	ldrb	r3, [r7, #23]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d109      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800545c:	4bba      	ldr	r3, [pc, #744]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800545e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005460:	f023 0203 	bic.w	r2, r3, #3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005468:	49b7      	ldr	r1, [pc, #732]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800546a:	4313      	orrs	r3, r2
 800546c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800546e:	e001      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005470:	7dfb      	ldrb	r3, [r7, #23]
 8005472:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 8086 	beq.w	800558e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005482:	4bb2      	ldr	r3, [pc, #712]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4ab1      	ldr	r2, [pc, #708]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800548c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800548e:	f7fd ff89 	bl	80033a4 <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005494:	e009      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005496:	f7fd ff85 	bl	80033a4 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b64      	cmp	r3, #100	; 0x64
 80054a2:	d902      	bls.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	75fb      	strb	r3, [r7, #23]
        break;
 80054a8:	e005      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054aa:	4ba8      	ldr	r3, [pc, #672]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0ef      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d166      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80054bc:	4ba2      	ldr	r3, [pc, #648]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054c6:	4053      	eors	r3, r2
 80054c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d013      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054d0:	4b9d      	ldr	r3, [pc, #628]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054da:	4b9b      	ldr	r3, [pc, #620]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054de:	4a9a      	ldr	r2, [pc, #616]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054e6:	4b98      	ldr	r3, [pc, #608]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ea:	4a97      	ldr	r2, [pc, #604]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054f0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80054f2:	4a95      	ldr	r2, [pc, #596]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005502:	d115      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005504:	f7fd ff4e 	bl	80033a4 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800550a:	e00b      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800550c:	f7fd ff4a 	bl	80033a4 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	f241 3288 	movw	r2, #5000	; 0x1388
 800551a:	4293      	cmp	r3, r2
 800551c:	d902      	bls.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	75fb      	strb	r3, [r7, #23]
            break;
 8005522:	e005      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005524:	4b88      	ldr	r3, [pc, #544]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0ed      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005530:	7dfb      	ldrb	r3, [r7, #23]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d126      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800553c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005540:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005544:	d10d      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005546:	4b80      	ldr	r3, [pc, #512]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005554:	0919      	lsrs	r1, r3, #4
 8005556:	4b7e      	ldr	r3, [pc, #504]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005558:	400b      	ands	r3, r1
 800555a:	497b      	ldr	r1, [pc, #492]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800555c:	4313      	orrs	r3, r2
 800555e:	610b      	str	r3, [r1, #16]
 8005560:	e005      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005562:	4b79      	ldr	r3, [pc, #484]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	4a78      	ldr	r2, [pc, #480]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005568:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800556c:	6113      	str	r3, [r2, #16]
 800556e:	4b76      	ldr	r3, [pc, #472]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005570:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800557c:	4972      	ldr	r1, [pc, #456]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800557e:	4313      	orrs	r3, r2
 8005580:	670b      	str	r3, [r1, #112]	; 0x70
 8005582:	e004      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005584:	7dfb      	ldrb	r3, [r7, #23]
 8005586:	75bb      	strb	r3, [r7, #22]
 8005588:	e001      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558a:	7dfb      	ldrb	r3, [r7, #23]
 800558c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d07d      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800559e:	2b28      	cmp	r3, #40	; 0x28
 80055a0:	d866      	bhi.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80055a2:	a201      	add	r2, pc, #4	; (adr r2, 80055a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80055a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a8:	08005677 	.word	0x08005677
 80055ac:	08005671 	.word	0x08005671
 80055b0:	08005671 	.word	0x08005671
 80055b4:	08005671 	.word	0x08005671
 80055b8:	08005671 	.word	0x08005671
 80055bc:	08005671 	.word	0x08005671
 80055c0:	08005671 	.word	0x08005671
 80055c4:	08005671 	.word	0x08005671
 80055c8:	0800564d 	.word	0x0800564d
 80055cc:	08005671 	.word	0x08005671
 80055d0:	08005671 	.word	0x08005671
 80055d4:	08005671 	.word	0x08005671
 80055d8:	08005671 	.word	0x08005671
 80055dc:	08005671 	.word	0x08005671
 80055e0:	08005671 	.word	0x08005671
 80055e4:	08005671 	.word	0x08005671
 80055e8:	0800565f 	.word	0x0800565f
 80055ec:	08005671 	.word	0x08005671
 80055f0:	08005671 	.word	0x08005671
 80055f4:	08005671 	.word	0x08005671
 80055f8:	08005671 	.word	0x08005671
 80055fc:	08005671 	.word	0x08005671
 8005600:	08005671 	.word	0x08005671
 8005604:	08005671 	.word	0x08005671
 8005608:	08005677 	.word	0x08005677
 800560c:	08005671 	.word	0x08005671
 8005610:	08005671 	.word	0x08005671
 8005614:	08005671 	.word	0x08005671
 8005618:	08005671 	.word	0x08005671
 800561c:	08005671 	.word	0x08005671
 8005620:	08005671 	.word	0x08005671
 8005624:	08005671 	.word	0x08005671
 8005628:	08005677 	.word	0x08005677
 800562c:	08005671 	.word	0x08005671
 8005630:	08005671 	.word	0x08005671
 8005634:	08005671 	.word	0x08005671
 8005638:	08005671 	.word	0x08005671
 800563c:	08005671 	.word	0x08005671
 8005640:	08005671 	.word	0x08005671
 8005644:	08005671 	.word	0x08005671
 8005648:	08005677 	.word	0x08005677
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3304      	adds	r3, #4
 8005650:	2101      	movs	r1, #1
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fdb6 	bl	80061c4 <RCCEx_PLL2_Config>
 8005658:	4603      	mov	r3, r0
 800565a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800565c:	e00c      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3324      	adds	r3, #36	; 0x24
 8005662:	2101      	movs	r1, #1
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fe5f 	bl	8006328 <RCCEx_PLL3_Config>
 800566a:	4603      	mov	r3, r0
 800566c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800566e:	e003      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	75fb      	strb	r3, [r7, #23]
      break;
 8005674:	e000      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005676:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005678:	7dfb      	ldrb	r3, [r7, #23]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d109      	bne.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800567e:	4b32      	ldr	r3, [pc, #200]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005682:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800568a:	492f      	ldr	r1, [pc, #188]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800568c:	4313      	orrs	r3, r2
 800568e:	654b      	str	r3, [r1, #84]	; 0x54
 8005690:	e001      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005692:	7dfb      	ldrb	r3, [r7, #23]
 8005694:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d037      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a6:	2b05      	cmp	r3, #5
 80056a8:	d820      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x860>
 80056aa:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80056ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b0:	080056f3 	.word	0x080056f3
 80056b4:	080056c9 	.word	0x080056c9
 80056b8:	080056db 	.word	0x080056db
 80056bc:	080056f3 	.word	0x080056f3
 80056c0:	080056f3 	.word	0x080056f3
 80056c4:	080056f3 	.word	0x080056f3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3304      	adds	r3, #4
 80056cc:	2101      	movs	r1, #1
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fd78 	bl	80061c4 <RCCEx_PLL2_Config>
 80056d4:	4603      	mov	r3, r0
 80056d6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80056d8:	e00c      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3324      	adds	r3, #36	; 0x24
 80056de:	2101      	movs	r1, #1
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fe21 	bl	8006328 <RCCEx_PLL3_Config>
 80056e6:	4603      	mov	r3, r0
 80056e8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80056ea:	e003      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	75fb      	strb	r3, [r7, #23]
      break;
 80056f0:	e000      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80056f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056f4:	7dfb      	ldrb	r3, [r7, #23]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d109      	bne.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80056fa:	4b13      	ldr	r3, [pc, #76]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fe:	f023 0207 	bic.w	r2, r3, #7
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005706:	4910      	ldr	r1, [pc, #64]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005708:	4313      	orrs	r3, r2
 800570a:	654b      	str	r3, [r1, #84]	; 0x54
 800570c:	e001      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570e:	7dfb      	ldrb	r3, [r7, #23]
 8005710:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	2b00      	cmp	r3, #0
 800571c:	d040      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005724:	2b05      	cmp	r3, #5
 8005726:	d827      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005728:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800572a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572e:	bf00      	nop
 8005730:	0800577f 	.word	0x0800577f
 8005734:	08005755 	.word	0x08005755
 8005738:	08005767 	.word	0x08005767
 800573c:	0800577f 	.word	0x0800577f
 8005740:	0800577f 	.word	0x0800577f
 8005744:	0800577f 	.word	0x0800577f
 8005748:	58024400 	.word	0x58024400
 800574c:	58024800 	.word	0x58024800
 8005750:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3304      	adds	r3, #4
 8005758:	2101      	movs	r1, #1
 800575a:	4618      	mov	r0, r3
 800575c:	f000 fd32 	bl	80061c4 <RCCEx_PLL2_Config>
 8005760:	4603      	mov	r3, r0
 8005762:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005764:	e00c      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	3324      	adds	r3, #36	; 0x24
 800576a:	2101      	movs	r1, #1
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fddb 	bl	8006328 <RCCEx_PLL3_Config>
 8005772:	4603      	mov	r3, r0
 8005774:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005776:	e003      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	75fb      	strb	r3, [r7, #23]
      break;
 800577c:	e000      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800577e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005780:	7dfb      	ldrb	r3, [r7, #23]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10a      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005786:	4bb2      	ldr	r3, [pc, #712]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800578a:	f023 0207 	bic.w	r2, r3, #7
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005794:	49ae      	ldr	r1, [pc, #696]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005796:	4313      	orrs	r3, r2
 8005798:	658b      	str	r3, [r1, #88]	; 0x58
 800579a:	e001      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579c:	7dfb      	ldrb	r3, [r7, #23]
 800579e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d044      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057b6:	d01b      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80057b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057bc:	d805      	bhi.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d022      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80057c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057c6:	d00a      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x952>
 80057c8:	e01b      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80057ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ce:	d01d      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x980>
 80057d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057d4:	d01c      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80057d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057da:	d01b      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80057dc:	e011      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3304      	adds	r3, #4
 80057e2:	2100      	movs	r1, #0
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 fced 	bl	80061c4 <RCCEx_PLL2_Config>
 80057ea:	4603      	mov	r3, r0
 80057ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80057ee:	e012      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3324      	adds	r3, #36	; 0x24
 80057f4:	2102      	movs	r1, #2
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fd96 	bl	8006328 <RCCEx_PLL3_Config>
 80057fc:	4603      	mov	r3, r0
 80057fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005800:	e009      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	75fb      	strb	r3, [r7, #23]
      break;
 8005806:	e006      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005808:	bf00      	nop
 800580a:	e004      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800580c:	bf00      	nop
 800580e:	e002      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005810:	bf00      	nop
 8005812:	e000      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005814:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005816:	7dfb      	ldrb	r3, [r7, #23]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10a      	bne.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800581c:	4b8c      	ldr	r3, [pc, #560]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800581e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005820:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800582a:	4989      	ldr	r1, [pc, #548]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800582c:	4313      	orrs	r3, r2
 800582e:	654b      	str	r3, [r1, #84]	; 0x54
 8005830:	e001      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005832:	7dfb      	ldrb	r3, [r7, #23]
 8005834:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583e:	2b00      	cmp	r3, #0
 8005840:	d044      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005848:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800584c:	d01b      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800584e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005852:	d805      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005854:	2b00      	cmp	r3, #0
 8005856:	d022      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800585c:	d00a      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800585e:	e01b      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005864:	d01d      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005866:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800586a:	d01c      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800586c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005870:	d01b      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005872:	e011      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3304      	adds	r3, #4
 8005878:	2100      	movs	r1, #0
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fca2 	bl	80061c4 <RCCEx_PLL2_Config>
 8005880:	4603      	mov	r3, r0
 8005882:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005884:	e012      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	3324      	adds	r3, #36	; 0x24
 800588a:	2102      	movs	r1, #2
 800588c:	4618      	mov	r0, r3
 800588e:	f000 fd4b 	bl	8006328 <RCCEx_PLL3_Config>
 8005892:	4603      	mov	r3, r0
 8005894:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005896:	e009      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	75fb      	strb	r3, [r7, #23]
      break;
 800589c:	e006      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800589e:	bf00      	nop
 80058a0:	e004      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80058a2:	bf00      	nop
 80058a4:	e002      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80058a6:	bf00      	nop
 80058a8:	e000      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80058aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10a      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058b2:	4b67      	ldr	r3, [pc, #412]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058c0:	4963      	ldr	r1, [pc, #396]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	658b      	str	r3, [r1, #88]	; 0x58
 80058c6:	e001      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c8:	7dfb      	ldrb	r3, [r7, #23]
 80058ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d044      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058e2:	d01b      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80058e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058e8:	d805      	bhi.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d022      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80058ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f2:	d00a      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80058f4:	e01b      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80058f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058fa:	d01d      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80058fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005900:	d01c      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005902:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005906:	d01b      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005908:	e011      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3304      	adds	r3, #4
 800590e:	2100      	movs	r1, #0
 8005910:	4618      	mov	r0, r3
 8005912:	f000 fc57 	bl	80061c4 <RCCEx_PLL2_Config>
 8005916:	4603      	mov	r3, r0
 8005918:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800591a:	e012      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3324      	adds	r3, #36	; 0x24
 8005920:	2102      	movs	r1, #2
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fd00 	bl	8006328 <RCCEx_PLL3_Config>
 8005928:	4603      	mov	r3, r0
 800592a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800592c:	e009      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	75fb      	strb	r3, [r7, #23]
      break;
 8005932:	e006      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005934:	bf00      	nop
 8005936:	e004      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005938:	bf00      	nop
 800593a:	e002      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800593c:	bf00      	nop
 800593e:	e000      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005940:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005942:	7dfb      	ldrb	r3, [r7, #23]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10a      	bne.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005948:	4b41      	ldr	r3, [pc, #260]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800594a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005956:	493e      	ldr	r1, [pc, #248]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005958:	4313      	orrs	r3, r2
 800595a:	658b      	str	r3, [r1, #88]	; 0x58
 800595c:	e001      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800595e:	7dfb      	ldrb	r3, [r7, #23]
 8005960:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d01a      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005978:	d10a      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3324      	adds	r3, #36	; 0x24
 800597e:	2102      	movs	r1, #2
 8005980:	4618      	mov	r0, r3
 8005982:	f000 fcd1 	bl	8006328 <RCCEx_PLL3_Config>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005990:	4b2f      	ldr	r3, [pc, #188]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005994:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800599e:	492c      	ldr	r1, [pc, #176]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0310 	and.w	r3, r3, #16
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01a      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ba:	d10a      	bne.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3324      	adds	r3, #36	; 0x24
 80059c0:	2102      	movs	r1, #2
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fcb0 	bl	8006328 <RCCEx_PLL3_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059d2:	4b1f      	ldr	r3, [pc, #124]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80059d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059e0:	491b      	ldr	r1, [pc, #108]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d032      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80059f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059fc:	d00d      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80059fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a02:	d016      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d111      	bne.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fbd8 	bl	80061c4 <RCCEx_PLL2_Config>
 8005a14:	4603      	mov	r3, r0
 8005a16:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005a18:	e00c      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	3324      	adds	r3, #36	; 0x24
 8005a1e:	2102      	movs	r1, #2
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 fc81 	bl	8006328 <RCCEx_PLL3_Config>
 8005a26:	4603      	mov	r3, r0
 8005a28:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005a2a:	e003      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a30:	e000      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10c      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a3a:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a48:	4901      	ldr	r1, [pc, #4]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	658b      	str	r3, [r1, #88]	; 0x58
 8005a4e:	e003      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005a50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
 8005a56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d02f      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a6e:	d00c      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005a70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a74:	d015      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a7a:	d10f      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a7c:	4b79      	ldr	r3, [pc, #484]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	4a78      	ldr	r2, [pc, #480]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a88:	e00c      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	3324      	adds	r3, #36	; 0x24
 8005a8e:	2101      	movs	r1, #1
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 fc49 	bl	8006328 <RCCEx_PLL3_Config>
 8005a96:	4603      	mov	r3, r0
 8005a98:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a9a:	e003      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa0:	e000      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005aa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aa4:	7dfb      	ldrb	r3, [r7, #23]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10a      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005aaa:	4b6e      	ldr	r3, [pc, #440]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab8:	496a      	ldr	r1, [pc, #424]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	654b      	str	r3, [r1, #84]	; 0x54
 8005abe:	e001      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac0:	7dfb      	ldrb	r3, [r7, #23]
 8005ac2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d029      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005adc:	d007      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005ade:	e00f      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae0:	4b60      	ldr	r3, [pc, #384]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	4a5f      	ldr	r2, [pc, #380]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005aec:	e00b      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3304      	adds	r3, #4
 8005af2:	2102      	movs	r1, #2
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 fb65 	bl	80061c4 <RCCEx_PLL2_Config>
 8005afa:	4603      	mov	r3, r0
 8005afc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005afe:	e002      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	75fb      	strb	r3, [r7, #23]
      break;
 8005b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d109      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005b0c:	4b55      	ldr	r3, [pc, #340]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b18:	4952      	ldr	r1, [pc, #328]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b1e:	e001      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b20:	7dfb      	ldrb	r3, [r7, #23]
 8005b22:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00a      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3324      	adds	r3, #36	; 0x24
 8005b34:	2102      	movs	r1, #2
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 fbf6 	bl	8006328 <RCCEx_PLL3_Config>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d02f      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b5a:	d00c      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b60:	d802      	bhi.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d011      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005b66:	e00d      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b6c:	d00f      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005b6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b72:	d00e      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005b74:	e006      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b76:	4b3b      	ldr	r3, [pc, #236]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7a:	4a3a      	ldr	r2, [pc, #232]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005b82:	e007      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	75fb      	strb	r3, [r7, #23]
      break;
 8005b88:	e004      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005b8a:	bf00      	nop
 8005b8c:	e002      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005b8e:	bf00      	nop
 8005b90:	e000      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005b92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b9a:	4b32      	ldr	r3, [pc, #200]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ba6:	492f      	ldr	r1, [pc, #188]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	654b      	str	r3, [r1, #84]	; 0x54
 8005bac:	e001      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bae:	7dfb      	ldrb	r3, [r7, #23]
 8005bb0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d008      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005bbe:	4b29      	ldr	r3, [pc, #164]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bca:	4926      	ldr	r1, [pc, #152]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d009      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005bdc:	4b21      	ldr	r3, [pc, #132]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bea:	491e      	ldr	r1, [pc, #120]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bfc:	4b19      	ldr	r3, [pc, #100]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c00:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c08:	4916      	ldr	r1, [pc, #88]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00d      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c1a:	4b12      	ldr	r3, [pc, #72]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	4a11      	ldr	r2, [pc, #68]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c24:	6113      	str	r3, [r2, #16]
 8005c26:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005c30:	490c      	ldr	r1, [pc, #48]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	da08      	bge.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005c3e:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c4a:	4906      	ldr	r1, [pc, #24]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005c50:	7dbb      	ldrb	r3, [r7, #22]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	e000      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	58024400 	.word	0x58024400

08005c68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c6c:	f7ff f8b2 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8005c70:	4601      	mov	r1, r0
 8005c72:	4b06      	ldr	r3, [pc, #24]	; (8005c8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	091b      	lsrs	r3, r3, #4
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	4a04      	ldr	r2, [pc, #16]	; (8005c90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c7e:	5cd3      	ldrb	r3, [r2, r3]
 8005c80:	f003 031f 	and.w	r3, r3, #31
 8005c84:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	58024400 	.word	0x58024400
 8005c90:	080097cc 	.word	0x080097cc

08005c94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b089      	sub	sp, #36	; 0x24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c9c:	4b9d      	ldr	r3, [pc, #628]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005ca6:	4b9b      	ldr	r3, [pc, #620]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	0b1b      	lsrs	r3, r3, #12
 8005cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cb0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005cb2:	4b98      	ldr	r3, [pc, #608]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb6:	091b      	lsrs	r3, r3, #4
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005cbe:	4b95      	ldr	r3, [pc, #596]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc2:	08db      	lsrs	r3, r3, #3
 8005cc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	fb02 f303 	mul.w	r3, r2, r3
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 810a 	beq.w	8005ef6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d05a      	beq.n	8005d9e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d302      	bcc.n	8005cf2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d078      	beq.n	8005de2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005cf0:	e099      	b.n	8005e26 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cf2:	4b88      	ldr	r3, [pc, #544]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d02d      	beq.n	8005d5a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cfe:	4b85      	ldr	r3, [pc, #532]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	08db      	lsrs	r3, r3, #3
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	4a83      	ldr	r2, [pc, #524]	; (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d0e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	ee07 3a90 	vmov	s15, r3
 8005d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d28:	4b7a      	ldr	r3, [pc, #488]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d30:	ee07 3a90 	vmov	s15, r3
 8005d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d38:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d3c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d54:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d58:	e087      	b.n	8005e6a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	ee07 3a90 	vmov	s15, r3
 8005d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d64:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005f20 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005d68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d6c:	4b69      	ldr	r3, [pc, #420]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d74:	ee07 3a90 	vmov	s15, r3
 8005d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d80:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005d84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d9c:	e065      	b.n	8005e6a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	ee07 3a90 	vmov	s15, r3
 8005da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db0:	4b58      	ldr	r3, [pc, #352]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db8:	ee07 3a90 	vmov	s15, r3
 8005dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dc4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ddc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005de0:	e043      	b.n	8005e6a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	ee07 3a90 	vmov	s15, r3
 8005de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005df0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005df4:	4b47      	ldr	r3, [pc, #284]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfc:	ee07 3a90 	vmov	s15, r3
 8005e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e04:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e08:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005e0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e24:	e021      	b.n	8005e6a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	ee07 3a90 	vmov	s15, r3
 8005e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e30:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e38:	4b36      	ldr	r3, [pc, #216]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e40:	ee07 3a90 	vmov	s15, r3
 8005e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e48:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e4c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e68:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005e6a:	4b2a      	ldr	r3, [pc, #168]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6e:	0a5b      	lsrs	r3, r3, #9
 8005e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e74:	ee07 3a90 	vmov	s15, r3
 8005e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e84:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e90:	ee17 2a90 	vmov	r2, s15
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005e98:	4b1e      	ldr	r3, [pc, #120]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9c:	0c1b      	lsrs	r3, r3, #16
 8005e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea2:	ee07 3a90 	vmov	s15, r3
 8005ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ebe:	ee17 2a90 	vmov	r2, s15
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005ec6:	4b13      	ldr	r3, [pc, #76]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eca:	0e1b      	lsrs	r3, r3, #24
 8005ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ed0:	ee07 3a90 	vmov	s15, r3
 8005ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005edc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ee0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eec:	ee17 2a90 	vmov	r2, s15
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ef4:	e008      	b.n	8005f08 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	609a      	str	r2, [r3, #8]
}
 8005f08:	bf00      	nop
 8005f0a:	3724      	adds	r7, #36	; 0x24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	58024400 	.word	0x58024400
 8005f18:	03d09000 	.word	0x03d09000
 8005f1c:	46000000 	.word	0x46000000
 8005f20:	4c742400 	.word	0x4c742400
 8005f24:	4a742400 	.word	0x4a742400
 8005f28:	4c189680 	.word	0x4c189680

08005f2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b089      	sub	sp, #36	; 0x24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f34:	4b9d      	ldr	r3, [pc, #628]	; (80061ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f38:	f003 0303 	and.w	r3, r3, #3
 8005f3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005f3e:	4b9b      	ldr	r3, [pc, #620]	; (80061ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f42:	0d1b      	lsrs	r3, r3, #20
 8005f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f4a:	4b98      	ldr	r3, [pc, #608]	; (80061ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4e:	0a1b      	lsrs	r3, r3, #8
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005f56:	4b95      	ldr	r3, [pc, #596]	; (80061ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5a:	08db      	lsrs	r3, r3, #3
 8005f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	fb02 f303 	mul.w	r3, r2, r3
 8005f66:	ee07 3a90 	vmov	s15, r3
 8005f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 810a 	beq.w	800618e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d05a      	beq.n	8006036 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d302      	bcc.n	8005f8a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d078      	beq.n	800607a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8005f88:	e099      	b.n	80060be <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f8a:	4b88      	ldr	r3, [pc, #544]	; (80061ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d02d      	beq.n	8005ff2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f96:	4b85      	ldr	r3, [pc, #532]	; (80061ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	08db      	lsrs	r3, r3, #3
 8005f9c:	f003 0303 	and.w	r3, r3, #3
 8005fa0:	4a83      	ldr	r2, [pc, #524]	; (80061b0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	ee07 3a90 	vmov	s15, r3
 8005fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	ee07 3a90 	vmov	s15, r3
 8005fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fc0:	4b7a      	ldr	r3, [pc, #488]	; (80061ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc8:	ee07 3a90 	vmov	s15, r3
 8005fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fd4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80061b4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005fd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fec:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005ff0:	e087      	b.n	8006102 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	ee07 3a90 	vmov	s15, r3
 8005ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80061b8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006000:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006004:	4b69      	ldr	r3, [pc, #420]	; (80061ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600c:	ee07 3a90 	vmov	s15, r3
 8006010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006014:	ed97 6a03 	vldr	s12, [r7, #12]
 8006018:	eddf 5a66 	vldr	s11, [pc, #408]	; 80061b4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800601c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006020:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006024:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006028:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800602c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006030:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006034:	e065      	b.n	8006102 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	ee07 3a90 	vmov	s15, r3
 800603c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006040:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80061bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006044:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006048:	4b58      	ldr	r3, [pc, #352]	; (80061ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006050:	ee07 3a90 	vmov	s15, r3
 8006054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006058:	ed97 6a03 	vldr	s12, [r7, #12]
 800605c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80061b4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006060:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006064:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800606c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006074:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006078:	e043      	b.n	8006102 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	ee07 3a90 	vmov	s15, r3
 8006080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006084:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006088:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800608c:	4b47      	ldr	r3, [pc, #284]	; (80061ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800608e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006094:	ee07 3a90 	vmov	s15, r3
 8006098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800609c:	ed97 6a03 	vldr	s12, [r7, #12]
 80060a0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80061b4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80060a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060bc:	e021      	b.n	8006102 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	ee07 3a90 	vmov	s15, r3
 80060c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80061bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80060cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060d0:	4b36      	ldr	r3, [pc, #216]	; (80061ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d8:	ee07 3a90 	vmov	s15, r3
 80060dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80060e4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80061b4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80060e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006100:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006102:	4b2a      	ldr	r3, [pc, #168]	; (80061ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	0a5b      	lsrs	r3, r3, #9
 8006108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800610c:	ee07 3a90 	vmov	s15, r3
 8006110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006114:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006118:	ee37 7a87 	vadd.f32	s14, s15, s14
 800611c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006128:	ee17 2a90 	vmov	r2, s15
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006130:	4b1e      	ldr	r3, [pc, #120]	; (80061ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	0c1b      	lsrs	r3, r3, #16
 8006136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006142:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006146:	ee37 7a87 	vadd.f32	s14, s15, s14
 800614a:	edd7 6a07 	vldr	s13, [r7, #28]
 800614e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006156:	ee17 2a90 	vmov	r2, s15
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800615e:	4b13      	ldr	r3, [pc, #76]	; (80061ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	0e1b      	lsrs	r3, r3, #24
 8006164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006168:	ee07 3a90 	vmov	s15, r3
 800616c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006170:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006174:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006178:	edd7 6a07 	vldr	s13, [r7, #28]
 800617c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006184:	ee17 2a90 	vmov	r2, s15
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800618c:	e008      	b.n	80061a0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	609a      	str	r2, [r3, #8]
}
 80061a0:	bf00      	nop
 80061a2:	3724      	adds	r7, #36	; 0x24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	58024400 	.word	0x58024400
 80061b0:	03d09000 	.word	0x03d09000
 80061b4:	46000000 	.word	0x46000000
 80061b8:	4c742400 	.word	0x4c742400
 80061bc:	4a742400 	.word	0x4a742400
 80061c0:	4c189680 	.word	0x4c189680

080061c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061d2:	4b53      	ldr	r3, [pc, #332]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 80061d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d101      	bne.n	80061e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e099      	b.n	8006316 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80061e2:	4b4f      	ldr	r3, [pc, #316]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a4e      	ldr	r2, [pc, #312]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 80061e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ee:	f7fd f8d9 	bl	80033a4 <HAL_GetTick>
 80061f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061f4:	e008      	b.n	8006208 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80061f6:	f7fd f8d5 	bl	80033a4 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b02      	cmp	r3, #2
 8006202:	d901      	bls.n	8006208 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e086      	b.n	8006316 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006208:	4b45      	ldr	r3, [pc, #276]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1f0      	bne.n	80061f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006214:	4b42      	ldr	r3, [pc, #264]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 8006216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006218:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	031b      	lsls	r3, r3, #12
 8006222:	493f      	ldr	r1, [pc, #252]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 8006224:	4313      	orrs	r3, r2
 8006226:	628b      	str	r3, [r1, #40]	; 0x28
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	3b01      	subs	r3, #1
 800622e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	3b01      	subs	r3, #1
 8006238:	025b      	lsls	r3, r3, #9
 800623a:	b29b      	uxth	r3, r3
 800623c:	431a      	orrs	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	3b01      	subs	r3, #1
 8006244:	041b      	lsls	r3, r3, #16
 8006246:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	3b01      	subs	r3, #1
 8006252:	061b      	lsls	r3, r3, #24
 8006254:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006258:	4931      	ldr	r1, [pc, #196]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 800625a:	4313      	orrs	r3, r2
 800625c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800625e:	4b30      	ldr	r3, [pc, #192]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 8006260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006262:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	492d      	ldr	r1, [pc, #180]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 800626c:	4313      	orrs	r3, r2
 800626e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006270:	4b2b      	ldr	r3, [pc, #172]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 8006272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006274:	f023 0220 	bic.w	r2, r3, #32
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	4928      	ldr	r1, [pc, #160]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 800627e:	4313      	orrs	r3, r2
 8006280:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006282:	4b27      	ldr	r3, [pc, #156]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 8006284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006286:	4a26      	ldr	r2, [pc, #152]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 8006288:	f023 0310 	bic.w	r3, r3, #16
 800628c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800628e:	4b24      	ldr	r3, [pc, #144]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 8006290:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006292:	4b24      	ldr	r3, [pc, #144]	; (8006324 <RCCEx_PLL2_Config+0x160>)
 8006294:	4013      	ands	r3, r2
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	69d2      	ldr	r2, [r2, #28]
 800629a:	00d2      	lsls	r2, r2, #3
 800629c:	4920      	ldr	r1, [pc, #128]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80062a2:	4b1f      	ldr	r3, [pc, #124]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 80062a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a6:	4a1e      	ldr	r2, [pc, #120]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 80062a8:	f043 0310 	orr.w	r3, r3, #16
 80062ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d106      	bne.n	80062c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80062b4:	4b1a      	ldr	r3, [pc, #104]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	4a19      	ldr	r2, [pc, #100]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 80062ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062c0:	e00f      	b.n	80062e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d106      	bne.n	80062d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80062c8:	4b15      	ldr	r3, [pc, #84]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062cc:	4a14      	ldr	r2, [pc, #80]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 80062ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062d4:	e005      	b.n	80062e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80062d6:	4b12      	ldr	r3, [pc, #72]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 80062d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062da:	4a11      	ldr	r2, [pc, #68]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 80062dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80062e2:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a0e      	ldr	r2, [pc, #56]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 80062e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ee:	f7fd f859 	bl	80033a4 <HAL_GetTick>
 80062f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062f4:	e008      	b.n	8006308 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80062f6:	f7fd f855 	bl	80033a4 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e006      	b.n	8006316 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006308:	4b05      	ldr	r3, [pc, #20]	; (8006320 <RCCEx_PLL2_Config+0x15c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0f0      	beq.n	80062f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006314:	7bfb      	ldrb	r3, [r7, #15]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	58024400 	.word	0x58024400
 8006324:	ffff0007 	.word	0xffff0007

08006328 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006336:	4b53      	ldr	r3, [pc, #332]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 8006338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633a:	f003 0303 	and.w	r3, r3, #3
 800633e:	2b03      	cmp	r3, #3
 8006340:	d101      	bne.n	8006346 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e099      	b.n	800647a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006346:	4b4f      	ldr	r3, [pc, #316]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a4e      	ldr	r2, [pc, #312]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 800634c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006350:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006352:	f7fd f827 	bl	80033a4 <HAL_GetTick>
 8006356:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006358:	e008      	b.n	800636c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800635a:	f7fd f823 	bl	80033a4 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b02      	cmp	r3, #2
 8006366:	d901      	bls.n	800636c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e086      	b.n	800647a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800636c:	4b45      	ldr	r3, [pc, #276]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1f0      	bne.n	800635a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006378:	4b42      	ldr	r3, [pc, #264]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 800637a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	051b      	lsls	r3, r3, #20
 8006386:	493f      	ldr	r1, [pc, #252]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 8006388:	4313      	orrs	r3, r2
 800638a:	628b      	str	r3, [r1, #40]	; 0x28
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	3b01      	subs	r3, #1
 8006392:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	3b01      	subs	r3, #1
 800639c:	025b      	lsls	r3, r3, #9
 800639e:	b29b      	uxth	r3, r3
 80063a0:	431a      	orrs	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	3b01      	subs	r3, #1
 80063a8:	041b      	lsls	r3, r3, #16
 80063aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	3b01      	subs	r3, #1
 80063b6:	061b      	lsls	r3, r3, #24
 80063b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063bc:	4931      	ldr	r1, [pc, #196]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80063c2:	4b30      	ldr	r3, [pc, #192]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 80063c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	492d      	ldr	r1, [pc, #180]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80063d4:	4b2b      	ldr	r3, [pc, #172]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	4928      	ldr	r1, [pc, #160]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80063e6:	4b27      	ldr	r3, [pc, #156]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 80063e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ea:	4a26      	ldr	r2, [pc, #152]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 80063ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80063f2:	4b24      	ldr	r3, [pc, #144]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 80063f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063f6:	4b24      	ldr	r3, [pc, #144]	; (8006488 <RCCEx_PLL3_Config+0x160>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	69d2      	ldr	r2, [r2, #28]
 80063fe:	00d2      	lsls	r2, r2, #3
 8006400:	4920      	ldr	r1, [pc, #128]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 8006402:	4313      	orrs	r3, r2
 8006404:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006406:	4b1f      	ldr	r3, [pc, #124]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 8006408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640a:	4a1e      	ldr	r2, [pc, #120]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 800640c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006410:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d106      	bne.n	8006426 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006418:	4b1a      	ldr	r3, [pc, #104]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	4a19      	ldr	r2, [pc, #100]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 800641e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006422:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006424:	e00f      	b.n	8006446 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d106      	bne.n	800643a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800642c:	4b15      	ldr	r3, [pc, #84]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	4a14      	ldr	r2, [pc, #80]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 8006432:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006436:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006438:	e005      	b.n	8006446 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800643a:	4b12      	ldr	r3, [pc, #72]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 800643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643e:	4a11      	ldr	r2, [pc, #68]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 8006440:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006444:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006446:	4b0f      	ldr	r3, [pc, #60]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a0e      	ldr	r2, [pc, #56]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 800644c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006450:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006452:	f7fc ffa7 	bl	80033a4 <HAL_GetTick>
 8006456:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006458:	e008      	b.n	800646c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800645a:	f7fc ffa3 	bl	80033a4 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2b02      	cmp	r3, #2
 8006466:	d901      	bls.n	800646c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e006      	b.n	800647a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800646c:	4b05      	ldr	r3, [pc, #20]	; (8006484 <RCCEx_PLL3_Config+0x15c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0f0      	beq.n	800645a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006478:	7bfb      	ldrb	r3, [r7, #15]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	58024400 	.word	0x58024400
 8006488:	ffff0007 	.word	0xffff0007

0800648c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e049      	b.n	8006532 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fc fe08 	bl	80030c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3304      	adds	r3, #4
 80064c8:	4619      	mov	r1, r3
 80064ca:	4610      	mov	r0, r2
 80064cc:	f000 f934 	bl	8006738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b01      	cmp	r3, #1
 800654e:	d001      	beq.n	8006554 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e019      	b.n	8006588 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689a      	ldr	r2, [r3, #8]
 8006562:	4b0c      	ldr	r3, [pc, #48]	; (8006594 <HAL_TIM_Base_Start+0x58>)
 8006564:	4013      	ands	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2b06      	cmp	r3, #6
 800656c:	d00b      	beq.n	8006586 <HAL_TIM_Base_Start+0x4a>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006574:	d007      	beq.n	8006586 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f042 0201 	orr.w	r2, r2, #1
 8006584:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	00010007 	.word	0x00010007

08006598 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d101      	bne.n	80065b0 <HAL_TIM_ConfigClockSource+0x18>
 80065ac:	2302      	movs	r3, #2
 80065ae:	e0b7      	b.n	8006720 <HAL_TIM_ConfigClockSource+0x188>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4b57      	ldr	r3, [pc, #348]	; (8006728 <HAL_TIM_ConfigClockSource+0x190>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b70      	cmp	r3, #112	; 0x70
 80065e6:	d02e      	beq.n	8006646 <HAL_TIM_ConfigClockSource+0xae>
 80065e8:	2b70      	cmp	r3, #112	; 0x70
 80065ea:	d812      	bhi.n	8006612 <HAL_TIM_ConfigClockSource+0x7a>
 80065ec:	2b30      	cmp	r3, #48	; 0x30
 80065ee:	f000 8084 	beq.w	80066fa <HAL_TIM_ConfigClockSource+0x162>
 80065f2:	2b30      	cmp	r3, #48	; 0x30
 80065f4:	d806      	bhi.n	8006604 <HAL_TIM_ConfigClockSource+0x6c>
 80065f6:	2b10      	cmp	r3, #16
 80065f8:	d07f      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0x162>
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	d07d      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0x162>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d07b      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006602:	e084      	b.n	800670e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8006604:	2b50      	cmp	r3, #80	; 0x50
 8006606:	d048      	beq.n	800669a <HAL_TIM_ConfigClockSource+0x102>
 8006608:	2b60      	cmp	r3, #96	; 0x60
 800660a:	d056      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x122>
 800660c:	2b40      	cmp	r3, #64	; 0x40
 800660e:	d064      	beq.n	80066da <HAL_TIM_ConfigClockSource+0x142>
      break;
 8006610:	e07d      	b.n	800670e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8006612:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006616:	d070      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0x162>
 8006618:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800661c:	d809      	bhi.n	8006632 <HAL_TIM_ConfigClockSource+0x9a>
 800661e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006622:	d027      	beq.n	8006674 <HAL_TIM_ConfigClockSource+0xdc>
 8006624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006628:	d067      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0x162>
 800662a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662e:	d06d      	beq.n	800670c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006630:	e06d      	b.n	800670e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8006632:	4a3e      	ldr	r2, [pc, #248]	; (800672c <HAL_TIM_ConfigClockSource+0x194>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d060      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0x162>
 8006638:	4a3d      	ldr	r2, [pc, #244]	; (8006730 <HAL_TIM_ConfigClockSource+0x198>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d05d      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0x162>
 800663e:	4a3d      	ldr	r2, [pc, #244]	; (8006734 <HAL_TIM_ConfigClockSource+0x19c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d05a      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0x162>
      break;
 8006644:	e063      	b.n	800670e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6818      	ldr	r0, [r3, #0]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	6899      	ldr	r1, [r3, #8]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f000 f987 	bl	8006968 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006668:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	609a      	str	r2, [r3, #8]
      break;
 8006672:	e04c      	b.n	800670e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6818      	ldr	r0, [r3, #0]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	6899      	ldr	r1, [r3, #8]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f000 f970 	bl	8006968 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689a      	ldr	r2, [r3, #8]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006696:	609a      	str	r2, [r3, #8]
      break;
 8006698:	e039      	b.n	800670e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	6859      	ldr	r1, [r3, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	461a      	mov	r2, r3
 80066a8:	f000 f8e0 	bl	800686c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2150      	movs	r1, #80	; 0x50
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 f93a 	bl	800692c <TIM_ITRx_SetConfig>
      break;
 80066b8:	e029      	b.n	800670e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6818      	ldr	r0, [r3, #0]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	6859      	ldr	r1, [r3, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	461a      	mov	r2, r3
 80066c8:	f000 f8ff 	bl	80068ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2160      	movs	r1, #96	; 0x60
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 f92a 	bl	800692c <TIM_ITRx_SetConfig>
      break;
 80066d8:	e019      	b.n	800670e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6818      	ldr	r0, [r3, #0]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	6859      	ldr	r1, [r3, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	461a      	mov	r2, r3
 80066e8:	f000 f8c0 	bl	800686c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2140      	movs	r1, #64	; 0x40
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 f91a 	bl	800692c <TIM_ITRx_SetConfig>
      break;
 80066f8:	e009      	b.n	800670e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4619      	mov	r1, r3
 8006704:	4610      	mov	r0, r2
 8006706:	f000 f911 	bl	800692c <TIM_ITRx_SetConfig>
      break;
 800670a:	e000      	b.n	800670e <HAL_TIM_ConfigClockSource+0x176>
      break;
 800670c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	ffceff88 	.word	0xffceff88
 800672c:	00100030 	.word	0x00100030
 8006730:	00100040 	.word	0x00100040
 8006734:	00100020 	.word	0x00100020

08006738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a40      	ldr	r2, [pc, #256]	; (800684c <TIM_Base_SetConfig+0x114>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d013      	beq.n	8006778 <TIM_Base_SetConfig+0x40>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006756:	d00f      	beq.n	8006778 <TIM_Base_SetConfig+0x40>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a3d      	ldr	r2, [pc, #244]	; (8006850 <TIM_Base_SetConfig+0x118>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d00b      	beq.n	8006778 <TIM_Base_SetConfig+0x40>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a3c      	ldr	r2, [pc, #240]	; (8006854 <TIM_Base_SetConfig+0x11c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d007      	beq.n	8006778 <TIM_Base_SetConfig+0x40>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a3b      	ldr	r2, [pc, #236]	; (8006858 <TIM_Base_SetConfig+0x120>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d003      	beq.n	8006778 <TIM_Base_SetConfig+0x40>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a3a      	ldr	r2, [pc, #232]	; (800685c <TIM_Base_SetConfig+0x124>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d108      	bne.n	800678a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a2f      	ldr	r2, [pc, #188]	; (800684c <TIM_Base_SetConfig+0x114>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d01f      	beq.n	80067d2 <TIM_Base_SetConfig+0x9a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006798:	d01b      	beq.n	80067d2 <TIM_Base_SetConfig+0x9a>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a2c      	ldr	r2, [pc, #176]	; (8006850 <TIM_Base_SetConfig+0x118>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d017      	beq.n	80067d2 <TIM_Base_SetConfig+0x9a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a2b      	ldr	r2, [pc, #172]	; (8006854 <TIM_Base_SetConfig+0x11c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d013      	beq.n	80067d2 <TIM_Base_SetConfig+0x9a>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a2a      	ldr	r2, [pc, #168]	; (8006858 <TIM_Base_SetConfig+0x120>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00f      	beq.n	80067d2 <TIM_Base_SetConfig+0x9a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a29      	ldr	r2, [pc, #164]	; (800685c <TIM_Base_SetConfig+0x124>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d00b      	beq.n	80067d2 <TIM_Base_SetConfig+0x9a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a28      	ldr	r2, [pc, #160]	; (8006860 <TIM_Base_SetConfig+0x128>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d007      	beq.n	80067d2 <TIM_Base_SetConfig+0x9a>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a27      	ldr	r2, [pc, #156]	; (8006864 <TIM_Base_SetConfig+0x12c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d003      	beq.n	80067d2 <TIM_Base_SetConfig+0x9a>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a26      	ldr	r2, [pc, #152]	; (8006868 <TIM_Base_SetConfig+0x130>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d108      	bne.n	80067e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a10      	ldr	r2, [pc, #64]	; (800684c <TIM_Base_SetConfig+0x114>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00f      	beq.n	8006830 <TIM_Base_SetConfig+0xf8>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a12      	ldr	r2, [pc, #72]	; (800685c <TIM_Base_SetConfig+0x124>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d00b      	beq.n	8006830 <TIM_Base_SetConfig+0xf8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a11      	ldr	r2, [pc, #68]	; (8006860 <TIM_Base_SetConfig+0x128>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d007      	beq.n	8006830 <TIM_Base_SetConfig+0xf8>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a10      	ldr	r2, [pc, #64]	; (8006864 <TIM_Base_SetConfig+0x12c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d003      	beq.n	8006830 <TIM_Base_SetConfig+0xf8>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a0f      	ldr	r2, [pc, #60]	; (8006868 <TIM_Base_SetConfig+0x130>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d103      	bne.n	8006838 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	691a      	ldr	r2, [r3, #16]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	615a      	str	r2, [r3, #20]
}
 800683e:	bf00      	nop
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	40010000 	.word	0x40010000
 8006850:	40000400 	.word	0x40000400
 8006854:	40000800 	.word	0x40000800
 8006858:	40000c00 	.word	0x40000c00
 800685c:	40010400 	.word	0x40010400
 8006860:	40014000 	.word	0x40014000
 8006864:	40014400 	.word	0x40014400
 8006868:	40014800 	.word	0x40014800

0800686c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	f023 0201 	bic.w	r2, r3, #1
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4313      	orrs	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f023 030a 	bic.w	r3, r3, #10
 80068a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	621a      	str	r2, [r3, #32]
}
 80068be:	bf00      	nop
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b087      	sub	sp, #28
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	60f8      	str	r0, [r7, #12]
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	f023 0210 	bic.w	r2, r3, #16
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	031b      	lsls	r3, r3, #12
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006906:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	011b      	lsls	r3, r3, #4
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4313      	orrs	r3, r2
 8006910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	621a      	str	r2, [r3, #32]
}
 800691e:	bf00      	nop
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
	...

0800692c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4b09      	ldr	r3, [pc, #36]	; (8006964 <TIM_ITRx_SetConfig+0x38>)
 8006940:	4013      	ands	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4313      	orrs	r3, r2
 800694a:	f043 0307 	orr.w	r3, r3, #7
 800694e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	609a      	str	r2, [r3, #8]
}
 8006956:	bf00      	nop
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	ffcfff8f 	.word	0xffcfff8f

08006968 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006982:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	021a      	lsls	r2, r3, #8
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	431a      	orrs	r2, r3
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	4313      	orrs	r3, r2
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	609a      	str	r2, [r3, #8]
}
 800699c:	bf00      	nop
 800699e:	371c      	adds	r7, #28
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d101      	bne.n	80069c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069bc:	2302      	movs	r3, #2
 80069be:	e068      	b.n	8006a92 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a2e      	ldr	r2, [pc, #184]	; (8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d004      	beq.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a2d      	ldr	r2, [pc, #180]	; (8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d108      	bne.n	8006a06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80069fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a1e      	ldr	r2, [pc, #120]	; (8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d01d      	beq.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a32:	d018      	beq.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a1b      	ldr	r2, [pc, #108]	; (8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d013      	beq.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a1a      	ldr	r2, [pc, #104]	; (8006aac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d00e      	beq.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a18      	ldr	r2, [pc, #96]	; (8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d009      	beq.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a13      	ldr	r2, [pc, #76]	; (8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d004      	beq.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a14      	ldr	r2, [pc, #80]	; (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d10c      	bne.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	40010000 	.word	0x40010000
 8006aa4:	40010400 	.word	0x40010400
 8006aa8:	40000400 	.word	0x40000400
 8006aac:	40000800 	.word	0x40000800
 8006ab0:	40000c00 	.word	0x40000c00
 8006ab4:	40001800 	.word	0x40001800

08006ab8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e042      	b.n	8006b50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d106      	bne.n	8006ae2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7fc fb5f 	bl	80031a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2224      	movs	r2, #36	; 0x24
 8006ae6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 0201 	bic.w	r2, r2, #1
 8006af8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fb12 	bl	8007124 <UART_SetConfig>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d101      	bne.n	8006b0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e022      	b.n	8006b50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d002      	beq.n	8006b18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f001 f8b6 	bl	8007c84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689a      	ldr	r2, [r3, #8]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f042 0201 	orr.w	r2, r2, #1
 8006b46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f001 f93d 	bl	8007dc8 <UART_CheckIdleState>
 8006b4e:	4603      	mov	r3, r0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b6c:	2b20      	cmp	r3, #32
 8006b6e:	d168      	bne.n	8006c42 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <HAL_UART_Transmit_IT+0x24>
 8006b76:	88fb      	ldrh	r3, [r7, #6]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e061      	b.n	8006c44 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d101      	bne.n	8006b8e <HAL_UART_Transmit_IT+0x36>
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	e05a      	b.n	8006c44 <HAL_UART_Transmit_IT+0xec>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	88fa      	ldrh	r2, [r7, #6]
 8006ba0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	88fa      	ldrh	r2, [r7, #6]
 8006ba8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2221      	movs	r2, #33	; 0x21
 8006bbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bca:	d11c      	bne.n	8006c06 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd4:	d107      	bne.n	8006be6 <HAL_UART_Transmit_IT+0x8e>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d103      	bne.n	8006be6 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4a1b      	ldr	r2, [pc, #108]	; (8006c50 <HAL_UART_Transmit_IT+0xf8>)
 8006be2:	671a      	str	r2, [r3, #112]	; 0x70
 8006be4:	e002      	b.n	8006bec <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	4a1a      	ldr	r2, [pc, #104]	; (8006c54 <HAL_UART_Transmit_IT+0xfc>)
 8006bea:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006c02:	609a      	str	r2, [r3, #8]
 8006c04:	e01b      	b.n	8006c3e <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0e:	d107      	bne.n	8006c20 <HAL_UART_Transmit_IT+0xc8>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d103      	bne.n	8006c20 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4a0f      	ldr	r2, [pc, #60]	; (8006c58 <HAL_UART_Transmit_IT+0x100>)
 8006c1c:	671a      	str	r2, [r3, #112]	; 0x70
 8006c1e:	e002      	b.n	8006c26 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4a0e      	ldr	r2, [pc, #56]	; (8006c5c <HAL_UART_Transmit_IT+0x104>)
 8006c24:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c3c:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	e000      	b.n	8006c44 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8006c42:	2302      	movs	r3, #2
  }
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	08008159 	.word	0x08008159
 8006c54:	080080bf 	.word	0x080080bf
 8006c58:	08008041 	.word	0x08008041
 8006c5c:	08007fcd 	.word	0x08007fcd

08006c60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c74:	2b20      	cmp	r3, #32
 8006c76:	f040 80bc 	bne.w	8006df2 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d002      	beq.n	8006c86 <HAL_UART_Receive_IT+0x26>
 8006c80:	88fb      	ldrh	r3, [r7, #6]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e0b4      	b.n	8006df4 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d101      	bne.n	8006c98 <HAL_UART_Receive_IT+0x38>
 8006c94:	2302      	movs	r3, #2
 8006c96:	e0ad      	b.n	8006df4 <HAL_UART_Receive_IT+0x194>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	88fa      	ldrh	r2, [r7, #6]
 8006caa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	88fa      	ldrh	r2, [r7, #6]
 8006cb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc4:	d10e      	bne.n	8006ce4 <HAL_UART_Receive_IT+0x84>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d105      	bne.n	8006cda <HAL_UART_Receive_IT+0x7a>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006cd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006cd8:	e02d      	b.n	8006d36 <HAL_UART_Receive_IT+0xd6>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	22ff      	movs	r2, #255	; 0xff
 8006cde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ce2:	e028      	b.n	8006d36 <HAL_UART_Receive_IT+0xd6>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10d      	bne.n	8006d08 <HAL_UART_Receive_IT+0xa8>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d104      	bne.n	8006cfe <HAL_UART_Receive_IT+0x9e>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	22ff      	movs	r2, #255	; 0xff
 8006cf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006cfc:	e01b      	b.n	8006d36 <HAL_UART_Receive_IT+0xd6>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	227f      	movs	r2, #127	; 0x7f
 8006d02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d06:	e016      	b.n	8006d36 <HAL_UART_Receive_IT+0xd6>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d10:	d10d      	bne.n	8006d2e <HAL_UART_Receive_IT+0xce>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d104      	bne.n	8006d24 <HAL_UART_Receive_IT+0xc4>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	227f      	movs	r2, #127	; 0x7f
 8006d1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d22:	e008      	b.n	8006d36 <HAL_UART_Receive_IT+0xd6>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	223f      	movs	r2, #63	; 0x3f
 8006d28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d2c:	e003      	b.n	8006d36 <HAL_UART_Receive_IT+0xd6>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2222      	movs	r2, #34	; 0x22
 8006d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f042 0201 	orr.w	r2, r2, #1
 8006d54:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d5e:	d12a      	bne.n	8006db6 <HAL_UART_Receive_IT+0x156>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006d66:	88fa      	ldrh	r2, [r7, #6]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d324      	bcc.n	8006db6 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d74:	d107      	bne.n	8006d86 <HAL_UART_Receive_IT+0x126>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d103      	bne.n	8006d86 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	4a1f      	ldr	r2, [pc, #124]	; (8006e00 <HAL_UART_Receive_IT+0x1a0>)
 8006d82:	66da      	str	r2, [r3, #108]	; 0x6c
 8006d84:	e002      	b.n	8006d8c <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4a1e      	ldr	r2, [pc, #120]	; (8006e04 <HAL_UART_Receive_IT+0x1a4>)
 8006d8a:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006da2:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689a      	ldr	r2, [r3, #8]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006db2:	609a      	str	r2, [r3, #8]
 8006db4:	e01b      	b.n	8006dee <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dbe:	d107      	bne.n	8006dd0 <HAL_UART_Receive_IT+0x170>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d103      	bne.n	8006dd0 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4a0f      	ldr	r2, [pc, #60]	; (8006e08 <HAL_UART_Receive_IT+0x1a8>)
 8006dcc:	66da      	str	r2, [r3, #108]	; 0x6c
 8006dce:	e002      	b.n	8006dd6 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4a0e      	ldr	r2, [pc, #56]	; (8006e0c <HAL_UART_Receive_IT+0x1ac>)
 8006dd4:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006dec:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	e000      	b.n	8006df4 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8006df2:	2302      	movs	r3, #2
  }
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	0800848d 	.word	0x0800848d
 8006e04:	08008385 	.word	0x08008385
 8006e08:	080082db 	.word	0x080082db
 8006e0c:	08008231 	.word	0x08008231

08006e10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e30:	69fa      	ldr	r2, [r7, #28]
 8006e32:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e36:	4013      	ands	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d118      	bne.n	8006e72 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	f003 0320 	and.w	r3, r3, #32
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d013      	beq.n	8006e72 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	f003 0320 	and.w	r3, r3, #32
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d104      	bne.n	8006e5e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d009      	beq.n	8006e72 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 8145 	beq.w	80070f2 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	4798      	blx	r3
      }
      return;
 8006e70:	e13f      	b.n	80070f2 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 80e8 	beq.w	800704a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	4ba1      	ldr	r3, [pc, #644]	; (8007104 <HAL_UART_IRQHandler+0x2f4>)
 8006e7e:	4013      	ands	r3, r2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d105      	bne.n	8006e90 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	4ba0      	ldr	r3, [pc, #640]	; (8007108 <HAL_UART_IRQHandler+0x2f8>)
 8006e88:	4013      	ands	r3, r2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f000 80dd 	beq.w	800704a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d010      	beq.n	8006ebc <HAL_UART_IRQHandler+0xac>
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00b      	beq.n	8006ebc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb2:	f043 0201 	orr.w	r2, r3, #1
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d010      	beq.n	8006ee8 <HAL_UART_IRQHandler+0xd8>
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00b      	beq.n	8006ee8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2202      	movs	r2, #2
 8006ed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ede:	f043 0204 	orr.w	r2, r3, #4
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	f003 0304 	and.w	r3, r3, #4
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d010      	beq.n	8006f14 <HAL_UART_IRQHandler+0x104>
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00b      	beq.n	8006f14 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2204      	movs	r2, #4
 8006f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f0a:	f043 0202 	orr.w	r2, r3, #2
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	f003 0308 	and.w	r3, r3, #8
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d015      	beq.n	8006f4a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	f003 0320 	and.w	r3, r3, #32
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d104      	bne.n	8006f32 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	4b76      	ldr	r3, [pc, #472]	; (8007104 <HAL_UART_IRQHandler+0x2f4>)
 8006f2c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00b      	beq.n	8006f4a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2208      	movs	r2, #8
 8006f38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f40:	f043 0208 	orr.w	r2, r3, #8
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d011      	beq.n	8006f78 <HAL_UART_IRQHandler+0x168>
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00c      	beq.n	8006f78 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f6e:	f043 0220 	orr.w	r2, r3, #32
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f000 80b9 	beq.w	80070f6 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	f003 0320 	and.w	r3, r3, #32
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d011      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	f003 0320 	and.w	r3, r3, #32
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d104      	bne.n	8006fa2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d007      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc4:	2b40      	cmp	r3, #64	; 0x40
 8006fc6:	d004      	beq.n	8006fd2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d031      	beq.n	8007036 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 ffc0 	bl	8007f58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe2:	2b40      	cmp	r3, #64	; 0x40
 8006fe4:	d123      	bne.n	800702e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ff4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d013      	beq.n	8007026 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007002:	4a42      	ldr	r2, [pc, #264]	; (800710c <HAL_UART_IRQHandler+0x2fc>)
 8007004:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800700a:	4618      	mov	r0, r3
 800700c:	f7fc fb14 	bl	8003638 <HAL_DMA_Abort_IT>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d017      	beq.n	8007046 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800701a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8007020:	4610      	mov	r0, r2
 8007022:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007024:	e00f      	b.n	8007046 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f872 	bl	8007110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800702c:	e00b      	b.n	8007046 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f86e 	bl	8007110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007034:	e007      	b.n	8007046 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f86a 	bl	8007110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8007044:	e057      	b.n	80070f6 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007046:	bf00      	nop
    return;
 8007048:	e055      	b.n	80070f6 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00d      	beq.n	8007070 <HAL_UART_IRQHandler+0x260>
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d008      	beq.n	8007070 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007066:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f001 fa93 	bl	8008594 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800706e:	e045      	b.n	80070fc <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007076:	2b00      	cmp	r3, #0
 8007078:	d012      	beq.n	80070a0 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007080:	2b00      	cmp	r3, #0
 8007082:	d104      	bne.n	800708e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d008      	beq.n	80070a0 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007092:	2b00      	cmp	r3, #0
 8007094:	d031      	beq.n	80070fa <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	4798      	blx	r3
    }
    return;
 800709e:	e02c      	b.n	80070fa <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d008      	beq.n	80070bc <HAL_UART_IRQHandler+0x2ac>
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 f8a1 	bl	80081fc <UART_EndTransmit_IT>
    return;
 80070ba:	e01f      	b.n	80070fc <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d008      	beq.n	80070d8 <HAL_UART_IRQHandler+0x2c8>
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d003      	beq.n	80070d8 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f001 fa73 	bl	80085bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070d6:	e011      	b.n	80070fc <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00c      	beq.n	80070fc <HAL_UART_IRQHandler+0x2ec>
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	da09      	bge.n	80070fc <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 fa5d 	bl	80085a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070ee:	bf00      	nop
 80070f0:	e004      	b.n	80070fc <HAL_UART_IRQHandler+0x2ec>
      return;
 80070f2:	bf00      	nop
 80070f4:	e002      	b.n	80070fc <HAL_UART_IRQHandler+0x2ec>
    return;
 80070f6:	bf00      	nop
 80070f8:	e000      	b.n	80070fc <HAL_UART_IRQHandler+0x2ec>
    return;
 80070fa:	bf00      	nop
  }
}
 80070fc:	3720      	adds	r7, #32
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	10000001 	.word	0x10000001
 8007108:	04000120 	.word	0x04000120
 800710c:	08007fa1 	.word	0x08007fa1

08007110 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007124:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007128:	b08e      	sub	sp, #56	; 0x38
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	431a      	orrs	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	431a      	orrs	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	4313      	orrs	r3, r2
 800714a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007152:	4313      	orrs	r3, r2
 8007154:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	4bc1      	ldr	r3, [pc, #772]	; (8007464 <UART_SetConfig+0x340>)
 800715e:	4013      	ands	r3, r2
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6812      	ldr	r2, [r2, #0]
 8007164:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007166:	430b      	orrs	r3, r1
 8007168:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	430a      	orrs	r2, r1
 800717e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4ab7      	ldr	r2, [pc, #732]	; (8007468 <UART_SetConfig+0x344>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d004      	beq.n	800719a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007196:	4313      	orrs	r3, r2
 8007198:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	4bb2      	ldr	r3, [pc, #712]	; (800746c <UART_SetConfig+0x348>)
 80071a2:	4013      	ands	r3, r2
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6812      	ldr	r2, [r2, #0]
 80071a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80071aa:	430b      	orrs	r3, r1
 80071ac:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b4:	f023 010f 	bic.w	r1, r3, #15
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4aa9      	ldr	r2, [pc, #676]	; (8007470 <UART_SetConfig+0x34c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d177      	bne.n	80072be <UART_SetConfig+0x19a>
 80071ce:	4ba9      	ldr	r3, [pc, #676]	; (8007474 <UART_SetConfig+0x350>)
 80071d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071d6:	2b28      	cmp	r3, #40	; 0x28
 80071d8:	d86c      	bhi.n	80072b4 <UART_SetConfig+0x190>
 80071da:	a201      	add	r2, pc, #4	; (adr r2, 80071e0 <UART_SetConfig+0xbc>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	08007285 	.word	0x08007285
 80071e4:	080072b5 	.word	0x080072b5
 80071e8:	080072b5 	.word	0x080072b5
 80071ec:	080072b5 	.word	0x080072b5
 80071f0:	080072b5 	.word	0x080072b5
 80071f4:	080072b5 	.word	0x080072b5
 80071f8:	080072b5 	.word	0x080072b5
 80071fc:	080072b5 	.word	0x080072b5
 8007200:	0800728d 	.word	0x0800728d
 8007204:	080072b5 	.word	0x080072b5
 8007208:	080072b5 	.word	0x080072b5
 800720c:	080072b5 	.word	0x080072b5
 8007210:	080072b5 	.word	0x080072b5
 8007214:	080072b5 	.word	0x080072b5
 8007218:	080072b5 	.word	0x080072b5
 800721c:	080072b5 	.word	0x080072b5
 8007220:	08007295 	.word	0x08007295
 8007224:	080072b5 	.word	0x080072b5
 8007228:	080072b5 	.word	0x080072b5
 800722c:	080072b5 	.word	0x080072b5
 8007230:	080072b5 	.word	0x080072b5
 8007234:	080072b5 	.word	0x080072b5
 8007238:	080072b5 	.word	0x080072b5
 800723c:	080072b5 	.word	0x080072b5
 8007240:	0800729d 	.word	0x0800729d
 8007244:	080072b5 	.word	0x080072b5
 8007248:	080072b5 	.word	0x080072b5
 800724c:	080072b5 	.word	0x080072b5
 8007250:	080072b5 	.word	0x080072b5
 8007254:	080072b5 	.word	0x080072b5
 8007258:	080072b5 	.word	0x080072b5
 800725c:	080072b5 	.word	0x080072b5
 8007260:	080072a5 	.word	0x080072a5
 8007264:	080072b5 	.word	0x080072b5
 8007268:	080072b5 	.word	0x080072b5
 800726c:	080072b5 	.word	0x080072b5
 8007270:	080072b5 	.word	0x080072b5
 8007274:	080072b5 	.word	0x080072b5
 8007278:	080072b5 	.word	0x080072b5
 800727c:	080072b5 	.word	0x080072b5
 8007280:	080072ad 	.word	0x080072ad
 8007284:	2301      	movs	r3, #1
 8007286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800728a:	e233      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800728c:	2304      	movs	r3, #4
 800728e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007292:	e22f      	b.n	80076f4 <UART_SetConfig+0x5d0>
 8007294:	2308      	movs	r3, #8
 8007296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800729a:	e22b      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800729c:	2310      	movs	r3, #16
 800729e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072a2:	e227      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80072a4:	2320      	movs	r3, #32
 80072a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072aa:	e223      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80072ac:	2340      	movs	r3, #64	; 0x40
 80072ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072b2:	e21f      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80072b4:	2380      	movs	r3, #128	; 0x80
 80072b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072ba:	bf00      	nop
 80072bc:	e21a      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a6d      	ldr	r2, [pc, #436]	; (8007478 <UART_SetConfig+0x354>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d132      	bne.n	800732e <UART_SetConfig+0x20a>
 80072c8:	4b6a      	ldr	r3, [pc, #424]	; (8007474 <UART_SetConfig+0x350>)
 80072ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072cc:	f003 0307 	and.w	r3, r3, #7
 80072d0:	2b05      	cmp	r3, #5
 80072d2:	d827      	bhi.n	8007324 <UART_SetConfig+0x200>
 80072d4:	a201      	add	r2, pc, #4	; (adr r2, 80072dc <UART_SetConfig+0x1b8>)
 80072d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072da:	bf00      	nop
 80072dc:	080072f5 	.word	0x080072f5
 80072e0:	080072fd 	.word	0x080072fd
 80072e4:	08007305 	.word	0x08007305
 80072e8:	0800730d 	.word	0x0800730d
 80072ec:	08007315 	.word	0x08007315
 80072f0:	0800731d 	.word	0x0800731d
 80072f4:	2300      	movs	r3, #0
 80072f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072fa:	e1fb      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80072fc:	2304      	movs	r3, #4
 80072fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007302:	e1f7      	b.n	80076f4 <UART_SetConfig+0x5d0>
 8007304:	2308      	movs	r3, #8
 8007306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800730a:	e1f3      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800730c:	2310      	movs	r3, #16
 800730e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007312:	e1ef      	b.n	80076f4 <UART_SetConfig+0x5d0>
 8007314:	2320      	movs	r3, #32
 8007316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800731a:	e1eb      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800731c:	2340      	movs	r3, #64	; 0x40
 800731e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007322:	e1e7      	b.n	80076f4 <UART_SetConfig+0x5d0>
 8007324:	2380      	movs	r3, #128	; 0x80
 8007326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800732a:	bf00      	nop
 800732c:	e1e2      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a52      	ldr	r2, [pc, #328]	; (800747c <UART_SetConfig+0x358>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d132      	bne.n	800739e <UART_SetConfig+0x27a>
 8007338:	4b4e      	ldr	r3, [pc, #312]	; (8007474 <UART_SetConfig+0x350>)
 800733a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733c:	f003 0307 	and.w	r3, r3, #7
 8007340:	2b05      	cmp	r3, #5
 8007342:	d827      	bhi.n	8007394 <UART_SetConfig+0x270>
 8007344:	a201      	add	r2, pc, #4	; (adr r2, 800734c <UART_SetConfig+0x228>)
 8007346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734a:	bf00      	nop
 800734c:	08007365 	.word	0x08007365
 8007350:	0800736d 	.word	0x0800736d
 8007354:	08007375 	.word	0x08007375
 8007358:	0800737d 	.word	0x0800737d
 800735c:	08007385 	.word	0x08007385
 8007360:	0800738d 	.word	0x0800738d
 8007364:	2300      	movs	r3, #0
 8007366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800736a:	e1c3      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800736c:	2304      	movs	r3, #4
 800736e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007372:	e1bf      	b.n	80076f4 <UART_SetConfig+0x5d0>
 8007374:	2308      	movs	r3, #8
 8007376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800737a:	e1bb      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800737c:	2310      	movs	r3, #16
 800737e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007382:	e1b7      	b.n	80076f4 <UART_SetConfig+0x5d0>
 8007384:	2320      	movs	r3, #32
 8007386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800738a:	e1b3      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800738c:	2340      	movs	r3, #64	; 0x40
 800738e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007392:	e1af      	b.n	80076f4 <UART_SetConfig+0x5d0>
 8007394:	2380      	movs	r3, #128	; 0x80
 8007396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800739a:	bf00      	nop
 800739c:	e1aa      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a37      	ldr	r2, [pc, #220]	; (8007480 <UART_SetConfig+0x35c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d132      	bne.n	800740e <UART_SetConfig+0x2ea>
 80073a8:	4b32      	ldr	r3, [pc, #200]	; (8007474 <UART_SetConfig+0x350>)
 80073aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ac:	f003 0307 	and.w	r3, r3, #7
 80073b0:	2b05      	cmp	r3, #5
 80073b2:	d827      	bhi.n	8007404 <UART_SetConfig+0x2e0>
 80073b4:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <UART_SetConfig+0x298>)
 80073b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ba:	bf00      	nop
 80073bc:	080073d5 	.word	0x080073d5
 80073c0:	080073dd 	.word	0x080073dd
 80073c4:	080073e5 	.word	0x080073e5
 80073c8:	080073ed 	.word	0x080073ed
 80073cc:	080073f5 	.word	0x080073f5
 80073d0:	080073fd 	.word	0x080073fd
 80073d4:	2300      	movs	r3, #0
 80073d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073da:	e18b      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80073dc:	2304      	movs	r3, #4
 80073de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073e2:	e187      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80073e4:	2308      	movs	r3, #8
 80073e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ea:	e183      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80073ec:	2310      	movs	r3, #16
 80073ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073f2:	e17f      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80073f4:	2320      	movs	r3, #32
 80073f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073fa:	e17b      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80073fc:	2340      	movs	r3, #64	; 0x40
 80073fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007402:	e177      	b.n	80076f4 <UART_SetConfig+0x5d0>
 8007404:	2380      	movs	r3, #128	; 0x80
 8007406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800740a:	bf00      	nop
 800740c:	e172      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a1c      	ldr	r2, [pc, #112]	; (8007484 <UART_SetConfig+0x360>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d144      	bne.n	80074a2 <UART_SetConfig+0x37e>
 8007418:	4b16      	ldr	r3, [pc, #88]	; (8007474 <UART_SetConfig+0x350>)
 800741a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	2b05      	cmp	r3, #5
 8007422:	d839      	bhi.n	8007498 <UART_SetConfig+0x374>
 8007424:	a201      	add	r2, pc, #4	; (adr r2, 800742c <UART_SetConfig+0x308>)
 8007426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742a:	bf00      	nop
 800742c:	08007445 	.word	0x08007445
 8007430:	0800744d 	.word	0x0800744d
 8007434:	08007455 	.word	0x08007455
 8007438:	0800745d 	.word	0x0800745d
 800743c:	08007489 	.word	0x08007489
 8007440:	08007491 	.word	0x08007491
 8007444:	2300      	movs	r3, #0
 8007446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800744a:	e153      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800744c:	2304      	movs	r3, #4
 800744e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007452:	e14f      	b.n	80076f4 <UART_SetConfig+0x5d0>
 8007454:	2308      	movs	r3, #8
 8007456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800745a:	e14b      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800745c:	2310      	movs	r3, #16
 800745e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007462:	e147      	b.n	80076f4 <UART_SetConfig+0x5d0>
 8007464:	cfff69f3 	.word	0xcfff69f3
 8007468:	58000c00 	.word	0x58000c00
 800746c:	11fff4ff 	.word	0x11fff4ff
 8007470:	40011000 	.word	0x40011000
 8007474:	58024400 	.word	0x58024400
 8007478:	40004400 	.word	0x40004400
 800747c:	40004800 	.word	0x40004800
 8007480:	40004c00 	.word	0x40004c00
 8007484:	40005000 	.word	0x40005000
 8007488:	2320      	movs	r3, #32
 800748a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800748e:	e131      	b.n	80076f4 <UART_SetConfig+0x5d0>
 8007490:	2340      	movs	r3, #64	; 0x40
 8007492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007496:	e12d      	b.n	80076f4 <UART_SetConfig+0x5d0>
 8007498:	2380      	movs	r3, #128	; 0x80
 800749a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800749e:	bf00      	nop
 80074a0:	e128      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4ab6      	ldr	r2, [pc, #728]	; (8007780 <UART_SetConfig+0x65c>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d178      	bne.n	800759e <UART_SetConfig+0x47a>
 80074ac:	4bb5      	ldr	r3, [pc, #724]	; (8007784 <UART_SetConfig+0x660>)
 80074ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074b4:	2b28      	cmp	r3, #40	; 0x28
 80074b6:	d86d      	bhi.n	8007594 <UART_SetConfig+0x470>
 80074b8:	a201      	add	r2, pc, #4	; (adr r2, 80074c0 <UART_SetConfig+0x39c>)
 80074ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074be:	bf00      	nop
 80074c0:	08007565 	.word	0x08007565
 80074c4:	08007595 	.word	0x08007595
 80074c8:	08007595 	.word	0x08007595
 80074cc:	08007595 	.word	0x08007595
 80074d0:	08007595 	.word	0x08007595
 80074d4:	08007595 	.word	0x08007595
 80074d8:	08007595 	.word	0x08007595
 80074dc:	08007595 	.word	0x08007595
 80074e0:	0800756d 	.word	0x0800756d
 80074e4:	08007595 	.word	0x08007595
 80074e8:	08007595 	.word	0x08007595
 80074ec:	08007595 	.word	0x08007595
 80074f0:	08007595 	.word	0x08007595
 80074f4:	08007595 	.word	0x08007595
 80074f8:	08007595 	.word	0x08007595
 80074fc:	08007595 	.word	0x08007595
 8007500:	08007575 	.word	0x08007575
 8007504:	08007595 	.word	0x08007595
 8007508:	08007595 	.word	0x08007595
 800750c:	08007595 	.word	0x08007595
 8007510:	08007595 	.word	0x08007595
 8007514:	08007595 	.word	0x08007595
 8007518:	08007595 	.word	0x08007595
 800751c:	08007595 	.word	0x08007595
 8007520:	0800757d 	.word	0x0800757d
 8007524:	08007595 	.word	0x08007595
 8007528:	08007595 	.word	0x08007595
 800752c:	08007595 	.word	0x08007595
 8007530:	08007595 	.word	0x08007595
 8007534:	08007595 	.word	0x08007595
 8007538:	08007595 	.word	0x08007595
 800753c:	08007595 	.word	0x08007595
 8007540:	08007585 	.word	0x08007585
 8007544:	08007595 	.word	0x08007595
 8007548:	08007595 	.word	0x08007595
 800754c:	08007595 	.word	0x08007595
 8007550:	08007595 	.word	0x08007595
 8007554:	08007595 	.word	0x08007595
 8007558:	08007595 	.word	0x08007595
 800755c:	08007595 	.word	0x08007595
 8007560:	0800758d 	.word	0x0800758d
 8007564:	2301      	movs	r3, #1
 8007566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800756a:	e0c3      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800756c:	2304      	movs	r3, #4
 800756e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007572:	e0bf      	b.n	80076f4 <UART_SetConfig+0x5d0>
 8007574:	2308      	movs	r3, #8
 8007576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800757a:	e0bb      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800757c:	2310      	movs	r3, #16
 800757e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007582:	e0b7      	b.n	80076f4 <UART_SetConfig+0x5d0>
 8007584:	2320      	movs	r3, #32
 8007586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800758a:	e0b3      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800758c:	2340      	movs	r3, #64	; 0x40
 800758e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007592:	e0af      	b.n	80076f4 <UART_SetConfig+0x5d0>
 8007594:	2380      	movs	r3, #128	; 0x80
 8007596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800759a:	bf00      	nop
 800759c:	e0aa      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a79      	ldr	r2, [pc, #484]	; (8007788 <UART_SetConfig+0x664>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d132      	bne.n	800760e <UART_SetConfig+0x4ea>
 80075a8:	4b76      	ldr	r3, [pc, #472]	; (8007784 <UART_SetConfig+0x660>)
 80075aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ac:	f003 0307 	and.w	r3, r3, #7
 80075b0:	2b05      	cmp	r3, #5
 80075b2:	d827      	bhi.n	8007604 <UART_SetConfig+0x4e0>
 80075b4:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <UART_SetConfig+0x498>)
 80075b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ba:	bf00      	nop
 80075bc:	080075d5 	.word	0x080075d5
 80075c0:	080075dd 	.word	0x080075dd
 80075c4:	080075e5 	.word	0x080075e5
 80075c8:	080075ed 	.word	0x080075ed
 80075cc:	080075f5 	.word	0x080075f5
 80075d0:	080075fd 	.word	0x080075fd
 80075d4:	2300      	movs	r3, #0
 80075d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075da:	e08b      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80075dc:	2304      	movs	r3, #4
 80075de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075e2:	e087      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80075e4:	2308      	movs	r3, #8
 80075e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ea:	e083      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80075ec:	2310      	movs	r3, #16
 80075ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075f2:	e07f      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80075f4:	2320      	movs	r3, #32
 80075f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075fa:	e07b      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80075fc:	2340      	movs	r3, #64	; 0x40
 80075fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007602:	e077      	b.n	80076f4 <UART_SetConfig+0x5d0>
 8007604:	2380      	movs	r3, #128	; 0x80
 8007606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800760a:	bf00      	nop
 800760c:	e072      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a5e      	ldr	r2, [pc, #376]	; (800778c <UART_SetConfig+0x668>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d132      	bne.n	800767e <UART_SetConfig+0x55a>
 8007618:	4b5a      	ldr	r3, [pc, #360]	; (8007784 <UART_SetConfig+0x660>)
 800761a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800761c:	f003 0307 	and.w	r3, r3, #7
 8007620:	2b05      	cmp	r3, #5
 8007622:	d827      	bhi.n	8007674 <UART_SetConfig+0x550>
 8007624:	a201      	add	r2, pc, #4	; (adr r2, 800762c <UART_SetConfig+0x508>)
 8007626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762a:	bf00      	nop
 800762c:	08007645 	.word	0x08007645
 8007630:	0800764d 	.word	0x0800764d
 8007634:	08007655 	.word	0x08007655
 8007638:	0800765d 	.word	0x0800765d
 800763c:	08007665 	.word	0x08007665
 8007640:	0800766d 	.word	0x0800766d
 8007644:	2300      	movs	r3, #0
 8007646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800764a:	e053      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800764c:	2304      	movs	r3, #4
 800764e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007652:	e04f      	b.n	80076f4 <UART_SetConfig+0x5d0>
 8007654:	2308      	movs	r3, #8
 8007656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800765a:	e04b      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800765c:	2310      	movs	r3, #16
 800765e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007662:	e047      	b.n	80076f4 <UART_SetConfig+0x5d0>
 8007664:	2320      	movs	r3, #32
 8007666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800766a:	e043      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800766c:	2340      	movs	r3, #64	; 0x40
 800766e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007672:	e03f      	b.n	80076f4 <UART_SetConfig+0x5d0>
 8007674:	2380      	movs	r3, #128	; 0x80
 8007676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800767a:	bf00      	nop
 800767c:	e03a      	b.n	80076f4 <UART_SetConfig+0x5d0>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a43      	ldr	r2, [pc, #268]	; (8007790 <UART_SetConfig+0x66c>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d132      	bne.n	80076ee <UART_SetConfig+0x5ca>
 8007688:	4b3e      	ldr	r3, [pc, #248]	; (8007784 <UART_SetConfig+0x660>)
 800768a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768c:	f003 0307 	and.w	r3, r3, #7
 8007690:	2b05      	cmp	r3, #5
 8007692:	d827      	bhi.n	80076e4 <UART_SetConfig+0x5c0>
 8007694:	a201      	add	r2, pc, #4	; (adr r2, 800769c <UART_SetConfig+0x578>)
 8007696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769a:	bf00      	nop
 800769c:	080076b5 	.word	0x080076b5
 80076a0:	080076bd 	.word	0x080076bd
 80076a4:	080076c5 	.word	0x080076c5
 80076a8:	080076cd 	.word	0x080076cd
 80076ac:	080076d5 	.word	0x080076d5
 80076b0:	080076dd 	.word	0x080076dd
 80076b4:	2302      	movs	r3, #2
 80076b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ba:	e01b      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80076bc:	2304      	movs	r3, #4
 80076be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076c2:	e017      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80076c4:	2308      	movs	r3, #8
 80076c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ca:	e013      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80076cc:	2310      	movs	r3, #16
 80076ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076d2:	e00f      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80076d4:	2320      	movs	r3, #32
 80076d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076da:	e00b      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80076dc:	2340      	movs	r3, #64	; 0x40
 80076de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076e2:	e007      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80076e4:	2380      	movs	r3, #128	; 0x80
 80076e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ea:	bf00      	nop
 80076ec:	e002      	b.n	80076f4 <UART_SetConfig+0x5d0>
 80076ee:	2380      	movs	r3, #128	; 0x80
 80076f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a25      	ldr	r2, [pc, #148]	; (8007790 <UART_SetConfig+0x66c>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	f040 80b8 	bne.w	8007870 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007700:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007704:	2b08      	cmp	r3, #8
 8007706:	d019      	beq.n	800773c <UART_SetConfig+0x618>
 8007708:	2b08      	cmp	r3, #8
 800770a:	dc04      	bgt.n	8007716 <UART_SetConfig+0x5f2>
 800770c:	2b02      	cmp	r3, #2
 800770e:	d009      	beq.n	8007724 <UART_SetConfig+0x600>
 8007710:	2b04      	cmp	r3, #4
 8007712:	d00b      	beq.n	800772c <UART_SetConfig+0x608>
 8007714:	e042      	b.n	800779c <UART_SetConfig+0x678>
 8007716:	2b20      	cmp	r3, #32
 8007718:	d02b      	beq.n	8007772 <UART_SetConfig+0x64e>
 800771a:	2b40      	cmp	r3, #64	; 0x40
 800771c:	d02c      	beq.n	8007778 <UART_SetConfig+0x654>
 800771e:	2b10      	cmp	r3, #16
 8007720:	d014      	beq.n	800774c <UART_SetConfig+0x628>
 8007722:	e03b      	b.n	800779c <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007724:	f7fe faa0 	bl	8005c68 <HAL_RCCEx_GetD3PCLK1Freq>
 8007728:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800772a:	e03d      	b.n	80077a8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800772c:	f107 0314 	add.w	r3, r7, #20
 8007730:	4618      	mov	r0, r3
 8007732:	f7fe faaf 	bl	8005c94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800773a:	e035      	b.n	80077a8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800773c:	f107 0308 	add.w	r3, r7, #8
 8007740:	4618      	mov	r0, r3
 8007742:	f7fe fbf3 	bl	8005f2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800774a:	e02d      	b.n	80077a8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800774c:	4b0d      	ldr	r3, [pc, #52]	; (8007784 <UART_SetConfig+0x660>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b00      	cmp	r3, #0
 8007756:	d009      	beq.n	800776c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007758:	4b0a      	ldr	r3, [pc, #40]	; (8007784 <UART_SetConfig+0x660>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	08db      	lsrs	r3, r3, #3
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	4a0c      	ldr	r2, [pc, #48]	; (8007794 <UART_SetConfig+0x670>)
 8007764:	fa22 f303 	lsr.w	r3, r2, r3
 8007768:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800776a:	e01d      	b.n	80077a8 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800776c:	4b09      	ldr	r3, [pc, #36]	; (8007794 <UART_SetConfig+0x670>)
 800776e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007770:	e01a      	b.n	80077a8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007772:	4b09      	ldr	r3, [pc, #36]	; (8007798 <UART_SetConfig+0x674>)
 8007774:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007776:	e017      	b.n	80077a8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007778:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800777c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800777e:	e013      	b.n	80077a8 <UART_SetConfig+0x684>
 8007780:	40011400 	.word	0x40011400
 8007784:	58024400 	.word	0x58024400
 8007788:	40007800 	.word	0x40007800
 800778c:	40007c00 	.word	0x40007c00
 8007790:	58000c00 	.word	0x58000c00
 8007794:	03d09000 	.word	0x03d09000
 8007798:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800779c:	2300      	movs	r3, #0
 800779e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80077a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 824d 	beq.w	8007c4a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	4aad      	ldr	r2, [pc, #692]	; (8007a6c <UART_SetConfig+0x948>)
 80077b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077ba:	461a      	mov	r2, r3
 80077bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077be:	fbb3 f3f2 	udiv	r3, r3, r2
 80077c2:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	4613      	mov	r3, r2
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	4413      	add	r3, r2
 80077ce:	6a3a      	ldr	r2, [r7, #32]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d305      	bcc.n	80077e0 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077da:	6a3a      	ldr	r2, [r7, #32]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d903      	bls.n	80077e8 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80077e6:	e230      	b.n	8007c4a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ea:	4618      	mov	r0, r3
 80077ec:	f04f 0100 	mov.w	r1, #0
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	4a9d      	ldr	r2, [pc, #628]	; (8007a6c <UART_SetConfig+0x948>)
 80077f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	f04f 0400 	mov.w	r4, #0
 8007800:	461a      	mov	r2, r3
 8007802:	4623      	mov	r3, r4
 8007804:	f7f8 fdb8 	bl	8000378 <__aeabi_uldivmod>
 8007808:	4603      	mov	r3, r0
 800780a:	460c      	mov	r4, r1
 800780c:	4619      	mov	r1, r3
 800780e:	4622      	mov	r2, r4
 8007810:	f04f 0300 	mov.w	r3, #0
 8007814:	f04f 0400 	mov.w	r4, #0
 8007818:	0214      	lsls	r4, r2, #8
 800781a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800781e:	020b      	lsls	r3, r1, #8
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6852      	ldr	r2, [r2, #4]
 8007824:	0852      	lsrs	r2, r2, #1
 8007826:	4611      	mov	r1, r2
 8007828:	f04f 0200 	mov.w	r2, #0
 800782c:	eb13 0b01 	adds.w	fp, r3, r1
 8007830:	eb44 0c02 	adc.w	ip, r4, r2
 8007834:	4658      	mov	r0, fp
 8007836:	4661      	mov	r1, ip
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f04f 0400 	mov.w	r4, #0
 8007840:	461a      	mov	r2, r3
 8007842:	4623      	mov	r3, r4
 8007844:	f7f8 fd98 	bl	8000378 <__aeabi_uldivmod>
 8007848:	4603      	mov	r3, r0
 800784a:	460c      	mov	r4, r1
 800784c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800784e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007854:	d308      	bcc.n	8007868 <UART_SetConfig+0x744>
 8007856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800785c:	d204      	bcs.n	8007868 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007864:	60da      	str	r2, [r3, #12]
 8007866:	e1f0      	b.n	8007c4a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800786e:	e1ec      	b.n	8007c4a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007878:	f040 8100 	bne.w	8007a7c <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800787c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007880:	2b40      	cmp	r3, #64	; 0x40
 8007882:	f200 80b7 	bhi.w	80079f4 <UART_SetConfig+0x8d0>
 8007886:	a201      	add	r2, pc, #4	; (adr r2, 800788c <UART_SetConfig+0x768>)
 8007888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788c:	08007991 	.word	0x08007991
 8007890:	08007999 	.word	0x08007999
 8007894:	080079f5 	.word	0x080079f5
 8007898:	080079f5 	.word	0x080079f5
 800789c:	080079a1 	.word	0x080079a1
 80078a0:	080079f5 	.word	0x080079f5
 80078a4:	080079f5 	.word	0x080079f5
 80078a8:	080079f5 	.word	0x080079f5
 80078ac:	080079b1 	.word	0x080079b1
 80078b0:	080079f5 	.word	0x080079f5
 80078b4:	080079f5 	.word	0x080079f5
 80078b8:	080079f5 	.word	0x080079f5
 80078bc:	080079f5 	.word	0x080079f5
 80078c0:	080079f5 	.word	0x080079f5
 80078c4:	080079f5 	.word	0x080079f5
 80078c8:	080079f5 	.word	0x080079f5
 80078cc:	080079c1 	.word	0x080079c1
 80078d0:	080079f5 	.word	0x080079f5
 80078d4:	080079f5 	.word	0x080079f5
 80078d8:	080079f5 	.word	0x080079f5
 80078dc:	080079f5 	.word	0x080079f5
 80078e0:	080079f5 	.word	0x080079f5
 80078e4:	080079f5 	.word	0x080079f5
 80078e8:	080079f5 	.word	0x080079f5
 80078ec:	080079f5 	.word	0x080079f5
 80078f0:	080079f5 	.word	0x080079f5
 80078f4:	080079f5 	.word	0x080079f5
 80078f8:	080079f5 	.word	0x080079f5
 80078fc:	080079f5 	.word	0x080079f5
 8007900:	080079f5 	.word	0x080079f5
 8007904:	080079f5 	.word	0x080079f5
 8007908:	080079f5 	.word	0x080079f5
 800790c:	080079e7 	.word	0x080079e7
 8007910:	080079f5 	.word	0x080079f5
 8007914:	080079f5 	.word	0x080079f5
 8007918:	080079f5 	.word	0x080079f5
 800791c:	080079f5 	.word	0x080079f5
 8007920:	080079f5 	.word	0x080079f5
 8007924:	080079f5 	.word	0x080079f5
 8007928:	080079f5 	.word	0x080079f5
 800792c:	080079f5 	.word	0x080079f5
 8007930:	080079f5 	.word	0x080079f5
 8007934:	080079f5 	.word	0x080079f5
 8007938:	080079f5 	.word	0x080079f5
 800793c:	080079f5 	.word	0x080079f5
 8007940:	080079f5 	.word	0x080079f5
 8007944:	080079f5 	.word	0x080079f5
 8007948:	080079f5 	.word	0x080079f5
 800794c:	080079f5 	.word	0x080079f5
 8007950:	080079f5 	.word	0x080079f5
 8007954:	080079f5 	.word	0x080079f5
 8007958:	080079f5 	.word	0x080079f5
 800795c:	080079f5 	.word	0x080079f5
 8007960:	080079f5 	.word	0x080079f5
 8007964:	080079f5 	.word	0x080079f5
 8007968:	080079f5 	.word	0x080079f5
 800796c:	080079f5 	.word	0x080079f5
 8007970:	080079f5 	.word	0x080079f5
 8007974:	080079f5 	.word	0x080079f5
 8007978:	080079f5 	.word	0x080079f5
 800797c:	080079f5 	.word	0x080079f5
 8007980:	080079f5 	.word	0x080079f5
 8007984:	080079f5 	.word	0x080079f5
 8007988:	080079f5 	.word	0x080079f5
 800798c:	080079ed 	.word	0x080079ed
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007990:	f7fd fa50 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
 8007994:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007996:	e033      	b.n	8007a00 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007998:	f7fd fa62 	bl	8004e60 <HAL_RCC_GetPCLK2Freq>
 800799c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800799e:	e02f      	b.n	8007a00 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079a0:	f107 0314 	add.w	r3, r7, #20
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fe f975 	bl	8005c94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079ae:	e027      	b.n	8007a00 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079b0:	f107 0308 	add.w	r3, r7, #8
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fe fab9 	bl	8005f2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079be:	e01f      	b.n	8007a00 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079c0:	4b2b      	ldr	r3, [pc, #172]	; (8007a70 <UART_SetConfig+0x94c>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0320 	and.w	r3, r3, #32
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d009      	beq.n	80079e0 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80079cc:	4b28      	ldr	r3, [pc, #160]	; (8007a70 <UART_SetConfig+0x94c>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	08db      	lsrs	r3, r3, #3
 80079d2:	f003 0303 	and.w	r3, r3, #3
 80079d6:	4a27      	ldr	r2, [pc, #156]	; (8007a74 <UART_SetConfig+0x950>)
 80079d8:	fa22 f303 	lsr.w	r3, r2, r3
 80079dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079de:	e00f      	b.n	8007a00 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80079e0:	4b24      	ldr	r3, [pc, #144]	; (8007a74 <UART_SetConfig+0x950>)
 80079e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079e4:	e00c      	b.n	8007a00 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80079e6:	4b24      	ldr	r3, [pc, #144]	; (8007a78 <UART_SetConfig+0x954>)
 80079e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079ea:	e009      	b.n	8007a00 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079f2:	e005      	b.n	8007a00 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80079f4:	2300      	movs	r3, #0
 80079f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80079fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 8121 	beq.w	8007c4a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0c:	4a17      	ldr	r2, [pc, #92]	; (8007a6c <UART_SetConfig+0x948>)
 8007a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a12:	461a      	mov	r2, r3
 8007a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a16:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a1a:	005a      	lsls	r2, r3, #1
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	085b      	lsrs	r3, r3, #1
 8007a22:	441a      	add	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a32:	2b0f      	cmp	r3, #15
 8007a34:	d916      	bls.n	8007a64 <UART_SetConfig+0x940>
 8007a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a3c:	d212      	bcs.n	8007a64 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	f023 030f 	bic.w	r3, r3, #15
 8007a46:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	085b      	lsrs	r3, r3, #1
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	f003 0307 	and.w	r3, r3, #7
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a56:	4313      	orrs	r3, r2
 8007a58:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007a60:	60da      	str	r2, [r3, #12]
 8007a62:	e0f2      	b.n	8007c4a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007a6a:	e0ee      	b.n	8007c4a <UART_SetConfig+0xb26>
 8007a6c:	080097e8 	.word	0x080097e8
 8007a70:	58024400 	.word	0x58024400
 8007a74:	03d09000 	.word	0x03d09000
 8007a78:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007a80:	2b40      	cmp	r3, #64	; 0x40
 8007a82:	f200 80b7 	bhi.w	8007bf4 <UART_SetConfig+0xad0>
 8007a86:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <UART_SetConfig+0x968>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007b91 	.word	0x08007b91
 8007a90:	08007b99 	.word	0x08007b99
 8007a94:	08007bf5 	.word	0x08007bf5
 8007a98:	08007bf5 	.word	0x08007bf5
 8007a9c:	08007ba1 	.word	0x08007ba1
 8007aa0:	08007bf5 	.word	0x08007bf5
 8007aa4:	08007bf5 	.word	0x08007bf5
 8007aa8:	08007bf5 	.word	0x08007bf5
 8007aac:	08007bb1 	.word	0x08007bb1
 8007ab0:	08007bf5 	.word	0x08007bf5
 8007ab4:	08007bf5 	.word	0x08007bf5
 8007ab8:	08007bf5 	.word	0x08007bf5
 8007abc:	08007bf5 	.word	0x08007bf5
 8007ac0:	08007bf5 	.word	0x08007bf5
 8007ac4:	08007bf5 	.word	0x08007bf5
 8007ac8:	08007bf5 	.word	0x08007bf5
 8007acc:	08007bc1 	.word	0x08007bc1
 8007ad0:	08007bf5 	.word	0x08007bf5
 8007ad4:	08007bf5 	.word	0x08007bf5
 8007ad8:	08007bf5 	.word	0x08007bf5
 8007adc:	08007bf5 	.word	0x08007bf5
 8007ae0:	08007bf5 	.word	0x08007bf5
 8007ae4:	08007bf5 	.word	0x08007bf5
 8007ae8:	08007bf5 	.word	0x08007bf5
 8007aec:	08007bf5 	.word	0x08007bf5
 8007af0:	08007bf5 	.word	0x08007bf5
 8007af4:	08007bf5 	.word	0x08007bf5
 8007af8:	08007bf5 	.word	0x08007bf5
 8007afc:	08007bf5 	.word	0x08007bf5
 8007b00:	08007bf5 	.word	0x08007bf5
 8007b04:	08007bf5 	.word	0x08007bf5
 8007b08:	08007bf5 	.word	0x08007bf5
 8007b0c:	08007be7 	.word	0x08007be7
 8007b10:	08007bf5 	.word	0x08007bf5
 8007b14:	08007bf5 	.word	0x08007bf5
 8007b18:	08007bf5 	.word	0x08007bf5
 8007b1c:	08007bf5 	.word	0x08007bf5
 8007b20:	08007bf5 	.word	0x08007bf5
 8007b24:	08007bf5 	.word	0x08007bf5
 8007b28:	08007bf5 	.word	0x08007bf5
 8007b2c:	08007bf5 	.word	0x08007bf5
 8007b30:	08007bf5 	.word	0x08007bf5
 8007b34:	08007bf5 	.word	0x08007bf5
 8007b38:	08007bf5 	.word	0x08007bf5
 8007b3c:	08007bf5 	.word	0x08007bf5
 8007b40:	08007bf5 	.word	0x08007bf5
 8007b44:	08007bf5 	.word	0x08007bf5
 8007b48:	08007bf5 	.word	0x08007bf5
 8007b4c:	08007bf5 	.word	0x08007bf5
 8007b50:	08007bf5 	.word	0x08007bf5
 8007b54:	08007bf5 	.word	0x08007bf5
 8007b58:	08007bf5 	.word	0x08007bf5
 8007b5c:	08007bf5 	.word	0x08007bf5
 8007b60:	08007bf5 	.word	0x08007bf5
 8007b64:	08007bf5 	.word	0x08007bf5
 8007b68:	08007bf5 	.word	0x08007bf5
 8007b6c:	08007bf5 	.word	0x08007bf5
 8007b70:	08007bf5 	.word	0x08007bf5
 8007b74:	08007bf5 	.word	0x08007bf5
 8007b78:	08007bf5 	.word	0x08007bf5
 8007b7c:	08007bf5 	.word	0x08007bf5
 8007b80:	08007bf5 	.word	0x08007bf5
 8007b84:	08007bf5 	.word	0x08007bf5
 8007b88:	08007bf5 	.word	0x08007bf5
 8007b8c:	08007bed 	.word	0x08007bed
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b90:	f7fd f950 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
 8007b94:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007b96:	e033      	b.n	8007c00 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b98:	f7fd f962 	bl	8004e60 <HAL_RCC_GetPCLK2Freq>
 8007b9c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007b9e:	e02f      	b.n	8007c00 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ba0:	f107 0314 	add.w	r3, r7, #20
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fe f875 	bl	8005c94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bae:	e027      	b.n	8007c00 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bb0:	f107 0308 	add.w	r3, r7, #8
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7fe f9b9 	bl	8005f2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bbe:	e01f      	b.n	8007c00 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bc0:	4b2c      	ldr	r3, [pc, #176]	; (8007c74 <UART_SetConfig+0xb50>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0320 	and.w	r3, r3, #32
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d009      	beq.n	8007be0 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007bcc:	4b29      	ldr	r3, [pc, #164]	; (8007c74 <UART_SetConfig+0xb50>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	08db      	lsrs	r3, r3, #3
 8007bd2:	f003 0303 	and.w	r3, r3, #3
 8007bd6:	4a28      	ldr	r2, [pc, #160]	; (8007c78 <UART_SetConfig+0xb54>)
 8007bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007bde:	e00f      	b.n	8007c00 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8007be0:	4b25      	ldr	r3, [pc, #148]	; (8007c78 <UART_SetConfig+0xb54>)
 8007be2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007be4:	e00c      	b.n	8007c00 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007be6:	4b25      	ldr	r3, [pc, #148]	; (8007c7c <UART_SetConfig+0xb58>)
 8007be8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bea:	e009      	b.n	8007c00 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bf2:	e005      	b.n	8007c00 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007bfe:	bf00      	nop
    }

    if (pclk != 0U)
 8007c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d021      	beq.n	8007c4a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0a:	4a1d      	ldr	r2, [pc, #116]	; (8007c80 <UART_SetConfig+0xb5c>)
 8007c0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c10:	461a      	mov	r2, r3
 8007c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c14:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	085b      	lsrs	r3, r3, #1
 8007c1e:	441a      	add	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2e:	2b0f      	cmp	r3, #15
 8007c30:	d908      	bls.n	8007c44 <UART_SetConfig+0xb20>
 8007c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c38:	d204      	bcs.n	8007c44 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c40:	60da      	str	r2, [r3, #12]
 8007c42:	e002      	b.n	8007c4a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007c66:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3738      	adds	r7, #56	; 0x38
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007c74:	58024400 	.word	0x58024400
 8007c78:	03d09000 	.word	0x03d09000
 8007c7c:	003d0900 	.word	0x003d0900
 8007c80:	080097e8 	.word	0x080097e8

08007c84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00a      	beq.n	8007cae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00a      	beq.n	8007cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	430a      	orrs	r2, r1
 8007cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd4:	f003 0304 	and.w	r3, r3, #4
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00a      	beq.n	8007cf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf6:	f003 0308 	and.w	r3, r3, #8
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	430a      	orrs	r2, r1
 8007d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d18:	f003 0310 	and.w	r3, r3, #16
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00a      	beq.n	8007d36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3a:	f003 0320 	and.w	r3, r3, #32
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00a      	beq.n	8007d58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d01a      	beq.n	8007d9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d82:	d10a      	bne.n	8007d9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00a      	beq.n	8007dbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	430a      	orrs	r2, r1
 8007dba:	605a      	str	r2, [r3, #4]
  }
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b086      	sub	sp, #24
 8007dcc:	af02      	add	r7, sp, #8
 8007dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007dd8:	f7fb fae4 	bl	80033a4 <HAL_GetTick>
 8007ddc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0308 	and.w	r3, r3, #8
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	d10e      	bne.n	8007e0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f82c 	bl	8007e58 <UART_WaitOnFlagUntilTimeout>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e022      	b.n	8007e50 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0304 	and.w	r3, r3, #4
 8007e14:	2b04      	cmp	r3, #4
 8007e16:	d10e      	bne.n	8007e36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f816 	bl	8007e58 <UART_WaitOnFlagUntilTimeout>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e00c      	b.n	8007e50 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	603b      	str	r3, [r7, #0]
 8007e64:	4613      	mov	r3, r2
 8007e66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e68:	e062      	b.n	8007f30 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e70:	d05e      	beq.n	8007f30 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e72:	f7fb fa97 	bl	80033a4 <HAL_GetTick>
 8007e76:	4602      	mov	r2, r0
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d302      	bcc.n	8007e88 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d11d      	bne.n	8007ec4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e96:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689a      	ldr	r2, [r3, #8]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 0201 	bic.w	r2, r2, #1
 8007ea6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e045      	b.n	8007f50 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0304 	and.w	r3, r3, #4
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d02e      	beq.n	8007f30 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	69db      	ldr	r3, [r3, #28]
 8007ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ee0:	d126      	bne.n	8007f30 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007eea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007efa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689a      	ldr	r2, [r3, #8]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f022 0201 	bic.w	r2, r2, #1
 8007f0a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2220      	movs	r2, #32
 8007f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2220      	movs	r2, #32
 8007f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e00f      	b.n	8007f50 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	69da      	ldr	r2, [r3, #28]
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	4013      	ands	r3, r2
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	bf0c      	ite	eq
 8007f40:	2301      	moveq	r3, #1
 8007f42:	2300      	movne	r3, #0
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	461a      	mov	r2, r3
 8007f48:	79fb      	ldrb	r3, [r7, #7]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d08d      	beq.n	8007e6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007f6e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6899      	ldr	r1, [r3, #8]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	4b08      	ldr	r3, [pc, #32]	; (8007f9c <UART_EndRxTransfer+0x44>)
 8007f7c:	400b      	ands	r3, r1
 8007f7e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2220      	movs	r2, #32
 8007f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8007f8e:	bf00      	nop
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	effffffe 	.word	0xeffffffe

08007fa0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f7ff f8a6 	bl	8007110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fc4:	bf00      	nop
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fda:	2b21      	cmp	r3, #33	; 0x21
 8007fdc:	d12a      	bne.n	8008034 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d110      	bne.n	800800c <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ff8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008008:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800800a:	e013      	b.n	8008034 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008010:	781a      	ldrb	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800801c:	1c5a      	adds	r2, r3, #1
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008028:	b29b      	uxth	r3, r3
 800802a:	3b01      	subs	r3, #1
 800802c:	b29a      	uxth	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800804e:	2b21      	cmp	r3, #33	; 0x21
 8008050:	d12f      	bne.n	80080b2 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008058:	b29b      	uxth	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d110      	bne.n	8008080 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800806c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800807c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800807e:	e018      	b.n	80080b2 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008084:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	881b      	ldrh	r3, [r3, #0]
 800808a:	461a      	mov	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008094:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800809a:	1c9a      	adds	r2, r3, #2
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	3b01      	subs	r3, #1
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80080b2:	bf00      	nop
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080be:	b480      	push	{r7}
 80080c0:	b085      	sub	sp, #20
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080cc:	2b21      	cmp	r3, #33	; 0x21
 80080ce:	d13d      	bne.n	800814c <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080d6:	81fb      	strh	r3, [r7, #14]
 80080d8:	e035      	b.n	8008146 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d111      	bne.n	800810a <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689a      	ldr	r2, [r3, #8]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80080f4:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008104:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8008106:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8008108:	e020      	b.n	800814c <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	69db      	ldr	r3, [r3, #28]
 8008110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008114:	2b00      	cmp	r3, #0
 8008116:	d013      	beq.n	8008140 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800811c:	781a      	ldrb	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008128:	1c5a      	adds	r2, r3, #1
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008134:	b29b      	uxth	r3, r3
 8008136:	3b01      	subs	r3, #1
 8008138:	b29a      	uxth	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008140:	89fb      	ldrh	r3, [r7, #14]
 8008142:	3b01      	subs	r3, #1
 8008144:	81fb      	strh	r3, [r7, #14]
 8008146:	89fb      	ldrh	r3, [r7, #14]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1c6      	bne.n	80080da <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800814c:	bf00      	nop
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008166:	2b21      	cmp	r3, #33	; 0x21
 8008168:	d142      	bne.n	80081f0 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008170:	81fb      	strh	r3, [r7, #14]
 8008172:	e03a      	b.n	80081ea <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800817a:	b29b      	uxth	r3, r3
 800817c:	2b00      	cmp	r3, #0
 800817e:	d111      	bne.n	80081a4 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689a      	ldr	r2, [r3, #8]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800818e:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800819e:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80081a0:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 80081a2:	e025      	b.n	80081f0 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d018      	beq.n	80081e4 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b6:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	461a      	mov	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081c6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081cc:	1c9a      	adds	r2, r3, #2
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081d8:	b29b      	uxth	r3, r3
 80081da:	3b01      	subs	r3, #1
 80081dc:	b29a      	uxth	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80081e4:	89fb      	ldrh	r3, [r7, #14]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	81fb      	strh	r3, [r7, #14]
 80081ea:	89fb      	ldrh	r3, [r7, #14]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1c1      	bne.n	8008174 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 80081f0:	bf00      	nop
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008212:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2220      	movs	r2, #32
 8008218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7fa fe5c 	bl	8002ee0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008228:	bf00      	nop
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800823e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008246:	2b22      	cmp	r3, #34	; 0x22
 8008248:	d13b      	bne.n	80082c2 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008250:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008252:	89bb      	ldrh	r3, [r7, #12]
 8008254:	b2d9      	uxtb	r1, r3
 8008256:	89fb      	ldrh	r3, [r7, #14]
 8008258:	b2da      	uxtb	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800825e:	400a      	ands	r2, r1
 8008260:	b2d2      	uxtb	r2, r2
 8008262:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008268:	1c5a      	adds	r2, r3, #1
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008274:	b29b      	uxth	r3, r3
 8008276:	3b01      	subs	r3, #1
 8008278:	b29a      	uxth	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008286:	b29b      	uxth	r3, r3
 8008288:	2b00      	cmp	r3, #0
 800828a:	d122      	bne.n	80082d2 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800829a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689a      	ldr	r2, [r3, #8]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f022 0201 	bic.w	r2, r2, #1
 80082aa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2220      	movs	r2, #32
 80082b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7fa fe20 	bl	8002f00 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082c0:	e007      	b.n	80082d2 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	699a      	ldr	r2, [r3, #24]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f042 0208 	orr.w	r2, r2, #8
 80082d0:	619a      	str	r2, [r3, #24]
}
 80082d2:	bf00      	nop
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b084      	sub	sp, #16
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80082e8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082f0:	2b22      	cmp	r3, #34	; 0x22
 80082f2:	d13b      	bne.n	800836c <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fa:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008300:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008302:	89ba      	ldrh	r2, [r7, #12]
 8008304:	89fb      	ldrh	r3, [r7, #14]
 8008306:	4013      	ands	r3, r2
 8008308:	b29a      	uxth	r2, r3
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008312:	1c9a      	adds	r2, r3, #2
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800831e:	b29b      	uxth	r3, r3
 8008320:	3b01      	subs	r3, #1
 8008322:	b29a      	uxth	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008330:	b29b      	uxth	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d122      	bne.n	800837c <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008344:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	689a      	ldr	r2, [r3, #8]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f022 0201 	bic.w	r2, r2, #1
 8008354:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2220      	movs	r2, #32
 800835a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7fa fdcb 	bl	8002f00 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800836a:	e007      	b.n	800837c <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	699a      	ldr	r2, [r3, #24]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f042 0208 	orr.w	r2, r2, #8
 800837a:	619a      	str	r2, [r3, #24]
}
 800837c:	bf00      	nop
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008392:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800839a:	2b22      	cmp	r3, #34	; 0x22
 800839c:	d166      	bne.n	800846c <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80083a4:	81fb      	strh	r3, [r7, #14]
 80083a6:	e03d      	b.n	8008424 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ae:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80083b0:	893b      	ldrh	r3, [r7, #8]
 80083b2:	b2d9      	uxtb	r1, r3
 80083b4:	89bb      	ldrh	r3, [r7, #12]
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083bc:	400a      	ands	r2, r1
 80083be:	b2d2      	uxtb	r2, r2
 80083c0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c6:	1c5a      	adds	r2, r3, #1
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	3b01      	subs	r3, #1
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d119      	bne.n	800841e <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083f8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6899      	ldr	r1, [r3, #8]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	4b1f      	ldr	r3, [pc, #124]	; (8008484 <UART_RxISR_8BIT_FIFOEN+0x100>)
 8008406:	400b      	ands	r3, r1
 8008408:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2220      	movs	r2, #32
 800840e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7fa fd71 	bl	8002f00 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800841e:	89fb      	ldrh	r3, [r7, #14]
 8008420:	3b01      	subs	r3, #1
 8008422:	81fb      	strh	r3, [r7, #14]
 8008424:	89fb      	ldrh	r3, [r7, #14]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1be      	bne.n	80083a8 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008430:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008432:	897b      	ldrh	r3, [r7, #10]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d021      	beq.n	800847c <UART_RxISR_8BIT_FIFOEN+0xf8>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800843e:	897a      	ldrh	r2, [r7, #10]
 8008440:	429a      	cmp	r2, r3
 8008442:	d21b      	bcs.n	800847c <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689a      	ldr	r2, [r3, #8]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008452:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a0c      	ldr	r2, [pc, #48]	; (8008488 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8008458:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f042 0220 	orr.w	r2, r2, #32
 8008468:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800846a:	e007      	b.n	800847c <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	699a      	ldr	r2, [r3, #24]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f042 0208 	orr.w	r2, r2, #8
 800847a:	619a      	str	r2, [r3, #24]
}
 800847c:	bf00      	nop
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	effffffe 	.word	0xeffffffe
 8008488:	08008231 	.word	0x08008231

0800848c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b086      	sub	sp, #24
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800849a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084a2:	2b22      	cmp	r3, #34	; 0x22
 80084a4:	d166      	bne.n	8008574 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80084ac:	82fb      	strh	r3, [r7, #22]
 80084ae:	e03d      	b.n	800852c <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084bc:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 80084be:	8a3a      	ldrh	r2, [r7, #16]
 80084c0:	8abb      	ldrh	r3, [r7, #20]
 80084c2:	4013      	ands	r3, r2
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ce:	1c9a      	adds	r2, r3, #2
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084da:	b29b      	uxth	r3, r3
 80084dc:	3b01      	subs	r3, #1
 80084de:	b29a      	uxth	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d119      	bne.n	8008526 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008500:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	6899      	ldr	r1, [r3, #8]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	4b1f      	ldr	r3, [pc, #124]	; (800858c <UART_RxISR_16BIT_FIFOEN+0x100>)
 800850e:	400b      	ands	r3, r1
 8008510:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2220      	movs	r2, #32
 8008516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f7fa fced 	bl	8002f00 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008526:	8afb      	ldrh	r3, [r7, #22]
 8008528:	3b01      	subs	r3, #1
 800852a:	82fb      	strh	r3, [r7, #22]
 800852c:	8afb      	ldrh	r3, [r7, #22]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1be      	bne.n	80084b0 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008538:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800853a:	8a7b      	ldrh	r3, [r7, #18]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d021      	beq.n	8008584 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008546:	8a7a      	ldrh	r2, [r7, #18]
 8008548:	429a      	cmp	r2, r3
 800854a:	d21b      	bcs.n	8008584 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689a      	ldr	r2, [r3, #8]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800855a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a0c      	ldr	r2, [pc, #48]	; (8008590 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8008560:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f042 0220 	orr.w	r2, r2, #32
 8008570:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008572:	e007      	b.n	8008584 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	699a      	ldr	r2, [r3, #24]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f042 0208 	orr.w	r2, r2, #8
 8008582:	619a      	str	r2, [r3, #24]
}
 8008584:	bf00      	nop
 8008586:	3718      	adds	r7, #24
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	effffffe 	.word	0xeffffffe
 8008590:	080082db 	.word	0x080082db

08008594 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d101      	bne.n	80085e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80085e2:	2302      	movs	r3, #2
 80085e4:	e027      	b.n	8008636 <HAL_UARTEx_DisableFifoMode+0x66>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2224      	movs	r2, #36	; 0x24
 80085f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f022 0201 	bic.w	r2, r2, #1
 800860c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008614:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2220      	movs	r2, #32
 8008628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3714      	adds	r7, #20
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b084      	sub	sp, #16
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008652:	2b01      	cmp	r3, #1
 8008654:	d101      	bne.n	800865a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008656:	2302      	movs	r3, #2
 8008658:	e02d      	b.n	80086b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2224      	movs	r2, #36	; 0x24
 8008666:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f022 0201 	bic.w	r2, r2, #1
 8008680:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	430a      	orrs	r2, r1
 8008694:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f850 	bl	800873c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2220      	movs	r2, #32
 80086a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d101      	bne.n	80086d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80086d2:	2302      	movs	r3, #2
 80086d4:	e02d      	b.n	8008732 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2224      	movs	r2, #36	; 0x24
 80086e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f022 0201 	bic.w	r2, r2, #1
 80086fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	430a      	orrs	r2, r1
 8008710:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f812 	bl	800873c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2220      	movs	r2, #32
 8008724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
	...

0800873c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800873c:	b480      	push	{r7}
 800873e:	b089      	sub	sp, #36	; 0x24
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008744:	4a2f      	ldr	r2, [pc, #188]	; (8008804 <UARTEx_SetNbDataToProcess+0xc8>)
 8008746:	f107 0314 	add.w	r3, r7, #20
 800874a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800874e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008752:	4a2d      	ldr	r2, [pc, #180]	; (8008808 <UARTEx_SetNbDataToProcess+0xcc>)
 8008754:	f107 030c 	add.w	r3, r7, #12
 8008758:	e892 0003 	ldmia.w	r2, {r0, r1}
 800875c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008764:	2b00      	cmp	r3, #0
 8008766:	d108      	bne.n	800877a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008778:	e03d      	b.n	80087f6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800877a:	2310      	movs	r3, #16
 800877c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800877e:	2310      	movs	r3, #16
 8008780:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	0e5b      	lsrs	r3, r3, #25
 800878a:	b2db      	uxtb	r3, r3
 800878c:	f003 0307 	and.w	r3, r3, #7
 8008790:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	0f5b      	lsrs	r3, r3, #29
 800879a:	b2db      	uxtb	r3, r3
 800879c:	f003 0307 	and.w	r3, r3, #7
 80087a0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80087a2:	7fbb      	ldrb	r3, [r7, #30]
 80087a4:	7f3a      	ldrb	r2, [r7, #28]
 80087a6:	f107 0120 	add.w	r1, r7, #32
 80087aa:	440a      	add	r2, r1
 80087ac:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80087b0:	fb02 f303 	mul.w	r3, r2, r3
 80087b4:	7f3a      	ldrb	r2, [r7, #28]
 80087b6:	f107 0120 	add.w	r1, r7, #32
 80087ba:	440a      	add	r2, r1
 80087bc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80087c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80087cc:	7ffb      	ldrb	r3, [r7, #31]
 80087ce:	7f7a      	ldrb	r2, [r7, #29]
 80087d0:	f107 0120 	add.w	r1, r7, #32
 80087d4:	440a      	add	r2, r1
 80087d6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80087da:	fb02 f303 	mul.w	r3, r2, r3
 80087de:	7f7a      	ldrb	r2, [r7, #29]
 80087e0:	f107 0120 	add.w	r1, r7, #32
 80087e4:	440a      	add	r2, r1
 80087e6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80087ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80087f6:	bf00      	nop
 80087f8:	3724      	adds	r7, #36	; 0x24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	080097bc 	.word	0x080097bc
 8008808:	080097c4 	.word	0x080097c4

0800880c <arm_fill_f32>:
 800880c:	b410      	push	{r4}
 800880e:	088c      	lsrs	r4, r1, #2
 8008810:	d010      	beq.n	8008834 <arm_fill_f32+0x28>
 8008812:	f100 0310 	add.w	r3, r0, #16
 8008816:	4622      	mov	r2, r4
 8008818:	3a01      	subs	r2, #1
 800881a:	ed03 0a04 	vstr	s0, [r3, #-16]
 800881e:	ed03 0a03 	vstr	s0, [r3, #-12]
 8008822:	f103 0310 	add.w	r3, r3, #16
 8008826:	ed03 0a06 	vstr	s0, [r3, #-24]	; 0xffffffe8
 800882a:	ed03 0a05 	vstr	s0, [r3, #-20]	; 0xffffffec
 800882e:	d1f3      	bne.n	8008818 <arm_fill_f32+0xc>
 8008830:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8008834:	f011 0103 	ands.w	r1, r1, #3
 8008838:	d003      	beq.n	8008842 <arm_fill_f32+0x36>
 800883a:	3901      	subs	r1, #1
 800883c:	eca0 0a01 	vstmia	r0!, {s0}
 8008840:	d1fb      	bne.n	800883a <arm_fill_f32+0x2e>
 8008842:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008846:	4770      	bx	lr

08008848 <arm_copy_q15>:
 8008848:	b4f0      	push	{r4, r5, r6, r7}
 800884a:	0897      	lsrs	r7, r2, #2
 800884c:	d015      	beq.n	800887a <arm_copy_q15+0x32>
 800884e:	f101 0408 	add.w	r4, r1, #8
 8008852:	f100 0308 	add.w	r3, r0, #8
 8008856:	463d      	mov	r5, r7
 8008858:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800885c:	3d01      	subs	r5, #1
 800885e:	f103 0308 	add.w	r3, r3, #8
 8008862:	f104 0408 	add.w	r4, r4, #8
 8008866:	f844 6c10 	str.w	r6, [r4, #-16]
 800886a:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800886e:	f844 6c0c 	str.w	r6, [r4, #-12]
 8008872:	d1f1      	bne.n	8008858 <arm_copy_q15+0x10>
 8008874:	00ff      	lsls	r7, r7, #3
 8008876:	4439      	add	r1, r7
 8008878:	4438      	add	r0, r7
 800887a:	f012 0203 	ands.w	r2, r2, #3
 800887e:	d006      	beq.n	800888e <arm_copy_q15+0x46>
 8008880:	3902      	subs	r1, #2
 8008882:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8008886:	3a01      	subs	r2, #1
 8008888:	f821 3f02 	strh.w	r3, [r1, #2]!
 800888c:	d1f9      	bne.n	8008882 <arm_copy_q15+0x3a>
 800888e:	bcf0      	pop	{r4, r5, r6, r7}
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop

08008894 <arm_copy_f32>:
 8008894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008898:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800889c:	d01e      	beq.n	80088dc <arm_copy_f32+0x48>
 800889e:	f100 0410 	add.w	r4, r0, #16
 80088a2:	f101 0310 	add.w	r3, r1, #16
 80088a6:	4645      	mov	r5, r8
 80088a8:	f854 cc10 	ldr.w	ip, [r4, #-16]
 80088ac:	3d01      	subs	r5, #1
 80088ae:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 80088b2:	f103 0310 	add.w	r3, r3, #16
 80088b6:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80088ba:	f104 0410 	add.w	r4, r4, #16
 80088be:	f854 6c14 	ldr.w	r6, [r4, #-20]
 80088c2:	f843 cc20 	str.w	ip, [r3, #-32]
 80088c6:	f843 ec1c 	str.w	lr, [r3, #-28]
 80088ca:	f843 7c18 	str.w	r7, [r3, #-24]
 80088ce:	f843 6c14 	str.w	r6, [r3, #-20]
 80088d2:	d1e9      	bne.n	80088a8 <arm_copy_f32+0x14>
 80088d4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80088d8:	4440      	add	r0, r8
 80088da:	4441      	add	r1, r8
 80088dc:	f012 0203 	ands.w	r2, r2, #3
 80088e0:	d005      	beq.n	80088ee <arm_copy_f32+0x5a>
 80088e2:	f850 3b04 	ldr.w	r3, [r0], #4
 80088e6:	3a01      	subs	r2, #1
 80088e8:	f841 3b04 	str.w	r3, [r1], #4
 80088ec:	d1f9      	bne.n	80088e2 <arm_copy_f32+0x4e>
 80088ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088f2:	bf00      	nop

080088f4 <arm_std_f32>:
 80088f4:	2901      	cmp	r1, #1
 80088f6:	d065      	beq.n	80089c4 <arm_std_f32+0xd0>
 80088f8:	eddf 5a39 	vldr	s11, [pc, #228]	; 80089e0 <arm_std_f32+0xec>
 80088fc:	b530      	push	{r4, r5, lr}
 80088fe:	088d      	lsrs	r5, r1, #2
 8008900:	b083      	sub	sp, #12
 8008902:	d062      	beq.n	80089ca <arm_std_f32+0xd6>
 8008904:	eef0 6a65 	vmov.f32	s13, s11
 8008908:	f100 0310 	add.w	r3, r0, #16
 800890c:	462c      	mov	r4, r5
 800890e:	ed53 7a04 	vldr	s15, [r3, #-16]
 8008912:	3c01      	subs	r4, #1
 8008914:	ed13 7a03 	vldr	s14, [r3, #-12]
 8008918:	f103 0310 	add.w	r3, r3, #16
 800891c:	ee27 4aa7 	vmul.f32	s8, s15, s15
 8008920:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 8008924:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8008928:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800892c:	ee27 5a07 	vmul.f32	s10, s14, s14
 8008930:	ee74 5a25 	vadd.f32	s11, s8, s11
 8008934:	ee36 7a87 	vadd.f32	s14, s13, s14
 8008938:	ee64 6aa4 	vmul.f32	s13, s9, s9
 800893c:	ee75 5a25 	vadd.f32	s11, s10, s11
 8008940:	ee77 7a24 	vadd.f32	s15, s14, s9
 8008944:	ee26 7a06 	vmul.f32	s14, s12, s12
 8008948:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800894c:	ee77 6a86 	vadd.f32	s13, s15, s12
 8008950:	ee77 5a25 	vadd.f32	s11, s14, s11
 8008954:	d1db      	bne.n	800890e <arm_std_f32+0x1a>
 8008956:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800895a:	f011 0303 	ands.w	r3, r1, #3
 800895e:	d009      	beq.n	8008974 <arm_std_f32+0x80>
 8008960:	ecf0 7a01 	vldmia	r0!, {s15}
 8008964:	3b01      	subs	r3, #1
 8008966:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800896a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800896e:	ee75 5a87 	vadd.f32	s11, s11, s14
 8008972:	d1f5      	bne.n	8008960 <arm_std_f32+0x6c>
 8008974:	ee07 1a90 	vmov	s15, r1
 8008978:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800897c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008984:	ee77 6ac6 	vsub.f32	s13, s15, s12
 8008988:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 800898c:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 8008990:	ee27 7a07 	vmul.f32	s14, s14, s14
 8008994:	ee27 7a00 	vmul.f32	s14, s14, s0
 8008998:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800899c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80089a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089a4:	db0a      	blt.n	80089bc <arm_std_f32+0xc8>
 80089a6:	eeb1 0ac7 	vsqrt.f32	s0, s14
 80089aa:	eeb4 0a40 	vcmp.f32	s0, s0
 80089ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089b2:	d10d      	bne.n	80089d0 <arm_std_f32+0xdc>
 80089b4:	ed82 0a00 	vstr	s0, [r2]
 80089b8:	b003      	add	sp, #12
 80089ba:	bd30      	pop	{r4, r5, pc}
 80089bc:	2300      	movs	r3, #0
 80089be:	6013      	str	r3, [r2, #0]
 80089c0:	b003      	add	sp, #12
 80089c2:	bd30      	pop	{r4, r5, pc}
 80089c4:	2300      	movs	r3, #0
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	4770      	bx	lr
 80089ca:	eef0 6a65 	vmov.f32	s13, s11
 80089ce:	e7c4      	b.n	800895a <arm_std_f32+0x66>
 80089d0:	eeb0 0a47 	vmov.f32	s0, s14
 80089d4:	9201      	str	r2, [sp, #4]
 80089d6:	f000 fd0b 	bl	80093f0 <sqrtf>
 80089da:	9a01      	ldr	r2, [sp, #4]
 80089dc:	e7ea      	b.n	80089b4 <arm_std_f32+0xc0>
 80089de:	bf00      	nop
 80089e0:	00000000 	.word	0x00000000

080089e4 <arm_mean_f32>:
 80089e4:	b430      	push	{r4, r5}
 80089e6:	088d      	lsrs	r5, r1, #2
 80089e8:	d02d      	beq.n	8008a46 <arm_mean_f32+0x62>
 80089ea:	f100 0310 	add.w	r3, r0, #16
 80089ee:	462c      	mov	r4, r5
 80089f0:	eddf 7a16 	vldr	s15, [pc, #88]	; 8008a4c <arm_mean_f32+0x68>
 80089f4:	ed13 7a04 	vldr	s14, [r3, #-16]
 80089f8:	3c01      	subs	r4, #1
 80089fa:	ed13 6a03 	vldr	s12, [r3, #-12]
 80089fe:	f103 0310 	add.w	r3, r3, #16
 8008a02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a06:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 8008a0a:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 8008a0e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a1a:	d1eb      	bne.n	80089f4 <arm_mean_f32+0x10>
 8008a1c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8008a20:	f011 0303 	ands.w	r3, r1, #3
 8008a24:	d005      	beq.n	8008a32 <arm_mean_f32+0x4e>
 8008a26:	ecb0 7a01 	vldmia	r0!, {s14}
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a30:	d1f9      	bne.n	8008a26 <arm_mean_f32+0x42>
 8008a32:	ee07 1a10 	vmov	s14, r1
 8008a36:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008a3a:	bc30      	pop	{r4, r5}
 8008a3c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008a40:	edc2 6a00 	vstr	s13, [r2]
 8008a44:	4770      	bx	lr
 8008a46:	eddf 7a01 	vldr	s15, [pc, #4]	; 8008a4c <arm_mean_f32+0x68>
 8008a4a:	e7e9      	b.n	8008a20 <arm_mean_f32+0x3c>
 8008a4c:	00000000 	.word	0x00000000

08008a50 <arm_max_q15>:
 8008a50:	f101 3cff 	add.w	ip, r1, #4294967295
 8008a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a58:	ea5f 0a9c 	movs.w	sl, ip, lsr #2
 8008a5c:	f100 0902 	add.w	r9, r0, #2
 8008a60:	f9b0 4000 	ldrsh.w	r4, [r0]
 8008a64:	d049      	beq.n	8008afa <arm_max_q15+0xaa>
 8008a66:	300a      	adds	r0, #10
 8008a68:	46d0      	mov	r8, sl
 8008a6a:	f04f 0e04 	mov.w	lr, #4
 8008a6e:	2700      	movs	r7, #0
 8008a70:	f930 5c08 	ldrsh.w	r5, [r0, #-8]
 8008a74:	f1ae 0603 	sub.w	r6, lr, #3
 8008a78:	f930 bc06 	ldrsh.w	fp, [r0, #-6]
 8008a7c:	3008      	adds	r0, #8
 8008a7e:	42a5      	cmp	r5, r4
 8008a80:	bfc8      	it	gt
 8008a82:	4637      	movgt	r7, r6
 8008a84:	42ac      	cmp	r4, r5
 8008a86:	f930 6c0c 	ldrsh.w	r6, [r0, #-12]
 8008a8a:	bfb8      	it	lt
 8008a8c:	462c      	movlt	r4, r5
 8008a8e:	f1ae 0502 	sub.w	r5, lr, #2
 8008a92:	455c      	cmp	r4, fp
 8008a94:	bfb8      	it	lt
 8008a96:	462f      	movlt	r7, r5
 8008a98:	455c      	cmp	r4, fp
 8008a9a:	bfb8      	it	lt
 8008a9c:	465c      	movlt	r4, fp
 8008a9e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8008aa2:	4625      	mov	r5, r4
 8008aa4:	f930 4c0a 	ldrsh.w	r4, [r0, #-10]
 8008aa8:	42b5      	cmp	r5, r6
 8008aaa:	bfb8      	it	lt
 8008aac:	465f      	movlt	r7, fp
 8008aae:	42b5      	cmp	r5, r6
 8008ab0:	bfb8      	it	lt
 8008ab2:	4635      	movlt	r5, r6
 8008ab4:	42a5      	cmp	r5, r4
 8008ab6:	bfb8      	it	lt
 8008ab8:	4677      	movlt	r7, lr
 8008aba:	42ac      	cmp	r4, r5
 8008abc:	f10e 0e04 	add.w	lr, lr, #4
 8008ac0:	bfb8      	it	lt
 8008ac2:	462c      	movlt	r4, r5
 8008ac4:	f1b8 0801 	subs.w	r8, r8, #1
 8008ac8:	d1d2      	bne.n	8008a70 <arm_max_q15+0x20>
 8008aca:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
 8008ace:	f01c 0c03 	ands.w	ip, ip, #3
 8008ad2:	d014      	beq.n	8008afe <arm_max_q15+0xae>
 8008ad4:	ebcc 0c01 	rsb	ip, ip, r1
 8008ad8:	f939 0b02 	ldrsh.w	r0, [r9], #2
 8008adc:	42a0      	cmp	r0, r4
 8008ade:	bfc8      	it	gt
 8008ae0:	4667      	movgt	r7, ip
 8008ae2:	42a0      	cmp	r0, r4
 8008ae4:	f10c 0c01 	add.w	ip, ip, #1
 8008ae8:	bfb8      	it	lt
 8008aea:	4620      	movlt	r0, r4
 8008aec:	4561      	cmp	r1, ip
 8008aee:	4604      	mov	r4, r0
 8008af0:	d1f2      	bne.n	8008ad8 <arm_max_q15+0x88>
 8008af2:	8010      	strh	r0, [r2, #0]
 8008af4:	601f      	str	r7, [r3, #0]
 8008af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008afa:	4657      	mov	r7, sl
 8008afc:	e7e7      	b.n	8008ace <arm_max_q15+0x7e>
 8008afe:	4620      	mov	r0, r4
 8008b00:	e7f7      	b.n	8008af2 <arm_max_q15+0xa2>
 8008b02:	bf00      	nop

08008b04 <arm_max_f32>:
 8008b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b08:	1e4d      	subs	r5, r1, #1
 8008b0a:	f100 0c04 	add.w	ip, r0, #4
 8008b0e:	edd0 7a00 	vldr	s15, [r0]
 8008b12:	ea5f 0995 	movs.w	r9, r5, lsr #2
 8008b16:	d056      	beq.n	8008bc6 <arm_max_f32+0xc2>
 8008b18:	3014      	adds	r0, #20
 8008b1a:	46c8      	mov	r8, r9
 8008b1c:	2404      	movs	r4, #4
 8008b1e:	2600      	movs	r6, #0
 8008b20:	ed10 6a04 	vldr	s12, [r0, #-16]
 8008b24:	f1a4 0a03 	sub.w	sl, r4, #3
 8008b28:	ed50 6a03 	vldr	s13, [r0, #-12]
 8008b2c:	f1a4 0e02 	sub.w	lr, r4, #2
 8008b30:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8008b34:	ed10 7a02 	vldr	s14, [r0, #-8]
 8008b38:	ed50 5a01 	vldr	s11, [r0, #-4]
 8008b3c:	1e67      	subs	r7, r4, #1
 8008b3e:	3010      	adds	r0, #16
 8008b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b44:	bfc8      	it	gt
 8008b46:	eef0 7a46 	vmovgt.f32	s15, s12
 8008b4a:	bfc8      	it	gt
 8008b4c:	4656      	movgt	r6, sl
 8008b4e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b56:	bf48      	it	mi
 8008b58:	eef0 7a66 	vmovmi.f32	s15, s13
 8008b5c:	bf48      	it	mi
 8008b5e:	4676      	movmi	r6, lr
 8008b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b68:	bf48      	it	mi
 8008b6a:	eef0 7a47 	vmovmi.f32	s15, s14
 8008b6e:	bf48      	it	mi
 8008b70:	463e      	movmi	r6, r7
 8008b72:	eef4 7ae5 	vcmpe.f32	s15, s11
 8008b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b7a:	bf48      	it	mi
 8008b7c:	4626      	movmi	r6, r4
 8008b7e:	bf48      	it	mi
 8008b80:	eef0 7a65 	vmovmi.f32	s15, s11
 8008b84:	f1b8 0801 	subs.w	r8, r8, #1
 8008b88:	f104 0404 	add.w	r4, r4, #4
 8008b8c:	d1c8      	bne.n	8008b20 <arm_max_f32+0x1c>
 8008b8e:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 8008b92:	f015 0003 	ands.w	r0, r5, #3
 8008b96:	d018      	beq.n	8008bca <arm_max_f32+0xc6>
 8008b98:	1a08      	subs	r0, r1, r0
 8008b9a:	ecbc 7a01 	vldmia	ip!, {s14}
 8008b9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba6:	bfc8      	it	gt
 8008ba8:	4606      	movgt	r6, r0
 8008baa:	f100 0001 	add.w	r0, r0, #1
 8008bae:	bfd8      	it	le
 8008bb0:	eeb0 7a67 	vmovle.f32	s14, s15
 8008bb4:	4281      	cmp	r1, r0
 8008bb6:	eef0 7a47 	vmov.f32	s15, s14
 8008bba:	d1ee      	bne.n	8008b9a <arm_max_f32+0x96>
 8008bbc:	ed82 7a00 	vstr	s14, [r2]
 8008bc0:	601e      	str	r6, [r3, #0]
 8008bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc6:	464e      	mov	r6, r9
 8008bc8:	e7e3      	b.n	8008b92 <arm_max_f32+0x8e>
 8008bca:	eeb0 7a67 	vmov.f32	s14, s15
 8008bce:	e7f5      	b.n	8008bbc <arm_max_f32+0xb8>

08008bd0 <arm_cmplx_mult_cmplx_f32>:
 8008bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bd2:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8008bd6:	d073      	beq.n	8008cc0 <arm_cmplx_mult_cmplx_f32+0xf0>
 8008bd8:	f100 0620 	add.w	r6, r0, #32
 8008bdc:	f101 0520 	add.w	r5, r1, #32
 8008be0:	f102 0420 	add.w	r4, r2, #32
 8008be4:	4677      	mov	r7, lr
 8008be6:	ed16 7a08 	vldr	s14, [r6, #-32]	; 0xffffffe0
 8008bea:	3f01      	subs	r7, #1
 8008bec:	ed55 7a08 	vldr	s15, [r5, #-32]	; 0xffffffe0
 8008bf0:	f106 0620 	add.w	r6, r6, #32
 8008bf4:	ed56 5a0f 	vldr	s11, [r6, #-60]	; 0xffffffc4
 8008bf8:	f105 0520 	add.w	r5, r5, #32
 8008bfc:	ed55 6a0f 	vldr	s13, [r5, #-60]	; 0xffffffc4
 8008c00:	ee27 3a27 	vmul.f32	s6, s14, s15
 8008c04:	ee67 4aa5 	vmul.f32	s9, s15, s11
 8008c08:	ed16 6a0e 	vldr	s12, [r6, #-56]	; 0xffffffc8
 8008c0c:	ee25 4aa6 	vmul.f32	s8, s11, s13
 8008c10:	ed55 7a0e 	vldr	s15, [r5, #-56]	; 0xffffffc8
 8008c14:	ee67 6a26 	vmul.f32	s13, s14, s13
 8008c18:	ed15 5a0d 	vldr	s10, [r5, #-52]	; 0xffffffcc
 8008c1c:	ed56 2a0d 	vldr	s5, [r6, #-52]	; 0xffffffcc
 8008c20:	ee66 3a27 	vmul.f32	s7, s12, s15
 8008c24:	ee66 5a05 	vmul.f32	s11, s12, s10
 8008c28:	ed16 7a0c 	vldr	s14, [r6, #-48]	; 0xffffffd0
 8008c2c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008c30:	ed15 6a0c 	vldr	s12, [r5, #-48]	; 0xffffffd0
 8008c34:	ee25 5a22 	vmul.f32	s10, s10, s5
 8008c38:	f104 0420 	add.w	r4, r4, #32
 8008c3c:	ee33 4a44 	vsub.f32	s8, s6, s8
 8008c40:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8008c44:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8008c48:	ed04 4a10 	vstr	s8, [r4, #-64]	; 0xffffffc0
 8008c4c:	ee67 4a06 	vmul.f32	s9, s14, s12
 8008c50:	ed16 5a0b 	vldr	s10, [r6, #-44]	; 0xffffffd4
 8008c54:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008c58:	ed44 6a0f 	vstr	s13, [r4, #-60]	; 0xffffffc4
 8008c5c:	ed55 6a0b 	vldr	s13, [r5, #-44]	; 0xffffffd4
 8008c60:	ee66 5a05 	vmul.f32	s11, s12, s10
 8008c64:	ed44 3a0e 	vstr	s7, [r4, #-56]	; 0xffffffc8
 8008c68:	ee25 5a26 	vmul.f32	s10, s10, s13
 8008c6c:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 8008c70:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008c74:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 8008c78:	ed55 6a0a 	vldr	s13, [r5, #-40]	; 0xffffffd8
 8008c7c:	ed16 6a09 	vldr	s12, [r6, #-36]	; 0xffffffdc
 8008c80:	ee34 5ac5 	vsub.f32	s10, s9, s10
 8008c84:	ed15 4a09 	vldr	s8, [r5, #-36]	; 0xffffffdc
 8008c88:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8008c8c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008c90:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008c94:	ed04 5a0c 	vstr	s10, [r4, #-48]	; 0xffffffd0
 8008c98:	ee26 6a04 	vmul.f32	s12, s12, s8
 8008c9c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8008ca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ca4:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8008ca8:	ed04 7a0b 	vstr	s14, [r4, #-44]	; 0xffffffd4
 8008cac:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 8008cb0:	ed04 6a0a 	vstr	s12, [r4, #-40]	; 0xffffffd8
 8008cb4:	d197      	bne.n	8008be6 <arm_cmplx_mult_cmplx_f32+0x16>
 8008cb6:	ea4f 144e 	mov.w	r4, lr, lsl #5
 8008cba:	4420      	add	r0, r4
 8008cbc:	4421      	add	r1, r4
 8008cbe:	4422      	add	r2, r4
 8008cc0:	f013 0303 	ands.w	r3, r3, #3
 8008cc4:	d022      	beq.n	8008d0c <arm_cmplx_mult_cmplx_f32+0x13c>
 8008cc6:	3008      	adds	r0, #8
 8008cc8:	3108      	adds	r1, #8
 8008cca:	3208      	adds	r2, #8
 8008ccc:	ed50 7a02 	vldr	s15, [r0, #-8]
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	ed11 7a02 	vldr	s14, [r1, #-8]
 8008cd6:	f100 0008 	add.w	r0, r0, #8
 8008cda:	ed50 6a03 	vldr	s13, [r0, #-12]
 8008cde:	f101 0108 	add.w	r1, r1, #8
 8008ce2:	ed51 5a03 	vldr	s11, [r1, #-12]
 8008ce6:	ee27 6a87 	vmul.f32	s12, s15, s14
 8008cea:	ee26 7a87 	vmul.f32	s14, s13, s14
 8008cee:	f102 0208 	add.w	r2, r2, #8
 8008cf2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008cf6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008cfa:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008cfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d02:	ed42 6a04 	vstr	s13, [r2, #-16]
 8008d06:	ed42 7a03 	vstr	s15, [r2, #-12]
 8008d0a:	d1df      	bne.n	8008ccc <arm_cmplx_mult_cmplx_f32+0xfc>
 8008d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d0e:	bf00      	nop

08008d10 <arm_cmplx_mag_f32>:
 8008d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d14:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8008d18:	b084      	sub	sp, #16
 8008d1a:	d07f      	beq.n	8008e1c <arm_cmplx_mag_f32+0x10c>
 8008d1c:	f100 0420 	add.w	r4, r0, #32
 8008d20:	f101 0510 	add.w	r5, r1, #16
 8008d24:	4646      	mov	r6, r8
 8008d26:	2700      	movs	r7, #0
 8008d28:	e05a      	b.n	8008de0 <arm_cmplx_mag_f32+0xd0>
 8008d2a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008d2e:	eeb4 0a40 	vcmp.f32	s0, s0
 8008d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d36:	f040 80a4 	bne.w	8008e82 <arm_cmplx_mag_f32+0x172>
 8008d3a:	ed05 0a04 	vstr	s0, [r5, #-16]
 8008d3e:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8008d42:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8008d46:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008d4a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008d4e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008d52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d5a:	f2c0 808f 	blt.w	8008e7c <arm_cmplx_mag_f32+0x16c>
 8008d5e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008d62:	eeb4 0a40 	vcmp.f32	s0, s0
 8008d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d6a:	f040 80af 	bne.w	8008ecc <arm_cmplx_mag_f32+0x1bc>
 8008d6e:	ed05 0a03 	vstr	s0, [r5, #-12]
 8008d72:	ed54 7a04 	vldr	s15, [r4, #-16]
 8008d76:	ed14 0a03 	vldr	s0, [r4, #-12]
 8008d7a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008d7e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008d82:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008d86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d8e:	db72      	blt.n	8008e76 <arm_cmplx_mag_f32+0x166>
 8008d90:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008d94:	eeb4 0a40 	vcmp.f32	s0, s0
 8008d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d9c:	f040 808c 	bne.w	8008eb8 <arm_cmplx_mag_f32+0x1a8>
 8008da0:	ed05 0a02 	vstr	s0, [r5, #-8]
 8008da4:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008da8:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008dac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008db0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008db4:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008db8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc0:	db20      	blt.n	8008e04 <arm_cmplx_mag_f32+0xf4>
 8008dc2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008dc6:	eeb4 0a40 	vcmp.f32	s0, s0
 8008dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dce:	d169      	bne.n	8008ea4 <arm_cmplx_mag_f32+0x194>
 8008dd0:	3e01      	subs	r6, #1
 8008dd2:	ed05 0a01 	vstr	s0, [r5, #-4]
 8008dd6:	f104 0420 	add.w	r4, r4, #32
 8008dda:	f105 0510 	add.w	r5, r5, #16
 8008dde:	d019      	beq.n	8008e14 <arm_cmplx_mag_f32+0x104>
 8008de0:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8008de4:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8008de8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008dec:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008df0:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008df4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dfc:	da95      	bge.n	8008d2a <arm_cmplx_mag_f32+0x1a>
 8008dfe:	f845 7c10 	str.w	r7, [r5, #-16]
 8008e02:	e79c      	b.n	8008d3e <arm_cmplx_mag_f32+0x2e>
 8008e04:	3e01      	subs	r6, #1
 8008e06:	f845 7c04 	str.w	r7, [r5, #-4]
 8008e0a:	f104 0420 	add.w	r4, r4, #32
 8008e0e:	f105 0510 	add.w	r5, r5, #16
 8008e12:	d1e5      	bne.n	8008de0 <arm_cmplx_mag_f32+0xd0>
 8008e14:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8008e18:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8008e1c:	f012 0503 	ands.w	r5, r2, #3
 8008e20:	d026      	beq.n	8008e70 <arm_cmplx_mag_f32+0x160>
 8008e22:	f100 0408 	add.w	r4, r0, #8
 8008e26:	2600      	movs	r6, #0
 8008e28:	e00c      	b.n	8008e44 <arm_cmplx_mag_f32+0x134>
 8008e2a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008e2e:	eeb4 0a40 	vcmp.f32	s0, s0
 8008e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e36:	d12e      	bne.n	8008e96 <arm_cmplx_mag_f32+0x186>
 8008e38:	3d01      	subs	r5, #1
 8008e3a:	ed01 0a01 	vstr	s0, [r1, #-4]
 8008e3e:	f104 0408 	add.w	r4, r4, #8
 8008e42:	d015      	beq.n	8008e70 <arm_cmplx_mag_f32+0x160>
 8008e44:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008e48:	3104      	adds	r1, #4
 8008e4a:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008e4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008e52:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008e56:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008e5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e62:	dae2      	bge.n	8008e2a <arm_cmplx_mag_f32+0x11a>
 8008e64:	3d01      	subs	r5, #1
 8008e66:	f841 6c04 	str.w	r6, [r1, #-4]
 8008e6a:	f104 0408 	add.w	r4, r4, #8
 8008e6e:	d1e9      	bne.n	8008e44 <arm_cmplx_mag_f32+0x134>
 8008e70:	b004      	add	sp, #16
 8008e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e76:	f845 7c08 	str.w	r7, [r5, #-8]
 8008e7a:	e793      	b.n	8008da4 <arm_cmplx_mag_f32+0x94>
 8008e7c:	f845 7c0c 	str.w	r7, [r5, #-12]
 8008e80:	e777      	b.n	8008d72 <arm_cmplx_mag_f32+0x62>
 8008e82:	eeb0 0a67 	vmov.f32	s0, s15
 8008e86:	9203      	str	r2, [sp, #12]
 8008e88:	9102      	str	r1, [sp, #8]
 8008e8a:	9001      	str	r0, [sp, #4]
 8008e8c:	f000 fab0 	bl	80093f0 <sqrtf>
 8008e90:	a801      	add	r0, sp, #4
 8008e92:	c807      	ldmia	r0, {r0, r1, r2}
 8008e94:	e751      	b.n	8008d3a <arm_cmplx_mag_f32+0x2a>
 8008e96:	eeb0 0a67 	vmov.f32	s0, s15
 8008e9a:	9101      	str	r1, [sp, #4]
 8008e9c:	f000 faa8 	bl	80093f0 <sqrtf>
 8008ea0:	9901      	ldr	r1, [sp, #4]
 8008ea2:	e7c9      	b.n	8008e38 <arm_cmplx_mag_f32+0x128>
 8008ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8008ea8:	9203      	str	r2, [sp, #12]
 8008eaa:	9102      	str	r1, [sp, #8]
 8008eac:	9001      	str	r0, [sp, #4]
 8008eae:	f000 fa9f 	bl	80093f0 <sqrtf>
 8008eb2:	a801      	add	r0, sp, #4
 8008eb4:	c807      	ldmia	r0, {r0, r1, r2}
 8008eb6:	e78b      	b.n	8008dd0 <arm_cmplx_mag_f32+0xc0>
 8008eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8008ebc:	9203      	str	r2, [sp, #12]
 8008ebe:	9102      	str	r1, [sp, #8]
 8008ec0:	9001      	str	r0, [sp, #4]
 8008ec2:	f000 fa95 	bl	80093f0 <sqrtf>
 8008ec6:	a801      	add	r0, sp, #4
 8008ec8:	c807      	ldmia	r0, {r0, r1, r2}
 8008eca:	e769      	b.n	8008da0 <arm_cmplx_mag_f32+0x90>
 8008ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8008ed0:	9203      	str	r2, [sp, #12]
 8008ed2:	9102      	str	r1, [sp, #8]
 8008ed4:	9001      	str	r0, [sp, #4]
 8008ed6:	f000 fa8b 	bl	80093f0 <sqrtf>
 8008eda:	a801      	add	r0, sp, #4
 8008edc:	c807      	ldmia	r0, {r0, r1, r2}
 8008ede:	e746      	b.n	8008d6e <arm_cmplx_mag_f32+0x5e>

08008ee0 <arm_cmplx_conj_f32>:
 8008ee0:	b4f0      	push	{r4, r5, r6, r7}
 8008ee2:	0897      	lsrs	r7, r2, #2
 8008ee4:	d035      	beq.n	8008f52 <arm_cmplx_conj_f32+0x72>
 8008ee6:	f100 0420 	add.w	r4, r0, #32
 8008eea:	f101 0320 	add.w	r3, r1, #32
 8008eee:	463d      	mov	r5, r7
 8008ef0:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8008ef4:	3d01      	subs	r5, #1
 8008ef6:	f104 0420 	add.w	r4, r4, #32
 8008efa:	f103 0320 	add.w	r3, r3, #32
 8008efe:	f843 6c40 	str.w	r6, [r3, #-64]
 8008f02:	f854 6c38 	ldr.w	r6, [r4, #-56]
 8008f06:	f843 6c38 	str.w	r6, [r3, #-56]
 8008f0a:	f854 6c30 	ldr.w	r6, [r4, #-48]
 8008f0e:	f843 6c30 	str.w	r6, [r3, #-48]
 8008f12:	f854 6c28 	ldr.w	r6, [r4, #-40]
 8008f16:	f843 6c28 	str.w	r6, [r3, #-40]
 8008f1a:	ed14 6a0f 	vldr	s12, [r4, #-60]	; 0xffffffc4
 8008f1e:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8008f22:	ed14 7a0b 	vldr	s14, [r4, #-44]	; 0xffffffd4
 8008f26:	eeb1 6a46 	vneg.f32	s12, s12
 8008f2a:	ed54 7a09 	vldr	s15, [r4, #-36]	; 0xffffffdc
 8008f2e:	eef1 6a66 	vneg.f32	s13, s13
 8008f32:	eeb1 7a47 	vneg.f32	s14, s14
 8008f36:	eef1 7a67 	vneg.f32	s15, s15
 8008f3a:	ed03 6a0f 	vstr	s12, [r3, #-60]	; 0xffffffc4
 8008f3e:	ed43 6a0d 	vstr	s13, [r3, #-52]	; 0xffffffcc
 8008f42:	ed03 7a0b 	vstr	s14, [r3, #-44]	; 0xffffffd4
 8008f46:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
 8008f4a:	d1d1      	bne.n	8008ef0 <arm_cmplx_conj_f32+0x10>
 8008f4c:	017f      	lsls	r7, r7, #5
 8008f4e:	4438      	add	r0, r7
 8008f50:	4439      	add	r1, r7
 8008f52:	f012 0203 	ands.w	r2, r2, #3
 8008f56:	d011      	beq.n	8008f7c <arm_cmplx_conj_f32+0x9c>
 8008f58:	3108      	adds	r1, #8
 8008f5a:	3008      	adds	r0, #8
 8008f5c:	f850 3c08 	ldr.w	r3, [r0, #-8]
 8008f60:	3a01      	subs	r2, #1
 8008f62:	f100 0008 	add.w	r0, r0, #8
 8008f66:	f101 0108 	add.w	r1, r1, #8
 8008f6a:	f841 3c10 	str.w	r3, [r1, #-16]
 8008f6e:	ed50 7a03 	vldr	s15, [r0, #-12]
 8008f72:	eef1 7a67 	vneg.f32	s15, s15
 8008f76:	ed41 7a03 	vstr	s15, [r1, #-12]
 8008f7a:	d1ef      	bne.n	8008f5c <arm_cmplx_conj_f32+0x7c>
 8008f7c:	bcf0      	pop	{r4, r5, r6, r7}
 8008f7e:	4770      	bx	lr

08008f80 <arm_sub_f32>:
 8008f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f82:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8008f86:	d033      	beq.n	8008ff0 <arm_sub_f32+0x70>
 8008f88:	f100 0610 	add.w	r6, r0, #16
 8008f8c:	f101 0510 	add.w	r5, r1, #16
 8008f90:	f102 0410 	add.w	r4, r2, #16
 8008f94:	4677      	mov	r7, lr
 8008f96:	ed16 7a03 	vldr	s14, [r6, #-12]
 8008f9a:	3f01      	subs	r7, #1
 8008f9c:	ed56 7a02 	vldr	s15, [r6, #-8]
 8008fa0:	f105 0510 	add.w	r5, r5, #16
 8008fa4:	ed15 6a07 	vldr	s12, [r5, #-28]	; 0xffffffe4
 8008fa8:	f106 0610 	add.w	r6, r6, #16
 8008fac:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 8008fb0:	f104 0410 	add.w	r4, r4, #16
 8008fb4:	ed15 5a05 	vldr	s10, [r5, #-20]	; 0xffffffec
 8008fb8:	ee37 6a46 	vsub.f32	s12, s14, s12
 8008fbc:	ed55 5a08 	vldr	s11, [r5, #-32]	; 0xffffffe0
 8008fc0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8008fc4:	ed16 7a05 	vldr	s14, [r6, #-20]	; 0xffffffec
 8008fc8:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 8008fcc:	ee37 7a45 	vsub.f32	s14, s14, s10
 8008fd0:	ed04 6a07 	vstr	s12, [r4, #-28]	; 0xffffffe4
 8008fd4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008fd8:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 8008fdc:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 8008fe0:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 8008fe4:	d1d7      	bne.n	8008f96 <arm_sub_f32+0x16>
 8008fe6:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008fea:	4420      	add	r0, r4
 8008fec:	4421      	add	r1, r4
 8008fee:	4422      	add	r2, r4
 8008ff0:	f013 0303 	ands.w	r3, r3, #3
 8008ff4:	d009      	beq.n	800900a <arm_sub_f32+0x8a>
 8008ff6:	ecf0 7a01 	vldmia	r0!, {s15}
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	ecb1 7a01 	vldmia	r1!, {s14}
 8009000:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009004:	ece2 7a01 	vstmia	r2!, {s15}
 8009008:	d1f5      	bne.n	8008ff6 <arm_sub_f32+0x76>
 800900a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800900c <arm_mult_f32>:
 800900c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800900e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8009012:	d033      	beq.n	800907c <arm_mult_f32+0x70>
 8009014:	f100 0610 	add.w	r6, r0, #16
 8009018:	f101 0510 	add.w	r5, r1, #16
 800901c:	f102 0410 	add.w	r4, r2, #16
 8009020:	4677      	mov	r7, lr
 8009022:	ed16 7a04 	vldr	s14, [r6, #-16]
 8009026:	3f01      	subs	r7, #1
 8009028:	ed15 6a04 	vldr	s12, [r5, #-16]
 800902c:	f106 0610 	add.w	r6, r6, #16
 8009030:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8009034:	f105 0510 	add.w	r5, r5, #16
 8009038:	ee27 6a06 	vmul.f32	s12, s14, s12
 800903c:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 8009040:	ed16 7a07 	vldr	s14, [r6, #-28]	; 0xffffffe4
 8009044:	f104 0410 	add.w	r4, r4, #16
 8009048:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 800904c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009050:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8009054:	ed04 6a08 	vstr	s12, [r4, #-32]	; 0xffffffe0
 8009058:	ee27 7a25 	vmul.f32	s14, s14, s11
 800905c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8009060:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 8009064:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009068:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 800906c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8009070:	d1d7      	bne.n	8009022 <arm_mult_f32+0x16>
 8009072:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8009076:	4420      	add	r0, r4
 8009078:	4421      	add	r1, r4
 800907a:	4422      	add	r2, r4
 800907c:	f013 0303 	ands.w	r3, r3, #3
 8009080:	d009      	beq.n	8009096 <arm_mult_f32+0x8a>
 8009082:	ecf0 7a01 	vldmia	r0!, {s15}
 8009086:	3b01      	subs	r3, #1
 8009088:	ecb1 7a01 	vldmia	r1!, {s14}
 800908c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009090:	ece2 7a01 	vstmia	r2!, {s15}
 8009094:	d1f5      	bne.n	8009082 <arm_mult_f32+0x76>
 8009096:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009098 <arm_abs_f32>:
 8009098:	b470      	push	{r4, r5, r6}
 800909a:	0896      	lsrs	r6, r2, #2
 800909c:	d025      	beq.n	80090ea <arm_abs_f32+0x52>
 800909e:	f100 0410 	add.w	r4, r0, #16
 80090a2:	f101 0310 	add.w	r3, r1, #16
 80090a6:	4635      	mov	r5, r6
 80090a8:	ed14 6a04 	vldr	s12, [r4, #-16]
 80090ac:	3d01      	subs	r5, #1
 80090ae:	ed54 6a03 	vldr	s13, [r4, #-12]
 80090b2:	f103 0310 	add.w	r3, r3, #16
 80090b6:	ed14 7a02 	vldr	s14, [r4, #-8]
 80090ba:	eeb0 6ac6 	vabs.f32	s12, s12
 80090be:	ed54 7a01 	vldr	s15, [r4, #-4]
 80090c2:	eef0 6ae6 	vabs.f32	s13, s13
 80090c6:	eeb0 7ac7 	vabs.f32	s14, s14
 80090ca:	f104 0410 	add.w	r4, r4, #16
 80090ce:	eef0 7ae7 	vabs.f32	s15, s15
 80090d2:	ed03 6a08 	vstr	s12, [r3, #-32]	; 0xffffffe0
 80090d6:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 80090da:	ed03 7a06 	vstr	s14, [r3, #-24]	; 0xffffffe8
 80090de:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80090e2:	d1e1      	bne.n	80090a8 <arm_abs_f32+0x10>
 80090e4:	0136      	lsls	r6, r6, #4
 80090e6:	4430      	add	r0, r6
 80090e8:	4431      	add	r1, r6
 80090ea:	f012 0203 	ands.w	r2, r2, #3
 80090ee:	d007      	beq.n	8009100 <arm_abs_f32+0x68>
 80090f0:	ecf0 7a01 	vldmia	r0!, {s15}
 80090f4:	3a01      	subs	r2, #1
 80090f6:	eef0 7ae7 	vabs.f32	s15, s15
 80090fa:	ece1 7a01 	vstmia	r1!, {s15}
 80090fe:	d1f7      	bne.n	80090f0 <arm_abs_f32+0x58>
 8009100:	bc70      	pop	{r4, r5, r6}
 8009102:	4770      	bx	lr

08009104 <__errno>:
 8009104:	4b01      	ldr	r3, [pc, #4]	; (800910c <__errno+0x8>)
 8009106:	6818      	ldr	r0, [r3, #0]
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	24000010 	.word	0x24000010

08009110 <__libc_init_array>:
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	4e0d      	ldr	r6, [pc, #52]	; (8009148 <__libc_init_array+0x38>)
 8009114:	4c0d      	ldr	r4, [pc, #52]	; (800914c <__libc_init_array+0x3c>)
 8009116:	1ba4      	subs	r4, r4, r6
 8009118:	10a4      	asrs	r4, r4, #2
 800911a:	2500      	movs	r5, #0
 800911c:	42a5      	cmp	r5, r4
 800911e:	d109      	bne.n	8009134 <__libc_init_array+0x24>
 8009120:	4e0b      	ldr	r6, [pc, #44]	; (8009150 <__libc_init_array+0x40>)
 8009122:	4c0c      	ldr	r4, [pc, #48]	; (8009154 <__libc_init_array+0x44>)
 8009124:	f000 fb3e 	bl	80097a4 <_init>
 8009128:	1ba4      	subs	r4, r4, r6
 800912a:	10a4      	asrs	r4, r4, #2
 800912c:	2500      	movs	r5, #0
 800912e:	42a5      	cmp	r5, r4
 8009130:	d105      	bne.n	800913e <__libc_init_array+0x2e>
 8009132:	bd70      	pop	{r4, r5, r6, pc}
 8009134:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009138:	4798      	blx	r3
 800913a:	3501      	adds	r5, #1
 800913c:	e7ee      	b.n	800911c <__libc_init_array+0xc>
 800913e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009142:	4798      	blx	r3
 8009144:	3501      	adds	r5, #1
 8009146:	e7f2      	b.n	800912e <__libc_init_array+0x1e>
 8009148:	08009830 	.word	0x08009830
 800914c:	08009830 	.word	0x08009830
 8009150:	08009830 	.word	0x08009830
 8009154:	08009834 	.word	0x08009834

08009158 <malloc>:
 8009158:	4b02      	ldr	r3, [pc, #8]	; (8009164 <malloc+0xc>)
 800915a:	4601      	mov	r1, r0
 800915c:	6818      	ldr	r0, [r3, #0]
 800915e:	f000 b861 	b.w	8009224 <_malloc_r>
 8009162:	bf00      	nop
 8009164:	24000010 	.word	0x24000010

08009168 <free>:
 8009168:	4b02      	ldr	r3, [pc, #8]	; (8009174 <free+0xc>)
 800916a:	4601      	mov	r1, r0
 800916c:	6818      	ldr	r0, [r3, #0]
 800916e:	f000 b80b 	b.w	8009188 <_free_r>
 8009172:	bf00      	nop
 8009174:	24000010 	.word	0x24000010

08009178 <memset>:
 8009178:	4402      	add	r2, r0
 800917a:	4603      	mov	r3, r0
 800917c:	4293      	cmp	r3, r2
 800917e:	d100      	bne.n	8009182 <memset+0xa>
 8009180:	4770      	bx	lr
 8009182:	f803 1b01 	strb.w	r1, [r3], #1
 8009186:	e7f9      	b.n	800917c <memset+0x4>

08009188 <_free_r>:
 8009188:	b538      	push	{r3, r4, r5, lr}
 800918a:	4605      	mov	r5, r0
 800918c:	2900      	cmp	r1, #0
 800918e:	d045      	beq.n	800921c <_free_r+0x94>
 8009190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009194:	1f0c      	subs	r4, r1, #4
 8009196:	2b00      	cmp	r3, #0
 8009198:	bfb8      	it	lt
 800919a:	18e4      	addlt	r4, r4, r3
 800919c:	f000 f8ac 	bl	80092f8 <__malloc_lock>
 80091a0:	4a1f      	ldr	r2, [pc, #124]	; (8009220 <_free_r+0x98>)
 80091a2:	6813      	ldr	r3, [r2, #0]
 80091a4:	4610      	mov	r0, r2
 80091a6:	b933      	cbnz	r3, 80091b6 <_free_r+0x2e>
 80091a8:	6063      	str	r3, [r4, #4]
 80091aa:	6014      	str	r4, [r2, #0]
 80091ac:	4628      	mov	r0, r5
 80091ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091b2:	f000 b8a2 	b.w	80092fa <__malloc_unlock>
 80091b6:	42a3      	cmp	r3, r4
 80091b8:	d90c      	bls.n	80091d4 <_free_r+0x4c>
 80091ba:	6821      	ldr	r1, [r4, #0]
 80091bc:	1862      	adds	r2, r4, r1
 80091be:	4293      	cmp	r3, r2
 80091c0:	bf04      	itt	eq
 80091c2:	681a      	ldreq	r2, [r3, #0]
 80091c4:	685b      	ldreq	r3, [r3, #4]
 80091c6:	6063      	str	r3, [r4, #4]
 80091c8:	bf04      	itt	eq
 80091ca:	1852      	addeq	r2, r2, r1
 80091cc:	6022      	streq	r2, [r4, #0]
 80091ce:	6004      	str	r4, [r0, #0]
 80091d0:	e7ec      	b.n	80091ac <_free_r+0x24>
 80091d2:	4613      	mov	r3, r2
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	b10a      	cbz	r2, 80091dc <_free_r+0x54>
 80091d8:	42a2      	cmp	r2, r4
 80091da:	d9fa      	bls.n	80091d2 <_free_r+0x4a>
 80091dc:	6819      	ldr	r1, [r3, #0]
 80091de:	1858      	adds	r0, r3, r1
 80091e0:	42a0      	cmp	r0, r4
 80091e2:	d10b      	bne.n	80091fc <_free_r+0x74>
 80091e4:	6820      	ldr	r0, [r4, #0]
 80091e6:	4401      	add	r1, r0
 80091e8:	1858      	adds	r0, r3, r1
 80091ea:	4282      	cmp	r2, r0
 80091ec:	6019      	str	r1, [r3, #0]
 80091ee:	d1dd      	bne.n	80091ac <_free_r+0x24>
 80091f0:	6810      	ldr	r0, [r2, #0]
 80091f2:	6852      	ldr	r2, [r2, #4]
 80091f4:	605a      	str	r2, [r3, #4]
 80091f6:	4401      	add	r1, r0
 80091f8:	6019      	str	r1, [r3, #0]
 80091fa:	e7d7      	b.n	80091ac <_free_r+0x24>
 80091fc:	d902      	bls.n	8009204 <_free_r+0x7c>
 80091fe:	230c      	movs	r3, #12
 8009200:	602b      	str	r3, [r5, #0]
 8009202:	e7d3      	b.n	80091ac <_free_r+0x24>
 8009204:	6820      	ldr	r0, [r4, #0]
 8009206:	1821      	adds	r1, r4, r0
 8009208:	428a      	cmp	r2, r1
 800920a:	bf04      	itt	eq
 800920c:	6811      	ldreq	r1, [r2, #0]
 800920e:	6852      	ldreq	r2, [r2, #4]
 8009210:	6062      	str	r2, [r4, #4]
 8009212:	bf04      	itt	eq
 8009214:	1809      	addeq	r1, r1, r0
 8009216:	6021      	streq	r1, [r4, #0]
 8009218:	605c      	str	r4, [r3, #4]
 800921a:	e7c7      	b.n	80091ac <_free_r+0x24>
 800921c:	bd38      	pop	{r3, r4, r5, pc}
 800921e:	bf00      	nop
 8009220:	2400fa4c 	.word	0x2400fa4c

08009224 <_malloc_r>:
 8009224:	b570      	push	{r4, r5, r6, lr}
 8009226:	1ccd      	adds	r5, r1, #3
 8009228:	f025 0503 	bic.w	r5, r5, #3
 800922c:	3508      	adds	r5, #8
 800922e:	2d0c      	cmp	r5, #12
 8009230:	bf38      	it	cc
 8009232:	250c      	movcc	r5, #12
 8009234:	2d00      	cmp	r5, #0
 8009236:	4606      	mov	r6, r0
 8009238:	db01      	blt.n	800923e <_malloc_r+0x1a>
 800923a:	42a9      	cmp	r1, r5
 800923c:	d903      	bls.n	8009246 <_malloc_r+0x22>
 800923e:	230c      	movs	r3, #12
 8009240:	6033      	str	r3, [r6, #0]
 8009242:	2000      	movs	r0, #0
 8009244:	bd70      	pop	{r4, r5, r6, pc}
 8009246:	f000 f857 	bl	80092f8 <__malloc_lock>
 800924a:	4a21      	ldr	r2, [pc, #132]	; (80092d0 <_malloc_r+0xac>)
 800924c:	6814      	ldr	r4, [r2, #0]
 800924e:	4621      	mov	r1, r4
 8009250:	b991      	cbnz	r1, 8009278 <_malloc_r+0x54>
 8009252:	4c20      	ldr	r4, [pc, #128]	; (80092d4 <_malloc_r+0xb0>)
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	b91b      	cbnz	r3, 8009260 <_malloc_r+0x3c>
 8009258:	4630      	mov	r0, r6
 800925a:	f000 f83d 	bl	80092d8 <_sbrk_r>
 800925e:	6020      	str	r0, [r4, #0]
 8009260:	4629      	mov	r1, r5
 8009262:	4630      	mov	r0, r6
 8009264:	f000 f838 	bl	80092d8 <_sbrk_r>
 8009268:	1c43      	adds	r3, r0, #1
 800926a:	d124      	bne.n	80092b6 <_malloc_r+0x92>
 800926c:	230c      	movs	r3, #12
 800926e:	6033      	str	r3, [r6, #0]
 8009270:	4630      	mov	r0, r6
 8009272:	f000 f842 	bl	80092fa <__malloc_unlock>
 8009276:	e7e4      	b.n	8009242 <_malloc_r+0x1e>
 8009278:	680b      	ldr	r3, [r1, #0]
 800927a:	1b5b      	subs	r3, r3, r5
 800927c:	d418      	bmi.n	80092b0 <_malloc_r+0x8c>
 800927e:	2b0b      	cmp	r3, #11
 8009280:	d90f      	bls.n	80092a2 <_malloc_r+0x7e>
 8009282:	600b      	str	r3, [r1, #0]
 8009284:	50cd      	str	r5, [r1, r3]
 8009286:	18cc      	adds	r4, r1, r3
 8009288:	4630      	mov	r0, r6
 800928a:	f000 f836 	bl	80092fa <__malloc_unlock>
 800928e:	f104 000b 	add.w	r0, r4, #11
 8009292:	1d23      	adds	r3, r4, #4
 8009294:	f020 0007 	bic.w	r0, r0, #7
 8009298:	1ac3      	subs	r3, r0, r3
 800929a:	d0d3      	beq.n	8009244 <_malloc_r+0x20>
 800929c:	425a      	negs	r2, r3
 800929e:	50e2      	str	r2, [r4, r3]
 80092a0:	e7d0      	b.n	8009244 <_malloc_r+0x20>
 80092a2:	428c      	cmp	r4, r1
 80092a4:	684b      	ldr	r3, [r1, #4]
 80092a6:	bf16      	itet	ne
 80092a8:	6063      	strne	r3, [r4, #4]
 80092aa:	6013      	streq	r3, [r2, #0]
 80092ac:	460c      	movne	r4, r1
 80092ae:	e7eb      	b.n	8009288 <_malloc_r+0x64>
 80092b0:	460c      	mov	r4, r1
 80092b2:	6849      	ldr	r1, [r1, #4]
 80092b4:	e7cc      	b.n	8009250 <_malloc_r+0x2c>
 80092b6:	1cc4      	adds	r4, r0, #3
 80092b8:	f024 0403 	bic.w	r4, r4, #3
 80092bc:	42a0      	cmp	r0, r4
 80092be:	d005      	beq.n	80092cc <_malloc_r+0xa8>
 80092c0:	1a21      	subs	r1, r4, r0
 80092c2:	4630      	mov	r0, r6
 80092c4:	f000 f808 	bl	80092d8 <_sbrk_r>
 80092c8:	3001      	adds	r0, #1
 80092ca:	d0cf      	beq.n	800926c <_malloc_r+0x48>
 80092cc:	6025      	str	r5, [r4, #0]
 80092ce:	e7db      	b.n	8009288 <_malloc_r+0x64>
 80092d0:	2400fa4c 	.word	0x2400fa4c
 80092d4:	2400fa50 	.word	0x2400fa50

080092d8 <_sbrk_r>:
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	4c06      	ldr	r4, [pc, #24]	; (80092f4 <_sbrk_r+0x1c>)
 80092dc:	2300      	movs	r3, #0
 80092de:	4605      	mov	r5, r0
 80092e0:	4608      	mov	r0, r1
 80092e2:	6023      	str	r3, [r4, #0]
 80092e4:	f7f9 fe76 	bl	8002fd4 <_sbrk>
 80092e8:	1c43      	adds	r3, r0, #1
 80092ea:	d102      	bne.n	80092f2 <_sbrk_r+0x1a>
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	b103      	cbz	r3, 80092f2 <_sbrk_r+0x1a>
 80092f0:	602b      	str	r3, [r5, #0]
 80092f2:	bd38      	pop	{r3, r4, r5, pc}
 80092f4:	2400fb30 	.word	0x2400fb30

080092f8 <__malloc_lock>:
 80092f8:	4770      	bx	lr

080092fa <__malloc_unlock>:
 80092fa:	4770      	bx	lr

080092fc <fmaxf>:
 80092fc:	b508      	push	{r3, lr}
 80092fe:	ed2d 8b02 	vpush	{d8}
 8009302:	eeb0 8a40 	vmov.f32	s16, s0
 8009306:	eef0 8a60 	vmov.f32	s17, s1
 800930a:	f000 f82d 	bl	8009368 <__fpclassifyf>
 800930e:	b148      	cbz	r0, 8009324 <fmaxf+0x28>
 8009310:	eeb0 0a68 	vmov.f32	s0, s17
 8009314:	f000 f828 	bl	8009368 <__fpclassifyf>
 8009318:	b130      	cbz	r0, 8009328 <fmaxf+0x2c>
 800931a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800931e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009322:	dc01      	bgt.n	8009328 <fmaxf+0x2c>
 8009324:	eeb0 8a68 	vmov.f32	s16, s17
 8009328:	eeb0 0a48 	vmov.f32	s0, s16
 800932c:	ecbd 8b02 	vpop	{d8}
 8009330:	bd08      	pop	{r3, pc}

08009332 <fminf>:
 8009332:	b508      	push	{r3, lr}
 8009334:	ed2d 8b02 	vpush	{d8}
 8009338:	eeb0 8a40 	vmov.f32	s16, s0
 800933c:	eef0 8a60 	vmov.f32	s17, s1
 8009340:	f000 f812 	bl	8009368 <__fpclassifyf>
 8009344:	b148      	cbz	r0, 800935a <fminf+0x28>
 8009346:	eeb0 0a68 	vmov.f32	s0, s17
 800934a:	f000 f80d 	bl	8009368 <__fpclassifyf>
 800934e:	b130      	cbz	r0, 800935e <fminf+0x2c>
 8009350:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009358:	d401      	bmi.n	800935e <fminf+0x2c>
 800935a:	eeb0 8a68 	vmov.f32	s16, s17
 800935e:	eeb0 0a48 	vmov.f32	s0, s16
 8009362:	ecbd 8b02 	vpop	{d8}
 8009366:	bd08      	pop	{r3, pc}

08009368 <__fpclassifyf>:
 8009368:	ee10 3a10 	vmov	r3, s0
 800936c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8009370:	d00d      	beq.n	800938e <__fpclassifyf+0x26>
 8009372:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8009376:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800937a:	d30a      	bcc.n	8009392 <__fpclassifyf+0x2a>
 800937c:	4b07      	ldr	r3, [pc, #28]	; (800939c <__fpclassifyf+0x34>)
 800937e:	1e42      	subs	r2, r0, #1
 8009380:	429a      	cmp	r2, r3
 8009382:	d908      	bls.n	8009396 <__fpclassifyf+0x2e>
 8009384:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8009388:	4258      	negs	r0, r3
 800938a:	4158      	adcs	r0, r3
 800938c:	4770      	bx	lr
 800938e:	2002      	movs	r0, #2
 8009390:	4770      	bx	lr
 8009392:	2004      	movs	r0, #4
 8009394:	4770      	bx	lr
 8009396:	2003      	movs	r0, #3
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	007ffffe 	.word	0x007ffffe

080093a0 <roundf>:
 80093a0:	ee10 0a10 	vmov	r0, s0
 80093a4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80093a8:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80093ac:	2a16      	cmp	r2, #22
 80093ae:	dc15      	bgt.n	80093dc <roundf+0x3c>
 80093b0:	2a00      	cmp	r2, #0
 80093b2:	da08      	bge.n	80093c6 <roundf+0x26>
 80093b4:	3201      	adds	r2, #1
 80093b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80093ba:	d101      	bne.n	80093c0 <roundf+0x20>
 80093bc:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80093c0:	ee00 3a10 	vmov	s0, r3
 80093c4:	4770      	bx	lr
 80093c6:	4908      	ldr	r1, [pc, #32]	; (80093e8 <roundf+0x48>)
 80093c8:	4111      	asrs	r1, r2
 80093ca:	4208      	tst	r0, r1
 80093cc:	d0fa      	beq.n	80093c4 <roundf+0x24>
 80093ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80093d2:	4113      	asrs	r3, r2
 80093d4:	4403      	add	r3, r0
 80093d6:	ea23 0301 	bic.w	r3, r3, r1
 80093da:	e7f1      	b.n	80093c0 <roundf+0x20>
 80093dc:	2a80      	cmp	r2, #128	; 0x80
 80093de:	d1f1      	bne.n	80093c4 <roundf+0x24>
 80093e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop
 80093e8:	007fffff 	.word	0x007fffff

080093ec <atan2f>:
 80093ec:	f000 b850 	b.w	8009490 <__ieee754_atan2f>

080093f0 <sqrtf>:
 80093f0:	b500      	push	{lr}
 80093f2:	ed2d 8b02 	vpush	{d8}
 80093f6:	b08b      	sub	sp, #44	; 0x2c
 80093f8:	eeb0 8a40 	vmov.f32	s16, s0
 80093fc:	f000 f8f2 	bl	80095e4 <__ieee754_sqrtf>
 8009400:	4b21      	ldr	r3, [pc, #132]	; (8009488 <sqrtf+0x98>)
 8009402:	f993 3000 	ldrsb.w	r3, [r3]
 8009406:	1c5a      	adds	r2, r3, #1
 8009408:	d028      	beq.n	800945c <sqrtf+0x6c>
 800940a:	eeb4 8a48 	vcmp.f32	s16, s16
 800940e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009412:	d623      	bvs.n	800945c <sqrtf+0x6c>
 8009414:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800941c:	d51e      	bpl.n	800945c <sqrtf+0x6c>
 800941e:	2201      	movs	r2, #1
 8009420:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8009424:	9200      	str	r2, [sp, #0]
 8009426:	4a19      	ldr	r2, [pc, #100]	; (800948c <sqrtf+0x9c>)
 8009428:	9201      	str	r2, [sp, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	9208      	str	r2, [sp, #32]
 800942e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8009432:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009436:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8009480 <sqrtf+0x90>
 800943a:	b9a3      	cbnz	r3, 8009466 <sqrtf+0x76>
 800943c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009440:	4668      	mov	r0, sp
 8009442:	f000 f8d2 	bl	80095ea <matherr>
 8009446:	b1a0      	cbz	r0, 8009472 <sqrtf+0x82>
 8009448:	9b08      	ldr	r3, [sp, #32]
 800944a:	b11b      	cbz	r3, 8009454 <sqrtf+0x64>
 800944c:	f7ff fe5a 	bl	8009104 <__errno>
 8009450:	9b08      	ldr	r3, [sp, #32]
 8009452:	6003      	str	r3, [r0, #0]
 8009454:	ed9d 0b06 	vldr	d0, [sp, #24]
 8009458:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800945c:	b00b      	add	sp, #44	; 0x2c
 800945e:	ecbd 8b02 	vpop	{d8}
 8009462:	f85d fb04 	ldr.w	pc, [sp], #4
 8009466:	2b02      	cmp	r3, #2
 8009468:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800946c:	ed8d 6b06 	vstr	d6, [sp, #24]
 8009470:	d1e6      	bne.n	8009440 <sqrtf+0x50>
 8009472:	f7ff fe47 	bl	8009104 <__errno>
 8009476:	2321      	movs	r3, #33	; 0x21
 8009478:	6003      	str	r3, [r0, #0]
 800947a:	e7e5      	b.n	8009448 <sqrtf+0x58>
 800947c:	f3af 8000 	nop.w
	...
 8009488:	24000074 	.word	0x24000074
 800948c:	08009800 	.word	0x08009800

08009490 <__ieee754_atan2f>:
 8009490:	ee10 2a90 	vmov	r2, s1
 8009494:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009498:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800949c:	b510      	push	{r4, lr}
 800949e:	eef0 7a40 	vmov.f32	s15, s0
 80094a2:	dc06      	bgt.n	80094b2 <__ieee754_atan2f+0x22>
 80094a4:	ee10 0a10 	vmov	r0, s0
 80094a8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80094ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80094b0:	dd04      	ble.n	80094bc <__ieee754_atan2f+0x2c>
 80094b2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80094b6:	eeb0 0a67 	vmov.f32	s0, s15
 80094ba:	bd10      	pop	{r4, pc}
 80094bc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80094c0:	d103      	bne.n	80094ca <__ieee754_atan2f+0x3a>
 80094c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094c6:	f000 b893 	b.w	80095f0 <atanf>
 80094ca:	1794      	asrs	r4, r2, #30
 80094cc:	f004 0402 	and.w	r4, r4, #2
 80094d0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80094d4:	b93b      	cbnz	r3, 80094e6 <__ieee754_atan2f+0x56>
 80094d6:	2c02      	cmp	r4, #2
 80094d8:	d06b      	beq.n	80095b2 <__ieee754_atan2f+0x122>
 80094da:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80095b8 <__ieee754_atan2f+0x128>
 80094de:	2c03      	cmp	r4, #3
 80094e0:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80094e4:	e7e7      	b.n	80094b6 <__ieee754_atan2f+0x26>
 80094e6:	b939      	cbnz	r1, 80094f8 <__ieee754_atan2f+0x68>
 80094e8:	eddf 7a34 	vldr	s15, [pc, #208]	; 80095bc <__ieee754_atan2f+0x12c>
 80094ec:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80095c0 <__ieee754_atan2f+0x130>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	fe67 7a87 	vselge.f32	s15, s15, s14
 80094f6:	e7de      	b.n	80094b6 <__ieee754_atan2f+0x26>
 80094f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80094fc:	d121      	bne.n	8009542 <__ieee754_atan2f+0xb2>
 80094fe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009502:	d111      	bne.n	8009528 <__ieee754_atan2f+0x98>
 8009504:	2c02      	cmp	r4, #2
 8009506:	d009      	beq.n	800951c <__ieee754_atan2f+0x8c>
 8009508:	2c03      	cmp	r4, #3
 800950a:	d00a      	beq.n	8009522 <__ieee754_atan2f+0x92>
 800950c:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80095c4 <__ieee754_atan2f+0x134>
 8009510:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80095c8 <__ieee754_atan2f+0x138>
 8009514:	2c01      	cmp	r4, #1
 8009516:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800951a:	e7cc      	b.n	80094b6 <__ieee754_atan2f+0x26>
 800951c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80095cc <__ieee754_atan2f+0x13c>
 8009520:	e7c9      	b.n	80094b6 <__ieee754_atan2f+0x26>
 8009522:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80095d0 <__ieee754_atan2f+0x140>
 8009526:	e7c6      	b.n	80094b6 <__ieee754_atan2f+0x26>
 8009528:	2c02      	cmp	r4, #2
 800952a:	d042      	beq.n	80095b2 <__ieee754_atan2f+0x122>
 800952c:	2c03      	cmp	r4, #3
 800952e:	d005      	beq.n	800953c <__ieee754_atan2f+0xac>
 8009530:	2c01      	cmp	r4, #1
 8009532:	eddf 7a28 	vldr	s15, [pc, #160]	; 80095d4 <__ieee754_atan2f+0x144>
 8009536:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80095d8 <__ieee754_atan2f+0x148>
 800953a:	e7ec      	b.n	8009516 <__ieee754_atan2f+0x86>
 800953c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80095b8 <__ieee754_atan2f+0x128>
 8009540:	e7b9      	b.n	80094b6 <__ieee754_atan2f+0x26>
 8009542:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009546:	d0cf      	beq.n	80094e8 <__ieee754_atan2f+0x58>
 8009548:	1a5b      	subs	r3, r3, r1
 800954a:	15db      	asrs	r3, r3, #23
 800954c:	2b3c      	cmp	r3, #60	; 0x3c
 800954e:	dc1a      	bgt.n	8009586 <__ieee754_atan2f+0xf6>
 8009550:	2a00      	cmp	r2, #0
 8009552:	da01      	bge.n	8009558 <__ieee754_atan2f+0xc8>
 8009554:	333c      	adds	r3, #60	; 0x3c
 8009556:	db19      	blt.n	800958c <__ieee754_atan2f+0xfc>
 8009558:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800955c:	f000 f91a 	bl	8009794 <fabsf>
 8009560:	f000 f846 	bl	80095f0 <atanf>
 8009564:	eef0 7a40 	vmov.f32	s15, s0
 8009568:	2c01      	cmp	r4, #1
 800956a:	d012      	beq.n	8009592 <__ieee754_atan2f+0x102>
 800956c:	2c02      	cmp	r4, #2
 800956e:	d017      	beq.n	80095a0 <__ieee754_atan2f+0x110>
 8009570:	2c00      	cmp	r4, #0
 8009572:	d0a0      	beq.n	80094b6 <__ieee754_atan2f+0x26>
 8009574:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80095dc <__ieee754_atan2f+0x14c>
 8009578:	ee77 7a87 	vadd.f32	s15, s15, s14
 800957c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80095e0 <__ieee754_atan2f+0x150>
 8009580:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009584:	e797      	b.n	80094b6 <__ieee754_atan2f+0x26>
 8009586:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80095bc <__ieee754_atan2f+0x12c>
 800958a:	e7ed      	b.n	8009568 <__ieee754_atan2f+0xd8>
 800958c:	eddf 7a12 	vldr	s15, [pc, #72]	; 80095d8 <__ieee754_atan2f+0x148>
 8009590:	e7ea      	b.n	8009568 <__ieee754_atan2f+0xd8>
 8009592:	ee17 3a90 	vmov	r3, s15
 8009596:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800959a:	ee07 3a90 	vmov	s15, r3
 800959e:	e78a      	b.n	80094b6 <__ieee754_atan2f+0x26>
 80095a0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80095dc <__ieee754_atan2f+0x14c>
 80095a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80095a8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80095e0 <__ieee754_atan2f+0x150>
 80095ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095b0:	e781      	b.n	80094b6 <__ieee754_atan2f+0x26>
 80095b2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80095e0 <__ieee754_atan2f+0x150>
 80095b6:	e77e      	b.n	80094b6 <__ieee754_atan2f+0x26>
 80095b8:	c0490fdb 	.word	0xc0490fdb
 80095bc:	3fc90fdb 	.word	0x3fc90fdb
 80095c0:	bfc90fdb 	.word	0xbfc90fdb
 80095c4:	bf490fdb 	.word	0xbf490fdb
 80095c8:	3f490fdb 	.word	0x3f490fdb
 80095cc:	4016cbe4 	.word	0x4016cbe4
 80095d0:	c016cbe4 	.word	0xc016cbe4
 80095d4:	80000000 	.word	0x80000000
 80095d8:	00000000 	.word	0x00000000
 80095dc:	33bbbd2e 	.word	0x33bbbd2e
 80095e0:	40490fdb 	.word	0x40490fdb

080095e4 <__ieee754_sqrtf>:
 80095e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80095e8:	4770      	bx	lr

080095ea <matherr>:
 80095ea:	2000      	movs	r0, #0
 80095ec:	4770      	bx	lr
	...

080095f0 <atanf>:
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	ee10 5a10 	vmov	r5, s0
 80095f6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80095fa:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80095fe:	eef0 7a40 	vmov.f32	s15, s0
 8009602:	db0f      	blt.n	8009624 <atanf+0x34>
 8009604:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009608:	dd04      	ble.n	8009614 <atanf+0x24>
 800960a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800960e:	eeb0 0a67 	vmov.f32	s0, s15
 8009612:	bd38      	pop	{r3, r4, r5, pc}
 8009614:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8009748 <atanf+0x158>
 8009618:	eddf 7a4c 	vldr	s15, [pc, #304]	; 800974c <atanf+0x15c>
 800961c:	2d00      	cmp	r5, #0
 800961e:	fe77 7a87 	vselgt.f32	s15, s15, s14
 8009622:	e7f4      	b.n	800960e <atanf+0x1e>
 8009624:	4b4a      	ldr	r3, [pc, #296]	; (8009750 <atanf+0x160>)
 8009626:	429c      	cmp	r4, r3
 8009628:	dc10      	bgt.n	800964c <atanf+0x5c>
 800962a:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800962e:	da0a      	bge.n	8009646 <atanf+0x56>
 8009630:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8009754 <atanf+0x164>
 8009634:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009638:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800963c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009644:	dce3      	bgt.n	800960e <atanf+0x1e>
 8009646:	f04f 33ff 	mov.w	r3, #4294967295
 800964a:	e013      	b.n	8009674 <atanf+0x84>
 800964c:	f000 f8a2 	bl	8009794 <fabsf>
 8009650:	4b41      	ldr	r3, [pc, #260]	; (8009758 <atanf+0x168>)
 8009652:	429c      	cmp	r4, r3
 8009654:	dc4f      	bgt.n	80096f6 <atanf+0x106>
 8009656:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800965a:	429c      	cmp	r4, r3
 800965c:	dc41      	bgt.n	80096e2 <atanf+0xf2>
 800965e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009662:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009666:	eea0 7a27 	vfma.f32	s14, s0, s15
 800966a:	2300      	movs	r3, #0
 800966c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009670:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009674:	1c5a      	adds	r2, r3, #1
 8009676:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800967a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800975c <atanf+0x16c>
 800967e:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009760 <atanf+0x170>
 8009682:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8009764 <atanf+0x174>
 8009686:	ee66 6a06 	vmul.f32	s13, s12, s12
 800968a:	eee6 5a87 	vfma.f32	s11, s13, s14
 800968e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009768 <atanf+0x178>
 8009692:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009696:	eddf 5a35 	vldr	s11, [pc, #212]	; 800976c <atanf+0x17c>
 800969a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800969e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009770 <atanf+0x180>
 80096a2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80096a6:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009774 <atanf+0x184>
 80096aa:	eee7 5a26 	vfma.f32	s11, s14, s13
 80096ae:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009778 <atanf+0x188>
 80096b2:	eea6 5a87 	vfma.f32	s10, s13, s14
 80096b6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800977c <atanf+0x18c>
 80096ba:	eea5 7a26 	vfma.f32	s14, s10, s13
 80096be:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8009780 <atanf+0x190>
 80096c2:	eea7 5a26 	vfma.f32	s10, s14, s13
 80096c6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009784 <atanf+0x194>
 80096ca:	eea5 7a26 	vfma.f32	s14, s10, s13
 80096ce:	ee27 7a26 	vmul.f32	s14, s14, s13
 80096d2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80096d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096da:	d121      	bne.n	8009720 <atanf+0x130>
 80096dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80096e0:	e795      	b.n	800960e <atanf+0x1e>
 80096e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80096e6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80096ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 80096ee:	2301      	movs	r3, #1
 80096f0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80096f4:	e7be      	b.n	8009674 <atanf+0x84>
 80096f6:	4b24      	ldr	r3, [pc, #144]	; (8009788 <atanf+0x198>)
 80096f8:	429c      	cmp	r4, r3
 80096fa:	dc0b      	bgt.n	8009714 <atanf+0x124>
 80096fc:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009700:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009704:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009708:	2302      	movs	r3, #2
 800970a:	ee70 6a67 	vsub.f32	s13, s0, s15
 800970e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009712:	e7af      	b.n	8009674 <atanf+0x84>
 8009714:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009718:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800971c:	2303      	movs	r3, #3
 800971e:	e7a9      	b.n	8009674 <atanf+0x84>
 8009720:	4a1a      	ldr	r2, [pc, #104]	; (800978c <atanf+0x19c>)
 8009722:	491b      	ldr	r1, [pc, #108]	; (8009790 <atanf+0x1a0>)
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	441a      	add	r2, r3
 8009728:	440b      	add	r3, r1
 800972a:	edd3 6a00 	vldr	s13, [r3]
 800972e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009732:	2d00      	cmp	r5, #0
 8009734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009738:	ed92 7a00 	vldr	s14, [r2]
 800973c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009740:	bfb8      	it	lt
 8009742:	eef1 7a67 	vneglt.f32	s15, s15
 8009746:	e762      	b.n	800960e <atanf+0x1e>
 8009748:	bfc90fdb 	.word	0xbfc90fdb
 800974c:	3fc90fdb 	.word	0x3fc90fdb
 8009750:	3edfffff 	.word	0x3edfffff
 8009754:	7149f2ca 	.word	0x7149f2ca
 8009758:	3f97ffff 	.word	0x3f97ffff
 800975c:	3c8569d7 	.word	0x3c8569d7
 8009760:	3d4bda59 	.word	0x3d4bda59
 8009764:	bd6ef16b 	.word	0xbd6ef16b
 8009768:	3d886b35 	.word	0x3d886b35
 800976c:	3dba2e6e 	.word	0x3dba2e6e
 8009770:	3e124925 	.word	0x3e124925
 8009774:	3eaaaaab 	.word	0x3eaaaaab
 8009778:	bd15a221 	.word	0xbd15a221
 800977c:	bd9d8795 	.word	0xbd9d8795
 8009780:	bde38e38 	.word	0xbde38e38
 8009784:	be4ccccd 	.word	0xbe4ccccd
 8009788:	401bffff 	.word	0x401bffff
 800978c:	08009808 	.word	0x08009808
 8009790:	08009818 	.word	0x08009818

08009794 <fabsf>:
 8009794:	ee10 3a10 	vmov	r3, s0
 8009798:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800979c:	ee00 3a10 	vmov	s0, r3
 80097a0:	4770      	bx	lr
	...

080097a4 <_init>:
 80097a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a6:	bf00      	nop
 80097a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097aa:	bc08      	pop	{r3}
 80097ac:	469e      	mov	lr, r3
 80097ae:	4770      	bx	lr

080097b0 <_fini>:
 80097b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b2:	bf00      	nop
 80097b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b6:	bc08      	pop	{r3}
 80097b8:	469e      	mov	lr, r3
 80097ba:	4770      	bx	lr
