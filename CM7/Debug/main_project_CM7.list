
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08009458  08009458  00019458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080097d8  080097d8  000197d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080097e0  080097e0  000197e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080097e4  080097e4  000197e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  080097e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00007140  200001e4  080099cc  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20007324  080099cc  00027324  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021a46  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003697  00000000  00000000  00041c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001298  00000000  00000000  000452f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001120  00000000  00000000  00046588  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003b055  00000000  00000000  000476a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000126d1  00000000  00000000  000826fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00184038  00000000  00000000  00094dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000e9  00000000  00000000  00218e06  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000055ec  00000000  00000000  00218ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00000339  00000000  00000000  0021e4dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001e4 	.word	0x200001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800943c 	.word	0x0800943c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001e8 	.word	0x200001e8
 80002dc:	0800943c 	.word	0x0800943c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <SystemInit+0xc4>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <SystemInit+0xc4>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <SystemInit+0xc4>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <SystemInit+0xc4>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemInit+0xc8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <SystemInit+0xc8>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <SystemInit+0xc8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemInit+0xc8>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4924      	ldr	r1, [pc, #144]	; (8000758 <SystemInit+0xc8>)
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <SystemInit+0xcc>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemInit+0xc8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006d4:	4b20      	ldr	r3, [pc, #128]	; (8000758 <SystemInit+0xc8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemInit+0xc8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <SystemInit+0xc8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <SystemInit+0xc8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <SystemInit+0xc8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <SystemInit+0xc8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <SystemInit+0xc8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <SystemInit+0xc8>)
 8000700:	2200      	movs	r2, #0
 8000702:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <SystemInit+0xc8>)
 8000706:	2200      	movs	r2, #0
 8000708:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <SystemInit+0xc8>)
 800070c:	2200      	movs	r2, #0
 800070e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <SystemInit+0xc8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a10      	ldr	r2, [pc, #64]	; (8000758 <SystemInit+0xc8>)
 8000716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800071a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <SystemInit+0xc8>)
 800071e:	2200      	movs	r2, #0
 8000720:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <SystemInit+0xd0>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <SystemInit+0xd0>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <SystemInit+0xd4>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <SystemInit+0xd8>)
 8000734:	4013      	ands	r3, r2
 8000736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800073a:	d202      	bcs.n	8000742 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <SystemInit+0xdc>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SystemInit+0xc4>)
 8000744:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000748:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	58024400 	.word	0x58024400
 800075c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000760:	580000c0 	.word	0x580000c0
 8000764:	5c001000 	.word	0x5c001000
 8000768:	ffff0000 	.word	0xffff0000
 800076c:	51008108 	.word	0x51008108

08000770 <inst_absolute>:

extern uint16_t frameSize;

// Preprocessing

void inst_absolute(float32_t in[], float32_t out[]){
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	int j = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	e031      	b.n	80007e8 <inst_absolute+0x78>
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	ed93 7a00 	vldr	s14, [r3]
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	4413      	add	r3, r2
 8000798:	edd3 7a00 	vldr	s15, [r3]
 800079c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	3301      	adds	r3, #1
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	edd3 6a00 	vldr	s13, [r3]
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	3301      	adds	r3, #1
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	4413      	add	r3, r2
 80007b8:	edd3 7a00 	vldr	s15, [r3]
 80007bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	683a      	ldr	r2, [r7, #0]
 80007ca:	18d4      	adds	r4, r2, r3
 80007cc:	eeb0 0a67 	vmov.f32	s0, s15
 80007d0:	f008 fc5a 	bl	8009088 <sqrtf>
 80007d4:	eef0 7a40 	vmov.f32	s15, s0
 80007d8:	edc4 7a00 	vstr	s15, [r4]
		j++;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3301      	adds	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	3302      	adds	r3, #2
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <inst_absolute+0x8c>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	dbc7      	blt.n	8000784 <inst_absolute+0x14>
	}
}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd90      	pop	{r4, r7, pc}
 80007fc:	08009530 	.word	0x08009530

08000800 <inst_phase>:

void inst_phase(float32_t in[], float32_t out[]){
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
	int j = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	e020      	b.n	8000856 <inst_phase+0x56>
		out[j] = atan2f(in[i+1], in[i]);
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	3301      	adds	r3, #1
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	edd3 7a00 	vldr	s15, [r3]
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	ed93 7a00 	vldr	s14, [r3]
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	18d4      	adds	r4, r2, r3
 8000836:	eef0 0a47 	vmov.f32	s1, s14
 800083a:	eeb0 0a67 	vmov.f32	s0, s15
 800083e:	f008 fc1f 	bl	8009080 <atan2f>
 8000842:	eef0 7a40 	vmov.f32	s15, s0
 8000846:	edc4 7a00 	vstr	s15, [r4]
		j++;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	3301      	adds	r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	3302      	adds	r3, #2
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <inst_phase+0x6c>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	68ba      	ldr	r2, [r7, #8]
 800085e:	429a      	cmp	r2, r3
 8000860:	dbd8      	blt.n	8000814 <inst_phase+0x14>
	}
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	bd90      	pop	{r4, r7, pc}
 800086a:	bf00      	nop
 800086c:	08009530 	.word	0x08009530

08000870 <unwrap>:

void unwrap(float32_t in[], float32_t out[]){
 8000870:	b480      	push	{r7}
 8000872:	b087      	sub	sp, #28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	        end
	    end
	end
	yout((i+1),:)=u(i+1)+(2*pi*k); % add 2*pi*k to the last element of the input
	*/
	uint16_t k = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	82fb      	strh	r3, [r7, #22]
	float32_t alpha = M_PI;
 800087e:	4b48      	ldr	r3, [pc, #288]	; (80009a0 <unwrap+0x130>)
 8000880:	60fb      	str	r3, [r7, #12]
	float32_t diff = 0.0f;
 8000882:	f04f 0300 	mov.w	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < (frameSize - 1); i++){
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	e052      	b.n	8000934 <unwrap+0xc4>
		out[i] = in[i] + 2*M_PI*k;
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	edd3 7a00 	vldr	s15, [r3]
 800089a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800089e:	8afb      	ldrh	r3, [r7, #22]
 80008a0:	ee07 3a90 	vmov	s15, r3
 80008a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008a8:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8000998 <unwrap+0x128>
 80008ac:	ee27 7b05 	vmul.f64	d7, d7, d5
 80008b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	4413      	add	r3, r2
 80008bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008c0:	edc3 7a00 	vstr	s15, [r3]
		diff = fabsf(in[i+1] - in[i]);
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	3301      	adds	r3, #1
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	ed93 7a00 	vldr	s14, [r3]
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	edd3 7a00 	vldr	s15, [r3]
 80008de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008e2:	eef0 7ae7 	vabs.f32	s15, s15
 80008e6:	edc7 7a02 	vstr	s15, [r7, #8]
		if(diff > alpha){
 80008ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80008ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80008f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008fa:	dd18      	ble.n	800092e <unwrap+0xbe>
			if(in[i+1] < in[i]){
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	3301      	adds	r3, #1
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	ed93 7a00 	vldr	s14, [r3]
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	edd3 7a00 	vldr	s15, [r3]
 8000916:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800091a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800091e:	d503      	bpl.n	8000928 <unwrap+0xb8>
				k++;
 8000920:	8afb      	ldrh	r3, [r7, #22]
 8000922:	3301      	adds	r3, #1
 8000924:	82fb      	strh	r3, [r7, #22]
 8000926:	e002      	b.n	800092e <unwrap+0xbe>
			} else {
				k--;
 8000928:	8afb      	ldrh	r3, [r7, #22]
 800092a:	3b01      	subs	r3, #1
 800092c:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (frameSize - 1); i++){
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	3301      	adds	r3, #1
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <unwrap+0x134>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	3b01      	subs	r3, #1
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	429a      	cmp	r2, r3
 800093e:	dba6      	blt.n	800088e <unwrap+0x1e>
			}
		}
	}
	out[frameSize-1] = in[frameSize-1] + 2*M_PI*k;
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <unwrap+0x134>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800094a:	4413      	add	r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	edd3 7a00 	vldr	s15, [r3]
 8000956:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800095a:	8afb      	ldrh	r3, [r7, #22]
 800095c:	ee07 3a90 	vmov	s15, r3
 8000960:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000964:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000998 <unwrap+0x128>
 8000968:	ee27 7b05 	vmul.f64	d7, d7, d5
 800096c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <unwrap+0x134>)
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800097a:	4413      	add	r3, r2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	4413      	add	r3, r2
 8000982:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000986:	edc3 7a00 	vstr	s15, [r3]
}
 800098a:	bf00      	nop
 800098c:	371c      	adds	r7, #28
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	54442d18 	.word	0x54442d18
 800099c:	401921fb 	.word	0x401921fb
 80009a0:	40490fdb 	.word	0x40490fdb
 80009a4:	08009530 	.word	0x08009530

080009a8 <inst_frequency>:

void inst_frequency(float32_t in[], float32_t out[]){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4b53      	ldr	r3, [pc, #332]	; (8000b00 <inst_frequency+0x158>)
 80009b4:	f242 0210 	movw	r2, #8208	; 0x2010
 80009b8:	443a      	add	r2, r7
 80009ba:	4413      	add	r3, r2
 80009bc:	6018      	str	r0, [r3, #0]
 80009be:	4b51      	ldr	r3, [pc, #324]	; (8000b04 <inst_frequency+0x15c>)
 80009c0:	f242 0210 	movw	r2, #8208	; 0x2010
 80009c4:	443a      	add	r2, r7
 80009c6:	4413      	add	r3, r2
 80009c8:	6019      	str	r1, [r3, #0]
	float32_t phase[1024] = {0};
 80009ca:	4b4f      	ldr	r3, [pc, #316]	; (8000b08 <inst_frequency+0x160>)
 80009cc:	f242 0210 	movw	r2, #8208	; 0x2010
 80009d0:	443a      	add	r2, r7
 80009d2:	4413      	add	r3, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009da:	461a      	mov	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	f006 fb9f 	bl	8007120 <memset>
	float32_t unwrapped_phase[1024] = {0};
 80009e2:	4b4a      	ldr	r3, [pc, #296]	; (8000b0c <inst_frequency+0x164>)
 80009e4:	f242 0210 	movw	r2, #8208	; 0x2010
 80009e8:	443a      	add	r2, r7
 80009ea:	4413      	add	r3, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f2:	461a      	mov	r2, r3
 80009f4:	2100      	movs	r1, #0
 80009f6:	f006 fb93 	bl	8007120 <memset>
	float32_t C = 1 / M_TWOPI;
 80009fa:	4b45      	ldr	r3, [pc, #276]	; (8000b10 <inst_frequency+0x168>)
 80009fc:	f242 0208 	movw	r2, #8200	; 0x2008
 8000a00:	443a      	add	r2, r7
 8000a02:	6013      	str	r3, [r2, #0]
	inst_phase(&in[0], &phase[0]);
 8000a04:	4a40      	ldr	r2, [pc, #256]	; (8000b08 <inst_frequency+0x160>)
 8000a06:	f242 0310 	movw	r3, #8208	; 0x2010
 8000a0a:	443b      	add	r3, r7
 8000a0c:	441a      	add	r2, r3
 8000a0e:	4b3c      	ldr	r3, [pc, #240]	; (8000b00 <inst_frequency+0x158>)
 8000a10:	f242 0110 	movw	r1, #8208	; 0x2010
 8000a14:	4439      	add	r1, r7
 8000a16:	440b      	add	r3, r1
 8000a18:	4611      	mov	r1, r2
 8000a1a:	6818      	ldr	r0, [r3, #0]
 8000a1c:	f7ff fef0 	bl	8000800 <inst_phase>
	unwrap(&phase[0], &unwrapped_phase[0]);
 8000a20:	4a3a      	ldr	r2, [pc, #232]	; (8000b0c <inst_frequency+0x164>)
 8000a22:	f242 0310 	movw	r3, #8208	; 0x2010
 8000a26:	443b      	add	r3, r7
 8000a28:	441a      	add	r2, r3
 8000a2a:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <inst_frequency+0x160>)
 8000a2c:	f242 0110 	movw	r1, #8208	; 0x2010
 8000a30:	4439      	add	r1, r7
 8000a32:	440b      	add	r3, r1
 8000a34:	4611      	mov	r1, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ff1a 	bl	8000870 <unwrap>
	for(int i = 0; i < (frameSize-1); i++){
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f242 020c 	movw	r2, #8204	; 0x200c
 8000a42:	443a      	add	r2, r7
 8000a44:	6013      	str	r3, [r2, #0]
 8000a46:	e03a      	b.n	8000abe <inst_frequency+0x116>
		out[i] = C*(unwrapped_phase[i + 1] - unwrapped_phase[i]);
 8000a48:	f242 030c 	movw	r3, #8204	; 0x200c
 8000a4c:	443b      	add	r3, r7
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	1c5a      	adds	r2, r3, #1
 8000a52:	4b2e      	ldr	r3, [pc, #184]	; (8000b0c <inst_frequency+0x164>)
 8000a54:	f242 0110 	movw	r1, #8208	; 0x2010
 8000a58:	4439      	add	r1, r7
 8000a5a:	440b      	add	r3, r1
 8000a5c:	0092      	lsls	r2, r2, #2
 8000a5e:	4413      	add	r3, r2
 8000a60:	ed93 7a00 	vldr	s14, [r3]
 8000a64:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <inst_frequency+0x164>)
 8000a66:	f242 0210 	movw	r2, #8208	; 0x2010
 8000a6a:	443a      	add	r2, r7
 8000a6c:	4413      	add	r3, r2
 8000a6e:	f242 020c 	movw	r2, #8204	; 0x200c
 8000a72:	443a      	add	r2, r7
 8000a74:	6812      	ldr	r2, [r2, #0]
 8000a76:	0092      	lsls	r2, r2, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	edd3 7a00 	vldr	s15, [r3]
 8000a7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a82:	f242 030c 	movw	r3, #8204	; 0x200c
 8000a86:	443b      	add	r3, r7
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	009a      	lsls	r2, r3, #2
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <inst_frequency+0x15c>)
 8000a8e:	f242 0110 	movw	r1, #8208	; 0x2010
 8000a92:	4439      	add	r1, r7
 8000a94:	440b      	add	r3, r1
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4413      	add	r3, r2
 8000a9a:	f242 0208 	movw	r2, #8200	; 0x2008
 8000a9e:	443a      	add	r2, r7
 8000aa0:	edd2 7a00 	vldr	s15, [r2]
 8000aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aa8:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < (frameSize-1); i++){
 8000aac:	f242 030c 	movw	r3, #8204	; 0x200c
 8000ab0:	443b      	add	r3, r7
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	f242 020c 	movw	r2, #8204	; 0x200c
 8000aba:	443a      	add	r2, r7
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <inst_frequency+0x16c>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	f242 020c 	movw	r2, #8204	; 0x200c
 8000ac8:	443a      	add	r2, r7
 8000aca:	6812      	ldr	r2, [r2, #0]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dbbb      	blt.n	8000a48 <inst_frequency+0xa0>
	}
	out[frameSize - 1] = 0;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <inst_frequency+0x16c>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000ada:	4413      	add	r3, r2
 8000adc:	009a      	lsls	r2, r3, #2
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <inst_frequency+0x15c>)
 8000ae0:	f242 0110 	movw	r1, #8208	; 0x2010
 8000ae4:	4439      	add	r1, r7
 8000ae6:	440b      	add	r3, r1
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	f04f 0200 	mov.w	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
}
 8000af2:	bf00      	nop
 8000af4:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	ffffdff4 	.word	0xffffdff4
 8000b04:	ffffdff0 	.word	0xffffdff0
 8000b08:	ffffeff8 	.word	0xffffeff8
 8000b0c:	ffffdff8 	.word	0xffffdff8
 8000b10:	3e22f983 	.word	0x3e22f983
 8000b14:	08009530 	.word	0x08009530

08000b18 <inst_centralized_normalized_absolute>:

void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
	float32_t mean = 0, max = 0;
 8000b22:	f04f 0300 	mov.w	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	f04f 0300 	mov.w	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
	uint32_t max_index = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
	float32_t *absolute, *normalized;
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000b32:	4b36      	ldr	r3, [pc, #216]	; (8000c0c <inst_centralized_normalized_absolute+0xf4>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f006 fae1 	bl	8007100 <malloc>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	61fb      	str	r3, [r7, #28]
	normalized = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000b42:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <inst_centralized_normalized_absolute+0xf4>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f006 fad9 	bl	8007100 <malloc>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	61bb      	str	r3, [r7, #24]
	inst_absolute(in, &absolute[0]);
 8000b52:	69f9      	ldr	r1, [r7, #28]
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff fe0b 	bl	8000770 <inst_absolute>
	arm_max_f32(absolute, frameSize, &max, &max_index);
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <inst_centralized_normalized_absolute+0xf4>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	f107 0210 	add.w	r2, r7, #16
 8000b68:	69f8      	ldr	r0, [r7, #28]
 8000b6a:	f006 fa39 	bl	8006fe0 <arm_max_f32>
	for(int a = 0; a < frameSize; a++){
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
 8000b72:	e012      	b.n	8000b9a <inst_centralized_normalized_absolute+0x82>
		normalized[a] = absolute[a] / max;
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	69fa      	ldr	r2, [r7, #28]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	edd3 6a00 	vldr	s13, [r3]
 8000b80:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b90:	edc3 7a00 	vstr	s15, [r3]
	for(int a = 0; a < frameSize; a++){
 8000b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b96:	3301      	adds	r3, #1
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <inst_centralized_normalized_absolute+0xf4>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	dbe6      	blt.n	8000b74 <inst_centralized_normalized_absolute+0x5c>
	}
	arm_mean_f32(&normalized[0], frameSize, &mean);
 8000ba6:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <inst_centralized_normalized_absolute+0xf4>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	69b8      	ldr	r0, [r7, #24]
 8000bb4:	f006 f9de 	bl	8006f74 <arm_mean_f32>
	for(int i = 0; i < frameSize; i++){
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
 8000bbc:	e016      	b.n	8000bec <inst_centralized_normalized_absolute+0xd4>
		out[i] = normalized[i] / mean - 1;
 8000bbe:	6a3b      	ldr	r3, [r7, #32]
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	edd3 6a00 	vldr	s13, [r3]
 8000bca:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	683a      	ldr	r2, [r7, #0]
 8000bd8:	4413      	add	r3, r2
 8000bda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000be2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < frameSize; i++){
 8000be6:	6a3b      	ldr	r3, [r7, #32]
 8000be8:	3301      	adds	r3, #1
 8000bea:	623b      	str	r3, [r7, #32]
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <inst_centralized_normalized_absolute+0xf4>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	6a3b      	ldr	r3, [r7, #32]
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	dbe2      	blt.n	8000bbe <inst_centralized_normalized_absolute+0xa6>
	}
	free(absolute);
 8000bf8:	69f8      	ldr	r0, [r7, #28]
 8000bfa:	f006 fa89 	bl	8007110 <free>
	free(normalized);
 8000bfe:	69b8      	ldr	r0, [r7, #24]
 8000c00:	f006 fa86 	bl	8007110 <free>
}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	; 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	08009530 	.word	0x08009530

08000c10 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08c      	sub	sp, #48	; 0x30
 8000c14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	4b4b      	ldr	r3, [pc, #300]	; (8000d54 <MX_GPIO_Init+0x144>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	4a49      	ldr	r2, [pc, #292]	; (8000d54 <MX_GPIO_Init+0x144>)
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c36:	4b47      	ldr	r3, [pc, #284]	; (8000d54 <MX_GPIO_Init+0x144>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
 8000c42:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c44:	4b43      	ldr	r3, [pc, #268]	; (8000d54 <MX_GPIO_Init+0x144>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	4a42      	ldr	r2, [pc, #264]	; (8000d54 <MX_GPIO_Init+0x144>)
 8000c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c54:	4b3f      	ldr	r3, [pc, #252]	; (8000d54 <MX_GPIO_Init+0x144>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	4b3c      	ldr	r3, [pc, #240]	; (8000d54 <MX_GPIO_Init+0x144>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	4a3a      	ldr	r2, [pc, #232]	; (8000d54 <MX_GPIO_Init+0x144>)
 8000c6a:	f043 0302 	orr.w	r3, r3, #2
 8000c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c72:	4b38      	ldr	r3, [pc, #224]	; (8000d54 <MX_GPIO_Init+0x144>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c80:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <MX_GPIO_Init+0x144>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	4a33      	ldr	r2, [pc, #204]	; (8000d54 <MX_GPIO_Init+0x144>)
 8000c88:	f043 0308 	orr.w	r3, r3, #8
 8000c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c90:	4b30      	ldr	r3, [pc, #192]	; (8000d54 <MX_GPIO_Init+0x144>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <MX_GPIO_Init+0x144>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	4a2b      	ldr	r2, [pc, #172]	; (8000d54 <MX_GPIO_Init+0x144>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cae:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <MX_GPIO_Init+0x144>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cbc:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <MX_GPIO_Init+0x144>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	4a24      	ldr	r2, [pc, #144]	; (8000d54 <MX_GPIO_Init+0x144>)
 8000cc4:	f043 0310 	orr.w	r3, r3, #16
 8000cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ccc:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <MX_GPIO_Init+0x144>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd2:	f003 0310 	and.w	r3, r3, #16
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ce0:	481d      	ldr	r0, [pc, #116]	; (8000d58 <MX_GPIO_Init+0x148>)
 8000ce2:	f001 fc51 	bl	8002588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2102      	movs	r1, #2
 8000cea:	481c      	ldr	r0, [pc, #112]	; (8000d5c <MX_GPIO_Init+0x14c>)
 8000cec:	f001 fc4c 	bl	8002588 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cf0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	4813      	ldr	r0, [pc, #76]	; (8000d58 <MX_GPIO_Init+0x148>)
 8000d0a:	f001 fa8d 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d0e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d20:	230a      	movs	r3, #10
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <MX_GPIO_Init+0x150>)
 8000d2c:	f001 fa7c 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_GPIO_Init+0x14c>)
 8000d48:	f001 fa6e 	bl	8002228 <HAL_GPIO_Init>

}
 8000d4c:	bf00      	nop
 8000d4e:	3730      	adds	r7, #48	; 0x30
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400
 8000d58:	58020400 	.word	0x58020400
 8000d5c:	58021000 	.word	0x58021000
 8000d60:	58020000 	.word	0x58020000

08000d64 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d6c:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <SCB_EnableICache+0x3c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d7c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <SCB_EnableICache+0x3c>)
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	4a06      	ldr	r2, [pc, #24]	; (8000da0 <SCB_EnableICache+0x3c>)
 8000d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d90:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <SCB_EnableDCache+0x7c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000db2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <SCB_EnableDCache+0x7c>)
 8000db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dbc:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	0b5b      	lsrs	r3, r3, #13
 8000dc2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000dc6:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	08db      	lsrs	r3, r3, #3
 8000dcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000dd0:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	015a      	lsls	r2, r3, #5
 8000dd6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000dda:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000ddc:	68ba      	ldr	r2, [r7, #8]
 8000dde:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000de0:	490f      	ldr	r1, [pc, #60]	; (8000e20 <SCB_EnableDCache+0x7c>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	1e5a      	subs	r2, r3, #1
 8000dec:	60ba      	str	r2, [r7, #8]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1ef      	bne.n	8000dd2 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	1e5a      	subs	r2, r3, #1
 8000df6:	60fa      	str	r2, [r7, #12]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1e5      	bne.n	8000dc8 <SCB_EnableDCache+0x24>
 8000dfc:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <SCB_EnableDCache+0x7c>)
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	4a06      	ldr	r2, [pc, #24]	; (8000e20 <SCB_EnableDCache+0x7c>)
 8000e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0a:	6153      	str	r3, [r2, #20]
 8000e0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e10:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	// char hello_world[50] = {"\r\nHello World!\r\n"};
	uint32_t counter = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
	/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8000e2e:	f7ff ff99 	bl	8000d64 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8000e32:	f7ff ffb7 	bl	8000da4 <SCB_EnableDCache>

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000e36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e3a:	60fb      	str	r3, [r7, #12]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000e3c:	bf00      	nop
 8000e3e:	4ba8      	ldr	r3, [pc, #672]	; (80010e0 <main+0x2bc>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d004      	beq.n	8000e54 <main+0x30>
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	1e5a      	subs	r2, r3, #1
 8000e4e:	60fa      	str	r2, [r7, #12]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	dcf4      	bgt.n	8000e3e <main+0x1a>
	if ( timeout < 0 )
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	da01      	bge.n	8000e5e <main+0x3a>
	{
		Error_Handler();
 8000e5a:	f000 fc15 	bl	8001688 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e5e:	f000 fdcf 	bl	8001a00 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e62:	f000 fac9 	bl	80013f8 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000e66:	4b9e      	ldr	r3, [pc, #632]	; (80010e0 <main+0x2bc>)
 8000e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6c:	4a9c      	ldr	r2, [pc, #624]	; (80010e0 <main+0x2bc>)
 8000e6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e76:	4b9a      	ldr	r3, [pc, #616]	; (80010e0 <main+0x2bc>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f001 fb99 	bl	80025bc <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f001 fbaf 	bl	80025f0 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000e92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e96:	60fb      	str	r3, [r7, #12]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000e98:	bf00      	nop
 8000e9a:	4b91      	ldr	r3, [pc, #580]	; (80010e0 <main+0x2bc>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d104      	bne.n	8000eb0 <main+0x8c>
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	1e5a      	subs	r2, r3, #1
 8000eaa:	60fa      	str	r2, [r7, #12]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	dcf4      	bgt.n	8000e9a <main+0x76>
	if ( timeout < 0 )
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	da01      	bge.n	8000eba <main+0x96>
	{
		Error_Handler();
 8000eb6:	f000 fbe7 	bl	8001688 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000eba:	f7ff fea9 	bl	8000c10 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000ebe:	f000 fcd7 	bl	8001870 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8000ec2:	f000 fc67 	bl	8001794 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	// Put UART peripheral in reception process
	if(HAL_UART_Receive_IT(&huart3, &rxBuffer.bytes[0], bufferSize) != HAL_OK)
 8000ec6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4985      	ldr	r1, [pc, #532]	; (80010e4 <main+0x2c0>)
 8000ece:	4886      	ldr	r0, [pc, #536]	; (80010e8 <main+0x2c4>)
 8000ed0:	f004 fa7a 	bl	80053c8 <HAL_UART_Receive_IT>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00a      	beq.n	8000ef0 <main+0xcc>
	{
		Error_Handler();
 8000eda:	f000 fbd5 	bl	8001688 <Error_Handler>
	}
	// Wait for message
	while (UartReady != SET)
 8000ede:	e007      	b.n	8000ef0 <main+0xcc>
	{
		HAL_Delay(500);
 8000ee0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ee4:	f000 fe1e 	bl	8001b24 <HAL_Delay>
		blink_green();
 8000ee8:	f000 fb80 	bl	80015ec <blink_green>
		blink_green();
 8000eec:	f000 fb7e 	bl	80015ec <blink_green>
	while (UartReady != SET)
 8000ef0:	4b7e      	ldr	r3, [pc, #504]	; (80010ec <main+0x2c8>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d1f2      	bne.n	8000ee0 <main+0xbc>
	}
	UartReady = RESET;
 8000efa:	4b7c      	ldr	r3, [pc, #496]	; (80010ec <main+0x2c8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2101      	movs	r1, #1
 8000f04:	487a      	ldr	r0, [pc, #488]	; (80010f0 <main+0x2cc>)
 8000f06:	f001 fb3f 	bl	8002588 <HAL_GPIO_WritePin>

	if(rxBuffer.bytes[8191] != 0 && (processed == 0)){
 8000f0a:	4a76      	ldr	r2, [pc, #472]	; (80010e4 <main+0x2c0>)
 8000f0c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000f10:	4413      	add	r3, r2
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d008      	beq.n	8000f2a <main+0x106>
 8000f18:	4b76      	ldr	r3, [pc, #472]	; (80010f4 <main+0x2d0>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d104      	bne.n	8000f2a <main+0x106>
		HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2102      	movs	r1, #2
 8000f24:	4874      	ldr	r0, [pc, #464]	; (80010f8 <main+0x2d4>)
 8000f26:	f001 fb2f 	bl	8002588 <HAL_GPIO_WritePin>
	}

	// HRTimer enable
	__HAL_TIM_ENABLE(&htim2);
 8000f2a:	4b74      	ldr	r3, [pc, #464]	; (80010fc <main+0x2d8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b72      	ldr	r3, [pc, #456]	; (80010fc <main+0x2d8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f042 0201 	orr.w	r2, r2, #1
 8000f38:	601a      	str	r2, [r3, #0]
	__HAL_TIM_UIFREMAP_DISABLE(&htim2);
 8000f3a:	4b70      	ldr	r3, [pc, #448]	; (80010fc <main+0x2d8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b6e      	ldr	r3, [pc, #440]	; (80010fc <main+0x2d8>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f48:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim2);
 8000f4a:	486c      	ldr	r0, [pc, #432]	; (80010fc <main+0x2d8>)
 8000f4c:	f003 feaa 	bl	8004ca4 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000f50:	4b6a      	ldr	r3, [pc, #424]	; (80010fc <main+0x2d8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2200      	movs	r2, #0
 8000f56:	625a      	str	r2, [r3, #36]	; 0x24

	/*****************************************************************************************************/
	// Instantaneous absolute value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000f58:	4b68      	ldr	r3, [pc, #416]	; (80010fc <main+0x2d8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(&rxBuffer.number[0], &instAbs.number[0]);
 8000f60:	4967      	ldr	r1, [pc, #412]	; (8001100 <main+0x2dc>)
 8000f62:	4860      	ldr	r0, [pc, #384]	; (80010e4 <main+0x2c0>)
 8000f64:	f7ff fc04 	bl	8000770 <inst_absolute>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000f68:	4b64      	ldr	r3, [pc, #400]	; (80010fc <main+0x2d8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6e:	60bb      	str	r3, [r7, #8]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8000f70:	4864      	ldr	r0, [pc, #400]	; (8001104 <main+0x2e0>)
 8000f72:	f000 fb51 	bl	8001618 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst abs counter = %ld\r\n&", counter);
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	4963      	ldr	r1, [pc, #396]	; (8001108 <main+0x2e4>)
 8000f7a:	4862      	ldr	r0, [pc, #392]	; (8001104 <main+0x2e0>)
 8000f7c:	f006 fdcc 	bl	8007b18 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000f80:	4859      	ldr	r0, [pc, #356]	; (80010e8 <main+0x2c4>)
 8000f82:	f005 fad5 	bl	8006530 <UART_CheckIdleState>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d10f      	bne.n	8000fac <main+0x188>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8000f8c:	2232      	movs	r2, #50	; 0x32
 8000f8e:	495d      	ldr	r1, [pc, #372]	; (8001104 <main+0x2e0>)
 8000f90:	4855      	ldr	r0, [pc, #340]	; (80010e8 <main+0x2c4>)
 8000f92:	f004 f995 	bl	80052c0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8000f96:	e001      	b.n	8000f9c <main+0x178>
			blink_red_fast();
 8000f98:	f000 faf8 	bl	800158c <blink_red_fast>
		while(UartReady != SET){
 8000f9c:	4b53      	ldr	r3, [pc, #332]	; (80010ec <main+0x2c8>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d1f8      	bne.n	8000f98 <main+0x174>
		}
		UartReady = RESET;
 8000fa6:	4b51      	ldr	r3, [pc, #324]	; (80010ec <main+0x2c8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 8000fac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb0:	f000 fdb8 	bl	8001b24 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000fb4:	484c      	ldr	r0, [pc, #304]	; (80010e8 <main+0x2c4>)
 8000fb6:	f005 fabb 	bl	8006530 <UART_CheckIdleState>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d130      	bne.n	8001022 <main+0x1fe>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	4952      	ldr	r1, [pc, #328]	; (800110c <main+0x2e8>)
 8000fc4:	4848      	ldr	r0, [pc, #288]	; (80010e8 <main+0x2c4>)
 8000fc6:	f004 f97b 	bl	80052c0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8000fca:	e001      	b.n	8000fd0 <main+0x1ac>
			blink_red_fast();
 8000fcc:	f000 fade 	bl	800158c <blink_red_fast>
		while(UartReady != SET){
 8000fd0:	4b46      	ldr	r3, [pc, #280]	; (80010ec <main+0x2c8>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d1f8      	bne.n	8000fcc <main+0x1a8>
		}
		UartReady = RESET;
 8000fda:	4b44      	ldr	r3, [pc, #272]	; (80010ec <main+0x2c8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instAbs.bytes[0], 4096);
 8000fe0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fe4:	4946      	ldr	r1, [pc, #280]	; (8001100 <main+0x2dc>)
 8000fe6:	4840      	ldr	r0, [pc, #256]	; (80010e8 <main+0x2c4>)
 8000fe8:	f004 f96a 	bl	80052c0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8000fec:	e001      	b.n	8000ff2 <main+0x1ce>
			blink_red_fast();
 8000fee:	f000 facd 	bl	800158c <blink_red_fast>
		while(UartReady != SET){
 8000ff2:	4b3e      	ldr	r3, [pc, #248]	; (80010ec <main+0x2c8>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d1f8      	bne.n	8000fee <main+0x1ca>
		}
		UartReady = RESET;
 8000ffc:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <main+0x2c8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8001002:	2204      	movs	r2, #4
 8001004:	4942      	ldr	r1, [pc, #264]	; (8001110 <main+0x2ec>)
 8001006:	4838      	ldr	r0, [pc, #224]	; (80010e8 <main+0x2c4>)
 8001008:	f004 f95a 	bl	80052c0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800100c:	e001      	b.n	8001012 <main+0x1ee>
			blink_red_fast();
 800100e:	f000 fabd 	bl	800158c <blink_red_fast>
		while(UartReady != SET){
 8001012:	4b36      	ldr	r3, [pc, #216]	; (80010ec <main+0x2c8>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b01      	cmp	r3, #1
 800101a:	d1f8      	bne.n	800100e <main+0x1ea>
		}
		UartReady = RESET;
 800101c:	4b33      	ldr	r3, [pc, #204]	; (80010ec <main+0x2c8>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
	}

	blink_orange_slow();
 8001022:	f000 facb 	bl	80015bc <blink_orange_slow>
	blink_orange_slow();
 8001026:	f000 fac9 	bl	80015bc <blink_orange_slow>

	// Instantaneous phase value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800102a:	4b34      	ldr	r3, [pc, #208]	; (80010fc <main+0x2d8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
	inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 8001032:	4938      	ldr	r1, [pc, #224]	; (8001114 <main+0x2f0>)
 8001034:	482b      	ldr	r0, [pc, #172]	; (80010e4 <main+0x2c0>)
 8001036:	f7ff fbe3 	bl	8000800 <inst_phase>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 800103a:	4b30      	ldr	r3, [pc, #192]	; (80010fc <main+0x2d8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001040:	60bb      	str	r3, [r7, #8]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001042:	4830      	ldr	r0, [pc, #192]	; (8001104 <main+0x2e0>)
 8001044:	f000 fae8 	bl	8001618 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst phase counter = %ld\r\n&", counter);
 8001048:	68ba      	ldr	r2, [r7, #8]
 800104a:	4933      	ldr	r1, [pc, #204]	; (8001118 <main+0x2f4>)
 800104c:	482d      	ldr	r0, [pc, #180]	; (8001104 <main+0x2e0>)
 800104e:	f006 fd63 	bl	8007b18 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001052:	4825      	ldr	r0, [pc, #148]	; (80010e8 <main+0x2c4>)
 8001054:	f005 fa6c 	bl	8006530 <UART_CheckIdleState>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10f      	bne.n	800107e <main+0x25a>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 800105e:	2232      	movs	r2, #50	; 0x32
 8001060:	4928      	ldr	r1, [pc, #160]	; (8001104 <main+0x2e0>)
 8001062:	4821      	ldr	r0, [pc, #132]	; (80010e8 <main+0x2c4>)
 8001064:	f004 f92c 	bl	80052c0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001068:	e001      	b.n	800106e <main+0x24a>
			blink_red_fast();
 800106a:	f000 fa8f 	bl	800158c <blink_red_fast>
		while(UartReady != SET){
 800106e:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <main+0x2c8>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b01      	cmp	r3, #1
 8001076:	d1f8      	bne.n	800106a <main+0x246>
		}
		UartReady = RESET;
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <main+0x2c8>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 800107e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001082:	f000 fd4f 	bl	8001b24 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001086:	4818      	ldr	r0, [pc, #96]	; (80010e8 <main+0x2c4>)
 8001088:	f005 fa52 	bl	8006530 <UART_CheckIdleState>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d14e      	bne.n	8001130 <main+0x30c>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8001092:	2204      	movs	r2, #4
 8001094:	491d      	ldr	r1, [pc, #116]	; (800110c <main+0x2e8>)
 8001096:	4814      	ldr	r0, [pc, #80]	; (80010e8 <main+0x2c4>)
 8001098:	f004 f912 	bl	80052c0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800109c:	e001      	b.n	80010a2 <main+0x27e>
			blink_red_fast();
 800109e:	f000 fa75 	bl	800158c <blink_red_fast>
		while(UartReady != SET){
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <main+0x2c8>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d1f8      	bne.n	800109e <main+0x27a>
		}
		UartReady = RESET;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <main+0x2c8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instPhase.bytes[0], 4096);
 80010b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010b6:	4917      	ldr	r1, [pc, #92]	; (8001114 <main+0x2f0>)
 80010b8:	480b      	ldr	r0, [pc, #44]	; (80010e8 <main+0x2c4>)
 80010ba:	f004 f901 	bl	80052c0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80010be:	e001      	b.n	80010c4 <main+0x2a0>
			blink_red_fast();
 80010c0:	f000 fa64 	bl	800158c <blink_red_fast>
		while(UartReady != SET){
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <main+0x2c8>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d1f8      	bne.n	80010c0 <main+0x29c>
		}
		UartReady = RESET;
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <main+0x2c8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 80010d4:	2204      	movs	r2, #4
 80010d6:	490e      	ldr	r1, [pc, #56]	; (8001110 <main+0x2ec>)
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <main+0x2c4>)
 80010da:	f004 f8f1 	bl	80052c0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80010de:	e01f      	b.n	8001120 <main+0x2fc>
 80010e0:	58024400 	.word	0x58024400
 80010e4:	20004244 	.word	0x20004244
 80010e8:	20007290 	.word	0x20007290
 80010ec:	20000236 	.word	0x20000236
 80010f0:	58020400 	.word	0x58020400
 80010f4:	20000200 	.word	0x20000200
 80010f8:	58021000 	.word	0x58021000
 80010fc:	20007244 	.word	0x20007244
 8001100:	20002244 	.word	0x20002244
 8001104:	20000204 	.word	0x20000204
 8001108:	08009458 	.word	0x08009458
 800110c:	08009534 	.word	0x08009534
 8001110:	08009538 	.word	0x08009538
 8001114:	20001244 	.word	0x20001244
 8001118:	08009474 	.word	0x08009474
			blink_red_fast();
 800111c:	f000 fa36 	bl	800158c <blink_red_fast>
		while(UartReady != SET){
 8001120:	4ba7      	ldr	r3, [pc, #668]	; (80013c0 <main+0x59c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b01      	cmp	r3, #1
 8001128:	d1f8      	bne.n	800111c <main+0x2f8>
		}
		UartReady = RESET;
 800112a:	4ba5      	ldr	r3, [pc, #660]	; (80013c0 <main+0x59c>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
	}

	blink_orange_slow();
 8001130:	f000 fa44 	bl	80015bc <blink_orange_slow>
	blink_orange_slow();
 8001134:	f000 fa42 	bl	80015bc <blink_orange_slow>

	// Instantaneous unwrapped phase value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001138:	4ba2      	ldr	r3, [pc, #648]	; (80013c4 <main+0x5a0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
	inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 8001140:	49a1      	ldr	r1, [pc, #644]	; (80013c8 <main+0x5a4>)
 8001142:	48a2      	ldr	r0, [pc, #648]	; (80013cc <main+0x5a8>)
 8001144:	f7ff fb5c 	bl	8000800 <inst_phase>
	unwrap(&instPhase.number[0], &instUnwrappedPhase.number[0]);
 8001148:	49a1      	ldr	r1, [pc, #644]	; (80013d0 <main+0x5ac>)
 800114a:	489f      	ldr	r0, [pc, #636]	; (80013c8 <main+0x5a4>)
 800114c:	f7ff fb90 	bl	8000870 <unwrap>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001150:	4b9c      	ldr	r3, [pc, #624]	; (80013c4 <main+0x5a0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	60bb      	str	r3, [r7, #8]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001158:	489e      	ldr	r0, [pc, #632]	; (80013d4 <main+0x5b0>)
 800115a:	f000 fa5d 	bl	8001618 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst unwrapped phase counter = %ld\r\n&", counter);
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	499d      	ldr	r1, [pc, #628]	; (80013d8 <main+0x5b4>)
 8001162:	489c      	ldr	r0, [pc, #624]	; (80013d4 <main+0x5b0>)
 8001164:	f006 fcd8 	bl	8007b18 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001168:	489c      	ldr	r0, [pc, #624]	; (80013dc <main+0x5b8>)
 800116a:	f005 f9e1 	bl	8006530 <UART_CheckIdleState>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10f      	bne.n	8001194 <main+0x370>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001174:	2232      	movs	r2, #50	; 0x32
 8001176:	4997      	ldr	r1, [pc, #604]	; (80013d4 <main+0x5b0>)
 8001178:	4898      	ldr	r0, [pc, #608]	; (80013dc <main+0x5b8>)
 800117a:	f004 f8a1 	bl	80052c0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800117e:	e001      	b.n	8001184 <main+0x360>
			blink_red_fast();
 8001180:	f000 fa04 	bl	800158c <blink_red_fast>
		while(UartReady != SET){
 8001184:	4b8e      	ldr	r3, [pc, #568]	; (80013c0 <main+0x59c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b01      	cmp	r3, #1
 800118c:	d1f8      	bne.n	8001180 <main+0x35c>
		}
		UartReady = RESET;
 800118e:	4b8c      	ldr	r3, [pc, #560]	; (80013c0 <main+0x59c>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 8001194:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001198:	f000 fcc4 	bl	8001b24 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800119c:	488f      	ldr	r0, [pc, #572]	; (80013dc <main+0x5b8>)
 800119e:	f005 f9c7 	bl	8006530 <UART_CheckIdleState>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d130      	bne.n	800120a <main+0x3e6>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 80011a8:	2204      	movs	r2, #4
 80011aa:	498d      	ldr	r1, [pc, #564]	; (80013e0 <main+0x5bc>)
 80011ac:	488b      	ldr	r0, [pc, #556]	; (80013dc <main+0x5b8>)
 80011ae:	f004 f887 	bl	80052c0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80011b2:	e001      	b.n	80011b8 <main+0x394>
			blink_red_fast();
 80011b4:	f000 f9ea 	bl	800158c <blink_red_fast>
		while(UartReady != SET){
 80011b8:	4b81      	ldr	r3, [pc, #516]	; (80013c0 <main+0x59c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d1f8      	bne.n	80011b4 <main+0x390>
		}
		UartReady = RESET;
 80011c2:	4b7f      	ldr	r3, [pc, #508]	; (80013c0 <main+0x59c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instUnwrappedPhase.bytes[0], 4096);
 80011c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011cc:	4980      	ldr	r1, [pc, #512]	; (80013d0 <main+0x5ac>)
 80011ce:	4883      	ldr	r0, [pc, #524]	; (80013dc <main+0x5b8>)
 80011d0:	f004 f876 	bl	80052c0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80011d4:	e001      	b.n	80011da <main+0x3b6>
			blink_red_fast();
 80011d6:	f000 f9d9 	bl	800158c <blink_red_fast>
		while(UartReady != SET){
 80011da:	4b79      	ldr	r3, [pc, #484]	; (80013c0 <main+0x59c>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d1f8      	bne.n	80011d6 <main+0x3b2>
		}
		UartReady = RESET;
 80011e4:	4b76      	ldr	r3, [pc, #472]	; (80013c0 <main+0x59c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 80011ea:	2204      	movs	r2, #4
 80011ec:	497d      	ldr	r1, [pc, #500]	; (80013e4 <main+0x5c0>)
 80011ee:	487b      	ldr	r0, [pc, #492]	; (80013dc <main+0x5b8>)
 80011f0:	f004 f866 	bl	80052c0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80011f4:	e001      	b.n	80011fa <main+0x3d6>
			blink_red_fast();
 80011f6:	f000 f9c9 	bl	800158c <blink_red_fast>
		while(UartReady != SET){
 80011fa:	4b71      	ldr	r3, [pc, #452]	; (80013c0 <main+0x59c>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b01      	cmp	r3, #1
 8001202:	d1f8      	bne.n	80011f6 <main+0x3d2>
		}
		UartReady = RESET;
 8001204:	4b6e      	ldr	r3, [pc, #440]	; (80013c0 <main+0x59c>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
	}

	blink_orange_slow();
 800120a:	f000 f9d7 	bl	80015bc <blink_orange_slow>
	blink_orange_slow();
 800120e:	f000 f9d5 	bl	80015bc <blink_orange_slow>

	// Instantaneous frequency value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001212:	4b6c      	ldr	r3, [pc, #432]	; (80013c4 <main+0x5a0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
	inst_frequency(&rxBuffer.number[0], &instFreq.number[0]);
 800121a:	4973      	ldr	r1, [pc, #460]	; (80013e8 <main+0x5c4>)
 800121c:	486b      	ldr	r0, [pc, #428]	; (80013cc <main+0x5a8>)
 800121e:	f7ff fbc3 	bl	80009a8 <inst_frequency>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001222:	4b68      	ldr	r3, [pc, #416]	; (80013c4 <main+0x5a0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001228:	60bb      	str	r3, [r7, #8]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 800122a:	486a      	ldr	r0, [pc, #424]	; (80013d4 <main+0x5b0>)
 800122c:	f000 f9f4 	bl	8001618 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst freq counter = %ld\r\n&", counter);
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	496e      	ldr	r1, [pc, #440]	; (80013ec <main+0x5c8>)
 8001234:	4867      	ldr	r0, [pc, #412]	; (80013d4 <main+0x5b0>)
 8001236:	f006 fc6f 	bl	8007b18 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800123a:	4868      	ldr	r0, [pc, #416]	; (80013dc <main+0x5b8>)
 800123c:	f005 f978 	bl	8006530 <UART_CheckIdleState>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10f      	bne.n	8001266 <main+0x442>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001246:	2232      	movs	r2, #50	; 0x32
 8001248:	4962      	ldr	r1, [pc, #392]	; (80013d4 <main+0x5b0>)
 800124a:	4864      	ldr	r0, [pc, #400]	; (80013dc <main+0x5b8>)
 800124c:	f004 f838 	bl	80052c0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001250:	e001      	b.n	8001256 <main+0x432>
			blink_red_fast();
 8001252:	f000 f99b 	bl	800158c <blink_red_fast>
		while(UartReady != SET){
 8001256:	4b5a      	ldr	r3, [pc, #360]	; (80013c0 <main+0x59c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b01      	cmp	r3, #1
 800125e:	d1f8      	bne.n	8001252 <main+0x42e>
		}
		UartReady = RESET;
 8001260:	4b57      	ldr	r3, [pc, #348]	; (80013c0 <main+0x59c>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 8001266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800126a:	f000 fc5b 	bl	8001b24 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800126e:	485b      	ldr	r0, [pc, #364]	; (80013dc <main+0x5b8>)
 8001270:	f005 f95e 	bl	8006530 <UART_CheckIdleState>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d130      	bne.n	80012dc <main+0x4b8>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 800127a:	2204      	movs	r2, #4
 800127c:	4958      	ldr	r1, [pc, #352]	; (80013e0 <main+0x5bc>)
 800127e:	4857      	ldr	r0, [pc, #348]	; (80013dc <main+0x5b8>)
 8001280:	f004 f81e 	bl	80052c0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001284:	e001      	b.n	800128a <main+0x466>
			blink_red_fast();
 8001286:	f000 f981 	bl	800158c <blink_red_fast>
		while(UartReady != SET){
 800128a:	4b4d      	ldr	r3, [pc, #308]	; (80013c0 <main+0x59c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b01      	cmp	r3, #1
 8001292:	d1f8      	bne.n	8001286 <main+0x462>
		}
		UartReady = RESET;
 8001294:	4b4a      	ldr	r3, [pc, #296]	; (80013c0 <main+0x59c>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instFreq.bytes[0], 4096);
 800129a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800129e:	4952      	ldr	r1, [pc, #328]	; (80013e8 <main+0x5c4>)
 80012a0:	484e      	ldr	r0, [pc, #312]	; (80013dc <main+0x5b8>)
 80012a2:	f004 f80d 	bl	80052c0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80012a6:	e001      	b.n	80012ac <main+0x488>
			blink_red_fast();
 80012a8:	f000 f970 	bl	800158c <blink_red_fast>
		while(UartReady != SET){
 80012ac:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <main+0x59c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d1f8      	bne.n	80012a8 <main+0x484>
		}
		UartReady = RESET;
 80012b6:	4b42      	ldr	r3, [pc, #264]	; (80013c0 <main+0x59c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 80012bc:	2204      	movs	r2, #4
 80012be:	4949      	ldr	r1, [pc, #292]	; (80013e4 <main+0x5c0>)
 80012c0:	4846      	ldr	r0, [pc, #280]	; (80013dc <main+0x5b8>)
 80012c2:	f003 fffd 	bl	80052c0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80012c6:	e001      	b.n	80012cc <main+0x4a8>
			blink_red_fast();
 80012c8:	f000 f960 	bl	800158c <blink_red_fast>
		while(UartReady != SET){
 80012cc:	4b3c      	ldr	r3, [pc, #240]	; (80013c0 <main+0x59c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d1f8      	bne.n	80012c8 <main+0x4a4>
		}
		UartReady = RESET;
 80012d6:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <main+0x59c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
	}

	blink_orange_slow();
 80012dc:	f000 f96e 	bl	80015bc <blink_orange_slow>
	blink_orange_slow();
 80012e0:	f000 f96c 	bl	80015bc <blink_orange_slow>

	// Instantaneous centered normalized absolute value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80012e4:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <main+0x5a0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2200      	movs	r2, #0
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24
	inst_centralized_normalized_absolute(&rxBuffer.number[0], &instCNAbs.number[0]);
 80012ec:	4940      	ldr	r1, [pc, #256]	; (80013f0 <main+0x5cc>)
 80012ee:	4837      	ldr	r0, [pc, #220]	; (80013cc <main+0x5a8>)
 80012f0:	f7ff fc12 	bl	8000b18 <inst_centralized_normalized_absolute>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 80012f4:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <main+0x5a0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fa:	60bb      	str	r3, [r7, #8]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 80012fc:	4835      	ldr	r0, [pc, #212]	; (80013d4 <main+0x5b0>)
 80012fe:	f000 f98b 	bl	8001618 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst CN abs counter = %ld\r\n&", counter);
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	493b      	ldr	r1, [pc, #236]	; (80013f4 <main+0x5d0>)
 8001306:	4833      	ldr	r0, [pc, #204]	; (80013d4 <main+0x5b0>)
 8001308:	f006 fc06 	bl	8007b18 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800130c:	4833      	ldr	r0, [pc, #204]	; (80013dc <main+0x5b8>)
 800130e:	f005 f90f 	bl	8006530 <UART_CheckIdleState>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10f      	bne.n	8001338 <main+0x514>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001318:	2232      	movs	r2, #50	; 0x32
 800131a:	492e      	ldr	r1, [pc, #184]	; (80013d4 <main+0x5b0>)
 800131c:	482f      	ldr	r0, [pc, #188]	; (80013dc <main+0x5b8>)
 800131e:	f003 ffcf 	bl	80052c0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001322:	e001      	b.n	8001328 <main+0x504>
			blink_red_fast();
 8001324:	f000 f932 	bl	800158c <blink_red_fast>
		while(UartReady != SET){
 8001328:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <main+0x59c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b01      	cmp	r3, #1
 8001330:	d1f8      	bne.n	8001324 <main+0x500>
		}
		UartReady = RESET;
 8001332:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <main+0x59c>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 8001338:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800133c:	f000 fbf2 	bl	8001b24 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001340:	4826      	ldr	r0, [pc, #152]	; (80013dc <main+0x5b8>)
 8001342:	f005 f8f5 	bl	8006530 <UART_CheckIdleState>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d130      	bne.n	80013ae <main+0x58a>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 800134c:	2204      	movs	r2, #4
 800134e:	4924      	ldr	r1, [pc, #144]	; (80013e0 <main+0x5bc>)
 8001350:	4822      	ldr	r0, [pc, #136]	; (80013dc <main+0x5b8>)
 8001352:	f003 ffb5 	bl	80052c0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001356:	e001      	b.n	800135c <main+0x538>
			blink_red_fast();
 8001358:	f000 f918 	bl	800158c <blink_red_fast>
		while(UartReady != SET){
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <main+0x59c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b01      	cmp	r3, #1
 8001364:	d1f8      	bne.n	8001358 <main+0x534>
		}
		UartReady = RESET;
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <main+0x59c>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instCNAbs.bytes[0], 4096);
 800136c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001370:	491f      	ldr	r1, [pc, #124]	; (80013f0 <main+0x5cc>)
 8001372:	481a      	ldr	r0, [pc, #104]	; (80013dc <main+0x5b8>)
 8001374:	f003 ffa4 	bl	80052c0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001378:	e001      	b.n	800137e <main+0x55a>
			blink_red_fast();
 800137a:	f000 f907 	bl	800158c <blink_red_fast>
		while(UartReady != SET){
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <main+0x59c>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b01      	cmp	r3, #1
 8001386:	d1f8      	bne.n	800137a <main+0x556>
		}
		UartReady = RESET;
 8001388:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <main+0x59c>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 800138e:	2204      	movs	r2, #4
 8001390:	4914      	ldr	r1, [pc, #80]	; (80013e4 <main+0x5c0>)
 8001392:	4812      	ldr	r0, [pc, #72]	; (80013dc <main+0x5b8>)
 8001394:	f003 ff94 	bl	80052c0 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001398:	e001      	b.n	800139e <main+0x57a>
			blink_red_fast();
 800139a:	f000 f8f7 	bl	800158c <blink_red_fast>
		while(UartReady != SET){
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <main+0x59c>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d1f8      	bne.n	800139a <main+0x576>
		}
		UartReady = RESET;
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <main+0x59c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
#endif
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <main+0x5a0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2200      	movs	r2, #0
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24
	clear_leds();
 80013b6:	f000 f8d1 	bl	800155c <clear_leds>
	while (1)
	{
		blink_orange_slow();
 80013ba:	f000 f8ff 	bl	80015bc <blink_orange_slow>
 80013be:	e7fc      	b.n	80013ba <main+0x596>
 80013c0:	20000236 	.word	0x20000236
 80013c4:	20007244 	.word	0x20007244
 80013c8:	20001244 	.word	0x20001244
 80013cc:	20004244 	.word	0x20004244
 80013d0:	20006244 	.word	0x20006244
 80013d4:	20000204 	.word	0x20000204
 80013d8:	08009490 	.word	0x08009490
 80013dc:	20007290 	.word	0x20007290
 80013e0:	08009534 	.word	0x08009534
 80013e4:	08009538 	.word	0x08009538
 80013e8:	20000244 	.word	0x20000244
 80013ec:	080094b8 	.word	0x080094b8
 80013f0:	20003244 	.word	0x20003244
 80013f4:	080094d4 	.word	0x080094d4

080013f8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b0cc      	sub	sp, #304	; 0x130
 80013fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001402:	224c      	movs	r2, #76	; 0x4c
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f005 fe8a 	bl	8007120 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001410:	2220      	movs	r2, #32
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f005 fe83 	bl	8007120 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800141a:	f107 0308 	add.w	r3, r7, #8
 800141e:	4618      	mov	r0, r3
 8001420:	23bc      	movs	r3, #188	; 0xbc
 8001422:	461a      	mov	r2, r3
 8001424:	2100      	movs	r1, #0
 8001426:	f005 fe7b 	bl	8007120 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800142a:	2004      	movs	r0, #4
 800142c:	f001 f8f4 	bl	8002618 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <SystemClock_Config+0x15c>)
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143a:	4a46      	ldr	r2, [pc, #280]	; (8001554 <SystemClock_Config+0x15c>)
 800143c:	f023 0301 	bic.w	r3, r3, #1
 8001440:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001442:	4b44      	ldr	r3, [pc, #272]	; (8001554 <SystemClock_Config+0x15c>)
 8001444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001446:	f003 0201 	and.w	r2, r3, #1
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	4b42      	ldr	r3, [pc, #264]	; (8001558 <SystemClock_Config+0x160>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	4a41      	ldr	r2, [pc, #260]	; (8001558 <SystemClock_Config+0x160>)
 8001454:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001458:	6193      	str	r3, [r2, #24]
 800145a:	4b3f      	ldr	r3, [pc, #252]	; (8001558 <SystemClock_Config+0x160>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	681b      	ldr	r3, [r3, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800146a:	bf00      	nop
 800146c:	4b3a      	ldr	r3, [pc, #232]	; (8001558 <SystemClock_Config+0x160>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001478:	d1f8      	bne.n	800146c <SystemClock_Config+0x74>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001480:	2301      	movs	r3, #1
 8001482:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001486:	2340      	movs	r3, #64	; 0x40
 8001488:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800148c:	2302      	movs	r3, #2
 800148e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001492:	2300      	movs	r3, #0
 8001494:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001498:	2304      	movs	r3, #4
 800149a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	RCC_OscInitStruct.PLL.PLLN = 50;
 800149e:	2332      	movs	r3, #50	; 0x32
 80014a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	RCC_OscInitStruct.PLL.PLLP = 2;
 80014a4:	2302      	movs	r3, #2
 80014a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80014aa:	2302      	movs	r3, #2
 80014ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80014b0:	2302      	movs	r3, #2
 80014b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80014b6:	230c      	movs	r3, #12
 80014b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014cc:	4618      	mov	r0, r3
 80014ce:	f001 f8fd 	bl	80026cc <HAL_RCC_OscConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SystemClock_Config+0xe4>
	{
		Error_Handler();
 80014d8:	f000 f8d6 	bl	8001688 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014dc:	233f      	movs	r3, #63	; 0x3f
 80014de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e2:	2303      	movs	r3, #3
 80014e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80014ee:	2308      	movs	r3, #8
 80014f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80014f4:	2340      	movs	r3, #64	; 0x40
 80014f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80014fa:	2340      	movs	r3, #64	; 0x40
 80014fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001504:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001508:	2340      	movs	r3, #64	; 0x40
 800150a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800150e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001512:	2102      	movs	r1, #2
 8001514:	4618      	mov	r0, r3
 8001516:	f001 fce9 	bl	8002eec <HAL_RCC_ClockConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0x12c>
	{
		Error_Handler();
 8001520:	f000 f8b2 	bl	8001688 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	2202      	movs	r2, #2
 800152a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 800152c:	f107 0308 	add.w	r3, r7, #8
 8001530:	2203      	movs	r2, #3
 8001532:	675a      	str	r2, [r3, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	4618      	mov	r0, r3
 800153a:	f002 f85b 	bl	80035f4 <HAL_RCCEx_PeriphCLKConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <SystemClock_Config+0x150>
	{
		Error_Handler();
 8001544:	f000 f8a0 	bl	8001688 <Error_Handler>
	}
}
 8001548:	bf00      	nop
 800154a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	58000400 	.word	0x58000400
 8001558:	58024800 	.word	0x58024800

0800155c <clear_leds>:

/* USER CODE BEGIN 4 */
void clear_leds(){
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	2101      	movs	r1, #1
 8001564:	4807      	ldr	r0, [pc, #28]	; (8001584 <clear_leds+0x28>)
 8001566:	f001 f80f 	bl	8002588 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	2102      	movs	r1, #2
 800156e:	4806      	ldr	r0, [pc, #24]	; (8001588 <clear_leds+0x2c>)
 8001570:	f001 f80a 	bl	8002588 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800157a:	4802      	ldr	r0, [pc, #8]	; (8001584 <clear_leds+0x28>)
 800157c:	f001 f804 	bl	8002588 <HAL_GPIO_WritePin>
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	58020400 	.word	0x58020400
 8001588:	58021000 	.word	0x58021000

0800158c <blink_red_fast>:
void light_leds(){
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
}
void blink_red_fast(){
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001596:	4808      	ldr	r0, [pc, #32]	; (80015b8 <blink_red_fast+0x2c>)
 8001598:	f000 fff6 	bl	8002588 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800159c:	2032      	movs	r0, #50	; 0x32
 800159e:	f000 fac1 	bl	8001b24 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015a8:	4803      	ldr	r0, [pc, #12]	; (80015b8 <blink_red_fast+0x2c>)
 80015aa:	f000 ffed 	bl	8002588 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80015ae:	2032      	movs	r0, #50	; 0x32
 80015b0:	f000 fab8 	bl	8001b24 <HAL_Delay>
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	58020400 	.word	0x58020400

080015bc <blink_orange_slow>:
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_orange_slow(){
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2102      	movs	r1, #2
 80015c4:	4808      	ldr	r0, [pc, #32]	; (80015e8 <blink_orange_slow+0x2c>)
 80015c6:	f000 ffdf 	bl	8002588 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80015ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015ce:	f000 faa9 	bl	8001b24 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 80015d2:	2201      	movs	r2, #1
 80015d4:	2102      	movs	r1, #2
 80015d6:	4804      	ldr	r0, [pc, #16]	; (80015e8 <blink_orange_slow+0x2c>)
 80015d8:	f000 ffd6 	bl	8002588 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80015dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015e0:	f000 faa0 	bl	8001b24 <HAL_Delay>
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	58021000 	.word	0x58021000

080015ec <blink_green>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_green(){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2101      	movs	r1, #1
 80015f4:	4807      	ldr	r0, [pc, #28]	; (8001614 <blink_green+0x28>)
 80015f6:	f000 ffc7 	bl	8002588 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80015fa:	20c8      	movs	r0, #200	; 0xc8
 80015fc:	f000 fa92 	bl	8001b24 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	2101      	movs	r1, #1
 8001604:	4803      	ldr	r0, [pc, #12]	; (8001614 <blink_green+0x28>)
 8001606:	f000 ffbf 	bl	8002588 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800160a:	20c8      	movs	r0, #200	; 0xc8
 800160c:	f000 fa8a 	bl	8001b24 <HAL_Delay>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	58020400 	.word	0x58020400

08001618 <reset_buffer>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(500);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(500);
}
void reset_buffer(char *stringBuffer){
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 1; i < 50; i++){
 8001620:	2301      	movs	r3, #1
 8001622:	81fb      	strh	r3, [r7, #14]
 8001624:	e007      	b.n	8001636 <reset_buffer+0x1e>
		stringBuffer[i] = '\0';
 8001626:	89fb      	ldrh	r3, [r7, #14]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	4413      	add	r3, r2
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 1; i < 50; i++){
 8001630:	89fb      	ldrh	r3, [r7, #14]
 8001632:	3301      	adds	r3, #1
 8001634:	81fb      	strh	r3, [r7, #14]
 8001636:	89fb      	ldrh	r3, [r7, #14]
 8001638:	2b31      	cmp	r3, #49	; 0x31
 800163a:	d9f4      	bls.n	8001626 <reset_buffer+0xe>
	}
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_UART_TxCpltCallback>:
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], 50, 100);
	}
	received = 0;
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart3){
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <HAL_UART_TxCpltCallback+0x1c>)
 8001652:	2201      	movs	r2, #1
 8001654:	701a      	strb	r2, [r3, #0]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000236 	.word	0x20000236

08001668 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart3){
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <HAL_UART_RxCpltCallback+0x1c>)
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000236 	.word	0x20000236

08001688 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_MspInit+0x30>)
 80016a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016a4:	4a08      	ldr	r2, [pc, #32]	; (80016c8 <HAL_MspInit+0x30>)
 80016a6:	f043 0302 	orr.w	r3, r3, #2
 80016aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_MspInit+0x30>)
 80016b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	58024400 	.word	0x58024400

080016cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <MemManage_Handler+0x4>

080016e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001720:	f000 f9e0 	bl	8001ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}

08001728 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <USART3_IRQHandler+0x10>)
 800172e:	f003 ff23 	bl	8005578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20007290 	.word	0x20007290

0800173c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <_sbrk+0x50>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <_sbrk+0x16>
		heap_end = &end;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <_sbrk+0x50>)
 800174e:	4a10      	ldr	r2, [pc, #64]	; (8001790 <_sbrk+0x54>)
 8001750:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <_sbrk+0x50>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <_sbrk+0x50>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4413      	add	r3, r2
 8001760:	466a      	mov	r2, sp
 8001762:	4293      	cmp	r3, r2
 8001764:	d907      	bls.n	8001776 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001766:	f005 fca1 	bl	80070ac <__errno>
 800176a:	4602      	mov	r2, r0
 800176c:	230c      	movs	r3, #12
 800176e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001770:	f04f 33ff 	mov.w	r3, #4294967295
 8001774:	e006      	b.n	8001784 <_sbrk+0x48>
	}

	heap_end += incr;
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <_sbrk+0x50>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	4a03      	ldr	r2, [pc, #12]	; (800178c <_sbrk+0x50>)
 8001780:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001782:	68fb      	ldr	r3, [r7, #12]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000238 	.word	0x20000238
 8001790:	20007328 	.word	0x20007328

08001794 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179a:	f107 0310 	add.w	r3, r7, #16
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80017b2:	4b1e      	ldr	r3, [pc, #120]	; (800182c <MX_TIM2_Init+0x98>)
 80017b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <MX_TIM2_Init+0x98>)
 80017bc:	2200      	movs	r2, #0
 80017be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <MX_TIM2_Init+0x98>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <MX_TIM2_Init+0x98>)
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	4b17      	ldr	r3, [pc, #92]	; (800182c <MX_TIM2_Init+0x98>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <MX_TIM2_Init+0x98>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017da:	4814      	ldr	r0, [pc, #80]	; (800182c <MX_TIM2_Init+0x98>)
 80017dc:	f003 fa0a 	bl	8004bf4 <HAL_TIM_Base_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017e6:	f7ff ff4f 	bl	8001688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	4619      	mov	r1, r3
 80017f6:	480d      	ldr	r0, [pc, #52]	; (800182c <MX_TIM2_Init+0x98>)
 80017f8:	f003 fa82 	bl	8004d00 <HAL_TIM_ConfigClockSource>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001802:	f7ff ff41 	bl	8001688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	4619      	mov	r1, r3
 8001812:	4806      	ldr	r0, [pc, #24]	; (800182c <MX_TIM2_Init+0x98>)
 8001814:	f003 fc7c 	bl	8005110 <HAL_TIMEx_MasterConfigSynchronization>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800181e:	f7ff ff33 	bl	8001688 <Error_Handler>
  }

}
 8001822:	bf00      	nop
 8001824:	3720      	adds	r7, #32
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20007244 	.word	0x20007244

08001830 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001840:	d10e      	bne.n	8001860 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_TIM_Base_MspInit+0x3c>)
 8001844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001848:	4a08      	ldr	r2, [pc, #32]	; (800186c <HAL_TIM_Base_MspInit+0x3c>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_TIM_Base_MspInit+0x3c>)
 8001854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	58024400 	.word	0x58024400

08001870 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001874:	4b22      	ldr	r3, [pc, #136]	; (8001900 <MX_USART3_UART_Init+0x90>)
 8001876:	4a23      	ldr	r2, [pc, #140]	; (8001904 <MX_USART3_UART_Init+0x94>)
 8001878:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800187a:	4b21      	ldr	r3, [pc, #132]	; (8001900 <MX_USART3_UART_Init+0x90>)
 800187c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001880:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001882:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <MX_USART3_UART_Init+0x90>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001888:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <MX_USART3_UART_Init+0x90>)
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800188e:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <MX_USART3_UART_Init+0x90>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001894:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <MX_USART3_UART_Init+0x90>)
 8001896:	220c      	movs	r2, #12
 8001898:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189a:	4b19      	ldr	r3, [pc, #100]	; (8001900 <MX_USART3_UART_Init+0x90>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a0:	4b17      	ldr	r3, [pc, #92]	; (8001900 <MX_USART3_UART_Init+0x90>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <MX_USART3_UART_Init+0x90>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018ac:	4b14      	ldr	r3, [pc, #80]	; (8001900 <MX_USART3_UART_Init+0x90>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018b2:	4b13      	ldr	r3, [pc, #76]	; (8001900 <MX_USART3_UART_Init+0x90>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018b8:	4811      	ldr	r0, [pc, #68]	; (8001900 <MX_USART3_UART_Init+0x90>)
 80018ba:	f003 fcb1 	bl	8005220 <HAL_UART_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80018c4:	f7ff fee0 	bl	8001688 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018c8:	2100      	movs	r1, #0
 80018ca:	480d      	ldr	r0, [pc, #52]	; (8001900 <MX_USART3_UART_Init+0x90>)
 80018cc:	f005 fa6d 	bl	8006daa <HAL_UARTEx_SetTxFifoThreshold>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80018d6:	f7ff fed7 	bl	8001688 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018da:	2100      	movs	r1, #0
 80018dc:	4808      	ldr	r0, [pc, #32]	; (8001900 <MX_USART3_UART_Init+0x90>)
 80018de:	f005 faa2 	bl	8006e26 <HAL_UARTEx_SetRxFifoThreshold>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80018e8:	f7ff fece 	bl	8001688 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <MX_USART3_UART_Init+0x90>)
 80018ee:	f005 fa23 	bl	8006d38 <HAL_UARTEx_DisableFifoMode>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80018f8:	f7ff fec6 	bl	8001688 <Error_Handler>
  }

}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20007290 	.word	0x20007290
 8001904:	40004800 	.word	0x40004800

08001908 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a1e      	ldr	r2, [pc, #120]	; (80019a0 <HAL_UART_MspInit+0x98>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d136      	bne.n	8001998 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800192a:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <HAL_UART_MspInit+0x9c>)
 800192c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001930:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <HAL_UART_MspInit+0x9c>)
 8001932:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001936:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800193a:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <HAL_UART_MspInit+0x9c>)
 800193c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <HAL_UART_MspInit+0x9c>)
 800194a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194e:	4a15      	ldr	r2, [pc, #84]	; (80019a4 <HAL_UART_MspInit+0x9c>)
 8001950:	f043 0308 	orr.w	r3, r3, #8
 8001954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_UART_MspInit+0x9c>)
 800195a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001966:	f44f 7340 	mov.w	r3, #768	; 0x300
 800196a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001978:	2307      	movs	r3, #7
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	4809      	ldr	r0, [pc, #36]	; (80019a8 <HAL_UART_MspInit+0xa0>)
 8001984:	f000 fc50 	bl	8002228 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	2027      	movs	r0, #39	; 0x27
 800198e:	f000 f9d2 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001992:	2027      	movs	r0, #39	; 0x27
 8001994:	f000 f9e9 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001998:	bf00      	nop
 800199a:	3728      	adds	r7, #40	; 0x28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40004800 	.word	0x40004800
 80019a4:	58024400 	.word	0x58024400
 80019a8:	58020c00 	.word	0x58020c00

080019ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019b2:	e003      	b.n	80019bc <LoopCopyDataInit>

080019b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019ba:	3104      	adds	r1, #4

080019bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019bc:	480b      	ldr	r0, [pc, #44]	; (80019ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019c4:	d3f6      	bcc.n	80019b4 <CopyDataInit>
  ldr  r2, =_sbss
 80019c6:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019c8:	e002      	b.n	80019d0 <LoopFillZerobss>

080019ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019cc:	f842 3b04 	str.w	r3, [r2], #4

080019d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019d4:	d3f9      	bcc.n	80019ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019d6:	f7fe fe5b 	bl	8000690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019da:	f005 fb6d 	bl	80070b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019de:	f7ff fa21 	bl	8000e24 <main>
  bx  lr    
 80019e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019e8:	080097e8 	.word	0x080097e8
  ldr  r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019f0:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80019f4:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 80019f8:	20007324 	.word	0x20007324

080019fc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <ADC3_IRQHandler>
	...

08001a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a06:	2003      	movs	r0, #3
 8001a08:	f000 f98a 	bl	8001d20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a0c:	f001 fc24 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 8001a10:	4601      	mov	r1, r0
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_Init+0x68>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	0a1b      	lsrs	r3, r3, #8
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	4a13      	ldr	r2, [pc, #76]	; (8001a6c <HAL_Init+0x6c>)
 8001a1e:	5cd3      	ldrb	r3, [r2, r3]
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	fa21 f303 	lsr.w	r3, r1, r3
 8001a28:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_Init+0x68>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <HAL_Init+0x6c>)
 8001a34:	5cd3      	ldrb	r3, [r2, r3]
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a40:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <HAL_Init+0x70>)
 8001a42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a44:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <HAL_Init+0x74>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f000 f814 	bl	8001a78 <HAL_InitTick>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e002      	b.n	8001a60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a5a:	f7ff fe1d 	bl	8001698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	58024400 	.word	0x58024400
 8001a6c:	08009520 	.word	0x08009520
 8001a70:	20000004 	.word	0x20000004
 8001a74:	20000000 	.word	0x20000000

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a80:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_InitTick+0x60>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e021      	b.n	8001ad0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <HAL_InitTick+0x64>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_InitTick+0x60>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f96f 	bl	8001d86 <HAL_SYSTICK_Config>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00e      	b.n	8001ad0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b0f      	cmp	r3, #15
 8001ab6:	d80a      	bhi.n	8001ace <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f000 f939 	bl	8001d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac4:	4a06      	ldr	r2, [pc, #24]	; (8001ae0 <HAL_InitTick+0x68>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e000      	b.n	8001ad0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	2000000c 	.word	0x2000000c
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000008 	.word	0x20000008

08001ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_IncTick+0x20>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_IncTick+0x24>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <HAL_IncTick+0x24>)
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	2000000c 	.word	0x2000000c
 8001b08:	2000731c 	.word	0x2000731c

08001b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <HAL_GetTick+0x14>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	2000731c 	.word	0x2000731c

08001b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff ffee 	bl	8001b0c <HAL_GetTick>
 8001b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d005      	beq.n	8001b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_Delay+0x40>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b4a:	bf00      	nop
 8001b4c:	f7ff ffde 	bl	8001b0c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d8f7      	bhi.n	8001b4c <HAL_Delay+0x28>
  {
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	2000000c 	.word	0x2000000c

08001b68 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <HAL_GetREVID+0x14>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0c1b      	lsrs	r3, r3, #16
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	5c001000 	.word	0x5c001000

08001b80 <__NVIC_SetPriorityGrouping>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x40>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x40>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00
 8001bc4:	05fa0000 	.word	0x05fa0000

08001bc8 <__NVIC_GetPriorityGrouping>:
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	f003 0307 	and.w	r3, r3, #7
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_EnableIRQ>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	db0b      	blt.n	8001c0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	f003 021f 	and.w	r2, r3, #31
 8001bfc:	4907      	ldr	r1, [pc, #28]	; (8001c1c <__NVIC_EnableIRQ+0x38>)
 8001bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	2001      	movs	r0, #1
 8001c06:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000e100 	.word	0xe000e100

08001c20 <__NVIC_SetPriority>:
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	db0a      	blt.n	8001c4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	490c      	ldr	r1, [pc, #48]	; (8001c6c <__NVIC_SetPriority+0x4c>)
 8001c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c3e:	0112      	lsls	r2, r2, #4
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	440b      	add	r3, r1
 8001c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c48:	e00a      	b.n	8001c60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4908      	ldr	r1, [pc, #32]	; (8001c70 <__NVIC_SetPriority+0x50>)
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	3b04      	subs	r3, #4
 8001c58:	0112      	lsls	r2, r2, #4
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	761a      	strb	r2, [r3, #24]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000e100 	.word	0xe000e100
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <NVIC_EncodePriority>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f1c3 0307 	rsb	r3, r3, #7
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	bf28      	it	cs
 8001c92:	2304      	movcs	r3, #4
 8001c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d902      	bls.n	8001ca4 <NVIC_EncodePriority+0x30>
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3b03      	subs	r3, #3
 8001ca2:	e000      	b.n	8001ca6 <NVIC_EncodePriority+0x32>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43d9      	mvns	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	4313      	orrs	r3, r2
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cec:	d301      	bcc.n	8001cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00f      	b.n	8001d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <SysTick_Config+0x40>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f7ff ff8e 	bl	8001c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <SysTick_Config+0x40>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <SysTick_Config+0x40>)
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	e000e010 	.word	0xe000e010

08001d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff29 	bl	8001b80 <__NVIC_SetPriorityGrouping>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d44:	f7ff ff40 	bl	8001bc8 <__NVIC_GetPriorityGrouping>
 8001d48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f7ff ff90 	bl	8001c74 <NVIC_EncodePriority>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff5f 	bl	8001c20 <__NVIC_SetPriority>
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff33 	bl	8001be4 <__NVIC_EnableIRQ>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffa4 	bl	8001cdc <SysTick_Config>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e205      	b.n	80021be <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d004      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2280      	movs	r2, #128	; 0x80
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e1fa      	b.n	80021be <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a8c      	ldr	r2, [pc, #560]	; (8002000 <HAL_DMA_Abort_IT+0x260>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d04a      	beq.n	8001e68 <HAL_DMA_Abort_IT+0xc8>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a8b      	ldr	r2, [pc, #556]	; (8002004 <HAL_DMA_Abort_IT+0x264>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d045      	beq.n	8001e68 <HAL_DMA_Abort_IT+0xc8>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a89      	ldr	r2, [pc, #548]	; (8002008 <HAL_DMA_Abort_IT+0x268>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d040      	beq.n	8001e68 <HAL_DMA_Abort_IT+0xc8>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a88      	ldr	r2, [pc, #544]	; (800200c <HAL_DMA_Abort_IT+0x26c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d03b      	beq.n	8001e68 <HAL_DMA_Abort_IT+0xc8>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a86      	ldr	r2, [pc, #536]	; (8002010 <HAL_DMA_Abort_IT+0x270>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d036      	beq.n	8001e68 <HAL_DMA_Abort_IT+0xc8>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a85      	ldr	r2, [pc, #532]	; (8002014 <HAL_DMA_Abort_IT+0x274>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d031      	beq.n	8001e68 <HAL_DMA_Abort_IT+0xc8>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a83      	ldr	r2, [pc, #524]	; (8002018 <HAL_DMA_Abort_IT+0x278>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d02c      	beq.n	8001e68 <HAL_DMA_Abort_IT+0xc8>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a82      	ldr	r2, [pc, #520]	; (800201c <HAL_DMA_Abort_IT+0x27c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d027      	beq.n	8001e68 <HAL_DMA_Abort_IT+0xc8>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a80      	ldr	r2, [pc, #512]	; (8002020 <HAL_DMA_Abort_IT+0x280>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d022      	beq.n	8001e68 <HAL_DMA_Abort_IT+0xc8>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a7f      	ldr	r2, [pc, #508]	; (8002024 <HAL_DMA_Abort_IT+0x284>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d01d      	beq.n	8001e68 <HAL_DMA_Abort_IT+0xc8>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a7d      	ldr	r2, [pc, #500]	; (8002028 <HAL_DMA_Abort_IT+0x288>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d018      	beq.n	8001e68 <HAL_DMA_Abort_IT+0xc8>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a7c      	ldr	r2, [pc, #496]	; (800202c <HAL_DMA_Abort_IT+0x28c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d013      	beq.n	8001e68 <HAL_DMA_Abort_IT+0xc8>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a7a      	ldr	r2, [pc, #488]	; (8002030 <HAL_DMA_Abort_IT+0x290>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00e      	beq.n	8001e68 <HAL_DMA_Abort_IT+0xc8>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a79      	ldr	r2, [pc, #484]	; (8002034 <HAL_DMA_Abort_IT+0x294>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d009      	beq.n	8001e68 <HAL_DMA_Abort_IT+0xc8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a77      	ldr	r2, [pc, #476]	; (8002038 <HAL_DMA_Abort_IT+0x298>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d004      	beq.n	8001e68 <HAL_DMA_Abort_IT+0xc8>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a76      	ldr	r2, [pc, #472]	; (800203c <HAL_DMA_Abort_IT+0x29c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d101      	bne.n	8001e6c <HAL_DMA_Abort_IT+0xcc>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <HAL_DMA_Abort_IT+0xce>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d065      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2204      	movs	r2, #4
 8001e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a60      	ldr	r2, [pc, #384]	; (8002000 <HAL_DMA_Abort_IT+0x260>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d04a      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x17a>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a5e      	ldr	r2, [pc, #376]	; (8002004 <HAL_DMA_Abort_IT+0x264>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d045      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x17a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a5d      	ldr	r2, [pc, #372]	; (8002008 <HAL_DMA_Abort_IT+0x268>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d040      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x17a>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a5b      	ldr	r2, [pc, #364]	; (800200c <HAL_DMA_Abort_IT+0x26c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d03b      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x17a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a5a      	ldr	r2, [pc, #360]	; (8002010 <HAL_DMA_Abort_IT+0x270>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d036      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x17a>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a58      	ldr	r2, [pc, #352]	; (8002014 <HAL_DMA_Abort_IT+0x274>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d031      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x17a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a57      	ldr	r2, [pc, #348]	; (8002018 <HAL_DMA_Abort_IT+0x278>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d02c      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x17a>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a55      	ldr	r2, [pc, #340]	; (800201c <HAL_DMA_Abort_IT+0x27c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d027      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x17a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a54      	ldr	r2, [pc, #336]	; (8002020 <HAL_DMA_Abort_IT+0x280>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d022      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x17a>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a52      	ldr	r2, [pc, #328]	; (8002024 <HAL_DMA_Abort_IT+0x284>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d01d      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x17a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a51      	ldr	r2, [pc, #324]	; (8002028 <HAL_DMA_Abort_IT+0x288>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d018      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x17a>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a4f      	ldr	r2, [pc, #316]	; (800202c <HAL_DMA_Abort_IT+0x28c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d013      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x17a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a4e      	ldr	r2, [pc, #312]	; (8002030 <HAL_DMA_Abort_IT+0x290>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d00e      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x17a>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a4c      	ldr	r2, [pc, #304]	; (8002034 <HAL_DMA_Abort_IT+0x294>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d009      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x17a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a4b      	ldr	r2, [pc, #300]	; (8002038 <HAL_DMA_Abort_IT+0x298>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d004      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x17a>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a49      	ldr	r2, [pc, #292]	; (800203c <HAL_DMA_Abort_IT+0x29c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d108      	bne.n	8001f2c <HAL_DMA_Abort_IT+0x18c>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0201 	bic.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	e147      	b.n	80021bc <HAL_DMA_Abort_IT+0x41c>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0201 	bic.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	e13e      	b.n	80021bc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 020e 	bic.w	r2, r2, #14
 8001f4c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a2b      	ldr	r2, [pc, #172]	; (8002000 <HAL_DMA_Abort_IT+0x260>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d04a      	beq.n	8001fee <HAL_DMA_Abort_IT+0x24e>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a29      	ldr	r2, [pc, #164]	; (8002004 <HAL_DMA_Abort_IT+0x264>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d045      	beq.n	8001fee <HAL_DMA_Abort_IT+0x24e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a28      	ldr	r2, [pc, #160]	; (8002008 <HAL_DMA_Abort_IT+0x268>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d040      	beq.n	8001fee <HAL_DMA_Abort_IT+0x24e>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a26      	ldr	r2, [pc, #152]	; (800200c <HAL_DMA_Abort_IT+0x26c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d03b      	beq.n	8001fee <HAL_DMA_Abort_IT+0x24e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a25      	ldr	r2, [pc, #148]	; (8002010 <HAL_DMA_Abort_IT+0x270>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d036      	beq.n	8001fee <HAL_DMA_Abort_IT+0x24e>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a23      	ldr	r2, [pc, #140]	; (8002014 <HAL_DMA_Abort_IT+0x274>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d031      	beq.n	8001fee <HAL_DMA_Abort_IT+0x24e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a22      	ldr	r2, [pc, #136]	; (8002018 <HAL_DMA_Abort_IT+0x278>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d02c      	beq.n	8001fee <HAL_DMA_Abort_IT+0x24e>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a20      	ldr	r2, [pc, #128]	; (800201c <HAL_DMA_Abort_IT+0x27c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d027      	beq.n	8001fee <HAL_DMA_Abort_IT+0x24e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a1f      	ldr	r2, [pc, #124]	; (8002020 <HAL_DMA_Abort_IT+0x280>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d022      	beq.n	8001fee <HAL_DMA_Abort_IT+0x24e>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a1d      	ldr	r2, [pc, #116]	; (8002024 <HAL_DMA_Abort_IT+0x284>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01d      	beq.n	8001fee <HAL_DMA_Abort_IT+0x24e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a1c      	ldr	r2, [pc, #112]	; (8002028 <HAL_DMA_Abort_IT+0x288>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d018      	beq.n	8001fee <HAL_DMA_Abort_IT+0x24e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a1a      	ldr	r2, [pc, #104]	; (800202c <HAL_DMA_Abort_IT+0x28c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <HAL_DMA_Abort_IT+0x24e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a19      	ldr	r2, [pc, #100]	; (8002030 <HAL_DMA_Abort_IT+0x290>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00e      	beq.n	8001fee <HAL_DMA_Abort_IT+0x24e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a17      	ldr	r2, [pc, #92]	; (8002034 <HAL_DMA_Abort_IT+0x294>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d009      	beq.n	8001fee <HAL_DMA_Abort_IT+0x24e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a16      	ldr	r2, [pc, #88]	; (8002038 <HAL_DMA_Abort_IT+0x298>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d004      	beq.n	8001fee <HAL_DMA_Abort_IT+0x24e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a14      	ldr	r2, [pc, #80]	; (800203c <HAL_DMA_Abort_IT+0x29c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d128      	bne.n	8002040 <HAL_DMA_Abort_IT+0x2a0>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	e027      	b.n	8002050 <HAL_DMA_Abort_IT+0x2b0>
 8002000:	40020010 	.word	0x40020010
 8002004:	40020028 	.word	0x40020028
 8002008:	40020040 	.word	0x40020040
 800200c:	40020058 	.word	0x40020058
 8002010:	40020070 	.word	0x40020070
 8002014:	40020088 	.word	0x40020088
 8002018:	400200a0 	.word	0x400200a0
 800201c:	400200b8 	.word	0x400200b8
 8002020:	40020410 	.word	0x40020410
 8002024:	40020428 	.word	0x40020428
 8002028:	40020440 	.word	0x40020440
 800202c:	40020458 	.word	0x40020458
 8002030:	40020470 	.word	0x40020470
 8002034:	40020488 	.word	0x40020488
 8002038:	400204a0 	.word	0x400204a0
 800203c:	400204b8 	.word	0x400204b8
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a5c      	ldr	r2, [pc, #368]	; (80021c8 <HAL_DMA_Abort_IT+0x428>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d072      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a5b      	ldr	r2, [pc, #364]	; (80021cc <HAL_DMA_Abort_IT+0x42c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d06d      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a59      	ldr	r2, [pc, #356]	; (80021d0 <HAL_DMA_Abort_IT+0x430>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d068      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a58      	ldr	r2, [pc, #352]	; (80021d4 <HAL_DMA_Abort_IT+0x434>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d063      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a56      	ldr	r2, [pc, #344]	; (80021d8 <HAL_DMA_Abort_IT+0x438>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d05e      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a55      	ldr	r2, [pc, #340]	; (80021dc <HAL_DMA_Abort_IT+0x43c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d059      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a53      	ldr	r2, [pc, #332]	; (80021e0 <HAL_DMA_Abort_IT+0x440>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d054      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a52      	ldr	r2, [pc, #328]	; (80021e4 <HAL_DMA_Abort_IT+0x444>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d04f      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a50      	ldr	r2, [pc, #320]	; (80021e8 <HAL_DMA_Abort_IT+0x448>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d04a      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a4f      	ldr	r2, [pc, #316]	; (80021ec <HAL_DMA_Abort_IT+0x44c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d045      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a4d      	ldr	r2, [pc, #308]	; (80021f0 <HAL_DMA_Abort_IT+0x450>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d040      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a4c      	ldr	r2, [pc, #304]	; (80021f4 <HAL_DMA_Abort_IT+0x454>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d03b      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a4a      	ldr	r2, [pc, #296]	; (80021f8 <HAL_DMA_Abort_IT+0x458>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d036      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a49      	ldr	r2, [pc, #292]	; (80021fc <HAL_DMA_Abort_IT+0x45c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d031      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a47      	ldr	r2, [pc, #284]	; (8002200 <HAL_DMA_Abort_IT+0x460>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d02c      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a46      	ldr	r2, [pc, #280]	; (8002204 <HAL_DMA_Abort_IT+0x464>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d027      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a44      	ldr	r2, [pc, #272]	; (8002208 <HAL_DMA_Abort_IT+0x468>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d022      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a43      	ldr	r2, [pc, #268]	; (800220c <HAL_DMA_Abort_IT+0x46c>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d01d      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a41      	ldr	r2, [pc, #260]	; (8002210 <HAL_DMA_Abort_IT+0x470>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d018      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a40      	ldr	r2, [pc, #256]	; (8002214 <HAL_DMA_Abort_IT+0x474>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d013      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a3e      	ldr	r2, [pc, #248]	; (8002218 <HAL_DMA_Abort_IT+0x478>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00e      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a3d      	ldr	r2, [pc, #244]	; (800221c <HAL_DMA_Abort_IT+0x47c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d009      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a3b      	ldr	r2, [pc, #236]	; (8002220 <HAL_DMA_Abort_IT+0x480>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d004      	beq.n	8002140 <HAL_DMA_Abort_IT+0x3a0>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a3a      	ldr	r2, [pc, #232]	; (8002224 <HAL_DMA_Abort_IT+0x484>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d101      	bne.n	8002144 <HAL_DMA_Abort_IT+0x3a4>
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <HAL_DMA_Abort_IT+0x3a6>
 8002144:	2300      	movs	r3, #0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d028      	beq.n	800219c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002154:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002158:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002164:	f003 031f 	and.w	r3, r3, #31
 8002168:	2201      	movs	r2, #1
 800216a:	409a      	lsls	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002178:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00c      	beq.n	800219c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800218c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002190:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800219a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40020010 	.word	0x40020010
 80021cc:	40020028 	.word	0x40020028
 80021d0:	40020040 	.word	0x40020040
 80021d4:	40020058 	.word	0x40020058
 80021d8:	40020070 	.word	0x40020070
 80021dc:	40020088 	.word	0x40020088
 80021e0:	400200a0 	.word	0x400200a0
 80021e4:	400200b8 	.word	0x400200b8
 80021e8:	40020410 	.word	0x40020410
 80021ec:	40020428 	.word	0x40020428
 80021f0:	40020440 	.word	0x40020440
 80021f4:	40020458 	.word	0x40020458
 80021f8:	40020470 	.word	0x40020470
 80021fc:	40020488 	.word	0x40020488
 8002200:	400204a0 	.word	0x400204a0
 8002204:	400204b8 	.word	0x400204b8
 8002208:	58025408 	.word	0x58025408
 800220c:	5802541c 	.word	0x5802541c
 8002210:	58025430 	.word	0x58025430
 8002214:	58025444 	.word	0x58025444
 8002218:	58025458 	.word	0x58025458
 800221c:	5802546c 	.word	0x5802546c
 8002220:	58025480 	.word	0x58025480
 8002224:	58025494 	.word	0x58025494

08002228 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	; 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002236:	4b89      	ldr	r3, [pc, #548]	; (800245c <HAL_GPIO_Init+0x234>)
 8002238:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800223a:	e194      	b.n	8002566 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	2101      	movs	r1, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8186 	beq.w	8002560 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d00b      	beq.n	8002274 <HAL_GPIO_Init+0x4c>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d007      	beq.n	8002274 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002268:	2b11      	cmp	r3, #17
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b12      	cmp	r3, #18
 8002272:	d130      	bne.n	80022d6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022aa:	2201      	movs	r2, #1
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	091b      	lsrs	r3, r3, #4
 80022c0:	f003 0201 	and.w	r2, r3, #1
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	2203      	movs	r2, #3
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_Init+0xee>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b12      	cmp	r3, #18
 8002314:	d123      	bne.n	800235e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	08da      	lsrs	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3208      	adds	r2, #8
 800231e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	220f      	movs	r2, #15
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	08da      	lsrs	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3208      	adds	r2, #8
 8002358:	69b9      	ldr	r1, [r7, #24]
 800235a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	2203      	movs	r2, #3
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4013      	ands	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 0203 	and.w	r2, r3, #3
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 80e0 	beq.w	8002560 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a0:	4b2f      	ldr	r3, [pc, #188]	; (8002460 <HAL_GPIO_Init+0x238>)
 80023a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023a6:	4a2e      	ldr	r2, [pc, #184]	; (8002460 <HAL_GPIO_Init+0x238>)
 80023a8:	f043 0302 	orr.w	r3, r3, #2
 80023ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023b0:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <HAL_GPIO_Init+0x238>)
 80023b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023be:	4a29      	ldr	r2, [pc, #164]	; (8002464 <HAL_GPIO_Init+0x23c>)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	3302      	adds	r3, #2
 80023c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	220f      	movs	r2, #15
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a20      	ldr	r2, [pc, #128]	; (8002468 <HAL_GPIO_Init+0x240>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d052      	beq.n	8002490 <HAL_GPIO_Init+0x268>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a1f      	ldr	r2, [pc, #124]	; (800246c <HAL_GPIO_Init+0x244>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d031      	beq.n	8002456 <HAL_GPIO_Init+0x22e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a1e      	ldr	r2, [pc, #120]	; (8002470 <HAL_GPIO_Init+0x248>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d02b      	beq.n	8002452 <HAL_GPIO_Init+0x22a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a1d      	ldr	r2, [pc, #116]	; (8002474 <HAL_GPIO_Init+0x24c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d025      	beq.n	800244e <HAL_GPIO_Init+0x226>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a1c      	ldr	r2, [pc, #112]	; (8002478 <HAL_GPIO_Init+0x250>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d01f      	beq.n	800244a <HAL_GPIO_Init+0x222>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a1b      	ldr	r2, [pc, #108]	; (800247c <HAL_GPIO_Init+0x254>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d019      	beq.n	8002446 <HAL_GPIO_Init+0x21e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a1a      	ldr	r2, [pc, #104]	; (8002480 <HAL_GPIO_Init+0x258>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d013      	beq.n	8002442 <HAL_GPIO_Init+0x21a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a19      	ldr	r2, [pc, #100]	; (8002484 <HAL_GPIO_Init+0x25c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d00d      	beq.n	800243e <HAL_GPIO_Init+0x216>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a18      	ldr	r2, [pc, #96]	; (8002488 <HAL_GPIO_Init+0x260>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d007      	beq.n	800243a <HAL_GPIO_Init+0x212>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a17      	ldr	r2, [pc, #92]	; (800248c <HAL_GPIO_Init+0x264>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d101      	bne.n	8002436 <HAL_GPIO_Init+0x20e>
 8002432:	2309      	movs	r3, #9
 8002434:	e02d      	b.n	8002492 <HAL_GPIO_Init+0x26a>
 8002436:	230a      	movs	r3, #10
 8002438:	e02b      	b.n	8002492 <HAL_GPIO_Init+0x26a>
 800243a:	2308      	movs	r3, #8
 800243c:	e029      	b.n	8002492 <HAL_GPIO_Init+0x26a>
 800243e:	2307      	movs	r3, #7
 8002440:	e027      	b.n	8002492 <HAL_GPIO_Init+0x26a>
 8002442:	2306      	movs	r3, #6
 8002444:	e025      	b.n	8002492 <HAL_GPIO_Init+0x26a>
 8002446:	2305      	movs	r3, #5
 8002448:	e023      	b.n	8002492 <HAL_GPIO_Init+0x26a>
 800244a:	2304      	movs	r3, #4
 800244c:	e021      	b.n	8002492 <HAL_GPIO_Init+0x26a>
 800244e:	2303      	movs	r3, #3
 8002450:	e01f      	b.n	8002492 <HAL_GPIO_Init+0x26a>
 8002452:	2302      	movs	r3, #2
 8002454:	e01d      	b.n	8002492 <HAL_GPIO_Init+0x26a>
 8002456:	2301      	movs	r3, #1
 8002458:	e01b      	b.n	8002492 <HAL_GPIO_Init+0x26a>
 800245a:	bf00      	nop
 800245c:	58000080 	.word	0x58000080
 8002460:	58024400 	.word	0x58024400
 8002464:	58000400 	.word	0x58000400
 8002468:	58020000 	.word	0x58020000
 800246c:	58020400 	.word	0x58020400
 8002470:	58020800 	.word	0x58020800
 8002474:	58020c00 	.word	0x58020c00
 8002478:	58021000 	.word	0x58021000
 800247c:	58021400 	.word	0x58021400
 8002480:	58021800 	.word	0x58021800
 8002484:	58021c00 	.word	0x58021c00
 8002488:	58022000 	.word	0x58022000
 800248c:	58022400 	.word	0x58022400
 8002490:	2300      	movs	r3, #0
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	f002 0203 	and.w	r2, r2, #3
 8002498:	0092      	lsls	r2, r2, #2
 800249a:	4093      	lsls	r3, r2
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024a2:	4938      	ldr	r1, [pc, #224]	; (8002584 <HAL_GPIO_Init+0x35c>)
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	3302      	adds	r3, #2
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800252a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	3301      	adds	r3, #1
 8002564:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	f47f ae63 	bne.w	800223c <HAL_GPIO_Init+0x14>
  }
}
 8002576:	bf00      	nop
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	58000400 	.word	0x58000400

08002588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
 8002594:	4613      	mov	r3, r2
 8002596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002598:	787b      	ldrb	r3, [r7, #1]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800259e:	887a      	ldrh	r2, [r7, #2]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025a4:	e003      	b.n	80025ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025a6:	887b      	ldrh	r3, [r7, #2]
 80025a8:	041a      	lsls	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	619a      	str	r2, [r3, #24]
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80025c4:	4a08      	ldr	r2, [pc, #32]	; (80025e8 <HAL_HSEM_FastTake+0x2c>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3320      	adds	r3, #32
 80025ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ce:	4a07      	ldr	r2, [pc, #28]	; (80025ec <HAL_HSEM_FastTake+0x30>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d101      	bne.n	80025d8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e000      	b.n	80025da <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	58026400 	.word	0x58026400
 80025ec:	80000300 	.word	0x80000300

080025f0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80025fa:	4906      	ldr	r1, [pc, #24]	; (8002614 <HAL_HSEM_Release+0x24>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	58026400 	.word	0x58026400

08002618 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002620:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	2b06      	cmp	r3, #6
 800262a:	d00a      	beq.n	8002642 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800262c:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	d001      	beq.n	800263e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e040      	b.n	80026c0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	e03e      	b.n	80026c0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002642:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800264a:	491f      	ldr	r1, [pc, #124]	; (80026c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4313      	orrs	r3, r2
 8002650:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002652:	f7ff fa5b 	bl	8001b0c <HAL_GetTick>
 8002656:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002658:	e009      	b.n	800266e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800265a:	f7ff fa57 	bl	8001b0c <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002668:	d901      	bls.n	800266e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e028      	b.n	80026c0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800266e:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800267a:	d1ee      	bne.n	800265a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b1e      	cmp	r3, #30
 8002680:	d008      	beq.n	8002694 <HAL_PWREx_ConfigSupply+0x7c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b2e      	cmp	r3, #46	; 0x2e
 8002686:	d005      	beq.n	8002694 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b1d      	cmp	r3, #29
 800268c:	d002      	beq.n	8002694 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b2d      	cmp	r3, #45	; 0x2d
 8002692:	d114      	bne.n	80026be <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002694:	f7ff fa3a 	bl	8001b0c <HAL_GetTick>
 8002698:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800269a:	e009      	b.n	80026b0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800269c:	f7ff fa36 	bl	8001b0c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026aa:	d901      	bls.n	80026b0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e007      	b.n	80026c0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_PWREx_ConfigSupply+0xb0>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026bc:	d1ee      	bne.n	800269c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	58024800 	.word	0x58024800

080026cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08c      	sub	sp, #48	; 0x30
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e3ff      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8087 	beq.w	80027fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ec:	4b99      	ldr	r3, [pc, #612]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026f6:	4b97      	ldr	r3, [pc, #604]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fe:	2b10      	cmp	r3, #16
 8002700:	d007      	beq.n	8002712 <HAL_RCC_OscConfig+0x46>
 8002702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002704:	2b18      	cmp	r3, #24
 8002706:	d110      	bne.n	800272a <HAL_RCC_OscConfig+0x5e>
 8002708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d10b      	bne.n	800272a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002712:	4b90      	ldr	r3, [pc, #576]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d06c      	beq.n	80027f8 <HAL_RCC_OscConfig+0x12c>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d168      	bne.n	80027f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e3d9      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002732:	d106      	bne.n	8002742 <HAL_RCC_OscConfig+0x76>
 8002734:	4b87      	ldr	r3, [pc, #540]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a86      	ldr	r2, [pc, #536]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 800273a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	e02e      	b.n	80027a0 <HAL_RCC_OscConfig+0xd4>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10c      	bne.n	8002764 <HAL_RCC_OscConfig+0x98>
 800274a:	4b82      	ldr	r3, [pc, #520]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a81      	ldr	r2, [pc, #516]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 8002750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	4b7f      	ldr	r3, [pc, #508]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a7e      	ldr	r2, [pc, #504]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 800275c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	e01d      	b.n	80027a0 <HAL_RCC_OscConfig+0xd4>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0xbc>
 800276e:	4b79      	ldr	r3, [pc, #484]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a78      	ldr	r2, [pc, #480]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 8002774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	4b76      	ldr	r3, [pc, #472]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a75      	ldr	r2, [pc, #468]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 8002780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e00b      	b.n	80027a0 <HAL_RCC_OscConfig+0xd4>
 8002788:	4b72      	ldr	r3, [pc, #456]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a71      	ldr	r2, [pc, #452]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 800278e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	4b6f      	ldr	r3, [pc, #444]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a6e      	ldr	r2, [pc, #440]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 800279a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800279e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d013      	beq.n	80027d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7ff f9b0 	bl	8001b0c <HAL_GetTick>
 80027ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b0:	f7ff f9ac 	bl	8001b0c <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e38d      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027c2:	4b64      	ldr	r3, [pc, #400]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0xe4>
 80027ce:	e014      	b.n	80027fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7ff f99c 	bl	8001b0c <HAL_GetTick>
 80027d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d8:	f7ff f998 	bl	8001b0c <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e379      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027ea:	4b5a      	ldr	r3, [pc, #360]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x10c>
 80027f6:	e000      	b.n	80027fa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 80ae 	beq.w	8002964 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002808:	4b52      	ldr	r3, [pc, #328]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002810:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002812:	4b50      	ldr	r3, [pc, #320]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <HAL_RCC_OscConfig+0x162>
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	2b18      	cmp	r3, #24
 8002822:	d13a      	bne.n	800289a <HAL_RCC_OscConfig+0x1ce>
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d135      	bne.n	800289a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800282e:	4b49      	ldr	r3, [pc, #292]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <HAL_RCC_OscConfig+0x17a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e34b      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002846:	f7ff f98f 	bl	8001b68 <HAL_GetREVID>
 800284a:	4602      	mov	r2, r0
 800284c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002850:	429a      	cmp	r2, r3
 8002852:	d817      	bhi.n	8002884 <HAL_RCC_OscConfig+0x1b8>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	2b40      	cmp	r3, #64	; 0x40
 800285a:	d108      	bne.n	800286e <HAL_RCC_OscConfig+0x1a2>
 800285c:	4b3d      	ldr	r3, [pc, #244]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002864:	4a3b      	ldr	r2, [pc, #236]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 8002866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800286a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800286c:	e07a      	b.n	8002964 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286e:	4b39      	ldr	r3, [pc, #228]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	031b      	lsls	r3, r3, #12
 800287c:	4935      	ldr	r1, [pc, #212]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 800287e:	4313      	orrs	r3, r2
 8002880:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002882:	e06f      	b.n	8002964 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002884:	4b33      	ldr	r3, [pc, #204]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	061b      	lsls	r3, r3, #24
 8002892:	4930      	ldr	r1, [pc, #192]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002898:	e064      	b.n	8002964 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d045      	beq.n	800292e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028a2:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 0219 	bic.w	r2, r3, #25
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	4929      	ldr	r1, [pc, #164]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7ff f92a 	bl	8001b0c <HAL_GetTick>
 80028b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028bc:	f7ff f926 	bl	8001b0c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e307      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ce:	4b21      	ldr	r3, [pc, #132]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028da:	f7ff f945 	bl	8001b68 <HAL_GetREVID>
 80028de:	4602      	mov	r2, r0
 80028e0:	f241 0303 	movw	r3, #4099	; 0x1003
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d817      	bhi.n	8002918 <HAL_RCC_OscConfig+0x24c>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	2b40      	cmp	r3, #64	; 0x40
 80028ee:	d108      	bne.n	8002902 <HAL_RCC_OscConfig+0x236>
 80028f0:	4b18      	ldr	r3, [pc, #96]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80028f8:	4a16      	ldr	r2, [pc, #88]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 80028fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028fe:	6053      	str	r3, [r2, #4]
 8002900:	e030      	b.n	8002964 <HAL_RCC_OscConfig+0x298>
 8002902:	4b14      	ldr	r3, [pc, #80]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	031b      	lsls	r3, r3, #12
 8002910:	4910      	ldr	r1, [pc, #64]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]
 8002916:	e025      	b.n	8002964 <HAL_RCC_OscConfig+0x298>
 8002918:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	061b      	lsls	r3, r3, #24
 8002926:	490b      	ldr	r1, [pc, #44]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
 800292c:	e01a      	b.n	8002964 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a08      	ldr	r2, [pc, #32]	; (8002954 <HAL_RCC_OscConfig+0x288>)
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293a:	f7ff f8e7 	bl	8001b0c <HAL_GetTick>
 800293e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002940:	e00a      	b.n	8002958 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002942:	f7ff f8e3 	bl	8001b0c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d903      	bls.n	8002958 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e2c4      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
 8002954:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002958:	4ba4      	ldr	r3, [pc, #656]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1ee      	bne.n	8002942 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80a9 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002972:	4b9e      	ldr	r3, [pc, #632]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800297a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800297c:	4b9b      	ldr	r3, [pc, #620]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002980:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	2b08      	cmp	r3, #8
 8002986:	d007      	beq.n	8002998 <HAL_RCC_OscConfig+0x2cc>
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2b18      	cmp	r3, #24
 800298c:	d13a      	bne.n	8002a04 <HAL_RCC_OscConfig+0x338>
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	2b01      	cmp	r3, #1
 8002996:	d135      	bne.n	8002a04 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002998:	4b94      	ldr	r3, [pc, #592]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <HAL_RCC_OscConfig+0x2e4>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	2b80      	cmp	r3, #128	; 0x80
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e296      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029b0:	f7ff f8da 	bl	8001b68 <HAL_GetREVID>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f241 0303 	movw	r3, #4099	; 0x1003
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d817      	bhi.n	80029ee <HAL_RCC_OscConfig+0x322>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	d108      	bne.n	80029d8 <HAL_RCC_OscConfig+0x30c>
 80029c6:	4b89      	ldr	r3, [pc, #548]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80029ce:	4a87      	ldr	r2, [pc, #540]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 80029d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029d6:	e075      	b.n	8002ac4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029d8:	4b84      	ldr	r3, [pc, #528]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	069b      	lsls	r3, r3, #26
 80029e6:	4981      	ldr	r1, [pc, #516]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029ec:	e06a      	b.n	8002ac4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029ee:	4b7f      	ldr	r3, [pc, #508]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	061b      	lsls	r3, r3, #24
 80029fc:	497b      	ldr	r1, [pc, #492]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a02:	e05f      	b.n	8002ac4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d042      	beq.n	8002a92 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a0c:	4b77      	ldr	r3, [pc, #476]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a76      	ldr	r2, [pc, #472]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7ff f878 	bl	8001b0c <HAL_GetTick>
 8002a1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a20:	f7ff f874 	bl	8001b0c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e255      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a32:	4b6e      	ldr	r3, [pc, #440]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a3e:	f7ff f893 	bl	8001b68 <HAL_GetREVID>
 8002a42:	4602      	mov	r2, r0
 8002a44:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d817      	bhi.n	8002a7c <HAL_RCC_OscConfig+0x3b0>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	d108      	bne.n	8002a66 <HAL_RCC_OscConfig+0x39a>
 8002a54:	4b65      	ldr	r3, [pc, #404]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a5c:	4a63      	ldr	r2, [pc, #396]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002a5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a62:	6053      	str	r3, [r2, #4]
 8002a64:	e02e      	b.n	8002ac4 <HAL_RCC_OscConfig+0x3f8>
 8002a66:	4b61      	ldr	r3, [pc, #388]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	069b      	lsls	r3, r3, #26
 8002a74:	495d      	ldr	r1, [pc, #372]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]
 8002a7a:	e023      	b.n	8002ac4 <HAL_RCC_OscConfig+0x3f8>
 8002a7c:	4b5b      	ldr	r3, [pc, #364]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	061b      	lsls	r3, r3, #24
 8002a8a:	4958      	ldr	r1, [pc, #352]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60cb      	str	r3, [r1, #12]
 8002a90:	e018      	b.n	8002ac4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a92:	4b56      	ldr	r3, [pc, #344]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a55      	ldr	r2, [pc, #340]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9e:	f7ff f835 	bl	8001b0c <HAL_GetTick>
 8002aa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002aa6:	f7ff f831 	bl	8001b0c <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e212      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ab8:	4b4c      	ldr	r3, [pc, #304]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1f0      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d036      	beq.n	8002b3e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d019      	beq.n	8002b0c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad8:	4b44      	ldr	r3, [pc, #272]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002adc:	4a43      	ldr	r2, [pc, #268]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae4:	f7ff f812 	bl	8001b0c <HAL_GetTick>
 8002ae8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aec:	f7ff f80e 	bl	8001b0c <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e1ef      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002afe:	4b3b      	ldr	r3, [pc, #236]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0x420>
 8002b0a:	e018      	b.n	8002b3e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b0c:	4b37      	ldr	r3, [pc, #220]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b10:	4a36      	ldr	r2, [pc, #216]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b18:	f7fe fff8 	bl	8001b0c <HAL_GetTick>
 8002b1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b20:	f7fe fff4 	bl	8001b0c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e1d5      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b32:	4b2e      	ldr	r3, [pc, #184]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d036      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d019      	beq.n	8002b86 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b52:	4b26      	ldr	r3, [pc, #152]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a25      	ldr	r2, [pc, #148]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002b58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b5e:	f7fe ffd5 	bl	8001b0c <HAL_GetTick>
 8002b62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b66:	f7fe ffd1 	bl	8001b0c <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e1b2      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b78:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x49a>
 8002b84:	e018      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b86:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a18      	ldr	r2, [pc, #96]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b92:	f7fe ffbb 	bl	8001b0c <HAL_GetTick>
 8002b96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b9a:	f7fe ffb7 	bl	8001b0c <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e198      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bac:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <HAL_RCC_OscConfig+0x520>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f0      	bne.n	8002b9a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 8085 	beq.w	8002cd0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <HAL_RCC_OscConfig+0x524>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a09      	ldr	r2, [pc, #36]	; (8002bf0 <HAL_RCC_OscConfig+0x524>)
 8002bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bd2:	f7fe ff9b 	bl	8001b0c <HAL_GetTick>
 8002bd6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bd8:	e00c      	b.n	8002bf4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002bda:	f7fe ff97 	bl	8001b0c <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b64      	cmp	r3, #100	; 0x64
 8002be6:	d905      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e178      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
 8002bec:	58024400 	.word	0x58024400
 8002bf0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bf4:	4b96      	ldr	r3, [pc, #600]	; (8002e50 <HAL_RCC_OscConfig+0x784>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ec      	beq.n	8002bda <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d106      	bne.n	8002c16 <HAL_RCC_OscConfig+0x54a>
 8002c08:	4b92      	ldr	r3, [pc, #584]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	4a91      	ldr	r2, [pc, #580]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	6713      	str	r3, [r2, #112]	; 0x70
 8002c14:	e02d      	b.n	8002c72 <HAL_RCC_OscConfig+0x5a6>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x56c>
 8002c1e:	4b8d      	ldr	r3, [pc, #564]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	4a8c      	ldr	r2, [pc, #560]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2a:	4b8a      	ldr	r3, [pc, #552]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	4a89      	ldr	r2, [pc, #548]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002c30:	f023 0304 	bic.w	r3, r3, #4
 8002c34:	6713      	str	r3, [r2, #112]	; 0x70
 8002c36:	e01c      	b.n	8002c72 <HAL_RCC_OscConfig+0x5a6>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b05      	cmp	r3, #5
 8002c3e:	d10c      	bne.n	8002c5a <HAL_RCC_OscConfig+0x58e>
 8002c40:	4b84      	ldr	r3, [pc, #528]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	4a83      	ldr	r2, [pc, #524]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002c46:	f043 0304 	orr.w	r3, r3, #4
 8002c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4c:	4b81      	ldr	r3, [pc, #516]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	4a80      	ldr	r2, [pc, #512]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	6713      	str	r3, [r2, #112]	; 0x70
 8002c58:	e00b      	b.n	8002c72 <HAL_RCC_OscConfig+0x5a6>
 8002c5a:	4b7e      	ldr	r3, [pc, #504]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5e:	4a7d      	ldr	r2, [pc, #500]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	6713      	str	r3, [r2, #112]	; 0x70
 8002c66:	4b7b      	ldr	r3, [pc, #492]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	4a7a      	ldr	r2, [pc, #488]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002c6c:	f023 0304 	bic.w	r3, r3, #4
 8002c70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d015      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7a:	f7fe ff47 	bl	8001b0c <HAL_GetTick>
 8002c7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c80:	e00a      	b.n	8002c98 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7fe ff43 	bl	8001b0c <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e122      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c98:	4b6e      	ldr	r3, [pc, #440]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ee      	beq.n	8002c82 <HAL_RCC_OscConfig+0x5b6>
 8002ca4:	e014      	b.n	8002cd0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca6:	f7fe ff31 	bl	8001b0c <HAL_GetTick>
 8002caa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cac:	e00a      	b.n	8002cc4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cae:	f7fe ff2d 	bl	8001b0c <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e10c      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cc4:	4b63      	ldr	r3, [pc, #396]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1ee      	bne.n	8002cae <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 8101 	beq.w	8002edc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002cda:	4b5e      	ldr	r3, [pc, #376]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ce2:	2b18      	cmp	r3, #24
 8002ce4:	f000 80bc 	beq.w	8002e60 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	f040 8095 	bne.w	8002e1c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf2:	4b58      	ldr	r3, [pc, #352]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a57      	ldr	r2, [pc, #348]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002cf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7fe ff05 	bl	8001b0c <HAL_GetTick>
 8002d02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d06:	f7fe ff01 	bl	8001b0c <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e0e2      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d18:	4b4e      	ldr	r3, [pc, #312]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f0      	bne.n	8002d06 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d24:	4b4b      	ldr	r3, [pc, #300]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002d26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d28:	4b4b      	ldr	r3, [pc, #300]	; (8002e58 <HAL_RCC_OscConfig+0x78c>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d34:	0112      	lsls	r2, r2, #4
 8002d36:	430a      	orrs	r2, r1
 8002d38:	4946      	ldr	r1, [pc, #280]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	628b      	str	r3, [r1, #40]	; 0x28
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	3b01      	subs	r3, #1
 8002d44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	025b      	lsls	r3, r3, #9
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	041b      	lsls	r3, r3, #16
 8002d5c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d66:	3b01      	subs	r3, #1
 8002d68:	061b      	lsls	r3, r3, #24
 8002d6a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d6e:	4939      	ldr	r1, [pc, #228]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002d74:	4b37      	ldr	r3, [pc, #220]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	4a36      	ldr	r2, [pc, #216]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002d7a:	f023 0301 	bic.w	r3, r3, #1
 8002d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d80:	4b34      	ldr	r3, [pc, #208]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d84:	4b35      	ldr	r3, [pc, #212]	; (8002e5c <HAL_RCC_OscConfig+0x790>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d8c:	00d2      	lsls	r2, r2, #3
 8002d8e:	4931      	ldr	r1, [pc, #196]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d94:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d98:	f023 020c 	bic.w	r2, r3, #12
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	492c      	ldr	r1, [pc, #176]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002da6:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	f023 0202 	bic.w	r2, r3, #2
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	4928      	ldr	r1, [pc, #160]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002db8:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	4a25      	ldr	r2, [pc, #148]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc4:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	4a22      	ldr	r2, [pc, #136]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002dd0:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	4a1f      	ldr	r2, [pc, #124]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002ddc:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	4a1c      	ldr	r2, [pc, #112]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de8:	4b1a      	ldr	r3, [pc, #104]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a19      	ldr	r2, [pc, #100]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7fe fe8a 	bl	8001b0c <HAL_GetTick>
 8002df8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfc:	f7fe fe86 	bl	8001b0c <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e067      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e0e:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0x730>
 8002e1a:	e05f      	b.n	8002edc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1c:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a0c      	ldr	r2, [pc, #48]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe fe70 	bl	8001b0c <HAL_GetTick>
 8002e2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e30:	f7fe fe6c 	bl	8001b0c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e04d      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e42:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <HAL_RCC_OscConfig+0x788>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x764>
 8002e4e:	e045      	b.n	8002edc <HAL_RCC_OscConfig+0x810>
 8002e50:	58024800 	.word	0x58024800
 8002e54:	58024400 	.word	0x58024400
 8002e58:	fffffc0c 	.word	0xfffffc0c
 8002e5c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e60:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <HAL_RCC_OscConfig+0x81c>)
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e66:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <HAL_RCC_OscConfig+0x81c>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d031      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f003 0203 	and.w	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d12a      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d122      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d11a      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	0a5b      	lsrs	r3, r3, #9
 8002ea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d111      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	0c1b      	lsrs	r3, r3, #16
 8002eb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d108      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	0e1b      	lsrs	r3, r3, #24
 8002eca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3730      	adds	r7, #48	; 0x30
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	58024400 	.word	0x58024400

08002eec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e19c      	b.n	800323a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f00:	4b8a      	ldr	r3, [pc, #552]	; (800312c <HAL_RCC_ClockConfig+0x240>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d910      	bls.n	8002f30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0e:	4b87      	ldr	r3, [pc, #540]	; (800312c <HAL_RCC_ClockConfig+0x240>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 020f 	bic.w	r2, r3, #15
 8002f16:	4985      	ldr	r1, [pc, #532]	; (800312c <HAL_RCC_ClockConfig+0x240>)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b83      	ldr	r3, [pc, #524]	; (800312c <HAL_RCC_ClockConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e184      	b.n	800323a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d010      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	4b7b      	ldr	r3, [pc, #492]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d908      	bls.n	8002f5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f4c:	4b78      	ldr	r3, [pc, #480]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	4975      	ldr	r1, [pc, #468]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d010      	beq.n	8002f8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	4b70      	ldr	r3, [pc, #448]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d908      	bls.n	8002f8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f7a:	4b6d      	ldr	r3, [pc, #436]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	496a      	ldr	r1, [pc, #424]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d010      	beq.n	8002fba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699a      	ldr	r2, [r3, #24]
 8002f9c:	4b64      	ldr	r3, [pc, #400]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d908      	bls.n	8002fba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fa8:	4b61      	ldr	r3, [pc, #388]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	495e      	ldr	r1, [pc, #376]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d010      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	4b59      	ldr	r3, [pc, #356]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d908      	bls.n	8002fe8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002fd6:	4b56      	ldr	r3, [pc, #344]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	4953      	ldr	r1, [pc, #332]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d010      	beq.n	8003016 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	4b4d      	ldr	r3, [pc, #308]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 030f 	and.w	r3, r3, #15
 8003000:	429a      	cmp	r2, r3
 8003002:	d908      	bls.n	8003016 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003004:	4b4a      	ldr	r3, [pc, #296]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f023 020f 	bic.w	r2, r3, #15
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4947      	ldr	r1, [pc, #284]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 8003012:	4313      	orrs	r3, r2
 8003014:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d055      	beq.n	80030ce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003022:	4b43      	ldr	r3, [pc, #268]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	4940      	ldr	r1, [pc, #256]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 8003030:	4313      	orrs	r3, r2
 8003032:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d107      	bne.n	800304c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800303c:	4b3c      	ldr	r3, [pc, #240]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d121      	bne.n	800308c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0f6      	b.n	800323a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b03      	cmp	r3, #3
 8003052:	d107      	bne.n	8003064 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003054:	4b36      	ldr	r3, [pc, #216]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d115      	bne.n	800308c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0ea      	b.n	800323a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d107      	bne.n	800307c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800306c:	4b30      	ldr	r3, [pc, #192]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003074:	2b00      	cmp	r3, #0
 8003076:	d109      	bne.n	800308c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0de      	b.n	800323a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800307c:	4b2c      	ldr	r3, [pc, #176]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0d6      	b.n	800323a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800308c:	4b28      	ldr	r3, [pc, #160]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	f023 0207 	bic.w	r2, r3, #7
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4925      	ldr	r1, [pc, #148]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 800309a:	4313      	orrs	r3, r2
 800309c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309e:	f7fe fd35 	bl	8001b0c <HAL_GetTick>
 80030a2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a4:	e00a      	b.n	80030bc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a6:	f7fe fd31 	bl	8001b0c <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e0be      	b.n	800323a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030bc:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d1eb      	bne.n	80030a6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d010      	beq.n	80030fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	4b14      	ldr	r3, [pc, #80]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d208      	bcs.n	80030fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ea:	4b11      	ldr	r3, [pc, #68]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f023 020f 	bic.w	r2, r3, #15
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	490e      	ldr	r1, [pc, #56]	; (8003130 <HAL_RCC_ClockConfig+0x244>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_RCC_ClockConfig+0x240>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d214      	bcs.n	8003134 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310a:	4b08      	ldr	r3, [pc, #32]	; (800312c <HAL_RCC_ClockConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 020f 	bic.w	r2, r3, #15
 8003112:	4906      	ldr	r1, [pc, #24]	; (800312c <HAL_RCC_ClockConfig+0x240>)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b04      	ldr	r3, [pc, #16]	; (800312c <HAL_RCC_ClockConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d005      	beq.n	8003134 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e086      	b.n	800323a <HAL_RCC_ClockConfig+0x34e>
 800312c:	52002000 	.word	0x52002000
 8003130:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d010      	beq.n	8003162 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	4b3f      	ldr	r3, [pc, #252]	; (8003244 <HAL_RCC_ClockConfig+0x358>)
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800314c:	429a      	cmp	r2, r3
 800314e:	d208      	bcs.n	8003162 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003150:	4b3c      	ldr	r3, [pc, #240]	; (8003244 <HAL_RCC_ClockConfig+0x358>)
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	4939      	ldr	r1, [pc, #228]	; (8003244 <HAL_RCC_ClockConfig+0x358>)
 800315e:	4313      	orrs	r3, r2
 8003160:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d010      	beq.n	8003190 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	4b34      	ldr	r3, [pc, #208]	; (8003244 <HAL_RCC_ClockConfig+0x358>)
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800317a:	429a      	cmp	r2, r3
 800317c:	d208      	bcs.n	8003190 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800317e:	4b31      	ldr	r3, [pc, #196]	; (8003244 <HAL_RCC_ClockConfig+0x358>)
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	492e      	ldr	r1, [pc, #184]	; (8003244 <HAL_RCC_ClockConfig+0x358>)
 800318c:	4313      	orrs	r3, r2
 800318e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	d010      	beq.n	80031be <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699a      	ldr	r2, [r3, #24]
 80031a0:	4b28      	ldr	r3, [pc, #160]	; (8003244 <HAL_RCC_ClockConfig+0x358>)
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d208      	bcs.n	80031be <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031ac:	4b25      	ldr	r3, [pc, #148]	; (8003244 <HAL_RCC_ClockConfig+0x358>)
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	4922      	ldr	r1, [pc, #136]	; (8003244 <HAL_RCC_ClockConfig+0x358>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d010      	beq.n	80031ec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69da      	ldr	r2, [r3, #28]
 80031ce:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <HAL_RCC_ClockConfig+0x358>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d208      	bcs.n	80031ec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031da:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <HAL_RCC_ClockConfig+0x358>)
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	4917      	ldr	r1, [pc, #92]	; (8003244 <HAL_RCC_ClockConfig+0x358>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031ec:	f000 f834 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 80031f0:	4601      	mov	r1, r0
 80031f2:	4b14      	ldr	r3, [pc, #80]	; (8003244 <HAL_RCC_ClockConfig+0x358>)
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	4a12      	ldr	r2, [pc, #72]	; (8003248 <HAL_RCC_ClockConfig+0x35c>)
 80031fe:	5cd3      	ldrb	r3, [r2, r3]
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	fa21 f303 	lsr.w	r3, r1, r3
 8003208:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800320a:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <HAL_RCC_ClockConfig+0x358>)
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	4a0d      	ldr	r2, [pc, #52]	; (8003248 <HAL_RCC_ClockConfig+0x35c>)
 8003214:	5cd3      	ldrb	r3, [r2, r3]
 8003216:	f003 031f 	and.w	r3, r3, #31
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
 8003220:	4a0a      	ldr	r2, [pc, #40]	; (800324c <HAL_RCC_ClockConfig+0x360>)
 8003222:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003224:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <HAL_RCC_ClockConfig+0x364>)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <HAL_RCC_ClockConfig+0x368>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe fc22 	bl	8001a78 <HAL_InitTick>
 8003234:	4603      	mov	r3, r0
 8003236:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003238:	7bfb      	ldrb	r3, [r7, #15]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	58024400 	.word	0x58024400
 8003248:	08009520 	.word	0x08009520
 800324c:	20000004 	.word	0x20000004
 8003250:	20000000 	.word	0x20000000
 8003254:	20000008 	.word	0x20000008

08003258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003258:	b480      	push	{r7}
 800325a:	b089      	sub	sp, #36	; 0x24
 800325c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800325e:	4baf      	ldr	r3, [pc, #700]	; (800351c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003266:	2b18      	cmp	r3, #24
 8003268:	f200 814e 	bhi.w	8003508 <HAL_RCC_GetSysClockFreq+0x2b0>
 800326c:	a201      	add	r2, pc, #4	; (adr r2, 8003274 <HAL_RCC_GetSysClockFreq+0x1c>)
 800326e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003272:	bf00      	nop
 8003274:	080032d9 	.word	0x080032d9
 8003278:	08003509 	.word	0x08003509
 800327c:	08003509 	.word	0x08003509
 8003280:	08003509 	.word	0x08003509
 8003284:	08003509 	.word	0x08003509
 8003288:	08003509 	.word	0x08003509
 800328c:	08003509 	.word	0x08003509
 8003290:	08003509 	.word	0x08003509
 8003294:	080032ff 	.word	0x080032ff
 8003298:	08003509 	.word	0x08003509
 800329c:	08003509 	.word	0x08003509
 80032a0:	08003509 	.word	0x08003509
 80032a4:	08003509 	.word	0x08003509
 80032a8:	08003509 	.word	0x08003509
 80032ac:	08003509 	.word	0x08003509
 80032b0:	08003509 	.word	0x08003509
 80032b4:	08003305 	.word	0x08003305
 80032b8:	08003509 	.word	0x08003509
 80032bc:	08003509 	.word	0x08003509
 80032c0:	08003509 	.word	0x08003509
 80032c4:	08003509 	.word	0x08003509
 80032c8:	08003509 	.word	0x08003509
 80032cc:	08003509 	.word	0x08003509
 80032d0:	08003509 	.word	0x08003509
 80032d4:	0800330b 	.word	0x0800330b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032d8:	4b90      	ldr	r3, [pc, #576]	; (800351c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d009      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032e4:	4b8d      	ldr	r3, [pc, #564]	; (800351c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	08db      	lsrs	r3, r3, #3
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	4a8c      	ldr	r2, [pc, #560]	; (8003520 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
 80032f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80032f6:	e10a      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80032f8:	4b89      	ldr	r3, [pc, #548]	; (8003520 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80032fa:	61bb      	str	r3, [r7, #24]
    break;
 80032fc:	e107      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80032fe:	4b89      	ldr	r3, [pc, #548]	; (8003524 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003300:	61bb      	str	r3, [r7, #24]
    break;
 8003302:	e104      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003304:	4b88      	ldr	r3, [pc, #544]	; (8003528 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003306:	61bb      	str	r3, [r7, #24]
    break;
 8003308:	e101      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800330a:	4b84      	ldr	r3, [pc, #528]	; (800351c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003314:	4b81      	ldr	r3, [pc, #516]	; (800351c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800331e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003320:	4b7e      	ldr	r3, [pc, #504]	; (800351c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800332a:	4b7c      	ldr	r3, [pc, #496]	; (800351c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800332c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332e:	08db      	lsrs	r3, r3, #3
 8003330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	fb02 f303 	mul.w	r3, r2, r3
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003342:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80da 	beq.w	8003502 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d05a      	beq.n	800340a <HAL_RCC_GetSysClockFreq+0x1b2>
 8003354:	2b01      	cmp	r3, #1
 8003356:	d302      	bcc.n	800335e <HAL_RCC_GetSysClockFreq+0x106>
 8003358:	2b02      	cmp	r3, #2
 800335a:	d078      	beq.n	800344e <HAL_RCC_GetSysClockFreq+0x1f6>
 800335c:	e099      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800335e:	4b6f      	ldr	r3, [pc, #444]	; (800351c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b00      	cmp	r3, #0
 8003368:	d02d      	beq.n	80033c6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800336a:	4b6c      	ldr	r3, [pc, #432]	; (800351c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	08db      	lsrs	r3, r3, #3
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	4a6a      	ldr	r2, [pc, #424]	; (8003520 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003376:	fa22 f303 	lsr.w	r3, r2, r3
 800337a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	ee07 3a90 	vmov	s15, r3
 8003382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	ee07 3a90 	vmov	s15, r3
 800338c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003394:	4b61      	ldr	r3, [pc, #388]	; (800351c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800339c:	ee07 3a90 	vmov	s15, r3
 80033a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80033a8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800352c <HAL_RCC_GetSysClockFreq+0x2d4>
 80033ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80033c4:	e087      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003530 <HAL_RCC_GetSysClockFreq+0x2d8>
 80033d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033d8:	4b50      	ldr	r3, [pc, #320]	; (800351c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e0:	ee07 3a90 	vmov	s15, r3
 80033e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ec:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800352c <HAL_RCC_GetSysClockFreq+0x2d4>
 80033f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003404:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003408:	e065      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	ee07 3a90 	vmov	s15, r3
 8003410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003414:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003534 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003418:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800341c:	4b3f      	ldr	r3, [pc, #252]	; (800351c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003424:	ee07 3a90 	vmov	s15, r3
 8003428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800342c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003430:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800352c <HAL_RCC_GetSysClockFreq+0x2d4>
 8003434:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003438:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800343c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003440:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003448:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800344c:	e043      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	ee07 3a90 	vmov	s15, r3
 8003454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003458:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003538 <HAL_RCC_GetSysClockFreq+0x2e0>
 800345c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003460:	4b2e      	ldr	r3, [pc, #184]	; (800351c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003468:	ee07 3a90 	vmov	s15, r3
 800346c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003470:	ed97 6a02 	vldr	s12, [r7, #8]
 8003474:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800352c <HAL_RCC_GetSysClockFreq+0x2d4>
 8003478:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800347c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003480:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003484:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003490:	e021      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	ee07 3a90 	vmov	s15, r3
 8003498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800349c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003534 <HAL_RCC_GetSysClockFreq+0x2dc>
 80034a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034a4:	4b1d      	ldr	r3, [pc, #116]	; (800351c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ac:	ee07 3a90 	vmov	s15, r3
 80034b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80034b8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800352c <HAL_RCC_GetSysClockFreq+0x2d4>
 80034bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034d4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80034d6:	4b11      	ldr	r3, [pc, #68]	; (800351c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	0a5b      	lsrs	r3, r3, #9
 80034dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034e0:	3301      	adds	r3, #1
 80034e2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80034f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034fa:	ee17 3a90 	vmov	r3, s15
 80034fe:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003500:	e005      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	61bb      	str	r3, [r7, #24]
    break;
 8003506:	e002      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003508:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800350a:	61bb      	str	r3, [r7, #24]
    break;
 800350c:	bf00      	nop
  }

  return sysclockfreq;
 800350e:	69bb      	ldr	r3, [r7, #24]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3724      	adds	r7, #36	; 0x24
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	58024400 	.word	0x58024400
 8003520:	03d09000 	.word	0x03d09000
 8003524:	003d0900 	.word	0x003d0900
 8003528:	02625a00 	.word	0x02625a00
 800352c:	46000000 	.word	0x46000000
 8003530:	4c742400 	.word	0x4c742400
 8003534:	4a742400 	.word	0x4a742400
 8003538:	4c189680 	.word	0x4c189680

0800353c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003542:	f7ff fe89 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 8003546:	4601      	mov	r1, r0
 8003548:	4b10      	ldr	r3, [pc, #64]	; (800358c <HAL_RCC_GetHCLKFreq+0x50>)
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	0a1b      	lsrs	r3, r3, #8
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	4a0f      	ldr	r2, [pc, #60]	; (8003590 <HAL_RCC_GetHCLKFreq+0x54>)
 8003554:	5cd3      	ldrb	r3, [r2, r3]
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	fa21 f303 	lsr.w	r3, r1, r3
 800355e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003560:	4b0a      	ldr	r3, [pc, #40]	; (800358c <HAL_RCC_GetHCLKFreq+0x50>)
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	4a09      	ldr	r2, [pc, #36]	; (8003590 <HAL_RCC_GetHCLKFreq+0x54>)
 800356a:	5cd3      	ldrb	r3, [r2, r3]
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	fa22 f303 	lsr.w	r3, r2, r3
 8003576:	4a07      	ldr	r2, [pc, #28]	; (8003594 <HAL_RCC_GetHCLKFreq+0x58>)
 8003578:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800357a:	4a07      	ldr	r2, [pc, #28]	; (8003598 <HAL_RCC_GetHCLKFreq+0x5c>)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003580:	4b04      	ldr	r3, [pc, #16]	; (8003594 <HAL_RCC_GetHCLKFreq+0x58>)
 8003582:	681b      	ldr	r3, [r3, #0]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	58024400 	.word	0x58024400
 8003590:	08009520 	.word	0x08009520
 8003594:	20000004 	.word	0x20000004
 8003598:	20000000 	.word	0x20000000

0800359c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80035a0:	f7ff ffcc 	bl	800353c <HAL_RCC_GetHCLKFreq>
 80035a4:	4601      	mov	r1, r0
 80035a6:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	091b      	lsrs	r3, r3, #4
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	4a04      	ldr	r2, [pc, #16]	; (80035c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035b2:	5cd3      	ldrb	r3, [r2, r3]
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80035bc:	4618      	mov	r0, r3
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	58024400 	.word	0x58024400
 80035c4:	08009520 	.word	0x08009520

080035c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80035cc:	f7ff ffb6 	bl	800353c <HAL_RCC_GetHCLKFreq>
 80035d0:	4601      	mov	r1, r0
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	0a1b      	lsrs	r3, r3, #8
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035de:	5cd3      	ldrb	r3, [r2, r3]
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	58024400 	.word	0x58024400
 80035f0:	08009520 	.word	0x08009520

080035f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035fc:	2300      	movs	r3, #0
 80035fe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003600:	2300      	movs	r3, #0
 8003602:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d03d      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003618:	d013      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800361a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800361e:	d802      	bhi.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003620:	2b00      	cmp	r3, #0
 8003622:	d007      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003624:	e01f      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003626:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800362a:	d013      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800362c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003630:	d01c      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003632:	e018      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003634:	4baf      	ldr	r3, [pc, #700]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	4aae      	ldr	r2, [pc, #696]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800363a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800363e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003640:	e015      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3304      	adds	r3, #4
 8003646:	2102      	movs	r1, #2
 8003648:	4618      	mov	r0, r3
 800364a:	f001 f96f 	bl	800492c <RCCEx_PLL2_Config>
 800364e:	4603      	mov	r3, r0
 8003650:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003652:	e00c      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3324      	adds	r3, #36	; 0x24
 8003658:	2102      	movs	r1, #2
 800365a:	4618      	mov	r0, r3
 800365c:	f001 fa18 	bl	8004a90 <RCCEx_PLL3_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003664:	e003      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	75fb      	strb	r3, [r7, #23]
      break;
 800366a:	e000      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800366c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800366e:	7dfb      	ldrb	r3, [r7, #23]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d109      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003674:	4b9f      	ldr	r3, [pc, #636]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003678:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003680:	499c      	ldr	r1, [pc, #624]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003682:	4313      	orrs	r3, r2
 8003684:	650b      	str	r3, [r1, #80]	; 0x50
 8003686:	e001      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003688:	7dfb      	ldrb	r3, [r7, #23]
 800368a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d03d      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369c:	2b04      	cmp	r3, #4
 800369e:	d826      	bhi.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80036a0:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a6:	bf00      	nop
 80036a8:	080036bd 	.word	0x080036bd
 80036ac:	080036cb 	.word	0x080036cb
 80036b0:	080036dd 	.word	0x080036dd
 80036b4:	080036f5 	.word	0x080036f5
 80036b8:	080036f5 	.word	0x080036f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036bc:	4b8d      	ldr	r3, [pc, #564]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	4a8c      	ldr	r2, [pc, #560]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036c8:	e015      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f001 f92b 	bl	800492c <RCCEx_PLL2_Config>
 80036d6:	4603      	mov	r3, r0
 80036d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036da:	e00c      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3324      	adds	r3, #36	; 0x24
 80036e0:	2100      	movs	r1, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 f9d4 	bl	8004a90 <RCCEx_PLL3_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036ec:	e003      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	75fb      	strb	r3, [r7, #23]
      break;
 80036f2:	e000      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80036f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d109      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036fc:	4b7d      	ldr	r3, [pc, #500]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003700:	f023 0207 	bic.w	r2, r3, #7
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003708:	497a      	ldr	r1, [pc, #488]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800370a:	4313      	orrs	r3, r2
 800370c:	650b      	str	r3, [r1, #80]	; 0x50
 800370e:	e001      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003710:	7dfb      	ldrb	r3, [r7, #23]
 8003712:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800371c:	2b00      	cmp	r3, #0
 800371e:	d03e      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003724:	2b80      	cmp	r3, #128	; 0x80
 8003726:	d01c      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003728:	2b80      	cmp	r3, #128	; 0x80
 800372a:	d804      	bhi.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003730:	2b40      	cmp	r3, #64	; 0x40
 8003732:	d00d      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003734:	e01e      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003736:	2bc0      	cmp	r3, #192	; 0xc0
 8003738:	d01f      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800373a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800373e:	d01e      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003740:	e018      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003742:	4b6c      	ldr	r3, [pc, #432]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	4a6b      	ldr	r2, [pc, #428]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800374c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800374e:	e017      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3304      	adds	r3, #4
 8003754:	2100      	movs	r1, #0
 8003756:	4618      	mov	r0, r3
 8003758:	f001 f8e8 	bl	800492c <RCCEx_PLL2_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003760:	e00e      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3324      	adds	r3, #36	; 0x24
 8003766:	2100      	movs	r1, #0
 8003768:	4618      	mov	r0, r3
 800376a:	f001 f991 	bl	8004a90 <RCCEx_PLL3_Config>
 800376e:	4603      	mov	r3, r0
 8003770:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003772:	e005      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	75fb      	strb	r3, [r7, #23]
      break;
 8003778:	e002      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800377a:	bf00      	nop
 800377c:	e000      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800377e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003780:	7dfb      	ldrb	r3, [r7, #23]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d109      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003786:	4b5b      	ldr	r3, [pc, #364]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800378a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003792:	4958      	ldr	r1, [pc, #352]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003794:	4313      	orrs	r3, r2
 8003796:	650b      	str	r3, [r1, #80]	; 0x50
 8003798:	e001      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379a:	7dfb      	ldrb	r3, [r7, #23]
 800379c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d044      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b4:	d01f      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80037b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ba:	d805      	bhi.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037c4:	d00e      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80037c6:	e01f      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80037c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037cc:	d01f      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80037ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037d2:	d01e      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80037d4:	e018      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d6:	4b47      	ldr	r3, [pc, #284]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	4a46      	ldr	r2, [pc, #280]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037e2:	e017      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3304      	adds	r3, #4
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 f89e 	bl	800492c <RCCEx_PLL2_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037f4:	e00e      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3324      	adds	r3, #36	; 0x24
 80037fa:	2100      	movs	r1, #0
 80037fc:	4618      	mov	r0, r3
 80037fe:	f001 f947 	bl	8004a90 <RCCEx_PLL3_Config>
 8003802:	4603      	mov	r3, r0
 8003804:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003806:	e005      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	75fb      	strb	r3, [r7, #23]
      break;
 800380c:	e002      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800380e:	bf00      	nop
 8003810:	e000      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800381a:	4b36      	ldr	r3, [pc, #216]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800381c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003828:	4932      	ldr	r1, [pc, #200]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800382a:	4313      	orrs	r3, r2
 800382c:	658b      	str	r3, [r1, #88]	; 0x58
 800382e:	e001      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003830:	7dfb      	ldrb	r3, [r7, #23]
 8003832:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800383c:	2b00      	cmp	r3, #0
 800383e:	d044      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003846:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800384a:	d01f      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800384c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003850:	d805      	bhi.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003856:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800385a:	d00e      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800385c:	e01f      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800385e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003862:	d01f      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003864:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003868:	d01e      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800386a:	e018      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800386c:	4b21      	ldr	r3, [pc, #132]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	4a20      	ldr	r2, [pc, #128]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003876:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003878:	e017      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3304      	adds	r3, #4
 800387e:	2100      	movs	r1, #0
 8003880:	4618      	mov	r0, r3
 8003882:	f001 f853 	bl	800492c <RCCEx_PLL2_Config>
 8003886:	4603      	mov	r3, r0
 8003888:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800388a:	e00e      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3324      	adds	r3, #36	; 0x24
 8003890:	2100      	movs	r1, #0
 8003892:	4618      	mov	r0, r3
 8003894:	f001 f8fc 	bl	8004a90 <RCCEx_PLL3_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800389c:	e005      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	75fb      	strb	r3, [r7, #23]
      break;
 80038a2:	e002      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80038a4:	bf00      	nop
 80038a6:	e000      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80038a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10a      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038b0:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038be:	490d      	ldr	r1, [pc, #52]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	658b      	str	r3, [r1, #88]	; 0x58
 80038c4:	e001      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c6:	7dfb      	ldrb	r3, [r7, #23]
 80038c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d035      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038da:	2b10      	cmp	r3, #16
 80038dc:	d00c      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80038de:	2b10      	cmp	r3, #16
 80038e0:	d802      	bhi.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d01b      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80038e6:	e017      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d00c      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80038ec:	2b30      	cmp	r3, #48	; 0x30
 80038ee:	d018      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80038f0:	e012      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80038f2:	bf00      	nop
 80038f4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f8:	4baf      	ldr	r3, [pc, #700]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	4aae      	ldr	r2, [pc, #696]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80038fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003902:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003904:	e00e      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3304      	adds	r3, #4
 800390a:	2102      	movs	r1, #2
 800390c:	4618      	mov	r0, r3
 800390e:	f001 f80d 	bl	800492c <RCCEx_PLL2_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003916:	e005      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	75fb      	strb	r3, [r7, #23]
      break;
 800391c:	e002      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800391e:	bf00      	nop
 8003920:	e000      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003922:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003924:	7dfb      	ldrb	r3, [r7, #23]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800392a:	4ba3      	ldr	r3, [pc, #652]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800392c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003936:	49a0      	ldr	r1, [pc, #640]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003938:	4313      	orrs	r3, r2
 800393a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800393c:	e001      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393e:	7dfb      	ldrb	r3, [r7, #23]
 8003940:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d042      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003956:	d01f      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800395c:	d805      	bhi.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003966:	d00e      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003968:	e01f      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800396a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800396e:	d01f      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003970:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003974:	d01e      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003976:	e018      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003978:	4b8f      	ldr	r3, [pc, #572]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	4a8e      	ldr	r2, [pc, #568]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800397e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003982:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003984:	e017      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3304      	adds	r3, #4
 800398a:	2100      	movs	r1, #0
 800398c:	4618      	mov	r0, r3
 800398e:	f000 ffcd 	bl	800492c <RCCEx_PLL2_Config>
 8003992:	4603      	mov	r3, r0
 8003994:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003996:	e00e      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3324      	adds	r3, #36	; 0x24
 800399c:	2100      	movs	r1, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	f001 f876 	bl	8004a90 <RCCEx_PLL3_Config>
 80039a4:	4603      	mov	r3, r0
 80039a6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039a8:	e005      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	75fb      	strb	r3, [r7, #23]
      break;
 80039ae:	e002      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80039b0:	bf00      	nop
 80039b2:	e000      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80039b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b6:	7dfb      	ldrb	r3, [r7, #23]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d109      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039bc:	4b7e      	ldr	r3, [pc, #504]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c8:	497b      	ldr	r1, [pc, #492]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	650b      	str	r3, [r1, #80]	; 0x50
 80039ce:	e001      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d0:	7dfb      	ldrb	r3, [r7, #23]
 80039d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d042      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039e8:	d01b      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80039ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039ee:	d805      	bhi.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d022      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x446>
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f8:	d00a      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80039fa:	e01b      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80039fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a00:	d01d      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003a02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a06:	d01c      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003a08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a0c:	d01b      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003a0e:	e011      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3304      	adds	r3, #4
 8003a14:	2101      	movs	r1, #1
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 ff88 	bl	800492c <RCCEx_PLL2_Config>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a20:	e012      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3324      	adds	r3, #36	; 0x24
 8003a26:	2101      	movs	r1, #1
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f001 f831 	bl	8004a90 <RCCEx_PLL3_Config>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a32:	e009      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	75fb      	strb	r3, [r7, #23]
      break;
 8003a38:	e006      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003a3a:	bf00      	nop
 8003a3c:	e004      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003a3e:	bf00      	nop
 8003a40:	e002      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003a42:	bf00      	nop
 8003a44:	e000      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003a46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a4e:	4b5a      	ldr	r3, [pc, #360]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a52:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a5a:	4957      	ldr	r1, [pc, #348]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	650b      	str	r3, [r1, #80]	; 0x50
 8003a60:	e001      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
 8003a64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d044      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a7c:	d01b      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003a7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a82:	d805      	bhi.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d022      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003a88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003a8e:	e01b      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a94:	d01d      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a9a:	d01c      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003a9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003aa0:	d01b      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003aa2:	e011      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 ff3e 	bl	800492c <RCCEx_PLL2_Config>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ab4:	e012      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3324      	adds	r3, #36	; 0x24
 8003aba:	2101      	movs	r1, #1
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 ffe7 	bl	8004a90 <RCCEx_PLL3_Config>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ac6:	e009      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	75fb      	strb	r3, [r7, #23]
      break;
 8003acc:	e006      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003ace:	bf00      	nop
 8003ad0:	e004      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003ad2:	bf00      	nop
 8003ad4:	e002      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e000      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003ada:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ae2:	4b35      	ldr	r3, [pc, #212]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003af0:	4931      	ldr	r1, [pc, #196]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	658b      	str	r3, [r1, #88]	; 0x58
 8003af6:	e001      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
 8003afa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d02d      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b10:	d005      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b16:	d009      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d013      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003b1c:	e00f      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b1e:	4b26      	ldr	r3, [pc, #152]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	4a25      	ldr	r2, [pc, #148]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b2a:	e00c      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	2101      	movs	r1, #1
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fefa 	bl	800492c <RCCEx_PLL2_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b3c:	e003      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	75fb      	strb	r3, [r7, #23]
      break;
 8003b42:	e000      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d109      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b58:	4917      	ldr	r1, [pc, #92]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	650b      	str	r3, [r1, #80]	; 0x50
 8003b5e:	e001      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
 8003b62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d035      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d81b      	bhi.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003b78:	a201      	add	r2, pc, #4	; (adr r2, 8003b80 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7e:	bf00      	nop
 8003b80:	08003bbd 	.word	0x08003bbd
 8003b84:	08003b91 	.word	0x08003b91
 8003b88:	08003b9f 	.word	0x08003b9f
 8003b8c:	08003bbd 	.word	0x08003bbd
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b90:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	4a08      	ldr	r2, [pc, #32]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b9c:	e00f      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	2102      	movs	r1, #2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fec1 	bl	800492c <RCCEx_PLL2_Config>
 8003baa:	4603      	mov	r3, r0
 8003bac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003bae:	e006      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003bb4:	e003      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003bb6:	bf00      	nop
 8003bb8:	58024400 	.word	0x58024400
      break;
 8003bbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bbe:	7dfb      	ldrb	r3, [r7, #23]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d109      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003bc4:	4bba      	ldr	r3, [pc, #744]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc8:	f023 0203 	bic.w	r2, r3, #3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd0:	49b7      	ldr	r1, [pc, #732]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003bd6:	e001      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd8:	7dfb      	ldrb	r3, [r7, #23]
 8003bda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 8086 	beq.w	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bea:	4bb2      	ldr	r3, [pc, #712]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4ab1      	ldr	r2, [pc, #708]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bf6:	f7fd ff89 	bl	8001b0c <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bfc:	e009      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfe:	f7fd ff85 	bl	8001b0c <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b64      	cmp	r3, #100	; 0x64
 8003c0a:	d902      	bls.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	75fb      	strb	r3, [r7, #23]
        break;
 8003c10:	e005      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c12:	4ba8      	ldr	r3, [pc, #672]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0ef      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003c1e:	7dfb      	ldrb	r3, [r7, #23]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d166      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c24:	4ba2      	ldr	r3, [pc, #648]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c2e:	4053      	eors	r3, r2
 8003c30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d013      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c38:	4b9d      	ldr	r3, [pc, #628]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c40:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c42:	4b9b      	ldr	r3, [pc, #620]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c46:	4a9a      	ldr	r2, [pc, #616]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c4e:	4b98      	ldr	r3, [pc, #608]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c52:	4a97      	ldr	r2, [pc, #604]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c58:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c5a:	4a95      	ldr	r2, [pc, #596]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c6a:	d115      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fd ff4e 	bl	8001b0c <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c72:	e00b      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c74:	f7fd ff4a 	bl	8001b0c <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d902      	bls.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	75fb      	strb	r3, [r7, #23]
            break;
 8003c8a:	e005      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c8c:	4b88      	ldr	r3, [pc, #544]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0ed      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003c98:	7dfb      	ldrb	r3, [r7, #23]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d126      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cac:	d10d      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003cae:	4b80      	ldr	r3, [pc, #512]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cbc:	0919      	lsrs	r1, r3, #4
 8003cbe:	4b7e      	ldr	r3, [pc, #504]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003cc0:	400b      	ands	r3, r1
 8003cc2:	497b      	ldr	r1, [pc, #492]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	610b      	str	r3, [r1, #16]
 8003cc8:	e005      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003cca:	4b79      	ldr	r3, [pc, #484]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	4a78      	ldr	r2, [pc, #480]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003cd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003cd4:	6113      	str	r3, [r2, #16]
 8003cd6:	4b76      	ldr	r3, [pc, #472]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003cd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce4:	4972      	ldr	r1, [pc, #456]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	670b      	str	r3, [r1, #112]	; 0x70
 8003cea:	e004      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
 8003cee:	75bb      	strb	r3, [r7, #22]
 8003cf0:	e001      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
 8003cf4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d07d      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d06:	2b28      	cmp	r3, #40	; 0x28
 8003d08:	d866      	bhi.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003d0a:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d10:	08003ddf 	.word	0x08003ddf
 8003d14:	08003dd9 	.word	0x08003dd9
 8003d18:	08003dd9 	.word	0x08003dd9
 8003d1c:	08003dd9 	.word	0x08003dd9
 8003d20:	08003dd9 	.word	0x08003dd9
 8003d24:	08003dd9 	.word	0x08003dd9
 8003d28:	08003dd9 	.word	0x08003dd9
 8003d2c:	08003dd9 	.word	0x08003dd9
 8003d30:	08003db5 	.word	0x08003db5
 8003d34:	08003dd9 	.word	0x08003dd9
 8003d38:	08003dd9 	.word	0x08003dd9
 8003d3c:	08003dd9 	.word	0x08003dd9
 8003d40:	08003dd9 	.word	0x08003dd9
 8003d44:	08003dd9 	.word	0x08003dd9
 8003d48:	08003dd9 	.word	0x08003dd9
 8003d4c:	08003dd9 	.word	0x08003dd9
 8003d50:	08003dc7 	.word	0x08003dc7
 8003d54:	08003dd9 	.word	0x08003dd9
 8003d58:	08003dd9 	.word	0x08003dd9
 8003d5c:	08003dd9 	.word	0x08003dd9
 8003d60:	08003dd9 	.word	0x08003dd9
 8003d64:	08003dd9 	.word	0x08003dd9
 8003d68:	08003dd9 	.word	0x08003dd9
 8003d6c:	08003dd9 	.word	0x08003dd9
 8003d70:	08003ddf 	.word	0x08003ddf
 8003d74:	08003dd9 	.word	0x08003dd9
 8003d78:	08003dd9 	.word	0x08003dd9
 8003d7c:	08003dd9 	.word	0x08003dd9
 8003d80:	08003dd9 	.word	0x08003dd9
 8003d84:	08003dd9 	.word	0x08003dd9
 8003d88:	08003dd9 	.word	0x08003dd9
 8003d8c:	08003dd9 	.word	0x08003dd9
 8003d90:	08003ddf 	.word	0x08003ddf
 8003d94:	08003dd9 	.word	0x08003dd9
 8003d98:	08003dd9 	.word	0x08003dd9
 8003d9c:	08003dd9 	.word	0x08003dd9
 8003da0:	08003dd9 	.word	0x08003dd9
 8003da4:	08003dd9 	.word	0x08003dd9
 8003da8:	08003dd9 	.word	0x08003dd9
 8003dac:	08003dd9 	.word	0x08003dd9
 8003db0:	08003ddf 	.word	0x08003ddf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3304      	adds	r3, #4
 8003db8:	2101      	movs	r1, #1
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fdb6 	bl	800492c <RCCEx_PLL2_Config>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003dc4:	e00c      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3324      	adds	r3, #36	; 0x24
 8003dca:	2101      	movs	r1, #1
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fe5f 	bl	8004a90 <RCCEx_PLL3_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003dd6:	e003      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	75fb      	strb	r3, [r7, #23]
      break;
 8003ddc:	e000      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003dde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003de0:	7dfb      	ldrb	r3, [r7, #23]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003de6:	4b32      	ldr	r3, [pc, #200]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003df2:	492f      	ldr	r1, [pc, #188]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	654b      	str	r3, [r1, #84]	; 0x54
 8003df8:	e001      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfa:	7dfb      	ldrb	r3, [r7, #23]
 8003dfc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d037      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0e:	2b05      	cmp	r3, #5
 8003e10:	d820      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003e12:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e18:	08003e5b 	.word	0x08003e5b
 8003e1c:	08003e31 	.word	0x08003e31
 8003e20:	08003e43 	.word	0x08003e43
 8003e24:	08003e5b 	.word	0x08003e5b
 8003e28:	08003e5b 	.word	0x08003e5b
 8003e2c:	08003e5b 	.word	0x08003e5b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3304      	adds	r3, #4
 8003e34:	2101      	movs	r1, #1
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fd78 	bl	800492c <RCCEx_PLL2_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e40:	e00c      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3324      	adds	r3, #36	; 0x24
 8003e46:	2101      	movs	r1, #1
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fe21 	bl	8004a90 <RCCEx_PLL3_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e52:	e003      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	75fb      	strb	r3, [r7, #23]
      break;
 8003e58:	e000      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003e5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e5c:	7dfb      	ldrb	r3, [r7, #23]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d109      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e62:	4b13      	ldr	r3, [pc, #76]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e66:	f023 0207 	bic.w	r2, r3, #7
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6e:	4910      	ldr	r1, [pc, #64]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	654b      	str	r3, [r1, #84]	; 0x54
 8003e74:	e001      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e76:	7dfb      	ldrb	r3, [r7, #23]
 8003e78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d040      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8c:	2b05      	cmp	r3, #5
 8003e8e:	d827      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8003e90:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003ee7 	.word	0x08003ee7
 8003e9c:	08003ebd 	.word	0x08003ebd
 8003ea0:	08003ecf 	.word	0x08003ecf
 8003ea4:	08003ee7 	.word	0x08003ee7
 8003ea8:	08003ee7 	.word	0x08003ee7
 8003eac:	08003ee7 	.word	0x08003ee7
 8003eb0:	58024400 	.word	0x58024400
 8003eb4:	58024800 	.word	0x58024800
 8003eb8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fd32 	bl	800492c <RCCEx_PLL2_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ecc:	e00c      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3324      	adds	r3, #36	; 0x24
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fddb 	bl	8004a90 <RCCEx_PLL3_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ede:	e003      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8003ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10a      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eee:	4bb2      	ldr	r3, [pc, #712]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	f023 0207 	bic.w	r2, r3, #7
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efc:	49ae      	ldr	r1, [pc, #696]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	658b      	str	r3, [r1, #88]	; 0x58
 8003f02:	e001      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d044      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f1e:	d01b      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003f20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f24:	d805      	bhi.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d022      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003f2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003f30:	e01b      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d01d      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8003f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f3c:	d01c      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003f3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f42:	d01b      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003f44:	e011      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fced 	bl	800492c <RCCEx_PLL2_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f56:	e012      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3324      	adds	r3, #36	; 0x24
 8003f5c:	2102      	movs	r1, #2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fd96 	bl	8004a90 <RCCEx_PLL3_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f68:	e009      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f6e:	e006      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003f70:	bf00      	nop
 8003f72:	e004      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003f74:	bf00      	nop
 8003f76:	e002      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003f78:	bf00      	nop
 8003f7a:	e000      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003f7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10a      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f84:	4b8c      	ldr	r3, [pc, #560]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f88:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f92:	4989      	ldr	r1, [pc, #548]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	654b      	str	r3, [r1, #84]	; 0x54
 8003f98:	e001      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
 8003f9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d044      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb4:	d01b      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8003fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fba:	d805      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d022      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc4:	d00a      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003fc6:	e01b      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8003fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fcc:	d01d      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003fce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fd2:	d01c      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003fd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fd8:	d01b      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8003fda:	e011      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fca2 	bl	800492c <RCCEx_PLL2_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003fec:	e012      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3324      	adds	r3, #36	; 0x24
 8003ff2:	2102      	movs	r1, #2
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fd4b 	bl	8004a90 <RCCEx_PLL3_Config>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003ffe:	e009      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	75fb      	strb	r3, [r7, #23]
      break;
 8004004:	e006      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004006:	bf00      	nop
 8004008:	e004      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800400a:	bf00      	nop
 800400c:	e002      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800400e:	bf00      	nop
 8004010:	e000      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004012:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004014:	7dfb      	ldrb	r3, [r7, #23]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10a      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800401a:	4b67      	ldr	r3, [pc, #412]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800401c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004028:	4963      	ldr	r1, [pc, #396]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800402a:	4313      	orrs	r3, r2
 800402c:	658b      	str	r3, [r1, #88]	; 0x58
 800402e:	e001      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004030:	7dfb      	ldrb	r3, [r7, #23]
 8004032:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403c:	2b00      	cmp	r3, #0
 800403e:	d044      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004046:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800404a:	d01b      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800404c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004050:	d805      	bhi.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d022      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800405a:	d00a      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800405c:	e01b      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800405e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004062:	d01d      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004064:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004068:	d01c      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800406a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800406e:	d01b      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004070:	e011      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3304      	adds	r3, #4
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fc57 	bl	800492c <RCCEx_PLL2_Config>
 800407e:	4603      	mov	r3, r0
 8004080:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004082:	e012      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3324      	adds	r3, #36	; 0x24
 8004088:	2102      	movs	r1, #2
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fd00 	bl	8004a90 <RCCEx_PLL3_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004094:	e009      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	75fb      	strb	r3, [r7, #23]
      break;
 800409a:	e006      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800409c:	bf00      	nop
 800409e:	e004      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80040a0:	bf00      	nop
 80040a2:	e002      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80040a4:	bf00      	nop
 80040a6:	e000      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80040a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10a      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040b0:	4b41      	ldr	r3, [pc, #260]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80040b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040be:	493e      	ldr	r1, [pc, #248]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	658b      	str	r3, [r1, #88]	; 0x58
 80040c4:	e001      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c6:	7dfb      	ldrb	r3, [r7, #23]
 80040c8:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d01a      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e0:	d10a      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3324      	adds	r3, #36	; 0x24
 80040e6:	2102      	movs	r1, #2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fcd1 	bl	8004a90 <RCCEx_PLL3_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80040f8:	4b2f      	ldr	r3, [pc, #188]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80040fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004106:	492c      	ldr	r1, [pc, #176]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004108:	4313      	orrs	r3, r2
 800410a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0310 	and.w	r3, r3, #16
 8004114:	2b00      	cmp	r3, #0
 8004116:	d01a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800411e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004122:	d10a      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3324      	adds	r3, #36	; 0x24
 8004128:	2102      	movs	r1, #2
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fcb0 	bl	8004a90 <RCCEx_PLL3_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800413a:	4b1f      	ldr	r3, [pc, #124]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800413c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004148:	491b      	ldr	r1, [pc, #108]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800414a:	4313      	orrs	r3, r2
 800414c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d032      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004164:	d00d      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8004166:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800416a:	d016      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800416c:	2b00      	cmp	r3, #0
 800416e:	d111      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3304      	adds	r3, #4
 8004174:	2100      	movs	r1, #0
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fbd8 	bl	800492c <RCCEx_PLL2_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004180:	e00c      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3324      	adds	r3, #36	; 0x24
 8004186:	2102      	movs	r1, #2
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fc81 	bl	8004a90 <RCCEx_PLL3_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004192:	e003      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	75fb      	strb	r3, [r7, #23]
      break;
 8004198:	e000      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800419a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800419c:	7dfb      	ldrb	r3, [r7, #23]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10c      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041b0:	4901      	ldr	r1, [pc, #4]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	658b      	str	r3, [r1, #88]	; 0x58
 80041b6:	e003      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80041b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041bc:	7dfb      	ldrb	r3, [r7, #23]
 80041be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d02f      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041d6:	d00c      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80041d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041dc:	d015      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80041de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041e2:	d10f      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e4:	4b79      	ldr	r3, [pc, #484]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	4a78      	ldr	r2, [pc, #480]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80041ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80041f0:	e00c      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3324      	adds	r3, #36	; 0x24
 80041f6:	2101      	movs	r1, #1
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fc49 	bl	8004a90 <RCCEx_PLL3_Config>
 80041fe:	4603      	mov	r3, r0
 8004200:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004202:	e003      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	75fb      	strb	r3, [r7, #23]
      break;
 8004208:	e000      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800420a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800420c:	7dfb      	ldrb	r3, [r7, #23]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004212:	4b6e      	ldr	r3, [pc, #440]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004216:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004220:	496a      	ldr	r1, [pc, #424]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004222:	4313      	orrs	r3, r2
 8004224:	654b      	str	r3, [r1, #84]	; 0x54
 8004226:	e001      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004228:	7dfb      	ldrb	r3, [r7, #23]
 800422a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d029      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004244:	d007      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8004246:	e00f      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004248:	4b60      	ldr	r3, [pc, #384]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	4a5f      	ldr	r2, [pc, #380]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800424e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004252:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004254:	e00b      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3304      	adds	r3, #4
 800425a:	2102      	movs	r1, #2
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fb65 	bl	800492c <RCCEx_PLL2_Config>
 8004262:	4603      	mov	r3, r0
 8004264:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004266:	e002      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	75fb      	strb	r3, [r7, #23]
      break;
 800426c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800426e:	7dfb      	ldrb	r3, [r7, #23]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d109      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004274:	4b55      	ldr	r3, [pc, #340]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004278:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004280:	4952      	ldr	r1, [pc, #328]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004282:	4313      	orrs	r3, r2
 8004284:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004286:	e001      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	7dfb      	ldrb	r3, [r7, #23]
 800428a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3324      	adds	r3, #36	; 0x24
 800429c:	2102      	movs	r1, #2
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fbf6 	bl	8004a90 <RCCEx_PLL3_Config>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d02f      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c2:	d00c      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80042c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c8:	d802      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d011      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80042ce:	e00d      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80042d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d4:	d00f      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80042d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042da:	d00e      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80042dc:	e006      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042de:	4b3b      	ldr	r3, [pc, #236]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	4a3a      	ldr	r2, [pc, #232]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80042e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80042ea:	e007      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	75fb      	strb	r3, [r7, #23]
      break;
 80042f0:	e004      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80042f2:	bf00      	nop
 80042f4:	e002      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80042f6:	bf00      	nop
 80042f8:	e000      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80042fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042fc:	7dfb      	ldrb	r3, [r7, #23]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004302:	4b32      	ldr	r3, [pc, #200]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004306:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800430e:	492f      	ldr	r1, [pc, #188]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004310:	4313      	orrs	r3, r2
 8004312:	654b      	str	r3, [r1, #84]	; 0x54
 8004314:	e001      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004316:	7dfb      	ldrb	r3, [r7, #23]
 8004318:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d008      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004326:	4b29      	ldr	r3, [pc, #164]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	4926      	ldr	r1, [pc, #152]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004334:	4313      	orrs	r3, r2
 8004336:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d009      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004344:	4b21      	ldr	r3, [pc, #132]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004352:	491e      	ldr	r1, [pc, #120]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004354:	4313      	orrs	r3, r2
 8004356:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d008      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004364:	4b19      	ldr	r3, [pc, #100]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004368:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004370:	4916      	ldr	r1, [pc, #88]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004372:	4313      	orrs	r3, r2
 8004374:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00d      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004382:	4b12      	ldr	r3, [pc, #72]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	4a11      	ldr	r2, [pc, #68]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004388:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800438c:	6113      	str	r3, [r2, #16]
 800438e:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004398:	490c      	ldr	r1, [pc, #48]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800439a:	4313      	orrs	r3, r2
 800439c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	da08      	bge.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80043a6:	4b09      	ldr	r3, [pc, #36]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b2:	4906      	ldr	r1, [pc, #24]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80043b8:	7dbb      	ldrb	r3, [r7, #22]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e000      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	58024400 	.word	0x58024400

080043d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80043d4:	f7ff f8b2 	bl	800353c <HAL_RCC_GetHCLKFreq>
 80043d8:	4601      	mov	r1, r0
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	091b      	lsrs	r3, r3, #4
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	4a04      	ldr	r2, [pc, #16]	; (80043f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80043e6:	5cd3      	ldrb	r3, [r2, r3]
 80043e8:	f003 031f 	and.w	r3, r3, #31
 80043ec:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	58024400 	.word	0x58024400
 80043f8:	08009520 	.word	0x08009520

080043fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b089      	sub	sp, #36	; 0x24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004404:	4b9d      	ldr	r3, [pc, #628]	; (800467c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800440e:	4b9b      	ldr	r3, [pc, #620]	; (800467c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004412:	0b1b      	lsrs	r3, r3, #12
 8004414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004418:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800441a:	4b98      	ldr	r3, [pc, #608]	; (800467c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	091b      	lsrs	r3, r3, #4
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004426:	4b95      	ldr	r3, [pc, #596]	; (800467c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	08db      	lsrs	r3, r3, #3
 800442c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	fb02 f303 	mul.w	r3, r2, r3
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 810a 	beq.w	800465e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d05a      	beq.n	8004506 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004450:	2b01      	cmp	r3, #1
 8004452:	d302      	bcc.n	800445a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004454:	2b02      	cmp	r3, #2
 8004456:	d078      	beq.n	800454a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004458:	e099      	b.n	800458e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800445a:	4b88      	ldr	r3, [pc, #544]	; (800467c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	2b00      	cmp	r3, #0
 8004464:	d02d      	beq.n	80044c2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004466:	4b85      	ldr	r3, [pc, #532]	; (800467c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	08db      	lsrs	r3, r3, #3
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	4a83      	ldr	r2, [pc, #524]	; (8004680 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004472:	fa22 f303 	lsr.w	r3, r2, r3
 8004476:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	ee07 3a90 	vmov	s15, r3
 8004488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004490:	4b7a      	ldr	r3, [pc, #488]	; (800467c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004498:	ee07 3a90 	vmov	s15, r3
 800449c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80044a4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004684 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80044a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044bc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80044c0:	e087      	b.n	80045d2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	ee07 3a90 	vmov	s15, r3
 80044c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044cc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004688 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80044d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d4:	4b69      	ldr	r3, [pc, #420]	; (800467c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044dc:	ee07 3a90 	vmov	s15, r3
 80044e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80044e8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004684 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80044ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004500:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004504:	e065      	b.n	80045d2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	ee07 3a90 	vmov	s15, r3
 800450c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004510:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800468c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004518:	4b58      	ldr	r3, [pc, #352]	; (800467c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004520:	ee07 3a90 	vmov	s15, r3
 8004524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004528:	ed97 6a03 	vldr	s12, [r7, #12]
 800452c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004684 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004530:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004538:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800453c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004544:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004548:	e043      	b.n	80045d2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	ee07 3a90 	vmov	s15, r3
 8004550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004554:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004690 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800455c:	4b47      	ldr	r3, [pc, #284]	; (800467c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004564:	ee07 3a90 	vmov	s15, r3
 8004568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004570:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004684 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004588:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800458c:	e021      	b.n	80045d2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	ee07 3a90 	vmov	s15, r3
 8004594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004598:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800468c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800459c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045a0:	4b36      	ldr	r3, [pc, #216]	; (800467c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a8:	ee07 3a90 	vmov	s15, r3
 80045ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80045b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004684 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80045b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045d0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80045d2:	4b2a      	ldr	r3, [pc, #168]	; (800467c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	0a5b      	lsrs	r3, r3, #9
 80045d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045dc:	ee07 3a90 	vmov	s15, r3
 80045e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80045f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045f8:	ee17 2a90 	vmov	r2, s15
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004600:	4b1e      	ldr	r3, [pc, #120]	; (800467c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	0c1b      	lsrs	r3, r3, #16
 8004606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004612:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004616:	ee37 7a87 	vadd.f32	s14, s15, s14
 800461a:	edd7 6a07 	vldr	s13, [r7, #28]
 800461e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004626:	ee17 2a90 	vmov	r2, s15
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800462e:	4b13      	ldr	r3, [pc, #76]	; (800467c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004632:	0e1b      	lsrs	r3, r3, #24
 8004634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004640:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004644:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004648:	edd7 6a07 	vldr	s13, [r7, #28]
 800464c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004654:	ee17 2a90 	vmov	r2, s15
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800465c:	e008      	b.n	8004670 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	609a      	str	r2, [r3, #8]
}
 8004670:	bf00      	nop
 8004672:	3724      	adds	r7, #36	; 0x24
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	58024400 	.word	0x58024400
 8004680:	03d09000 	.word	0x03d09000
 8004684:	46000000 	.word	0x46000000
 8004688:	4c742400 	.word	0x4c742400
 800468c:	4a742400 	.word	0x4a742400
 8004690:	4c189680 	.word	0x4c189680

08004694 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004694:	b480      	push	{r7}
 8004696:	b089      	sub	sp, #36	; 0x24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800469c:	4b9d      	ldr	r3, [pc, #628]	; (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800469e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a0:	f003 0303 	and.w	r3, r3, #3
 80046a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80046a6:	4b9b      	ldr	r3, [pc, #620]	; (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80046a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046aa:	0d1b      	lsrs	r3, r3, #20
 80046ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80046b2:	4b98      	ldr	r3, [pc, #608]	; (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	0a1b      	lsrs	r3, r3, #8
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80046be:	4b95      	ldr	r3, [pc, #596]	; (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80046c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c2:	08db      	lsrs	r3, r3, #3
 80046c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	fb02 f303 	mul.w	r3, r2, r3
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 810a 	beq.w	80048f6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d05a      	beq.n	800479e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d302      	bcc.n	80046f2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d078      	beq.n	80047e2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80046f0:	e099      	b.n	8004826 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046f2:	4b88      	ldr	r3, [pc, #544]	; (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d02d      	beq.n	800475a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046fe:	4b85      	ldr	r3, [pc, #532]	; (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	08db      	lsrs	r3, r3, #3
 8004704:	f003 0303 	and.w	r3, r3, #3
 8004708:	4a83      	ldr	r2, [pc, #524]	; (8004918 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800470a:	fa22 f303 	lsr.w	r3, r2, r3
 800470e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	ee07 3a90 	vmov	s15, r3
 8004720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004724:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004728:	4b7a      	ldr	r3, [pc, #488]	; (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800472a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004730:	ee07 3a90 	vmov	s15, r3
 8004734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004738:	ed97 6a03 	vldr	s12, [r7, #12]
 800473c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800491c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004740:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004744:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004748:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800474c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004754:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004758:	e087      	b.n	800486a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	ee07 3a90 	vmov	s15, r3
 8004760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004764:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004920 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800476c:	4b69      	ldr	r3, [pc, #420]	; (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004774:	ee07 3a90 	vmov	s15, r3
 8004778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800477c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004780:	eddf 5a66 	vldr	s11, [pc, #408]	; 800491c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004784:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004788:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800478c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004790:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004798:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800479c:	e065      	b.n	800486a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	ee07 3a90 	vmov	s15, r3
 80047a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80047ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047b0:	4b58      	ldr	r3, [pc, #352]	; (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b8:	ee07 3a90 	vmov	s15, r3
 80047bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80047c4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800491c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80047c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047e0:	e043      	b.n	800486a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	ee07 3a90 	vmov	s15, r3
 80047e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004928 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80047f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047f4:	4b47      	ldr	r3, [pc, #284]	; (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047fc:	ee07 3a90 	vmov	s15, r3
 8004800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004804:	ed97 6a03 	vldr	s12, [r7, #12]
 8004808:	eddf 5a44 	vldr	s11, [pc, #272]	; 800491c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800480c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004810:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004814:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004818:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800481c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004820:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004824:	e021      	b.n	800486a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	ee07 3a90 	vmov	s15, r3
 800482c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004830:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004834:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004838:	4b36      	ldr	r3, [pc, #216]	; (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004840:	ee07 3a90 	vmov	s15, r3
 8004844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004848:	ed97 6a03 	vldr	s12, [r7, #12]
 800484c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800491c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004850:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004854:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004858:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800485c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004864:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004868:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800486a:	4b2a      	ldr	r3, [pc, #168]	; (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	0a5b      	lsrs	r3, r3, #9
 8004870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004874:	ee07 3a90 	vmov	s15, r3
 8004878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004880:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004884:	edd7 6a07 	vldr	s13, [r7, #28]
 8004888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800488c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004890:	ee17 2a90 	vmov	r2, s15
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004898:	4b1e      	ldr	r3, [pc, #120]	; (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	0c1b      	lsrs	r3, r3, #16
 800489e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80048b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048be:	ee17 2a90 	vmov	r2, s15
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80048c6:	4b13      	ldr	r3, [pc, #76]	; (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	0e1b      	lsrs	r3, r3, #24
 80048cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048d0:	ee07 3a90 	vmov	s15, r3
 80048d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80048e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ec:	ee17 2a90 	vmov	r2, s15
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80048f4:	e008      	b.n	8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	609a      	str	r2, [r3, #8]
}
 8004908:	bf00      	nop
 800490a:	3724      	adds	r7, #36	; 0x24
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	58024400 	.word	0x58024400
 8004918:	03d09000 	.word	0x03d09000
 800491c:	46000000 	.word	0x46000000
 8004920:	4c742400 	.word	0x4c742400
 8004924:	4a742400 	.word	0x4a742400
 8004928:	4c189680 	.word	0x4c189680

0800492c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800493a:	4b53      	ldr	r3, [pc, #332]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 800493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	2b03      	cmp	r3, #3
 8004944:	d101      	bne.n	800494a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e099      	b.n	8004a7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800494a:	4b4f      	ldr	r3, [pc, #316]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a4e      	ldr	r2, [pc, #312]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 8004950:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004956:	f7fd f8d9 	bl	8001b0c <HAL_GetTick>
 800495a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800495c:	e008      	b.n	8004970 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800495e:	f7fd f8d5 	bl	8001b0c <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d901      	bls.n	8004970 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e086      	b.n	8004a7e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004970:	4b45      	ldr	r3, [pc, #276]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1f0      	bne.n	800495e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800497c:	4b42      	ldr	r3, [pc, #264]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	031b      	lsls	r3, r3, #12
 800498a:	493f      	ldr	r1, [pc, #252]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 800498c:	4313      	orrs	r3, r2
 800498e:	628b      	str	r3, [r1, #40]	; 0x28
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	3b01      	subs	r3, #1
 8004996:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	3b01      	subs	r3, #1
 80049a0:	025b      	lsls	r3, r3, #9
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	041b      	lsls	r3, r3, #16
 80049ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	061b      	lsls	r3, r3, #24
 80049bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049c0:	4931      	ldr	r1, [pc, #196]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80049c6:	4b30      	ldr	r3, [pc, #192]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	492d      	ldr	r1, [pc, #180]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80049d8:	4b2b      	ldr	r3, [pc, #172]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	f023 0220 	bic.w	r2, r3, #32
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	4928      	ldr	r1, [pc, #160]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80049ea:	4b27      	ldr	r3, [pc, #156]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	4a26      	ldr	r2, [pc, #152]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 80049f0:	f023 0310 	bic.w	r3, r3, #16
 80049f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80049f6:	4b24      	ldr	r3, [pc, #144]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 80049f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049fa:	4b24      	ldr	r3, [pc, #144]	; (8004a8c <RCCEx_PLL2_Config+0x160>)
 80049fc:	4013      	ands	r3, r2
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	69d2      	ldr	r2, [r2, #28]
 8004a02:	00d2      	lsls	r2, r2, #3
 8004a04:	4920      	ldr	r1, [pc, #128]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004a0a:	4b1f      	ldr	r3, [pc, #124]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	4a1e      	ldr	r2, [pc, #120]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 8004a10:	f043 0310 	orr.w	r3, r3, #16
 8004a14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d106      	bne.n	8004a2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a1c:	4b1a      	ldr	r3, [pc, #104]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	4a19      	ldr	r2, [pc, #100]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 8004a22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a28:	e00f      	b.n	8004a4a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d106      	bne.n	8004a3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004a30:	4b15      	ldr	r3, [pc, #84]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	4a14      	ldr	r2, [pc, #80]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 8004a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a3c:	e005      	b.n	8004a4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004a3e:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 8004a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a42:	4a11      	ldr	r2, [pc, #68]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 8004a44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a4a:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a0e      	ldr	r2, [pc, #56]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 8004a50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a56:	f7fd f859 	bl	8001b0c <HAL_GetTick>
 8004a5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a5c:	e008      	b.n	8004a70 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004a5e:	f7fd f855 	bl	8001b0c <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e006      	b.n	8004a7e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <RCCEx_PLL2_Config+0x15c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0f0      	beq.n	8004a5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	58024400 	.word	0x58024400
 8004a8c:	ffff0007 	.word	0xffff0007

08004a90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a9e:	4b53      	ldr	r3, [pc, #332]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d101      	bne.n	8004aae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e099      	b.n	8004be2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004aae:	4b4f      	ldr	r3, [pc, #316]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a4e      	ldr	r2, [pc, #312]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aba:	f7fd f827 	bl	8001b0c <HAL_GetTick>
 8004abe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ac0:	e008      	b.n	8004ad4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004ac2:	f7fd f823 	bl	8001b0c <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e086      	b.n	8004be2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ad4:	4b45      	ldr	r3, [pc, #276]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f0      	bne.n	8004ac2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ae0:	4b42      	ldr	r3, [pc, #264]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	051b      	lsls	r3, r3, #20
 8004aee:	493f      	ldr	r1, [pc, #252]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	628b      	str	r3, [r1, #40]	; 0x28
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	3b01      	subs	r3, #1
 8004afa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	025b      	lsls	r3, r3, #9
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	041b      	lsls	r3, r3, #16
 8004b12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	061b      	lsls	r3, r3, #24
 8004b20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b24:	4931      	ldr	r1, [pc, #196]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b2a:	4b30      	ldr	r3, [pc, #192]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	492d      	ldr	r1, [pc, #180]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b3c:	4b2b      	ldr	r3, [pc, #172]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	4928      	ldr	r1, [pc, #160]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004b4e:	4b27      	ldr	r3, [pc, #156]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	4a26      	ldr	r2, [pc, #152]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b5a:	4b24      	ldr	r3, [pc, #144]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b5e:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <RCCEx_PLL3_Config+0x160>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	69d2      	ldr	r2, [r2, #28]
 8004b66:	00d2      	lsls	r2, r2, #3
 8004b68:	4920      	ldr	r1, [pc, #128]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004b6e:	4b1f      	ldr	r3, [pc, #124]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	4a1e      	ldr	r2, [pc, #120]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d106      	bne.n	8004b8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b80:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	4a19      	ldr	r2, [pc, #100]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004b86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b8c:	e00f      	b.n	8004bae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d106      	bne.n	8004ba2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b94:	4b15      	ldr	r3, [pc, #84]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b98:	4a14      	ldr	r2, [pc, #80]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004b9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ba0:	e005      	b.n	8004bae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ba2:	4b12      	ldr	r3, [pc, #72]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba6:	4a11      	ldr	r2, [pc, #68]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004ba8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004bae:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a0e      	ldr	r2, [pc, #56]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bba:	f7fc ffa7 	bl	8001b0c <HAL_GetTick>
 8004bbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004bc0:	e008      	b.n	8004bd4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004bc2:	f7fc ffa3 	bl	8001b0c <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e006      	b.n	8004be2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004bd4:	4b05      	ldr	r3, [pc, #20]	; (8004bec <RCCEx_PLL3_Config+0x15c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0f0      	beq.n	8004bc2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	58024400 	.word	0x58024400
 8004bf0:	ffff0007 	.word	0xffff0007

08004bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e049      	b.n	8004c9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fc fe08 	bl	8001830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f000 f934 	bl	8004ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d001      	beq.n	8004cbc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e019      	b.n	8004cf0 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <HAL_TIM_Base_Start+0x58>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b06      	cmp	r3, #6
 8004cd4:	d00b      	beq.n	8004cee <HAL_TIM_Base_Start+0x4a>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cdc:	d007      	beq.n	8004cee <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0201 	orr.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	00010007 	.word	0x00010007

08004d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_TIM_ConfigClockSource+0x18>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e0b7      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x188>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4b57      	ldr	r3, [pc, #348]	; (8004e90 <HAL_TIM_ConfigClockSource+0x190>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b70      	cmp	r3, #112	; 0x70
 8004d4e:	d02e      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0xae>
 8004d50:	2b70      	cmp	r3, #112	; 0x70
 8004d52:	d812      	bhi.n	8004d7a <HAL_TIM_ConfigClockSource+0x7a>
 8004d54:	2b30      	cmp	r3, #48	; 0x30
 8004d56:	f000 8084 	beq.w	8004e62 <HAL_TIM_ConfigClockSource+0x162>
 8004d5a:	2b30      	cmp	r3, #48	; 0x30
 8004d5c:	d806      	bhi.n	8004d6c <HAL_TIM_ConfigClockSource+0x6c>
 8004d5e:	2b10      	cmp	r3, #16
 8004d60:	d07f      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x162>
 8004d62:	2b20      	cmp	r3, #32
 8004d64:	d07d      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x162>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d07b      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004d6a:	e084      	b.n	8004e76 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8004d6c:	2b50      	cmp	r3, #80	; 0x50
 8004d6e:	d048      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x102>
 8004d70:	2b60      	cmp	r3, #96	; 0x60
 8004d72:	d056      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0x122>
 8004d74:	2b40      	cmp	r3, #64	; 0x40
 8004d76:	d064      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8004d78:	e07d      	b.n	8004e76 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8004d7a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004d7e:	d070      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x162>
 8004d80:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004d84:	d809      	bhi.n	8004d9a <HAL_TIM_ConfigClockSource+0x9a>
 8004d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d8a:	d027      	beq.n	8004ddc <HAL_TIM_ConfigClockSource+0xdc>
 8004d8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d90:	d067      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x162>
 8004d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d96:	d06d      	beq.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d98:	e06d      	b.n	8004e76 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8004d9a:	4a3e      	ldr	r2, [pc, #248]	; (8004e94 <HAL_TIM_ConfigClockSource+0x194>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d060      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x162>
 8004da0:	4a3d      	ldr	r2, [pc, #244]	; (8004e98 <HAL_TIM_ConfigClockSource+0x198>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d05d      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x162>
 8004da6:	4a3d      	ldr	r2, [pc, #244]	; (8004e9c <HAL_TIM_ConfigClockSource+0x19c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d05a      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8004dac:	e063      	b.n	8004e76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6818      	ldr	r0, [r3, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	6899      	ldr	r1, [r3, #8]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f000 f987 	bl	80050d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dd0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	609a      	str	r2, [r3, #8]
      break;
 8004dda:	e04c      	b.n	8004e76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	6899      	ldr	r1, [r3, #8]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f000 f970 	bl	80050d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dfe:	609a      	str	r2, [r3, #8]
      break;
 8004e00:	e039      	b.n	8004e76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6859      	ldr	r1, [r3, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f000 f8e0 	bl	8004fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2150      	movs	r1, #80	; 0x50
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 f93a 	bl	8005094 <TIM_ITRx_SetConfig>
      break;
 8004e20:	e029      	b.n	8004e76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	6859      	ldr	r1, [r3, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f000 f8ff 	bl	8005032 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2160      	movs	r1, #96	; 0x60
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 f92a 	bl	8005094 <TIM_ITRx_SetConfig>
      break;
 8004e40:	e019      	b.n	8004e76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6818      	ldr	r0, [r3, #0]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6859      	ldr	r1, [r3, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f000 f8c0 	bl	8004fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2140      	movs	r1, #64	; 0x40
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 f91a 	bl	8005094 <TIM_ITRx_SetConfig>
      break;
 8004e60:	e009      	b.n	8004e76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	f000 f911 	bl	8005094 <TIM_ITRx_SetConfig>
      break;
 8004e72:	e000      	b.n	8004e76 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004e74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	ffceff88 	.word	0xffceff88
 8004e94:	00100030 	.word	0x00100030
 8004e98:	00100040 	.word	0x00100040
 8004e9c:	00100020 	.word	0x00100020

08004ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a40      	ldr	r2, [pc, #256]	; (8004fb4 <TIM_Base_SetConfig+0x114>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d013      	beq.n	8004ee0 <TIM_Base_SetConfig+0x40>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebe:	d00f      	beq.n	8004ee0 <TIM_Base_SetConfig+0x40>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a3d      	ldr	r2, [pc, #244]	; (8004fb8 <TIM_Base_SetConfig+0x118>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d00b      	beq.n	8004ee0 <TIM_Base_SetConfig+0x40>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a3c      	ldr	r2, [pc, #240]	; (8004fbc <TIM_Base_SetConfig+0x11c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d007      	beq.n	8004ee0 <TIM_Base_SetConfig+0x40>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a3b      	ldr	r2, [pc, #236]	; (8004fc0 <TIM_Base_SetConfig+0x120>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d003      	beq.n	8004ee0 <TIM_Base_SetConfig+0x40>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a3a      	ldr	r2, [pc, #232]	; (8004fc4 <TIM_Base_SetConfig+0x124>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d108      	bne.n	8004ef2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a2f      	ldr	r2, [pc, #188]	; (8004fb4 <TIM_Base_SetConfig+0x114>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d01f      	beq.n	8004f3a <TIM_Base_SetConfig+0x9a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f00:	d01b      	beq.n	8004f3a <TIM_Base_SetConfig+0x9a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a2c      	ldr	r2, [pc, #176]	; (8004fb8 <TIM_Base_SetConfig+0x118>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d017      	beq.n	8004f3a <TIM_Base_SetConfig+0x9a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a2b      	ldr	r2, [pc, #172]	; (8004fbc <TIM_Base_SetConfig+0x11c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d013      	beq.n	8004f3a <TIM_Base_SetConfig+0x9a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a2a      	ldr	r2, [pc, #168]	; (8004fc0 <TIM_Base_SetConfig+0x120>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00f      	beq.n	8004f3a <TIM_Base_SetConfig+0x9a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a29      	ldr	r2, [pc, #164]	; (8004fc4 <TIM_Base_SetConfig+0x124>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00b      	beq.n	8004f3a <TIM_Base_SetConfig+0x9a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a28      	ldr	r2, [pc, #160]	; (8004fc8 <TIM_Base_SetConfig+0x128>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d007      	beq.n	8004f3a <TIM_Base_SetConfig+0x9a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a27      	ldr	r2, [pc, #156]	; (8004fcc <TIM_Base_SetConfig+0x12c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d003      	beq.n	8004f3a <TIM_Base_SetConfig+0x9a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a26      	ldr	r2, [pc, #152]	; (8004fd0 <TIM_Base_SetConfig+0x130>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d108      	bne.n	8004f4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a10      	ldr	r2, [pc, #64]	; (8004fb4 <TIM_Base_SetConfig+0x114>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00f      	beq.n	8004f98 <TIM_Base_SetConfig+0xf8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a12      	ldr	r2, [pc, #72]	; (8004fc4 <TIM_Base_SetConfig+0x124>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00b      	beq.n	8004f98 <TIM_Base_SetConfig+0xf8>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a11      	ldr	r2, [pc, #68]	; (8004fc8 <TIM_Base_SetConfig+0x128>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d007      	beq.n	8004f98 <TIM_Base_SetConfig+0xf8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a10      	ldr	r2, [pc, #64]	; (8004fcc <TIM_Base_SetConfig+0x12c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d003      	beq.n	8004f98 <TIM_Base_SetConfig+0xf8>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a0f      	ldr	r2, [pc, #60]	; (8004fd0 <TIM_Base_SetConfig+0x130>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d103      	bne.n	8004fa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	615a      	str	r2, [r3, #20]
}
 8004fa6:	bf00      	nop
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40010000 	.word	0x40010000
 8004fb8:	40000400 	.word	0x40000400
 8004fbc:	40000800 	.word	0x40000800
 8004fc0:	40000c00 	.word	0x40000c00
 8004fc4:	40010400 	.word	0x40010400
 8004fc8:	40014000 	.word	0x40014000
 8004fcc:	40014400 	.word	0x40014400
 8004fd0:	40014800 	.word	0x40014800

08004fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	f023 0201 	bic.w	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f023 030a 	bic.w	r3, r3, #10
 8005010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	621a      	str	r2, [r3, #32]
}
 8005026:	bf00      	nop
 8005028:	371c      	adds	r7, #28
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005032:	b480      	push	{r7}
 8005034:	b087      	sub	sp, #28
 8005036:	af00      	add	r7, sp, #0
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	f023 0210 	bic.w	r2, r3, #16
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800505c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	031b      	lsls	r3, r3, #12
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800506e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	621a      	str	r2, [r3, #32]
}
 8005086:	bf00      	nop
 8005088:	371c      	adds	r7, #28
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4b09      	ldr	r3, [pc, #36]	; (80050cc <TIM_ITRx_SetConfig+0x38>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f043 0307 	orr.w	r3, r3, #7
 80050b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	609a      	str	r2, [r3, #8]
}
 80050be:	bf00      	nop
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	ffcfff8f 	.word	0xffcfff8f

080050d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	021a      	lsls	r2, r3, #8
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	431a      	orrs	r2, r3
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	609a      	str	r2, [r3, #8]
}
 8005104:	bf00      	nop
 8005106:	371c      	adds	r7, #28
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005124:	2302      	movs	r3, #2
 8005126:	e068      	b.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a2e      	ldr	r2, [pc, #184]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d004      	beq.n	800515c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a2d      	ldr	r2, [pc, #180]	; (800520c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d108      	bne.n	800516e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005162:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005174:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	4313      	orrs	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1e      	ldr	r2, [pc, #120]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d01d      	beq.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519a:	d018      	beq.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1b      	ldr	r2, [pc, #108]	; (8005210 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d013      	beq.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1a      	ldr	r2, [pc, #104]	; (8005214 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d00e      	beq.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a18      	ldr	r2, [pc, #96]	; (8005218 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d009      	beq.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a13      	ldr	r2, [pc, #76]	; (800520c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d004      	beq.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a14      	ldr	r2, [pc, #80]	; (800521c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d10c      	bne.n	80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40010000 	.word	0x40010000
 800520c:	40010400 	.word	0x40010400
 8005210:	40000400 	.word	0x40000400
 8005214:	40000800 	.word	0x40000800
 8005218:	40000c00 	.word	0x40000c00
 800521c:	40001800 	.word	0x40001800

08005220 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e042      	b.n	80052b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005238:	2b00      	cmp	r3, #0
 800523a:	d106      	bne.n	800524a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7fc fb5f 	bl	8001908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2224      	movs	r2, #36	; 0x24
 800524e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0201 	bic.w	r2, r2, #1
 8005260:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fb12 	bl	800588c <UART_SetConfig>
 8005268:	4603      	mov	r3, r0
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e022      	b.n	80052b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f001 f8b6 	bl	80063ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800528e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800529e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f001 f93d 	bl	8006530 <UART_CheckIdleState>
 80052b6:	4603      	mov	r3, r0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	4613      	mov	r3, r2
 80052cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	d168      	bne.n	80053aa <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <HAL_UART_Transmit_IT+0x24>
 80052de:	88fb      	ldrh	r3, [r7, #6]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e061      	b.n	80053ac <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <HAL_UART_Transmit_IT+0x36>
 80052f2:	2302      	movs	r3, #2
 80052f4:	e05a      	b.n	80053ac <HAL_UART_Transmit_IT+0xec>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	88fa      	ldrh	r2, [r7, #6]
 8005308:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	88fa      	ldrh	r2, [r7, #6]
 8005310:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2221      	movs	r2, #33	; 0x21
 8005326:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800532e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005332:	d11c      	bne.n	800536e <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533c:	d107      	bne.n	800534e <HAL_UART_Transmit_IT+0x8e>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d103      	bne.n	800534e <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4a1b      	ldr	r2, [pc, #108]	; (80053b8 <HAL_UART_Transmit_IT+0xf8>)
 800534a:	671a      	str	r2, [r3, #112]	; 0x70
 800534c:	e002      	b.n	8005354 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	4a1a      	ldr	r2, [pc, #104]	; (80053bc <HAL_UART_Transmit_IT+0xfc>)
 8005352:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800536a:	609a      	str	r2, [r3, #8]
 800536c:	e01b      	b.n	80053a6 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005376:	d107      	bne.n	8005388 <HAL_UART_Transmit_IT+0xc8>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d103      	bne.n	8005388 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4a0f      	ldr	r2, [pc, #60]	; (80053c0 <HAL_UART_Transmit_IT+0x100>)
 8005384:	671a      	str	r2, [r3, #112]	; 0x70
 8005386:	e002      	b.n	800538e <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4a0e      	ldr	r2, [pc, #56]	; (80053c4 <HAL_UART_Transmit_IT+0x104>)
 800538c:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053a4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	e000      	b.n	80053ac <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 80053aa:	2302      	movs	r3, #2
  }
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	080068c1 	.word	0x080068c1
 80053bc:	08006827 	.word	0x08006827
 80053c0:	080067a9 	.word	0x080067a9
 80053c4:	08006735 	.word	0x08006735

080053c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	4613      	mov	r3, r2
 80053d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053dc:	2b20      	cmp	r3, #32
 80053de:	f040 80bc 	bne.w	800555a <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <HAL_UART_Receive_IT+0x26>
 80053e8:	88fb      	ldrh	r3, [r7, #6]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e0b4      	b.n	800555c <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_UART_Receive_IT+0x38>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e0ad      	b.n	800555c <HAL_UART_Receive_IT+0x194>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	88fa      	ldrh	r2, [r7, #6]
 8005412:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	88fa      	ldrh	r2, [r7, #6]
 800541a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542c:	d10e      	bne.n	800544c <HAL_UART_Receive_IT+0x84>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d105      	bne.n	8005442 <HAL_UART_Receive_IT+0x7a>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f240 12ff 	movw	r2, #511	; 0x1ff
 800543c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005440:	e02d      	b.n	800549e <HAL_UART_Receive_IT+0xd6>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	22ff      	movs	r2, #255	; 0xff
 8005446:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800544a:	e028      	b.n	800549e <HAL_UART_Receive_IT+0xd6>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10d      	bne.n	8005470 <HAL_UART_Receive_IT+0xa8>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d104      	bne.n	8005466 <HAL_UART_Receive_IT+0x9e>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	22ff      	movs	r2, #255	; 0xff
 8005460:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005464:	e01b      	b.n	800549e <HAL_UART_Receive_IT+0xd6>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	227f      	movs	r2, #127	; 0x7f
 800546a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800546e:	e016      	b.n	800549e <HAL_UART_Receive_IT+0xd6>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005478:	d10d      	bne.n	8005496 <HAL_UART_Receive_IT+0xce>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d104      	bne.n	800548c <HAL_UART_Receive_IT+0xc4>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	227f      	movs	r2, #127	; 0x7f
 8005486:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800548a:	e008      	b.n	800549e <HAL_UART_Receive_IT+0xd6>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	223f      	movs	r2, #63	; 0x3f
 8005490:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005494:	e003      	b.n	800549e <HAL_UART_Receive_IT+0xd6>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2222      	movs	r2, #34	; 0x22
 80054aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f042 0201 	orr.w	r2, r2, #1
 80054bc:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054c6:	d12a      	bne.n	800551e <HAL_UART_Receive_IT+0x156>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80054ce:	88fa      	ldrh	r2, [r7, #6]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d324      	bcc.n	800551e <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054dc:	d107      	bne.n	80054ee <HAL_UART_Receive_IT+0x126>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d103      	bne.n	80054ee <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4a1f      	ldr	r2, [pc, #124]	; (8005568 <HAL_UART_Receive_IT+0x1a0>)
 80054ea:	66da      	str	r2, [r3, #108]	; 0x6c
 80054ec:	e002      	b.n	80054f4 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4a1e      	ldr	r2, [pc, #120]	; (800556c <HAL_UART_Receive_IT+0x1a4>)
 80054f2:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800550a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800551a:	609a      	str	r2, [r3, #8]
 800551c:	e01b      	b.n	8005556 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005526:	d107      	bne.n	8005538 <HAL_UART_Receive_IT+0x170>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d103      	bne.n	8005538 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4a0f      	ldr	r2, [pc, #60]	; (8005570 <HAL_UART_Receive_IT+0x1a8>)
 8005534:	66da      	str	r2, [r3, #108]	; 0x6c
 8005536:	e002      	b.n	800553e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4a0e      	ldr	r2, [pc, #56]	; (8005574 <HAL_UART_Receive_IT+0x1ac>)
 800553c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005554:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	e000      	b.n	800555c <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800555a:	2302      	movs	r3, #2
  }
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	08006bf5 	.word	0x08006bf5
 800556c:	08006aed 	.word	0x08006aed
 8005570:	08006a43 	.word	0x08006a43
 8005574:	08006999 	.word	0x08006999

08005578 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b088      	sub	sp, #32
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	f640 030f 	movw	r3, #2063	; 0x80f
 800559e:	4013      	ands	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d118      	bne.n	80055da <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d013      	beq.n	80055da <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	f003 0320 	and.w	r3, r3, #32
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d104      	bne.n	80055c6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 8145 	beq.w	800585a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	4798      	blx	r3
      }
      return;
 80055d8:	e13f      	b.n	800585a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80e8 	beq.w	80057b2 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	4ba1      	ldr	r3, [pc, #644]	; (800586c <HAL_UART_IRQHandler+0x2f4>)
 80055e6:	4013      	ands	r3, r2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d105      	bne.n	80055f8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4ba0      	ldr	r3, [pc, #640]	; (8005870 <HAL_UART_IRQHandler+0x2f8>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 80dd 	beq.w	80057b2 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d010      	beq.n	8005624 <HAL_UART_IRQHandler+0xac>
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00b      	beq.n	8005624 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2201      	movs	r2, #1
 8005612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561a:	f043 0201 	orr.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d010      	beq.n	8005650 <HAL_UART_IRQHandler+0xd8>
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00b      	beq.n	8005650 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2202      	movs	r2, #2
 800563e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005646:	f043 0204 	orr.w	r2, r3, #4
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b00      	cmp	r3, #0
 8005658:	d010      	beq.n	800567c <HAL_UART_IRQHandler+0x104>
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00b      	beq.n	800567c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2204      	movs	r2, #4
 800566a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005672:	f043 0202 	orr.w	r2, r3, #2
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b00      	cmp	r3, #0
 8005684:	d015      	beq.n	80056b2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b00      	cmp	r3, #0
 800568e:	d104      	bne.n	800569a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4b76      	ldr	r3, [pc, #472]	; (800586c <HAL_UART_IRQHandler+0x2f4>)
 8005694:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00b      	beq.n	80056b2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2208      	movs	r2, #8
 80056a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a8:	f043 0208 	orr.w	r2, r3, #8
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d011      	beq.n	80056e0 <HAL_UART_IRQHandler+0x168>
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00c      	beq.n	80056e0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d6:	f043 0220 	orr.w	r2, r3, #32
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 80b9 	beq.w	800585e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d011      	beq.n	800571a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d104      	bne.n	800570a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d007      	beq.n	800571a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005720:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572c:	2b40      	cmp	r3, #64	; 0x40
 800572e:	d004      	beq.n	800573a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005736:	2b00      	cmp	r3, #0
 8005738:	d031      	beq.n	800579e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 ffc0 	bl	80066c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574a:	2b40      	cmp	r3, #64	; 0x40
 800574c:	d123      	bne.n	8005796 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800575c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005762:	2b00      	cmp	r3, #0
 8005764:	d013      	beq.n	800578e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800576a:	4a42      	ldr	r2, [pc, #264]	; (8005874 <HAL_UART_IRQHandler+0x2fc>)
 800576c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005772:	4618      	mov	r0, r3
 8005774:	f7fc fb14 	bl	8001da0 <HAL_DMA_Abort_IT>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d017      	beq.n	80057ae <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005788:	4610      	mov	r0, r2
 800578a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800578c:	e00f      	b.n	80057ae <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f872 	bl	8005878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005794:	e00b      	b.n	80057ae <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f86e 	bl	8005878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800579c:	e007      	b.n	80057ae <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f86a 	bl	8005878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80057ac:	e057      	b.n	800585e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ae:	bf00      	nop
    return;
 80057b0:	e055      	b.n	800585e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00d      	beq.n	80057d8 <HAL_UART_IRQHandler+0x260>
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d008      	beq.n	80057d8 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80057ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f001 fa93 	bl	8006cfc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057d6:	e045      	b.n	8005864 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d012      	beq.n	8005808 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d104      	bne.n	80057f6 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d008      	beq.n	8005808 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d031      	beq.n	8005862 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	4798      	blx	r3
    }
    return;
 8005806:	e02c      	b.n	8005862 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580e:	2b00      	cmp	r3, #0
 8005810:	d008      	beq.n	8005824 <HAL_UART_IRQHandler+0x2ac>
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f001 f8a1 	bl	8006964 <UART_EndTransmit_IT>
    return;
 8005822:	e01f      	b.n	8005864 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d008      	beq.n	8005840 <HAL_UART_IRQHandler+0x2c8>
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f001 fa73 	bl	8006d24 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800583e:	e011      	b.n	8005864 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00c      	beq.n	8005864 <HAL_UART_IRQHandler+0x2ec>
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	2b00      	cmp	r3, #0
 800584e:	da09      	bge.n	8005864 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f001 fa5d 	bl	8006d10 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005856:	bf00      	nop
 8005858:	e004      	b.n	8005864 <HAL_UART_IRQHandler+0x2ec>
      return;
 800585a:	bf00      	nop
 800585c:	e002      	b.n	8005864 <HAL_UART_IRQHandler+0x2ec>
    return;
 800585e:	bf00      	nop
 8005860:	e000      	b.n	8005864 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005862:	bf00      	nop
  }
}
 8005864:	3720      	adds	r7, #32
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	10000001 	.word	0x10000001
 8005870:	04000120 	.word	0x04000120
 8005874:	08006709 	.word	0x08006709

08005878 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800588c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005890:	b08e      	sub	sp, #56	; 0x38
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058ba:	4313      	orrs	r3, r2
 80058bc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	4bc1      	ldr	r3, [pc, #772]	; (8005bcc <UART_SetConfig+0x340>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80058ce:	430b      	orrs	r3, r1
 80058d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68da      	ldr	r2, [r3, #12]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4ab7      	ldr	r2, [pc, #732]	; (8005bd0 <UART_SetConfig+0x344>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d004      	beq.n	8005902 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058fe:	4313      	orrs	r3, r2
 8005900:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	4bb2      	ldr	r3, [pc, #712]	; (8005bd4 <UART_SetConfig+0x348>)
 800590a:	4013      	ands	r3, r2
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005912:	430b      	orrs	r3, r1
 8005914:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	f023 010f 	bic.w	r1, r3, #15
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4aa9      	ldr	r2, [pc, #676]	; (8005bd8 <UART_SetConfig+0x34c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d177      	bne.n	8005a26 <UART_SetConfig+0x19a>
 8005936:	4ba9      	ldr	r3, [pc, #676]	; (8005bdc <UART_SetConfig+0x350>)
 8005938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800593e:	2b28      	cmp	r3, #40	; 0x28
 8005940:	d86c      	bhi.n	8005a1c <UART_SetConfig+0x190>
 8005942:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <UART_SetConfig+0xbc>)
 8005944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005948:	080059ed 	.word	0x080059ed
 800594c:	08005a1d 	.word	0x08005a1d
 8005950:	08005a1d 	.word	0x08005a1d
 8005954:	08005a1d 	.word	0x08005a1d
 8005958:	08005a1d 	.word	0x08005a1d
 800595c:	08005a1d 	.word	0x08005a1d
 8005960:	08005a1d 	.word	0x08005a1d
 8005964:	08005a1d 	.word	0x08005a1d
 8005968:	080059f5 	.word	0x080059f5
 800596c:	08005a1d 	.word	0x08005a1d
 8005970:	08005a1d 	.word	0x08005a1d
 8005974:	08005a1d 	.word	0x08005a1d
 8005978:	08005a1d 	.word	0x08005a1d
 800597c:	08005a1d 	.word	0x08005a1d
 8005980:	08005a1d 	.word	0x08005a1d
 8005984:	08005a1d 	.word	0x08005a1d
 8005988:	080059fd 	.word	0x080059fd
 800598c:	08005a1d 	.word	0x08005a1d
 8005990:	08005a1d 	.word	0x08005a1d
 8005994:	08005a1d 	.word	0x08005a1d
 8005998:	08005a1d 	.word	0x08005a1d
 800599c:	08005a1d 	.word	0x08005a1d
 80059a0:	08005a1d 	.word	0x08005a1d
 80059a4:	08005a1d 	.word	0x08005a1d
 80059a8:	08005a05 	.word	0x08005a05
 80059ac:	08005a1d 	.word	0x08005a1d
 80059b0:	08005a1d 	.word	0x08005a1d
 80059b4:	08005a1d 	.word	0x08005a1d
 80059b8:	08005a1d 	.word	0x08005a1d
 80059bc:	08005a1d 	.word	0x08005a1d
 80059c0:	08005a1d 	.word	0x08005a1d
 80059c4:	08005a1d 	.word	0x08005a1d
 80059c8:	08005a0d 	.word	0x08005a0d
 80059cc:	08005a1d 	.word	0x08005a1d
 80059d0:	08005a1d 	.word	0x08005a1d
 80059d4:	08005a1d 	.word	0x08005a1d
 80059d8:	08005a1d 	.word	0x08005a1d
 80059dc:	08005a1d 	.word	0x08005a1d
 80059e0:	08005a1d 	.word	0x08005a1d
 80059e4:	08005a1d 	.word	0x08005a1d
 80059e8:	08005a15 	.word	0x08005a15
 80059ec:	2301      	movs	r3, #1
 80059ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059f2:	e233      	b.n	8005e5c <UART_SetConfig+0x5d0>
 80059f4:	2304      	movs	r3, #4
 80059f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059fa:	e22f      	b.n	8005e5c <UART_SetConfig+0x5d0>
 80059fc:	2308      	movs	r3, #8
 80059fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a02:	e22b      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005a04:	2310      	movs	r3, #16
 8005a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a0a:	e227      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005a0c:	2320      	movs	r3, #32
 8005a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a12:	e223      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005a14:	2340      	movs	r3, #64	; 0x40
 8005a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a1a:	e21f      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005a1c:	2380      	movs	r3, #128	; 0x80
 8005a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a22:	bf00      	nop
 8005a24:	e21a      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a6d      	ldr	r2, [pc, #436]	; (8005be0 <UART_SetConfig+0x354>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d132      	bne.n	8005a96 <UART_SetConfig+0x20a>
 8005a30:	4b6a      	ldr	r3, [pc, #424]	; (8005bdc <UART_SetConfig+0x350>)
 8005a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	2b05      	cmp	r3, #5
 8005a3a:	d827      	bhi.n	8005a8c <UART_SetConfig+0x200>
 8005a3c:	a201      	add	r2, pc, #4	; (adr r2, 8005a44 <UART_SetConfig+0x1b8>)
 8005a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a42:	bf00      	nop
 8005a44:	08005a5d 	.word	0x08005a5d
 8005a48:	08005a65 	.word	0x08005a65
 8005a4c:	08005a6d 	.word	0x08005a6d
 8005a50:	08005a75 	.word	0x08005a75
 8005a54:	08005a7d 	.word	0x08005a7d
 8005a58:	08005a85 	.word	0x08005a85
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a62:	e1fb      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005a64:	2304      	movs	r3, #4
 8005a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a6a:	e1f7      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005a6c:	2308      	movs	r3, #8
 8005a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a72:	e1f3      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005a74:	2310      	movs	r3, #16
 8005a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a7a:	e1ef      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005a7c:	2320      	movs	r3, #32
 8005a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a82:	e1eb      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005a84:	2340      	movs	r3, #64	; 0x40
 8005a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a8a:	e1e7      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005a8c:	2380      	movs	r3, #128	; 0x80
 8005a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a92:	bf00      	nop
 8005a94:	e1e2      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a52      	ldr	r2, [pc, #328]	; (8005be4 <UART_SetConfig+0x358>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d132      	bne.n	8005b06 <UART_SetConfig+0x27a>
 8005aa0:	4b4e      	ldr	r3, [pc, #312]	; (8005bdc <UART_SetConfig+0x350>)
 8005aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	2b05      	cmp	r3, #5
 8005aaa:	d827      	bhi.n	8005afc <UART_SetConfig+0x270>
 8005aac:	a201      	add	r2, pc, #4	; (adr r2, 8005ab4 <UART_SetConfig+0x228>)
 8005aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab2:	bf00      	nop
 8005ab4:	08005acd 	.word	0x08005acd
 8005ab8:	08005ad5 	.word	0x08005ad5
 8005abc:	08005add 	.word	0x08005add
 8005ac0:	08005ae5 	.word	0x08005ae5
 8005ac4:	08005aed 	.word	0x08005aed
 8005ac8:	08005af5 	.word	0x08005af5
 8005acc:	2300      	movs	r3, #0
 8005ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ad2:	e1c3      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005ad4:	2304      	movs	r3, #4
 8005ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ada:	e1bf      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005adc:	2308      	movs	r3, #8
 8005ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ae2:	e1bb      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aea:	e1b7      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005aec:	2320      	movs	r3, #32
 8005aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005af2:	e1b3      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005af4:	2340      	movs	r3, #64	; 0x40
 8005af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005afa:	e1af      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005afc:	2380      	movs	r3, #128	; 0x80
 8005afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b02:	bf00      	nop
 8005b04:	e1aa      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a37      	ldr	r2, [pc, #220]	; (8005be8 <UART_SetConfig+0x35c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d132      	bne.n	8005b76 <UART_SetConfig+0x2ea>
 8005b10:	4b32      	ldr	r3, [pc, #200]	; (8005bdc <UART_SetConfig+0x350>)
 8005b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b14:	f003 0307 	and.w	r3, r3, #7
 8005b18:	2b05      	cmp	r3, #5
 8005b1a:	d827      	bhi.n	8005b6c <UART_SetConfig+0x2e0>
 8005b1c:	a201      	add	r2, pc, #4	; (adr r2, 8005b24 <UART_SetConfig+0x298>)
 8005b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b22:	bf00      	nop
 8005b24:	08005b3d 	.word	0x08005b3d
 8005b28:	08005b45 	.word	0x08005b45
 8005b2c:	08005b4d 	.word	0x08005b4d
 8005b30:	08005b55 	.word	0x08005b55
 8005b34:	08005b5d 	.word	0x08005b5d
 8005b38:	08005b65 	.word	0x08005b65
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b42:	e18b      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005b44:	2304      	movs	r3, #4
 8005b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4a:	e187      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005b4c:	2308      	movs	r3, #8
 8005b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b52:	e183      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005b54:	2310      	movs	r3, #16
 8005b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b5a:	e17f      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005b5c:	2320      	movs	r3, #32
 8005b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b62:	e17b      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005b64:	2340      	movs	r3, #64	; 0x40
 8005b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b6a:	e177      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005b6c:	2380      	movs	r3, #128	; 0x80
 8005b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b72:	bf00      	nop
 8005b74:	e172      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a1c      	ldr	r2, [pc, #112]	; (8005bec <UART_SetConfig+0x360>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d144      	bne.n	8005c0a <UART_SetConfig+0x37e>
 8005b80:	4b16      	ldr	r3, [pc, #88]	; (8005bdc <UART_SetConfig+0x350>)
 8005b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	2b05      	cmp	r3, #5
 8005b8a:	d839      	bhi.n	8005c00 <UART_SetConfig+0x374>
 8005b8c:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <UART_SetConfig+0x308>)
 8005b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b92:	bf00      	nop
 8005b94:	08005bad 	.word	0x08005bad
 8005b98:	08005bb5 	.word	0x08005bb5
 8005b9c:	08005bbd 	.word	0x08005bbd
 8005ba0:	08005bc5 	.word	0x08005bc5
 8005ba4:	08005bf1 	.word	0x08005bf1
 8005ba8:	08005bf9 	.word	0x08005bf9
 8005bac:	2300      	movs	r3, #0
 8005bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bb2:	e153      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005bb4:	2304      	movs	r3, #4
 8005bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bba:	e14f      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005bbc:	2308      	movs	r3, #8
 8005bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bc2:	e14b      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bca:	e147      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005bcc:	cfff69f3 	.word	0xcfff69f3
 8005bd0:	58000c00 	.word	0x58000c00
 8005bd4:	11fff4ff 	.word	0x11fff4ff
 8005bd8:	40011000 	.word	0x40011000
 8005bdc:	58024400 	.word	0x58024400
 8005be0:	40004400 	.word	0x40004400
 8005be4:	40004800 	.word	0x40004800
 8005be8:	40004c00 	.word	0x40004c00
 8005bec:	40005000 	.word	0x40005000
 8005bf0:	2320      	movs	r3, #32
 8005bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bf6:	e131      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005bf8:	2340      	movs	r3, #64	; 0x40
 8005bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bfe:	e12d      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005c00:	2380      	movs	r3, #128	; 0x80
 8005c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c06:	bf00      	nop
 8005c08:	e128      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4ab6      	ldr	r2, [pc, #728]	; (8005ee8 <UART_SetConfig+0x65c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d178      	bne.n	8005d06 <UART_SetConfig+0x47a>
 8005c14:	4bb5      	ldr	r3, [pc, #724]	; (8005eec <UART_SetConfig+0x660>)
 8005c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c1c:	2b28      	cmp	r3, #40	; 0x28
 8005c1e:	d86d      	bhi.n	8005cfc <UART_SetConfig+0x470>
 8005c20:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <UART_SetConfig+0x39c>)
 8005c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c26:	bf00      	nop
 8005c28:	08005ccd 	.word	0x08005ccd
 8005c2c:	08005cfd 	.word	0x08005cfd
 8005c30:	08005cfd 	.word	0x08005cfd
 8005c34:	08005cfd 	.word	0x08005cfd
 8005c38:	08005cfd 	.word	0x08005cfd
 8005c3c:	08005cfd 	.word	0x08005cfd
 8005c40:	08005cfd 	.word	0x08005cfd
 8005c44:	08005cfd 	.word	0x08005cfd
 8005c48:	08005cd5 	.word	0x08005cd5
 8005c4c:	08005cfd 	.word	0x08005cfd
 8005c50:	08005cfd 	.word	0x08005cfd
 8005c54:	08005cfd 	.word	0x08005cfd
 8005c58:	08005cfd 	.word	0x08005cfd
 8005c5c:	08005cfd 	.word	0x08005cfd
 8005c60:	08005cfd 	.word	0x08005cfd
 8005c64:	08005cfd 	.word	0x08005cfd
 8005c68:	08005cdd 	.word	0x08005cdd
 8005c6c:	08005cfd 	.word	0x08005cfd
 8005c70:	08005cfd 	.word	0x08005cfd
 8005c74:	08005cfd 	.word	0x08005cfd
 8005c78:	08005cfd 	.word	0x08005cfd
 8005c7c:	08005cfd 	.word	0x08005cfd
 8005c80:	08005cfd 	.word	0x08005cfd
 8005c84:	08005cfd 	.word	0x08005cfd
 8005c88:	08005ce5 	.word	0x08005ce5
 8005c8c:	08005cfd 	.word	0x08005cfd
 8005c90:	08005cfd 	.word	0x08005cfd
 8005c94:	08005cfd 	.word	0x08005cfd
 8005c98:	08005cfd 	.word	0x08005cfd
 8005c9c:	08005cfd 	.word	0x08005cfd
 8005ca0:	08005cfd 	.word	0x08005cfd
 8005ca4:	08005cfd 	.word	0x08005cfd
 8005ca8:	08005ced 	.word	0x08005ced
 8005cac:	08005cfd 	.word	0x08005cfd
 8005cb0:	08005cfd 	.word	0x08005cfd
 8005cb4:	08005cfd 	.word	0x08005cfd
 8005cb8:	08005cfd 	.word	0x08005cfd
 8005cbc:	08005cfd 	.word	0x08005cfd
 8005cc0:	08005cfd 	.word	0x08005cfd
 8005cc4:	08005cfd 	.word	0x08005cfd
 8005cc8:	08005cf5 	.word	0x08005cf5
 8005ccc:	2301      	movs	r3, #1
 8005cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cd2:	e0c3      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cda:	e0bf      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005cdc:	2308      	movs	r3, #8
 8005cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ce2:	e0bb      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005ce4:	2310      	movs	r3, #16
 8005ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cea:	e0b7      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005cec:	2320      	movs	r3, #32
 8005cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cf2:	e0b3      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005cf4:	2340      	movs	r3, #64	; 0x40
 8005cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cfa:	e0af      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005cfc:	2380      	movs	r3, #128	; 0x80
 8005cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d02:	bf00      	nop
 8005d04:	e0aa      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a79      	ldr	r2, [pc, #484]	; (8005ef0 <UART_SetConfig+0x664>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d132      	bne.n	8005d76 <UART_SetConfig+0x4ea>
 8005d10:	4b76      	ldr	r3, [pc, #472]	; (8005eec <UART_SetConfig+0x660>)
 8005d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	2b05      	cmp	r3, #5
 8005d1a:	d827      	bhi.n	8005d6c <UART_SetConfig+0x4e0>
 8005d1c:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <UART_SetConfig+0x498>)
 8005d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d22:	bf00      	nop
 8005d24:	08005d3d 	.word	0x08005d3d
 8005d28:	08005d45 	.word	0x08005d45
 8005d2c:	08005d4d 	.word	0x08005d4d
 8005d30:	08005d55 	.word	0x08005d55
 8005d34:	08005d5d 	.word	0x08005d5d
 8005d38:	08005d65 	.word	0x08005d65
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d42:	e08b      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005d44:	2304      	movs	r3, #4
 8005d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d4a:	e087      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005d4c:	2308      	movs	r3, #8
 8005d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d52:	e083      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005d54:	2310      	movs	r3, #16
 8005d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d5a:	e07f      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005d5c:	2320      	movs	r3, #32
 8005d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d62:	e07b      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005d64:	2340      	movs	r3, #64	; 0x40
 8005d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d6a:	e077      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005d6c:	2380      	movs	r3, #128	; 0x80
 8005d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d72:	bf00      	nop
 8005d74:	e072      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a5e      	ldr	r2, [pc, #376]	; (8005ef4 <UART_SetConfig+0x668>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d132      	bne.n	8005de6 <UART_SetConfig+0x55a>
 8005d80:	4b5a      	ldr	r3, [pc, #360]	; (8005eec <UART_SetConfig+0x660>)
 8005d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d84:	f003 0307 	and.w	r3, r3, #7
 8005d88:	2b05      	cmp	r3, #5
 8005d8a:	d827      	bhi.n	8005ddc <UART_SetConfig+0x550>
 8005d8c:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <UART_SetConfig+0x508>)
 8005d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d92:	bf00      	nop
 8005d94:	08005dad 	.word	0x08005dad
 8005d98:	08005db5 	.word	0x08005db5
 8005d9c:	08005dbd 	.word	0x08005dbd
 8005da0:	08005dc5 	.word	0x08005dc5
 8005da4:	08005dcd 	.word	0x08005dcd
 8005da8:	08005dd5 	.word	0x08005dd5
 8005dac:	2300      	movs	r3, #0
 8005dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005db2:	e053      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005db4:	2304      	movs	r3, #4
 8005db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dba:	e04f      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005dbc:	2308      	movs	r3, #8
 8005dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dc2:	e04b      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005dc4:	2310      	movs	r3, #16
 8005dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dca:	e047      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005dcc:	2320      	movs	r3, #32
 8005dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dd2:	e043      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005dd4:	2340      	movs	r3, #64	; 0x40
 8005dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dda:	e03f      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005ddc:	2380      	movs	r3, #128	; 0x80
 8005dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005de2:	bf00      	nop
 8005de4:	e03a      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a43      	ldr	r2, [pc, #268]	; (8005ef8 <UART_SetConfig+0x66c>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d132      	bne.n	8005e56 <UART_SetConfig+0x5ca>
 8005df0:	4b3e      	ldr	r3, [pc, #248]	; (8005eec <UART_SetConfig+0x660>)
 8005df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	2b05      	cmp	r3, #5
 8005dfa:	d827      	bhi.n	8005e4c <UART_SetConfig+0x5c0>
 8005dfc:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <UART_SetConfig+0x578>)
 8005dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e02:	bf00      	nop
 8005e04:	08005e1d 	.word	0x08005e1d
 8005e08:	08005e25 	.word	0x08005e25
 8005e0c:	08005e2d 	.word	0x08005e2d
 8005e10:	08005e35 	.word	0x08005e35
 8005e14:	08005e3d 	.word	0x08005e3d
 8005e18:	08005e45 	.word	0x08005e45
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e22:	e01b      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005e24:	2304      	movs	r3, #4
 8005e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2a:	e017      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005e2c:	2308      	movs	r3, #8
 8005e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e32:	e013      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005e34:	2310      	movs	r3, #16
 8005e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3a:	e00f      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005e3c:	2320      	movs	r3, #32
 8005e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e42:	e00b      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005e44:	2340      	movs	r3, #64	; 0x40
 8005e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e4a:	e007      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005e4c:	2380      	movs	r3, #128	; 0x80
 8005e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e52:	bf00      	nop
 8005e54:	e002      	b.n	8005e5c <UART_SetConfig+0x5d0>
 8005e56:	2380      	movs	r3, #128	; 0x80
 8005e58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a25      	ldr	r2, [pc, #148]	; (8005ef8 <UART_SetConfig+0x66c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	f040 80b8 	bne.w	8005fd8 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e6c:	2b08      	cmp	r3, #8
 8005e6e:	d019      	beq.n	8005ea4 <UART_SetConfig+0x618>
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	dc04      	bgt.n	8005e7e <UART_SetConfig+0x5f2>
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d009      	beq.n	8005e8c <UART_SetConfig+0x600>
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d00b      	beq.n	8005e94 <UART_SetConfig+0x608>
 8005e7c:	e042      	b.n	8005f04 <UART_SetConfig+0x678>
 8005e7e:	2b20      	cmp	r3, #32
 8005e80:	d02b      	beq.n	8005eda <UART_SetConfig+0x64e>
 8005e82:	2b40      	cmp	r3, #64	; 0x40
 8005e84:	d02c      	beq.n	8005ee0 <UART_SetConfig+0x654>
 8005e86:	2b10      	cmp	r3, #16
 8005e88:	d014      	beq.n	8005eb4 <UART_SetConfig+0x628>
 8005e8a:	e03b      	b.n	8005f04 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005e8c:	f7fe faa0 	bl	80043d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005e90:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005e92:	e03d      	b.n	8005f10 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e94:	f107 0314 	add.w	r3, r7, #20
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fe faaf 	bl	80043fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ea2:	e035      	b.n	8005f10 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ea4:	f107 0308 	add.w	r3, r7, #8
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fe fbf3 	bl	8004694 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005eb2:	e02d      	b.n	8005f10 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eb4:	4b0d      	ldr	r3, [pc, #52]	; (8005eec <UART_SetConfig+0x660>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d009      	beq.n	8005ed4 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ec0:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <UART_SetConfig+0x660>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	08db      	lsrs	r3, r3, #3
 8005ec6:	f003 0303 	and.w	r3, r3, #3
 8005eca:	4a0c      	ldr	r2, [pc, #48]	; (8005efc <UART_SetConfig+0x670>)
 8005ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ed2:	e01d      	b.n	8005f10 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8005ed4:	4b09      	ldr	r3, [pc, #36]	; (8005efc <UART_SetConfig+0x670>)
 8005ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ed8:	e01a      	b.n	8005f10 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005eda:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <UART_SetConfig+0x674>)
 8005edc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ede:	e017      	b.n	8005f10 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ee6:	e013      	b.n	8005f10 <UART_SetConfig+0x684>
 8005ee8:	40011400 	.word	0x40011400
 8005eec:	58024400 	.word	0x58024400
 8005ef0:	40007800 	.word	0x40007800
 8005ef4:	40007c00 	.word	0x40007c00
 8005ef8:	58000c00 	.word	0x58000c00
 8005efc:	03d09000 	.word	0x03d09000
 8005f00:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005f0e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 824d 	beq.w	80063b2 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	4aad      	ldr	r2, [pc, #692]	; (80061d4 <UART_SetConfig+0x948>)
 8005f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f22:	461a      	mov	r2, r3
 8005f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f26:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f2a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	4613      	mov	r3, r2
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	4413      	add	r3, r2
 8005f36:	6a3a      	ldr	r2, [r7, #32]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d305      	bcc.n	8005f48 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f42:	6a3a      	ldr	r2, [r7, #32]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d903      	bls.n	8005f50 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005f4e:	e230      	b.n	80063b2 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f52:	4618      	mov	r0, r3
 8005f54:	f04f 0100 	mov.w	r1, #0
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	4a9d      	ldr	r2, [pc, #628]	; (80061d4 <UART_SetConfig+0x948>)
 8005f5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	f04f 0400 	mov.w	r4, #0
 8005f68:	461a      	mov	r2, r3
 8005f6a:	4623      	mov	r3, r4
 8005f6c:	f7fa fa10 	bl	8000390 <__aeabi_uldivmod>
 8005f70:	4603      	mov	r3, r0
 8005f72:	460c      	mov	r4, r1
 8005f74:	4619      	mov	r1, r3
 8005f76:	4622      	mov	r2, r4
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	f04f 0400 	mov.w	r4, #0
 8005f80:	0214      	lsls	r4, r2, #8
 8005f82:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005f86:	020b      	lsls	r3, r1, #8
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	6852      	ldr	r2, [r2, #4]
 8005f8c:	0852      	lsrs	r2, r2, #1
 8005f8e:	4611      	mov	r1, r2
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	eb13 0b01 	adds.w	fp, r3, r1
 8005f98:	eb44 0c02 	adc.w	ip, r4, r2
 8005f9c:	4658      	mov	r0, fp
 8005f9e:	4661      	mov	r1, ip
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f04f 0400 	mov.w	r4, #0
 8005fa8:	461a      	mov	r2, r3
 8005faa:	4623      	mov	r3, r4
 8005fac:	f7fa f9f0 	bl	8000390 <__aeabi_uldivmod>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fbc:	d308      	bcc.n	8005fd0 <UART_SetConfig+0x744>
 8005fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fc4:	d204      	bcs.n	8005fd0 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fcc:	60da      	str	r2, [r3, #12]
 8005fce:	e1f0      	b.n	80063b2 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005fd6:	e1ec      	b.n	80063b2 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fe0:	f040 8100 	bne.w	80061e4 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8005fe4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005fe8:	2b40      	cmp	r3, #64	; 0x40
 8005fea:	f200 80b7 	bhi.w	800615c <UART_SetConfig+0x8d0>
 8005fee:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <UART_SetConfig+0x768>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	080060f9 	.word	0x080060f9
 8005ff8:	08006101 	.word	0x08006101
 8005ffc:	0800615d 	.word	0x0800615d
 8006000:	0800615d 	.word	0x0800615d
 8006004:	08006109 	.word	0x08006109
 8006008:	0800615d 	.word	0x0800615d
 800600c:	0800615d 	.word	0x0800615d
 8006010:	0800615d 	.word	0x0800615d
 8006014:	08006119 	.word	0x08006119
 8006018:	0800615d 	.word	0x0800615d
 800601c:	0800615d 	.word	0x0800615d
 8006020:	0800615d 	.word	0x0800615d
 8006024:	0800615d 	.word	0x0800615d
 8006028:	0800615d 	.word	0x0800615d
 800602c:	0800615d 	.word	0x0800615d
 8006030:	0800615d 	.word	0x0800615d
 8006034:	08006129 	.word	0x08006129
 8006038:	0800615d 	.word	0x0800615d
 800603c:	0800615d 	.word	0x0800615d
 8006040:	0800615d 	.word	0x0800615d
 8006044:	0800615d 	.word	0x0800615d
 8006048:	0800615d 	.word	0x0800615d
 800604c:	0800615d 	.word	0x0800615d
 8006050:	0800615d 	.word	0x0800615d
 8006054:	0800615d 	.word	0x0800615d
 8006058:	0800615d 	.word	0x0800615d
 800605c:	0800615d 	.word	0x0800615d
 8006060:	0800615d 	.word	0x0800615d
 8006064:	0800615d 	.word	0x0800615d
 8006068:	0800615d 	.word	0x0800615d
 800606c:	0800615d 	.word	0x0800615d
 8006070:	0800615d 	.word	0x0800615d
 8006074:	0800614f 	.word	0x0800614f
 8006078:	0800615d 	.word	0x0800615d
 800607c:	0800615d 	.word	0x0800615d
 8006080:	0800615d 	.word	0x0800615d
 8006084:	0800615d 	.word	0x0800615d
 8006088:	0800615d 	.word	0x0800615d
 800608c:	0800615d 	.word	0x0800615d
 8006090:	0800615d 	.word	0x0800615d
 8006094:	0800615d 	.word	0x0800615d
 8006098:	0800615d 	.word	0x0800615d
 800609c:	0800615d 	.word	0x0800615d
 80060a0:	0800615d 	.word	0x0800615d
 80060a4:	0800615d 	.word	0x0800615d
 80060a8:	0800615d 	.word	0x0800615d
 80060ac:	0800615d 	.word	0x0800615d
 80060b0:	0800615d 	.word	0x0800615d
 80060b4:	0800615d 	.word	0x0800615d
 80060b8:	0800615d 	.word	0x0800615d
 80060bc:	0800615d 	.word	0x0800615d
 80060c0:	0800615d 	.word	0x0800615d
 80060c4:	0800615d 	.word	0x0800615d
 80060c8:	0800615d 	.word	0x0800615d
 80060cc:	0800615d 	.word	0x0800615d
 80060d0:	0800615d 	.word	0x0800615d
 80060d4:	0800615d 	.word	0x0800615d
 80060d8:	0800615d 	.word	0x0800615d
 80060dc:	0800615d 	.word	0x0800615d
 80060e0:	0800615d 	.word	0x0800615d
 80060e4:	0800615d 	.word	0x0800615d
 80060e8:	0800615d 	.word	0x0800615d
 80060ec:	0800615d 	.word	0x0800615d
 80060f0:	0800615d 	.word	0x0800615d
 80060f4:	08006155 	.word	0x08006155
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060f8:	f7fd fa50 	bl	800359c <HAL_RCC_GetPCLK1Freq>
 80060fc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80060fe:	e033      	b.n	8006168 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006100:	f7fd fa62 	bl	80035c8 <HAL_RCC_GetPCLK2Freq>
 8006104:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006106:	e02f      	b.n	8006168 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006108:	f107 0314 	add.w	r3, r7, #20
 800610c:	4618      	mov	r0, r3
 800610e:	f7fe f975 	bl	80043fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006116:	e027      	b.n	8006168 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006118:	f107 0308 	add.w	r3, r7, #8
 800611c:	4618      	mov	r0, r3
 800611e:	f7fe fab9 	bl	8004694 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006126:	e01f      	b.n	8006168 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006128:	4b2b      	ldr	r3, [pc, #172]	; (80061d8 <UART_SetConfig+0x94c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0320 	and.w	r3, r3, #32
 8006130:	2b00      	cmp	r3, #0
 8006132:	d009      	beq.n	8006148 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006134:	4b28      	ldr	r3, [pc, #160]	; (80061d8 <UART_SetConfig+0x94c>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	08db      	lsrs	r3, r3, #3
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	4a27      	ldr	r2, [pc, #156]	; (80061dc <UART_SetConfig+0x950>)
 8006140:	fa22 f303 	lsr.w	r3, r2, r3
 8006144:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006146:	e00f      	b.n	8006168 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8006148:	4b24      	ldr	r3, [pc, #144]	; (80061dc <UART_SetConfig+0x950>)
 800614a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800614c:	e00c      	b.n	8006168 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800614e:	4b24      	ldr	r3, [pc, #144]	; (80061e0 <UART_SetConfig+0x954>)
 8006150:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006152:	e009      	b.n	8006168 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006154:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006158:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800615a:	e005      	b.n	8006168 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800615c:	2300      	movs	r3, #0
 800615e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006166:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 8121 	beq.w	80063b2 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	4a17      	ldr	r2, [pc, #92]	; (80061d4 <UART_SetConfig+0x948>)
 8006176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800617a:	461a      	mov	r2, r3
 800617c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006182:	005a      	lsls	r2, r3, #1
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	085b      	lsrs	r3, r3, #1
 800618a:	441a      	add	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	fbb2 f3f3 	udiv	r3, r2, r3
 8006194:	b29b      	uxth	r3, r3
 8006196:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	2b0f      	cmp	r3, #15
 800619c:	d916      	bls.n	80061cc <UART_SetConfig+0x940>
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061a4:	d212      	bcs.n	80061cc <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f023 030f 	bic.w	r3, r3, #15
 80061ae:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	085b      	lsrs	r3, r3, #1
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061be:	4313      	orrs	r3, r2
 80061c0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061c8:	60da      	str	r2, [r3, #12]
 80061ca:	e0f2      	b.n	80063b2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80061d2:	e0ee      	b.n	80063b2 <UART_SetConfig+0xb26>
 80061d4:	0800953c 	.word	0x0800953c
 80061d8:	58024400 	.word	0x58024400
 80061dc:	03d09000 	.word	0x03d09000
 80061e0:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80061e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80061e8:	2b40      	cmp	r3, #64	; 0x40
 80061ea:	f200 80b7 	bhi.w	800635c <UART_SetConfig+0xad0>
 80061ee:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <UART_SetConfig+0x968>)
 80061f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f4:	080062f9 	.word	0x080062f9
 80061f8:	08006301 	.word	0x08006301
 80061fc:	0800635d 	.word	0x0800635d
 8006200:	0800635d 	.word	0x0800635d
 8006204:	08006309 	.word	0x08006309
 8006208:	0800635d 	.word	0x0800635d
 800620c:	0800635d 	.word	0x0800635d
 8006210:	0800635d 	.word	0x0800635d
 8006214:	08006319 	.word	0x08006319
 8006218:	0800635d 	.word	0x0800635d
 800621c:	0800635d 	.word	0x0800635d
 8006220:	0800635d 	.word	0x0800635d
 8006224:	0800635d 	.word	0x0800635d
 8006228:	0800635d 	.word	0x0800635d
 800622c:	0800635d 	.word	0x0800635d
 8006230:	0800635d 	.word	0x0800635d
 8006234:	08006329 	.word	0x08006329
 8006238:	0800635d 	.word	0x0800635d
 800623c:	0800635d 	.word	0x0800635d
 8006240:	0800635d 	.word	0x0800635d
 8006244:	0800635d 	.word	0x0800635d
 8006248:	0800635d 	.word	0x0800635d
 800624c:	0800635d 	.word	0x0800635d
 8006250:	0800635d 	.word	0x0800635d
 8006254:	0800635d 	.word	0x0800635d
 8006258:	0800635d 	.word	0x0800635d
 800625c:	0800635d 	.word	0x0800635d
 8006260:	0800635d 	.word	0x0800635d
 8006264:	0800635d 	.word	0x0800635d
 8006268:	0800635d 	.word	0x0800635d
 800626c:	0800635d 	.word	0x0800635d
 8006270:	0800635d 	.word	0x0800635d
 8006274:	0800634f 	.word	0x0800634f
 8006278:	0800635d 	.word	0x0800635d
 800627c:	0800635d 	.word	0x0800635d
 8006280:	0800635d 	.word	0x0800635d
 8006284:	0800635d 	.word	0x0800635d
 8006288:	0800635d 	.word	0x0800635d
 800628c:	0800635d 	.word	0x0800635d
 8006290:	0800635d 	.word	0x0800635d
 8006294:	0800635d 	.word	0x0800635d
 8006298:	0800635d 	.word	0x0800635d
 800629c:	0800635d 	.word	0x0800635d
 80062a0:	0800635d 	.word	0x0800635d
 80062a4:	0800635d 	.word	0x0800635d
 80062a8:	0800635d 	.word	0x0800635d
 80062ac:	0800635d 	.word	0x0800635d
 80062b0:	0800635d 	.word	0x0800635d
 80062b4:	0800635d 	.word	0x0800635d
 80062b8:	0800635d 	.word	0x0800635d
 80062bc:	0800635d 	.word	0x0800635d
 80062c0:	0800635d 	.word	0x0800635d
 80062c4:	0800635d 	.word	0x0800635d
 80062c8:	0800635d 	.word	0x0800635d
 80062cc:	0800635d 	.word	0x0800635d
 80062d0:	0800635d 	.word	0x0800635d
 80062d4:	0800635d 	.word	0x0800635d
 80062d8:	0800635d 	.word	0x0800635d
 80062dc:	0800635d 	.word	0x0800635d
 80062e0:	0800635d 	.word	0x0800635d
 80062e4:	0800635d 	.word	0x0800635d
 80062e8:	0800635d 	.word	0x0800635d
 80062ec:	0800635d 	.word	0x0800635d
 80062f0:	0800635d 	.word	0x0800635d
 80062f4:	08006355 	.word	0x08006355
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062f8:	f7fd f950 	bl	800359c <HAL_RCC_GetPCLK1Freq>
 80062fc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062fe:	e033      	b.n	8006368 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006300:	f7fd f962 	bl	80035c8 <HAL_RCC_GetPCLK2Freq>
 8006304:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006306:	e02f      	b.n	8006368 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006308:	f107 0314 	add.w	r3, r7, #20
 800630c:	4618      	mov	r0, r3
 800630e:	f7fe f875 	bl	80043fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006316:	e027      	b.n	8006368 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006318:	f107 0308 	add.w	r3, r7, #8
 800631c:	4618      	mov	r0, r3
 800631e:	f7fe f9b9 	bl	8004694 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006326:	e01f      	b.n	8006368 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006328:	4b2c      	ldr	r3, [pc, #176]	; (80063dc <UART_SetConfig+0xb50>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0320 	and.w	r3, r3, #32
 8006330:	2b00      	cmp	r3, #0
 8006332:	d009      	beq.n	8006348 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006334:	4b29      	ldr	r3, [pc, #164]	; (80063dc <UART_SetConfig+0xb50>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	08db      	lsrs	r3, r3, #3
 800633a:	f003 0303 	and.w	r3, r3, #3
 800633e:	4a28      	ldr	r2, [pc, #160]	; (80063e0 <UART_SetConfig+0xb54>)
 8006340:	fa22 f303 	lsr.w	r3, r2, r3
 8006344:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006346:	e00f      	b.n	8006368 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8006348:	4b25      	ldr	r3, [pc, #148]	; (80063e0 <UART_SetConfig+0xb54>)
 800634a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800634c:	e00c      	b.n	8006368 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800634e:	4b25      	ldr	r3, [pc, #148]	; (80063e4 <UART_SetConfig+0xb58>)
 8006350:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006352:	e009      	b.n	8006368 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006354:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006358:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800635a:	e005      	b.n	8006368 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006366:	bf00      	nop
    }

    if (pclk != 0U)
 8006368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636a:	2b00      	cmp	r3, #0
 800636c:	d021      	beq.n	80063b2 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	4a1d      	ldr	r2, [pc, #116]	; (80063e8 <UART_SetConfig+0xb5c>)
 8006374:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006378:	461a      	mov	r2, r3
 800637a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	085b      	lsrs	r3, r3, #1
 8006386:	441a      	add	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006390:	b29b      	uxth	r3, r3
 8006392:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006396:	2b0f      	cmp	r3, #15
 8006398:	d908      	bls.n	80063ac <UART_SetConfig+0xb20>
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063a0:	d204      	bcs.n	80063ac <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063a8:	60da      	str	r2, [r3, #12]
 80063aa:	e002      	b.n	80063b2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80063ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3738      	adds	r7, #56	; 0x38
 80063d6:	46bd      	mov	sp, r7
 80063d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80063dc:	58024400 	.word	0x58024400
 80063e0:	03d09000 	.word	0x03d09000
 80063e4:	003d0900 	.word	0x003d0900
 80063e8:	0800953c 	.word	0x0800953c

080063ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00a      	beq.n	8006416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00a      	beq.n	800645a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	f003 0308 	and.w	r3, r3, #8
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00a      	beq.n	800647c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006480:	f003 0310 	and.w	r3, r3, #16
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00a      	beq.n	800649e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d01a      	beq.n	8006502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ea:	d10a      	bne.n	8006502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	605a      	str	r2, [r3, #4]
  }
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af02      	add	r7, sp, #8
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006540:	f7fb fae4 	bl	8001b0c <HAL_GetTick>
 8006544:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0308 	and.w	r3, r3, #8
 8006550:	2b08      	cmp	r3, #8
 8006552:	d10e      	bne.n	8006572 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f82c 	bl	80065c0 <UART_WaitOnFlagUntilTimeout>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e022      	b.n	80065b8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b04      	cmp	r3, #4
 800657e:	d10e      	bne.n	800659e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006580:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f816 	bl	80065c0 <UART_WaitOnFlagUntilTimeout>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e00c      	b.n	80065b8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2220      	movs	r2, #32
 80065a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	603b      	str	r3, [r7, #0]
 80065cc:	4613      	mov	r3, r2
 80065ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d0:	e062      	b.n	8006698 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d8:	d05e      	beq.n	8006698 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065da:	f7fb fa97 	bl	8001b0c <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d302      	bcc.n	80065f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d11d      	bne.n	800662c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065fe:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0201 	bic.w	r2, r2, #1
 800660e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2220      	movs	r2, #32
 8006614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2220      	movs	r2, #32
 800661c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e045      	b.n	80066b8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0304 	and.w	r3, r3, #4
 8006636:	2b00      	cmp	r3, #0
 8006638:	d02e      	beq.n	8006698 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006648:	d126      	bne.n	8006698 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006652:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006662:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689a      	ldr	r2, [r3, #8]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0201 	bic.w	r2, r2, #1
 8006672:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2220      	movs	r2, #32
 8006678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2220      	movs	r2, #32
 8006688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e00f      	b.n	80066b8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	69da      	ldr	r2, [r3, #28]
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	4013      	ands	r3, r2
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	bf0c      	ite	eq
 80066a8:	2301      	moveq	r3, #1
 80066aa:	2300      	movne	r3, #0
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	461a      	mov	r2, r3
 80066b0:	79fb      	ldrb	r3, [r7, #7]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d08d      	beq.n	80065d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066d6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6899      	ldr	r1, [r3, #8]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	4b08      	ldr	r3, [pc, #32]	; (8006704 <UART_EndRxTransfer+0x44>)
 80066e4:	400b      	ands	r3, r1
 80066e6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80066f6:	bf00      	nop
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	effffffe 	.word	0xeffffffe

08006708 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006714:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f7ff f8a6 	bl	8005878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800672c:	bf00      	nop
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006742:	2b21      	cmp	r3, #33	; 0x21
 8006744:	d12a      	bne.n	800679c <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800674c:	b29b      	uxth	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d110      	bne.n	8006774 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006760:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006770:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006772:	e013      	b.n	800679c <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006778:	781a      	ldrb	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006790:	b29b      	uxth	r3, r3
 8006792:	3b01      	subs	r3, #1
 8006794:	b29a      	uxth	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067b6:	2b21      	cmp	r3, #33	; 0x21
 80067b8:	d12f      	bne.n	800681a <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d110      	bne.n	80067e8 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067d4:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067e4:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80067e6:	e018      	b.n	800681a <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067fc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006802:	1c9a      	adds	r2, r3, #2
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800680e:	b29b      	uxth	r3, r3
 8006810:	3b01      	subs	r3, #1
 8006812:	b29a      	uxth	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800681a:	bf00      	nop
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006826:	b480      	push	{r7}
 8006828:	b085      	sub	sp, #20
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006834:	2b21      	cmp	r3, #33	; 0x21
 8006836:	d13d      	bne.n	80068b4 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800683e:	81fb      	strh	r3, [r7, #14]
 8006840:	e035      	b.n	80068ae <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006848:	b29b      	uxth	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d111      	bne.n	8006872 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800685c:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800686c:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800686e:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8006870:	e020      	b.n	80068b4 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687c:	2b00      	cmp	r3, #0
 800687e:	d013      	beq.n	80068a8 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006884:	781a      	ldrb	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800689c:	b29b      	uxth	r3, r3
 800689e:	3b01      	subs	r3, #1
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80068a8:	89fb      	ldrh	r3, [r7, #14]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	81fb      	strh	r3, [r7, #14]
 80068ae:	89fb      	ldrh	r3, [r7, #14]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1c6      	bne.n	8006842 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 80068b4:	bf00      	nop
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068ce:	2b21      	cmp	r3, #33	; 0x21
 80068d0:	d142      	bne.n	8006958 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80068d8:	81fb      	strh	r3, [r7, #14]
 80068da:	e03a      	b.n	8006952 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d111      	bne.n	800690c <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689a      	ldr	r2, [r3, #8]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80068f6:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006906:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006908:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800690a:	e025      	b.n	8006958 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006916:	2b00      	cmp	r3, #0
 8006918:	d018      	beq.n	800694c <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691e:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	461a      	mov	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800692e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006934:	1c9a      	adds	r2, r3, #2
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006940:	b29b      	uxth	r3, r3
 8006942:	3b01      	subs	r3, #1
 8006944:	b29a      	uxth	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800694c:	89fb      	ldrh	r3, [r7, #14]
 800694e:	3b01      	subs	r3, #1
 8006950:	81fb      	strh	r3, [r7, #14]
 8006952:	89fb      	ldrh	r3, [r7, #14]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1c1      	bne.n	80068dc <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8006958:	bf00      	nop
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800697a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2220      	movs	r2, #32
 8006980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7fa fe5c 	bl	8001648 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80069a6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069ae:	2b22      	cmp	r3, #34	; 0x22
 80069b0:	d13b      	bne.n	8006a2a <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069ba:	89bb      	ldrh	r3, [r7, #12]
 80069bc:	b2d9      	uxtb	r1, r3
 80069be:	89fb      	ldrh	r3, [r7, #14]
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c6:	400a      	ands	r2, r1
 80069c8:	b2d2      	uxtb	r2, r2
 80069ca:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b01      	subs	r3, #1
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d122      	bne.n	8006a3a <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a02:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0201 	bic.w	r2, r2, #1
 8006a12:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2220      	movs	r2, #32
 8006a18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7fa fe20 	bl	8001668 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a28:	e007      	b.n	8006a3a <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	699a      	ldr	r2, [r3, #24]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f042 0208 	orr.w	r2, r2, #8
 8006a38:	619a      	str	r2, [r3, #24]
}
 8006a3a:	bf00      	nop
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a50:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a58:	2b22      	cmp	r3, #34	; 0x22
 8006a5a:	d13b      	bne.n	8006ad4 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a68:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006a6a:	89ba      	ldrh	r2, [r7, #12]
 8006a6c:	89fb      	ldrh	r3, [r7, #14]
 8006a6e:	4013      	ands	r3, r2
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7a:	1c9a      	adds	r2, r3, #2
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d122      	bne.n	8006ae4 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006aac:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0201 	bic.w	r2, r2, #1
 8006abc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7fa fdcb 	bl	8001668 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ad2:	e007      	b.n	8006ae4 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699a      	ldr	r2, [r3, #24]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0208 	orr.w	r2, r2, #8
 8006ae2:	619a      	str	r2, [r3, #24]
}
 8006ae4:	bf00      	nop
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006afa:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b02:	2b22      	cmp	r3, #34	; 0x22
 8006b04:	d166      	bne.n	8006bd4 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b0c:	81fb      	strh	r3, [r7, #14]
 8006b0e:	e03d      	b.n	8006b8c <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b18:	893b      	ldrh	r3, [r7, #8]
 8006b1a:	b2d9      	uxtb	r1, r3
 8006b1c:	89bb      	ldrh	r3, [r7, #12]
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b24:	400a      	ands	r2, r1
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d119      	bne.n	8006b86 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b60:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6899      	ldr	r1, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	4b1f      	ldr	r3, [pc, #124]	; (8006bec <UART_RxISR_8BIT_FIFOEN+0x100>)
 8006b6e:	400b      	ands	r3, r1
 8006b70:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7fa fd71 	bl	8001668 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006b86:	89fb      	ldrh	r3, [r7, #14]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	81fb      	strh	r3, [r7, #14]
 8006b8c:	89fb      	ldrh	r3, [r7, #14]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1be      	bne.n	8006b10 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b98:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006b9a:	897b      	ldrh	r3, [r7, #10]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d021      	beq.n	8006be4 <UART_RxISR_8BIT_FIFOEN+0xf8>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ba6:	897a      	ldrh	r2, [r7, #10]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d21b      	bcs.n	8006be4 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006bba:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a0c      	ldr	r2, [pc, #48]	; (8006bf0 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8006bc0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f042 0220 	orr.w	r2, r2, #32
 8006bd0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bd2:	e007      	b.n	8006be4 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699a      	ldr	r2, [r3, #24]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f042 0208 	orr.w	r2, r2, #8
 8006be2:	619a      	str	r2, [r3, #24]
}
 8006be4:	bf00      	nop
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	effffffe 	.word	0xeffffffe
 8006bf0:	08006999 	.word	0x08006999

08006bf4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c02:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c0a:	2b22      	cmp	r3, #34	; 0x22
 8006c0c:	d166      	bne.n	8006cdc <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c14:	82fb      	strh	r3, [r7, #22]
 8006c16:	e03d      	b.n	8006c94 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1e:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c24:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006c26:	8a3a      	ldrh	r2, [r7, #16]
 8006c28:	8abb      	ldrh	r3, [r7, #20]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c36:	1c9a      	adds	r2, r3, #2
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d119      	bne.n	8006c8e <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c68:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6899      	ldr	r1, [r3, #8]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	4b1f      	ldr	r3, [pc, #124]	; (8006cf4 <UART_RxISR_16BIT_FIFOEN+0x100>)
 8006c76:	400b      	ands	r3, r1
 8006c78:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7fa fced 	bl	8001668 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006c8e:	8afb      	ldrh	r3, [r7, #22]
 8006c90:	3b01      	subs	r3, #1
 8006c92:	82fb      	strh	r3, [r7, #22]
 8006c94:	8afb      	ldrh	r3, [r7, #22]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1be      	bne.n	8006c18 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ca0:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006ca2:	8a7b      	ldrh	r3, [r7, #18]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d021      	beq.n	8006cec <UART_RxISR_16BIT_FIFOEN+0xf8>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006cae:	8a7a      	ldrh	r2, [r7, #18]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d21b      	bcs.n	8006cec <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689a      	ldr	r2, [r3, #8]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006cc2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a0c      	ldr	r2, [pc, #48]	; (8006cf8 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8006cc8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f042 0220 	orr.w	r2, r2, #32
 8006cd8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cda:	e007      	b.n	8006cec <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699a      	ldr	r2, [r3, #24]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f042 0208 	orr.w	r2, r2, #8
 8006cea:	619a      	str	r2, [r3, #24]
}
 8006cec:	bf00      	nop
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	effffffe 	.word	0xeffffffe
 8006cf8:	08006a43 	.word	0x08006a43

08006cfc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d101      	bne.n	8006d4e <HAL_UARTEx_DisableFifoMode+0x16>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	e027      	b.n	8006d9e <HAL_UARTEx_DisableFifoMode+0x66>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2224      	movs	r2, #36	; 0x24
 8006d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 0201 	bic.w	r2, r2, #1
 8006d74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d101      	bne.n	8006dc2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	e02d      	b.n	8006e1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2224      	movs	r2, #36	; 0x24
 8006dce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0201 	bic.w	r2, r2, #1
 8006de8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f850 	bl	8006ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d101      	bne.n	8006e3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	e02d      	b.n	8006e9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2224      	movs	r2, #36	; 0x24
 8006e4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f022 0201 	bic.w	r2, r2, #1
 8006e64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f812 	bl	8006ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
	...

08006ea4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b089      	sub	sp, #36	; 0x24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006eac:	4a2f      	ldr	r2, [pc, #188]	; (8006f6c <UARTEx_SetNbDataToProcess+0xc8>)
 8006eae:	f107 0314 	add.w	r3, r7, #20
 8006eb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006eb6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006eba:	4a2d      	ldr	r2, [pc, #180]	; (8006f70 <UARTEx_SetNbDataToProcess+0xcc>)
 8006ebc:	f107 030c 	add.w	r3, r7, #12
 8006ec0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ec4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d108      	bne.n	8006ee2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ee0:	e03d      	b.n	8006f5e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ee2:	2310      	movs	r3, #16
 8006ee4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ee6:	2310      	movs	r3, #16
 8006ee8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	0e5b      	lsrs	r3, r3, #25
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	f003 0307 	and.w	r3, r3, #7
 8006ef8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	0f5b      	lsrs	r3, r3, #29
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	f003 0307 	and.w	r3, r3, #7
 8006f08:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006f0a:	7fbb      	ldrb	r3, [r7, #30]
 8006f0c:	7f3a      	ldrb	r2, [r7, #28]
 8006f0e:	f107 0120 	add.w	r1, r7, #32
 8006f12:	440a      	add	r2, r1
 8006f14:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006f18:	fb02 f303 	mul.w	r3, r2, r3
 8006f1c:	7f3a      	ldrb	r2, [r7, #28]
 8006f1e:	f107 0120 	add.w	r1, r7, #32
 8006f22:	440a      	add	r2, r1
 8006f24:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006f28:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006f34:	7ffb      	ldrb	r3, [r7, #31]
 8006f36:	7f7a      	ldrb	r2, [r7, #29]
 8006f38:	f107 0120 	add.w	r1, r7, #32
 8006f3c:	440a      	add	r2, r1
 8006f3e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006f42:	fb02 f303 	mul.w	r3, r2, r3
 8006f46:	7f7a      	ldrb	r2, [r7, #29]
 8006f48:	f107 0120 	add.w	r1, r7, #32
 8006f4c:	440a      	add	r2, r1
 8006f4e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006f52:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006f5e:	bf00      	nop
 8006f60:	3724      	adds	r7, #36	; 0x24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	08009510 	.word	0x08009510
 8006f70:	08009518 	.word	0x08009518

08006f74 <arm_mean_f32>:
 8006f74:	b430      	push	{r4, r5}
 8006f76:	088d      	lsrs	r5, r1, #2
 8006f78:	d02d      	beq.n	8006fd6 <arm_mean_f32+0x62>
 8006f7a:	f100 0310 	add.w	r3, r0, #16
 8006f7e:	462c      	mov	r4, r5
 8006f80:	eddf 7a16 	vldr	s15, [pc, #88]	; 8006fdc <arm_mean_f32+0x68>
 8006f84:	ed13 7a04 	vldr	s14, [r3, #-16]
 8006f88:	3c01      	subs	r4, #1
 8006f8a:	ed13 6a03 	vldr	s12, [r3, #-12]
 8006f8e:	f103 0310 	add.w	r3, r3, #16
 8006f92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f96:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 8006f9a:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 8006f9e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006faa:	d1eb      	bne.n	8006f84 <arm_mean_f32+0x10>
 8006fac:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8006fb0:	f011 0303 	ands.w	r3, r1, #3
 8006fb4:	d005      	beq.n	8006fc2 <arm_mean_f32+0x4e>
 8006fb6:	ecb0 7a01 	vldmia	r0!, {s14}
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006fc0:	d1f9      	bne.n	8006fb6 <arm_mean_f32+0x42>
 8006fc2:	ee07 1a10 	vmov	s14, r1
 8006fc6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006fca:	bc30      	pop	{r4, r5}
 8006fcc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006fd0:	edc2 6a00 	vstr	s13, [r2]
 8006fd4:	4770      	bx	lr
 8006fd6:	eddf 7a01 	vldr	s15, [pc, #4]	; 8006fdc <arm_mean_f32+0x68>
 8006fda:	e7e9      	b.n	8006fb0 <arm_mean_f32+0x3c>
 8006fdc:	00000000 	.word	0x00000000

08006fe0 <arm_max_f32>:
 8006fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe4:	1e4d      	subs	r5, r1, #1
 8006fe6:	f100 0c04 	add.w	ip, r0, #4
 8006fea:	edd0 7a00 	vldr	s15, [r0]
 8006fee:	ea5f 0995 	movs.w	r9, r5, lsr #2
 8006ff2:	d056      	beq.n	80070a2 <arm_max_f32+0xc2>
 8006ff4:	3014      	adds	r0, #20
 8006ff6:	46c8      	mov	r8, r9
 8006ff8:	2404      	movs	r4, #4
 8006ffa:	2600      	movs	r6, #0
 8006ffc:	ed10 6a04 	vldr	s12, [r0, #-16]
 8007000:	f1a4 0a03 	sub.w	sl, r4, #3
 8007004:	ed50 6a03 	vldr	s13, [r0, #-12]
 8007008:	f1a4 0e02 	sub.w	lr, r4, #2
 800700c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8007010:	ed10 7a02 	vldr	s14, [r0, #-8]
 8007014:	ed50 5a01 	vldr	s11, [r0, #-4]
 8007018:	1e67      	subs	r7, r4, #1
 800701a:	3010      	adds	r0, #16
 800701c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007020:	bfc8      	it	gt
 8007022:	eef0 7a46 	vmovgt.f32	s15, s12
 8007026:	bfc8      	it	gt
 8007028:	4656      	movgt	r6, sl
 800702a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800702e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007032:	bf48      	it	mi
 8007034:	eef0 7a66 	vmovmi.f32	s15, s13
 8007038:	bf48      	it	mi
 800703a:	4676      	movmi	r6, lr
 800703c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007044:	bf48      	it	mi
 8007046:	eef0 7a47 	vmovmi.f32	s15, s14
 800704a:	bf48      	it	mi
 800704c:	463e      	movmi	r6, r7
 800704e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8007052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007056:	bf48      	it	mi
 8007058:	4626      	movmi	r6, r4
 800705a:	bf48      	it	mi
 800705c:	eef0 7a65 	vmovmi.f32	s15, s11
 8007060:	f1b8 0801 	subs.w	r8, r8, #1
 8007064:	f104 0404 	add.w	r4, r4, #4
 8007068:	d1c8      	bne.n	8006ffc <arm_max_f32+0x1c>
 800706a:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 800706e:	f015 0003 	ands.w	r0, r5, #3
 8007072:	d018      	beq.n	80070a6 <arm_max_f32+0xc6>
 8007074:	1a08      	subs	r0, r1, r0
 8007076:	ecbc 7a01 	vldmia	ip!, {s14}
 800707a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800707e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007082:	bfc8      	it	gt
 8007084:	4606      	movgt	r6, r0
 8007086:	f100 0001 	add.w	r0, r0, #1
 800708a:	bfd8      	it	le
 800708c:	eeb0 7a67 	vmovle.f32	s14, s15
 8007090:	4281      	cmp	r1, r0
 8007092:	eef0 7a47 	vmov.f32	s15, s14
 8007096:	d1ee      	bne.n	8007076 <arm_max_f32+0x96>
 8007098:	ed82 7a00 	vstr	s14, [r2]
 800709c:	601e      	str	r6, [r3, #0]
 800709e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a2:	464e      	mov	r6, r9
 80070a4:	e7e3      	b.n	800706e <arm_max_f32+0x8e>
 80070a6:	eeb0 7a67 	vmov.f32	s14, s15
 80070aa:	e7f5      	b.n	8007098 <arm_max_f32+0xb8>

080070ac <__errno>:
 80070ac:	4b01      	ldr	r3, [pc, #4]	; (80070b4 <__errno+0x8>)
 80070ae:	6818      	ldr	r0, [r3, #0]
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	20000010 	.word	0x20000010

080070b8 <__libc_init_array>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	4e0d      	ldr	r6, [pc, #52]	; (80070f0 <__libc_init_array+0x38>)
 80070bc:	4c0d      	ldr	r4, [pc, #52]	; (80070f4 <__libc_init_array+0x3c>)
 80070be:	1ba4      	subs	r4, r4, r6
 80070c0:	10a4      	asrs	r4, r4, #2
 80070c2:	2500      	movs	r5, #0
 80070c4:	42a5      	cmp	r5, r4
 80070c6:	d109      	bne.n	80070dc <__libc_init_array+0x24>
 80070c8:	4e0b      	ldr	r6, [pc, #44]	; (80070f8 <__libc_init_array+0x40>)
 80070ca:	4c0c      	ldr	r4, [pc, #48]	; (80070fc <__libc_init_array+0x44>)
 80070cc:	f002 f9b6 	bl	800943c <_init>
 80070d0:	1ba4      	subs	r4, r4, r6
 80070d2:	10a4      	asrs	r4, r4, #2
 80070d4:	2500      	movs	r5, #0
 80070d6:	42a5      	cmp	r5, r4
 80070d8:	d105      	bne.n	80070e6 <__libc_init_array+0x2e>
 80070da:	bd70      	pop	{r4, r5, r6, pc}
 80070dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070e0:	4798      	blx	r3
 80070e2:	3501      	adds	r5, #1
 80070e4:	e7ee      	b.n	80070c4 <__libc_init_array+0xc>
 80070e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070ea:	4798      	blx	r3
 80070ec:	3501      	adds	r5, #1
 80070ee:	e7f2      	b.n	80070d6 <__libc_init_array+0x1e>
 80070f0:	080097e0 	.word	0x080097e0
 80070f4:	080097e0 	.word	0x080097e0
 80070f8:	080097e0 	.word	0x080097e0
 80070fc:	080097e4 	.word	0x080097e4

08007100 <malloc>:
 8007100:	4b02      	ldr	r3, [pc, #8]	; (800710c <malloc+0xc>)
 8007102:	4601      	mov	r1, r0
 8007104:	6818      	ldr	r0, [r3, #0]
 8007106:	f000 b861 	b.w	80071cc <_malloc_r>
 800710a:	bf00      	nop
 800710c:	20000010 	.word	0x20000010

08007110 <free>:
 8007110:	4b02      	ldr	r3, [pc, #8]	; (800711c <free+0xc>)
 8007112:	4601      	mov	r1, r0
 8007114:	6818      	ldr	r0, [r3, #0]
 8007116:	f000 b80b 	b.w	8007130 <_free_r>
 800711a:	bf00      	nop
 800711c:	20000010 	.word	0x20000010

08007120 <memset>:
 8007120:	4402      	add	r2, r0
 8007122:	4603      	mov	r3, r0
 8007124:	4293      	cmp	r3, r2
 8007126:	d100      	bne.n	800712a <memset+0xa>
 8007128:	4770      	bx	lr
 800712a:	f803 1b01 	strb.w	r1, [r3], #1
 800712e:	e7f9      	b.n	8007124 <memset+0x4>

08007130 <_free_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	4605      	mov	r5, r0
 8007134:	2900      	cmp	r1, #0
 8007136:	d045      	beq.n	80071c4 <_free_r+0x94>
 8007138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800713c:	1f0c      	subs	r4, r1, #4
 800713e:	2b00      	cmp	r3, #0
 8007140:	bfb8      	it	lt
 8007142:	18e4      	addlt	r4, r4, r3
 8007144:	f001 faf9 	bl	800873a <__malloc_lock>
 8007148:	4a1f      	ldr	r2, [pc, #124]	; (80071c8 <_free_r+0x98>)
 800714a:	6813      	ldr	r3, [r2, #0]
 800714c:	4610      	mov	r0, r2
 800714e:	b933      	cbnz	r3, 800715e <_free_r+0x2e>
 8007150:	6063      	str	r3, [r4, #4]
 8007152:	6014      	str	r4, [r2, #0]
 8007154:	4628      	mov	r0, r5
 8007156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800715a:	f001 baef 	b.w	800873c <__malloc_unlock>
 800715e:	42a3      	cmp	r3, r4
 8007160:	d90c      	bls.n	800717c <_free_r+0x4c>
 8007162:	6821      	ldr	r1, [r4, #0]
 8007164:	1862      	adds	r2, r4, r1
 8007166:	4293      	cmp	r3, r2
 8007168:	bf04      	itt	eq
 800716a:	681a      	ldreq	r2, [r3, #0]
 800716c:	685b      	ldreq	r3, [r3, #4]
 800716e:	6063      	str	r3, [r4, #4]
 8007170:	bf04      	itt	eq
 8007172:	1852      	addeq	r2, r2, r1
 8007174:	6022      	streq	r2, [r4, #0]
 8007176:	6004      	str	r4, [r0, #0]
 8007178:	e7ec      	b.n	8007154 <_free_r+0x24>
 800717a:	4613      	mov	r3, r2
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	b10a      	cbz	r2, 8007184 <_free_r+0x54>
 8007180:	42a2      	cmp	r2, r4
 8007182:	d9fa      	bls.n	800717a <_free_r+0x4a>
 8007184:	6819      	ldr	r1, [r3, #0]
 8007186:	1858      	adds	r0, r3, r1
 8007188:	42a0      	cmp	r0, r4
 800718a:	d10b      	bne.n	80071a4 <_free_r+0x74>
 800718c:	6820      	ldr	r0, [r4, #0]
 800718e:	4401      	add	r1, r0
 8007190:	1858      	adds	r0, r3, r1
 8007192:	4282      	cmp	r2, r0
 8007194:	6019      	str	r1, [r3, #0]
 8007196:	d1dd      	bne.n	8007154 <_free_r+0x24>
 8007198:	6810      	ldr	r0, [r2, #0]
 800719a:	6852      	ldr	r2, [r2, #4]
 800719c:	605a      	str	r2, [r3, #4]
 800719e:	4401      	add	r1, r0
 80071a0:	6019      	str	r1, [r3, #0]
 80071a2:	e7d7      	b.n	8007154 <_free_r+0x24>
 80071a4:	d902      	bls.n	80071ac <_free_r+0x7c>
 80071a6:	230c      	movs	r3, #12
 80071a8:	602b      	str	r3, [r5, #0]
 80071aa:	e7d3      	b.n	8007154 <_free_r+0x24>
 80071ac:	6820      	ldr	r0, [r4, #0]
 80071ae:	1821      	adds	r1, r4, r0
 80071b0:	428a      	cmp	r2, r1
 80071b2:	bf04      	itt	eq
 80071b4:	6811      	ldreq	r1, [r2, #0]
 80071b6:	6852      	ldreq	r2, [r2, #4]
 80071b8:	6062      	str	r2, [r4, #4]
 80071ba:	bf04      	itt	eq
 80071bc:	1809      	addeq	r1, r1, r0
 80071be:	6021      	streq	r1, [r4, #0]
 80071c0:	605c      	str	r4, [r3, #4]
 80071c2:	e7c7      	b.n	8007154 <_free_r+0x24>
 80071c4:	bd38      	pop	{r3, r4, r5, pc}
 80071c6:	bf00      	nop
 80071c8:	2000023c 	.word	0x2000023c

080071cc <_malloc_r>:
 80071cc:	b570      	push	{r4, r5, r6, lr}
 80071ce:	1ccd      	adds	r5, r1, #3
 80071d0:	f025 0503 	bic.w	r5, r5, #3
 80071d4:	3508      	adds	r5, #8
 80071d6:	2d0c      	cmp	r5, #12
 80071d8:	bf38      	it	cc
 80071da:	250c      	movcc	r5, #12
 80071dc:	2d00      	cmp	r5, #0
 80071de:	4606      	mov	r6, r0
 80071e0:	db01      	blt.n	80071e6 <_malloc_r+0x1a>
 80071e2:	42a9      	cmp	r1, r5
 80071e4:	d903      	bls.n	80071ee <_malloc_r+0x22>
 80071e6:	230c      	movs	r3, #12
 80071e8:	6033      	str	r3, [r6, #0]
 80071ea:	2000      	movs	r0, #0
 80071ec:	bd70      	pop	{r4, r5, r6, pc}
 80071ee:	f001 faa4 	bl	800873a <__malloc_lock>
 80071f2:	4a21      	ldr	r2, [pc, #132]	; (8007278 <_malloc_r+0xac>)
 80071f4:	6814      	ldr	r4, [r2, #0]
 80071f6:	4621      	mov	r1, r4
 80071f8:	b991      	cbnz	r1, 8007220 <_malloc_r+0x54>
 80071fa:	4c20      	ldr	r4, [pc, #128]	; (800727c <_malloc_r+0xb0>)
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	b91b      	cbnz	r3, 8007208 <_malloc_r+0x3c>
 8007200:	4630      	mov	r0, r6
 8007202:	f000 fc79 	bl	8007af8 <_sbrk_r>
 8007206:	6020      	str	r0, [r4, #0]
 8007208:	4629      	mov	r1, r5
 800720a:	4630      	mov	r0, r6
 800720c:	f000 fc74 	bl	8007af8 <_sbrk_r>
 8007210:	1c43      	adds	r3, r0, #1
 8007212:	d124      	bne.n	800725e <_malloc_r+0x92>
 8007214:	230c      	movs	r3, #12
 8007216:	6033      	str	r3, [r6, #0]
 8007218:	4630      	mov	r0, r6
 800721a:	f001 fa8f 	bl	800873c <__malloc_unlock>
 800721e:	e7e4      	b.n	80071ea <_malloc_r+0x1e>
 8007220:	680b      	ldr	r3, [r1, #0]
 8007222:	1b5b      	subs	r3, r3, r5
 8007224:	d418      	bmi.n	8007258 <_malloc_r+0x8c>
 8007226:	2b0b      	cmp	r3, #11
 8007228:	d90f      	bls.n	800724a <_malloc_r+0x7e>
 800722a:	600b      	str	r3, [r1, #0]
 800722c:	50cd      	str	r5, [r1, r3]
 800722e:	18cc      	adds	r4, r1, r3
 8007230:	4630      	mov	r0, r6
 8007232:	f001 fa83 	bl	800873c <__malloc_unlock>
 8007236:	f104 000b 	add.w	r0, r4, #11
 800723a:	1d23      	adds	r3, r4, #4
 800723c:	f020 0007 	bic.w	r0, r0, #7
 8007240:	1ac3      	subs	r3, r0, r3
 8007242:	d0d3      	beq.n	80071ec <_malloc_r+0x20>
 8007244:	425a      	negs	r2, r3
 8007246:	50e2      	str	r2, [r4, r3]
 8007248:	e7d0      	b.n	80071ec <_malloc_r+0x20>
 800724a:	428c      	cmp	r4, r1
 800724c:	684b      	ldr	r3, [r1, #4]
 800724e:	bf16      	itet	ne
 8007250:	6063      	strne	r3, [r4, #4]
 8007252:	6013      	streq	r3, [r2, #0]
 8007254:	460c      	movne	r4, r1
 8007256:	e7eb      	b.n	8007230 <_malloc_r+0x64>
 8007258:	460c      	mov	r4, r1
 800725a:	6849      	ldr	r1, [r1, #4]
 800725c:	e7cc      	b.n	80071f8 <_malloc_r+0x2c>
 800725e:	1cc4      	adds	r4, r0, #3
 8007260:	f024 0403 	bic.w	r4, r4, #3
 8007264:	42a0      	cmp	r0, r4
 8007266:	d005      	beq.n	8007274 <_malloc_r+0xa8>
 8007268:	1a21      	subs	r1, r4, r0
 800726a:	4630      	mov	r0, r6
 800726c:	f000 fc44 	bl	8007af8 <_sbrk_r>
 8007270:	3001      	adds	r0, #1
 8007272:	d0cf      	beq.n	8007214 <_malloc_r+0x48>
 8007274:	6025      	str	r5, [r4, #0]
 8007276:	e7db      	b.n	8007230 <_malloc_r+0x64>
 8007278:	2000023c 	.word	0x2000023c
 800727c:	20000240 	.word	0x20000240

08007280 <__cvt>:
 8007280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007282:	ed2d 8b02 	vpush	{d8}
 8007286:	eeb0 8b40 	vmov.f64	d8, d0
 800728a:	b085      	sub	sp, #20
 800728c:	4617      	mov	r7, r2
 800728e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007290:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007292:	ee18 2a90 	vmov	r2, s17
 8007296:	f025 0520 	bic.w	r5, r5, #32
 800729a:	2a00      	cmp	r2, #0
 800729c:	bfb6      	itet	lt
 800729e:	222d      	movlt	r2, #45	; 0x2d
 80072a0:	2200      	movge	r2, #0
 80072a2:	eeb1 8b40 	vneglt.f64	d8, d0
 80072a6:	2d46      	cmp	r5, #70	; 0x46
 80072a8:	460c      	mov	r4, r1
 80072aa:	701a      	strb	r2, [r3, #0]
 80072ac:	d004      	beq.n	80072b8 <__cvt+0x38>
 80072ae:	2d45      	cmp	r5, #69	; 0x45
 80072b0:	d100      	bne.n	80072b4 <__cvt+0x34>
 80072b2:	3401      	adds	r4, #1
 80072b4:	2102      	movs	r1, #2
 80072b6:	e000      	b.n	80072ba <__cvt+0x3a>
 80072b8:	2103      	movs	r1, #3
 80072ba:	ab03      	add	r3, sp, #12
 80072bc:	9301      	str	r3, [sp, #4]
 80072be:	ab02      	add	r3, sp, #8
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	4622      	mov	r2, r4
 80072c4:	4633      	mov	r3, r6
 80072c6:	eeb0 0b48 	vmov.f64	d0, d8
 80072ca:	f000 fcd1 	bl	8007c70 <_dtoa_r>
 80072ce:	2d47      	cmp	r5, #71	; 0x47
 80072d0:	d101      	bne.n	80072d6 <__cvt+0x56>
 80072d2:	07fb      	lsls	r3, r7, #31
 80072d4:	d51e      	bpl.n	8007314 <__cvt+0x94>
 80072d6:	2d46      	cmp	r5, #70	; 0x46
 80072d8:	eb00 0304 	add.w	r3, r0, r4
 80072dc:	d10c      	bne.n	80072f8 <__cvt+0x78>
 80072de:	7802      	ldrb	r2, [r0, #0]
 80072e0:	2a30      	cmp	r2, #48	; 0x30
 80072e2:	d107      	bne.n	80072f4 <__cvt+0x74>
 80072e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80072e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ec:	bf1c      	itt	ne
 80072ee:	f1c4 0401 	rsbne	r4, r4, #1
 80072f2:	6034      	strne	r4, [r6, #0]
 80072f4:	6832      	ldr	r2, [r6, #0]
 80072f6:	4413      	add	r3, r2
 80072f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80072fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007300:	d007      	beq.n	8007312 <__cvt+0x92>
 8007302:	2130      	movs	r1, #48	; 0x30
 8007304:	9a03      	ldr	r2, [sp, #12]
 8007306:	429a      	cmp	r2, r3
 8007308:	d204      	bcs.n	8007314 <__cvt+0x94>
 800730a:	1c54      	adds	r4, r2, #1
 800730c:	9403      	str	r4, [sp, #12]
 800730e:	7011      	strb	r1, [r2, #0]
 8007310:	e7f8      	b.n	8007304 <__cvt+0x84>
 8007312:	9303      	str	r3, [sp, #12]
 8007314:	9b03      	ldr	r3, [sp, #12]
 8007316:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007318:	1a1b      	subs	r3, r3, r0
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	b005      	add	sp, #20
 800731e:	ecbd 8b02 	vpop	{d8}
 8007322:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007324 <__exponent>:
 8007324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007326:	2900      	cmp	r1, #0
 8007328:	4604      	mov	r4, r0
 800732a:	bfba      	itte	lt
 800732c:	4249      	neglt	r1, r1
 800732e:	232d      	movlt	r3, #45	; 0x2d
 8007330:	232b      	movge	r3, #43	; 0x2b
 8007332:	2909      	cmp	r1, #9
 8007334:	f804 2b02 	strb.w	r2, [r4], #2
 8007338:	7043      	strb	r3, [r0, #1]
 800733a:	dd20      	ble.n	800737e <__exponent+0x5a>
 800733c:	f10d 0307 	add.w	r3, sp, #7
 8007340:	461f      	mov	r7, r3
 8007342:	260a      	movs	r6, #10
 8007344:	fb91 f5f6 	sdiv	r5, r1, r6
 8007348:	fb06 1115 	mls	r1, r6, r5, r1
 800734c:	3130      	adds	r1, #48	; 0x30
 800734e:	2d09      	cmp	r5, #9
 8007350:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007354:	f103 32ff 	add.w	r2, r3, #4294967295
 8007358:	4629      	mov	r1, r5
 800735a:	dc09      	bgt.n	8007370 <__exponent+0x4c>
 800735c:	3130      	adds	r1, #48	; 0x30
 800735e:	3b02      	subs	r3, #2
 8007360:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007364:	42bb      	cmp	r3, r7
 8007366:	4622      	mov	r2, r4
 8007368:	d304      	bcc.n	8007374 <__exponent+0x50>
 800736a:	1a10      	subs	r0, r2, r0
 800736c:	b003      	add	sp, #12
 800736e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007370:	4613      	mov	r3, r2
 8007372:	e7e7      	b.n	8007344 <__exponent+0x20>
 8007374:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007378:	f804 2b01 	strb.w	r2, [r4], #1
 800737c:	e7f2      	b.n	8007364 <__exponent+0x40>
 800737e:	2330      	movs	r3, #48	; 0x30
 8007380:	4419      	add	r1, r3
 8007382:	7083      	strb	r3, [r0, #2]
 8007384:	1d02      	adds	r2, r0, #4
 8007386:	70c1      	strb	r1, [r0, #3]
 8007388:	e7ef      	b.n	800736a <__exponent+0x46>
 800738a:	0000      	movs	r0, r0
 800738c:	0000      	movs	r0, r0
	...

08007390 <_printf_float>:
 8007390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007394:	b08d      	sub	sp, #52	; 0x34
 8007396:	460c      	mov	r4, r1
 8007398:	4616      	mov	r6, r2
 800739a:	461f      	mov	r7, r3
 800739c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80073a0:	4605      	mov	r5, r0
 80073a2:	f001 f9b1 	bl	8008708 <_localeconv_r>
 80073a6:	f8d0 b000 	ldr.w	fp, [r0]
 80073aa:	4658      	mov	r0, fp
 80073ac:	f7f8 ff98 	bl	80002e0 <strlen>
 80073b0:	2300      	movs	r3, #0
 80073b2:	930a      	str	r3, [sp, #40]	; 0x28
 80073b4:	f8d8 3000 	ldr.w	r3, [r8]
 80073b8:	9005      	str	r0, [sp, #20]
 80073ba:	3307      	adds	r3, #7
 80073bc:	f023 0307 	bic.w	r3, r3, #7
 80073c0:	f103 0108 	add.w	r1, r3, #8
 80073c4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80073c8:	6822      	ldr	r2, [r4, #0]
 80073ca:	f8c8 1000 	str.w	r1, [r8]
 80073ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80073d6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8007660 <_printf_float+0x2d0>
 80073da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80073de:	eeb0 6bc0 	vabs.f64	d6, d0
 80073e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80073e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ea:	dd24      	ble.n	8007436 <_printf_float+0xa6>
 80073ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80073f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f4:	d502      	bpl.n	80073fc <_printf_float+0x6c>
 80073f6:	232d      	movs	r3, #45	; 0x2d
 80073f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073fc:	499a      	ldr	r1, [pc, #616]	; (8007668 <_printf_float+0x2d8>)
 80073fe:	4b9b      	ldr	r3, [pc, #620]	; (800766c <_printf_float+0x2dc>)
 8007400:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007404:	bf8c      	ite	hi
 8007406:	4688      	movhi	r8, r1
 8007408:	4698      	movls	r8, r3
 800740a:	f022 0204 	bic.w	r2, r2, #4
 800740e:	2303      	movs	r3, #3
 8007410:	6123      	str	r3, [r4, #16]
 8007412:	6022      	str	r2, [r4, #0]
 8007414:	f04f 0a00 	mov.w	sl, #0
 8007418:	9700      	str	r7, [sp, #0]
 800741a:	4633      	mov	r3, r6
 800741c:	aa0b      	add	r2, sp, #44	; 0x2c
 800741e:	4621      	mov	r1, r4
 8007420:	4628      	mov	r0, r5
 8007422:	f000 f9e1 	bl	80077e8 <_printf_common>
 8007426:	3001      	adds	r0, #1
 8007428:	f040 8089 	bne.w	800753e <_printf_float+0x1ae>
 800742c:	f04f 30ff 	mov.w	r0, #4294967295
 8007430:	b00d      	add	sp, #52	; 0x34
 8007432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007436:	eeb4 0b40 	vcmp.f64	d0, d0
 800743a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800743e:	d702      	bvc.n	8007446 <_printf_float+0xb6>
 8007440:	498b      	ldr	r1, [pc, #556]	; (8007670 <_printf_float+0x2e0>)
 8007442:	4b8c      	ldr	r3, [pc, #560]	; (8007674 <_printf_float+0x2e4>)
 8007444:	e7dc      	b.n	8007400 <_printf_float+0x70>
 8007446:	6861      	ldr	r1, [r4, #4]
 8007448:	1c4b      	adds	r3, r1, #1
 800744a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800744e:	ab0a      	add	r3, sp, #40	; 0x28
 8007450:	a809      	add	r0, sp, #36	; 0x24
 8007452:	d13b      	bne.n	80074cc <_printf_float+0x13c>
 8007454:	2106      	movs	r1, #6
 8007456:	6061      	str	r1, [r4, #4]
 8007458:	f04f 0c00 	mov.w	ip, #0
 800745c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8007460:	e9cd 0900 	strd	r0, r9, [sp]
 8007464:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007468:	6022      	str	r2, [r4, #0]
 800746a:	6861      	ldr	r1, [r4, #4]
 800746c:	4628      	mov	r0, r5
 800746e:	f7ff ff07 	bl	8007280 <__cvt>
 8007472:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8007476:	2b47      	cmp	r3, #71	; 0x47
 8007478:	4680      	mov	r8, r0
 800747a:	d109      	bne.n	8007490 <_printf_float+0x100>
 800747c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800747e:	1cd8      	adds	r0, r3, #3
 8007480:	db02      	blt.n	8007488 <_printf_float+0xf8>
 8007482:	6862      	ldr	r2, [r4, #4]
 8007484:	4293      	cmp	r3, r2
 8007486:	dd47      	ble.n	8007518 <_printf_float+0x188>
 8007488:	f1a9 0902 	sub.w	r9, r9, #2
 800748c:	fa5f f989 	uxtb.w	r9, r9
 8007490:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007496:	d824      	bhi.n	80074e2 <_printf_float+0x152>
 8007498:	3901      	subs	r1, #1
 800749a:	464a      	mov	r2, r9
 800749c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80074a0:	9109      	str	r1, [sp, #36]	; 0x24
 80074a2:	f7ff ff3f 	bl	8007324 <__exponent>
 80074a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074a8:	1813      	adds	r3, r2, r0
 80074aa:	2a01      	cmp	r2, #1
 80074ac:	4682      	mov	sl, r0
 80074ae:	6123      	str	r3, [r4, #16]
 80074b0:	dc02      	bgt.n	80074b8 <_printf_float+0x128>
 80074b2:	6822      	ldr	r2, [r4, #0]
 80074b4:	07d1      	lsls	r1, r2, #31
 80074b6:	d501      	bpl.n	80074bc <_printf_float+0x12c>
 80074b8:	3301      	adds	r3, #1
 80074ba:	6123      	str	r3, [r4, #16]
 80074bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d0a9      	beq.n	8007418 <_printf_float+0x88>
 80074c4:	232d      	movs	r3, #45	; 0x2d
 80074c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ca:	e7a5      	b.n	8007418 <_printf_float+0x88>
 80074cc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 80074d0:	f000 8178 	beq.w	80077c4 <_printf_float+0x434>
 80074d4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80074d8:	d1be      	bne.n	8007458 <_printf_float+0xc8>
 80074da:	2900      	cmp	r1, #0
 80074dc:	d1bc      	bne.n	8007458 <_printf_float+0xc8>
 80074de:	2101      	movs	r1, #1
 80074e0:	e7b9      	b.n	8007456 <_printf_float+0xc6>
 80074e2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80074e6:	d119      	bne.n	800751c <_printf_float+0x18c>
 80074e8:	2900      	cmp	r1, #0
 80074ea:	6863      	ldr	r3, [r4, #4]
 80074ec:	dd0c      	ble.n	8007508 <_printf_float+0x178>
 80074ee:	6121      	str	r1, [r4, #16]
 80074f0:	b913      	cbnz	r3, 80074f8 <_printf_float+0x168>
 80074f2:	6822      	ldr	r2, [r4, #0]
 80074f4:	07d2      	lsls	r2, r2, #31
 80074f6:	d502      	bpl.n	80074fe <_printf_float+0x16e>
 80074f8:	3301      	adds	r3, #1
 80074fa:	440b      	add	r3, r1
 80074fc:	6123      	str	r3, [r4, #16]
 80074fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007500:	65a3      	str	r3, [r4, #88]	; 0x58
 8007502:	f04f 0a00 	mov.w	sl, #0
 8007506:	e7d9      	b.n	80074bc <_printf_float+0x12c>
 8007508:	b913      	cbnz	r3, 8007510 <_printf_float+0x180>
 800750a:	6822      	ldr	r2, [r4, #0]
 800750c:	07d0      	lsls	r0, r2, #31
 800750e:	d501      	bpl.n	8007514 <_printf_float+0x184>
 8007510:	3302      	adds	r3, #2
 8007512:	e7f3      	b.n	80074fc <_printf_float+0x16c>
 8007514:	2301      	movs	r3, #1
 8007516:	e7f1      	b.n	80074fc <_printf_float+0x16c>
 8007518:	f04f 0967 	mov.w	r9, #103	; 0x67
 800751c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007520:	4293      	cmp	r3, r2
 8007522:	db05      	blt.n	8007530 <_printf_float+0x1a0>
 8007524:	6822      	ldr	r2, [r4, #0]
 8007526:	6123      	str	r3, [r4, #16]
 8007528:	07d1      	lsls	r1, r2, #31
 800752a:	d5e8      	bpl.n	80074fe <_printf_float+0x16e>
 800752c:	3301      	adds	r3, #1
 800752e:	e7e5      	b.n	80074fc <_printf_float+0x16c>
 8007530:	2b00      	cmp	r3, #0
 8007532:	bfd4      	ite	le
 8007534:	f1c3 0302 	rsble	r3, r3, #2
 8007538:	2301      	movgt	r3, #1
 800753a:	4413      	add	r3, r2
 800753c:	e7de      	b.n	80074fc <_printf_float+0x16c>
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	055a      	lsls	r2, r3, #21
 8007542:	d407      	bmi.n	8007554 <_printf_float+0x1c4>
 8007544:	6923      	ldr	r3, [r4, #16]
 8007546:	4642      	mov	r2, r8
 8007548:	4631      	mov	r1, r6
 800754a:	4628      	mov	r0, r5
 800754c:	47b8      	blx	r7
 800754e:	3001      	adds	r0, #1
 8007550:	d12a      	bne.n	80075a8 <_printf_float+0x218>
 8007552:	e76b      	b.n	800742c <_printf_float+0x9c>
 8007554:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007558:	f240 80de 	bls.w	8007718 <_printf_float+0x388>
 800755c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007560:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007568:	d133      	bne.n	80075d2 <_printf_float+0x242>
 800756a:	2301      	movs	r3, #1
 800756c:	4a42      	ldr	r2, [pc, #264]	; (8007678 <_printf_float+0x2e8>)
 800756e:	4631      	mov	r1, r6
 8007570:	4628      	mov	r0, r5
 8007572:	47b8      	blx	r7
 8007574:	3001      	adds	r0, #1
 8007576:	f43f af59 	beq.w	800742c <_printf_float+0x9c>
 800757a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800757e:	429a      	cmp	r2, r3
 8007580:	db02      	blt.n	8007588 <_printf_float+0x1f8>
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	07d8      	lsls	r0, r3, #31
 8007586:	d50f      	bpl.n	80075a8 <_printf_float+0x218>
 8007588:	9b05      	ldr	r3, [sp, #20]
 800758a:	465a      	mov	r2, fp
 800758c:	4631      	mov	r1, r6
 800758e:	4628      	mov	r0, r5
 8007590:	47b8      	blx	r7
 8007592:	3001      	adds	r0, #1
 8007594:	f43f af4a 	beq.w	800742c <_printf_float+0x9c>
 8007598:	f04f 0800 	mov.w	r8, #0
 800759c:	f104 091a 	add.w	r9, r4, #26
 80075a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075a2:	3b01      	subs	r3, #1
 80075a4:	4543      	cmp	r3, r8
 80075a6:	dc09      	bgt.n	80075bc <_printf_float+0x22c>
 80075a8:	6823      	ldr	r3, [r4, #0]
 80075aa:	079b      	lsls	r3, r3, #30
 80075ac:	f100 8105 	bmi.w	80077ba <_printf_float+0x42a>
 80075b0:	68e0      	ldr	r0, [r4, #12]
 80075b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075b4:	4298      	cmp	r0, r3
 80075b6:	bfb8      	it	lt
 80075b8:	4618      	movlt	r0, r3
 80075ba:	e739      	b.n	8007430 <_printf_float+0xa0>
 80075bc:	2301      	movs	r3, #1
 80075be:	464a      	mov	r2, r9
 80075c0:	4631      	mov	r1, r6
 80075c2:	4628      	mov	r0, r5
 80075c4:	47b8      	blx	r7
 80075c6:	3001      	adds	r0, #1
 80075c8:	f43f af30 	beq.w	800742c <_printf_float+0x9c>
 80075cc:	f108 0801 	add.w	r8, r8, #1
 80075d0:	e7e6      	b.n	80075a0 <_printf_float+0x210>
 80075d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	dc2b      	bgt.n	8007630 <_printf_float+0x2a0>
 80075d8:	2301      	movs	r3, #1
 80075da:	4a27      	ldr	r2, [pc, #156]	; (8007678 <_printf_float+0x2e8>)
 80075dc:	4631      	mov	r1, r6
 80075de:	4628      	mov	r0, r5
 80075e0:	47b8      	blx	r7
 80075e2:	3001      	adds	r0, #1
 80075e4:	f43f af22 	beq.w	800742c <_printf_float+0x9c>
 80075e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ea:	b923      	cbnz	r3, 80075f6 <_printf_float+0x266>
 80075ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ee:	b913      	cbnz	r3, 80075f6 <_printf_float+0x266>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	07d9      	lsls	r1, r3, #31
 80075f4:	d5d8      	bpl.n	80075a8 <_printf_float+0x218>
 80075f6:	9b05      	ldr	r3, [sp, #20]
 80075f8:	465a      	mov	r2, fp
 80075fa:	4631      	mov	r1, r6
 80075fc:	4628      	mov	r0, r5
 80075fe:	47b8      	blx	r7
 8007600:	3001      	adds	r0, #1
 8007602:	f43f af13 	beq.w	800742c <_printf_float+0x9c>
 8007606:	f04f 0900 	mov.w	r9, #0
 800760a:	f104 0a1a 	add.w	sl, r4, #26
 800760e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007610:	425b      	negs	r3, r3
 8007612:	454b      	cmp	r3, r9
 8007614:	dc01      	bgt.n	800761a <_printf_float+0x28a>
 8007616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007618:	e795      	b.n	8007546 <_printf_float+0x1b6>
 800761a:	2301      	movs	r3, #1
 800761c:	4652      	mov	r2, sl
 800761e:	4631      	mov	r1, r6
 8007620:	4628      	mov	r0, r5
 8007622:	47b8      	blx	r7
 8007624:	3001      	adds	r0, #1
 8007626:	f43f af01 	beq.w	800742c <_printf_float+0x9c>
 800762a:	f109 0901 	add.w	r9, r9, #1
 800762e:	e7ee      	b.n	800760e <_printf_float+0x27e>
 8007630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007632:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007634:	429a      	cmp	r2, r3
 8007636:	bfa8      	it	ge
 8007638:	461a      	movge	r2, r3
 800763a:	2a00      	cmp	r2, #0
 800763c:	4691      	mov	r9, r2
 800763e:	dd07      	ble.n	8007650 <_printf_float+0x2c0>
 8007640:	4613      	mov	r3, r2
 8007642:	4631      	mov	r1, r6
 8007644:	4642      	mov	r2, r8
 8007646:	4628      	mov	r0, r5
 8007648:	47b8      	blx	r7
 800764a:	3001      	adds	r0, #1
 800764c:	f43f aeee 	beq.w	800742c <_printf_float+0x9c>
 8007650:	f104 031a 	add.w	r3, r4, #26
 8007654:	f04f 0a00 	mov.w	sl, #0
 8007658:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800765c:	9307      	str	r3, [sp, #28]
 800765e:	e017      	b.n	8007690 <_printf_float+0x300>
 8007660:	ffffffff 	.word	0xffffffff
 8007664:	7fefffff 	.word	0x7fefffff
 8007668:	08009558 	.word	0x08009558
 800766c:	08009554 	.word	0x08009554
 8007670:	08009560 	.word	0x08009560
 8007674:	0800955c 	.word	0x0800955c
 8007678:	08009564 	.word	0x08009564
 800767c:	2301      	movs	r3, #1
 800767e:	9a07      	ldr	r2, [sp, #28]
 8007680:	4631      	mov	r1, r6
 8007682:	4628      	mov	r0, r5
 8007684:	47b8      	blx	r7
 8007686:	3001      	adds	r0, #1
 8007688:	f43f aed0 	beq.w	800742c <_printf_float+0x9c>
 800768c:	f10a 0a01 	add.w	sl, sl, #1
 8007690:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007692:	9306      	str	r3, [sp, #24]
 8007694:	eba3 0309 	sub.w	r3, r3, r9
 8007698:	4553      	cmp	r3, sl
 800769a:	dcef      	bgt.n	800767c <_printf_float+0x2ec>
 800769c:	9b06      	ldr	r3, [sp, #24]
 800769e:	4498      	add	r8, r3
 80076a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076a4:	429a      	cmp	r2, r3
 80076a6:	db15      	blt.n	80076d4 <_printf_float+0x344>
 80076a8:	6823      	ldr	r3, [r4, #0]
 80076aa:	07da      	lsls	r2, r3, #31
 80076ac:	d412      	bmi.n	80076d4 <_printf_float+0x344>
 80076ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b0:	9a06      	ldr	r2, [sp, #24]
 80076b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076b4:	1a9a      	subs	r2, r3, r2
 80076b6:	eba3 0a01 	sub.w	sl, r3, r1
 80076ba:	4592      	cmp	sl, r2
 80076bc:	bfa8      	it	ge
 80076be:	4692      	movge	sl, r2
 80076c0:	f1ba 0f00 	cmp.w	sl, #0
 80076c4:	dc0e      	bgt.n	80076e4 <_printf_float+0x354>
 80076c6:	f04f 0800 	mov.w	r8, #0
 80076ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076ce:	f104 091a 	add.w	r9, r4, #26
 80076d2:	e019      	b.n	8007708 <_printf_float+0x378>
 80076d4:	9b05      	ldr	r3, [sp, #20]
 80076d6:	465a      	mov	r2, fp
 80076d8:	4631      	mov	r1, r6
 80076da:	4628      	mov	r0, r5
 80076dc:	47b8      	blx	r7
 80076de:	3001      	adds	r0, #1
 80076e0:	d1e5      	bne.n	80076ae <_printf_float+0x31e>
 80076e2:	e6a3      	b.n	800742c <_printf_float+0x9c>
 80076e4:	4653      	mov	r3, sl
 80076e6:	4642      	mov	r2, r8
 80076e8:	4631      	mov	r1, r6
 80076ea:	4628      	mov	r0, r5
 80076ec:	47b8      	blx	r7
 80076ee:	3001      	adds	r0, #1
 80076f0:	d1e9      	bne.n	80076c6 <_printf_float+0x336>
 80076f2:	e69b      	b.n	800742c <_printf_float+0x9c>
 80076f4:	2301      	movs	r3, #1
 80076f6:	464a      	mov	r2, r9
 80076f8:	4631      	mov	r1, r6
 80076fa:	4628      	mov	r0, r5
 80076fc:	47b8      	blx	r7
 80076fe:	3001      	adds	r0, #1
 8007700:	f43f ae94 	beq.w	800742c <_printf_float+0x9c>
 8007704:	f108 0801 	add.w	r8, r8, #1
 8007708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800770c:	1a9b      	subs	r3, r3, r2
 800770e:	eba3 030a 	sub.w	r3, r3, sl
 8007712:	4543      	cmp	r3, r8
 8007714:	dcee      	bgt.n	80076f4 <_printf_float+0x364>
 8007716:	e747      	b.n	80075a8 <_printf_float+0x218>
 8007718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800771a:	2a01      	cmp	r2, #1
 800771c:	dc01      	bgt.n	8007722 <_printf_float+0x392>
 800771e:	07db      	lsls	r3, r3, #31
 8007720:	d539      	bpl.n	8007796 <_printf_float+0x406>
 8007722:	2301      	movs	r3, #1
 8007724:	4642      	mov	r2, r8
 8007726:	4631      	mov	r1, r6
 8007728:	4628      	mov	r0, r5
 800772a:	47b8      	blx	r7
 800772c:	3001      	adds	r0, #1
 800772e:	f43f ae7d 	beq.w	800742c <_printf_float+0x9c>
 8007732:	9b05      	ldr	r3, [sp, #20]
 8007734:	465a      	mov	r2, fp
 8007736:	4631      	mov	r1, r6
 8007738:	4628      	mov	r0, r5
 800773a:	47b8      	blx	r7
 800773c:	3001      	adds	r0, #1
 800773e:	f108 0801 	add.w	r8, r8, #1
 8007742:	f43f ae73 	beq.w	800742c <_printf_float+0x9c>
 8007746:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800774a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800774c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007754:	f103 33ff 	add.w	r3, r3, #4294967295
 8007758:	d018      	beq.n	800778c <_printf_float+0x3fc>
 800775a:	4642      	mov	r2, r8
 800775c:	4631      	mov	r1, r6
 800775e:	4628      	mov	r0, r5
 8007760:	47b8      	blx	r7
 8007762:	3001      	adds	r0, #1
 8007764:	d10e      	bne.n	8007784 <_printf_float+0x3f4>
 8007766:	e661      	b.n	800742c <_printf_float+0x9c>
 8007768:	2301      	movs	r3, #1
 800776a:	464a      	mov	r2, r9
 800776c:	4631      	mov	r1, r6
 800776e:	4628      	mov	r0, r5
 8007770:	47b8      	blx	r7
 8007772:	3001      	adds	r0, #1
 8007774:	f43f ae5a 	beq.w	800742c <_printf_float+0x9c>
 8007778:	f108 0801 	add.w	r8, r8, #1
 800777c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800777e:	3b01      	subs	r3, #1
 8007780:	4543      	cmp	r3, r8
 8007782:	dcf1      	bgt.n	8007768 <_printf_float+0x3d8>
 8007784:	4653      	mov	r3, sl
 8007786:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800778a:	e6dd      	b.n	8007548 <_printf_float+0x1b8>
 800778c:	f04f 0800 	mov.w	r8, #0
 8007790:	f104 091a 	add.w	r9, r4, #26
 8007794:	e7f2      	b.n	800777c <_printf_float+0x3ec>
 8007796:	2301      	movs	r3, #1
 8007798:	e7df      	b.n	800775a <_printf_float+0x3ca>
 800779a:	2301      	movs	r3, #1
 800779c:	464a      	mov	r2, r9
 800779e:	4631      	mov	r1, r6
 80077a0:	4628      	mov	r0, r5
 80077a2:	47b8      	blx	r7
 80077a4:	3001      	adds	r0, #1
 80077a6:	f43f ae41 	beq.w	800742c <_printf_float+0x9c>
 80077aa:	f108 0801 	add.w	r8, r8, #1
 80077ae:	68e3      	ldr	r3, [r4, #12]
 80077b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077b2:	1a9b      	subs	r3, r3, r2
 80077b4:	4543      	cmp	r3, r8
 80077b6:	dcf0      	bgt.n	800779a <_printf_float+0x40a>
 80077b8:	e6fa      	b.n	80075b0 <_printf_float+0x220>
 80077ba:	f04f 0800 	mov.w	r8, #0
 80077be:	f104 0919 	add.w	r9, r4, #25
 80077c2:	e7f4      	b.n	80077ae <_printf_float+0x41e>
 80077c4:	2900      	cmp	r1, #0
 80077c6:	f43f ae8a 	beq.w	80074de <_printf_float+0x14e>
 80077ca:	f04f 0c00 	mov.w	ip, #0
 80077ce:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80077d2:	e9cd 0900 	strd	r0, r9, [sp]
 80077d6:	6022      	str	r2, [r4, #0]
 80077d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80077dc:	4628      	mov	r0, r5
 80077de:	f7ff fd4f 	bl	8007280 <__cvt>
 80077e2:	4680      	mov	r8, r0
 80077e4:	e64a      	b.n	800747c <_printf_float+0xec>
 80077e6:	bf00      	nop

080077e8 <_printf_common>:
 80077e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077ec:	4691      	mov	r9, r2
 80077ee:	461f      	mov	r7, r3
 80077f0:	688a      	ldr	r2, [r1, #8]
 80077f2:	690b      	ldr	r3, [r1, #16]
 80077f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077f8:	4293      	cmp	r3, r2
 80077fa:	bfb8      	it	lt
 80077fc:	4613      	movlt	r3, r2
 80077fe:	f8c9 3000 	str.w	r3, [r9]
 8007802:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007806:	4606      	mov	r6, r0
 8007808:	460c      	mov	r4, r1
 800780a:	b112      	cbz	r2, 8007812 <_printf_common+0x2a>
 800780c:	3301      	adds	r3, #1
 800780e:	f8c9 3000 	str.w	r3, [r9]
 8007812:	6823      	ldr	r3, [r4, #0]
 8007814:	0699      	lsls	r1, r3, #26
 8007816:	bf42      	ittt	mi
 8007818:	f8d9 3000 	ldrmi.w	r3, [r9]
 800781c:	3302      	addmi	r3, #2
 800781e:	f8c9 3000 	strmi.w	r3, [r9]
 8007822:	6825      	ldr	r5, [r4, #0]
 8007824:	f015 0506 	ands.w	r5, r5, #6
 8007828:	d107      	bne.n	800783a <_printf_common+0x52>
 800782a:	f104 0a19 	add.w	sl, r4, #25
 800782e:	68e3      	ldr	r3, [r4, #12]
 8007830:	f8d9 2000 	ldr.w	r2, [r9]
 8007834:	1a9b      	subs	r3, r3, r2
 8007836:	42ab      	cmp	r3, r5
 8007838:	dc28      	bgt.n	800788c <_printf_common+0xa4>
 800783a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800783e:	6822      	ldr	r2, [r4, #0]
 8007840:	3300      	adds	r3, #0
 8007842:	bf18      	it	ne
 8007844:	2301      	movne	r3, #1
 8007846:	0692      	lsls	r2, r2, #26
 8007848:	d42d      	bmi.n	80078a6 <_printf_common+0xbe>
 800784a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800784e:	4639      	mov	r1, r7
 8007850:	4630      	mov	r0, r6
 8007852:	47c0      	blx	r8
 8007854:	3001      	adds	r0, #1
 8007856:	d020      	beq.n	800789a <_printf_common+0xb2>
 8007858:	6823      	ldr	r3, [r4, #0]
 800785a:	68e5      	ldr	r5, [r4, #12]
 800785c:	f8d9 2000 	ldr.w	r2, [r9]
 8007860:	f003 0306 	and.w	r3, r3, #6
 8007864:	2b04      	cmp	r3, #4
 8007866:	bf08      	it	eq
 8007868:	1aad      	subeq	r5, r5, r2
 800786a:	68a3      	ldr	r3, [r4, #8]
 800786c:	6922      	ldr	r2, [r4, #16]
 800786e:	bf0c      	ite	eq
 8007870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007874:	2500      	movne	r5, #0
 8007876:	4293      	cmp	r3, r2
 8007878:	bfc4      	itt	gt
 800787a:	1a9b      	subgt	r3, r3, r2
 800787c:	18ed      	addgt	r5, r5, r3
 800787e:	f04f 0900 	mov.w	r9, #0
 8007882:	341a      	adds	r4, #26
 8007884:	454d      	cmp	r5, r9
 8007886:	d11a      	bne.n	80078be <_printf_common+0xd6>
 8007888:	2000      	movs	r0, #0
 800788a:	e008      	b.n	800789e <_printf_common+0xb6>
 800788c:	2301      	movs	r3, #1
 800788e:	4652      	mov	r2, sl
 8007890:	4639      	mov	r1, r7
 8007892:	4630      	mov	r0, r6
 8007894:	47c0      	blx	r8
 8007896:	3001      	adds	r0, #1
 8007898:	d103      	bne.n	80078a2 <_printf_common+0xba>
 800789a:	f04f 30ff 	mov.w	r0, #4294967295
 800789e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a2:	3501      	adds	r5, #1
 80078a4:	e7c3      	b.n	800782e <_printf_common+0x46>
 80078a6:	18e1      	adds	r1, r4, r3
 80078a8:	1c5a      	adds	r2, r3, #1
 80078aa:	2030      	movs	r0, #48	; 0x30
 80078ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078b0:	4422      	add	r2, r4
 80078b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078ba:	3302      	adds	r3, #2
 80078bc:	e7c5      	b.n	800784a <_printf_common+0x62>
 80078be:	2301      	movs	r3, #1
 80078c0:	4622      	mov	r2, r4
 80078c2:	4639      	mov	r1, r7
 80078c4:	4630      	mov	r0, r6
 80078c6:	47c0      	blx	r8
 80078c8:	3001      	adds	r0, #1
 80078ca:	d0e6      	beq.n	800789a <_printf_common+0xb2>
 80078cc:	f109 0901 	add.w	r9, r9, #1
 80078d0:	e7d8      	b.n	8007884 <_printf_common+0x9c>
	...

080078d4 <_printf_i>:
 80078d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80078dc:	460c      	mov	r4, r1
 80078de:	7e09      	ldrb	r1, [r1, #24]
 80078e0:	b085      	sub	sp, #20
 80078e2:	296e      	cmp	r1, #110	; 0x6e
 80078e4:	4617      	mov	r7, r2
 80078e6:	4606      	mov	r6, r0
 80078e8:	4698      	mov	r8, r3
 80078ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078ec:	f000 80b3 	beq.w	8007a56 <_printf_i+0x182>
 80078f0:	d822      	bhi.n	8007938 <_printf_i+0x64>
 80078f2:	2963      	cmp	r1, #99	; 0x63
 80078f4:	d036      	beq.n	8007964 <_printf_i+0x90>
 80078f6:	d80a      	bhi.n	800790e <_printf_i+0x3a>
 80078f8:	2900      	cmp	r1, #0
 80078fa:	f000 80b9 	beq.w	8007a70 <_printf_i+0x19c>
 80078fe:	2958      	cmp	r1, #88	; 0x58
 8007900:	f000 8083 	beq.w	8007a0a <_printf_i+0x136>
 8007904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007908:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800790c:	e032      	b.n	8007974 <_printf_i+0xa0>
 800790e:	2964      	cmp	r1, #100	; 0x64
 8007910:	d001      	beq.n	8007916 <_printf_i+0x42>
 8007912:	2969      	cmp	r1, #105	; 0x69
 8007914:	d1f6      	bne.n	8007904 <_printf_i+0x30>
 8007916:	6820      	ldr	r0, [r4, #0]
 8007918:	6813      	ldr	r3, [r2, #0]
 800791a:	0605      	lsls	r5, r0, #24
 800791c:	f103 0104 	add.w	r1, r3, #4
 8007920:	d52a      	bpl.n	8007978 <_printf_i+0xa4>
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6011      	str	r1, [r2, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	da03      	bge.n	8007932 <_printf_i+0x5e>
 800792a:	222d      	movs	r2, #45	; 0x2d
 800792c:	425b      	negs	r3, r3
 800792e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007932:	486f      	ldr	r0, [pc, #444]	; (8007af0 <_printf_i+0x21c>)
 8007934:	220a      	movs	r2, #10
 8007936:	e039      	b.n	80079ac <_printf_i+0xd8>
 8007938:	2973      	cmp	r1, #115	; 0x73
 800793a:	f000 809d 	beq.w	8007a78 <_printf_i+0x1a4>
 800793e:	d808      	bhi.n	8007952 <_printf_i+0x7e>
 8007940:	296f      	cmp	r1, #111	; 0x6f
 8007942:	d020      	beq.n	8007986 <_printf_i+0xb2>
 8007944:	2970      	cmp	r1, #112	; 0x70
 8007946:	d1dd      	bne.n	8007904 <_printf_i+0x30>
 8007948:	6823      	ldr	r3, [r4, #0]
 800794a:	f043 0320 	orr.w	r3, r3, #32
 800794e:	6023      	str	r3, [r4, #0]
 8007950:	e003      	b.n	800795a <_printf_i+0x86>
 8007952:	2975      	cmp	r1, #117	; 0x75
 8007954:	d017      	beq.n	8007986 <_printf_i+0xb2>
 8007956:	2978      	cmp	r1, #120	; 0x78
 8007958:	d1d4      	bne.n	8007904 <_printf_i+0x30>
 800795a:	2378      	movs	r3, #120	; 0x78
 800795c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007960:	4864      	ldr	r0, [pc, #400]	; (8007af4 <_printf_i+0x220>)
 8007962:	e055      	b.n	8007a10 <_printf_i+0x13c>
 8007964:	6813      	ldr	r3, [r2, #0]
 8007966:	1d19      	adds	r1, r3, #4
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	6011      	str	r1, [r2, #0]
 800796c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007974:	2301      	movs	r3, #1
 8007976:	e08c      	b.n	8007a92 <_printf_i+0x1be>
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	6011      	str	r1, [r2, #0]
 800797c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007980:	bf18      	it	ne
 8007982:	b21b      	sxthne	r3, r3
 8007984:	e7cf      	b.n	8007926 <_printf_i+0x52>
 8007986:	6813      	ldr	r3, [r2, #0]
 8007988:	6825      	ldr	r5, [r4, #0]
 800798a:	1d18      	adds	r0, r3, #4
 800798c:	6010      	str	r0, [r2, #0]
 800798e:	0628      	lsls	r0, r5, #24
 8007990:	d501      	bpl.n	8007996 <_printf_i+0xc2>
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	e002      	b.n	800799c <_printf_i+0xc8>
 8007996:	0668      	lsls	r0, r5, #25
 8007998:	d5fb      	bpl.n	8007992 <_printf_i+0xbe>
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	4854      	ldr	r0, [pc, #336]	; (8007af0 <_printf_i+0x21c>)
 800799e:	296f      	cmp	r1, #111	; 0x6f
 80079a0:	bf14      	ite	ne
 80079a2:	220a      	movne	r2, #10
 80079a4:	2208      	moveq	r2, #8
 80079a6:	2100      	movs	r1, #0
 80079a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079ac:	6865      	ldr	r5, [r4, #4]
 80079ae:	60a5      	str	r5, [r4, #8]
 80079b0:	2d00      	cmp	r5, #0
 80079b2:	f2c0 8095 	blt.w	8007ae0 <_printf_i+0x20c>
 80079b6:	6821      	ldr	r1, [r4, #0]
 80079b8:	f021 0104 	bic.w	r1, r1, #4
 80079bc:	6021      	str	r1, [r4, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d13d      	bne.n	8007a3e <_printf_i+0x16a>
 80079c2:	2d00      	cmp	r5, #0
 80079c4:	f040 808e 	bne.w	8007ae4 <_printf_i+0x210>
 80079c8:	4665      	mov	r5, ip
 80079ca:	2a08      	cmp	r2, #8
 80079cc:	d10b      	bne.n	80079e6 <_printf_i+0x112>
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	07db      	lsls	r3, r3, #31
 80079d2:	d508      	bpl.n	80079e6 <_printf_i+0x112>
 80079d4:	6923      	ldr	r3, [r4, #16]
 80079d6:	6862      	ldr	r2, [r4, #4]
 80079d8:	429a      	cmp	r2, r3
 80079da:	bfde      	ittt	le
 80079dc:	2330      	movle	r3, #48	; 0x30
 80079de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079e6:	ebac 0305 	sub.w	r3, ip, r5
 80079ea:	6123      	str	r3, [r4, #16]
 80079ec:	f8cd 8000 	str.w	r8, [sp]
 80079f0:	463b      	mov	r3, r7
 80079f2:	aa03      	add	r2, sp, #12
 80079f4:	4621      	mov	r1, r4
 80079f6:	4630      	mov	r0, r6
 80079f8:	f7ff fef6 	bl	80077e8 <_printf_common>
 80079fc:	3001      	adds	r0, #1
 80079fe:	d14d      	bne.n	8007a9c <_printf_i+0x1c8>
 8007a00:	f04f 30ff 	mov.w	r0, #4294967295
 8007a04:	b005      	add	sp, #20
 8007a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a0a:	4839      	ldr	r0, [pc, #228]	; (8007af0 <_printf_i+0x21c>)
 8007a0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007a10:	6813      	ldr	r3, [r2, #0]
 8007a12:	6821      	ldr	r1, [r4, #0]
 8007a14:	1d1d      	adds	r5, r3, #4
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6015      	str	r5, [r2, #0]
 8007a1a:	060a      	lsls	r2, r1, #24
 8007a1c:	d50b      	bpl.n	8007a36 <_printf_i+0x162>
 8007a1e:	07ca      	lsls	r2, r1, #31
 8007a20:	bf44      	itt	mi
 8007a22:	f041 0120 	orrmi.w	r1, r1, #32
 8007a26:	6021      	strmi	r1, [r4, #0]
 8007a28:	b91b      	cbnz	r3, 8007a32 <_printf_i+0x15e>
 8007a2a:	6822      	ldr	r2, [r4, #0]
 8007a2c:	f022 0220 	bic.w	r2, r2, #32
 8007a30:	6022      	str	r2, [r4, #0]
 8007a32:	2210      	movs	r2, #16
 8007a34:	e7b7      	b.n	80079a6 <_printf_i+0xd2>
 8007a36:	064d      	lsls	r5, r1, #25
 8007a38:	bf48      	it	mi
 8007a3a:	b29b      	uxthmi	r3, r3
 8007a3c:	e7ef      	b.n	8007a1e <_printf_i+0x14a>
 8007a3e:	4665      	mov	r5, ip
 8007a40:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a44:	fb02 3311 	mls	r3, r2, r1, r3
 8007a48:	5cc3      	ldrb	r3, [r0, r3]
 8007a4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007a4e:	460b      	mov	r3, r1
 8007a50:	2900      	cmp	r1, #0
 8007a52:	d1f5      	bne.n	8007a40 <_printf_i+0x16c>
 8007a54:	e7b9      	b.n	80079ca <_printf_i+0xf6>
 8007a56:	6813      	ldr	r3, [r2, #0]
 8007a58:	6825      	ldr	r5, [r4, #0]
 8007a5a:	6961      	ldr	r1, [r4, #20]
 8007a5c:	1d18      	adds	r0, r3, #4
 8007a5e:	6010      	str	r0, [r2, #0]
 8007a60:	0628      	lsls	r0, r5, #24
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	d501      	bpl.n	8007a6a <_printf_i+0x196>
 8007a66:	6019      	str	r1, [r3, #0]
 8007a68:	e002      	b.n	8007a70 <_printf_i+0x19c>
 8007a6a:	066a      	lsls	r2, r5, #25
 8007a6c:	d5fb      	bpl.n	8007a66 <_printf_i+0x192>
 8007a6e:	8019      	strh	r1, [r3, #0]
 8007a70:	2300      	movs	r3, #0
 8007a72:	6123      	str	r3, [r4, #16]
 8007a74:	4665      	mov	r5, ip
 8007a76:	e7b9      	b.n	80079ec <_printf_i+0x118>
 8007a78:	6813      	ldr	r3, [r2, #0]
 8007a7a:	1d19      	adds	r1, r3, #4
 8007a7c:	6011      	str	r1, [r2, #0]
 8007a7e:	681d      	ldr	r5, [r3, #0]
 8007a80:	6862      	ldr	r2, [r4, #4]
 8007a82:	2100      	movs	r1, #0
 8007a84:	4628      	mov	r0, r5
 8007a86:	f7f8 fc33 	bl	80002f0 <memchr>
 8007a8a:	b108      	cbz	r0, 8007a90 <_printf_i+0x1bc>
 8007a8c:	1b40      	subs	r0, r0, r5
 8007a8e:	6060      	str	r0, [r4, #4]
 8007a90:	6863      	ldr	r3, [r4, #4]
 8007a92:	6123      	str	r3, [r4, #16]
 8007a94:	2300      	movs	r3, #0
 8007a96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a9a:	e7a7      	b.n	80079ec <_printf_i+0x118>
 8007a9c:	6923      	ldr	r3, [r4, #16]
 8007a9e:	462a      	mov	r2, r5
 8007aa0:	4639      	mov	r1, r7
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	47c0      	blx	r8
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	d0aa      	beq.n	8007a00 <_printf_i+0x12c>
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	079b      	lsls	r3, r3, #30
 8007aae:	d413      	bmi.n	8007ad8 <_printf_i+0x204>
 8007ab0:	68e0      	ldr	r0, [r4, #12]
 8007ab2:	9b03      	ldr	r3, [sp, #12]
 8007ab4:	4298      	cmp	r0, r3
 8007ab6:	bfb8      	it	lt
 8007ab8:	4618      	movlt	r0, r3
 8007aba:	e7a3      	b.n	8007a04 <_printf_i+0x130>
 8007abc:	2301      	movs	r3, #1
 8007abe:	464a      	mov	r2, r9
 8007ac0:	4639      	mov	r1, r7
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	47c0      	blx	r8
 8007ac6:	3001      	adds	r0, #1
 8007ac8:	d09a      	beq.n	8007a00 <_printf_i+0x12c>
 8007aca:	3501      	adds	r5, #1
 8007acc:	68e3      	ldr	r3, [r4, #12]
 8007ace:	9a03      	ldr	r2, [sp, #12]
 8007ad0:	1a9b      	subs	r3, r3, r2
 8007ad2:	42ab      	cmp	r3, r5
 8007ad4:	dcf2      	bgt.n	8007abc <_printf_i+0x1e8>
 8007ad6:	e7eb      	b.n	8007ab0 <_printf_i+0x1dc>
 8007ad8:	2500      	movs	r5, #0
 8007ada:	f104 0919 	add.w	r9, r4, #25
 8007ade:	e7f5      	b.n	8007acc <_printf_i+0x1f8>
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1ac      	bne.n	8007a3e <_printf_i+0x16a>
 8007ae4:	7803      	ldrb	r3, [r0, #0]
 8007ae6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007aea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aee:	e76c      	b.n	80079ca <_printf_i+0xf6>
 8007af0:	08009566 	.word	0x08009566
 8007af4:	08009577 	.word	0x08009577

08007af8 <_sbrk_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4c06      	ldr	r4, [pc, #24]	; (8007b14 <_sbrk_r+0x1c>)
 8007afc:	2300      	movs	r3, #0
 8007afe:	4605      	mov	r5, r0
 8007b00:	4608      	mov	r0, r1
 8007b02:	6023      	str	r3, [r4, #0]
 8007b04:	f7f9 fe1a 	bl	800173c <_sbrk>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	d102      	bne.n	8007b12 <_sbrk_r+0x1a>
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	b103      	cbz	r3, 8007b12 <_sbrk_r+0x1a>
 8007b10:	602b      	str	r3, [r5, #0]
 8007b12:	bd38      	pop	{r3, r4, r5, pc}
 8007b14:	20007320 	.word	0x20007320

08007b18 <siprintf>:
 8007b18:	b40e      	push	{r1, r2, r3}
 8007b1a:	b500      	push	{lr}
 8007b1c:	b09c      	sub	sp, #112	; 0x70
 8007b1e:	ab1d      	add	r3, sp, #116	; 0x74
 8007b20:	9002      	str	r0, [sp, #8]
 8007b22:	9006      	str	r0, [sp, #24]
 8007b24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b28:	4809      	ldr	r0, [pc, #36]	; (8007b50 <siprintf+0x38>)
 8007b2a:	9107      	str	r1, [sp, #28]
 8007b2c:	9104      	str	r1, [sp, #16]
 8007b2e:	4909      	ldr	r1, [pc, #36]	; (8007b54 <siprintf+0x3c>)
 8007b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b34:	9105      	str	r1, [sp, #20]
 8007b36:	6800      	ldr	r0, [r0, #0]
 8007b38:	9301      	str	r3, [sp, #4]
 8007b3a:	a902      	add	r1, sp, #8
 8007b3c:	f001 f942 	bl	8008dc4 <_svfiprintf_r>
 8007b40:	9b02      	ldr	r3, [sp, #8]
 8007b42:	2200      	movs	r2, #0
 8007b44:	701a      	strb	r2, [r3, #0]
 8007b46:	b01c      	add	sp, #112	; 0x70
 8007b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b4c:	b003      	add	sp, #12
 8007b4e:	4770      	bx	lr
 8007b50:	20000010 	.word	0x20000010
 8007b54:	ffff0208 	.word	0xffff0208

08007b58 <quorem>:
 8007b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5c:	6903      	ldr	r3, [r0, #16]
 8007b5e:	690c      	ldr	r4, [r1, #16]
 8007b60:	42a3      	cmp	r3, r4
 8007b62:	4680      	mov	r8, r0
 8007b64:	f2c0 8082 	blt.w	8007c6c <quorem+0x114>
 8007b68:	3c01      	subs	r4, #1
 8007b6a:	f101 0714 	add.w	r7, r1, #20
 8007b6e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007b72:	f100 0614 	add.w	r6, r0, #20
 8007b76:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007b7a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007b7e:	eb06 030c 	add.w	r3, r6, ip
 8007b82:	3501      	adds	r5, #1
 8007b84:	eb07 090c 	add.w	r9, r7, ip
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	fbb0 f5f5 	udiv	r5, r0, r5
 8007b8e:	b395      	cbz	r5, 8007bf6 <quorem+0x9e>
 8007b90:	f04f 0a00 	mov.w	sl, #0
 8007b94:	4638      	mov	r0, r7
 8007b96:	46b6      	mov	lr, r6
 8007b98:	46d3      	mov	fp, sl
 8007b9a:	f850 2b04 	ldr.w	r2, [r0], #4
 8007b9e:	b293      	uxth	r3, r2
 8007ba0:	fb05 a303 	mla	r3, r5, r3, sl
 8007ba4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	ebab 0303 	sub.w	r3, fp, r3
 8007bae:	0c12      	lsrs	r2, r2, #16
 8007bb0:	f8de b000 	ldr.w	fp, [lr]
 8007bb4:	fb05 a202 	mla	r2, r5, r2, sl
 8007bb8:	fa13 f38b 	uxtah	r3, r3, fp
 8007bbc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007bc0:	fa1f fb82 	uxth.w	fp, r2
 8007bc4:	f8de 2000 	ldr.w	r2, [lr]
 8007bc8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007bcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bd6:	4581      	cmp	r9, r0
 8007bd8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007bdc:	f84e 3b04 	str.w	r3, [lr], #4
 8007be0:	d2db      	bcs.n	8007b9a <quorem+0x42>
 8007be2:	f856 300c 	ldr.w	r3, [r6, ip]
 8007be6:	b933      	cbnz	r3, 8007bf6 <quorem+0x9e>
 8007be8:	9b01      	ldr	r3, [sp, #4]
 8007bea:	3b04      	subs	r3, #4
 8007bec:	429e      	cmp	r6, r3
 8007bee:	461a      	mov	r2, r3
 8007bf0:	d330      	bcc.n	8007c54 <quorem+0xfc>
 8007bf2:	f8c8 4010 	str.w	r4, [r8, #16]
 8007bf6:	4640      	mov	r0, r8
 8007bf8:	f000 ffb6 	bl	8008b68 <__mcmp>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	db25      	blt.n	8007c4c <quorem+0xf4>
 8007c00:	3501      	adds	r5, #1
 8007c02:	4630      	mov	r0, r6
 8007c04:	f04f 0c00 	mov.w	ip, #0
 8007c08:	f857 2b04 	ldr.w	r2, [r7], #4
 8007c0c:	f8d0 e000 	ldr.w	lr, [r0]
 8007c10:	b293      	uxth	r3, r2
 8007c12:	ebac 0303 	sub.w	r3, ip, r3
 8007c16:	0c12      	lsrs	r2, r2, #16
 8007c18:	fa13 f38e 	uxtah	r3, r3, lr
 8007c1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c2a:	45b9      	cmp	r9, r7
 8007c2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c30:	f840 3b04 	str.w	r3, [r0], #4
 8007c34:	d2e8      	bcs.n	8007c08 <quorem+0xb0>
 8007c36:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007c3a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007c3e:	b92a      	cbnz	r2, 8007c4c <quorem+0xf4>
 8007c40:	3b04      	subs	r3, #4
 8007c42:	429e      	cmp	r6, r3
 8007c44:	461a      	mov	r2, r3
 8007c46:	d30b      	bcc.n	8007c60 <quorem+0x108>
 8007c48:	f8c8 4010 	str.w	r4, [r8, #16]
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	b003      	add	sp, #12
 8007c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c54:	6812      	ldr	r2, [r2, #0]
 8007c56:	3b04      	subs	r3, #4
 8007c58:	2a00      	cmp	r2, #0
 8007c5a:	d1ca      	bne.n	8007bf2 <quorem+0x9a>
 8007c5c:	3c01      	subs	r4, #1
 8007c5e:	e7c5      	b.n	8007bec <quorem+0x94>
 8007c60:	6812      	ldr	r2, [r2, #0]
 8007c62:	3b04      	subs	r3, #4
 8007c64:	2a00      	cmp	r2, #0
 8007c66:	d1ef      	bne.n	8007c48 <quorem+0xf0>
 8007c68:	3c01      	subs	r4, #1
 8007c6a:	e7ea      	b.n	8007c42 <quorem+0xea>
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	e7ee      	b.n	8007c4e <quorem+0xf6>

08007c70 <_dtoa_r>:
 8007c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c74:	ec57 6b10 	vmov	r6, r7, d0
 8007c78:	b095      	sub	sp, #84	; 0x54
 8007c7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c7c:	9108      	str	r1, [sp, #32]
 8007c7e:	4604      	mov	r4, r0
 8007c80:	920a      	str	r2, [sp, #40]	; 0x28
 8007c82:	9311      	str	r3, [sp, #68]	; 0x44
 8007c84:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8007c88:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007c8c:	b93d      	cbnz	r5, 8007c9e <_dtoa_r+0x2e>
 8007c8e:	2010      	movs	r0, #16
 8007c90:	f7ff fa36 	bl	8007100 <malloc>
 8007c94:	6260      	str	r0, [r4, #36]	; 0x24
 8007c96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007c9a:	6005      	str	r5, [r0, #0]
 8007c9c:	60c5      	str	r5, [r0, #12]
 8007c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ca0:	6819      	ldr	r1, [r3, #0]
 8007ca2:	b151      	cbz	r1, 8007cba <_dtoa_r+0x4a>
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	604a      	str	r2, [r1, #4]
 8007ca8:	2301      	movs	r3, #1
 8007caa:	4093      	lsls	r3, r2
 8007cac:	608b      	str	r3, [r1, #8]
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f000 fd79 	bl	80087a6 <_Bfree>
 8007cb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	1e3b      	subs	r3, r7, #0
 8007cbc:	bfb9      	ittee	lt
 8007cbe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007cc2:	9303      	strlt	r3, [sp, #12]
 8007cc4:	2300      	movge	r3, #0
 8007cc6:	f8c8 3000 	strge.w	r3, [r8]
 8007cca:	9d03      	ldr	r5, [sp, #12]
 8007ccc:	4bac      	ldr	r3, [pc, #688]	; (8007f80 <_dtoa_r+0x310>)
 8007cce:	bfbc      	itt	lt
 8007cd0:	2201      	movlt	r2, #1
 8007cd2:	f8c8 2000 	strlt.w	r2, [r8]
 8007cd6:	43ab      	bics	r3, r5
 8007cd8:	d11b      	bne.n	8007d12 <_dtoa_r+0xa2>
 8007cda:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007cdc:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	9b02      	ldr	r3, [sp, #8]
 8007ce4:	b923      	cbnz	r3, 8007cf0 <_dtoa_r+0x80>
 8007ce6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007cea:	2d00      	cmp	r5, #0
 8007cec:	f000 84dd 	beq.w	80086aa <_dtoa_r+0xa3a>
 8007cf0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007cf2:	b953      	cbnz	r3, 8007d0a <_dtoa_r+0x9a>
 8007cf4:	4ba3      	ldr	r3, [pc, #652]	; (8007f84 <_dtoa_r+0x314>)
 8007cf6:	e020      	b.n	8007d3a <_dtoa_r+0xca>
 8007cf8:	4ba3      	ldr	r3, [pc, #652]	; (8007f88 <_dtoa_r+0x318>)
 8007cfa:	9304      	str	r3, [sp, #16]
 8007cfc:	3308      	adds	r3, #8
 8007cfe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	9804      	ldr	r0, [sp, #16]
 8007d04:	b015      	add	sp, #84	; 0x54
 8007d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d0a:	4b9e      	ldr	r3, [pc, #632]	; (8007f84 <_dtoa_r+0x314>)
 8007d0c:	9304      	str	r3, [sp, #16]
 8007d0e:	3303      	adds	r3, #3
 8007d10:	e7f5      	b.n	8007cfe <_dtoa_r+0x8e>
 8007d12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d16:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d1e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007d22:	d10c      	bne.n	8007d3e <_dtoa_r+0xce>
 8007d24:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007d26:	2301      	movs	r3, #1
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 84b9 	beq.w	80086a4 <_dtoa_r+0xa34>
 8007d32:	4b96      	ldr	r3, [pc, #600]	; (8007f8c <_dtoa_r+0x31c>)
 8007d34:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	9304      	str	r3, [sp, #16]
 8007d3c:	e7e1      	b.n	8007d02 <_dtoa_r+0x92>
 8007d3e:	a913      	add	r1, sp, #76	; 0x4c
 8007d40:	aa12      	add	r2, sp, #72	; 0x48
 8007d42:	ed9d 0b04 	vldr	d0, [sp, #16]
 8007d46:	4620      	mov	r0, r4
 8007d48:	f000 ff85 	bl	8008c56 <__d2b>
 8007d4c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8007d50:	9001      	str	r0, [sp, #4]
 8007d52:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007d54:	2e00      	cmp	r6, #0
 8007d56:	d046      	beq.n	8007de6 <_dtoa_r+0x176>
 8007d58:	9805      	ldr	r0, [sp, #20]
 8007d5a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8007d5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d62:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8007d66:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007d6a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8007d6e:	2700      	movs	r7, #0
 8007d70:	ee07 aa90 	vmov	s15, sl
 8007d74:	ec43 2b16 	vmov	d6, r2, r3
 8007d78:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8007d7c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8007f68 <_dtoa_r+0x2f8>
 8007d80:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007d84:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007d88:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8007f70 <_dtoa_r+0x300>
 8007d8c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8007d90:	eeb0 7b46 	vmov.f64	d7, d6
 8007d94:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8007f78 <_dtoa_r+0x308>
 8007d98:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007d9c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007da0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007da8:	ee16 ba90 	vmov	fp, s13
 8007dac:	d508      	bpl.n	8007dc0 <_dtoa_r+0x150>
 8007dae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007db2:	eeb4 6b47 	vcmp.f64	d6, d7
 8007db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dba:	bf18      	it	ne
 8007dbc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007dc0:	f1bb 0f16 	cmp.w	fp, #22
 8007dc4:	d834      	bhi.n	8007e30 <_dtoa_r+0x1c0>
 8007dc6:	4b72      	ldr	r3, [pc, #456]	; (8007f90 <_dtoa_r+0x320>)
 8007dc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007dcc:	ed93 7b00 	vldr	d7, [r3]
 8007dd0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007dd4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ddc:	dd01      	ble.n	8007de2 <_dtoa_r+0x172>
 8007dde:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007de2:	2300      	movs	r3, #0
 8007de4:	e025      	b.n	8007e32 <_dtoa_r+0x1c2>
 8007de6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007de8:	eb01 0a03 	add.w	sl, r1, r3
 8007dec:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8007df0:	2b20      	cmp	r3, #32
 8007df2:	dd17      	ble.n	8007e24 <_dtoa_r+0x1b4>
 8007df4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007df8:	9a02      	ldr	r2, [sp, #8]
 8007dfa:	409d      	lsls	r5, r3
 8007dfc:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8007e00:	fa22 f303 	lsr.w	r3, r2, r3
 8007e04:	432b      	orrs	r3, r5
 8007e06:	ee07 3a90 	vmov	s15, r3
 8007e0a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007e0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e12:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007e16:	9805      	ldr	r0, [sp, #20]
 8007e18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e1c:	2701      	movs	r7, #1
 8007e1e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8007e22:	e7a5      	b.n	8007d70 <_dtoa_r+0x100>
 8007e24:	9a02      	ldr	r2, [sp, #8]
 8007e26:	f1c3 0320 	rsb	r3, r3, #32
 8007e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2e:	e7ea      	b.n	8007e06 <_dtoa_r+0x196>
 8007e30:	2301      	movs	r3, #1
 8007e32:	eba1 0a0a 	sub.w	sl, r1, sl
 8007e36:	9310      	str	r3, [sp, #64]	; 0x40
 8007e38:	f1ba 0301 	subs.w	r3, sl, #1
 8007e3c:	9307      	str	r3, [sp, #28]
 8007e3e:	bf43      	ittte	mi
 8007e40:	2300      	movmi	r3, #0
 8007e42:	f1ca 0a01 	rsbmi	sl, sl, #1
 8007e46:	9307      	strmi	r3, [sp, #28]
 8007e48:	f04f 0a00 	movpl.w	sl, #0
 8007e4c:	f1bb 0f00 	cmp.w	fp, #0
 8007e50:	db19      	blt.n	8007e86 <_dtoa_r+0x216>
 8007e52:	9b07      	ldr	r3, [sp, #28]
 8007e54:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007e58:	445b      	add	r3, fp
 8007e5a:	9307      	str	r3, [sp, #28]
 8007e5c:	f04f 0800 	mov.w	r8, #0
 8007e60:	9b08      	ldr	r3, [sp, #32]
 8007e62:	2b09      	cmp	r3, #9
 8007e64:	d866      	bhi.n	8007f34 <_dtoa_r+0x2c4>
 8007e66:	2b05      	cmp	r3, #5
 8007e68:	bfc4      	itt	gt
 8007e6a:	3b04      	subgt	r3, #4
 8007e6c:	9308      	strgt	r3, [sp, #32]
 8007e6e:	9b08      	ldr	r3, [sp, #32]
 8007e70:	f1a3 0302 	sub.w	r3, r3, #2
 8007e74:	bfcc      	ite	gt
 8007e76:	2500      	movgt	r5, #0
 8007e78:	2501      	movle	r5, #1
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	d866      	bhi.n	8007f4c <_dtoa_r+0x2dc>
 8007e7e:	e8df f003 	tbb	[pc, r3]
 8007e82:	5755      	.short	0x5755
 8007e84:	4909      	.short	0x4909
 8007e86:	2300      	movs	r3, #0
 8007e88:	ebaa 0a0b 	sub.w	sl, sl, fp
 8007e8c:	f1cb 0800 	rsb	r8, fp, #0
 8007e90:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e92:	e7e5      	b.n	8007e60 <_dtoa_r+0x1f0>
 8007e94:	2301      	movs	r3, #1
 8007e96:	9309      	str	r3, [sp, #36]	; 0x24
 8007e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	dd59      	ble.n	8007f52 <_dtoa_r+0x2e2>
 8007e9e:	9306      	str	r3, [sp, #24]
 8007ea0:	4699      	mov	r9, r3
 8007ea2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	6072      	str	r2, [r6, #4]
 8007ea8:	2204      	movs	r2, #4
 8007eaa:	f102 0014 	add.w	r0, r2, #20
 8007eae:	4298      	cmp	r0, r3
 8007eb0:	6871      	ldr	r1, [r6, #4]
 8007eb2:	d953      	bls.n	8007f5c <_dtoa_r+0x2ec>
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f000 fc42 	bl	800873e <_Balloc>
 8007eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ebc:	6030      	str	r0, [r6, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	9304      	str	r3, [sp, #16]
 8007ec2:	f1b9 0f0e 	cmp.w	r9, #14
 8007ec6:	f200 80c2 	bhi.w	800804e <_dtoa_r+0x3de>
 8007eca:	2d00      	cmp	r5, #0
 8007ecc:	f000 80bf 	beq.w	800804e <_dtoa_r+0x3de>
 8007ed0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ed4:	f1bb 0f00 	cmp.w	fp, #0
 8007ed8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8007edc:	f340 80e6 	ble.w	80080ac <_dtoa_r+0x43c>
 8007ee0:	4a2b      	ldr	r2, [pc, #172]	; (8007f90 <_dtoa_r+0x320>)
 8007ee2:	f00b 030f 	and.w	r3, fp, #15
 8007ee6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007eea:	ed93 7b00 	vldr	d7, [r3]
 8007eee:	ea4f 132b 	mov.w	r3, fp, asr #4
 8007ef2:	06da      	lsls	r2, r3, #27
 8007ef4:	f140 80d8 	bpl.w	80080a8 <_dtoa_r+0x438>
 8007ef8:	4a26      	ldr	r2, [pc, #152]	; (8007f94 <_dtoa_r+0x324>)
 8007efa:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8007efe:	ed92 6b08 	vldr	d6, [r2, #32]
 8007f02:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8007f06:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007f0a:	f003 030f 	and.w	r3, r3, #15
 8007f0e:	2203      	movs	r2, #3
 8007f10:	4920      	ldr	r1, [pc, #128]	; (8007f94 <_dtoa_r+0x324>)
 8007f12:	e04a      	b.n	8007faa <_dtoa_r+0x33a>
 8007f14:	2301      	movs	r3, #1
 8007f16:	9309      	str	r3, [sp, #36]	; 0x24
 8007f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f1a:	445b      	add	r3, fp
 8007f1c:	f103 0901 	add.w	r9, r3, #1
 8007f20:	9306      	str	r3, [sp, #24]
 8007f22:	464b      	mov	r3, r9
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	bfb8      	it	lt
 8007f28:	2301      	movlt	r3, #1
 8007f2a:	e7ba      	b.n	8007ea2 <_dtoa_r+0x232>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	e7b2      	b.n	8007e96 <_dtoa_r+0x226>
 8007f30:	2300      	movs	r3, #0
 8007f32:	e7f0      	b.n	8007f16 <_dtoa_r+0x2a6>
 8007f34:	2501      	movs	r5, #1
 8007f36:	2300      	movs	r3, #0
 8007f38:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8007f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f40:	9306      	str	r3, [sp, #24]
 8007f42:	4699      	mov	r9, r3
 8007f44:	2200      	movs	r2, #0
 8007f46:	2312      	movs	r3, #18
 8007f48:	920a      	str	r2, [sp, #40]	; 0x28
 8007f4a:	e7aa      	b.n	8007ea2 <_dtoa_r+0x232>
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f50:	e7f4      	b.n	8007f3c <_dtoa_r+0x2cc>
 8007f52:	2301      	movs	r3, #1
 8007f54:	9306      	str	r3, [sp, #24]
 8007f56:	4699      	mov	r9, r3
 8007f58:	461a      	mov	r2, r3
 8007f5a:	e7f5      	b.n	8007f48 <_dtoa_r+0x2d8>
 8007f5c:	3101      	adds	r1, #1
 8007f5e:	6071      	str	r1, [r6, #4]
 8007f60:	0052      	lsls	r2, r2, #1
 8007f62:	e7a2      	b.n	8007eaa <_dtoa_r+0x23a>
 8007f64:	f3af 8000 	nop.w
 8007f68:	636f4361 	.word	0x636f4361
 8007f6c:	3fd287a7 	.word	0x3fd287a7
 8007f70:	8b60c8b3 	.word	0x8b60c8b3
 8007f74:	3fc68a28 	.word	0x3fc68a28
 8007f78:	509f79fb 	.word	0x509f79fb
 8007f7c:	3fd34413 	.word	0x3fd34413
 8007f80:	7ff00000 	.word	0x7ff00000
 8007f84:	08009591 	.word	0x08009591
 8007f88:	08009588 	.word	0x08009588
 8007f8c:	08009565 	.word	0x08009565
 8007f90:	080095c0 	.word	0x080095c0
 8007f94:	08009598 	.word	0x08009598
 8007f98:	07de      	lsls	r6, r3, #31
 8007f9a:	d504      	bpl.n	8007fa6 <_dtoa_r+0x336>
 8007f9c:	ed91 6b00 	vldr	d6, [r1]
 8007fa0:	3201      	adds	r2, #1
 8007fa2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007fa6:	105b      	asrs	r3, r3, #1
 8007fa8:	3108      	adds	r1, #8
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1f4      	bne.n	8007f98 <_dtoa_r+0x328>
 8007fae:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007fb2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007fb6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007fba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f000 80a7 	beq.w	8008110 <_dtoa_r+0x4a0>
 8007fc2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007fc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007fca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fd2:	f140 809d 	bpl.w	8008110 <_dtoa_r+0x4a0>
 8007fd6:	f1b9 0f00 	cmp.w	r9, #0
 8007fda:	f000 8099 	beq.w	8008110 <_dtoa_r+0x4a0>
 8007fde:	9b06      	ldr	r3, [sp, #24]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	dd30      	ble.n	8008046 <_dtoa_r+0x3d6>
 8007fe4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007fe8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007fec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ff0:	9d06      	ldr	r5, [sp, #24]
 8007ff2:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007ff6:	3201      	adds	r2, #1
 8007ff8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007ffc:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008000:	ee07 2a90 	vmov	s15, r2
 8008004:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008008:	eea7 5b06 	vfma.f64	d5, d7, d6
 800800c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008010:	9a03      	ldr	r2, [sp, #12]
 8008012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008016:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800801a:	2d00      	cmp	r5, #0
 800801c:	d17b      	bne.n	8008116 <_dtoa_r+0x4a6>
 800801e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008022:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008026:	ec41 0b17 	vmov	d7, r0, r1
 800802a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800802e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008032:	f300 8253 	bgt.w	80084dc <_dtoa_r+0x86c>
 8008036:	eeb1 7b47 	vneg.f64	d7, d7
 800803a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800803e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008042:	f100 8249 	bmi.w	80084d8 <_dtoa_r+0x868>
 8008046:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800804a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800804e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008050:	2b00      	cmp	r3, #0
 8008052:	f2c0 8119 	blt.w	8008288 <_dtoa_r+0x618>
 8008056:	f1bb 0f0e 	cmp.w	fp, #14
 800805a:	f300 8115 	bgt.w	8008288 <_dtoa_r+0x618>
 800805e:	4bc3      	ldr	r3, [pc, #780]	; (800836c <_dtoa_r+0x6fc>)
 8008060:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008064:	ed93 6b00 	vldr	d6, [r3]
 8008068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800806a:	2b00      	cmp	r3, #0
 800806c:	f280 80ba 	bge.w	80081e4 <_dtoa_r+0x574>
 8008070:	f1b9 0f00 	cmp.w	r9, #0
 8008074:	f300 80b6 	bgt.w	80081e4 <_dtoa_r+0x574>
 8008078:	f040 822d 	bne.w	80084d6 <_dtoa_r+0x866>
 800807c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008080:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008084:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008088:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800808c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008090:	464d      	mov	r5, r9
 8008092:	464f      	mov	r7, r9
 8008094:	f280 8204 	bge.w	80084a0 <_dtoa_r+0x830>
 8008098:	9b04      	ldr	r3, [sp, #16]
 800809a:	9a04      	ldr	r2, [sp, #16]
 800809c:	1c5e      	adds	r6, r3, #1
 800809e:	2331      	movs	r3, #49	; 0x31
 80080a0:	7013      	strb	r3, [r2, #0]
 80080a2:	f10b 0b01 	add.w	fp, fp, #1
 80080a6:	e1ff      	b.n	80084a8 <_dtoa_r+0x838>
 80080a8:	2202      	movs	r2, #2
 80080aa:	e731      	b.n	8007f10 <_dtoa_r+0x2a0>
 80080ac:	d02e      	beq.n	800810c <_dtoa_r+0x49c>
 80080ae:	f1cb 0300 	rsb	r3, fp, #0
 80080b2:	4aae      	ldr	r2, [pc, #696]	; (800836c <_dtoa_r+0x6fc>)
 80080b4:	f003 010f 	and.w	r1, r3, #15
 80080b8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80080bc:	ed92 7b00 	vldr	d7, [r2]
 80080c0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80080c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80080c8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80080cc:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80080d0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80080d4:	49a6      	ldr	r1, [pc, #664]	; (8008370 <_dtoa_r+0x700>)
 80080d6:	111b      	asrs	r3, r3, #4
 80080d8:	2000      	movs	r0, #0
 80080da:	2202      	movs	r2, #2
 80080dc:	b93b      	cbnz	r3, 80080ee <_dtoa_r+0x47e>
 80080de:	2800      	cmp	r0, #0
 80080e0:	f43f af6b 	beq.w	8007fba <_dtoa_r+0x34a>
 80080e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080ec:	e765      	b.n	8007fba <_dtoa_r+0x34a>
 80080ee:	07dd      	lsls	r5, r3, #31
 80080f0:	d509      	bpl.n	8008106 <_dtoa_r+0x496>
 80080f2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80080f6:	ed91 7b00 	vldr	d7, [r1]
 80080fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80080fe:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008102:	3201      	adds	r2, #1
 8008104:	2001      	movs	r0, #1
 8008106:	105b      	asrs	r3, r3, #1
 8008108:	3108      	adds	r1, #8
 800810a:	e7e7      	b.n	80080dc <_dtoa_r+0x46c>
 800810c:	2202      	movs	r2, #2
 800810e:	e754      	b.n	8007fba <_dtoa_r+0x34a>
 8008110:	465b      	mov	r3, fp
 8008112:	464d      	mov	r5, r9
 8008114:	e770      	b.n	8007ff8 <_dtoa_r+0x388>
 8008116:	4a95      	ldr	r2, [pc, #596]	; (800836c <_dtoa_r+0x6fc>)
 8008118:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800811c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008120:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008122:	ec41 0b17 	vmov	d7, r0, r1
 8008126:	b35a      	cbz	r2, 8008180 <_dtoa_r+0x510>
 8008128:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800812c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008130:	9e04      	ldr	r6, [sp, #16]
 8008132:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008136:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800813a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800813e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008142:	ee14 2a90 	vmov	r2, s9
 8008146:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800814a:	3230      	adds	r2, #48	; 0x30
 800814c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008150:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008158:	f806 2b01 	strb.w	r2, [r6], #1
 800815c:	d43b      	bmi.n	80081d6 <_dtoa_r+0x566>
 800815e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008162:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800816a:	d472      	bmi.n	8008252 <_dtoa_r+0x5e2>
 800816c:	9a04      	ldr	r2, [sp, #16]
 800816e:	1ab2      	subs	r2, r6, r2
 8008170:	4295      	cmp	r5, r2
 8008172:	f77f af68 	ble.w	8008046 <_dtoa_r+0x3d6>
 8008176:	ee27 7b03 	vmul.f64	d7, d7, d3
 800817a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800817e:	e7de      	b.n	800813e <_dtoa_r+0x4ce>
 8008180:	9a04      	ldr	r2, [sp, #16]
 8008182:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008186:	1956      	adds	r6, r2, r5
 8008188:	4611      	mov	r1, r2
 800818a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800818e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008192:	ee14 2a90 	vmov	r2, s9
 8008196:	3230      	adds	r2, #48	; 0x30
 8008198:	f801 2b01 	strb.w	r2, [r1], #1
 800819c:	42b1      	cmp	r1, r6
 800819e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80081a2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80081a6:	d11a      	bne.n	80081de <_dtoa_r+0x56e>
 80081a8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80081ac:	ee37 4b05 	vadd.f64	d4, d7, d5
 80081b0:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80081b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081b8:	dc4b      	bgt.n	8008252 <_dtoa_r+0x5e2>
 80081ba:	ee35 7b47 	vsub.f64	d7, d5, d7
 80081be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80081c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081c6:	f57f af3e 	bpl.w	8008046 <_dtoa_r+0x3d6>
 80081ca:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80081ce:	2a30      	cmp	r2, #48	; 0x30
 80081d0:	f106 31ff 	add.w	r1, r6, #4294967295
 80081d4:	d001      	beq.n	80081da <_dtoa_r+0x56a>
 80081d6:	469b      	mov	fp, r3
 80081d8:	e02a      	b.n	8008230 <_dtoa_r+0x5c0>
 80081da:	460e      	mov	r6, r1
 80081dc:	e7f5      	b.n	80081ca <_dtoa_r+0x55a>
 80081de:	ee26 6b03 	vmul.f64	d6, d6, d3
 80081e2:	e7d4      	b.n	800818e <_dtoa_r+0x51e>
 80081e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081e8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80081ec:	9e04      	ldr	r6, [sp, #16]
 80081ee:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80081f2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80081f6:	ee15 3a10 	vmov	r3, s10
 80081fa:	3330      	adds	r3, #48	; 0x30
 80081fc:	f806 3b01 	strb.w	r3, [r6], #1
 8008200:	9b04      	ldr	r3, [sp, #16]
 8008202:	1af3      	subs	r3, r6, r3
 8008204:	4599      	cmp	r9, r3
 8008206:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800820a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800820e:	d133      	bne.n	8008278 <_dtoa_r+0x608>
 8008210:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008214:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800821c:	dc18      	bgt.n	8008250 <_dtoa_r+0x5e0>
 800821e:	eeb4 7b46 	vcmp.f64	d7, d6
 8008222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008226:	d103      	bne.n	8008230 <_dtoa_r+0x5c0>
 8008228:	ee15 3a10 	vmov	r3, s10
 800822c:	07db      	lsls	r3, r3, #31
 800822e:	d40f      	bmi.n	8008250 <_dtoa_r+0x5e0>
 8008230:	9901      	ldr	r1, [sp, #4]
 8008232:	4620      	mov	r0, r4
 8008234:	f000 fab7 	bl	80087a6 <_Bfree>
 8008238:	2300      	movs	r3, #0
 800823a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800823c:	7033      	strb	r3, [r6, #0]
 800823e:	f10b 0301 	add.w	r3, fp, #1
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008246:	2b00      	cmp	r3, #0
 8008248:	f43f ad5b 	beq.w	8007d02 <_dtoa_r+0x92>
 800824c:	601e      	str	r6, [r3, #0]
 800824e:	e558      	b.n	8007d02 <_dtoa_r+0x92>
 8008250:	465b      	mov	r3, fp
 8008252:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008256:	2939      	cmp	r1, #57	; 0x39
 8008258:	f106 32ff 	add.w	r2, r6, #4294967295
 800825c:	d106      	bne.n	800826c <_dtoa_r+0x5fc>
 800825e:	9904      	ldr	r1, [sp, #16]
 8008260:	4291      	cmp	r1, r2
 8008262:	d107      	bne.n	8008274 <_dtoa_r+0x604>
 8008264:	2230      	movs	r2, #48	; 0x30
 8008266:	700a      	strb	r2, [r1, #0]
 8008268:	3301      	adds	r3, #1
 800826a:	460a      	mov	r2, r1
 800826c:	7811      	ldrb	r1, [r2, #0]
 800826e:	3101      	adds	r1, #1
 8008270:	7011      	strb	r1, [r2, #0]
 8008272:	e7b0      	b.n	80081d6 <_dtoa_r+0x566>
 8008274:	4616      	mov	r6, r2
 8008276:	e7ec      	b.n	8008252 <_dtoa_r+0x5e2>
 8008278:	ee27 7b04 	vmul.f64	d7, d7, d4
 800827c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008284:	d1b3      	bne.n	80081ee <_dtoa_r+0x57e>
 8008286:	e7d3      	b.n	8008230 <_dtoa_r+0x5c0>
 8008288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800828a:	2a00      	cmp	r2, #0
 800828c:	f000 808d 	beq.w	80083aa <_dtoa_r+0x73a>
 8008290:	9a08      	ldr	r2, [sp, #32]
 8008292:	2a01      	cmp	r2, #1
 8008294:	dc72      	bgt.n	800837c <_dtoa_r+0x70c>
 8008296:	2f00      	cmp	r7, #0
 8008298:	d06c      	beq.n	8008374 <_dtoa_r+0x704>
 800829a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800829e:	4645      	mov	r5, r8
 80082a0:	4656      	mov	r6, sl
 80082a2:	9a07      	ldr	r2, [sp, #28]
 80082a4:	2101      	movs	r1, #1
 80082a6:	441a      	add	r2, r3
 80082a8:	4620      	mov	r0, r4
 80082aa:	449a      	add	sl, r3
 80082ac:	9207      	str	r2, [sp, #28]
 80082ae:	f000 fb1a 	bl	80088e6 <__i2b>
 80082b2:	4607      	mov	r7, r0
 80082b4:	2e00      	cmp	r6, #0
 80082b6:	dd0b      	ble.n	80082d0 <_dtoa_r+0x660>
 80082b8:	9b07      	ldr	r3, [sp, #28]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	dd08      	ble.n	80082d0 <_dtoa_r+0x660>
 80082be:	42b3      	cmp	r3, r6
 80082c0:	9a07      	ldr	r2, [sp, #28]
 80082c2:	bfa8      	it	ge
 80082c4:	4633      	movge	r3, r6
 80082c6:	ebaa 0a03 	sub.w	sl, sl, r3
 80082ca:	1af6      	subs	r6, r6, r3
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	9307      	str	r3, [sp, #28]
 80082d0:	f1b8 0f00 	cmp.w	r8, #0
 80082d4:	d01d      	beq.n	8008312 <_dtoa_r+0x6a2>
 80082d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d06a      	beq.n	80083b2 <_dtoa_r+0x742>
 80082dc:	b18d      	cbz	r5, 8008302 <_dtoa_r+0x692>
 80082de:	4639      	mov	r1, r7
 80082e0:	462a      	mov	r2, r5
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 fb9e 	bl	8008a24 <__pow5mult>
 80082e8:	9a01      	ldr	r2, [sp, #4]
 80082ea:	4601      	mov	r1, r0
 80082ec:	4607      	mov	r7, r0
 80082ee:	4620      	mov	r0, r4
 80082f0:	f000 fb02 	bl	80088f8 <__multiply>
 80082f4:	9901      	ldr	r1, [sp, #4]
 80082f6:	900c      	str	r0, [sp, #48]	; 0x30
 80082f8:	4620      	mov	r0, r4
 80082fa:	f000 fa54 	bl	80087a6 <_Bfree>
 80082fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	ebb8 0205 	subs.w	r2, r8, r5
 8008306:	d004      	beq.n	8008312 <_dtoa_r+0x6a2>
 8008308:	9901      	ldr	r1, [sp, #4]
 800830a:	4620      	mov	r0, r4
 800830c:	f000 fb8a 	bl	8008a24 <__pow5mult>
 8008310:	9001      	str	r0, [sp, #4]
 8008312:	2101      	movs	r1, #1
 8008314:	4620      	mov	r0, r4
 8008316:	f000 fae6 	bl	80088e6 <__i2b>
 800831a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800831c:	4605      	mov	r5, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	f000 81ca 	beq.w	80086b8 <_dtoa_r+0xa48>
 8008324:	461a      	mov	r2, r3
 8008326:	4601      	mov	r1, r0
 8008328:	4620      	mov	r0, r4
 800832a:	f000 fb7b 	bl	8008a24 <__pow5mult>
 800832e:	9b08      	ldr	r3, [sp, #32]
 8008330:	2b01      	cmp	r3, #1
 8008332:	4605      	mov	r5, r0
 8008334:	dc44      	bgt.n	80083c0 <_dtoa_r+0x750>
 8008336:	9b02      	ldr	r3, [sp, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d13c      	bne.n	80083b6 <_dtoa_r+0x746>
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008342:	2b00      	cmp	r3, #0
 8008344:	d137      	bne.n	80083b6 <_dtoa_r+0x746>
 8008346:	9b03      	ldr	r3, [sp, #12]
 8008348:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800834c:	0d1b      	lsrs	r3, r3, #20
 800834e:	051b      	lsls	r3, r3, #20
 8008350:	2b00      	cmp	r3, #0
 8008352:	d033      	beq.n	80083bc <_dtoa_r+0x74c>
 8008354:	9b07      	ldr	r3, [sp, #28]
 8008356:	3301      	adds	r3, #1
 8008358:	f10a 0a01 	add.w	sl, sl, #1
 800835c:	9307      	str	r3, [sp, #28]
 800835e:	f04f 0801 	mov.w	r8, #1
 8008362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008364:	bb73      	cbnz	r3, 80083c4 <_dtoa_r+0x754>
 8008366:	2001      	movs	r0, #1
 8008368:	e034      	b.n	80083d4 <_dtoa_r+0x764>
 800836a:	bf00      	nop
 800836c:	080095c0 	.word	0x080095c0
 8008370:	08009598 	.word	0x08009598
 8008374:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008376:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800837a:	e790      	b.n	800829e <_dtoa_r+0x62e>
 800837c:	f109 35ff 	add.w	r5, r9, #4294967295
 8008380:	45a8      	cmp	r8, r5
 8008382:	bfbf      	itttt	lt
 8008384:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8008386:	eba5 0808 	sublt.w	r8, r5, r8
 800838a:	4443      	addlt	r3, r8
 800838c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800838e:	bfb6      	itet	lt
 8008390:	46a8      	movlt	r8, r5
 8008392:	eba8 0505 	subge.w	r5, r8, r5
 8008396:	2500      	movlt	r5, #0
 8008398:	f1b9 0f00 	cmp.w	r9, #0
 800839c:	bfb9      	ittee	lt
 800839e:	ebaa 0609 	sublt.w	r6, sl, r9
 80083a2:	2300      	movlt	r3, #0
 80083a4:	4656      	movge	r6, sl
 80083a6:	464b      	movge	r3, r9
 80083a8:	e77b      	b.n	80082a2 <_dtoa_r+0x632>
 80083aa:	4645      	mov	r5, r8
 80083ac:	4656      	mov	r6, sl
 80083ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80083b0:	e780      	b.n	80082b4 <_dtoa_r+0x644>
 80083b2:	4642      	mov	r2, r8
 80083b4:	e7a8      	b.n	8008308 <_dtoa_r+0x698>
 80083b6:	f04f 0800 	mov.w	r8, #0
 80083ba:	e7d2      	b.n	8008362 <_dtoa_r+0x6f2>
 80083bc:	4698      	mov	r8, r3
 80083be:	e7d0      	b.n	8008362 <_dtoa_r+0x6f2>
 80083c0:	f04f 0800 	mov.w	r8, #0
 80083c4:	692b      	ldr	r3, [r5, #16]
 80083c6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80083ca:	6918      	ldr	r0, [r3, #16]
 80083cc:	f000 fa3d 	bl	800884a <__hi0bits>
 80083d0:	f1c0 0020 	rsb	r0, r0, #32
 80083d4:	9b07      	ldr	r3, [sp, #28]
 80083d6:	4418      	add	r0, r3
 80083d8:	f010 001f 	ands.w	r0, r0, #31
 80083dc:	d047      	beq.n	800846e <_dtoa_r+0x7fe>
 80083de:	f1c0 0320 	rsb	r3, r0, #32
 80083e2:	2b04      	cmp	r3, #4
 80083e4:	dd3b      	ble.n	800845e <_dtoa_r+0x7ee>
 80083e6:	9b07      	ldr	r3, [sp, #28]
 80083e8:	f1c0 001c 	rsb	r0, r0, #28
 80083ec:	4482      	add	sl, r0
 80083ee:	4406      	add	r6, r0
 80083f0:	4403      	add	r3, r0
 80083f2:	9307      	str	r3, [sp, #28]
 80083f4:	f1ba 0f00 	cmp.w	sl, #0
 80083f8:	dd05      	ble.n	8008406 <_dtoa_r+0x796>
 80083fa:	4652      	mov	r2, sl
 80083fc:	9901      	ldr	r1, [sp, #4]
 80083fe:	4620      	mov	r0, r4
 8008400:	f000 fb5e 	bl	8008ac0 <__lshift>
 8008404:	9001      	str	r0, [sp, #4]
 8008406:	9b07      	ldr	r3, [sp, #28]
 8008408:	2b00      	cmp	r3, #0
 800840a:	dd05      	ble.n	8008418 <_dtoa_r+0x7a8>
 800840c:	4629      	mov	r1, r5
 800840e:	461a      	mov	r2, r3
 8008410:	4620      	mov	r0, r4
 8008412:	f000 fb55 	bl	8008ac0 <__lshift>
 8008416:	4605      	mov	r5, r0
 8008418:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800841a:	b353      	cbz	r3, 8008472 <_dtoa_r+0x802>
 800841c:	4629      	mov	r1, r5
 800841e:	9801      	ldr	r0, [sp, #4]
 8008420:	f000 fba2 	bl	8008b68 <__mcmp>
 8008424:	2800      	cmp	r0, #0
 8008426:	da24      	bge.n	8008472 <_dtoa_r+0x802>
 8008428:	2300      	movs	r3, #0
 800842a:	220a      	movs	r2, #10
 800842c:	9901      	ldr	r1, [sp, #4]
 800842e:	4620      	mov	r0, r4
 8008430:	f000 f9d0 	bl	80087d4 <__multadd>
 8008434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008436:	9001      	str	r0, [sp, #4]
 8008438:	f10b 3bff 	add.w	fp, fp, #4294967295
 800843c:	2b00      	cmp	r3, #0
 800843e:	f000 8142 	beq.w	80086c6 <_dtoa_r+0xa56>
 8008442:	2300      	movs	r3, #0
 8008444:	4639      	mov	r1, r7
 8008446:	220a      	movs	r2, #10
 8008448:	4620      	mov	r0, r4
 800844a:	f000 f9c3 	bl	80087d4 <__multadd>
 800844e:	9b06      	ldr	r3, [sp, #24]
 8008450:	2b00      	cmp	r3, #0
 8008452:	4607      	mov	r7, r0
 8008454:	dc4b      	bgt.n	80084ee <_dtoa_r+0x87e>
 8008456:	9b08      	ldr	r3, [sp, #32]
 8008458:	2b02      	cmp	r3, #2
 800845a:	dd48      	ble.n	80084ee <_dtoa_r+0x87e>
 800845c:	e011      	b.n	8008482 <_dtoa_r+0x812>
 800845e:	d0c9      	beq.n	80083f4 <_dtoa_r+0x784>
 8008460:	9a07      	ldr	r2, [sp, #28]
 8008462:	331c      	adds	r3, #28
 8008464:	441a      	add	r2, r3
 8008466:	449a      	add	sl, r3
 8008468:	441e      	add	r6, r3
 800846a:	4613      	mov	r3, r2
 800846c:	e7c1      	b.n	80083f2 <_dtoa_r+0x782>
 800846e:	4603      	mov	r3, r0
 8008470:	e7f6      	b.n	8008460 <_dtoa_r+0x7f0>
 8008472:	f1b9 0f00 	cmp.w	r9, #0
 8008476:	dc34      	bgt.n	80084e2 <_dtoa_r+0x872>
 8008478:	9b08      	ldr	r3, [sp, #32]
 800847a:	2b02      	cmp	r3, #2
 800847c:	dd31      	ble.n	80084e2 <_dtoa_r+0x872>
 800847e:	f8cd 9018 	str.w	r9, [sp, #24]
 8008482:	9b06      	ldr	r3, [sp, #24]
 8008484:	b963      	cbnz	r3, 80084a0 <_dtoa_r+0x830>
 8008486:	4629      	mov	r1, r5
 8008488:	2205      	movs	r2, #5
 800848a:	4620      	mov	r0, r4
 800848c:	f000 f9a2 	bl	80087d4 <__multadd>
 8008490:	4601      	mov	r1, r0
 8008492:	4605      	mov	r5, r0
 8008494:	9801      	ldr	r0, [sp, #4]
 8008496:	f000 fb67 	bl	8008b68 <__mcmp>
 800849a:	2800      	cmp	r0, #0
 800849c:	f73f adfc 	bgt.w	8008098 <_dtoa_r+0x428>
 80084a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a2:	9e04      	ldr	r6, [sp, #16]
 80084a4:	ea6f 0b03 	mvn.w	fp, r3
 80084a8:	f04f 0900 	mov.w	r9, #0
 80084ac:	4629      	mov	r1, r5
 80084ae:	4620      	mov	r0, r4
 80084b0:	f000 f979 	bl	80087a6 <_Bfree>
 80084b4:	2f00      	cmp	r7, #0
 80084b6:	f43f aebb 	beq.w	8008230 <_dtoa_r+0x5c0>
 80084ba:	f1b9 0f00 	cmp.w	r9, #0
 80084be:	d005      	beq.n	80084cc <_dtoa_r+0x85c>
 80084c0:	45b9      	cmp	r9, r7
 80084c2:	d003      	beq.n	80084cc <_dtoa_r+0x85c>
 80084c4:	4649      	mov	r1, r9
 80084c6:	4620      	mov	r0, r4
 80084c8:	f000 f96d 	bl	80087a6 <_Bfree>
 80084cc:	4639      	mov	r1, r7
 80084ce:	4620      	mov	r0, r4
 80084d0:	f000 f969 	bl	80087a6 <_Bfree>
 80084d4:	e6ac      	b.n	8008230 <_dtoa_r+0x5c0>
 80084d6:	2500      	movs	r5, #0
 80084d8:	462f      	mov	r7, r5
 80084da:	e7e1      	b.n	80084a0 <_dtoa_r+0x830>
 80084dc:	469b      	mov	fp, r3
 80084de:	462f      	mov	r7, r5
 80084e0:	e5da      	b.n	8008098 <_dtoa_r+0x428>
 80084e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e4:	f8cd 9018 	str.w	r9, [sp, #24]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f000 80f3 	beq.w	80086d4 <_dtoa_r+0xa64>
 80084ee:	2e00      	cmp	r6, #0
 80084f0:	dd05      	ble.n	80084fe <_dtoa_r+0x88e>
 80084f2:	4639      	mov	r1, r7
 80084f4:	4632      	mov	r2, r6
 80084f6:	4620      	mov	r0, r4
 80084f8:	f000 fae2 	bl	8008ac0 <__lshift>
 80084fc:	4607      	mov	r7, r0
 80084fe:	f1b8 0f00 	cmp.w	r8, #0
 8008502:	d04c      	beq.n	800859e <_dtoa_r+0x92e>
 8008504:	6879      	ldr	r1, [r7, #4]
 8008506:	4620      	mov	r0, r4
 8008508:	f000 f919 	bl	800873e <_Balloc>
 800850c:	693a      	ldr	r2, [r7, #16]
 800850e:	3202      	adds	r2, #2
 8008510:	4606      	mov	r6, r0
 8008512:	0092      	lsls	r2, r2, #2
 8008514:	f107 010c 	add.w	r1, r7, #12
 8008518:	300c      	adds	r0, #12
 800851a:	f000 f903 	bl	8008724 <memcpy>
 800851e:	2201      	movs	r2, #1
 8008520:	4631      	mov	r1, r6
 8008522:	4620      	mov	r0, r4
 8008524:	f000 facc 	bl	8008ac0 <__lshift>
 8008528:	9b02      	ldr	r3, [sp, #8]
 800852a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	46b9      	mov	r9, r7
 8008534:	9307      	str	r3, [sp, #28]
 8008536:	4607      	mov	r7, r0
 8008538:	4629      	mov	r1, r5
 800853a:	9801      	ldr	r0, [sp, #4]
 800853c:	f7ff fb0c 	bl	8007b58 <quorem>
 8008540:	4649      	mov	r1, r9
 8008542:	4606      	mov	r6, r0
 8008544:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008548:	9801      	ldr	r0, [sp, #4]
 800854a:	f000 fb0d 	bl	8008b68 <__mcmp>
 800854e:	463a      	mov	r2, r7
 8008550:	9002      	str	r0, [sp, #8]
 8008552:	4629      	mov	r1, r5
 8008554:	4620      	mov	r0, r4
 8008556:	f000 fb21 	bl	8008b9c <__mdiff>
 800855a:	68c3      	ldr	r3, [r0, #12]
 800855c:	4602      	mov	r2, r0
 800855e:	bb03      	cbnz	r3, 80085a2 <_dtoa_r+0x932>
 8008560:	4601      	mov	r1, r0
 8008562:	9009      	str	r0, [sp, #36]	; 0x24
 8008564:	9801      	ldr	r0, [sp, #4]
 8008566:	f000 faff 	bl	8008b68 <__mcmp>
 800856a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800856c:	4603      	mov	r3, r0
 800856e:	4611      	mov	r1, r2
 8008570:	4620      	mov	r0, r4
 8008572:	9309      	str	r3, [sp, #36]	; 0x24
 8008574:	f000 f917 	bl	80087a6 <_Bfree>
 8008578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800857a:	b9a3      	cbnz	r3, 80085a6 <_dtoa_r+0x936>
 800857c:	9a08      	ldr	r2, [sp, #32]
 800857e:	b992      	cbnz	r2, 80085a6 <_dtoa_r+0x936>
 8008580:	9a07      	ldr	r2, [sp, #28]
 8008582:	b982      	cbnz	r2, 80085a6 <_dtoa_r+0x936>
 8008584:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008588:	d029      	beq.n	80085de <_dtoa_r+0x96e>
 800858a:	9b02      	ldr	r3, [sp, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	dd01      	ble.n	8008594 <_dtoa_r+0x924>
 8008590:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8008594:	f10a 0601 	add.w	r6, sl, #1
 8008598:	f88a 8000 	strb.w	r8, [sl]
 800859c:	e786      	b.n	80084ac <_dtoa_r+0x83c>
 800859e:	4638      	mov	r0, r7
 80085a0:	e7c2      	b.n	8008528 <_dtoa_r+0x8b8>
 80085a2:	2301      	movs	r3, #1
 80085a4:	e7e3      	b.n	800856e <_dtoa_r+0x8fe>
 80085a6:	9a02      	ldr	r2, [sp, #8]
 80085a8:	2a00      	cmp	r2, #0
 80085aa:	db04      	blt.n	80085b6 <_dtoa_r+0x946>
 80085ac:	d124      	bne.n	80085f8 <_dtoa_r+0x988>
 80085ae:	9a08      	ldr	r2, [sp, #32]
 80085b0:	bb12      	cbnz	r2, 80085f8 <_dtoa_r+0x988>
 80085b2:	9a07      	ldr	r2, [sp, #28]
 80085b4:	bb02      	cbnz	r2, 80085f8 <_dtoa_r+0x988>
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	ddec      	ble.n	8008594 <_dtoa_r+0x924>
 80085ba:	2201      	movs	r2, #1
 80085bc:	9901      	ldr	r1, [sp, #4]
 80085be:	4620      	mov	r0, r4
 80085c0:	f000 fa7e 	bl	8008ac0 <__lshift>
 80085c4:	4629      	mov	r1, r5
 80085c6:	9001      	str	r0, [sp, #4]
 80085c8:	f000 face 	bl	8008b68 <__mcmp>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	dc03      	bgt.n	80085d8 <_dtoa_r+0x968>
 80085d0:	d1e0      	bne.n	8008594 <_dtoa_r+0x924>
 80085d2:	f018 0f01 	tst.w	r8, #1
 80085d6:	d0dd      	beq.n	8008594 <_dtoa_r+0x924>
 80085d8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80085dc:	d1d8      	bne.n	8008590 <_dtoa_r+0x920>
 80085de:	2339      	movs	r3, #57	; 0x39
 80085e0:	f10a 0601 	add.w	r6, sl, #1
 80085e4:	f88a 3000 	strb.w	r3, [sl]
 80085e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80085ec:	2b39      	cmp	r3, #57	; 0x39
 80085ee:	f106 32ff 	add.w	r2, r6, #4294967295
 80085f2:	d04c      	beq.n	800868e <_dtoa_r+0xa1e>
 80085f4:	3301      	adds	r3, #1
 80085f6:	e051      	b.n	800869c <_dtoa_r+0xa2c>
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f10a 0601 	add.w	r6, sl, #1
 80085fe:	dd05      	ble.n	800860c <_dtoa_r+0x99c>
 8008600:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008604:	d0eb      	beq.n	80085de <_dtoa_r+0x96e>
 8008606:	f108 0801 	add.w	r8, r8, #1
 800860a:	e7c5      	b.n	8008598 <_dtoa_r+0x928>
 800860c:	9b04      	ldr	r3, [sp, #16]
 800860e:	9a06      	ldr	r2, [sp, #24]
 8008610:	f806 8c01 	strb.w	r8, [r6, #-1]
 8008614:	1af3      	subs	r3, r6, r3
 8008616:	4293      	cmp	r3, r2
 8008618:	d021      	beq.n	800865e <_dtoa_r+0x9ee>
 800861a:	2300      	movs	r3, #0
 800861c:	220a      	movs	r2, #10
 800861e:	9901      	ldr	r1, [sp, #4]
 8008620:	4620      	mov	r0, r4
 8008622:	f000 f8d7 	bl	80087d4 <__multadd>
 8008626:	45b9      	cmp	r9, r7
 8008628:	9001      	str	r0, [sp, #4]
 800862a:	f04f 0300 	mov.w	r3, #0
 800862e:	f04f 020a 	mov.w	r2, #10
 8008632:	4649      	mov	r1, r9
 8008634:	4620      	mov	r0, r4
 8008636:	d105      	bne.n	8008644 <_dtoa_r+0x9d4>
 8008638:	f000 f8cc 	bl	80087d4 <__multadd>
 800863c:	4681      	mov	r9, r0
 800863e:	4607      	mov	r7, r0
 8008640:	46b2      	mov	sl, r6
 8008642:	e779      	b.n	8008538 <_dtoa_r+0x8c8>
 8008644:	f000 f8c6 	bl	80087d4 <__multadd>
 8008648:	4639      	mov	r1, r7
 800864a:	4681      	mov	r9, r0
 800864c:	2300      	movs	r3, #0
 800864e:	220a      	movs	r2, #10
 8008650:	4620      	mov	r0, r4
 8008652:	f000 f8bf 	bl	80087d4 <__multadd>
 8008656:	4607      	mov	r7, r0
 8008658:	e7f2      	b.n	8008640 <_dtoa_r+0x9d0>
 800865a:	f04f 0900 	mov.w	r9, #0
 800865e:	2201      	movs	r2, #1
 8008660:	9901      	ldr	r1, [sp, #4]
 8008662:	4620      	mov	r0, r4
 8008664:	f000 fa2c 	bl	8008ac0 <__lshift>
 8008668:	4629      	mov	r1, r5
 800866a:	9001      	str	r0, [sp, #4]
 800866c:	f000 fa7c 	bl	8008b68 <__mcmp>
 8008670:	2800      	cmp	r0, #0
 8008672:	dcb9      	bgt.n	80085e8 <_dtoa_r+0x978>
 8008674:	d102      	bne.n	800867c <_dtoa_r+0xa0c>
 8008676:	f018 0f01 	tst.w	r8, #1
 800867a:	d1b5      	bne.n	80085e8 <_dtoa_r+0x978>
 800867c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008680:	2b30      	cmp	r3, #48	; 0x30
 8008682:	f106 32ff 	add.w	r2, r6, #4294967295
 8008686:	f47f af11 	bne.w	80084ac <_dtoa_r+0x83c>
 800868a:	4616      	mov	r6, r2
 800868c:	e7f6      	b.n	800867c <_dtoa_r+0xa0c>
 800868e:	9b04      	ldr	r3, [sp, #16]
 8008690:	4293      	cmp	r3, r2
 8008692:	d105      	bne.n	80086a0 <_dtoa_r+0xa30>
 8008694:	9a04      	ldr	r2, [sp, #16]
 8008696:	f10b 0b01 	add.w	fp, fp, #1
 800869a:	2331      	movs	r3, #49	; 0x31
 800869c:	7013      	strb	r3, [r2, #0]
 800869e:	e705      	b.n	80084ac <_dtoa_r+0x83c>
 80086a0:	4616      	mov	r6, r2
 80086a2:	e7a1      	b.n	80085e8 <_dtoa_r+0x978>
 80086a4:	4b16      	ldr	r3, [pc, #88]	; (8008700 <_dtoa_r+0xa90>)
 80086a6:	f7ff bb48 	b.w	8007d3a <_dtoa_r+0xca>
 80086aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f47f ab23 	bne.w	8007cf8 <_dtoa_r+0x88>
 80086b2:	4b14      	ldr	r3, [pc, #80]	; (8008704 <_dtoa_r+0xa94>)
 80086b4:	f7ff bb41 	b.w	8007d3a <_dtoa_r+0xca>
 80086b8:	9b08      	ldr	r3, [sp, #32]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	f77f ae3b 	ble.w	8008336 <_dtoa_r+0x6c6>
 80086c0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80086c4:	e64f      	b.n	8008366 <_dtoa_r+0x6f6>
 80086c6:	9b06      	ldr	r3, [sp, #24]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	dc03      	bgt.n	80086d4 <_dtoa_r+0xa64>
 80086cc:	9b08      	ldr	r3, [sp, #32]
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	f73f aed7 	bgt.w	8008482 <_dtoa_r+0x812>
 80086d4:	9e04      	ldr	r6, [sp, #16]
 80086d6:	9801      	ldr	r0, [sp, #4]
 80086d8:	4629      	mov	r1, r5
 80086da:	f7ff fa3d 	bl	8007b58 <quorem>
 80086de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80086e2:	f806 8b01 	strb.w	r8, [r6], #1
 80086e6:	9b04      	ldr	r3, [sp, #16]
 80086e8:	9a06      	ldr	r2, [sp, #24]
 80086ea:	1af3      	subs	r3, r6, r3
 80086ec:	429a      	cmp	r2, r3
 80086ee:	ddb4      	ble.n	800865a <_dtoa_r+0x9ea>
 80086f0:	2300      	movs	r3, #0
 80086f2:	220a      	movs	r2, #10
 80086f4:	9901      	ldr	r1, [sp, #4]
 80086f6:	4620      	mov	r0, r4
 80086f8:	f000 f86c 	bl	80087d4 <__multadd>
 80086fc:	9001      	str	r0, [sp, #4]
 80086fe:	e7ea      	b.n	80086d6 <_dtoa_r+0xa66>
 8008700:	08009564 	.word	0x08009564
 8008704:	08009588 	.word	0x08009588

08008708 <_localeconv_r>:
 8008708:	4b04      	ldr	r3, [pc, #16]	; (800871c <_localeconv_r+0x14>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6a18      	ldr	r0, [r3, #32]
 800870e:	4b04      	ldr	r3, [pc, #16]	; (8008720 <_localeconv_r+0x18>)
 8008710:	2800      	cmp	r0, #0
 8008712:	bf08      	it	eq
 8008714:	4618      	moveq	r0, r3
 8008716:	30f0      	adds	r0, #240	; 0xf0
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	20000010 	.word	0x20000010
 8008720:	20000074 	.word	0x20000074

08008724 <memcpy>:
 8008724:	b510      	push	{r4, lr}
 8008726:	1e43      	subs	r3, r0, #1
 8008728:	440a      	add	r2, r1
 800872a:	4291      	cmp	r1, r2
 800872c:	d100      	bne.n	8008730 <memcpy+0xc>
 800872e:	bd10      	pop	{r4, pc}
 8008730:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008734:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008738:	e7f7      	b.n	800872a <memcpy+0x6>

0800873a <__malloc_lock>:
 800873a:	4770      	bx	lr

0800873c <__malloc_unlock>:
 800873c:	4770      	bx	lr

0800873e <_Balloc>:
 800873e:	b570      	push	{r4, r5, r6, lr}
 8008740:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008742:	4604      	mov	r4, r0
 8008744:	460e      	mov	r6, r1
 8008746:	b93d      	cbnz	r5, 8008758 <_Balloc+0x1a>
 8008748:	2010      	movs	r0, #16
 800874a:	f7fe fcd9 	bl	8007100 <malloc>
 800874e:	6260      	str	r0, [r4, #36]	; 0x24
 8008750:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008754:	6005      	str	r5, [r0, #0]
 8008756:	60c5      	str	r5, [r0, #12]
 8008758:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800875a:	68eb      	ldr	r3, [r5, #12]
 800875c:	b183      	cbz	r3, 8008780 <_Balloc+0x42>
 800875e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008766:	b9b8      	cbnz	r0, 8008798 <_Balloc+0x5a>
 8008768:	2101      	movs	r1, #1
 800876a:	fa01 f506 	lsl.w	r5, r1, r6
 800876e:	1d6a      	adds	r2, r5, #5
 8008770:	0092      	lsls	r2, r2, #2
 8008772:	4620      	mov	r0, r4
 8008774:	f000 fabe 	bl	8008cf4 <_calloc_r>
 8008778:	b160      	cbz	r0, 8008794 <_Balloc+0x56>
 800877a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800877e:	e00e      	b.n	800879e <_Balloc+0x60>
 8008780:	2221      	movs	r2, #33	; 0x21
 8008782:	2104      	movs	r1, #4
 8008784:	4620      	mov	r0, r4
 8008786:	f000 fab5 	bl	8008cf4 <_calloc_r>
 800878a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800878c:	60e8      	str	r0, [r5, #12]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e4      	bne.n	800875e <_Balloc+0x20>
 8008794:	2000      	movs	r0, #0
 8008796:	bd70      	pop	{r4, r5, r6, pc}
 8008798:	6802      	ldr	r2, [r0, #0]
 800879a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800879e:	2300      	movs	r3, #0
 80087a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087a4:	e7f7      	b.n	8008796 <_Balloc+0x58>

080087a6 <_Bfree>:
 80087a6:	b570      	push	{r4, r5, r6, lr}
 80087a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80087aa:	4606      	mov	r6, r0
 80087ac:	460d      	mov	r5, r1
 80087ae:	b93c      	cbnz	r4, 80087c0 <_Bfree+0x1a>
 80087b0:	2010      	movs	r0, #16
 80087b2:	f7fe fca5 	bl	8007100 <malloc>
 80087b6:	6270      	str	r0, [r6, #36]	; 0x24
 80087b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087bc:	6004      	str	r4, [r0, #0]
 80087be:	60c4      	str	r4, [r0, #12]
 80087c0:	b13d      	cbz	r5, 80087d2 <_Bfree+0x2c>
 80087c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80087c4:	686a      	ldr	r2, [r5, #4]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087cc:	6029      	str	r1, [r5, #0]
 80087ce:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80087d2:	bd70      	pop	{r4, r5, r6, pc}

080087d4 <__multadd>:
 80087d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d8:	690d      	ldr	r5, [r1, #16]
 80087da:	461f      	mov	r7, r3
 80087dc:	4606      	mov	r6, r0
 80087de:	460c      	mov	r4, r1
 80087e0:	f101 0c14 	add.w	ip, r1, #20
 80087e4:	2300      	movs	r3, #0
 80087e6:	f8dc 0000 	ldr.w	r0, [ip]
 80087ea:	b281      	uxth	r1, r0
 80087ec:	fb02 7101 	mla	r1, r2, r1, r7
 80087f0:	0c0f      	lsrs	r7, r1, #16
 80087f2:	0c00      	lsrs	r0, r0, #16
 80087f4:	fb02 7000 	mla	r0, r2, r0, r7
 80087f8:	b289      	uxth	r1, r1
 80087fa:	3301      	adds	r3, #1
 80087fc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008800:	429d      	cmp	r5, r3
 8008802:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008806:	f84c 1b04 	str.w	r1, [ip], #4
 800880a:	dcec      	bgt.n	80087e6 <__multadd+0x12>
 800880c:	b1d7      	cbz	r7, 8008844 <__multadd+0x70>
 800880e:	68a3      	ldr	r3, [r4, #8]
 8008810:	42ab      	cmp	r3, r5
 8008812:	dc12      	bgt.n	800883a <__multadd+0x66>
 8008814:	6861      	ldr	r1, [r4, #4]
 8008816:	4630      	mov	r0, r6
 8008818:	3101      	adds	r1, #1
 800881a:	f7ff ff90 	bl	800873e <_Balloc>
 800881e:	6922      	ldr	r2, [r4, #16]
 8008820:	3202      	adds	r2, #2
 8008822:	f104 010c 	add.w	r1, r4, #12
 8008826:	4680      	mov	r8, r0
 8008828:	0092      	lsls	r2, r2, #2
 800882a:	300c      	adds	r0, #12
 800882c:	f7ff ff7a 	bl	8008724 <memcpy>
 8008830:	4621      	mov	r1, r4
 8008832:	4630      	mov	r0, r6
 8008834:	f7ff ffb7 	bl	80087a6 <_Bfree>
 8008838:	4644      	mov	r4, r8
 800883a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800883e:	3501      	adds	r5, #1
 8008840:	615f      	str	r7, [r3, #20]
 8008842:	6125      	str	r5, [r4, #16]
 8008844:	4620      	mov	r0, r4
 8008846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800884a <__hi0bits>:
 800884a:	0c02      	lsrs	r2, r0, #16
 800884c:	0412      	lsls	r2, r2, #16
 800884e:	4603      	mov	r3, r0
 8008850:	b9b2      	cbnz	r2, 8008880 <__hi0bits+0x36>
 8008852:	0403      	lsls	r3, r0, #16
 8008854:	2010      	movs	r0, #16
 8008856:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800885a:	bf04      	itt	eq
 800885c:	021b      	lsleq	r3, r3, #8
 800885e:	3008      	addeq	r0, #8
 8008860:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008864:	bf04      	itt	eq
 8008866:	011b      	lsleq	r3, r3, #4
 8008868:	3004      	addeq	r0, #4
 800886a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800886e:	bf04      	itt	eq
 8008870:	009b      	lsleq	r3, r3, #2
 8008872:	3002      	addeq	r0, #2
 8008874:	2b00      	cmp	r3, #0
 8008876:	db06      	blt.n	8008886 <__hi0bits+0x3c>
 8008878:	005b      	lsls	r3, r3, #1
 800887a:	d503      	bpl.n	8008884 <__hi0bits+0x3a>
 800887c:	3001      	adds	r0, #1
 800887e:	4770      	bx	lr
 8008880:	2000      	movs	r0, #0
 8008882:	e7e8      	b.n	8008856 <__hi0bits+0xc>
 8008884:	2020      	movs	r0, #32
 8008886:	4770      	bx	lr

08008888 <__lo0bits>:
 8008888:	6803      	ldr	r3, [r0, #0]
 800888a:	f013 0207 	ands.w	r2, r3, #7
 800888e:	4601      	mov	r1, r0
 8008890:	d00b      	beq.n	80088aa <__lo0bits+0x22>
 8008892:	07da      	lsls	r2, r3, #31
 8008894:	d423      	bmi.n	80088de <__lo0bits+0x56>
 8008896:	0798      	lsls	r0, r3, #30
 8008898:	bf49      	itett	mi
 800889a:	085b      	lsrmi	r3, r3, #1
 800889c:	089b      	lsrpl	r3, r3, #2
 800889e:	2001      	movmi	r0, #1
 80088a0:	600b      	strmi	r3, [r1, #0]
 80088a2:	bf5c      	itt	pl
 80088a4:	600b      	strpl	r3, [r1, #0]
 80088a6:	2002      	movpl	r0, #2
 80088a8:	4770      	bx	lr
 80088aa:	b298      	uxth	r0, r3
 80088ac:	b9a8      	cbnz	r0, 80088da <__lo0bits+0x52>
 80088ae:	0c1b      	lsrs	r3, r3, #16
 80088b0:	2010      	movs	r0, #16
 80088b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80088b6:	bf04      	itt	eq
 80088b8:	0a1b      	lsreq	r3, r3, #8
 80088ba:	3008      	addeq	r0, #8
 80088bc:	071a      	lsls	r2, r3, #28
 80088be:	bf04      	itt	eq
 80088c0:	091b      	lsreq	r3, r3, #4
 80088c2:	3004      	addeq	r0, #4
 80088c4:	079a      	lsls	r2, r3, #30
 80088c6:	bf04      	itt	eq
 80088c8:	089b      	lsreq	r3, r3, #2
 80088ca:	3002      	addeq	r0, #2
 80088cc:	07da      	lsls	r2, r3, #31
 80088ce:	d402      	bmi.n	80088d6 <__lo0bits+0x4e>
 80088d0:	085b      	lsrs	r3, r3, #1
 80088d2:	d006      	beq.n	80088e2 <__lo0bits+0x5a>
 80088d4:	3001      	adds	r0, #1
 80088d6:	600b      	str	r3, [r1, #0]
 80088d8:	4770      	bx	lr
 80088da:	4610      	mov	r0, r2
 80088dc:	e7e9      	b.n	80088b2 <__lo0bits+0x2a>
 80088de:	2000      	movs	r0, #0
 80088e0:	4770      	bx	lr
 80088e2:	2020      	movs	r0, #32
 80088e4:	4770      	bx	lr

080088e6 <__i2b>:
 80088e6:	b510      	push	{r4, lr}
 80088e8:	460c      	mov	r4, r1
 80088ea:	2101      	movs	r1, #1
 80088ec:	f7ff ff27 	bl	800873e <_Balloc>
 80088f0:	2201      	movs	r2, #1
 80088f2:	6144      	str	r4, [r0, #20]
 80088f4:	6102      	str	r2, [r0, #16]
 80088f6:	bd10      	pop	{r4, pc}

080088f8 <__multiply>:
 80088f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fc:	4614      	mov	r4, r2
 80088fe:	690a      	ldr	r2, [r1, #16]
 8008900:	6923      	ldr	r3, [r4, #16]
 8008902:	429a      	cmp	r2, r3
 8008904:	bfb8      	it	lt
 8008906:	460b      	movlt	r3, r1
 8008908:	4688      	mov	r8, r1
 800890a:	bfbc      	itt	lt
 800890c:	46a0      	movlt	r8, r4
 800890e:	461c      	movlt	r4, r3
 8008910:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008914:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008918:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800891c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008920:	eb07 0609 	add.w	r6, r7, r9
 8008924:	42b3      	cmp	r3, r6
 8008926:	bfb8      	it	lt
 8008928:	3101      	addlt	r1, #1
 800892a:	f7ff ff08 	bl	800873e <_Balloc>
 800892e:	f100 0514 	add.w	r5, r0, #20
 8008932:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008936:	462b      	mov	r3, r5
 8008938:	2200      	movs	r2, #0
 800893a:	4573      	cmp	r3, lr
 800893c:	d316      	bcc.n	800896c <__multiply+0x74>
 800893e:	f104 0214 	add.w	r2, r4, #20
 8008942:	f108 0114 	add.w	r1, r8, #20
 8008946:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800894a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	9b00      	ldr	r3, [sp, #0]
 8008952:	9201      	str	r2, [sp, #4]
 8008954:	4293      	cmp	r3, r2
 8008956:	d80c      	bhi.n	8008972 <__multiply+0x7a>
 8008958:	2e00      	cmp	r6, #0
 800895a:	dd03      	ble.n	8008964 <__multiply+0x6c>
 800895c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008960:	2b00      	cmp	r3, #0
 8008962:	d05d      	beq.n	8008a20 <__multiply+0x128>
 8008964:	6106      	str	r6, [r0, #16]
 8008966:	b003      	add	sp, #12
 8008968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896c:	f843 2b04 	str.w	r2, [r3], #4
 8008970:	e7e3      	b.n	800893a <__multiply+0x42>
 8008972:	f8b2 b000 	ldrh.w	fp, [r2]
 8008976:	f1bb 0f00 	cmp.w	fp, #0
 800897a:	d023      	beq.n	80089c4 <__multiply+0xcc>
 800897c:	4689      	mov	r9, r1
 800897e:	46ac      	mov	ip, r5
 8008980:	f04f 0800 	mov.w	r8, #0
 8008984:	f859 4b04 	ldr.w	r4, [r9], #4
 8008988:	f8dc a000 	ldr.w	sl, [ip]
 800898c:	b2a3      	uxth	r3, r4
 800898e:	fa1f fa8a 	uxth.w	sl, sl
 8008992:	fb0b a303 	mla	r3, fp, r3, sl
 8008996:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800899a:	f8dc 4000 	ldr.w	r4, [ip]
 800899e:	4443      	add	r3, r8
 80089a0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80089a4:	fb0b 840a 	mla	r4, fp, sl, r8
 80089a8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80089ac:	46e2      	mov	sl, ip
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80089b4:	454f      	cmp	r7, r9
 80089b6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80089ba:	f84a 3b04 	str.w	r3, [sl], #4
 80089be:	d82b      	bhi.n	8008a18 <__multiply+0x120>
 80089c0:	f8cc 8004 	str.w	r8, [ip, #4]
 80089c4:	9b01      	ldr	r3, [sp, #4]
 80089c6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80089ca:	3204      	adds	r2, #4
 80089cc:	f1ba 0f00 	cmp.w	sl, #0
 80089d0:	d020      	beq.n	8008a14 <__multiply+0x11c>
 80089d2:	682b      	ldr	r3, [r5, #0]
 80089d4:	4689      	mov	r9, r1
 80089d6:	46a8      	mov	r8, r5
 80089d8:	f04f 0b00 	mov.w	fp, #0
 80089dc:	f8b9 c000 	ldrh.w	ip, [r9]
 80089e0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80089e4:	fb0a 440c 	mla	r4, sl, ip, r4
 80089e8:	445c      	add	r4, fp
 80089ea:	46c4      	mov	ip, r8
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80089f2:	f84c 3b04 	str.w	r3, [ip], #4
 80089f6:	f859 3b04 	ldr.w	r3, [r9], #4
 80089fa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80089fe:	0c1b      	lsrs	r3, r3, #16
 8008a00:	fb0a b303 	mla	r3, sl, r3, fp
 8008a04:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008a08:	454f      	cmp	r7, r9
 8008a0a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008a0e:	d805      	bhi.n	8008a1c <__multiply+0x124>
 8008a10:	f8c8 3004 	str.w	r3, [r8, #4]
 8008a14:	3504      	adds	r5, #4
 8008a16:	e79b      	b.n	8008950 <__multiply+0x58>
 8008a18:	46d4      	mov	ip, sl
 8008a1a:	e7b3      	b.n	8008984 <__multiply+0x8c>
 8008a1c:	46e0      	mov	r8, ip
 8008a1e:	e7dd      	b.n	80089dc <__multiply+0xe4>
 8008a20:	3e01      	subs	r6, #1
 8008a22:	e799      	b.n	8008958 <__multiply+0x60>

08008a24 <__pow5mult>:
 8008a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a28:	4615      	mov	r5, r2
 8008a2a:	f012 0203 	ands.w	r2, r2, #3
 8008a2e:	4606      	mov	r6, r0
 8008a30:	460f      	mov	r7, r1
 8008a32:	d007      	beq.n	8008a44 <__pow5mult+0x20>
 8008a34:	3a01      	subs	r2, #1
 8008a36:	4c21      	ldr	r4, [pc, #132]	; (8008abc <__pow5mult+0x98>)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a3e:	f7ff fec9 	bl	80087d4 <__multadd>
 8008a42:	4607      	mov	r7, r0
 8008a44:	10ad      	asrs	r5, r5, #2
 8008a46:	d035      	beq.n	8008ab4 <__pow5mult+0x90>
 8008a48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a4a:	b93c      	cbnz	r4, 8008a5c <__pow5mult+0x38>
 8008a4c:	2010      	movs	r0, #16
 8008a4e:	f7fe fb57 	bl	8007100 <malloc>
 8008a52:	6270      	str	r0, [r6, #36]	; 0x24
 8008a54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a58:	6004      	str	r4, [r0, #0]
 8008a5a:	60c4      	str	r4, [r0, #12]
 8008a5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a64:	b94c      	cbnz	r4, 8008a7a <__pow5mult+0x56>
 8008a66:	f240 2171 	movw	r1, #625	; 0x271
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f7ff ff3b 	bl	80088e6 <__i2b>
 8008a70:	2300      	movs	r3, #0
 8008a72:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a76:	4604      	mov	r4, r0
 8008a78:	6003      	str	r3, [r0, #0]
 8008a7a:	f04f 0800 	mov.w	r8, #0
 8008a7e:	07eb      	lsls	r3, r5, #31
 8008a80:	d50a      	bpl.n	8008a98 <__pow5mult+0x74>
 8008a82:	4639      	mov	r1, r7
 8008a84:	4622      	mov	r2, r4
 8008a86:	4630      	mov	r0, r6
 8008a88:	f7ff ff36 	bl	80088f8 <__multiply>
 8008a8c:	4639      	mov	r1, r7
 8008a8e:	4681      	mov	r9, r0
 8008a90:	4630      	mov	r0, r6
 8008a92:	f7ff fe88 	bl	80087a6 <_Bfree>
 8008a96:	464f      	mov	r7, r9
 8008a98:	106d      	asrs	r5, r5, #1
 8008a9a:	d00b      	beq.n	8008ab4 <__pow5mult+0x90>
 8008a9c:	6820      	ldr	r0, [r4, #0]
 8008a9e:	b938      	cbnz	r0, 8008ab0 <__pow5mult+0x8c>
 8008aa0:	4622      	mov	r2, r4
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	f7ff ff27 	bl	80088f8 <__multiply>
 8008aaa:	6020      	str	r0, [r4, #0]
 8008aac:	f8c0 8000 	str.w	r8, [r0]
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	e7e4      	b.n	8008a7e <__pow5mult+0x5a>
 8008ab4:	4638      	mov	r0, r7
 8008ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aba:	bf00      	nop
 8008abc:	08009688 	.word	0x08009688

08008ac0 <__lshift>:
 8008ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac4:	460c      	mov	r4, r1
 8008ac6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008aca:	6923      	ldr	r3, [r4, #16]
 8008acc:	6849      	ldr	r1, [r1, #4]
 8008ace:	eb0a 0903 	add.w	r9, sl, r3
 8008ad2:	68a3      	ldr	r3, [r4, #8]
 8008ad4:	4607      	mov	r7, r0
 8008ad6:	4616      	mov	r6, r2
 8008ad8:	f109 0501 	add.w	r5, r9, #1
 8008adc:	42ab      	cmp	r3, r5
 8008ade:	db32      	blt.n	8008b46 <__lshift+0x86>
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	f7ff fe2c 	bl	800873e <_Balloc>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	4680      	mov	r8, r0
 8008aea:	f100 0114 	add.w	r1, r0, #20
 8008aee:	461a      	mov	r2, r3
 8008af0:	4553      	cmp	r3, sl
 8008af2:	db2b      	blt.n	8008b4c <__lshift+0x8c>
 8008af4:	6920      	ldr	r0, [r4, #16]
 8008af6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008afa:	f104 0314 	add.w	r3, r4, #20
 8008afe:	f016 021f 	ands.w	r2, r6, #31
 8008b02:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b06:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b0a:	d025      	beq.n	8008b58 <__lshift+0x98>
 8008b0c:	f1c2 0e20 	rsb	lr, r2, #32
 8008b10:	2000      	movs	r0, #0
 8008b12:	681e      	ldr	r6, [r3, #0]
 8008b14:	468a      	mov	sl, r1
 8008b16:	4096      	lsls	r6, r2
 8008b18:	4330      	orrs	r0, r6
 8008b1a:	f84a 0b04 	str.w	r0, [sl], #4
 8008b1e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008b22:	459c      	cmp	ip, r3
 8008b24:	fa20 f00e 	lsr.w	r0, r0, lr
 8008b28:	d814      	bhi.n	8008b54 <__lshift+0x94>
 8008b2a:	6048      	str	r0, [r1, #4]
 8008b2c:	b108      	cbz	r0, 8008b32 <__lshift+0x72>
 8008b2e:	f109 0502 	add.w	r5, r9, #2
 8008b32:	3d01      	subs	r5, #1
 8008b34:	4638      	mov	r0, r7
 8008b36:	f8c8 5010 	str.w	r5, [r8, #16]
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	f7ff fe33 	bl	80087a6 <_Bfree>
 8008b40:	4640      	mov	r0, r8
 8008b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b46:	3101      	adds	r1, #1
 8008b48:	005b      	lsls	r3, r3, #1
 8008b4a:	e7c7      	b.n	8008adc <__lshift+0x1c>
 8008b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008b50:	3301      	adds	r3, #1
 8008b52:	e7cd      	b.n	8008af0 <__lshift+0x30>
 8008b54:	4651      	mov	r1, sl
 8008b56:	e7dc      	b.n	8008b12 <__lshift+0x52>
 8008b58:	3904      	subs	r1, #4
 8008b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b5e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b62:	459c      	cmp	ip, r3
 8008b64:	d8f9      	bhi.n	8008b5a <__lshift+0x9a>
 8008b66:	e7e4      	b.n	8008b32 <__lshift+0x72>

08008b68 <__mcmp>:
 8008b68:	6903      	ldr	r3, [r0, #16]
 8008b6a:	690a      	ldr	r2, [r1, #16]
 8008b6c:	1a9b      	subs	r3, r3, r2
 8008b6e:	b530      	push	{r4, r5, lr}
 8008b70:	d10c      	bne.n	8008b8c <__mcmp+0x24>
 8008b72:	0092      	lsls	r2, r2, #2
 8008b74:	3014      	adds	r0, #20
 8008b76:	3114      	adds	r1, #20
 8008b78:	1884      	adds	r4, r0, r2
 8008b7a:	4411      	add	r1, r2
 8008b7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b84:	4295      	cmp	r5, r2
 8008b86:	d003      	beq.n	8008b90 <__mcmp+0x28>
 8008b88:	d305      	bcc.n	8008b96 <__mcmp+0x2e>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	bd30      	pop	{r4, r5, pc}
 8008b90:	42a0      	cmp	r0, r4
 8008b92:	d3f3      	bcc.n	8008b7c <__mcmp+0x14>
 8008b94:	e7fa      	b.n	8008b8c <__mcmp+0x24>
 8008b96:	f04f 33ff 	mov.w	r3, #4294967295
 8008b9a:	e7f7      	b.n	8008b8c <__mcmp+0x24>

08008b9c <__mdiff>:
 8008b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba0:	460d      	mov	r5, r1
 8008ba2:	4607      	mov	r7, r0
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	4614      	mov	r4, r2
 8008baa:	f7ff ffdd 	bl	8008b68 <__mcmp>
 8008bae:	1e06      	subs	r6, r0, #0
 8008bb0:	d108      	bne.n	8008bc4 <__mdiff+0x28>
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	4638      	mov	r0, r7
 8008bb6:	f7ff fdc2 	bl	800873e <_Balloc>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc4:	bfa4      	itt	ge
 8008bc6:	4623      	movge	r3, r4
 8008bc8:	462c      	movge	r4, r5
 8008bca:	4638      	mov	r0, r7
 8008bcc:	6861      	ldr	r1, [r4, #4]
 8008bce:	bfa6      	itte	ge
 8008bd0:	461d      	movge	r5, r3
 8008bd2:	2600      	movge	r6, #0
 8008bd4:	2601      	movlt	r6, #1
 8008bd6:	f7ff fdb2 	bl	800873e <_Balloc>
 8008bda:	692b      	ldr	r3, [r5, #16]
 8008bdc:	60c6      	str	r6, [r0, #12]
 8008bde:	6926      	ldr	r6, [r4, #16]
 8008be0:	f105 0914 	add.w	r9, r5, #20
 8008be4:	f104 0214 	add.w	r2, r4, #20
 8008be8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008bec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008bf0:	f100 0514 	add.w	r5, r0, #20
 8008bf4:	f04f 0e00 	mov.w	lr, #0
 8008bf8:	f852 ab04 	ldr.w	sl, [r2], #4
 8008bfc:	f859 4b04 	ldr.w	r4, [r9], #4
 8008c00:	fa1e f18a 	uxtah	r1, lr, sl
 8008c04:	b2a3      	uxth	r3, r4
 8008c06:	1ac9      	subs	r1, r1, r3
 8008c08:	0c23      	lsrs	r3, r4, #16
 8008c0a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008c0e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008c12:	b289      	uxth	r1, r1
 8008c14:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008c18:	45c8      	cmp	r8, r9
 8008c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008c1e:	4694      	mov	ip, r2
 8008c20:	f845 3b04 	str.w	r3, [r5], #4
 8008c24:	d8e8      	bhi.n	8008bf8 <__mdiff+0x5c>
 8008c26:	45bc      	cmp	ip, r7
 8008c28:	d304      	bcc.n	8008c34 <__mdiff+0x98>
 8008c2a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008c2e:	b183      	cbz	r3, 8008c52 <__mdiff+0xb6>
 8008c30:	6106      	str	r6, [r0, #16]
 8008c32:	e7c5      	b.n	8008bc0 <__mdiff+0x24>
 8008c34:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008c38:	fa1e f381 	uxtah	r3, lr, r1
 8008c3c:	141a      	asrs	r2, r3, #16
 8008c3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c48:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008c4c:	f845 3b04 	str.w	r3, [r5], #4
 8008c50:	e7e9      	b.n	8008c26 <__mdiff+0x8a>
 8008c52:	3e01      	subs	r6, #1
 8008c54:	e7e9      	b.n	8008c2a <__mdiff+0x8e>

08008c56 <__d2b>:
 8008c56:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c5a:	460e      	mov	r6, r1
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	ec59 8b10 	vmov	r8, r9, d0
 8008c62:	4615      	mov	r5, r2
 8008c64:	f7ff fd6b 	bl	800873e <_Balloc>
 8008c68:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008c6c:	4607      	mov	r7, r0
 8008c6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c72:	bb34      	cbnz	r4, 8008cc2 <__d2b+0x6c>
 8008c74:	9301      	str	r3, [sp, #4]
 8008c76:	f1b8 0300 	subs.w	r3, r8, #0
 8008c7a:	d027      	beq.n	8008ccc <__d2b+0x76>
 8008c7c:	a802      	add	r0, sp, #8
 8008c7e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008c82:	f7ff fe01 	bl	8008888 <__lo0bits>
 8008c86:	9900      	ldr	r1, [sp, #0]
 8008c88:	b1f0      	cbz	r0, 8008cc8 <__d2b+0x72>
 8008c8a:	9a01      	ldr	r2, [sp, #4]
 8008c8c:	f1c0 0320 	rsb	r3, r0, #32
 8008c90:	fa02 f303 	lsl.w	r3, r2, r3
 8008c94:	430b      	orrs	r3, r1
 8008c96:	40c2      	lsrs	r2, r0
 8008c98:	617b      	str	r3, [r7, #20]
 8008c9a:	9201      	str	r2, [sp, #4]
 8008c9c:	9b01      	ldr	r3, [sp, #4]
 8008c9e:	61bb      	str	r3, [r7, #24]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	bf14      	ite	ne
 8008ca4:	2102      	movne	r1, #2
 8008ca6:	2101      	moveq	r1, #1
 8008ca8:	6139      	str	r1, [r7, #16]
 8008caa:	b1c4      	cbz	r4, 8008cde <__d2b+0x88>
 8008cac:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008cb0:	4404      	add	r4, r0
 8008cb2:	6034      	str	r4, [r6, #0]
 8008cb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008cb8:	6028      	str	r0, [r5, #0]
 8008cba:	4638      	mov	r0, r7
 8008cbc:	b003      	add	sp, #12
 8008cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cc6:	e7d5      	b.n	8008c74 <__d2b+0x1e>
 8008cc8:	6179      	str	r1, [r7, #20]
 8008cca:	e7e7      	b.n	8008c9c <__d2b+0x46>
 8008ccc:	a801      	add	r0, sp, #4
 8008cce:	f7ff fddb 	bl	8008888 <__lo0bits>
 8008cd2:	9b01      	ldr	r3, [sp, #4]
 8008cd4:	617b      	str	r3, [r7, #20]
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	6139      	str	r1, [r7, #16]
 8008cda:	3020      	adds	r0, #32
 8008cdc:	e7e5      	b.n	8008caa <__d2b+0x54>
 8008cde:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008ce2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ce6:	6030      	str	r0, [r6, #0]
 8008ce8:	6918      	ldr	r0, [r3, #16]
 8008cea:	f7ff fdae 	bl	800884a <__hi0bits>
 8008cee:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008cf2:	e7e1      	b.n	8008cb8 <__d2b+0x62>

08008cf4 <_calloc_r>:
 8008cf4:	b538      	push	{r3, r4, r5, lr}
 8008cf6:	fb02 f401 	mul.w	r4, r2, r1
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	f7fe fa66 	bl	80071cc <_malloc_r>
 8008d00:	4605      	mov	r5, r0
 8008d02:	b118      	cbz	r0, 8008d0c <_calloc_r+0x18>
 8008d04:	4622      	mov	r2, r4
 8008d06:	2100      	movs	r1, #0
 8008d08:	f7fe fa0a 	bl	8007120 <memset>
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	bd38      	pop	{r3, r4, r5, pc}

08008d10 <__ssputs_r>:
 8008d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d14:	688e      	ldr	r6, [r1, #8]
 8008d16:	429e      	cmp	r6, r3
 8008d18:	4682      	mov	sl, r0
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	4690      	mov	r8, r2
 8008d1e:	4699      	mov	r9, r3
 8008d20:	d837      	bhi.n	8008d92 <__ssputs_r+0x82>
 8008d22:	898a      	ldrh	r2, [r1, #12]
 8008d24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d28:	d031      	beq.n	8008d8e <__ssputs_r+0x7e>
 8008d2a:	6825      	ldr	r5, [r4, #0]
 8008d2c:	6909      	ldr	r1, [r1, #16]
 8008d2e:	1a6f      	subs	r7, r5, r1
 8008d30:	6965      	ldr	r5, [r4, #20]
 8008d32:	2302      	movs	r3, #2
 8008d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d38:	fb95 f5f3 	sdiv	r5, r5, r3
 8008d3c:	f109 0301 	add.w	r3, r9, #1
 8008d40:	443b      	add	r3, r7
 8008d42:	429d      	cmp	r5, r3
 8008d44:	bf38      	it	cc
 8008d46:	461d      	movcc	r5, r3
 8008d48:	0553      	lsls	r3, r2, #21
 8008d4a:	d530      	bpl.n	8008dae <__ssputs_r+0x9e>
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	f7fe fa3d 	bl	80071cc <_malloc_r>
 8008d52:	4606      	mov	r6, r0
 8008d54:	b950      	cbnz	r0, 8008d6c <__ssputs_r+0x5c>
 8008d56:	230c      	movs	r3, #12
 8008d58:	f8ca 3000 	str.w	r3, [sl]
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	f04f 30ff 	mov.w	r0, #4294967295
 8008d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d6c:	463a      	mov	r2, r7
 8008d6e:	6921      	ldr	r1, [r4, #16]
 8008d70:	f7ff fcd8 	bl	8008724 <memcpy>
 8008d74:	89a3      	ldrh	r3, [r4, #12]
 8008d76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d7e:	81a3      	strh	r3, [r4, #12]
 8008d80:	6126      	str	r6, [r4, #16]
 8008d82:	6165      	str	r5, [r4, #20]
 8008d84:	443e      	add	r6, r7
 8008d86:	1bed      	subs	r5, r5, r7
 8008d88:	6026      	str	r6, [r4, #0]
 8008d8a:	60a5      	str	r5, [r4, #8]
 8008d8c:	464e      	mov	r6, r9
 8008d8e:	454e      	cmp	r6, r9
 8008d90:	d900      	bls.n	8008d94 <__ssputs_r+0x84>
 8008d92:	464e      	mov	r6, r9
 8008d94:	4632      	mov	r2, r6
 8008d96:	4641      	mov	r1, r8
 8008d98:	6820      	ldr	r0, [r4, #0]
 8008d9a:	f000 f91d 	bl	8008fd8 <memmove>
 8008d9e:	68a3      	ldr	r3, [r4, #8]
 8008da0:	1b9b      	subs	r3, r3, r6
 8008da2:	60a3      	str	r3, [r4, #8]
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	441e      	add	r6, r3
 8008da8:	6026      	str	r6, [r4, #0]
 8008daa:	2000      	movs	r0, #0
 8008dac:	e7dc      	b.n	8008d68 <__ssputs_r+0x58>
 8008dae:	462a      	mov	r2, r5
 8008db0:	f000 f92b 	bl	800900a <_realloc_r>
 8008db4:	4606      	mov	r6, r0
 8008db6:	2800      	cmp	r0, #0
 8008db8:	d1e2      	bne.n	8008d80 <__ssputs_r+0x70>
 8008dba:	6921      	ldr	r1, [r4, #16]
 8008dbc:	4650      	mov	r0, sl
 8008dbe:	f7fe f9b7 	bl	8007130 <_free_r>
 8008dc2:	e7c8      	b.n	8008d56 <__ssputs_r+0x46>

08008dc4 <_svfiprintf_r>:
 8008dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc8:	461d      	mov	r5, r3
 8008dca:	898b      	ldrh	r3, [r1, #12]
 8008dcc:	061f      	lsls	r7, r3, #24
 8008dce:	b09d      	sub	sp, #116	; 0x74
 8008dd0:	4680      	mov	r8, r0
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	4616      	mov	r6, r2
 8008dd6:	d50f      	bpl.n	8008df8 <_svfiprintf_r+0x34>
 8008dd8:	690b      	ldr	r3, [r1, #16]
 8008dda:	b96b      	cbnz	r3, 8008df8 <_svfiprintf_r+0x34>
 8008ddc:	2140      	movs	r1, #64	; 0x40
 8008dde:	f7fe f9f5 	bl	80071cc <_malloc_r>
 8008de2:	6020      	str	r0, [r4, #0]
 8008de4:	6120      	str	r0, [r4, #16]
 8008de6:	b928      	cbnz	r0, 8008df4 <_svfiprintf_r+0x30>
 8008de8:	230c      	movs	r3, #12
 8008dea:	f8c8 3000 	str.w	r3, [r8]
 8008dee:	f04f 30ff 	mov.w	r0, #4294967295
 8008df2:	e0c8      	b.n	8008f86 <_svfiprintf_r+0x1c2>
 8008df4:	2340      	movs	r3, #64	; 0x40
 8008df6:	6163      	str	r3, [r4, #20]
 8008df8:	2300      	movs	r3, #0
 8008dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8008dfc:	2320      	movs	r3, #32
 8008dfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e02:	2330      	movs	r3, #48	; 0x30
 8008e04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e08:	9503      	str	r5, [sp, #12]
 8008e0a:	f04f 0b01 	mov.w	fp, #1
 8008e0e:	4637      	mov	r7, r6
 8008e10:	463d      	mov	r5, r7
 8008e12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008e16:	b10b      	cbz	r3, 8008e1c <_svfiprintf_r+0x58>
 8008e18:	2b25      	cmp	r3, #37	; 0x25
 8008e1a:	d13e      	bne.n	8008e9a <_svfiprintf_r+0xd6>
 8008e1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008e20:	d00b      	beq.n	8008e3a <_svfiprintf_r+0x76>
 8008e22:	4653      	mov	r3, sl
 8008e24:	4632      	mov	r2, r6
 8008e26:	4621      	mov	r1, r4
 8008e28:	4640      	mov	r0, r8
 8008e2a:	f7ff ff71 	bl	8008d10 <__ssputs_r>
 8008e2e:	3001      	adds	r0, #1
 8008e30:	f000 80a4 	beq.w	8008f7c <_svfiprintf_r+0x1b8>
 8008e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e36:	4453      	add	r3, sl
 8008e38:	9309      	str	r3, [sp, #36]	; 0x24
 8008e3a:	783b      	ldrb	r3, [r7, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f000 809d 	beq.w	8008f7c <_svfiprintf_r+0x1b8>
 8008e42:	2300      	movs	r3, #0
 8008e44:	f04f 32ff 	mov.w	r2, #4294967295
 8008e48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e4c:	9304      	str	r3, [sp, #16]
 8008e4e:	9307      	str	r3, [sp, #28]
 8008e50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e54:	931a      	str	r3, [sp, #104]	; 0x68
 8008e56:	462f      	mov	r7, r5
 8008e58:	2205      	movs	r2, #5
 8008e5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008e5e:	4850      	ldr	r0, [pc, #320]	; (8008fa0 <_svfiprintf_r+0x1dc>)
 8008e60:	f7f7 fa46 	bl	80002f0 <memchr>
 8008e64:	9b04      	ldr	r3, [sp, #16]
 8008e66:	b9d0      	cbnz	r0, 8008e9e <_svfiprintf_r+0xda>
 8008e68:	06d9      	lsls	r1, r3, #27
 8008e6a:	bf44      	itt	mi
 8008e6c:	2220      	movmi	r2, #32
 8008e6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e72:	071a      	lsls	r2, r3, #28
 8008e74:	bf44      	itt	mi
 8008e76:	222b      	movmi	r2, #43	; 0x2b
 8008e78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e7c:	782a      	ldrb	r2, [r5, #0]
 8008e7e:	2a2a      	cmp	r2, #42	; 0x2a
 8008e80:	d015      	beq.n	8008eae <_svfiprintf_r+0xea>
 8008e82:	9a07      	ldr	r2, [sp, #28]
 8008e84:	462f      	mov	r7, r5
 8008e86:	2000      	movs	r0, #0
 8008e88:	250a      	movs	r5, #10
 8008e8a:	4639      	mov	r1, r7
 8008e8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e90:	3b30      	subs	r3, #48	; 0x30
 8008e92:	2b09      	cmp	r3, #9
 8008e94:	d94d      	bls.n	8008f32 <_svfiprintf_r+0x16e>
 8008e96:	b1b8      	cbz	r0, 8008ec8 <_svfiprintf_r+0x104>
 8008e98:	e00f      	b.n	8008eba <_svfiprintf_r+0xf6>
 8008e9a:	462f      	mov	r7, r5
 8008e9c:	e7b8      	b.n	8008e10 <_svfiprintf_r+0x4c>
 8008e9e:	4a40      	ldr	r2, [pc, #256]	; (8008fa0 <_svfiprintf_r+0x1dc>)
 8008ea0:	1a80      	subs	r0, r0, r2
 8008ea2:	fa0b f000 	lsl.w	r0, fp, r0
 8008ea6:	4318      	orrs	r0, r3
 8008ea8:	9004      	str	r0, [sp, #16]
 8008eaa:	463d      	mov	r5, r7
 8008eac:	e7d3      	b.n	8008e56 <_svfiprintf_r+0x92>
 8008eae:	9a03      	ldr	r2, [sp, #12]
 8008eb0:	1d11      	adds	r1, r2, #4
 8008eb2:	6812      	ldr	r2, [r2, #0]
 8008eb4:	9103      	str	r1, [sp, #12]
 8008eb6:	2a00      	cmp	r2, #0
 8008eb8:	db01      	blt.n	8008ebe <_svfiprintf_r+0xfa>
 8008eba:	9207      	str	r2, [sp, #28]
 8008ebc:	e004      	b.n	8008ec8 <_svfiprintf_r+0x104>
 8008ebe:	4252      	negs	r2, r2
 8008ec0:	f043 0302 	orr.w	r3, r3, #2
 8008ec4:	9207      	str	r2, [sp, #28]
 8008ec6:	9304      	str	r3, [sp, #16]
 8008ec8:	783b      	ldrb	r3, [r7, #0]
 8008eca:	2b2e      	cmp	r3, #46	; 0x2e
 8008ecc:	d10c      	bne.n	8008ee8 <_svfiprintf_r+0x124>
 8008ece:	787b      	ldrb	r3, [r7, #1]
 8008ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ed2:	d133      	bne.n	8008f3c <_svfiprintf_r+0x178>
 8008ed4:	9b03      	ldr	r3, [sp, #12]
 8008ed6:	1d1a      	adds	r2, r3, #4
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	9203      	str	r2, [sp, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	bfb8      	it	lt
 8008ee0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ee4:	3702      	adds	r7, #2
 8008ee6:	9305      	str	r3, [sp, #20]
 8008ee8:	4d2e      	ldr	r5, [pc, #184]	; (8008fa4 <_svfiprintf_r+0x1e0>)
 8008eea:	7839      	ldrb	r1, [r7, #0]
 8008eec:	2203      	movs	r2, #3
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f7f7 f9fe 	bl	80002f0 <memchr>
 8008ef4:	b138      	cbz	r0, 8008f06 <_svfiprintf_r+0x142>
 8008ef6:	2340      	movs	r3, #64	; 0x40
 8008ef8:	1b40      	subs	r0, r0, r5
 8008efa:	fa03 f000 	lsl.w	r0, r3, r0
 8008efe:	9b04      	ldr	r3, [sp, #16]
 8008f00:	4303      	orrs	r3, r0
 8008f02:	3701      	adds	r7, #1
 8008f04:	9304      	str	r3, [sp, #16]
 8008f06:	7839      	ldrb	r1, [r7, #0]
 8008f08:	4827      	ldr	r0, [pc, #156]	; (8008fa8 <_svfiprintf_r+0x1e4>)
 8008f0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f0e:	2206      	movs	r2, #6
 8008f10:	1c7e      	adds	r6, r7, #1
 8008f12:	f7f7 f9ed 	bl	80002f0 <memchr>
 8008f16:	2800      	cmp	r0, #0
 8008f18:	d038      	beq.n	8008f8c <_svfiprintf_r+0x1c8>
 8008f1a:	4b24      	ldr	r3, [pc, #144]	; (8008fac <_svfiprintf_r+0x1e8>)
 8008f1c:	bb13      	cbnz	r3, 8008f64 <_svfiprintf_r+0x1a0>
 8008f1e:	9b03      	ldr	r3, [sp, #12]
 8008f20:	3307      	adds	r3, #7
 8008f22:	f023 0307 	bic.w	r3, r3, #7
 8008f26:	3308      	adds	r3, #8
 8008f28:	9303      	str	r3, [sp, #12]
 8008f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f2c:	444b      	add	r3, r9
 8008f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f30:	e76d      	b.n	8008e0e <_svfiprintf_r+0x4a>
 8008f32:	fb05 3202 	mla	r2, r5, r2, r3
 8008f36:	2001      	movs	r0, #1
 8008f38:	460f      	mov	r7, r1
 8008f3a:	e7a6      	b.n	8008e8a <_svfiprintf_r+0xc6>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	3701      	adds	r7, #1
 8008f40:	9305      	str	r3, [sp, #20]
 8008f42:	4619      	mov	r1, r3
 8008f44:	250a      	movs	r5, #10
 8008f46:	4638      	mov	r0, r7
 8008f48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f4c:	3a30      	subs	r2, #48	; 0x30
 8008f4e:	2a09      	cmp	r2, #9
 8008f50:	d903      	bls.n	8008f5a <_svfiprintf_r+0x196>
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0c8      	beq.n	8008ee8 <_svfiprintf_r+0x124>
 8008f56:	9105      	str	r1, [sp, #20]
 8008f58:	e7c6      	b.n	8008ee8 <_svfiprintf_r+0x124>
 8008f5a:	fb05 2101 	mla	r1, r5, r1, r2
 8008f5e:	2301      	movs	r3, #1
 8008f60:	4607      	mov	r7, r0
 8008f62:	e7f0      	b.n	8008f46 <_svfiprintf_r+0x182>
 8008f64:	ab03      	add	r3, sp, #12
 8008f66:	9300      	str	r3, [sp, #0]
 8008f68:	4622      	mov	r2, r4
 8008f6a:	4b11      	ldr	r3, [pc, #68]	; (8008fb0 <_svfiprintf_r+0x1ec>)
 8008f6c:	a904      	add	r1, sp, #16
 8008f6e:	4640      	mov	r0, r8
 8008f70:	f7fe fa0e 	bl	8007390 <_printf_float>
 8008f74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008f78:	4681      	mov	r9, r0
 8008f7a:	d1d6      	bne.n	8008f2a <_svfiprintf_r+0x166>
 8008f7c:	89a3      	ldrh	r3, [r4, #12]
 8008f7e:	065b      	lsls	r3, r3, #25
 8008f80:	f53f af35 	bmi.w	8008dee <_svfiprintf_r+0x2a>
 8008f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f86:	b01d      	add	sp, #116	; 0x74
 8008f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f8c:	ab03      	add	r3, sp, #12
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	4622      	mov	r2, r4
 8008f92:	4b07      	ldr	r3, [pc, #28]	; (8008fb0 <_svfiprintf_r+0x1ec>)
 8008f94:	a904      	add	r1, sp, #16
 8008f96:	4640      	mov	r0, r8
 8008f98:	f7fe fc9c 	bl	80078d4 <_printf_i>
 8008f9c:	e7ea      	b.n	8008f74 <_svfiprintf_r+0x1b0>
 8008f9e:	bf00      	nop
 8008fa0:	08009694 	.word	0x08009694
 8008fa4:	0800969a 	.word	0x0800969a
 8008fa8:	0800969e 	.word	0x0800969e
 8008fac:	08007391 	.word	0x08007391
 8008fb0:	08008d11 	.word	0x08008d11

08008fb4 <__ascii_mbtowc>:
 8008fb4:	b082      	sub	sp, #8
 8008fb6:	b901      	cbnz	r1, 8008fba <__ascii_mbtowc+0x6>
 8008fb8:	a901      	add	r1, sp, #4
 8008fba:	b142      	cbz	r2, 8008fce <__ascii_mbtowc+0x1a>
 8008fbc:	b14b      	cbz	r3, 8008fd2 <__ascii_mbtowc+0x1e>
 8008fbe:	7813      	ldrb	r3, [r2, #0]
 8008fc0:	600b      	str	r3, [r1, #0]
 8008fc2:	7812      	ldrb	r2, [r2, #0]
 8008fc4:	1c10      	adds	r0, r2, #0
 8008fc6:	bf18      	it	ne
 8008fc8:	2001      	movne	r0, #1
 8008fca:	b002      	add	sp, #8
 8008fcc:	4770      	bx	lr
 8008fce:	4610      	mov	r0, r2
 8008fd0:	e7fb      	b.n	8008fca <__ascii_mbtowc+0x16>
 8008fd2:	f06f 0001 	mvn.w	r0, #1
 8008fd6:	e7f8      	b.n	8008fca <__ascii_mbtowc+0x16>

08008fd8 <memmove>:
 8008fd8:	4288      	cmp	r0, r1
 8008fda:	b510      	push	{r4, lr}
 8008fdc:	eb01 0302 	add.w	r3, r1, r2
 8008fe0:	d807      	bhi.n	8008ff2 <memmove+0x1a>
 8008fe2:	1e42      	subs	r2, r0, #1
 8008fe4:	4299      	cmp	r1, r3
 8008fe6:	d00a      	beq.n	8008ffe <memmove+0x26>
 8008fe8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fec:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008ff0:	e7f8      	b.n	8008fe4 <memmove+0xc>
 8008ff2:	4283      	cmp	r3, r0
 8008ff4:	d9f5      	bls.n	8008fe2 <memmove+0xa>
 8008ff6:	1881      	adds	r1, r0, r2
 8008ff8:	1ad2      	subs	r2, r2, r3
 8008ffa:	42d3      	cmn	r3, r2
 8008ffc:	d100      	bne.n	8009000 <memmove+0x28>
 8008ffe:	bd10      	pop	{r4, pc}
 8009000:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009004:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009008:	e7f7      	b.n	8008ffa <memmove+0x22>

0800900a <_realloc_r>:
 800900a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900c:	4607      	mov	r7, r0
 800900e:	4614      	mov	r4, r2
 8009010:	460e      	mov	r6, r1
 8009012:	b921      	cbnz	r1, 800901e <_realloc_r+0x14>
 8009014:	4611      	mov	r1, r2
 8009016:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800901a:	f7fe b8d7 	b.w	80071cc <_malloc_r>
 800901e:	b922      	cbnz	r2, 800902a <_realloc_r+0x20>
 8009020:	f7fe f886 	bl	8007130 <_free_r>
 8009024:	4625      	mov	r5, r4
 8009026:	4628      	mov	r0, r5
 8009028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800902a:	f000 f821 	bl	8009070 <_malloc_usable_size_r>
 800902e:	42a0      	cmp	r0, r4
 8009030:	d20f      	bcs.n	8009052 <_realloc_r+0x48>
 8009032:	4621      	mov	r1, r4
 8009034:	4638      	mov	r0, r7
 8009036:	f7fe f8c9 	bl	80071cc <_malloc_r>
 800903a:	4605      	mov	r5, r0
 800903c:	2800      	cmp	r0, #0
 800903e:	d0f2      	beq.n	8009026 <_realloc_r+0x1c>
 8009040:	4631      	mov	r1, r6
 8009042:	4622      	mov	r2, r4
 8009044:	f7ff fb6e 	bl	8008724 <memcpy>
 8009048:	4631      	mov	r1, r6
 800904a:	4638      	mov	r0, r7
 800904c:	f7fe f870 	bl	8007130 <_free_r>
 8009050:	e7e9      	b.n	8009026 <_realloc_r+0x1c>
 8009052:	4635      	mov	r5, r6
 8009054:	e7e7      	b.n	8009026 <_realloc_r+0x1c>

08009056 <__ascii_wctomb>:
 8009056:	b149      	cbz	r1, 800906c <__ascii_wctomb+0x16>
 8009058:	2aff      	cmp	r2, #255	; 0xff
 800905a:	bf85      	ittet	hi
 800905c:	238a      	movhi	r3, #138	; 0x8a
 800905e:	6003      	strhi	r3, [r0, #0]
 8009060:	700a      	strbls	r2, [r1, #0]
 8009062:	f04f 30ff 	movhi.w	r0, #4294967295
 8009066:	bf98      	it	ls
 8009068:	2001      	movls	r0, #1
 800906a:	4770      	bx	lr
 800906c:	4608      	mov	r0, r1
 800906e:	4770      	bx	lr

08009070 <_malloc_usable_size_r>:
 8009070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009074:	1f18      	subs	r0, r3, #4
 8009076:	2b00      	cmp	r3, #0
 8009078:	bfbc      	itt	lt
 800907a:	580b      	ldrlt	r3, [r1, r0]
 800907c:	18c0      	addlt	r0, r0, r3
 800907e:	4770      	bx	lr

08009080 <atan2f>:
 8009080:	f000 b852 	b.w	8009128 <__ieee754_atan2f>
 8009084:	0000      	movs	r0, r0
	...

08009088 <sqrtf>:
 8009088:	b500      	push	{lr}
 800908a:	ed2d 8b02 	vpush	{d8}
 800908e:	b08b      	sub	sp, #44	; 0x2c
 8009090:	eeb0 8a40 	vmov.f32	s16, s0
 8009094:	f000 f8f2 	bl	800927c <__ieee754_sqrtf>
 8009098:	4b21      	ldr	r3, [pc, #132]	; (8009120 <sqrtf+0x98>)
 800909a:	f993 3000 	ldrsb.w	r3, [r3]
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	d028      	beq.n	80090f4 <sqrtf+0x6c>
 80090a2:	eeb4 8a48 	vcmp.f32	s16, s16
 80090a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090aa:	d623      	bvs.n	80090f4 <sqrtf+0x6c>
 80090ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80090b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090b4:	d51e      	bpl.n	80090f4 <sqrtf+0x6c>
 80090b6:	2201      	movs	r2, #1
 80090b8:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 80090bc:	9200      	str	r2, [sp, #0]
 80090be:	4a19      	ldr	r2, [pc, #100]	; (8009124 <sqrtf+0x9c>)
 80090c0:	9201      	str	r2, [sp, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	9208      	str	r2, [sp, #32]
 80090c6:	ed8d 8b04 	vstr	d8, [sp, #16]
 80090ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80090ce:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8009118 <sqrtf+0x90>
 80090d2:	b9a3      	cbnz	r3, 80090fe <sqrtf+0x76>
 80090d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80090d8:	4668      	mov	r0, sp
 80090da:	f000 f8d2 	bl	8009282 <matherr>
 80090de:	b1a0      	cbz	r0, 800910a <sqrtf+0x82>
 80090e0:	9b08      	ldr	r3, [sp, #32]
 80090e2:	b11b      	cbz	r3, 80090ec <sqrtf+0x64>
 80090e4:	f7fd ffe2 	bl	80070ac <__errno>
 80090e8:	9b08      	ldr	r3, [sp, #32]
 80090ea:	6003      	str	r3, [r0, #0]
 80090ec:	ed9d 0b06 	vldr	d0, [sp, #24]
 80090f0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80090f4:	b00b      	add	sp, #44	; 0x2c
 80090f6:	ecbd 8b02 	vpop	{d8}
 80090fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80090fe:	2b02      	cmp	r3, #2
 8009100:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8009104:	ed8d 6b06 	vstr	d6, [sp, #24]
 8009108:	d1e6      	bne.n	80090d8 <sqrtf+0x50>
 800910a:	f7fd ffcf 	bl	80070ac <__errno>
 800910e:	2321      	movs	r3, #33	; 0x21
 8009110:	6003      	str	r3, [r0, #0]
 8009112:	e7e5      	b.n	80090e0 <sqrtf+0x58>
 8009114:	f3af 8000 	nop.w
	...
 8009120:	200001e0 	.word	0x200001e0
 8009124:	080097b0 	.word	0x080097b0

08009128 <__ieee754_atan2f>:
 8009128:	ee10 2a90 	vmov	r2, s1
 800912c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009130:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009134:	b510      	push	{r4, lr}
 8009136:	eef0 7a40 	vmov.f32	s15, s0
 800913a:	dc06      	bgt.n	800914a <__ieee754_atan2f+0x22>
 800913c:	ee10 0a10 	vmov	r0, s0
 8009140:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009144:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009148:	dd04      	ble.n	8009154 <__ieee754_atan2f+0x2c>
 800914a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800914e:	eeb0 0a67 	vmov.f32	s0, s15
 8009152:	bd10      	pop	{r4, pc}
 8009154:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8009158:	d103      	bne.n	8009162 <__ieee754_atan2f+0x3a>
 800915a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800915e:	f000 b893 	b.w	8009288 <atanf>
 8009162:	1794      	asrs	r4, r2, #30
 8009164:	f004 0402 	and.w	r4, r4, #2
 8009168:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800916c:	b93b      	cbnz	r3, 800917e <__ieee754_atan2f+0x56>
 800916e:	2c02      	cmp	r4, #2
 8009170:	d06b      	beq.n	800924a <__ieee754_atan2f+0x122>
 8009172:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8009250 <__ieee754_atan2f+0x128>
 8009176:	2c03      	cmp	r4, #3
 8009178:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800917c:	e7e7      	b.n	800914e <__ieee754_atan2f+0x26>
 800917e:	b939      	cbnz	r1, 8009190 <__ieee754_atan2f+0x68>
 8009180:	eddf 7a34 	vldr	s15, [pc, #208]	; 8009254 <__ieee754_atan2f+0x12c>
 8009184:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009258 <__ieee754_atan2f+0x130>
 8009188:	2800      	cmp	r0, #0
 800918a:	fe67 7a87 	vselge.f32	s15, s15, s14
 800918e:	e7de      	b.n	800914e <__ieee754_atan2f+0x26>
 8009190:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009194:	d121      	bne.n	80091da <__ieee754_atan2f+0xb2>
 8009196:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800919a:	d111      	bne.n	80091c0 <__ieee754_atan2f+0x98>
 800919c:	2c02      	cmp	r4, #2
 800919e:	d009      	beq.n	80091b4 <__ieee754_atan2f+0x8c>
 80091a0:	2c03      	cmp	r4, #3
 80091a2:	d00a      	beq.n	80091ba <__ieee754_atan2f+0x92>
 80091a4:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800925c <__ieee754_atan2f+0x134>
 80091a8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8009260 <__ieee754_atan2f+0x138>
 80091ac:	2c01      	cmp	r4, #1
 80091ae:	fe47 7a87 	vseleq.f32	s15, s15, s14
 80091b2:	e7cc      	b.n	800914e <__ieee754_atan2f+0x26>
 80091b4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009264 <__ieee754_atan2f+0x13c>
 80091b8:	e7c9      	b.n	800914e <__ieee754_atan2f+0x26>
 80091ba:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009268 <__ieee754_atan2f+0x140>
 80091be:	e7c6      	b.n	800914e <__ieee754_atan2f+0x26>
 80091c0:	2c02      	cmp	r4, #2
 80091c2:	d042      	beq.n	800924a <__ieee754_atan2f+0x122>
 80091c4:	2c03      	cmp	r4, #3
 80091c6:	d005      	beq.n	80091d4 <__ieee754_atan2f+0xac>
 80091c8:	2c01      	cmp	r4, #1
 80091ca:	eddf 7a28 	vldr	s15, [pc, #160]	; 800926c <__ieee754_atan2f+0x144>
 80091ce:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8009270 <__ieee754_atan2f+0x148>
 80091d2:	e7ec      	b.n	80091ae <__ieee754_atan2f+0x86>
 80091d4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8009250 <__ieee754_atan2f+0x128>
 80091d8:	e7b9      	b.n	800914e <__ieee754_atan2f+0x26>
 80091da:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80091de:	d0cf      	beq.n	8009180 <__ieee754_atan2f+0x58>
 80091e0:	1a5b      	subs	r3, r3, r1
 80091e2:	15db      	asrs	r3, r3, #23
 80091e4:	2b3c      	cmp	r3, #60	; 0x3c
 80091e6:	dc1a      	bgt.n	800921e <__ieee754_atan2f+0xf6>
 80091e8:	2a00      	cmp	r2, #0
 80091ea:	da01      	bge.n	80091f0 <__ieee754_atan2f+0xc8>
 80091ec:	333c      	adds	r3, #60	; 0x3c
 80091ee:	db19      	blt.n	8009224 <__ieee754_atan2f+0xfc>
 80091f0:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80091f4:	f000 f91a 	bl	800942c <fabsf>
 80091f8:	f000 f846 	bl	8009288 <atanf>
 80091fc:	eef0 7a40 	vmov.f32	s15, s0
 8009200:	2c01      	cmp	r4, #1
 8009202:	d012      	beq.n	800922a <__ieee754_atan2f+0x102>
 8009204:	2c02      	cmp	r4, #2
 8009206:	d017      	beq.n	8009238 <__ieee754_atan2f+0x110>
 8009208:	2c00      	cmp	r4, #0
 800920a:	d0a0      	beq.n	800914e <__ieee754_atan2f+0x26>
 800920c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009274 <__ieee754_atan2f+0x14c>
 8009210:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009214:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8009278 <__ieee754_atan2f+0x150>
 8009218:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800921c:	e797      	b.n	800914e <__ieee754_atan2f+0x26>
 800921e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009254 <__ieee754_atan2f+0x12c>
 8009222:	e7ed      	b.n	8009200 <__ieee754_atan2f+0xd8>
 8009224:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009270 <__ieee754_atan2f+0x148>
 8009228:	e7ea      	b.n	8009200 <__ieee754_atan2f+0xd8>
 800922a:	ee17 3a90 	vmov	r3, s15
 800922e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009232:	ee07 3a90 	vmov	s15, r3
 8009236:	e78a      	b.n	800914e <__ieee754_atan2f+0x26>
 8009238:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8009274 <__ieee754_atan2f+0x14c>
 800923c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009240:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8009278 <__ieee754_atan2f+0x150>
 8009244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009248:	e781      	b.n	800914e <__ieee754_atan2f+0x26>
 800924a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009278 <__ieee754_atan2f+0x150>
 800924e:	e77e      	b.n	800914e <__ieee754_atan2f+0x26>
 8009250:	c0490fdb 	.word	0xc0490fdb
 8009254:	3fc90fdb 	.word	0x3fc90fdb
 8009258:	bfc90fdb 	.word	0xbfc90fdb
 800925c:	bf490fdb 	.word	0xbf490fdb
 8009260:	3f490fdb 	.word	0x3f490fdb
 8009264:	4016cbe4 	.word	0x4016cbe4
 8009268:	c016cbe4 	.word	0xc016cbe4
 800926c:	80000000 	.word	0x80000000
 8009270:	00000000 	.word	0x00000000
 8009274:	33bbbd2e 	.word	0x33bbbd2e
 8009278:	40490fdb 	.word	0x40490fdb

0800927c <__ieee754_sqrtf>:
 800927c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009280:	4770      	bx	lr

08009282 <matherr>:
 8009282:	2000      	movs	r0, #0
 8009284:	4770      	bx	lr
	...

08009288 <atanf>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	ee10 5a10 	vmov	r5, s0
 800928e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009292:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009296:	eef0 7a40 	vmov.f32	s15, s0
 800929a:	db0f      	blt.n	80092bc <atanf+0x34>
 800929c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80092a0:	dd04      	ble.n	80092ac <atanf+0x24>
 80092a2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80092a6:	eeb0 0a67 	vmov.f32	s0, s15
 80092aa:	bd38      	pop	{r3, r4, r5, pc}
 80092ac:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80093e0 <atanf+0x158>
 80092b0:	eddf 7a4c 	vldr	s15, [pc, #304]	; 80093e4 <atanf+0x15c>
 80092b4:	2d00      	cmp	r5, #0
 80092b6:	fe77 7a87 	vselgt.f32	s15, s15, s14
 80092ba:	e7f4      	b.n	80092a6 <atanf+0x1e>
 80092bc:	4b4a      	ldr	r3, [pc, #296]	; (80093e8 <atanf+0x160>)
 80092be:	429c      	cmp	r4, r3
 80092c0:	dc10      	bgt.n	80092e4 <atanf+0x5c>
 80092c2:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80092c6:	da0a      	bge.n	80092de <atanf+0x56>
 80092c8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80093ec <atanf+0x164>
 80092cc:	ee30 7a07 	vadd.f32	s14, s0, s14
 80092d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092d4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80092d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092dc:	dce3      	bgt.n	80092a6 <atanf+0x1e>
 80092de:	f04f 33ff 	mov.w	r3, #4294967295
 80092e2:	e013      	b.n	800930c <atanf+0x84>
 80092e4:	f000 f8a2 	bl	800942c <fabsf>
 80092e8:	4b41      	ldr	r3, [pc, #260]	; (80093f0 <atanf+0x168>)
 80092ea:	429c      	cmp	r4, r3
 80092ec:	dc4f      	bgt.n	800938e <atanf+0x106>
 80092ee:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80092f2:	429c      	cmp	r4, r3
 80092f4:	dc41      	bgt.n	800937a <atanf+0xf2>
 80092f6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80092fa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80092fe:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009302:	2300      	movs	r3, #0
 8009304:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009308:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800930c:	1c5a      	adds	r2, r3, #1
 800930e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009312:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80093f4 <atanf+0x16c>
 8009316:	eddf 5a38 	vldr	s11, [pc, #224]	; 80093f8 <atanf+0x170>
 800931a:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80093fc <atanf+0x174>
 800931e:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009322:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009326:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009400 <atanf+0x178>
 800932a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800932e:	eddf 5a35 	vldr	s11, [pc, #212]	; 8009404 <atanf+0x17c>
 8009332:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009336:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009408 <atanf+0x180>
 800933a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800933e:	eddf 5a33 	vldr	s11, [pc, #204]	; 800940c <atanf+0x184>
 8009342:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009346:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009410 <atanf+0x188>
 800934a:	eea6 5a87 	vfma.f32	s10, s13, s14
 800934e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009414 <atanf+0x18c>
 8009352:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009356:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8009418 <atanf+0x190>
 800935a:	eea7 5a26 	vfma.f32	s10, s14, s13
 800935e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800941c <atanf+0x194>
 8009362:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009366:	ee27 7a26 	vmul.f32	s14, s14, s13
 800936a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800936e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009372:	d121      	bne.n	80093b8 <atanf+0x130>
 8009374:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009378:	e795      	b.n	80092a6 <atanf+0x1e>
 800937a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800937e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009382:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009386:	2301      	movs	r3, #1
 8009388:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800938c:	e7be      	b.n	800930c <atanf+0x84>
 800938e:	4b24      	ldr	r3, [pc, #144]	; (8009420 <atanf+0x198>)
 8009390:	429c      	cmp	r4, r3
 8009392:	dc0b      	bgt.n	80093ac <atanf+0x124>
 8009394:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009398:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800939c:	eea0 7a27 	vfma.f32	s14, s0, s15
 80093a0:	2302      	movs	r3, #2
 80093a2:	ee70 6a67 	vsub.f32	s13, s0, s15
 80093a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093aa:	e7af      	b.n	800930c <atanf+0x84>
 80093ac:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80093b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80093b4:	2303      	movs	r3, #3
 80093b6:	e7a9      	b.n	800930c <atanf+0x84>
 80093b8:	4a1a      	ldr	r2, [pc, #104]	; (8009424 <atanf+0x19c>)
 80093ba:	491b      	ldr	r1, [pc, #108]	; (8009428 <atanf+0x1a0>)
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	441a      	add	r2, r3
 80093c0:	440b      	add	r3, r1
 80093c2:	edd3 6a00 	vldr	s13, [r3]
 80093c6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80093ca:	2d00      	cmp	r5, #0
 80093cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093d0:	ed92 7a00 	vldr	s14, [r2]
 80093d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093d8:	bfb8      	it	lt
 80093da:	eef1 7a67 	vneglt.f32	s15, s15
 80093de:	e762      	b.n	80092a6 <atanf+0x1e>
 80093e0:	bfc90fdb 	.word	0xbfc90fdb
 80093e4:	3fc90fdb 	.word	0x3fc90fdb
 80093e8:	3edfffff 	.word	0x3edfffff
 80093ec:	7149f2ca 	.word	0x7149f2ca
 80093f0:	3f97ffff 	.word	0x3f97ffff
 80093f4:	3c8569d7 	.word	0x3c8569d7
 80093f8:	3d4bda59 	.word	0x3d4bda59
 80093fc:	bd6ef16b 	.word	0xbd6ef16b
 8009400:	3d886b35 	.word	0x3d886b35
 8009404:	3dba2e6e 	.word	0x3dba2e6e
 8009408:	3e124925 	.word	0x3e124925
 800940c:	3eaaaaab 	.word	0x3eaaaaab
 8009410:	bd15a221 	.word	0xbd15a221
 8009414:	bd9d8795 	.word	0xbd9d8795
 8009418:	bde38e38 	.word	0xbde38e38
 800941c:	be4ccccd 	.word	0xbe4ccccd
 8009420:	401bffff 	.word	0x401bffff
 8009424:	080097b8 	.word	0x080097b8
 8009428:	080097c8 	.word	0x080097c8

0800942c <fabsf>:
 800942c:	ee10 3a10 	vmov	r3, s0
 8009430:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009434:	ee00 3a10 	vmov	s0, r3
 8009438:	4770      	bx	lr
	...

0800943c <_init>:
 800943c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943e:	bf00      	nop
 8009440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009442:	bc08      	pop	{r3}
 8009444:	469e      	mov	lr, r3
 8009446:	4770      	bx	lr

08009448 <_fini>:
 8009448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944a:	bf00      	nop
 800944c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800944e:	bc08      	pop	{r3}
 8009450:	469e      	mov	lr, r3
 8009452:	4770      	bx	lr
