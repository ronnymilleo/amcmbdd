
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000955c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080097f4  080097f4  000197f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009860  08009860  00019860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009868  08009868  00019868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800986c  0800986c  0001986c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08009870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00014330  24000078  080098e8  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240143a8  080098e8  000243a8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c1ef  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000471f  00000000  00000000  0004c295  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001550  00000000  00000000  000509b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000013b8  00000000  00000000  00051f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003bb53  00000000  00000000  000532c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000181d7  00000000  00000000  0008ee13  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0018591e  00000000  00000000  000a6fea  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000e9  00000000  00000000  0022c908  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005784  00000000  00000000  0022c9f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00002073  00000000  00000000  00232178  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080097dc 	.word	0x080097dc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	080097dc 	.word	0x080097dc

080002d8 <__aeabi_ldivmod>:
 80002d8:	b97b      	cbnz	r3, 80002fa <__aeabi_ldivmod+0x22>
 80002da:	b972      	cbnz	r2, 80002fa <__aeabi_ldivmod+0x22>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bfbe      	ittt	lt
 80002e0:	2000      	movlt	r0, #0
 80002e2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002e6:	e006      	blt.n	80002f6 <__aeabi_ldivmod+0x1e>
 80002e8:	bf08      	it	eq
 80002ea:	2800      	cmpeq	r0, #0
 80002ec:	bf1c      	itt	ne
 80002ee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002f2:	f04f 30ff 	movne.w	r0, #4294967295
 80002f6:	f000 b9bd 	b.w	8000674 <__aeabi_idiv0>
 80002fa:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000302:	2900      	cmp	r1, #0
 8000304:	db09      	blt.n	800031a <__aeabi_ldivmod+0x42>
 8000306:	2b00      	cmp	r3, #0
 8000308:	db1a      	blt.n	8000340 <__aeabi_ldivmod+0x68>
 800030a:	f000 f84d 	bl	80003a8 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4770      	bx	lr
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	2b00      	cmp	r3, #0
 8000322:	db1b      	blt.n	800035c <__aeabi_ldivmod+0x84>
 8000324:	f000 f840 	bl	80003a8 <__udivmoddi4>
 8000328:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000330:	b004      	add	sp, #16
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	f000 f82f 	bl	80003a8 <__udivmoddi4>
 800034a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000352:	b004      	add	sp, #16
 8000354:	4240      	negs	r0, r0
 8000356:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035a:	4770      	bx	lr
 800035c:	4252      	negs	r2, r2
 800035e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000362:	f000 f821 	bl	80003a8 <__udivmoddi4>
 8000366:	f8dd e004 	ldr.w	lr, [sp, #4]
 800036a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036e:	b004      	add	sp, #16
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr

08000378 <__aeabi_uldivmod>:
 8000378:	b953      	cbnz	r3, 8000390 <__aeabi_uldivmod+0x18>
 800037a:	b94a      	cbnz	r2, 8000390 <__aeabi_uldivmod+0x18>
 800037c:	2900      	cmp	r1, #0
 800037e:	bf08      	it	eq
 8000380:	2800      	cmpeq	r0, #0
 8000382:	bf1c      	itt	ne
 8000384:	f04f 31ff 	movne.w	r1, #4294967295
 8000388:	f04f 30ff 	movne.w	r0, #4294967295
 800038c:	f000 b972 	b.w	8000674 <__aeabi_idiv0>
 8000390:	f1ad 0c08 	sub.w	ip, sp, #8
 8000394:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000398:	f000 f806 	bl	80003a8 <__udivmoddi4>
 800039c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a4:	b004      	add	sp, #16
 80003a6:	4770      	bx	lr

080003a8 <__udivmoddi4>:
 80003a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003ac:	9e08      	ldr	r6, [sp, #32]
 80003ae:	4604      	mov	r4, r0
 80003b0:	4688      	mov	r8, r1
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d14b      	bne.n	800044e <__udivmoddi4+0xa6>
 80003b6:	428a      	cmp	r2, r1
 80003b8:	4615      	mov	r5, r2
 80003ba:	d967      	bls.n	800048c <__udivmoddi4+0xe4>
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	b14a      	cbz	r2, 80003d6 <__udivmoddi4+0x2e>
 80003c2:	f1c2 0720 	rsb	r7, r2, #32
 80003c6:	fa01 f302 	lsl.w	r3, r1, r2
 80003ca:	fa20 f707 	lsr.w	r7, r0, r7
 80003ce:	4095      	lsls	r5, r2
 80003d0:	ea47 0803 	orr.w	r8, r7, r3
 80003d4:	4094      	lsls	r4, r2
 80003d6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003da:	0c23      	lsrs	r3, r4, #16
 80003dc:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e0:	fa1f fc85 	uxth.w	ip, r5
 80003e4:	fb0e 8817 	mls	r8, lr, r7, r8
 80003e8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ec:	fb07 f10c 	mul.w	r1, r7, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x60>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f107 30ff 	add.w	r0, r7, #4294967295
 80003fa:	f080 811b 	bcs.w	8000634 <__udivmoddi4+0x28c>
 80003fe:	4299      	cmp	r1, r3
 8000400:	f240 8118 	bls.w	8000634 <__udivmoddi4+0x28c>
 8000404:	3f02      	subs	r7, #2
 8000406:	442b      	add	r3, r5
 8000408:	1a5b      	subs	r3, r3, r1
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000410:	fb0e 3310 	mls	r3, lr, r0, r3
 8000414:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000418:	fb00 fc0c 	mul.w	ip, r0, ip
 800041c:	45a4      	cmp	ip, r4
 800041e:	d909      	bls.n	8000434 <__udivmoddi4+0x8c>
 8000420:	192c      	adds	r4, r5, r4
 8000422:	f100 33ff 	add.w	r3, r0, #4294967295
 8000426:	f080 8107 	bcs.w	8000638 <__udivmoddi4+0x290>
 800042a:	45a4      	cmp	ip, r4
 800042c:	f240 8104 	bls.w	8000638 <__udivmoddi4+0x290>
 8000430:	3802      	subs	r0, #2
 8000432:	442c      	add	r4, r5
 8000434:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000438:	eba4 040c 	sub.w	r4, r4, ip
 800043c:	2700      	movs	r7, #0
 800043e:	b11e      	cbz	r6, 8000448 <__udivmoddi4+0xa0>
 8000440:	40d4      	lsrs	r4, r2
 8000442:	2300      	movs	r3, #0
 8000444:	e9c6 4300 	strd	r4, r3, [r6]
 8000448:	4639      	mov	r1, r7
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	428b      	cmp	r3, r1
 8000450:	d909      	bls.n	8000466 <__udivmoddi4+0xbe>
 8000452:	2e00      	cmp	r6, #0
 8000454:	f000 80eb 	beq.w	800062e <__udivmoddi4+0x286>
 8000458:	2700      	movs	r7, #0
 800045a:	e9c6 0100 	strd	r0, r1, [r6]
 800045e:	4638      	mov	r0, r7
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	fab3 f783 	clz	r7, r3
 800046a:	2f00      	cmp	r7, #0
 800046c:	d147      	bne.n	80004fe <__udivmoddi4+0x156>
 800046e:	428b      	cmp	r3, r1
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xd0>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 80fa 	bhi.w	800066c <__udivmoddi4+0x2c4>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb61 0303 	sbc.w	r3, r1, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4698      	mov	r8, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d0e0      	beq.n	8000448 <__udivmoddi4+0xa0>
 8000486:	e9c6 4800 	strd	r4, r8, [r6]
 800048a:	e7dd      	b.n	8000448 <__udivmoddi4+0xa0>
 800048c:	b902      	cbnz	r2, 8000490 <__udivmoddi4+0xe8>
 800048e:	deff      	udf	#255	; 0xff
 8000490:	fab2 f282 	clz	r2, r2
 8000494:	2a00      	cmp	r2, #0
 8000496:	f040 808f 	bne.w	80005b8 <__udivmoddi4+0x210>
 800049a:	1b49      	subs	r1, r1, r5
 800049c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a0:	fa1f f885 	uxth.w	r8, r5
 80004a4:	2701      	movs	r7, #1
 80004a6:	fbb1 fcfe 	udiv	ip, r1, lr
 80004aa:	0c23      	lsrs	r3, r4, #16
 80004ac:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b4:	fb08 f10c 	mul.w	r1, r8, ip
 80004b8:	4299      	cmp	r1, r3
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x124>
 80004bc:	18eb      	adds	r3, r5, r3
 80004be:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x122>
 80004c4:	4299      	cmp	r1, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2bc>
 80004ca:	4684      	mov	ip, r0
 80004cc:	1a59      	subs	r1, r3, r1
 80004ce:	b2a3      	uxth	r3, r4
 80004d0:	fbb1 f0fe 	udiv	r0, r1, lr
 80004d4:	fb0e 1410 	mls	r4, lr, r0, r1
 80004d8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004dc:	fb08 f800 	mul.w	r8, r8, r0
 80004e0:	45a0      	cmp	r8, r4
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x14c>
 80004e4:	192c      	adds	r4, r5, r4
 80004e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x14a>
 80004ec:	45a0      	cmp	r8, r4
 80004ee:	f200 80b6 	bhi.w	800065e <__udivmoddi4+0x2b6>
 80004f2:	4618      	mov	r0, r3
 80004f4:	eba4 0408 	sub.w	r4, r4, r8
 80004f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004fc:	e79f      	b.n	800043e <__udivmoddi4+0x96>
 80004fe:	f1c7 0c20 	rsb	ip, r7, #32
 8000502:	40bb      	lsls	r3, r7
 8000504:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000508:	ea4e 0e03 	orr.w	lr, lr, r3
 800050c:	fa01 f407 	lsl.w	r4, r1, r7
 8000510:	fa20 f50c 	lsr.w	r5, r0, ip
 8000514:	fa21 f30c 	lsr.w	r3, r1, ip
 8000518:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800051c:	4325      	orrs	r5, r4
 800051e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000522:	0c2c      	lsrs	r4, r5, #16
 8000524:	fb08 3319 	mls	r3, r8, r9, r3
 8000528:	fa1f fa8e 	uxth.w	sl, lr
 800052c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000530:	fb09 f40a 	mul.w	r4, r9, sl
 8000534:	429c      	cmp	r4, r3
 8000536:	fa02 f207 	lsl.w	r2, r2, r7
 800053a:	fa00 f107 	lsl.w	r1, r0, r7
 800053e:	d90b      	bls.n	8000558 <__udivmoddi4+0x1b0>
 8000540:	eb1e 0303 	adds.w	r3, lr, r3
 8000544:	f109 30ff 	add.w	r0, r9, #4294967295
 8000548:	f080 8087 	bcs.w	800065a <__udivmoddi4+0x2b2>
 800054c:	429c      	cmp	r4, r3
 800054e:	f240 8084 	bls.w	800065a <__udivmoddi4+0x2b2>
 8000552:	f1a9 0902 	sub.w	r9, r9, #2
 8000556:	4473      	add	r3, lr
 8000558:	1b1b      	subs	r3, r3, r4
 800055a:	b2ad      	uxth	r5, r5
 800055c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000560:	fb08 3310 	mls	r3, r8, r0, r3
 8000564:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000568:	fb00 fa0a 	mul.w	sl, r0, sl
 800056c:	45a2      	cmp	sl, r4
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x1da>
 8000570:	eb1e 0404 	adds.w	r4, lr, r4
 8000574:	f100 33ff 	add.w	r3, r0, #4294967295
 8000578:	d26b      	bcs.n	8000652 <__udivmoddi4+0x2aa>
 800057a:	45a2      	cmp	sl, r4
 800057c:	d969      	bls.n	8000652 <__udivmoddi4+0x2aa>
 800057e:	3802      	subs	r0, #2
 8000580:	4474      	add	r4, lr
 8000582:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000586:	fba0 8902 	umull	r8, r9, r0, r2
 800058a:	eba4 040a 	sub.w	r4, r4, sl
 800058e:	454c      	cmp	r4, r9
 8000590:	46c2      	mov	sl, r8
 8000592:	464b      	mov	r3, r9
 8000594:	d354      	bcc.n	8000640 <__udivmoddi4+0x298>
 8000596:	d051      	beq.n	800063c <__udivmoddi4+0x294>
 8000598:	2e00      	cmp	r6, #0
 800059a:	d069      	beq.n	8000670 <__udivmoddi4+0x2c8>
 800059c:	ebb1 050a 	subs.w	r5, r1, sl
 80005a0:	eb64 0403 	sbc.w	r4, r4, r3
 80005a4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005a8:	40fd      	lsrs	r5, r7
 80005aa:	40fc      	lsrs	r4, r7
 80005ac:	ea4c 0505 	orr.w	r5, ip, r5
 80005b0:	e9c6 5400 	strd	r5, r4, [r6]
 80005b4:	2700      	movs	r7, #0
 80005b6:	e747      	b.n	8000448 <__udivmoddi4+0xa0>
 80005b8:	f1c2 0320 	rsb	r3, r2, #32
 80005bc:	fa20 f703 	lsr.w	r7, r0, r3
 80005c0:	4095      	lsls	r5, r2
 80005c2:	fa01 f002 	lsl.w	r0, r1, r2
 80005c6:	fa21 f303 	lsr.w	r3, r1, r3
 80005ca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005ce:	4338      	orrs	r0, r7
 80005d0:	0c01      	lsrs	r1, r0, #16
 80005d2:	fbb3 f7fe 	udiv	r7, r3, lr
 80005d6:	fa1f f885 	uxth.w	r8, r5
 80005da:	fb0e 3317 	mls	r3, lr, r7, r3
 80005de:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005e2:	fb07 f308 	mul.w	r3, r7, r8
 80005e6:	428b      	cmp	r3, r1
 80005e8:	fa04 f402 	lsl.w	r4, r4, r2
 80005ec:	d907      	bls.n	80005fe <__udivmoddi4+0x256>
 80005ee:	1869      	adds	r1, r5, r1
 80005f0:	f107 3cff 	add.w	ip, r7, #4294967295
 80005f4:	d22f      	bcs.n	8000656 <__udivmoddi4+0x2ae>
 80005f6:	428b      	cmp	r3, r1
 80005f8:	d92d      	bls.n	8000656 <__udivmoddi4+0x2ae>
 80005fa:	3f02      	subs	r7, #2
 80005fc:	4429      	add	r1, r5
 80005fe:	1acb      	subs	r3, r1, r3
 8000600:	b281      	uxth	r1, r0
 8000602:	fbb3 f0fe 	udiv	r0, r3, lr
 8000606:	fb0e 3310 	mls	r3, lr, r0, r3
 800060a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060e:	fb00 f308 	mul.w	r3, r0, r8
 8000612:	428b      	cmp	r3, r1
 8000614:	d907      	bls.n	8000626 <__udivmoddi4+0x27e>
 8000616:	1869      	adds	r1, r5, r1
 8000618:	f100 3cff 	add.w	ip, r0, #4294967295
 800061c:	d217      	bcs.n	800064e <__udivmoddi4+0x2a6>
 800061e:	428b      	cmp	r3, r1
 8000620:	d915      	bls.n	800064e <__udivmoddi4+0x2a6>
 8000622:	3802      	subs	r0, #2
 8000624:	4429      	add	r1, r5
 8000626:	1ac9      	subs	r1, r1, r3
 8000628:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800062c:	e73b      	b.n	80004a6 <__udivmoddi4+0xfe>
 800062e:	4637      	mov	r7, r6
 8000630:	4630      	mov	r0, r6
 8000632:	e709      	b.n	8000448 <__udivmoddi4+0xa0>
 8000634:	4607      	mov	r7, r0
 8000636:	e6e7      	b.n	8000408 <__udivmoddi4+0x60>
 8000638:	4618      	mov	r0, r3
 800063a:	e6fb      	b.n	8000434 <__udivmoddi4+0x8c>
 800063c:	4541      	cmp	r1, r8
 800063e:	d2ab      	bcs.n	8000598 <__udivmoddi4+0x1f0>
 8000640:	ebb8 0a02 	subs.w	sl, r8, r2
 8000644:	eb69 020e 	sbc.w	r2, r9, lr
 8000648:	3801      	subs	r0, #1
 800064a:	4613      	mov	r3, r2
 800064c:	e7a4      	b.n	8000598 <__udivmoddi4+0x1f0>
 800064e:	4660      	mov	r0, ip
 8000650:	e7e9      	b.n	8000626 <__udivmoddi4+0x27e>
 8000652:	4618      	mov	r0, r3
 8000654:	e795      	b.n	8000582 <__udivmoddi4+0x1da>
 8000656:	4667      	mov	r7, ip
 8000658:	e7d1      	b.n	80005fe <__udivmoddi4+0x256>
 800065a:	4681      	mov	r9, r0
 800065c:	e77c      	b.n	8000558 <__udivmoddi4+0x1b0>
 800065e:	3802      	subs	r0, #2
 8000660:	442c      	add	r4, r5
 8000662:	e747      	b.n	80004f4 <__udivmoddi4+0x14c>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	442b      	add	r3, r5
 800066a:	e72f      	b.n	80004cc <__udivmoddi4+0x124>
 800066c:	4638      	mov	r0, r7
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xda>
 8000670:	4637      	mov	r7, r6
 8000672:	e6e9      	b.n	8000448 <__udivmoddi4+0xa0>

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800067c:	4b2f      	ldr	r3, [pc, #188]	; (800073c <SystemInit+0xc4>)
 800067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000682:	4a2e      	ldr	r2, [pc, #184]	; (800073c <SystemInit+0xc4>)
 8000684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 800068c:	4b2b      	ldr	r3, [pc, #172]	; (800073c <SystemInit+0xc4>)
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	4a2a      	ldr	r2, [pc, #168]	; (800073c <SystemInit+0xc4>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000698:	4b29      	ldr	r3, [pc, #164]	; (8000740 <SystemInit+0xc8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a28      	ldr	r2, [pc, #160]	; (8000740 <SystemInit+0xc8>)
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006a4:	4b26      	ldr	r3, [pc, #152]	; (8000740 <SystemInit+0xc8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006aa:	4b25      	ldr	r3, [pc, #148]	; (8000740 <SystemInit+0xc8>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4924      	ldr	r1, [pc, #144]	; (8000740 <SystemInit+0xc8>)
 80006b0:	4b24      	ldr	r3, [pc, #144]	; (8000744 <SystemInit+0xcc>)
 80006b2:	4013      	ands	r3, r2
 80006b4:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006b6:	4b22      	ldr	r3, [pc, #136]	; (8000740 <SystemInit+0xc8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006bc:	4b20      	ldr	r3, [pc, #128]	; (8000740 <SystemInit+0xc8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006c2:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <SystemInit+0xc8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006c8:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <SystemInit+0xc8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006ce:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <SystemInit+0xc8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <SystemInit+0xc8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <SystemInit+0xc8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <SystemInit+0xc8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <SystemInit+0xc8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <SystemInit+0xc8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <SystemInit+0xc8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <SystemInit+0xc8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a10      	ldr	r2, [pc, #64]	; (8000740 <SystemInit+0xc8>)
 80006fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000702:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <SystemInit+0xc8>)
 8000706:	2200      	movs	r2, #0
 8000708:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <SystemInit+0xd0>)
 800070c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <SystemInit+0xd0>)
 8000710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000714:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <SystemInit+0xd4>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <SystemInit+0xd8>)
 800071c:	4013      	ands	r3, r2
 800071e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000722:	d202      	bcs.n	800072a <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <SystemInit+0xdc>)
 8000726:	2201      	movs	r2, #1
 8000728:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800072a:	4b04      	ldr	r3, [pc, #16]	; (800073c <SystemInit+0xc4>)
 800072c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000730:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00
 8000740:	58024400 	.word	0x58024400
 8000744:	eaf6ed7f 	.word	0xeaf6ed7f
 8000748:	580000c0 	.word	0x580000c0
 800074c:	5c001000 	.word	0x5c001000
 8000750:	ffff0000 	.word	0xffff0000
 8000754:	51008108 	.word	0x51008108

08000758 <arm_relu_q15>:
   * Optimized relu with QSUB instructions.
   *
   */

void arm_relu_q15(q15_t * data, uint16_t size)
{
 8000758:	b480      	push	{r7}
 800075a:	b08f      	sub	sp, #60	; 0x3c
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	807b      	strh	r3, [r7, #2]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    uint16_t  i = size >> 1;
 8000764:	887b      	ldrh	r3, [r7, #2]
 8000766:	085b      	lsrs	r3, r3, #1
 8000768:	86fb      	strh	r3, [r7, #54]	; 0x36
    q15_t    *pIn = data;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	613b      	str	r3, [r7, #16]
    q15_t    *pOut = data;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	60fb      	str	r3, [r7, #12]
    q31_t     in;
    q31_t     buf;
    q31_t     mask;

    while (i)
 8000772:	e032      	b.n	80007da <arm_relu_q15+0x82>
    {
        in = *__SIMD32(pIn)++;
 8000774:	f107 0210 	add.w	r2, r7, #16
 8000778:	6813      	ldr	r3, [r2, #0]
 800077a:	1d19      	adds	r1, r3, #4
 800077c:	6011      	str	r1, [r2, #0]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	633b      	str	r3, [r7, #48]	; 0x30

        /* extract the first bit */
        buf = __ROR(in & 0x80008000, 15);
 8000782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000784:	f003 2380 	and.w	r3, r3, #2147516416	; 0x80008000
 8000788:	61bb      	str	r3, [r7, #24]
 800078a:	230f      	movs	r3, #15
 800078c:	617b      	str	r3, [r7, #20]
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	f003 031f 	and.w	r3, r3, #31
 8000794:	617b      	str	r3, [r7, #20]
  if (op2 == 0U)
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d101      	bne.n	80007a0 <arm_relu_q15+0x48>
  {
    return op1;
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	e003      	b.n	80007a8 <arm_relu_q15+0x50>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 80007a0:	69ba      	ldr	r2, [r7, #24]
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	fa62 f303 	ror.w	r3, r2, r3
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* if MSB=1, mask will be 0xFF, 0x0 otherwise */
        mask = __QSUB16(0x00000000, buf);
 80007aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ac:	2200      	movs	r2, #0
 80007ae:	627a      	str	r2, [r7, #36]	; 0x24
 80007b0:	623b      	str	r3, [r7, #32]

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80007b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b4:	6a3a      	ldr	r2, [r7, #32]
 80007b6:	fad3 f312 	qsub16	r3, r3, r2
 80007ba:	61fb      	str	r3, [r7, #28]
  return(result);
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28

        *__SIMD32(pOut)++ = in & (~mask);
 80007c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007c2:	43d9      	mvns	r1, r3
 80007c4:	f107 020c 	add.w	r2, r7, #12
 80007c8:	6813      	ldr	r3, [r2, #0]
 80007ca:	1d18      	adds	r0, r3, #4
 80007cc:	6010      	str	r0, [r2, #0]
 80007ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007d0:	400a      	ands	r2, r1
 80007d2:	601a      	str	r2, [r3, #0]
        i--;
 80007d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80007d6:	3b01      	subs	r3, #1
 80007d8:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 80007da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1c9      	bne.n	8000774 <arm_relu_q15+0x1c>
    }

    if (size & 0x1)
 80007e0:	887b      	ldrh	r3, [r7, #2]
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d00a      	beq.n	8000800 <arm_relu_q15+0xa8>
    {
        if (*pIn < 0)
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	da02      	bge.n	80007fa <arm_relu_q15+0xa2>
        {
            *pIn = 0;
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	2200      	movs	r2, #0
 80007f8:	801a      	strh	r2, [r3, #0]
        }
        pIn++;
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	3302      	adds	r3, #2
 80007fe:	613b      	str	r3, [r7, #16]
            data[i] = 0;
    }

#endif                          /* ARM_MATH_DSP */

}
 8000800:	bf00      	nop
 8000802:	373c      	adds	r7, #60	; 0x3c
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <arm_fully_connected_q15>:
                        const uint16_t bias_shift,
                        const uint16_t out_shift, 
                        const q15_t * bias, 
                        q15_t * pOut,
                        q15_t * vec_buffer)
{
 800080c:	b480      	push	{r7}
 800080e:	b0b7      	sub	sp, #220	; 0xdc
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	4611      	mov	r1, r2
 8000818:	461a      	mov	r2, r3
 800081a:	460b      	mov	r3, r1
 800081c:	80fb      	strh	r3, [r7, #6]
 800081e:	4613      	mov	r3, r2
 8000820:	80bb      	strh	r3, [r7, #4]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    const q15_t *pB = pM;
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	61fb      	str	r3, [r7, #28]
    const q15_t *pB2 = pB + dim_vec;
 8000826:	69fa      	ldr	r2, [r7, #28]
 8000828:	88fb      	ldrh	r3, [r7, #6]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	4413      	add	r3, r2
 800082e:	61bb      	str	r3, [r7, #24]
    q15_t    *pO = pOut;
 8000830:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000834:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    const q15_t    *pA;
    const q15_t    *pBias = bias;
 8000838:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800083c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    uint16_t rowCnt = num_of_rows >> 1;
 8000840:	88bb      	ldrh	r3, [r7, #4]
 8000842:	085b      	lsrs	r3, r3, #1
 8000844:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce

    /* this loop loops over different output */
    while (rowCnt) {
 8000848:	e124      	b.n	8000a94 <arm_fully_connected_q15+0x288>
        q31_t     sum =  ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 800084a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800084e:	1c9a      	adds	r2, r3, #2
 8000850:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8000854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000858:	461a      	mov	r2, r3
 800085a:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800085e:	409a      	lsls	r2, r3
 8000860:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8000864:	3b01      	subs	r3, #1
 8000866:	2101      	movs	r1, #1
 8000868:	fa01 f303 	lsl.w	r3, r1, r3
 800086c:	4413      	add	r3, r2
 800086e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8000872:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000876:	1c9a      	adds	r2, r3, #2
 8000878:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800087c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000880:	461a      	mov	r2, r3
 8000882:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8000886:	409a      	lsls	r2, r3
 8000888:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 800088c:	3b01      	subs	r3, #1
 800088e:	2101      	movs	r1, #1
 8000890:	fa01 f303 	lsl.w	r3, r1, r3
 8000894:	4413      	add	r3, r2
 8000896:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

        uint16_t  colCnt = dim_vec >> 2;
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	089b      	lsrs	r3, r3, #2
 800089e:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2

        pA = pV;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	617b      	str	r3, [r7, #20]
        pB2 = pB + dim_vec;
 80008a6:	69fa      	ldr	r2, [r7, #28]
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4413      	add	r3, r2
 80008ae:	61bb      	str	r3, [r7, #24]

        while (colCnt)
 80008b0:	e07c      	b.n	80009ac <arm_fully_connected_q15+0x1a0>
        {
            q31_t     inV1, inM1, inM2;
            inV1 = *__SIMD32(pA)++;
 80008b2:	f107 0214 	add.w	r2, r7, #20
 80008b6:	6813      	ldr	r3, [r2, #0]
 80008b8:	1d19      	adds	r1, r3, #4
 80008ba:	6011      	str	r1, [r2, #0]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            inM1 = *__SIMD32(pB)++;
 80008c2:	f107 021c 	add.w	r2, r7, #28
 80008c6:	6813      	ldr	r3, [r2, #0]
 80008c8:	1d19      	adds	r1, r3, #4
 80008ca:	6011      	str	r1, [r2, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            sum = __SMLAD(inV1, inM1, sum);
 80008d2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80008d6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80008da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80008de:	64f9      	str	r1, [r7, #76]	; 0x4c
 80008e0:	64ba      	str	r2, [r7, #72]	; 0x48
 80008e2:	647b      	str	r3, [r7, #68]	; 0x44

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80008e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80008e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80008ea:	fb23 1302 	smlad	r3, r3, r2, r1
 80008ee:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80008f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            inM2 = *__SIMD32(pB2)++;
 80008f6:	f107 0218 	add.w	r2, r7, #24
 80008fa:	6813      	ldr	r3, [r2, #0]
 80008fc:	1d19      	adds	r1, r3, #4
 80008fe:	6011      	str	r1, [r2, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            sum2 = __SMLAD(inV1, inM2, sum2);
 8000906:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800090a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800090e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000912:	65f9      	str	r1, [r7, #92]	; 0x5c
 8000914:	65ba      	str	r2, [r7, #88]	; 0x58
 8000916:	657b      	str	r3, [r7, #84]	; 0x54
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800091a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800091c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800091e:	fb23 1302 	smlad	r3, r3, r2, r1
 8000922:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 8000924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000926:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

            inV1 = *__SIMD32(pA)++;
 800092a:	f107 0214 	add.w	r2, r7, #20
 800092e:	6813      	ldr	r3, [r2, #0]
 8000930:	1d19      	adds	r1, r3, #4
 8000932:	6011      	str	r1, [r2, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            inM1 = *__SIMD32(pB)++;
 800093a:	f107 021c 	add.w	r2, r7, #28
 800093e:	6813      	ldr	r3, [r2, #0]
 8000940:	1d19      	adds	r1, r3, #4
 8000942:	6011      	str	r1, [r2, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            sum = __SMLAD(inV1, inM1, sum);
 800094a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800094e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000952:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000956:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000958:	66ba      	str	r2, [r7, #104]	; 0x68
 800095a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800095c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800095e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000960:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000962:	fb23 1302 	smlad	r3, r3, r2, r1
 8000966:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8000968:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800096a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            inM2 = *__SIMD32(pB2)++;
 800096e:	f107 0218 	add.w	r2, r7, #24
 8000972:	6813      	ldr	r3, [r2, #0]
 8000974:	1d19      	adds	r1, r3, #4
 8000976:	6011      	str	r1, [r2, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            sum2 = __SMLAD(inV1, inM2, sum2);
 800097e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000982:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000986:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800098a:	67f9      	str	r1, [r7, #124]	; 0x7c
 800098c:	67ba      	str	r2, [r7, #120]	; 0x78
 800098e:	677b      	str	r3, [r7, #116]	; 0x74
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000990:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000992:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000994:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000996:	fb23 1302 	smlad	r3, r3, r2, r1
 800099a:	673b      	str	r3, [r7, #112]	; 0x70
  return(result);
 800099c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800099e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

            colCnt--;
 80009a2:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80009a6:	3b01      	subs	r3, #1
 80009a8:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        while (colCnt)
 80009ac:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f47f af7e 	bne.w	80008b2 <arm_fully_connected_q15+0xa6>
        }
        colCnt = dim_vec & 0x3;
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        while (colCnt)
 80009c0:	e02c      	b.n	8000a1c <arm_fully_connected_q15+0x210>
        {
            q15_t     inV = *pA++;
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	1c9a      	adds	r2, r3, #2
 80009c6:	617a      	str	r2, [r7, #20]
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
            q15_t     inM = *pB++;
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	1c9a      	adds	r2, r3, #2
 80009d2:	61fa      	str	r2, [r7, #28]
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
            q15_t     inM2 = *pB2++;
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	1c9a      	adds	r2, r3, #2
 80009de:	61ba      	str	r2, [r7, #24]
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

            sum += inV * inM;
 80009e6:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80009ea:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 80009ee:	fb02 f303 	mul.w	r3, r2, r3
 80009f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80009f6:	4413      	add	r3, r2
 80009f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            sum2 += inV * inM2;
 80009fc:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000a00:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 8000a04:	fb02 f303 	mul.w	r3, r2, r3
 8000a08:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000a0c:	4413      	add	r3, r2
 8000a0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            colCnt--;
 8000a12:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8000a16:	3b01      	subs	r3, #1
 8000a18:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        while (colCnt)
 8000a1c:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1ce      	bne.n	80009c2 <arm_fully_connected_q15+0x1b6>
        }                       /* while over colCnt */
        *pO++ =  (q15_t) (__SSAT((sum >> out_shift), 16));
 8000a24:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8000a28:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000a2c:	fa42 f303 	asr.w	r3, r2, r3
 8000a30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000a34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000a38:	f303 030f 	ssat	r3, #16, r3
 8000a3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000a40:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8000a44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000a48:	1c9a      	adds	r2, r3, #2
 8000a4a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000a4e:	b20a      	sxth	r2, r1
 8000a50:	801a      	strh	r2, [r3, #0]
        *pO++ = (q15_t) (__SSAT((sum2>> out_shift), 16));
 8000a52:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8000a56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000a5a:	fa42 f303 	asr.w	r3, r2, r3
 8000a5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000a62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000a66:	f303 030f 	ssat	r3, #16, r3
 8000a6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000a6e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8000a72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000a76:	1c9a      	adds	r2, r3, #2
 8000a78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000a7c:	b20a      	sxth	r2, r1
 8000a7e:	801a      	strh	r2, [r3, #0]
		
        /* adjust the pointers and counters */
        pB = pB + dim_vec;
 8000a80:	69fa      	ldr	r2, [r7, #28]
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4413      	add	r3, r2
 8000a88:	61fb      	str	r3, [r7, #28]
        rowCnt --;
 8000a8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    while (rowCnt) {
 8000a94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f47f aed6 	bne.w	800084a <arm_fully_connected_q15+0x3e>
    }

    rowCnt = num_of_rows & 0x1;
 8000a9e:	88bb      	ldrh	r3, [r7, #4]
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce

    while (rowCnt) {
 8000aa8:	e0a9      	b.n	8000bfe <arm_fully_connected_q15+0x3f2>
        q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8000aaa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000aae:	1c9a      	adds	r2, r3, #2
 8000ab0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8000ab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8000abe:	409a      	lsls	r2, r3
 8000ac0:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	4413      	add	r3, r2
 8000ace:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        uint16_t  colCnt = dim_vec >> 2;
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	089b      	lsrs	r3, r3, #2
 8000ad6:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba

        pA = pV;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	617b      	str	r3, [r7, #20]
      
        while (colCnt) {
 8000ade:	e048      	b.n	8000b72 <arm_fully_connected_q15+0x366>
            q31_t     inV1, inM1;
            inV1 = *__SIMD32(pA)++;
 8000ae0:	f107 0214 	add.w	r2, r7, #20
 8000ae4:	6813      	ldr	r3, [r2, #0]
 8000ae6:	1d19      	adds	r1, r3, #4
 8000ae8:	6011      	str	r1, [r2, #0]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            inM1 = *__SIMD32(pB)++;
 8000af0:	f107 021c 	add.w	r2, r7, #28
 8000af4:	6813      	ldr	r3, [r2, #0]
 8000af6:	1d19      	adds	r1, r3, #4
 8000af8:	6011      	str	r1, [r2, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            sum = __SMLAD(inV1, inM1, sum);
 8000b00:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000b04:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000b08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000b0c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000b0e:	62ba      	str	r2, [r7, #40]	; 0x28
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b18:	fb23 1302 	smlad	r3, r3, r2, r1
 8000b1c:	623b      	str	r3, [r7, #32]
  return(result);
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
 8000b20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            
            inV1 = *__SIMD32(pA)++;
 8000b24:	f107 0214 	add.w	r2, r7, #20
 8000b28:	6813      	ldr	r3, [r2, #0]
 8000b2a:	1d19      	adds	r1, r3, #4
 8000b2c:	6011      	str	r1, [r2, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            inM1 = *__SIMD32(pB)++;
 8000b34:	f107 021c 	add.w	r2, r7, #28
 8000b38:	6813      	ldr	r3, [r2, #0]
 8000b3a:	1d19      	adds	r1, r3, #4
 8000b3c:	6011      	str	r1, [r2, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            sum = __SMLAD(inV1, inM1, sum);
 8000b44:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000b48:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000b4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000b50:	63f9      	str	r1, [r7, #60]	; 0x3c
 8000b52:	63ba      	str	r2, [r7, #56]	; 0x38
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000b5c:	fb23 1302 	smlad	r3, r3, r2, r1
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8000b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
				
            colCnt--;
 8000b68:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        while (colCnt) {
 8000b72:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1b2      	bne.n	8000ae0 <arm_fully_connected_q15+0x2d4>
	}
			
	/* left-over of the vector */
	colCnt = dim_vec & 0x3;
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	f003 0303 	and.w	r3, r3, #3
 8000b80:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
	while(colCnt) {
 8000b84:	e01b      	b.n	8000bbe <arm_fully_connected_q15+0x3b2>
            q15_t     inV = *pA++;
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	1c9a      	adds	r2, r3, #2
 8000b8a:	617a      	str	r2, [r7, #20]
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            q15_t     inM = *pB++;
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	1c9a      	adds	r2, r3, #2
 8000b96:	61fa      	str	r2, [r7, #28]
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

            sum += inV * inM;
 8000b9e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8000ba2:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	; 0xac
 8000ba6:	fb02 f303 	mul.w	r3, r2, r3
 8000baa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000bae:	4413      	add	r3, r2
 8000bb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            colCnt--;
 8000bb4:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
	while(colCnt) {
 8000bbe:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d1df      	bne.n	8000b86 <arm_fully_connected_q15+0x37a>
	}

        *pO++ =  (q15_t) (__SSAT((sum >> out_shift), 16));
 8000bc6:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8000bca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000bce:	fa42 f303 	asr.w	r3, r2, r3
 8000bd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000bd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000bda:	f303 030f 	ssat	r3, #16, r3
 8000bde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000be2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8000be6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000bea:	1c9a      	adds	r2, r3, #2
 8000bec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000bf0:	b20a      	sxth	r2, r1
 8000bf2:	801a      	strh	r2, [r3, #0]
			
        rowCnt --;
 8000bf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    while (rowCnt) {
 8000bfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f47f af51 	bne.w	8000aaa <arm_fully_connected_q15+0x29e>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return (ARM_MATH_SUCCESS);
 8000c08:	2300      	movs	r3, #0

}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	37dc      	adds	r7, #220	; 0xdc
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <arm_softmax_q15>:
   *  with a log(2) scaling factor.
   *
   */

void arm_softmax_q15(const q15_t * vec_in, const uint16_t dim_vec, q15_t * p_out)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b093      	sub	sp, #76	; 0x4c
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	460b      	mov	r3, r1
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	817b      	strh	r3, [r7, #10]
    q31_t     sum;
    int16_t   i;
    uint8_t   shift;
    q31_t     base;
    base = -1 * 0x100000;
 8000c26:	4b5e      	ldr	r3, [pc, #376]	; (8000da0 <arm_softmax_q15+0x188>)
 8000c28:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < dim_vec; i++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000c30:	e019      	b.n	8000c66 <arm_softmax_q15+0x4e>
    {
        if (vec_in[i] > base)
 8000c32:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c40:	461a      	mov	r2, r3
 8000c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c44:	4293      	cmp	r3, r2
 8000c46:	da07      	bge.n	8000c58 <arm_softmax_q15+0x40>
        {
            base = vec_in[i];
 8000c48:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	4413      	add	r3, r2
 8000c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c56:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < dim_vec; i++)
 8000c58:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	3301      	adds	r3, #1
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000c66:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8000c6a:	897b      	ldrh	r3, [r7, #10]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	dbe0      	blt.n	8000c32 <arm_softmax_q15+0x1a>

    /* we ignore really small values  
     * anyway, they will be 0 after shrinking
     * to q15_t
     */
    base = base - 16;
 8000c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c72:	3b10      	subs	r3, #16
 8000c74:	63fb      	str	r3, [r7, #60]	; 0x3c

    sum = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	647b      	str	r3, [r7, #68]	; 0x44

    for (i = 0; i < dim_vec; i++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000c80:	e02b      	b.n	8000cda <arm_softmax_q15+0xc2>
    {
        if (vec_in[i] > base)
 8000c82:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c90:	461a      	mov	r2, r3
 8000c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c94:	4293      	cmp	r3, r2
 8000c96:	da19      	bge.n	8000ccc <arm_softmax_q15+0xb4>
        {
            shift = (uint8_t)__USAT(vec_in[i] - base, 5);
 8000c98:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	f383 0305 	usat	r3, #5, r3
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            sum += 0x1 << shift;
 8000cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000cc8:	4413      	add	r3, r2
 8000cca:	647b      	str	r3, [r7, #68]	; 0x44
    for (i = 0; i < dim_vec; i++)
 8000ccc:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000cda:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8000cde:	897b      	ldrh	r3, [r7, #10]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	dbce      	blt.n	8000c82 <arm_softmax_q15+0x6a>
        }
    }

    /* This is effectively (0x1 << 32) / sum */
    int64_t div_base = 0x100000000LL;
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	f04f 0401 	mov.w	r4, #1
 8000cec:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    int output_base = (int32_t)(div_base / sum);
 8000cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cf2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4623      	mov	r3, r4
 8000cfa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000cfe:	f7ff faeb 	bl	80002d8 <__aeabi_ldivmod>
 8000d02:	4603      	mov	r3, r0
 8000d04:	460c      	mov	r4, r1
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Final confidence will be output_base >> ( 17 - (vec_in[i] - base) )
     * so 32768 (0x1<<15) -> 100% confidence when sum = 0x1 << 16, output_base = 0x1 << 16
     * and vec_in[i]-base = 16
     */
    for (i = 0; i < dim_vec; i++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000d0e:	e03d      	b.n	8000d8c <arm_softmax_q15+0x174>
    {
        if (vec_in[i] > base) 
 8000d10:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4413      	add	r3, r2
 8000d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d22:	4293      	cmp	r3, r2
 8000d24:	da24      	bge.n	8000d70 <arm_softmax_q15+0x158>
        {
            /* Here minimum value of 17+base-vec[i] will be 1 */
            shift = (uint8_t)__USAT(17+base-vec_in[i], 5);
 8000d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d28:	3311      	adds	r3, #17
 8000d2a:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8000d2e:	0052      	lsls	r2, r2, #1
 8000d30:	68f9      	ldr	r1, [r7, #12]
 8000d32:	440a      	add	r2, r1
 8000d34:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d38:	1a9b      	subs	r3, r3, r2
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3e:	f383 0305 	usat	r3, #5, r3
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            p_out[i] = (q15_t) __SSAT((output_base >> shift), 16);
 8000d4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d50:	fa42 f303 	asr.w	r3, r2, r3
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	f303 030f 	ssat	r3, #16, r3
 8000d5c:	61bb      	str	r3, [r7, #24]
 8000d5e:	69b9      	ldr	r1, [r7, #24]
 8000d60:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	b20a      	sxth	r2, r1
 8000d6c:	801a      	strh	r2, [r3, #0]
 8000d6e:	e006      	b.n	8000d7e <arm_softmax_q15+0x166>
        } else
        {
            p_out[i] = 0;
 8000d70:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < dim_vec; i++)
 8000d7e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	3301      	adds	r3, #1
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000d8c:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8000d90:	897b      	ldrh	r3, [r7, #10]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	dbbc      	blt.n	8000d10 <arm_softmax_q15+0xf8>
        }
    }

}
 8000d96:	bf00      	nop
 8000d98:	374c      	adds	r7, #76	; 0x4c
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd90      	pop	{r4, r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	fff00000 	.word	0xfff00000

08000da4 <fully_connected_run>:
extern q15_t aq15_layer_4_biases[L4_OUT_DIM];
extern q15_t aq15_layer_5_weights[L5_IN_DIM*L5_OUT_DIM];
extern q15_t aq15_layer_5_biases[L5_OUT_DIM];

void fully_connected_run(q15_t *input_data, float32_t *prediction)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08e      	sub	sp, #56	; 0x38
 8000da8:	af06      	add	r7, sp, #24
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
	q15_t max_Value = 0, data[L1_IN_DIM] = {0};
 8000dae:	2300      	movs	r3, #0
 8000db0:	83fb      	strh	r3, [r7, #30]
 8000db2:	f107 0310 	add.w	r3, r7, #16
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
	uint32_t max_Index = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
	arm_copy_q15(&input_data[0], &data[0], L1_IN_DIM);
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	2206      	movs	r2, #6
 8000dc8:	4619      	mov	r1, r3
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f007 fd58 	bl	8008880 <arm_copy_q15>
    // Input layer
    arm_fully_connected_q15(
 8000dd0:	f107 0010 	add.w	r0, r7, #16
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	9304      	str	r3, [sp, #16]
 8000dd8:	4b3a      	ldr	r3, [pc, #232]	; (8000ec4 <fully_connected_run+0x120>)
 8000dda:	9303      	str	r3, [sp, #12]
 8000ddc:	4b3a      	ldr	r3, [pc, #232]	; (8000ec8 <fully_connected_run+0x124>)
 8000dde:	9302      	str	r3, [sp, #8]
 8000de0:	230f      	movs	r3, #15
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	230c      	movs	r3, #12
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2306      	movs	r3, #6
 8000dea:	2206      	movs	r2, #6
 8000dec:	4937      	ldr	r1, [pc, #220]	; (8000ecc <fully_connected_run+0x128>)
 8000dee:	f7ff fd0d 	bl	800080c <arm_fully_connected_q15>
        L1_BIAS_SHIFT,
        L1_OUT_SHIFT,
        aq15_layer_1_biases,
        layer_1_out_Buf,
        NULL);
    arm_relu_q15(
 8000df2:	2106      	movs	r1, #6
 8000df4:	4833      	ldr	r0, [pc, #204]	; (8000ec4 <fully_connected_run+0x120>)
 8000df6:	f7ff fcaf 	bl	8000758 <arm_relu_q15>
    	layer_1_out_Buf,
        L1_OUT_DIM);

    // First hidden layer
    arm_fully_connected_q15(
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	9304      	str	r3, [sp, #16]
 8000dfe:	4b34      	ldr	r3, [pc, #208]	; (8000ed0 <fully_connected_run+0x12c>)
 8000e00:	9303      	str	r3, [sp, #12]
 8000e02:	4b34      	ldr	r3, [pc, #208]	; (8000ed4 <fully_connected_run+0x130>)
 8000e04:	9302      	str	r3, [sp, #8]
 8000e06:	230f      	movs	r3, #15
 8000e08:	9301      	str	r3, [sp, #4]
 8000e0a:	230b      	movs	r3, #11
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	231a      	movs	r3, #26
 8000e10:	2206      	movs	r2, #6
 8000e12:	4931      	ldr	r1, [pc, #196]	; (8000ed8 <fully_connected_run+0x134>)
 8000e14:	482b      	ldr	r0, [pc, #172]	; (8000ec4 <fully_connected_run+0x120>)
 8000e16:	f7ff fcf9 	bl	800080c <arm_fully_connected_q15>
        L2_BIAS_SHIFT,
        L2_OUT_SHIFT,
		aq15_layer_2_biases,
        layer_2_out_Buf,
        NULL);
    arm_relu_q15(
 8000e1a:	211a      	movs	r1, #26
 8000e1c:	482c      	ldr	r0, [pc, #176]	; (8000ed0 <fully_connected_run+0x12c>)
 8000e1e:	f7ff fc9b 	bl	8000758 <arm_relu_q15>
    	layer_2_out_Buf,
		L2_OUT_DIM);

    // Second hidden layer
    arm_fully_connected_q15(
 8000e22:	2300      	movs	r3, #0
 8000e24:	9304      	str	r3, [sp, #16]
 8000e26:	4b2d      	ldr	r3, [pc, #180]	; (8000edc <fully_connected_run+0x138>)
 8000e28:	9303      	str	r3, [sp, #12]
 8000e2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <fully_connected_run+0x13c>)
 8000e2c:	9302      	str	r3, [sp, #8]
 8000e2e:	2310      	movs	r3, #16
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	230c      	movs	r3, #12
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	231d      	movs	r3, #29
 8000e38:	221a      	movs	r2, #26
 8000e3a:	492a      	ldr	r1, [pc, #168]	; (8000ee4 <fully_connected_run+0x140>)
 8000e3c:	4824      	ldr	r0, [pc, #144]	; (8000ed0 <fully_connected_run+0x12c>)
 8000e3e:	f7ff fce5 	bl	800080c <arm_fully_connected_q15>
        L3_BIAS_SHIFT,
        L3_OUT_SHIFT,
		aq15_layer_3_biases,
        layer_3_out_Buf,
        NULL);
    arm_relu_q15(
 8000e42:	211d      	movs	r1, #29
 8000e44:	4825      	ldr	r0, [pc, #148]	; (8000edc <fully_connected_run+0x138>)
 8000e46:	f7ff fc87 	bl	8000758 <arm_relu_q15>
    	layer_3_out_Buf,
		L3_OUT_DIM);

    // Third hidden layer
    arm_fully_connected_q15(
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	9304      	str	r3, [sp, #16]
 8000e4e:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <fully_connected_run+0x144>)
 8000e50:	9303      	str	r3, [sp, #12]
 8000e52:	4b26      	ldr	r3, [pc, #152]	; (8000eec <fully_connected_run+0x148>)
 8000e54:	9302      	str	r3, [sp, #8]
 8000e56:	2310      	movs	r3, #16
 8000e58:	9301      	str	r3, [sp, #4]
 8000e5a:	230d      	movs	r3, #13
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	231e      	movs	r3, #30
 8000e60:	221d      	movs	r2, #29
 8000e62:	4923      	ldr	r1, [pc, #140]	; (8000ef0 <fully_connected_run+0x14c>)
 8000e64:	481d      	ldr	r0, [pc, #116]	; (8000edc <fully_connected_run+0x138>)
 8000e66:	f7ff fcd1 	bl	800080c <arm_fully_connected_q15>
        L4_BIAS_SHIFT,
        L4_OUT_SHIFT,
		aq15_layer_4_biases,
        layer_4_out_Buf,
        NULL);
    arm_relu_q15(
 8000e6a:	211e      	movs	r1, #30
 8000e6c:	481e      	ldr	r0, [pc, #120]	; (8000ee8 <fully_connected_run+0x144>)
 8000e6e:	f7ff fc73 	bl	8000758 <arm_relu_q15>
    	layer_4_out_Buf,
		L4_OUT_DIM);

    // Output layer
	arm_fully_connected_q15(
 8000e72:	2300      	movs	r3, #0
 8000e74:	9304      	str	r3, [sp, #16]
 8000e76:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <fully_connected_run+0x150>)
 8000e78:	9303      	str	r3, [sp, #12]
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <fully_connected_run+0x154>)
 8000e7c:	9302      	str	r3, [sp, #8]
 8000e7e:	230b      	movs	r3, #11
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	230a      	movs	r3, #10
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2306      	movs	r3, #6
 8000e88:	221e      	movs	r2, #30
 8000e8a:	491c      	ldr	r1, [pc, #112]	; (8000efc <fully_connected_run+0x158>)
 8000e8c:	4816      	ldr	r0, [pc, #88]	; (8000ee8 <fully_connected_run+0x144>)
 8000e8e:	f7ff fcbd 	bl	800080c <arm_fully_connected_q15>
		L5_BIAS_SHIFT,
		L5_OUT_SHIFT,
		aq15_layer_5_biases,
		layer_5_out_Buf,
		NULL);
    arm_softmax_q15(
 8000e92:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <fully_connected_run+0x15c>)
 8000e94:	2106      	movs	r1, #6
 8000e96:	4817      	ldr	r0, [pc, #92]	; (8000ef4 <fully_connected_run+0x150>)
 8000e98:	f7ff febe 	bl	8000c18 <arm_softmax_q15>
    	layer_5_out_Buf,
		L5_OUT_DIM,
        output_data);
    arm_max_q15(output_data, L5_OUT_DIM, &max_Value, &max_Index);
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	f107 021e 	add.w	r2, r7, #30
 8000ea4:	2106      	movs	r1, #6
 8000ea6:	4816      	ldr	r0, [pc, #88]	; (8000f00 <fully_connected_run+0x15c>)
 8000ea8:	f007 fdee 	bl	8008a88 <arm_max_q15>
    *prediction = (float32_t) max_Index;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	ee07 3a90 	vmov	s15, r3
 8000eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	edc3 7a00 	vstr	s15, [r3]
}
 8000ebc:	bf00      	nop
 8000ebe:	3720      	adds	r7, #32
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	24000094 	.word	0x24000094
 8000ec8:	240001ac 	.word	0x240001ac
 8000ecc:	24000164 	.word	0x24000164
 8000ed0:	240000a0 	.word	0x240000a0
 8000ed4:	240002f0 	.word	0x240002f0
 8000ed8:	240001b8 	.word	0x240001b8
 8000edc:	240000d4 	.word	0x240000d4
 8000ee0:	24000908 	.word	0x24000908
 8000ee4:	24000324 	.word	0x24000324
 8000ee8:	24000110 	.word	0x24000110
 8000eec:	24001010 	.word	0x24001010
 8000ef0:	24000944 	.word	0x24000944
 8000ef4:	2400014c 	.word	0x2400014c
 8000ef8:	240011b4 	.word	0x240011b4
 8000efc:	2400104c 	.word	0x2400104c
 8000f00:	24000158 	.word	0x24000158

08000f04 <inst_absolute>:
#include "functions.h"

//**********************************************************************************************//
// Preprocessing - Instantaneous values (6 features)
// To use with instantaneous values
void inst_absolute(float32_t in[], float32_t out[]){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
	arm_abs_f32(&in[0], &out[0], frameSize);
 8000f0e:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <inst_absolute+0x20>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	6839      	ldr	r1, [r7, #0]
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f008 f8da 	bl	80090d0 <arm_abs_f32>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	08009814 	.word	0x08009814

08000f28 <complex_inst_absolute>:

// To use with complex input values
void complex_inst_absolute(float32_t in[], float32_t out[]){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
	arm_cmplx_mag_f32(&in[0], &out[0], frameSize);
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <complex_inst_absolute+0x20>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	6839      	ldr	r1, [r7, #0]
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f007 ff04 	bl	8008d48 <arm_cmplx_mag_f32>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	08009814 	.word	0x08009814

08000f4c <inst_phase>:

void inst_phase(float32_t in[], float32_t out[]){
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
	int j = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	e020      	b.n	8000fa2 <inst_phase+0x56>
		out[j] = atan2f(in[i+1], in[i]);
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	3301      	adds	r3, #1
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	edd3 7a00 	vldr	s15, [r3]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	ed93 7a00 	vldr	s14, [r3]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	18d4      	adds	r4, r2, r3
 8000f82:	eef0 0a47 	vmov.f32	s1, s14
 8000f86:	eeb0 0a67 	vmov.f32	s0, s15
 8000f8a:	f008 fa4b 	bl	8009424 <atan2f>
 8000f8e:	eef0 7a40 	vmov.f32	s15, s0
 8000f92:	edc4 7a00 	vstr	s15, [r4]
		j++;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <inst_phase+0x6c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	005a      	lsls	r2, r3, #1
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d8d8      	bhi.n	8000f60 <inst_phase+0x14>
	}
}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd90      	pop	{r4, r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	08009814 	.word	0x08009814
 8000fbc:	00000000 	.word	0x00000000

08000fc0 <unwrap>:

void unwrap(float32_t in[], float32_t out[]){
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b08c      	sub	sp, #48	; 0x30
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	466b      	mov	r3, sp
 8000fcc:	461d      	mov	r5, r3
	int32_t k = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t alpha = M_PI;
 8000fd2:	4b8b      	ldr	r3, [pc, #556]	; (8001200 <unwrap+0x240>)
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
	// float32_t diff = 0.0f;
	float32_t in_cp[frameSize];
 8000fd6:	4b8b      	ldr	r3, [pc, #556]	; (8001204 <unwrap+0x244>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fde:	4b89      	ldr	r3, [pc, #548]	; (8001204 <unwrap+0x244>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	f04f 0400 	mov.w	r4, #0
 8000ff0:	0154      	lsls	r4, r2, #5
 8000ff2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000ff6:	014b      	lsls	r3, r1, #5
 8000ff8:	4b82      	ldr	r3, [pc, #520]	; (8001204 <unwrap+0x244>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	f04f 0400 	mov.w	r4, #0
 800100a:	0154      	lsls	r4, r2, #5
 800100c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001010:	014b      	lsls	r3, r1, #5
 8001012:	4b7c      	ldr	r3, [pc, #496]	; (8001204 <unwrap+0x244>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	3303      	adds	r3, #3
 800101a:	3307      	adds	r3, #7
 800101c:	08db      	lsrs	r3, r3, #3
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	ebad 0d03 	sub.w	sp, sp, r3
 8001024:	466b      	mov	r3, sp
 8001026:	3303      	adds	r3, #3
 8001028:	089b      	lsrs	r3, r3, #2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	61fb      	str	r3, [r7, #28]
	float32_t sub[frameSize];
 800102e:	4b75      	ldr	r3, [pc, #468]	; (8001204 <unwrap+0x244>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	3b01      	subs	r3, #1
 8001034:	61bb      	str	r3, [r7, #24]
 8001036:	4b73      	ldr	r3, [pc, #460]	; (8001204 <unwrap+0x244>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	f04f 0400 	mov.w	r4, #0
 8001048:	0154      	lsls	r4, r2, #5
 800104a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800104e:	014b      	lsls	r3, r1, #5
 8001050:	4b6c      	ldr	r3, [pc, #432]	; (8001204 <unwrap+0x244>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	f04f 0300 	mov.w	r3, #0
 800105e:	f04f 0400 	mov.w	r4, #0
 8001062:	0154      	lsls	r4, r2, #5
 8001064:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001068:	014b      	lsls	r3, r1, #5
 800106a:	4b66      	ldr	r3, [pc, #408]	; (8001204 <unwrap+0x244>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	3303      	adds	r3, #3
 8001072:	3307      	adds	r3, #7
 8001074:	08db      	lsrs	r3, r3, #3
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	ebad 0d03 	sub.w	sp, sp, r3
 800107c:	466b      	mov	r3, sp
 800107e:	3303      	adds	r3, #3
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	617b      	str	r3, [r7, #20]
	float32_t abs_sub[frameSize];
 8001086:	4b5f      	ldr	r3, [pc, #380]	; (8001204 <unwrap+0x244>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3b01      	subs	r3, #1
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b5d      	ldr	r3, [pc, #372]	; (8001204 <unwrap+0x244>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4619      	mov	r1, r3
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	f04f 0400 	mov.w	r4, #0
 80010a0:	0154      	lsls	r4, r2, #5
 80010a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80010a6:	014b      	lsls	r3, r1, #5
 80010a8:	4b56      	ldr	r3, [pc, #344]	; (8001204 <unwrap+0x244>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	f04f 0400 	mov.w	r4, #0
 80010ba:	0154      	lsls	r4, r2, #5
 80010bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80010c0:	014b      	lsls	r3, r1, #5
 80010c2:	4b50      	ldr	r3, [pc, #320]	; (8001204 <unwrap+0x244>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	3303      	adds	r3, #3
 80010ca:	3307      	adds	r3, #7
 80010cc:	08db      	lsrs	r3, r3, #3
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	ebad 0d03 	sub.w	sp, sp, r3
 80010d4:	466b      	mov	r3, sp
 80010d6:	3303      	adds	r3, #3
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize);
 80010de:	69f9      	ldr	r1, [r7, #28]
 80010e0:	4b48      	ldr	r3, [pc, #288]	; (8001204 <unwrap+0x244>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f007 fbf0 	bl	80088cc <arm_copy_f32>
	arm_sub_f32(&in[1], &in_cp[0], &sub[0], (frameSize - 1));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	1d18      	adds	r0, r3, #4
 80010f0:	69f9      	ldr	r1, [r7, #28]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	4b43      	ldr	r3, [pc, #268]	; (8001204 <unwrap+0x244>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	f007 ff5d 	bl	8008fb8 <arm_sub_f32>
	arm_abs_f32(&sub[0], &abs_sub[0], (frameSize - 1));
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	68f9      	ldr	r1, [r7, #12]
 8001102:	4b40      	ldr	r3, [pc, #256]	; (8001204 <unwrap+0x244>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	3b01      	subs	r3, #1
 8001108:	461a      	mov	r2, r3
 800110a:	f007 ffe1 	bl	80090d0 <arm_abs_f32>
	for(int i = 0; i < (frameSize - 1); i++){
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
 8001112:	e043      	b.n	800119c <unwrap+0x1dc>
		out[i] = in[i] + 2*M_PI*k;
 8001114:	6a3b      	ldr	r3, [r7, #32]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	4413      	add	r3, r2
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800112e:	ed9f 5b32 	vldr	d5, [pc, #200]	; 80011f8 <unwrap+0x238>
 8001132:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001136:	ee36 7b07 	vadd.f64	d7, d6, d7
 800113a:	6a3b      	ldr	r3, [r7, #32]
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	4413      	add	r3, r2
 8001142:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001146:	edc3 7a00 	vstr	s15, [r3]
		// diff = fabsf(in[i+1] - in[i]);
		// if(diff > alpha){
		if(abs_sub[i] > alpha){
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	edd3 7a00 	vldr	s15, [r3]
 8001156:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800115a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001162:	d518      	bpl.n	8001196 <unwrap+0x1d6>
			if(in[i+1] < in_cp[i]){
 8001164:	6a3b      	ldr	r3, [r7, #32]
 8001166:	3301      	adds	r3, #1
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	ed93 7a00 	vldr	s14, [r3]
 8001172:	69fa      	ldr	r2, [r7, #28]
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	edd3 7a00 	vldr	s15, [r3]
 800117e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001186:	d503      	bpl.n	8001190 <unwrap+0x1d0>
				k++;
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	3301      	adds	r3, #1
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
 800118e:	e002      	b.n	8001196 <unwrap+0x1d6>
			} else {
				k--;
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	3b01      	subs	r3, #1
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < (frameSize - 1); i++){
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	3301      	adds	r3, #1
 800119a:	623b      	str	r3, [r7, #32]
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <unwrap+0x244>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	1e5a      	subs	r2, r3, #1
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d8b5      	bhi.n	8001114 <unwrap+0x154>
			}
		}
	}
	out[frameSize-1] = in[frameSize-1] + 2*M_PI*k;
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <unwrap+0x244>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80011b0:	4413      	add	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011ca:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80011f8 <unwrap+0x238>
 80011ce:	ee27 7b05 	vmul.f64	d7, d7, d5
 80011d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <unwrap+0x244>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80011de:	4413      	add	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	4413      	add	r3, r2
 80011e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011ea:	edc3 7a00 	vstr	s15, [r3]
 80011ee:	46ad      	mov	sp, r5
}
 80011f0:	bf00      	nop
 80011f2:	3730      	adds	r7, #48	; 0x30
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bdb0      	pop	{r4, r5, r7, pc}
 80011f8:	54442d18 	.word	0x54442d18
 80011fc:	401921fb 	.word	0x401921fb
 8001200:	40490fdb 	.word	0x40490fdb
 8001204:	08009814 	.word	0x08009814

08001208 <inst_frequency>:

void inst_frequency(float32_t in[], float32_t out[]){
 8001208:	b580      	push	{r7, lr}
 800120a:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	4b52      	ldr	r3, [pc, #328]	; (800135c <inst_frequency+0x154>)
 8001214:	f244 0210 	movw	r2, #16400	; 0x4010
 8001218:	443a      	add	r2, r7
 800121a:	4413      	add	r3, r2
 800121c:	6018      	str	r0, [r3, #0]
 800121e:	4b50      	ldr	r3, [pc, #320]	; (8001360 <inst_frequency+0x158>)
 8001220:	f244 0210 	movw	r2, #16400	; 0x4010
 8001224:	443a      	add	r2, r7
 8001226:	4413      	add	r3, r2
 8001228:	6019      	str	r1, [r3, #0]
	float32_t phase[2048] = {0};
 800122a:	4b4e      	ldr	r3, [pc, #312]	; (8001364 <inst_frequency+0x15c>)
 800122c:	f244 0210 	movw	r2, #16400	; 0x4010
 8001230:	443a      	add	r2, r7
 8001232:	4413      	add	r3, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123a:	461a      	mov	r2, r3
 800123c:	2100      	movs	r1, #0
 800123e:	f007 ffb7 	bl	80091b0 <memset>
	float32_t unwrapped_phase[2048] = {0};
 8001242:	4b49      	ldr	r3, [pc, #292]	; (8001368 <inst_frequency+0x160>)
 8001244:	f244 0210 	movw	r2, #16400	; 0x4010
 8001248:	443a      	add	r2, r7
 800124a:	4413      	add	r3, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001252:	461a      	mov	r2, r3
 8001254:	2100      	movs	r1, #0
 8001256:	f007 ffab 	bl	80091b0 <memset>
	float32_t C = 1 / M_TWOPI;
 800125a:	4b44      	ldr	r3, [pc, #272]	; (800136c <inst_frequency+0x164>)
 800125c:	f244 0208 	movw	r2, #16392	; 0x4008
 8001260:	443a      	add	r2, r7
 8001262:	6013      	str	r3, [r2, #0]
	inst_phase(&in[0], &phase[0]);
 8001264:	4a3f      	ldr	r2, [pc, #252]	; (8001364 <inst_frequency+0x15c>)
 8001266:	f244 0310 	movw	r3, #16400	; 0x4010
 800126a:	443b      	add	r3, r7
 800126c:	441a      	add	r2, r3
 800126e:	4b3b      	ldr	r3, [pc, #236]	; (800135c <inst_frequency+0x154>)
 8001270:	f244 0110 	movw	r1, #16400	; 0x4010
 8001274:	4439      	add	r1, r7
 8001276:	440b      	add	r3, r1
 8001278:	4611      	mov	r1, r2
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	f7ff fe66 	bl	8000f4c <inst_phase>
	unwrap(&phase[0], &unwrapped_phase[0]);
 8001280:	4a39      	ldr	r2, [pc, #228]	; (8001368 <inst_frequency+0x160>)
 8001282:	f244 0310 	movw	r3, #16400	; 0x4010
 8001286:	443b      	add	r3, r7
 8001288:	441a      	add	r2, r3
 800128a:	4b36      	ldr	r3, [pc, #216]	; (8001364 <inst_frequency+0x15c>)
 800128c:	f244 0110 	movw	r1, #16400	; 0x4010
 8001290:	4439      	add	r1, r7
 8001292:	440b      	add	r3, r1
 8001294:	4611      	mov	r1, r2
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fe92 	bl	8000fc0 <unwrap>
	for(int i = 0; i < (frameSize-1); i++){
 800129c:	2300      	movs	r3, #0
 800129e:	f244 020c 	movw	r2, #16396	; 0x400c
 80012a2:	443a      	add	r2, r7
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e03a      	b.n	800131e <inst_frequency+0x116>
		out[i] = C*(unwrapped_phase[i + 1] - unwrapped_phase[i]);
 80012a8:	f244 030c 	movw	r3, #16396	; 0x400c
 80012ac:	443b      	add	r3, r7
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <inst_frequency+0x160>)
 80012b4:	f244 0110 	movw	r1, #16400	; 0x4010
 80012b8:	4439      	add	r1, r7
 80012ba:	440b      	add	r3, r1
 80012bc:	0092      	lsls	r2, r2, #2
 80012be:	4413      	add	r3, r2
 80012c0:	ed93 7a00 	vldr	s14, [r3]
 80012c4:	4b28      	ldr	r3, [pc, #160]	; (8001368 <inst_frequency+0x160>)
 80012c6:	f244 0210 	movw	r2, #16400	; 0x4010
 80012ca:	443a      	add	r2, r7
 80012cc:	4413      	add	r3, r2
 80012ce:	f244 020c 	movw	r2, #16396	; 0x400c
 80012d2:	443a      	add	r2, r7
 80012d4:	6812      	ldr	r2, [r2, #0]
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	4413      	add	r3, r2
 80012da:	edd3 7a00 	vldr	s15, [r3]
 80012de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012e2:	f244 030c 	movw	r3, #16396	; 0x400c
 80012e6:	443b      	add	r3, r7
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	009a      	lsls	r2, r3, #2
 80012ec:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <inst_frequency+0x158>)
 80012ee:	f244 0110 	movw	r1, #16400	; 0x4010
 80012f2:	4439      	add	r1, r7
 80012f4:	440b      	add	r3, r1
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4413      	add	r3, r2
 80012fa:	f244 0208 	movw	r2, #16392	; 0x4008
 80012fe:	443a      	add	r2, r7
 8001300:	edd2 7a00 	vldr	s15, [r2]
 8001304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001308:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < (frameSize-1); i++){
 800130c:	f244 030c 	movw	r3, #16396	; 0x400c
 8001310:	443b      	add	r3, r7
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	f244 020c 	movw	r2, #16396	; 0x400c
 800131a:	443a      	add	r2, r7
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <inst_frequency+0x168>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	1e5a      	subs	r2, r3, #1
 8001324:	f244 030c 	movw	r3, #16396	; 0x400c
 8001328:	443b      	add	r3, r7
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	d8bb      	bhi.n	80012a8 <inst_frequency+0xa0>
	}
	out[frameSize - 1] = 0;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <inst_frequency+0x168>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001338:	4413      	add	r3, r2
 800133a:	009a      	lsls	r2, r3, #2
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <inst_frequency+0x158>)
 800133e:	f244 0110 	movw	r1, #16400	; 0x4010
 8001342:	4439      	add	r1, r7
 8001344:	440b      	add	r3, r1
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4413      	add	r3, r2
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
}
 8001350:	bf00      	nop
 8001352:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	ffffbff4 	.word	0xffffbff4
 8001360:	ffffbff0 	.word	0xffffbff0
 8001364:	ffffdff8 	.word	0xffffdff8
 8001368:	ffffbff8 	.word	0xffffbff8
 800136c:	3e22f983 	.word	0x3e22f983
 8001370:	08009814 	.word	0x08009814

08001374 <inst_centralized_normalized_absolute>:

void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
	float32_t mean = 0, max = 0;
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	f04f 0300 	mov.w	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
	uint32_t max_index = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
	float32_t *absolute, *normalized;
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 800138e:	4b34      	ldr	r3, [pc, #208]	; (8001460 <inst_centralized_normalized_absolute+0xec>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4618      	mov	r0, r3
 8001396:	f007 fefb 	bl	8009190 <malloc>
 800139a:	4603      	mov	r3, r0
 800139c:	61fb      	str	r3, [r7, #28]
	normalized = (float32_t *) malloc(frameSize * sizeof(float32_t));
 800139e:	4b30      	ldr	r3, [pc, #192]	; (8001460 <inst_centralized_normalized_absolute+0xec>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f007 fef3 	bl	8009190 <malloc>
 80013aa:	4603      	mov	r3, r0
 80013ac:	61bb      	str	r3, [r7, #24]
	complex_inst_absolute(in, &absolute[0]);
 80013ae:	69f9      	ldr	r1, [r7, #28]
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff fdb9 	bl	8000f28 <complex_inst_absolute>
	arm_max_f32(absolute, frameSize, &max, &max_index);
 80013b6:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <inst_centralized_normalized_absolute+0xec>)
 80013b8:	6819      	ldr	r1, [r3, #0]
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	f107 0210 	add.w	r2, r7, #16
 80013c2:	69f8      	ldr	r0, [r7, #28]
 80013c4:	f007 fbba 	bl	8008b3c <arm_max_f32>
	for(int a = 0; a < frameSize; a++){
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
 80013cc:	e012      	b.n	80013f4 <inst_centralized_normalized_absolute+0x80>
		normalized[a] = absolute[a] / max;
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	69fa      	ldr	r2, [r7, #28]
 80013d4:	4413      	add	r3, r2
 80013d6:	edd3 6a00 	vldr	s13, [r3]
 80013da:	ed97 7a04 	vldr	s14, [r7, #16]
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4413      	add	r3, r2
 80013e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ea:	edc3 7a00 	vstr	s15, [r3]
	for(int a = 0; a < frameSize; a++){
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	3301      	adds	r3, #1
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
 80013f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f6:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <inst_centralized_normalized_absolute+0xec>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d3e7      	bcc.n	80013ce <inst_centralized_normalized_absolute+0x5a>
	}
	arm_mean_f32(&normalized[0], frameSize, &mean);
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <inst_centralized_normalized_absolute+0xec>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f107 0214 	add.w	r2, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	69b8      	ldr	r0, [r7, #24]
 800140a:	f007 fb07 	bl	8008a1c <arm_mean_f32>
	for(int i = 0; i < frameSize; i++){
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
 8001412:	e016      	b.n	8001442 <inst_centralized_normalized_absolute+0xce>
		out[i] = normalized[i] / mean - 1;
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4413      	add	r3, r2
 800141c:	edd3 6a00 	vldr	s13, [r3]
 8001420:	ed97 7a05 	vldr	s14, [r7, #20]
 8001424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	4413      	add	r3, r2
 8001430:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001434:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001438:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < frameSize; i++){
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	3301      	adds	r3, #1
 8001440:	623b      	str	r3, [r7, #32]
 8001442:	6a3a      	ldr	r2, [r7, #32]
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <inst_centralized_normalized_absolute+0xec>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d3e3      	bcc.n	8001414 <inst_centralized_normalized_absolute+0xa0>
	}
	free(absolute);
 800144c:	69f8      	ldr	r0, [r7, #28]
 800144e:	f007 fea7 	bl	80091a0 <free>
	free(normalized);
 8001452:	69b8      	ldr	r0, [r7, #24]
 8001454:	f007 fea4 	bl	80091a0 <free>
}
 8001458:	bf00      	nop
 800145a:	3728      	adds	r7, #40	; 0x28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	08009814 	.word	0x08009814

08001464 <std_dev>:

void std_dev(float32_t in[], float32_t *out) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	arm_std_f32(&in[0], frameSize, out);
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <std_dev+0x20>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f007 fa58 	bl	800892c <arm_std_f32>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	08009814 	.word	0x08009814

08001488 <mean_of_signal_magnitude>:
//**********************************************************************************************//
// Feature number 6
void mean_of_signal_magnitude(float32_t in[], float32_t *out) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
	arm_mean_f32(&in[0], frameSize, out);
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <mean_of_signal_magnitude+0x20>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f007 fabe 	bl	8008a1c <arm_mean_f32>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	08009814 	.word	0x08009814

080014ac <kurtosis>:
	*out = maxValue*maxValue/fftSize;
	free(result_mag);
}

// Features number 11 and 12
void kurtosis(float32_t in[], float32_t *out, uint32_t blockSize){
 80014ac:	b5b0      	push	{r4, r5, r7, lr}
 80014ae:	b094      	sub	sp, #80	; 0x50
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	466b      	mov	r3, sp
 80014ba:	461d      	mov	r5, r3
	float32_t mean_array[blockSize];
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	4603      	mov	r3, r0
 80014c0:	3b01      	subs	r3, #1
 80014c2:	637b      	str	r3, [r7, #52]	; 0x34
 80014c4:	4601      	mov	r1, r0
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	f04f 0400 	mov.w	r4, #0
 80014d2:	0154      	lsls	r4, r2, #5
 80014d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014d8:	014b      	lsls	r3, r1, #5
 80014da:	4601      	mov	r1, r0
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	f04f 0400 	mov.w	r4, #0
 80014e8:	0154      	lsls	r4, r2, #5
 80014ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014ee:	014b      	lsls	r3, r1, #5
 80014f0:	0083      	lsls	r3, r0, #2
 80014f2:	3303      	adds	r3, #3
 80014f4:	3307      	adds	r3, #7
 80014f6:	08db      	lsrs	r3, r3, #3
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	ebad 0d03 	sub.w	sp, sp, r3
 80014fe:	466b      	mov	r3, sp
 8001500:	3303      	adds	r3, #3
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t x_1[blockSize];
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	4603      	mov	r3, r0
 800150c:	3b01      	subs	r3, #1
 800150e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001510:	4601      	mov	r1, r0
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	f04f 0400 	mov.w	r4, #0
 800151e:	0154      	lsls	r4, r2, #5
 8001520:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001524:	014b      	lsls	r3, r1, #5
 8001526:	4601      	mov	r1, r0
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	f04f 0400 	mov.w	r4, #0
 8001534:	0154      	lsls	r4, r2, #5
 8001536:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800153a:	014b      	lsls	r3, r1, #5
 800153c:	0083      	lsls	r3, r0, #2
 800153e:	3303      	adds	r3, #3
 8001540:	3307      	adds	r3, #7
 8001542:	08db      	lsrs	r3, r3, #3
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	ebad 0d03 	sub.w	sp, sp, r3
 800154a:	466b      	mov	r3, sp
 800154c:	3303      	adds	r3, #3
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t x_2[blockSize];
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	4603      	mov	r3, r0
 8001558:	3b01      	subs	r3, #1
 800155a:	647b      	str	r3, [r7, #68]	; 0x44
 800155c:	4601      	mov	r1, r0
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	f04f 0400 	mov.w	r4, #0
 800156a:	0154      	lsls	r4, r2, #5
 800156c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001570:	014b      	lsls	r3, r1, #5
 8001572:	4601      	mov	r1, r0
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	f04f 0400 	mov.w	r4, #0
 8001580:	0154      	lsls	r4, r2, #5
 8001582:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001586:	014b      	lsls	r3, r1, #5
 8001588:	0083      	lsls	r3, r0, #2
 800158a:	3303      	adds	r3, #3
 800158c:	3307      	adds	r3, #7
 800158e:	08db      	lsrs	r3, r3, #3
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	ebad 0d03 	sub.w	sp, sp, r3
 8001596:	466b      	mov	r3, sp
 8001598:	3303      	adds	r3, #3
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t temp_1[blockSize];
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	4603      	mov	r3, r0
 80015a4:	3b01      	subs	r3, #1
 80015a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015a8:	4601      	mov	r1, r0
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	f04f 0400 	mov.w	r4, #0
 80015b6:	0154      	lsls	r4, r2, #5
 80015b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015bc:	014b      	lsls	r3, r1, #5
 80015be:	4601      	mov	r1, r0
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	f04f 0400 	mov.w	r4, #0
 80015cc:	0154      	lsls	r4, r2, #5
 80015ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015d2:	014b      	lsls	r3, r1, #5
 80015d4:	0083      	lsls	r3, r0, #2
 80015d6:	3303      	adds	r3, #3
 80015d8:	3307      	adds	r3, #7
 80015da:	08db      	lsrs	r3, r3, #3
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	ebad 0d03 	sub.w	sp, sp, r3
 80015e2:	466b      	mov	r3, sp
 80015e4:	3303      	adds	r3, #3
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	633b      	str	r3, [r7, #48]	; 0x30
	float32_t temp_2[blockSize];
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	4603      	mov	r3, r0
 80015f0:	3b01      	subs	r3, #1
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015f4:	4601      	mov	r1, r0
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	f04f 0400 	mov.w	r4, #0
 8001602:	0154      	lsls	r4, r2, #5
 8001604:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001608:	014b      	lsls	r3, r1, #5
 800160a:	4601      	mov	r1, r0
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	f04f 0400 	mov.w	r4, #0
 8001618:	0154      	lsls	r4, r2, #5
 800161a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800161e:	014b      	lsls	r3, r1, #5
 8001620:	0083      	lsls	r3, r0, #2
 8001622:	3303      	adds	r3, #3
 8001624:	3307      	adds	r3, #7
 8001626:	08db      	lsrs	r3, r3, #3
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	ebad 0d03 	sub.w	sp, sp, r3
 800162e:	466b      	mov	r3, sp
 8001630:	3303      	adds	r3, #3
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t result[blockSize];
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	4603      	mov	r3, r0
 800163c:	3b01      	subs	r3, #1
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
 8001640:	4601      	mov	r1, r0
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	f04f 0400 	mov.w	r4, #0
 800164e:	0154      	lsls	r4, r2, #5
 8001650:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001654:	014b      	lsls	r3, r1, #5
 8001656:	4601      	mov	r1, r0
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	f04f 0400 	mov.w	r4, #0
 8001664:	0154      	lsls	r4, r2, #5
 8001666:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800166a:	014b      	lsls	r3, r1, #5
 800166c:	0083      	lsls	r3, r0, #2
 800166e:	3303      	adds	r3, #3
 8001670:	3307      	adds	r3, #7
 8001672:	08db      	lsrs	r3, r3, #3
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	ebad 0d03 	sub.w	sp, sp, r3
 800167a:	466b      	mov	r3, sp
 800167c:	3303      	adds	r3, #3
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	623b      	str	r3, [r7, #32]
	float32_t mean, m4, m2;
	// Calculate mean
	arm_mean_f32(&in[0], blockSize, &mean);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	461a      	mov	r2, r3
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f007 f9c5 	bl	8008a1c <arm_mean_f32>
	// Transform scalar into vector
	arm_fill_f32(mean, &mean_array[0], blockSize);
 8001692:	edd7 7a07 	vldr	s15, [r7, #28]
 8001696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4618      	mov	r0, r3
 800169c:	eeb0 0a67 	vmov.f32	s0, s15
 80016a0:	f007 f8d0 	bl	8008844 <arm_fill_f32>
	// Calculate (x - mean)
	arm_sub_f32(&in[0], &mean_array[0], &x_1[0], blockSize);
 80016a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80016a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f007 fc84 	bl	8008fb8 <arm_sub_f32>
	// Make a copy of (x - mean)
	arm_copy_f32(&x_1[0], &x_2[0], blockSize);
 80016b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016b2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f007 f908 	bl	80088cc <arm_copy_f32>
	// Calculate (x - mean) ^ 4
	arm_mult_f32(&x_1[0], &x_2[0], &temp_1[0], blockSize); // temp1 = (x - u)^2
 80016bc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80016be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80016c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f007 fcbe 	bl	8009044 <arm_mult_f32>
	arm_mult_f32(&temp_1[0], &x_2[0], &temp_2[0], blockSize); // temp2 = (x - u)^3
 80016c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80016cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f007 fcb8 	bl	8009044 <arm_mult_f32>
	arm_mult_f32(&temp_2[0], &x_2[0], &result[0], blockSize); // result = (x - u)^4
 80016d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80016d8:	6a3a      	ldr	r2, [r7, #32]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f007 fcb2 	bl	8009044 <arm_mult_f32>
	// Calculate mean of (x - mean) ^ 4
	arm_mean_f32(&result[0], blockSize, &m4);
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	f107 0218 	add.w	r2, r7, #24
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f007 f997 	bl	8008a1c <arm_mean_f32>
	// Calculate mean of (x - mean) ^ 2
	arm_mean_f32(&temp_1[0], blockSize, &m2);
 80016ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f0:	f107 0214 	add.w	r2, r7, #20
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f007 f990 	bl	8008a1c <arm_mean_f32>
	*out = m4 / (m2*m2) - 3;
 80016fc:	edd7 6a06 	vldr	s13, [r7, #24]
 8001700:	ed97 7a05 	vldr	s14, [r7, #20]
 8001704:	edd7 7a05 	vldr	s15, [r7, #20]
 8001708:	ee27 7a27 	vmul.f32	s14, s14, s15
 800170c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001710:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001714:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	edc3 7a00 	vstr	s15, [r3]
 800171e:	46ad      	mov	sp, r5
}
 8001720:	bf00      	nop
 8001722:	3750      	adds	r7, #80	; 0x50
 8001724:	46bd      	mov	sp, r7
 8001726:	bdb0      	pop	{r4, r5, r7, pc}

08001728 <moment20>:

// Central moment definition
// Mpq = E[x^(p-q).x*^q]
void moment20(float32_t in[], float32_t out[]){
 8001728:	b5b0      	push	{r4, r5, r7, lr}
 800172a:	b08c      	sub	sp, #48	; 0x30
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	466b      	mov	r3, sp
 8001734:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 8001736:	4b61      	ldr	r3, [pc, #388]	; (80018bc <moment20+0x194>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001742:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float32_t in_cp[frameSize*2];
 8001746:	4b5d      	ldr	r3, [pc, #372]	; (80018bc <moment20+0x194>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	3b01      	subs	r3, #1
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001750:	4b5a      	ldr	r3, [pc, #360]	; (80018bc <moment20+0x194>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4619      	mov	r1, r3
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	f04f 0400 	mov.w	r4, #0
 8001764:	0154      	lsls	r4, r2, #5
 8001766:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800176a:	014b      	lsls	r3, r1, #5
 800176c:	4b53      	ldr	r3, [pc, #332]	; (80018bc <moment20+0x194>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4619      	mov	r1, r3
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	f04f 0400 	mov.w	r4, #0
 8001780:	0154      	lsls	r4, r2, #5
 8001782:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001786:	014b      	lsls	r3, r1, #5
 8001788:	4b4c      	ldr	r3, [pc, #304]	; (80018bc <moment20+0x194>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	3303      	adds	r3, #3
 8001790:	3307      	adds	r3, #7
 8001792:	08db      	lsrs	r3, r3, #3
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	ebad 0d03 	sub.w	sp, sp, r3
 800179a:	466b      	mov	r3, sp
 800179c:	3303      	adds	r3, #3
 800179e:	089b      	lsrs	r3, r3, #2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	61bb      	str	r3, [r7, #24]
	float32_t m20[frameSize*2]; // in^2
 80017a4:	4b45      	ldr	r3, [pc, #276]	; (80018bc <moment20+0x194>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	3b01      	subs	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	4b43      	ldr	r3, [pc, #268]	; (80018bc <moment20+0x194>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4619      	mov	r1, r3
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	f04f 0400 	mov.w	r4, #0
 80017c2:	0154      	lsls	r4, r2, #5
 80017c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017c8:	014b      	lsls	r3, r1, #5
 80017ca:	4b3c      	ldr	r3, [pc, #240]	; (80018bc <moment20+0x194>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4619      	mov	r1, r3
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	f04f 0400 	mov.w	r4, #0
 80017de:	0154      	lsls	r4, r2, #5
 80017e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017e4:	014b      	lsls	r3, r1, #5
 80017e6:	4b35      	ldr	r3, [pc, #212]	; (80018bc <moment20+0x194>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	3303      	adds	r3, #3
 80017ee:	3307      	adds	r3, #7
 80017f0:	08db      	lsrs	r3, r3, #3
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	ebad 0d03 	sub.w	sp, sp, r3
 80017f8:	466b      	mov	r3, sp
 80017fa:	3303      	adds	r3, #3
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	613b      	str	r3, [r7, #16]
	float32_t m20_real = 0, m20_imag = 0, m20_real_mean = 0, m20_imag_mean = 0;
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	623b      	str	r3, [r7, #32]
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 800181a:	69b9      	ldr	r1, [r7, #24]
 800181c:	4b27      	ldr	r3, [pc, #156]	; (80018bc <moment20+0x194>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	461a      	mov	r2, r3
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f007 f851 	bl	80088cc <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 800182a:	69b9      	ldr	r1, [r7, #24]
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4b23      	ldr	r3, [pc, #140]	; (80018bc <moment20+0x194>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f007 f9e8 	bl	8008c08 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
 800183c:	e01b      	b.n	8001876 <moment20+0x14e>
		m20_real += m20[i];
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	edd3 7a00 	vldr	s15, [r3]
 800184a:	ed97 7a07 	vldr	s14, [r7, #28]
 800184e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001852:	edc7 7a07 	vstr	s15, [r7, #28]
		m20_imag += m20[i+1];
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	3301      	adds	r3, #1
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	edd3 7a00 	vldr	s15, [r3]
 8001864:	ed97 7a08 	vldr	s14, [r7, #32]
 8001868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186c:	edc7 7a08 	vstr	s15, [r7, #32]
	for(int i = 0; i < frameSize*2; i+=2){
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	3302      	adds	r3, #2
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <moment20+0x194>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	005a      	lsls	r2, r3, #1
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	429a      	cmp	r2, r3
 8001880:	d8dd      	bhi.n	800183e <moment20+0x116>
	}
	m20_real_mean = m20_real / blockSize;
 8001882:	edd7 6a07 	vldr	s13, [r7, #28]
 8001886:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800188a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800188e:	edc7 7a03 	vstr	s15, [r7, #12]
	m20_imag_mean = m20_imag / blockSize;
 8001892:	edd7 6a08 	vldr	s13, [r7, #32]
 8001896:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800189a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800189e:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m20_real_mean;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	601a      	str	r2, [r3, #0]
	out[1] = m20_imag_mean;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	3304      	adds	r3, #4
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	46ad      	mov	sp, r5
	//*out = sqrtf(m20_real_mean*m20_real_mean + m20_imag_mean*m20_imag_mean);
}
 80018b2:	bf00      	nop
 80018b4:	3730      	adds	r7, #48	; 0x30
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bdb0      	pop	{r4, r5, r7, pc}
 80018ba:	bf00      	nop
 80018bc:	08009814 	.word	0x08009814

080018c0 <moment21>:

void moment21(float32_t in[], float32_t out[]){
 80018c0:	b5b0      	push	{r4, r5, r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	466b      	mov	r3, sp
 80018cc:	461d      	mov	r5, r3
	float32_t in_conj[frameSize*2];
 80018ce:	4b55      	ldr	r3, [pc, #340]	; (8001a24 <moment21+0x164>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	3b01      	subs	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	4b52      	ldr	r3, [pc, #328]	; (8001a24 <moment21+0x164>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4619      	mov	r1, r3
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	f04f 0400 	mov.w	r4, #0
 80018ec:	0154      	lsls	r4, r2, #5
 80018ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018f2:	014b      	lsls	r3, r1, #5
 80018f4:	4b4b      	ldr	r3, [pc, #300]	; (8001a24 <moment21+0x164>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4619      	mov	r1, r3
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	f04f 0400 	mov.w	r4, #0
 8001908:	0154      	lsls	r4, r2, #5
 800190a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800190e:	014b      	lsls	r3, r1, #5
 8001910:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <moment21+0x164>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	3303      	adds	r3, #3
 8001918:	3307      	adds	r3, #7
 800191a:	08db      	lsrs	r3, r3, #3
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	ebad 0d03 	sub.w	sp, sp, r3
 8001922:	466b      	mov	r3, sp
 8001924:	3303      	adds	r3, #3
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	61bb      	str	r3, [r7, #24]
	float32_t m21[frameSize*2];
 800192c:	4b3d      	ldr	r3, [pc, #244]	; (8001a24 <moment21+0x164>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	3b01      	subs	r3, #1
 8001934:	61fb      	str	r3, [r7, #28]
 8001936:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <moment21+0x164>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4619      	mov	r1, r3
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	f04f 0400 	mov.w	r4, #0
 800194a:	0154      	lsls	r4, r2, #5
 800194c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001950:	014b      	lsls	r3, r1, #5
 8001952:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <moment21+0x164>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4619      	mov	r1, r3
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	f04f 0400 	mov.w	r4, #0
 8001966:	0154      	lsls	r4, r2, #5
 8001968:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800196c:	014b      	lsls	r3, r1, #5
 800196e:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <moment21+0x164>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	3303      	adds	r3, #3
 8001976:	3307      	adds	r3, #7
 8001978:	08db      	lsrs	r3, r3, #3
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	ebad 0d03 	sub.w	sp, sp, r3
 8001980:	466b      	mov	r3, sp
 8001982:	3303      	adds	r3, #3
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	613b      	str	r3, [r7, #16]
	float32_t in_mag[frameSize];
 800198a:	4b26      	ldr	r3, [pc, #152]	; (8001a24 <moment21+0x164>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	3b01      	subs	r3, #1
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <moment21+0x164>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4619      	mov	r1, r3
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	f04f 0400 	mov.w	r4, #0
 80019a4:	0154      	lsls	r4, r2, #5
 80019a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019aa:	014b      	lsls	r3, r1, #5
 80019ac:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <moment21+0x164>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	f04f 0400 	mov.w	r4, #0
 80019be:	0154      	lsls	r4, r2, #5
 80019c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019c4:	014b      	lsls	r3, r1, #5
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <moment21+0x164>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	3303      	adds	r3, #3
 80019ce:	3307      	adds	r3, #7
 80019d0:	08db      	lsrs	r3, r3, #3
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	ebad 0d03 	sub.w	sp, sp, r3
 80019d8:	466b      	mov	r3, sp
 80019da:	3303      	adds	r3, #3
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	60bb      	str	r3, [r7, #8]
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 80019e2:	69b9      	ldr	r1, [r7, #24]
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <moment21+0x164>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f007 fa94 	bl	8008f18 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_conj[0], &m21[0], frameSize);
 80019f0:	69b9      	ldr	r1, [r7, #24]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <moment21+0x164>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f007 f905 	bl	8008c08 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mag_f32(&m21[0], &in_mag[0], frameSize);
 80019fe:	6938      	ldr	r0, [r7, #16]
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <moment21+0x164>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	f007 f99e 	bl	8008d48 <arm_cmplx_mag_f32>
	arm_mean_f32(&in_mag[0], frameSize, out);
 8001a0c:	68b8      	ldr	r0, [r7, #8]
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <moment21+0x164>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	f007 f801 	bl	8008a1c <arm_mean_f32>
 8001a1a:	46ad      	mov	sp, r5
	// Calculating the mean after the absolute value here works because there
	// is no imaginary part in the number M21, different from M20
}
 8001a1c:	bf00      	nop
 8001a1e:	3720      	adds	r7, #32
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bdb0      	pop	{r4, r5, r7, pc}
 8001a24:	08009814 	.word	0x08009814

08001a28 <moment40>:
	out[0] = m22_real_mean;
	out[1] = m22_imag_mean;
	//*out = sqrtf(m22_real_mean*m22_real_mean + m22_imag_mean*m22_imag_mean);
}

void moment40(float32_t in[], float32_t out[]){
 8001a28:	b5b0      	push	{r4, r5, r7, lr}
 8001a2a:	b090      	sub	sp, #64	; 0x40
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	466b      	mov	r3, sp
 8001a34:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 8001a36:	4b94      	ldr	r3, [pc, #592]	; (8001c88 <moment40+0x260>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	ee07 3a90 	vmov	s15, r3
 8001a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a42:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float32_t in_cp[frameSize*2];
 8001a46:	4b90      	ldr	r3, [pc, #576]	; (8001c88 <moment40+0x260>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001a50:	4b8d      	ldr	r3, [pc, #564]	; (8001c88 <moment40+0x260>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4619      	mov	r1, r3
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	f04f 0400 	mov.w	r4, #0
 8001a64:	0154      	lsls	r4, r2, #5
 8001a66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a6a:	014b      	lsls	r3, r1, #5
 8001a6c:	4b86      	ldr	r3, [pc, #536]	; (8001c88 <moment40+0x260>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4619      	mov	r1, r3
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	f04f 0400 	mov.w	r4, #0
 8001a80:	0154      	lsls	r4, r2, #5
 8001a82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a86:	014b      	lsls	r3, r1, #5
 8001a88:	4b7f      	ldr	r3, [pc, #508]	; (8001c88 <moment40+0x260>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	3303      	adds	r3, #3
 8001a90:	3307      	adds	r3, #7
 8001a92:	08db      	lsrs	r3, r3, #3
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	ebad 0d03 	sub.w	sp, sp, r3
 8001a9a:	466b      	mov	r3, sp
 8001a9c:	3303      	adds	r3, #3
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t m20[frameSize*2]; // in^2
 8001aa4:	4b78      	ldr	r3, [pc, #480]	; (8001c88 <moment40+0x260>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001aae:	4b76      	ldr	r3, [pc, #472]	; (8001c88 <moment40+0x260>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	f04f 0400 	mov.w	r4, #0
 8001ac2:	0154      	lsls	r4, r2, #5
 8001ac4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ac8:	014b      	lsls	r3, r1, #5
 8001aca:	4b6f      	ldr	r3, [pc, #444]	; (8001c88 <moment40+0x260>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	f04f 0400 	mov.w	r4, #0
 8001ade:	0154      	lsls	r4, r2, #5
 8001ae0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ae4:	014b      	lsls	r3, r1, #5
 8001ae6:	4b68      	ldr	r3, [pc, #416]	; (8001c88 <moment40+0x260>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	3303      	adds	r3, #3
 8001aee:	3307      	adds	r3, #7
 8001af0:	08db      	lsrs	r3, r3, #3
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	ebad 0d03 	sub.w	sp, sp, r3
 8001af8:	466b      	mov	r3, sp
 8001afa:	3303      	adds	r3, #3
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	623b      	str	r3, [r7, #32]
	float32_t m30[frameSize]; // in^3
 8001b02:	4b61      	ldr	r3, [pc, #388]	; (8001c88 <moment40+0x260>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	4b5f      	ldr	r3, [pc, #380]	; (8001c88 <moment40+0x260>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	f04f 0400 	mov.w	r4, #0
 8001b1c:	0154      	lsls	r4, r2, #5
 8001b1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b22:	014b      	lsls	r3, r1, #5
 8001b24:	4b58      	ldr	r3, [pc, #352]	; (8001c88 <moment40+0x260>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	f04f 0400 	mov.w	r4, #0
 8001b36:	0154      	lsls	r4, r2, #5
 8001b38:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b3c:	014b      	lsls	r3, r1, #5
 8001b3e:	4b52      	ldr	r3, [pc, #328]	; (8001c88 <moment40+0x260>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	3303      	adds	r3, #3
 8001b46:	3307      	adds	r3, #7
 8001b48:	08db      	lsrs	r3, r3, #3
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	ebad 0d03 	sub.w	sp, sp, r3
 8001b50:	466b      	mov	r3, sp
 8001b52:	3303      	adds	r3, #3
 8001b54:	089b      	lsrs	r3, r3, #2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	61bb      	str	r3, [r7, #24]
	float32_t m40[frameSize]; // in^4
 8001b5a:	4b4b      	ldr	r3, [pc, #300]	; (8001c88 <moment40+0x260>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	4b49      	ldr	r3, [pc, #292]	; (8001c88 <moment40+0x260>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4619      	mov	r1, r3
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	f04f 0400 	mov.w	r4, #0
 8001b74:	0154      	lsls	r4, r2, #5
 8001b76:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b7a:	014b      	lsls	r3, r1, #5
 8001b7c:	4b42      	ldr	r3, [pc, #264]	; (8001c88 <moment40+0x260>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	f04f 0400 	mov.w	r4, #0
 8001b8e:	0154      	lsls	r4, r2, #5
 8001b90:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b94:	014b      	lsls	r3, r1, #5
 8001b96:	4b3c      	ldr	r3, [pc, #240]	; (8001c88 <moment40+0x260>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	3303      	adds	r3, #3
 8001b9e:	3307      	adds	r3, #7
 8001ba0:	08db      	lsrs	r3, r3, #3
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	ebad 0d03 	sub.w	sp, sp, r3
 8001ba8:	466b      	mov	r3, sp
 8001baa:	3303      	adds	r3, #3
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	613b      	str	r3, [r7, #16]
	float32_t m40_real = 0.0f, m40_imag = 0.0f;
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t m40_real_mean = 0.0f, m40_imag_mean = 0.0f;
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8001bca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bcc:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <moment40+0x260>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f006 fe79 	bl	80088cc <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8001bda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bdc:	6a3a      	ldr	r2, [r7, #32]
 8001bde:	4b2a      	ldr	r3, [pc, #168]	; (8001c88 <moment40+0x260>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f007 f810 	bl	8008c08 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8001be8:	6a38      	ldr	r0, [r7, #32]
 8001bea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <moment40+0x260>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f007 f809 	bl	8008c08 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 8001bf6:	69b8      	ldr	r0, [r7, #24]
 8001bf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <moment40+0x260>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f007 f802 	bl	8008c08 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8001c04:	2300      	movs	r3, #0
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c08:	e01b      	b.n	8001c42 <moment40+0x21a>
		m40_real += m40[i];
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001c1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		m40_imag += m40[i+1];
 8001c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c24:	3301      	adds	r3, #1
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	edd3 7a00 	vldr	s15, [r3]
 8001c30:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c38:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	for(int i = 0; i < frameSize*2; i+=2){
 8001c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3e:	3302      	adds	r3, #2
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <moment40+0x260>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	005a      	lsls	r2, r3, #1
 8001c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d8dd      	bhi.n	8001c0a <moment40+0x1e2>
	}
	m40_real_mean = m40_real / blockSize;
 8001c4e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001c52:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c5a:	edc7 7a03 	vstr	s15, [r7, #12]
	m40_imag_mean = m40_imag / blockSize;
 8001c5e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001c62:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c6a:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m40_real_mean;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	601a      	str	r2, [r3, #0]
	out[1] = m40_imag_mean;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	3304      	adds	r3, #4
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	46ad      	mov	sp, r5
	// *out = sqrtf(m40_real_mean*m40_real_mean + m40_imag_mean*m40_imag_mean);
}
 8001c7e:	bf00      	nop
 8001c80:	3740      	adds	r7, #64	; 0x40
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bdb0      	pop	{r4, r5, r7, pc}
 8001c86:	bf00      	nop
 8001c88:	08009814 	.word	0x08009814

08001c8c <moment42>:
	out[0] = m41_real_mean;
	out[1] = m41_imag_mean;
	// *out = sqrtf(m41_real_mean*m41_real_mean + m41_imag_mean*m41_imag_mean);
}

void moment42(float32_t in[], float32_t out[]){
 8001c8c:	b5b0      	push	{r4, r5, r7, lr}
 8001c8e:	b092      	sub	sp, #72	; 0x48
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	466b      	mov	r3, sp
 8001c98:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 8001c9a:	4baf      	ldr	r3, [pc, #700]	; (8001f58 <moment42+0x2cc>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ca6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float32_t in_cp[frameSize*2];
 8001caa:	4bab      	ldr	r3, [pc, #684]	; (8001f58 <moment42+0x2cc>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8001cb4:	4ba8      	ldr	r3, [pc, #672]	; (8001f58 <moment42+0x2cc>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	f04f 0400 	mov.w	r4, #0
 8001cc8:	0154      	lsls	r4, r2, #5
 8001cca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cce:	014b      	lsls	r3, r1, #5
 8001cd0:	4ba1      	ldr	r3, [pc, #644]	; (8001f58 <moment42+0x2cc>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	f04f 0400 	mov.w	r4, #0
 8001ce4:	0154      	lsls	r4, r2, #5
 8001ce6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cea:	014b      	lsls	r3, r1, #5
 8001cec:	4b9a      	ldr	r3, [pc, #616]	; (8001f58 <moment42+0x2cc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	3303      	adds	r3, #3
 8001cf4:	3307      	adds	r3, #7
 8001cf6:	08db      	lsrs	r3, r3, #3
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	ebad 0d03 	sub.w	sp, sp, r3
 8001cfe:	466b      	mov	r3, sp
 8001d00:	3303      	adds	r3, #3
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t in_conj[frameSize*2];
 8001d08:	4b93      	ldr	r3, [pc, #588]	; (8001f58 <moment42+0x2cc>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d12:	4b91      	ldr	r3, [pc, #580]	; (8001f58 <moment42+0x2cc>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	f04f 0400 	mov.w	r4, #0
 8001d26:	0154      	lsls	r4, r2, #5
 8001d28:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d2c:	014b      	lsls	r3, r1, #5
 8001d2e:	4b8a      	ldr	r3, [pc, #552]	; (8001f58 <moment42+0x2cc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4619      	mov	r1, r3
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	f04f 0400 	mov.w	r4, #0
 8001d42:	0154      	lsls	r4, r2, #5
 8001d44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d48:	014b      	lsls	r3, r1, #5
 8001d4a:	4b83      	ldr	r3, [pc, #524]	; (8001f58 <moment42+0x2cc>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	3303      	adds	r3, #3
 8001d52:	3307      	adds	r3, #7
 8001d54:	08db      	lsrs	r3, r3, #3
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	ebad 0d03 	sub.w	sp, sp, r3
 8001d5c:	466b      	mov	r3, sp
 8001d5e:	3303      	adds	r3, #3
 8001d60:	089b      	lsrs	r3, r3, #2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m20[frameSize*2]; // in^2
 8001d66:	4b7c      	ldr	r3, [pc, #496]	; (8001f58 <moment42+0x2cc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8001d70:	4b79      	ldr	r3, [pc, #484]	; (8001f58 <moment42+0x2cc>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4619      	mov	r1, r3
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	f04f 0400 	mov.w	r4, #0
 8001d84:	0154      	lsls	r4, r2, #5
 8001d86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d8a:	014b      	lsls	r3, r1, #5
 8001d8c:	4b72      	ldr	r3, [pc, #456]	; (8001f58 <moment42+0x2cc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4619      	mov	r1, r3
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	f04f 0400 	mov.w	r4, #0
 8001da0:	0154      	lsls	r4, r2, #5
 8001da2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001da6:	014b      	lsls	r3, r1, #5
 8001da8:	4b6b      	ldr	r3, [pc, #428]	; (8001f58 <moment42+0x2cc>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	3303      	adds	r3, #3
 8001db0:	3307      	adds	r3, #7
 8001db2:	08db      	lsrs	r3, r3, #3
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	ebad 0d03 	sub.w	sp, sp, r3
 8001dba:	466b      	mov	r3, sp
 8001dbc:	3303      	adds	r3, #3
 8001dbe:	089b      	lsrs	r3, r3, #2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	623b      	str	r3, [r7, #32]
	float32_t m31[frameSize]; // in^3
 8001dc4:	4b64      	ldr	r3, [pc, #400]	; (8001f58 <moment42+0x2cc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	4b62      	ldr	r3, [pc, #392]	; (8001f58 <moment42+0x2cc>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	f04f 0400 	mov.w	r4, #0
 8001dde:	0154      	lsls	r4, r2, #5
 8001de0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001de4:	014b      	lsls	r3, r1, #5
 8001de6:	4b5c      	ldr	r3, [pc, #368]	; (8001f58 <moment42+0x2cc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4619      	mov	r1, r3
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	f04f 0400 	mov.w	r4, #0
 8001df8:	0154      	lsls	r4, r2, #5
 8001dfa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dfe:	014b      	lsls	r3, r1, #5
 8001e00:	4b55      	ldr	r3, [pc, #340]	; (8001f58 <moment42+0x2cc>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	3303      	adds	r3, #3
 8001e08:	3307      	adds	r3, #7
 8001e0a:	08db      	lsrs	r3, r3, #3
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	ebad 0d03 	sub.w	sp, sp, r3
 8001e12:	466b      	mov	r3, sp
 8001e14:	3303      	adds	r3, #3
 8001e16:	089b      	lsrs	r3, r3, #2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	61bb      	str	r3, [r7, #24]
	float32_t m42[frameSize]; // in^4
 8001e1c:	4b4e      	ldr	r3, [pc, #312]	; (8001f58 <moment42+0x2cc>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	4b4c      	ldr	r3, [pc, #304]	; (8001f58 <moment42+0x2cc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	f04f 0400 	mov.w	r4, #0
 8001e36:	0154      	lsls	r4, r2, #5
 8001e38:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e3c:	014b      	lsls	r3, r1, #5
 8001e3e:	4b46      	ldr	r3, [pc, #280]	; (8001f58 <moment42+0x2cc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4619      	mov	r1, r3
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	f04f 0400 	mov.w	r4, #0
 8001e50:	0154      	lsls	r4, r2, #5
 8001e52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e56:	014b      	lsls	r3, r1, #5
 8001e58:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <moment42+0x2cc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	3303      	adds	r3, #3
 8001e60:	3307      	adds	r3, #7
 8001e62:	08db      	lsrs	r3, r3, #3
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	ebad 0d03 	sub.w	sp, sp, r3
 8001e6a:	466b      	mov	r3, sp
 8001e6c:	3303      	adds	r3, #3
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	613b      	str	r3, [r7, #16]
	float32_t m42_real = 0.0f, m42_imag = 0.0f;
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t m42_real_mean = 0.0f, m42_imag_mean = 0.0f;
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8001e8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e8e:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <moment42+0x2cc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	461a      	mov	r2, r3
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f006 fd18 	bl	80088cc <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8001e9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001e9e:	4b2e      	ldr	r3, [pc, #184]	; (8001f58 <moment42+0x2cc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f007 f837 	bl	8008f18 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8001eaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001eac:	6a3a      	ldr	r2, [r7, #32]
 8001eae:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <moment42+0x2cc>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f006 fea8 	bl	8008c08 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_conj[0], &m31[0], frameSize);
 8001eb8:	6a38      	ldr	r0, [r7, #32]
 8001eba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <moment42+0x2cc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f006 fea1 	bl	8008c08 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m31[0], &in_conj[0], &m42[0], frameSize);
 8001ec6:	69b8      	ldr	r0, [r7, #24]
 8001ec8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <moment42+0x2cc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f006 fe9a 	bl	8008c08 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ed8:	e01b      	b.n	8001f12 <moment42+0x286>
		m42_real += m42[i];
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	edd3 7a00 	vldr	s15, [r3]
 8001ee6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		m42_imag += m42[i+1];
 8001ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	edd3 7a00 	vldr	s15, [r3]
 8001f00:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f08:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	for(int i = 0; i < frameSize*2; i+=2){
 8001f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0e:	3302      	adds	r3, #2
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <moment42+0x2cc>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	005a      	lsls	r2, r3, #1
 8001f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d8dd      	bhi.n	8001eda <moment42+0x24e>
	}
	m42_real_mean = m42_real / blockSize;
 8001f1e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001f22:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f2a:	edc7 7a03 	vstr	s15, [r7, #12]
	m42_imag_mean = m42_imag / blockSize;
 8001f2e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f32:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f3a:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m42_real_mean;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	601a      	str	r2, [r3, #0]
	out[1] = m42_imag_mean;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	3304      	adds	r3, #4
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	46ad      	mov	sp, r5
	// *out = sqrtf(m42_real_mean*m42_real_mean + m42_imag_mean*m42_imag_mean);
}
 8001f4e:	bf00      	nop
 8001f50:	3748      	adds	r7, #72	; 0x48
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bdb0      	pop	{r4, r5, r7, pc}
 8001f56:	bf00      	nop
 8001f58:	08009814 	.word	0x08009814

08001f5c <cumulant_40>:
};
void cumulant_21(float32_t in[], float32_t *out){
	moment21(&in[0], out);
};

void cumulant_40(float32_t in[], float32_t *out){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08c      	sub	sp, #48	; 0x30
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
	float32_t m40[2], m20[2];
	float32_t m20_2[2], _3_m20_2[2];
	float32_t temp[2];
	moment20(&in[0], &m20[0]); // m20 is complex
 8001f66:	f107 0320 	add.w	r3, r7, #32
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff fbdb 	bl	8001728 <moment20>
	moment40(&in[0], &m40[0]); // m40 is complex
 8001f72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f76:	4619      	mov	r1, r3
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff fd55 	bl	8001a28 <moment40>
	// From complex multiplication
	// (a + bi)(a + bi) = (a^2 - b^2) + (2ab)i
	// Calculate 3*m20^2
	m20_2[0] = m20[0] * m20[0] - m20[1] * m20[1];
 8001f7e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f82:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f8a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001f8e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9a:	edc7 7a06 	vstr	s15, [r7, #24]
	m20_2[1] = 2 * m20[0] * m20[1];
 8001f9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fa2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001fa6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fae:	edc7 7a07 	vstr	s15, [r7, #28]
	_3_m20_2[0] = m20_2[0] * 3;
 8001fb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fb6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001fba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fbe:	edc7 7a04 	vstr	s15, [r7, #16]
	_3_m20_2[1] = m20_2[1] * 3;
 8001fc2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fc6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fce:	edc7 7a05 	vstr	s15, [r7, #20]
	// Save temporary complex number and calculate absolute value
	temp[0] = m40[0] - _3_m20_2[0];
 8001fd2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001fd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fde:	edc7 7a02 	vstr	s15, [r7, #8]
	temp[1] = m40[1] - _3_m20_2[1];
 8001fe2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001fe6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fee:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
 8001ff2:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ff6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ffa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ffe:	edd7 6a03 	vldr	s13, [r7, #12]
 8002002:	edd7 7a03 	vldr	s15, [r7, #12]
 8002006:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800200a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800200e:	eeb0 0a67 	vmov.f32	s0, s15
 8002012:	f007 fa09 	bl	8009428 <sqrtf>
 8002016:	eef0 7a40 	vmov.f32	s15, s0
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	edc3 7a00 	vstr	s15, [r3]
	// *out = fabsf(m40 - 3*m20*m20);
};
 8002020:	bf00      	nop
 8002022:	3730      	adds	r7, #48	; 0x30
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <cumulant_42>:
	temp[0] = m41[0] - _3_m20_m21[0];
	temp[1] = m41[1] - _3_m20_m21[1];
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
	// *out = fabsf(m41 - 3*m20*m21);
};
void cumulant_42(float32_t in[], float32_t *out){
 8002028:	b580      	push	{r7, lr}
 800202a:	b08e      	sub	sp, #56	; 0x38
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
	float32_t m42[2], m20[2], m20_2[2], m21;
	float32_t _2_m21_2, abs_m20_2;
	float32_t temp[2];
	// From complex multiplication
	// Calculate 3*m20*m21
	moment42(&in[0], &m42[0]); // m42 is complex
 8002032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002036:	4619      	mov	r1, r3
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff fe27 	bl	8001c8c <moment42>
	moment20(&in[0], &m20[0]); // m20 is complex
 800203e:	f107 0320 	add.w	r3, r7, #32
 8002042:	4619      	mov	r1, r3
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff fb6f 	bl	8001728 <moment20>
	moment21(&in[0], &m21);    // m21 is real
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4619      	mov	r1, r3
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff fc35 	bl	80018c0 <moment21>
	// Calculate 2*m1^2
	_2_m21_2 = 2 * m21 * m21;
 8002056:	edd7 7a05 	vldr	s15, [r7, #20]
 800205a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800205e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002066:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	// Calculate |m20^2|
	// From complex multiplication
	// (a + bi)(a + bi) = (a^2 - b^2) + (2ab)i
	m20_2[0] = m20[0] * m20[0] - m20[1] * m20[1];
 800206a:	ed97 7a08 	vldr	s14, [r7, #32]
 800206e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002072:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002076:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800207a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800207e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002086:	edc7 7a06 	vstr	s15, [r7, #24]
	m20_2[1] = 2 * m20[0] * m20[1];
 800208a:	edd7 7a08 	vldr	s15, [r7, #32]
 800208e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002092:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209a:	edc7 7a07 	vstr	s15, [r7, #28]
	abs_m20_2 = sqrtf(m20_2[0]*m20_2[0] + m20_2[1]*m20_2[1]);
 800209e:	ed97 7a06 	vldr	s14, [r7, #24]
 80020a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80020a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80020ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80020b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ba:	eeb0 0a67 	vmov.f32	s0, s15
 80020be:	f007 f9b3 	bl	8009428 <sqrtf>
 80020c2:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	temp[0] = m42[0] - abs_m20_2 - _2_m21_2;
 80020c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80020ca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80020ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020d2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80020d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020da:	edc7 7a03 	vstr	s15, [r7, #12]
	temp[1] = m42[1];
 80020de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e0:	613b      	str	r3, [r7, #16]
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
 80020e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80020e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80020ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ee:	edd7 6a04 	vldr	s13, [r7, #16]
 80020f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80020f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002102:	f007 f991 	bl	8009428 <sqrtf>
 8002106:	eef0 7a40 	vmov.f32	s15, s0
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	edc3 7a00 	vstr	s15, [r3]
	// *out = fabsf(m42 - fabsf(m20*m20) - 2*m21*m21);
};
 8002110:	bf00      	nop
 8002112:	3738      	adds	r7, #56	; 0x38
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08c      	sub	sp, #48	; 0x30
 800211c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211e:	f107 031c 	add.w	r3, r7, #28
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
 800212c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800212e:	4b4b      	ldr	r3, [pc, #300]	; (800225c <MX_GPIO_Init+0x144>)
 8002130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002134:	4a49      	ldr	r2, [pc, #292]	; (800225c <MX_GPIO_Init+0x144>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800213e:	4b47      	ldr	r3, [pc, #284]	; (800225c <MX_GPIO_Init+0x144>)
 8002140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800214c:	4b43      	ldr	r3, [pc, #268]	; (800225c <MX_GPIO_Init+0x144>)
 800214e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002152:	4a42      	ldr	r2, [pc, #264]	; (800225c <MX_GPIO_Init+0x144>)
 8002154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002158:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800215c:	4b3f      	ldr	r3, [pc, #252]	; (800225c <MX_GPIO_Init+0x144>)
 800215e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800216a:	4b3c      	ldr	r3, [pc, #240]	; (800225c <MX_GPIO_Init+0x144>)
 800216c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002170:	4a3a      	ldr	r2, [pc, #232]	; (800225c <MX_GPIO_Init+0x144>)
 8002172:	f043 0302 	orr.w	r3, r3, #2
 8002176:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800217a:	4b38      	ldr	r3, [pc, #224]	; (800225c <MX_GPIO_Init+0x144>)
 800217c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002188:	4b34      	ldr	r3, [pc, #208]	; (800225c <MX_GPIO_Init+0x144>)
 800218a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218e:	4a33      	ldr	r2, [pc, #204]	; (800225c <MX_GPIO_Init+0x144>)
 8002190:	f043 0308 	orr.w	r3, r3, #8
 8002194:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002198:	4b30      	ldr	r3, [pc, #192]	; (800225c <MX_GPIO_Init+0x144>)
 800219a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	4b2d      	ldr	r3, [pc, #180]	; (800225c <MX_GPIO_Init+0x144>)
 80021a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ac:	4a2b      	ldr	r2, [pc, #172]	; (800225c <MX_GPIO_Init+0x144>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021b6:	4b29      	ldr	r3, [pc, #164]	; (800225c <MX_GPIO_Init+0x144>)
 80021b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021c4:	4b25      	ldr	r3, [pc, #148]	; (800225c <MX_GPIO_Init+0x144>)
 80021c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ca:	4a24      	ldr	r2, [pc, #144]	; (800225c <MX_GPIO_Init+0x144>)
 80021cc:	f043 0310 	orr.w	r3, r3, #16
 80021d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021d4:	4b21      	ldr	r3, [pc, #132]	; (800225c <MX_GPIO_Init+0x144>)
 80021d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80021e2:	2200      	movs	r2, #0
 80021e4:	f244 0101 	movw	r1, #16385	; 0x4001
 80021e8:	481d      	ldr	r0, [pc, #116]	; (8002260 <MX_GPIO_Init+0x148>)
 80021ea:	f001 fe35 	bl	8003e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2102      	movs	r1, #2
 80021f2:	481c      	ldr	r0, [pc, #112]	; (8002264 <MX_GPIO_Init+0x14c>)
 80021f4:	f001 fe30 	bl	8003e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80021f8:	f244 0301 	movw	r3, #16385	; 0x4001
 80021fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fe:	2301      	movs	r3, #1
 8002200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220a:	f107 031c 	add.w	r3, r7, #28
 800220e:	4619      	mov	r1, r3
 8002210:	4813      	ldr	r0, [pc, #76]	; (8002260 <MX_GPIO_Init+0x148>)
 8002212:	f001 fc71 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002216:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800221a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002228:	230a      	movs	r3, #10
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222c:	f107 031c 	add.w	r3, r7, #28
 8002230:	4619      	mov	r1, r3
 8002232:	480d      	ldr	r0, [pc, #52]	; (8002268 <MX_GPIO_Init+0x150>)
 8002234:	f001 fc60 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002238:	2302      	movs	r3, #2
 800223a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223c:	2301      	movs	r3, #1
 800223e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002244:	2300      	movs	r3, #0
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	4619      	mov	r1, r3
 800224e:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_GPIO_Init+0x14c>)
 8002250:	f001 fc52 	bl	8003af8 <HAL_GPIO_Init>

}
 8002254:	bf00      	nop
 8002256:	3730      	adds	r7, #48	; 0x30
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	58024400 	.word	0x58024400
 8002260:	58020400 	.word	0x58020400
 8002264:	58021000 	.word	0x58021000
 8002268:	58020000 	.word	0x58020000

0800226c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002270:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002274:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <SCB_EnableICache+0x3c>)
 800227a:	2200      	movs	r2, #0
 800227c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002280:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002284:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002288:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <SCB_EnableICache+0x3c>)
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	4a06      	ldr	r2, [pc, #24]	; (80022a8 <SCB_EnableICache+0x3c>)
 800228e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002292:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002294:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002298:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80022b2:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <SCB_EnableDCache+0x7c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80022ba:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80022be:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <SCB_EnableDCache+0x7c>)
 80022c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022c4:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	0b5b      	lsrs	r3, r3, #13
 80022ca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80022ce:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	08db      	lsrs	r3, r3, #3
 80022d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022d8:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80022e2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80022e8:	490f      	ldr	r1, [pc, #60]	; (8002328 <SCB_EnableDCache+0x7c>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	1e5a      	subs	r2, r3, #1
 80022f4:	60ba      	str	r2, [r7, #8]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1ef      	bne.n	80022da <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1e5a      	subs	r2, r3, #1
 80022fe:	60fa      	str	r2, [r7, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1e5      	bne.n	80022d0 <SCB_EnableDCache+0x24>
 8002304:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002308:	4b07      	ldr	r3, [pc, #28]	; (8002328 <SCB_EnableDCache+0x7c>)
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	4a06      	ldr	r2, [pc, #24]	; (8002328 <SCB_EnableDCache+0x7c>)
 800230e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002312:	6153      	str	r3, [r2, #20]
 8002314:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002318:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	/*****************************************************************************************************/
	q15_t q15_input_vector[NUMBER_OF_FEATURES] = {0};
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
	uint8_t ft_counter = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	74fb      	strb	r3, [r7, #19]
	/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8002340:	f7ff ff94 	bl	800226c <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8002344:	f7ff ffb2 	bl	80022ac <SCB_EnableDCache>

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8002348:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800234c:	617b      	str	r3, [r7, #20]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800234e:	bf00      	nop
 8002350:	4b7e      	ldr	r3, [pc, #504]	; (800254c <main+0x220>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d004      	beq.n	8002366 <main+0x3a>
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	1e5a      	subs	r2, r3, #1
 8002360:	617a      	str	r2, [r7, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	dcf4      	bgt.n	8002350 <main+0x24>
	if ( timeout < 0 )
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b00      	cmp	r3, #0
 800236a:	da01      	bge.n	8002370 <main+0x44>
	{
		Error_Handler();
 800236c:	f000 fdf4 	bl	8002f58 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002370:	f000 ffae 	bl	80032d0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002374:	f000 fa82 	bl	800287c <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8002378:	4b74      	ldr	r3, [pc, #464]	; (800254c <main+0x220>)
 800237a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800237e:	4a73      	ldr	r2, [pc, #460]	; (800254c <main+0x220>)
 8002380:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002384:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002388:	4b70      	ldr	r3, [pc, #448]	; (800254c <main+0x220>)
 800238a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800238e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8002396:	2000      	movs	r0, #0
 8002398:	f001 fd78 	bl	8003e8c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 800239c:	2100      	movs	r1, #0
 800239e:	2000      	movs	r0, #0
 80023a0:	f001 fd8e 	bl	8003ec0 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80023a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023a8:	617b      	str	r3, [r7, #20]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80023aa:	bf00      	nop
 80023ac:	4b67      	ldr	r3, [pc, #412]	; (800254c <main+0x220>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d104      	bne.n	80023c2 <main+0x96>
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	1e5a      	subs	r2, r3, #1
 80023bc:	617a      	str	r2, [r7, #20]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	dcf4      	bgt.n	80023ac <main+0x80>
	if ( timeout < 0 )
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	da01      	bge.n	80023cc <main+0xa0>
	{
		Error_Handler();
 80023c8:	f000 fdc6 	bl	8002f58 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80023cc:	f7ff fea4 	bl	8002118 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80023d0:	f000 feb6 	bl	8003140 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 80023d4:	f000 fe46 	bl	8003064 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	/*****************************************************************************************************/
	// HRTimer enable
	__HAL_TIM_ENABLE(&htim2);
 80023d8:	4b5d      	ldr	r3, [pc, #372]	; (8002550 <main+0x224>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4b5c      	ldr	r3, [pc, #368]	; (8002550 <main+0x224>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
	__HAL_TIM_UIFREMAP_DISABLE(&htim2);
 80023e8:	4b59      	ldr	r3, [pc, #356]	; (8002550 <main+0x224>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4b58      	ldr	r3, [pc, #352]	; (8002550 <main+0x224>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023f6:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim2);
 80023f8:	4855      	ldr	r0, [pc, #340]	; (8002550 <main+0x224>)
 80023fa:	f004 f8bb 	bl	8006574 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80023fe:	4b54      	ldr	r3, [pc, #336]	; (8002550 <main+0x224>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2200      	movs	r2, #0
 8002404:	625a      	str	r2, [r3, #36]	; 0x24

	// Put UART peripheral in reception process
	if(HAL_UART_Receive_IT(&huart3, &rxWandB.bytes[0], (WEIGHTS + BIASES) * 2) != HAL_OK)
 8002406:	f241 025a 	movw	r2, #4186	; 0x105a
 800240a:	4952      	ldr	r1, [pc, #328]	; (8002554 <main+0x228>)
 800240c:	4852      	ldr	r0, [pc, #328]	; (8002558 <main+0x22c>)
 800240e:	f004 fc43 	bl	8006c98 <HAL_UART_Receive_IT>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00a      	beq.n	800242e <main+0x102>
	{
		Error_Handler();
 8002418:	f000 fd9e 	bl	8002f58 <Error_Handler>
	}
	// Wait for message
	while (UartReady != SET)
 800241c:	e007      	b.n	800242e <main+0x102>
	{
		HAL_Delay(500);
 800241e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002422:	f000 ffe7 	bl	80033f4 <HAL_Delay>
		blink_green();
 8002426:	f000 fb23 	bl	8002a70 <blink_green>
		blink_green();
 800242a:	f000 fb21 	bl	8002a70 <blink_green>
	while (UartReady != SET)
 800242e:	4b4b      	ldr	r3, [pc, #300]	; (800255c <main+0x230>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d1f2      	bne.n	800241e <main+0xf2>
	}
	UartReady = RESET;
 8002438:	4b48      	ldr	r3, [pc, #288]	; (800255c <main+0x230>)
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 800243e:	2201      	movs	r2, #1
 8002440:	2101      	movs	r1, #1
 8002442:	4847      	ldr	r0, [pc, #284]	; (8002560 <main+0x234>)
 8002444:	f001 fd08 	bl	8003e58 <HAL_GPIO_WritePin>
	if(rxWandB.bytes[(WEIGHTS + BIASES) * 2 - 1] != 0){ // Means: received everything
 8002448:	4a42      	ldr	r2, [pc, #264]	; (8002554 <main+0x228>)
 800244a:	f241 0359 	movw	r3, #4185	; 0x1059
 800244e:	4413      	add	r3, r2
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d005      	beq.n	8002462 <main+0x136>
		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8002456:	2201      	movs	r2, #1
 8002458:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800245c:	4840      	ldr	r0, [pc, #256]	; (8002560 <main+0x234>)
 800245e:	f001 fcfb 	bl	8003e58 <HAL_GPIO_WritePin>
	}
	// Echo
	transmit_echo_wandb(&rxWandB.bytes[0], (WEIGHTS + BIASES) * 2);
 8002462:	f241 015a 	movw	r1, #4186	; 0x105a
 8002466:	483b      	ldr	r0, [pc, #236]	; (8002554 <main+0x228>)
 8002468:	f000 fbd0 	bl	8002c0c <transmit_echo_wandb>

	// Copying weights
	arm_copy_q15(&rxWandB.number[0], &aq15_layer_1_weights[0], L1_IN_DIM*L1_OUT_DIM);
 800246c:	2224      	movs	r2, #36	; 0x24
 800246e:	493d      	ldr	r1, [pc, #244]	; (8002564 <main+0x238>)
 8002470:	4838      	ldr	r0, [pc, #224]	; (8002554 <main+0x228>)
 8002472:	f006 fa05 	bl	8008880 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[L1_IN_DIM*L1_OUT_DIM], &aq15_layer_2_weights[0], L2_IN_DIM*L2_OUT_DIM);
 8002476:	229c      	movs	r2, #156	; 0x9c
 8002478:	493b      	ldr	r1, [pc, #236]	; (8002568 <main+0x23c>)
 800247a:	483c      	ldr	r0, [pc, #240]	; (800256c <main+0x240>)
 800247c:	f006 fa00 	bl	8008880 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[L1_IN_DIM*L1_OUT_DIM + L2_IN_DIM*L2_OUT_DIM], &aq15_layer_3_weights[0], L3_IN_DIM*L3_OUT_DIM);
 8002480:	f240 22f2 	movw	r2, #754	; 0x2f2
 8002484:	493a      	ldr	r1, [pc, #232]	; (8002570 <main+0x244>)
 8002486:	483b      	ldr	r0, [pc, #236]	; (8002574 <main+0x248>)
 8002488:	f006 f9fa 	bl	8008880 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[L1_IN_DIM*L1_OUT_DIM + L2_IN_DIM*L2_OUT_DIM + L3_IN_DIM*L3_OUT_DIM], &aq15_layer_4_weights[0], L4_IN_DIM*L4_OUT_DIM);
 800248c:	f240 3266 	movw	r2, #870	; 0x366
 8002490:	4939      	ldr	r1, [pc, #228]	; (8002578 <main+0x24c>)
 8002492:	483a      	ldr	r0, [pc, #232]	; (800257c <main+0x250>)
 8002494:	f006 f9f4 	bl	8008880 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[L1_IN_DIM*L1_OUT_DIM + L2_IN_DIM*L2_OUT_DIM + L3_IN_DIM*L3_OUT_DIM + L4_IN_DIM*L4_OUT_DIM], &aq15_layer_5_weights[0], L5_IN_DIM*L5_OUT_DIM);
 8002498:	22b4      	movs	r2, #180	; 0xb4
 800249a:	4939      	ldr	r1, [pc, #228]	; (8002580 <main+0x254>)
 800249c:	4839      	ldr	r0, [pc, #228]	; (8002584 <main+0x258>)
 800249e:	f006 f9ef 	bl	8008880 <arm_copy_q15>

	// Copying biases
	arm_copy_q15(&rxWandB.number[WEIGHTS], &aq15_layer_1_biases[0], L1_OUT_DIM);
 80024a2:	2206      	movs	r2, #6
 80024a4:	4938      	ldr	r1, [pc, #224]	; (8002588 <main+0x25c>)
 80024a6:	4839      	ldr	r0, [pc, #228]	; (800258c <main+0x260>)
 80024a8:	f006 f9ea 	bl	8008880 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[WEIGHTS + L1_OUT_DIM], &aq15_layer_2_biases[0], L2_OUT_DIM);
 80024ac:	221a      	movs	r2, #26
 80024ae:	4938      	ldr	r1, [pc, #224]	; (8002590 <main+0x264>)
 80024b0:	4838      	ldr	r0, [pc, #224]	; (8002594 <main+0x268>)
 80024b2:	f006 f9e5 	bl	8008880 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[WEIGHTS + L1_OUT_DIM + L2_OUT_DIM], &aq15_layer_3_biases[0], L3_OUT_DIM);
 80024b6:	221d      	movs	r2, #29
 80024b8:	4937      	ldr	r1, [pc, #220]	; (8002598 <main+0x26c>)
 80024ba:	4838      	ldr	r0, [pc, #224]	; (800259c <main+0x270>)
 80024bc:	f006 f9e0 	bl	8008880 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[WEIGHTS + L1_OUT_DIM + L2_OUT_DIM + L3_OUT_DIM], &aq15_layer_4_biases[0], L4_OUT_DIM);
 80024c0:	221e      	movs	r2, #30
 80024c2:	4937      	ldr	r1, [pc, #220]	; (80025a0 <main+0x274>)
 80024c4:	4837      	ldr	r0, [pc, #220]	; (80025a4 <main+0x278>)
 80024c6:	f006 f9db 	bl	8008880 <arm_copy_q15>
	arm_copy_q15(&rxWandB.number[WEIGHTS + L1_OUT_DIM + L2_OUT_DIM + L3_OUT_DIM + L4_OUT_DIM], &aq15_layer_5_biases[0], L5_OUT_DIM);
 80024ca:	2206      	movs	r2, #6
 80024cc:	4936      	ldr	r1, [pc, #216]	; (80025a8 <main+0x27c>)
 80024ce:	4837      	ldr	r0, [pc, #220]	; (80025ac <main+0x280>)
 80024d0:	f006 f9d6 	bl	8008880 <arm_copy_q15>

	// Put UART peripheral in reception process
	if(HAL_UART_Receive_IT(&huart3, &rxScaler.bytes[0], NUMBER_OF_FEATURES * 2 * 4) != HAL_OK)
 80024d4:	2230      	movs	r2, #48	; 0x30
 80024d6:	4936      	ldr	r1, [pc, #216]	; (80025b0 <main+0x284>)
 80024d8:	481f      	ldr	r0, [pc, #124]	; (8002558 <main+0x22c>)
 80024da:	f004 fbdd 	bl	8006c98 <HAL_UART_Receive_IT>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00a      	beq.n	80024fa <main+0x1ce>
	{
		Error_Handler();
 80024e4:	f000 fd38 	bl	8002f58 <Error_Handler>
	}
	// Wait for message
	while (UartReady != SET)
 80024e8:	e007      	b.n	80024fa <main+0x1ce>
	{
		HAL_Delay(500);
 80024ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024ee:	f000 ff81 	bl	80033f4 <HAL_Delay>
		blink_green();
 80024f2:	f000 fabd 	bl	8002a70 <blink_green>
		blink_green();
 80024f6:	f000 fabb 	bl	8002a70 <blink_green>
	while (UartReady != SET)
 80024fa:	4b18      	ldr	r3, [pc, #96]	; (800255c <main+0x230>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d1f2      	bne.n	80024ea <main+0x1be>
	}
	UartReady = RESET;
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <main+0x230>)
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 800250a:	2201      	movs	r2, #1
 800250c:	2101      	movs	r1, #1
 800250e:	4814      	ldr	r0, [pc, #80]	; (8002560 <main+0x234>)
 8002510:	f001 fca2 	bl	8003e58 <HAL_GPIO_WritePin>
	if(rxScaler.bytes[NUMBER_OF_FEATURES * 2 * 4 - 1] != 0){ // Means: received everything
 8002514:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <main+0x284>)
 8002516:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <main+0x1fe>
		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800251e:	2201      	movs	r2, #1
 8002520:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002524:	480e      	ldr	r0, [pc, #56]	; (8002560 <main+0x234>)
 8002526:	f001 fc97 	bl	8003e58 <HAL_GPIO_WritePin>
	}
	// Echo
	transmit_echo_data(&rxScaler.bytes[0], NUMBER_OF_FEATURES * 2 * 4);
 800252a:	2130      	movs	r1, #48	; 0x30
 800252c:	4820      	ldr	r0, [pc, #128]	; (80025b0 <main+0x284>)
 800252e:	f000 fbbb 	bl	8002ca8 <transmit_echo_data>
	/* USER CODE BEGIN WHILE */
	/*****************************************************************************************************/
	while (1)
	{
		// Put UART peripheral in reception process
		if(HAL_UART_Receive_IT(&huart3, &rxBuffer.bytes[0], RX_DATA_SIZE*4) != HAL_OK)
 8002532:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002536:	491f      	ldr	r1, [pc, #124]	; (80025b4 <main+0x288>)
 8002538:	4807      	ldr	r0, [pc, #28]	; (8002558 <main+0x22c>)
 800253a:	f004 fbad 	bl	8006c98 <HAL_UART_Receive_IT>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d041      	beq.n	80025c8 <main+0x29c>
		{
			Error_Handler();
 8002544:	f000 fd08 	bl	8002f58 <Error_Handler>
		}
		// Wait for message
		while (UartReady != SET)
 8002548:	e03e      	b.n	80025c8 <main+0x29c>
 800254a:	bf00      	nop
 800254c:	58024400 	.word	0x58024400
 8002550:	240142c8 	.word	0x240142c8
 8002554:	240131c0 	.word	0x240131c0
 8002558:	24014314 	.word	0x24014314
 800255c:	240142b8 	.word	0x240142b8
 8002560:	58020400 	.word	0x58020400
 8002564:	24000164 	.word	0x24000164
 8002568:	240001b8 	.word	0x240001b8
 800256c:	24013208 	.word	0x24013208
 8002570:	24000324 	.word	0x24000324
 8002574:	24013340 	.word	0x24013340
 8002578:	24000944 	.word	0x24000944
 800257c:	24013924 	.word	0x24013924
 8002580:	2400104c 	.word	0x2400104c
 8002584:	24013ff0 	.word	0x24013ff0
 8002588:	240001ac 	.word	0x240001ac
 800258c:	24014158 	.word	0x24014158
 8002590:	240002f0 	.word	0x240002f0
 8002594:	24014164 	.word	0x24014164
 8002598:	24000908 	.word	0x24000908
 800259c:	24014198 	.word	0x24014198
 80025a0:	24001010 	.word	0x24001010
 80025a4:	240141d2 	.word	0x240141d2
 80025a8:	240011b4 	.word	0x240011b4
 80025ac:	2401420e 	.word	0x2401420e
 80025b0:	2401421c 	.word	0x2401421c
 80025b4:	2400f1c0 	.word	0x2400f1c0
		{
			HAL_Delay(500);
 80025b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025bc:	f000 ff1a 	bl	80033f4 <HAL_Delay>
			blink_green();
 80025c0:	f000 fa56 	bl	8002a70 <blink_green>
			blink_green();
 80025c4:	f000 fa54 	bl	8002a70 <blink_green>
		while (UartReady != SET)
 80025c8:	4b97      	ldr	r3, [pc, #604]	; (8002828 <main+0x4fc>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d1f2      	bne.n	80025b8 <main+0x28c>
		}
		UartReady = RESET;
 80025d2:	4b95      	ldr	r3, [pc, #596]	; (8002828 <main+0x4fc>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 80025d8:	2064      	movs	r0, #100	; 0x64
 80025da:	f000 ff0b 	bl	80033f4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 80025de:	2201      	movs	r2, #1
 80025e0:	2101      	movs	r1, #1
 80025e2:	4892      	ldr	r0, [pc, #584]	; (800282c <main+0x500>)
 80025e4:	f001 fc38 	bl	8003e58 <HAL_GPIO_WritePin>
		if(rxBuffer.bytes[8191] != 0){ // Means: received everything
 80025e8:	4a91      	ldr	r2, [pc, #580]	; (8002830 <main+0x504>)
 80025ea:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80025ee:	4413      	add	r3, r2
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d004      	beq.n	8002600 <main+0x2d4>
			HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 80025f6:	2201      	movs	r2, #1
 80025f8:	2102      	movs	r1, #2
 80025fa:	488e      	ldr	r0, [pc, #568]	; (8002834 <main+0x508>)
 80025fc:	f001 fc2c 	bl	8003e58 <HAL_GPIO_WritePin>
		// Echo
		transmit_echo_data(&rxBuffer.bytes[0], RX_DATA_SIZE*4);
		*/

		// Instantaneous absolute value
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8002600:	4b8d      	ldr	r3, [pc, #564]	; (8002838 <main+0x50c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2200      	movs	r2, #0
 8002606:	625a      	str	r2, [r3, #36]	; 0x24
		complex_inst_absolute(&rxBuffer.number[0], &instAbs.number[0]);
 8002608:	498c      	ldr	r1, [pc, #560]	; (800283c <main+0x510>)
 800260a:	4889      	ldr	r0, [pc, #548]	; (8002830 <main+0x504>)
 800260c:	f7fe fc8c 	bl	8000f28 <complex_inst_absolute>
		counter_array.number[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8002610:	4b89      	ldr	r3, [pc, #548]	; (8002838 <main+0x50c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	4a8a      	ldr	r2, [pc, #552]	; (8002840 <main+0x514>)
 8002618:	6013      	str	r3, [r2, #0]
		// Instantaneous phase value
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800261a:	4b87      	ldr	r3, [pc, #540]	; (8002838 <main+0x50c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2200      	movs	r2, #0
 8002620:	625a      	str	r2, [r3, #36]	; 0x24
		inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 8002622:	4988      	ldr	r1, [pc, #544]	; (8002844 <main+0x518>)
 8002624:	4882      	ldr	r0, [pc, #520]	; (8002830 <main+0x504>)
 8002626:	f7fe fc91 	bl	8000f4c <inst_phase>
		counter_array.number[1] = __HAL_TIM_GET_COUNTER(&htim2);
 800262a:	4b83      	ldr	r3, [pc, #524]	; (8002838 <main+0x50c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	4a83      	ldr	r2, [pc, #524]	; (8002840 <main+0x514>)
 8002632:	6053      	str	r3, [r2, #4]
		// Instantaneous unwrapped phase value
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8002634:	4b80      	ldr	r3, [pc, #512]	; (8002838 <main+0x50c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2200      	movs	r2, #0
 800263a:	625a      	str	r2, [r3, #36]	; 0x24
		inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 800263c:	4981      	ldr	r1, [pc, #516]	; (8002844 <main+0x518>)
 800263e:	487c      	ldr	r0, [pc, #496]	; (8002830 <main+0x504>)
 8002640:	f7fe fc84 	bl	8000f4c <inst_phase>
		unwrap(&instPhase.number[0], &instUnwrappedPhase.number[0]);
 8002644:	4980      	ldr	r1, [pc, #512]	; (8002848 <main+0x51c>)
 8002646:	487f      	ldr	r0, [pc, #508]	; (8002844 <main+0x518>)
 8002648:	f7fe fcba 	bl	8000fc0 <unwrap>
		counter_array.number[2] = __HAL_TIM_GET_COUNTER(&htim2);
 800264c:	4b7a      	ldr	r3, [pc, #488]	; (8002838 <main+0x50c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	4a7b      	ldr	r2, [pc, #492]	; (8002840 <main+0x514>)
 8002654:	6093      	str	r3, [r2, #8]
		// Instantaneous frequency value
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8002656:	4b78      	ldr	r3, [pc, #480]	; (8002838 <main+0x50c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2200      	movs	r2, #0
 800265c:	625a      	str	r2, [r3, #36]	; 0x24
		inst_frequency(&rxBuffer.number[0], &instFreq.number[0]);
 800265e:	497b      	ldr	r1, [pc, #492]	; (800284c <main+0x520>)
 8002660:	4873      	ldr	r0, [pc, #460]	; (8002830 <main+0x504>)
 8002662:	f7fe fdd1 	bl	8001208 <inst_frequency>
		counter_array.number[3] = __HAL_TIM_GET_COUNTER(&htim2);
 8002666:	4b74      	ldr	r3, [pc, #464]	; (8002838 <main+0x50c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	4a74      	ldr	r2, [pc, #464]	; (8002840 <main+0x514>)
 800266e:	60d3      	str	r3, [r2, #12]
		// Instantaneous centered normalized absolute value
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8002670:	4b71      	ldr	r3, [pc, #452]	; (8002838 <main+0x50c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2200      	movs	r2, #0
 8002676:	625a      	str	r2, [r3, #36]	; 0x24
		inst_centralized_normalized_absolute(&rxBuffer.number[0], &instCNAbs.number[0]);
 8002678:	4975      	ldr	r1, [pc, #468]	; (8002850 <main+0x524>)
 800267a:	486d      	ldr	r0, [pc, #436]	; (8002830 <main+0x504>)
 800267c:	f7fe fe7a 	bl	8001374 <inst_centralized_normalized_absolute>
		counter_array.number[4] = __HAL_TIM_GET_COUNTER(&htim2);
 8002680:	4b6d      	ldr	r3, [pc, #436]	; (8002838 <main+0x50c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	4a6e      	ldr	r2, [pc, #440]	; (8002840 <main+0x514>)
 8002688:	6113      	str	r3, [r2, #16]
		transmit_array(&instCNAbs.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[16]);
		*/


		/*****************************************************************************************************/
		ft_counter = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	74fb      	strb	r3, [r7, #19]
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
		ft_counter++;
		*/

		// 2 - Std of the Absolute Instantaneous Phase
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800268e:	4b6a      	ldr	r3, [pc, #424]	; (8002838 <main+0x50c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2200      	movs	r2, #0
 8002694:	625a      	str	r2, [r3, #36]	; 0x24
		inst_absolute(&instPhase.number[0], &instAbsPhase.number[0]);
 8002696:	496f      	ldr	r1, [pc, #444]	; (8002854 <main+0x528>)
 8002698:	486a      	ldr	r0, [pc, #424]	; (8002844 <main+0x518>)
 800269a:	f7fe fc33 	bl	8000f04 <inst_absolute>
		std_dev(&instAbsPhase.number[0], &ft_array.number[ft_counter]);
 800269e:	7cfb      	ldrb	r3, [r7, #19]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4a6d      	ldr	r2, [pc, #436]	; (8002858 <main+0x52c>)
 80026a4:	4413      	add	r3, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	486a      	ldr	r0, [pc, #424]	; (8002854 <main+0x528>)
 80026aa:	f7fe fedb 	bl	8001464 <std_dev>
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
 80026ae:	4b62      	ldr	r3, [pc, #392]	; (8002838 <main+0x50c>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	7cfb      	ldrb	r3, [r7, #19]
 80026b4:	3305      	adds	r3, #5
 80026b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026b8:	4961      	ldr	r1, [pc, #388]	; (8002840 <main+0x514>)
 80026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ft_counter++;
 80026be:	7cfb      	ldrb	r3, [r7, #19]
 80026c0:	3301      	adds	r3, #1
 80026c2:	74fb      	strb	r3, [r7, #19]
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
		ft_counter++;
		*/

		// 4 - Std of the CN Instantaneous Amplitude
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80026c4:	4b5c      	ldr	r3, [pc, #368]	; (8002838 <main+0x50c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2200      	movs	r2, #0
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24
		inst_absolute(&instCNAbs.number[0], &instAbsCNAbs.number[0]);
 80026cc:	4963      	ldr	r1, [pc, #396]	; (800285c <main+0x530>)
 80026ce:	4860      	ldr	r0, [pc, #384]	; (8002850 <main+0x524>)
 80026d0:	f7fe fc18 	bl	8000f04 <inst_absolute>
		std_dev(&instAbsCNAbs.number[0], &ft_array.number[ft_counter]);
 80026d4:	7cfb      	ldrb	r3, [r7, #19]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4a5f      	ldr	r2, [pc, #380]	; (8002858 <main+0x52c>)
 80026da:	4413      	add	r3, r2
 80026dc:	4619      	mov	r1, r3
 80026de:	485f      	ldr	r0, [pc, #380]	; (800285c <main+0x530>)
 80026e0:	f7fe fec0 	bl	8001464 <std_dev>
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
 80026e4:	4b54      	ldr	r3, [pc, #336]	; (8002838 <main+0x50c>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	3305      	adds	r3, #5
 80026ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ee:	4954      	ldr	r1, [pc, #336]	; (8002840 <main+0x514>)
 80026f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ft_counter++;
 80026f4:	7cfb      	ldrb	r3, [r7, #19]
 80026f6:	3301      	adds	r3, #1
 80026f8:	74fb      	strb	r3, [r7, #19]
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
		ft_counter++;
		*/

		// 6 - Mean Value of the Signal Magnitude
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80026fa:	4b4f      	ldr	r3, [pc, #316]	; (8002838 <main+0x50c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2200      	movs	r2, #0
 8002700:	625a      	str	r2, [r3, #36]	; 0x24
		mean_of_signal_magnitude(&instAbs.number[0], &ft_array.number[ft_counter]);
 8002702:	7cfb      	ldrb	r3, [r7, #19]
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4a54      	ldr	r2, [pc, #336]	; (8002858 <main+0x52c>)
 8002708:	4413      	add	r3, r2
 800270a:	4619      	mov	r1, r3
 800270c:	484b      	ldr	r0, [pc, #300]	; (800283c <main+0x510>)
 800270e:	f7fe febb 	bl	8001488 <mean_of_signal_magnitude>
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
 8002712:	4b49      	ldr	r3, [pc, #292]	; (8002838 <main+0x50c>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	7cfb      	ldrb	r3, [r7, #19]
 8002718:	3305      	adds	r3, #5
 800271a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800271c:	4948      	ldr	r1, [pc, #288]	; (8002840 <main+0x514>)
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ft_counter++;
 8002722:	7cfb      	ldrb	r3, [r7, #19]
 8002724:	3301      	adds	r3, #1
 8002726:	74fb      	strb	r3, [r7, #19]
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
		ft_counter++;
		*/

		// 8 - Kurtosis of the CN Amplitude
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8002728:	4b43      	ldr	r3, [pc, #268]	; (8002838 <main+0x50c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2200      	movs	r2, #0
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
		kurtosis(&instCNAbs.number[0], &ft_array.number[ft_counter], frameSize);
 8002730:	7cfb      	ldrb	r3, [r7, #19]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4a48      	ldr	r2, [pc, #288]	; (8002858 <main+0x52c>)
 8002736:	4413      	add	r3, r2
 8002738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800273c:	4619      	mov	r1, r3
 800273e:	4844      	ldr	r0, [pc, #272]	; (8002850 <main+0x524>)
 8002740:	f7fe feb4 	bl	80014ac <kurtosis>
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
 8002744:	4b3c      	ldr	r3, [pc, #240]	; (8002838 <main+0x50c>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	3305      	adds	r3, #5
 800274c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800274e:	493c      	ldr	r1, [pc, #240]	; (8002840 <main+0x514>)
 8002750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ft_counter++;
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	3301      	adds	r3, #1
 8002758:	74fb      	strb	r3, [r7, #19]
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
		ft_counter++;
		*/

		// 12 - Cumulant 40
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800275a:	4b37      	ldr	r3, [pc, #220]	; (8002838 <main+0x50c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2200      	movs	r2, #0
 8002760:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_40(&rxBuffer.number[0], &ft_array.number[ft_counter]);
 8002762:	7cfb      	ldrb	r3, [r7, #19]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4a3c      	ldr	r2, [pc, #240]	; (8002858 <main+0x52c>)
 8002768:	4413      	add	r3, r2
 800276a:	4619      	mov	r1, r3
 800276c:	4830      	ldr	r0, [pc, #192]	; (8002830 <main+0x504>)
 800276e:	f7ff fbf5 	bl	8001f5c <cumulant_40>
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
 8002772:	4b31      	ldr	r3, [pc, #196]	; (8002838 <main+0x50c>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	7cfb      	ldrb	r3, [r7, #19]
 8002778:	3305      	adds	r3, #5
 800277a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800277c:	4930      	ldr	r1, [pc, #192]	; (8002840 <main+0x514>)
 800277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ft_counter++;
 8002782:	7cfb      	ldrb	r3, [r7, #19]
 8002784:	3301      	adds	r3, #1
 8002786:	74fb      	strb	r3, [r7, #19]
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
		ft_counter++;
		*/

		// 14 - Cumulant 42
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8002788:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <main+0x50c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2200      	movs	r2, #0
 800278e:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_42(&rxBuffer.number[0], &ft_array.number[ft_counter]);
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4a30      	ldr	r2, [pc, #192]	; (8002858 <main+0x52c>)
 8002796:	4413      	add	r3, r2
 8002798:	4619      	mov	r1, r3
 800279a:	4825      	ldr	r0, [pc, #148]	; (8002830 <main+0x504>)
 800279c:	f7ff fc44 	bl	8002028 <cumulant_42>
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
 80027a0:	4b25      	ldr	r3, [pc, #148]	; (8002838 <main+0x50c>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	3305      	adds	r3, #5
 80027a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027aa:	4925      	ldr	r1, [pc, #148]	; (8002840 <main+0x514>)
 80027ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ft_counter++;
 80027b0:	7cfb      	ldrb	r3, [r7, #19]
 80027b2:	3301      	adds	r3, #1
 80027b4:	74fb      	strb	r3, [r7, #19]
		cumulant_63(&rxBuffer.number[0], &ft_array.number[ft_counter]);
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
		ft_counter++;
		*/

		transmit_features(&ft_array.bytes[0], &counter_array.bytes[4 * 5]);
 80027b6:	492a      	ldr	r1, [pc, #168]	; (8002860 <main+0x534>)
 80027b8:	4827      	ldr	r0, [pc, #156]	; (8002858 <main+0x52c>)
 80027ba:	f000 f9cb 	bl	8002b54 <transmit_features>

		// Scale features (mean and var)
		preprocess_features(&ft_array.number[0], &scaled_ft_array.number[0]);
 80027be:	4929      	ldr	r1, [pc, #164]	; (8002864 <main+0x538>)
 80027c0:	4825      	ldr	r0, [pc, #148]	; (8002858 <main+0x52c>)
 80027c2:	f000 fabf 	bl	8002d44 <preprocess_features>
		// Q4.11
		//min_range.number = -8.0f;
		//max_range.number = 7.9995117f;

		// Q3.12
		min_range.number = -4.0f;
 80027c6:	4b28      	ldr	r3, [pc, #160]	; (8002868 <main+0x53c>)
 80027c8:	4a28      	ldr	r2, [pc, #160]	; (800286c <main+0x540>)
 80027ca:	601a      	str	r2, [r3, #0]
		max_range.number = 3.9997559f;
 80027cc:	4b28      	ldr	r3, [pc, #160]	; (8002870 <main+0x544>)
 80027ce:	4a29      	ldr	r2, [pc, #164]	; (8002874 <main+0x548>)
 80027d0:	601a      	str	r2, [r3, #0]
		// Q2.13
		//min_range.number = -2.0f;
		//max_range.number = 1.9998779f;

		// Evaluate neural network
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80027d2:	4b19      	ldr	r3, [pc, #100]	; (8002838 <main+0x50c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2200      	movs	r2, #0
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24
		quantize_features(&scaled_ft_array.number[0], min_range.number, max_range.number, &q15_input_vector[0]);
 80027da:	4b23      	ldr	r3, [pc, #140]	; (8002868 <main+0x53c>)
 80027dc:	edd3 7a00 	vldr	s15, [r3]
 80027e0:	4b23      	ldr	r3, [pc, #140]	; (8002870 <main+0x544>)
 80027e2:	ed93 7a00 	vldr	s14, [r3]
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	4619      	mov	r1, r3
 80027ea:	eef0 0a47 	vmov.f32	s1, s14
 80027ee:	eeb0 0a67 	vmov.f32	s0, s15
 80027f2:	481c      	ldr	r0, [pc, #112]	; (8002864 <main+0x538>)
 80027f4:	f000 fada 	bl	8002dac <quantize_features>
		fully_connected_run(&q15_input_vector[0], &predicted.number);
 80027f8:	1d3b      	adds	r3, r7, #4
 80027fa:	491f      	ldr	r1, [pc, #124]	; (8002878 <main+0x54c>)
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fe fad1 	bl	8000da4 <fully_connected_run>
		counter_array.number[ft_counter + 5] = __HAL_TIM_GET_COUNTER(&htim2);
 8002802:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <main+0x50c>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	7cfb      	ldrb	r3, [r7, #19]
 8002808:	3305      	adds	r3, #5
 800280a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800280c:	490c      	ldr	r1, [pc, #48]	; (8002840 <main+0x514>)
 800280e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		transmit_prediction(&predicted.bytes[0], &counter_array.bytes[4*(ft_counter + 5)]);
 8002812:	7cfb      	ldrb	r3, [r7, #19]
 8002814:	3305      	adds	r3, #5
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4a09      	ldr	r2, [pc, #36]	; (8002840 <main+0x514>)
 800281a:	4413      	add	r3, r2
 800281c:	4619      	mov	r1, r3
 800281e:	4816      	ldr	r0, [pc, #88]	; (8002878 <main+0x54c>)
 8002820:	f000 f93c 	bl	8002a9c <transmit_prediction>
		if(HAL_UART_Receive_IT(&huart3, &rxBuffer.bytes[0], RX_DATA_SIZE*4) != HAL_OK)
 8002824:	e685      	b.n	8002532 <main+0x206>
 8002826:	bf00      	nop
 8002828:	240142b8 	.word	0x240142b8
 800282c:	58020400 	.word	0x58020400
 8002830:	2400f1c0 	.word	0x2400f1c0
 8002834:	58021000 	.word	0x58021000
 8002838:	240142c8 	.word	0x240142c8
 800283c:	240011c0 	.word	0x240011c0
 8002840:	2401424c 	.word	0x2401424c
 8002844:	240031c0 	.word	0x240031c0
 8002848:	240071c0 	.word	0x240071c0
 800284c:	240091c0 	.word	0x240091c0
 8002850:	2400b1c0 	.word	0x2400b1c0
 8002854:	240051c0 	.word	0x240051c0
 8002858:	2401427c 	.word	0x2401427c
 800285c:	2400d1c0 	.word	0x2400d1c0
 8002860:	24014260 	.word	0x24014260
 8002864:	24014294 	.word	0x24014294
 8002868:	240142b0 	.word	0x240142b0
 800286c:	c0800000 	.word	0xc0800000
 8002870:	240142b4 	.word	0x240142b4
 8002874:	407ffc00 	.word	0x407ffc00
 8002878:	240142ac 	.word	0x240142ac

0800287c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b0cc      	sub	sp, #304	; 0x130
 8002880:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002882:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002886:	224c      	movs	r2, #76	; 0x4c
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f006 fc90 	bl	80091b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002890:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002894:	2220      	movs	r2, #32
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f006 fc89 	bl	80091b0 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800289e:	f107 0308 	add.w	r3, r7, #8
 80028a2:	4618      	mov	r0, r3
 80028a4:	23bc      	movs	r3, #188	; 0xbc
 80028a6:	461a      	mov	r2, r3
 80028a8:	2100      	movs	r1, #0
 80028aa:	f006 fc81 	bl	80091b0 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80028ae:	2004      	movs	r0, #4
 80028b0:	f001 fb1a 	bl	8003ee8 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028b4:	1d3b      	adds	r3, r7, #4
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	4b47      	ldr	r3, [pc, #284]	; (80029d8 <SystemClock_Config+0x15c>)
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	4a46      	ldr	r2, [pc, #280]	; (80029d8 <SystemClock_Config+0x15c>)
 80028c0:	f023 0301 	bic.w	r3, r3, #1
 80028c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80028c6:	4b44      	ldr	r3, [pc, #272]	; (80029d8 <SystemClock_Config+0x15c>)
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	f003 0201 	and.w	r2, r3, #1
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	4b42      	ldr	r3, [pc, #264]	; (80029dc <SystemClock_Config+0x160>)
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	4a41      	ldr	r2, [pc, #260]	; (80029dc <SystemClock_Config+0x160>)
 80028d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028dc:	6193      	str	r3, [r2, #24]
 80028de:	4b3f      	ldr	r3, [pc, #252]	; (80029dc <SystemClock_Config+0x160>)
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80028e6:	1d3b      	adds	r3, r7, #4
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	681b      	ldr	r3, [r3, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80028ee:	bf00      	nop
 80028f0:	4b3a      	ldr	r3, [pc, #232]	; (80029dc <SystemClock_Config+0x160>)
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028fc:	d1f8      	bne.n	80028f0 <SystemClock_Config+0x74>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028fe:	2302      	movs	r3, #2
 8002900:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002904:	2301      	movs	r3, #1
 8002906:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800290a:	2340      	movs	r3, #64	; 0x40
 800290c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002910:	2302      	movs	r3, #2
 8002912:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002916:	2300      	movs	r3, #0
 8002918:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800291c:	2304      	movs	r3, #4
 800291e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	RCC_OscInitStruct.PLL.PLLN = 50;
 8002922:	2332      	movs	r3, #50	; 0x32
 8002924:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	RCC_OscInitStruct.PLL.PLLP = 2;
 8002928:	2302      	movs	r3, #2
 800292a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800292e:	2302      	movs	r3, #2
 8002930:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002934:	2302      	movs	r3, #2
 8002936:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800293a:	230c      	movs	r3, #12
 800293c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002940:	2300      	movs	r3, #0
 8002942:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002946:	2300      	movs	r3, #0
 8002948:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800294c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002950:	4618      	mov	r0, r3
 8002952:	f001 fb23 	bl	8003f9c <HAL_RCC_OscConfig>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <SystemClock_Config+0xe4>
	{
		Error_Handler();
 800295c:	f000 fafc 	bl	8002f58 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002960:	233f      	movs	r3, #63	; 0x3f
 8002962:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002966:	2303      	movs	r3, #3
 8002968:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800296c:	2300      	movs	r3, #0
 800296e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002972:	2308      	movs	r3, #8
 8002974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002978:	2340      	movs	r3, #64	; 0x40
 800297a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800297e:	2340      	movs	r3, #64	; 0x40
 8002980:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002988:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800298c:	2340      	movs	r3, #64	; 0x40
 800298e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002992:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002996:	2102      	movs	r1, #2
 8002998:	4618      	mov	r0, r3
 800299a:	f001 ff0f 	bl	80047bc <HAL_RCC_ClockConfig>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <SystemClock_Config+0x12c>
	{
		Error_Handler();
 80029a4:	f000 fad8 	bl	8002f58 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80029a8:	f107 0308 	add.w	r3, r7, #8
 80029ac:	2202      	movs	r2, #2
 80029ae:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 80029b0:	f107 0308 	add.w	r3, r7, #8
 80029b4:	2203      	movs	r2, #3
 80029b6:	675a      	str	r2, [r3, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029b8:	f107 0308 	add.w	r3, r7, #8
 80029bc:	4618      	mov	r0, r3
 80029be:	f002 fa81 	bl	8004ec4 <HAL_RCCEx_PeriphCLKConfig>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <SystemClock_Config+0x150>
	{
		Error_Handler();
 80029c8:	f000 fac6 	bl	8002f58 <Error_Handler>
	}
}
 80029cc:	bf00      	nop
 80029ce:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	58000400 	.word	0x58000400
 80029dc:	58024800 	.word	0x58024800

080029e0 <clear_leds>:

/* USER CODE BEGIN 4 */
void clear_leds(){
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 80029e4:	2200      	movs	r2, #0
 80029e6:	2101      	movs	r1, #1
 80029e8:	4807      	ldr	r0, [pc, #28]	; (8002a08 <clear_leds+0x28>)
 80029ea:	f001 fa35 	bl	8003e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 80029ee:	2200      	movs	r2, #0
 80029f0:	2102      	movs	r1, #2
 80029f2:	4806      	ldr	r0, [pc, #24]	; (8002a0c <clear_leds+0x2c>)
 80029f4:	f001 fa30 	bl	8003e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80029f8:	2200      	movs	r2, #0
 80029fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029fe:	4802      	ldr	r0, [pc, #8]	; (8002a08 <clear_leds+0x28>)
 8002a00:	f001 fa2a 	bl	8003e58 <HAL_GPIO_WritePin>
}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	58020400 	.word	0x58020400
 8002a0c:	58021000 	.word	0x58021000

08002a10 <blink_red_fast>:
void light_leds(){
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
}
void blink_red_fast(){
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8002a14:	2200      	movs	r2, #0
 8002a16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a1a:	4808      	ldr	r0, [pc, #32]	; (8002a3c <blink_red_fast+0x2c>)
 8002a1c:	f001 fa1c 	bl	8003e58 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002a20:	2032      	movs	r0, #50	; 0x32
 8002a22:	f000 fce7 	bl	80033f4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8002a26:	2201      	movs	r2, #1
 8002a28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a2c:	4803      	ldr	r0, [pc, #12]	; (8002a3c <blink_red_fast+0x2c>)
 8002a2e:	f001 fa13 	bl	8003e58 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002a32:	2032      	movs	r0, #50	; 0x32
 8002a34:	f000 fcde 	bl	80033f4 <HAL_Delay>
}
 8002a38:	bf00      	nop
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	58020400 	.word	0x58020400

08002a40 <blink_orange_slow>:
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_orange_slow(){
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8002a44:	2200      	movs	r2, #0
 8002a46:	2102      	movs	r1, #2
 8002a48:	4808      	ldr	r0, [pc, #32]	; (8002a6c <blink_orange_slow+0x2c>)
 8002a4a:	f001 fa05 	bl	8003e58 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002a4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a52:	f000 fccf 	bl	80033f4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 8002a56:	2201      	movs	r2, #1
 8002a58:	2102      	movs	r1, #2
 8002a5a:	4804      	ldr	r0, [pc, #16]	; (8002a6c <blink_orange_slow+0x2c>)
 8002a5c:	f001 f9fc 	bl	8003e58 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002a60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a64:	f000 fcc6 	bl	80033f4 <HAL_Delay>
}
 8002a68:	bf00      	nop
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	58021000 	.word	0x58021000

08002a70 <blink_green>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_green(){
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8002a74:	2200      	movs	r2, #0
 8002a76:	2101      	movs	r1, #1
 8002a78:	4807      	ldr	r0, [pc, #28]	; (8002a98 <blink_green+0x28>)
 8002a7a:	f001 f9ed 	bl	8003e58 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8002a7e:	20c8      	movs	r0, #200	; 0xc8
 8002a80:	f000 fcb8 	bl	80033f4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8002a84:	2201      	movs	r2, #1
 8002a86:	2101      	movs	r1, #1
 8002a88:	4803      	ldr	r0, [pc, #12]	; (8002a98 <blink_green+0x28>)
 8002a8a:	f001 f9e5 	bl	8003e58 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8002a8e:	20c8      	movs	r0, #200	; 0xc8
 8002a90:	f000 fcb0 	bl	80033f4 <HAL_Delay>
}
 8002a94:	bf00      	nop
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	58020400 	.word	0x58020400

08002a9c <transmit_prediction>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(500);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(500);
}
void transmit_prediction(uint8_t *value, uint8_t *counter){
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8002aa6:	4827      	ldr	r0, [pc, #156]	; (8002b44 <transmit_prediction+0xa8>)
 8002aa8:	f005 f9aa 	bl	8007e00 <UART_CheckIdleState>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d13f      	bne.n	8002b32 <transmit_prediction+0x96>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	4924      	ldr	r1, [pc, #144]	; (8002b48 <transmit_prediction+0xac>)
 8002ab6:	4823      	ldr	r0, [pc, #140]	; (8002b44 <transmit_prediction+0xa8>)
 8002ab8:	f004 f86a 	bl	8006b90 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002abc:	e001      	b.n	8002ac2 <transmit_prediction+0x26>
			blink_red_fast();
 8002abe:	f7ff ffa7 	bl	8002a10 <blink_red_fast>
		while(UartReady != SET){
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <transmit_prediction+0xb0>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d1f8      	bne.n	8002abe <transmit_prediction+0x22>
		}
		UartReady = RESET;
 8002acc:	4b1f      	ldr	r3, [pc, #124]	; (8002b4c <transmit_prediction+0xb0>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &value[0], 4);
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	481b      	ldr	r0, [pc, #108]	; (8002b44 <transmit_prediction+0xa8>)
 8002ad8:	f004 f85a 	bl	8006b90 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002adc:	e001      	b.n	8002ae2 <transmit_prediction+0x46>
			blink_red_fast();
 8002ade:	f7ff ff97 	bl	8002a10 <blink_red_fast>
		while(UartReady != SET){
 8002ae2:	4b1a      	ldr	r3, [pc, #104]	; (8002b4c <transmit_prediction+0xb0>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d1f8      	bne.n	8002ade <transmit_prediction+0x42>
		}
		UartReady = RESET;
 8002aec:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <transmit_prediction+0xb0>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &counter[0], 4);
 8002af2:	2204      	movs	r2, #4
 8002af4:	6839      	ldr	r1, [r7, #0]
 8002af6:	4813      	ldr	r0, [pc, #76]	; (8002b44 <transmit_prediction+0xa8>)
 8002af8:	f004 f84a 	bl	8006b90 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002afc:	e001      	b.n	8002b02 <transmit_prediction+0x66>
			blink_red_fast();
 8002afe:	f7ff ff87 	bl	8002a10 <blink_red_fast>
		while(UartReady != SET){
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <transmit_prediction+0xb0>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d1f8      	bne.n	8002afe <transmit_prediction+0x62>
		}
		UartReady = RESET;
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <transmit_prediction+0xb0>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8002b12:	2204      	movs	r2, #4
 8002b14:	490e      	ldr	r1, [pc, #56]	; (8002b50 <transmit_prediction+0xb4>)
 8002b16:	480b      	ldr	r0, [pc, #44]	; (8002b44 <transmit_prediction+0xa8>)
 8002b18:	f004 f83a 	bl	8006b90 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002b1c:	e001      	b.n	8002b22 <transmit_prediction+0x86>
			blink_red_fast();
 8002b1e:	f7ff ff77 	bl	8002a10 <blink_red_fast>
		while(UartReady != SET){
 8002b22:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <transmit_prediction+0xb0>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d1f8      	bne.n	8002b1e <transmit_prediction+0x82>
		}
		UartReady = RESET;
 8002b2c:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <transmit_prediction+0xb0>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
	}
	blink_orange_slow();
 8002b32:	f7ff ff85 	bl	8002a40 <blink_orange_slow>
	clear_leds();
 8002b36:	f7ff ff53 	bl	80029e0 <clear_leds>
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	24014314 	.word	0x24014314
 8002b48:	08009818 	.word	0x08009818
 8002b4c:	240142b8 	.word	0x240142b8
 8002b50:	0800981c 	.word	0x0800981c

08002b54 <transmit_features>:
void transmit_features(uint8_t *value, uint8_t *counter){
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8002b5e:	4827      	ldr	r0, [pc, #156]	; (8002bfc <transmit_features+0xa8>)
 8002b60:	f005 f94e 	bl	8007e00 <UART_CheckIdleState>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d13f      	bne.n	8002bea <transmit_features+0x96>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	4924      	ldr	r1, [pc, #144]	; (8002c00 <transmit_features+0xac>)
 8002b6e:	4823      	ldr	r0, [pc, #140]	; (8002bfc <transmit_features+0xa8>)
 8002b70:	f004 f80e 	bl	8006b90 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002b74:	e001      	b.n	8002b7a <transmit_features+0x26>
			blink_red_fast();
 8002b76:	f7ff ff4b 	bl	8002a10 <blink_red_fast>
		while(UartReady != SET){
 8002b7a:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <transmit_features+0xb0>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d1f8      	bne.n	8002b76 <transmit_features+0x22>
		}
		UartReady = RESET;
 8002b84:	4b1f      	ldr	r3, [pc, #124]	; (8002c04 <transmit_features+0xb0>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &value[0], 4 * NUMBER_OF_FEATURES);
 8002b8a:	2218      	movs	r2, #24
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	481b      	ldr	r0, [pc, #108]	; (8002bfc <transmit_features+0xa8>)
 8002b90:	f003 fffe 	bl	8006b90 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002b94:	e001      	b.n	8002b9a <transmit_features+0x46>
			blink_red_fast();
 8002b96:	f7ff ff3b 	bl	8002a10 <blink_red_fast>
		while(UartReady != SET){
 8002b9a:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <transmit_features+0xb0>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d1f8      	bne.n	8002b96 <transmit_features+0x42>
		}
		UartReady = RESET;
 8002ba4:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <transmit_features+0xb0>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &counter[0], 4 * NUMBER_OF_FEATURES);
 8002baa:	2218      	movs	r2, #24
 8002bac:	6839      	ldr	r1, [r7, #0]
 8002bae:	4813      	ldr	r0, [pc, #76]	; (8002bfc <transmit_features+0xa8>)
 8002bb0:	f003 ffee 	bl	8006b90 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002bb4:	e001      	b.n	8002bba <transmit_features+0x66>
			blink_red_fast();
 8002bb6:	f7ff ff2b 	bl	8002a10 <blink_red_fast>
		while(UartReady != SET){
 8002bba:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <transmit_features+0xb0>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d1f8      	bne.n	8002bb6 <transmit_features+0x62>
		}
		UartReady = RESET;
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <transmit_features+0xb0>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8002bca:	2204      	movs	r2, #4
 8002bcc:	490e      	ldr	r1, [pc, #56]	; (8002c08 <transmit_features+0xb4>)
 8002bce:	480b      	ldr	r0, [pc, #44]	; (8002bfc <transmit_features+0xa8>)
 8002bd0:	f003 ffde 	bl	8006b90 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002bd4:	e001      	b.n	8002bda <transmit_features+0x86>
			blink_red_fast();
 8002bd6:	f7ff ff1b 	bl	8002a10 <blink_red_fast>
		while(UartReady != SET){
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <transmit_features+0xb0>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d1f8      	bne.n	8002bd6 <transmit_features+0x82>
		}
		UartReady = RESET;
 8002be4:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <transmit_features+0xb0>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
	}
	blink_orange_slow();
 8002bea:	f7ff ff29 	bl	8002a40 <blink_orange_slow>
	clear_leds();
 8002bee:	f7ff fef7 	bl	80029e0 <clear_leds>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	24014314 	.word	0x24014314
 8002c00:	08009818 	.word	0x08009818
 8002c04:	240142b8 	.word	0x240142b8
 8002c08:	0800981c 	.word	0x0800981c

08002c0c <transmit_echo_wandb>:
		UartReady = RESET;
	}
	blink_orange_slow();
	clear_leds();
}
void transmit_echo_wandb(uint8_t *array, uint16_t size){
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8002c18:	481f      	ldr	r0, [pc, #124]	; (8002c98 <transmit_echo_wandb+0x8c>)
 8002c1a:	f005 f8f1 	bl	8007e00 <UART_CheckIdleState>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d130      	bne.n	8002c86 <transmit_echo_wandb+0x7a>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 2);
 8002c24:	2202      	movs	r2, #2
 8002c26:	491d      	ldr	r1, [pc, #116]	; (8002c9c <transmit_echo_wandb+0x90>)
 8002c28:	481b      	ldr	r0, [pc, #108]	; (8002c98 <transmit_echo_wandb+0x8c>)
 8002c2a:	f003 ffb1 	bl	8006b90 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002c2e:	e001      	b.n	8002c34 <transmit_echo_wandb+0x28>
			blink_red_fast();
 8002c30:	f7ff feee 	bl	8002a10 <blink_red_fast>
		while(UartReady != SET){
 8002c34:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <transmit_echo_wandb+0x94>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d1f8      	bne.n	8002c30 <transmit_echo_wandb+0x24>
		}
		UartReady = RESET;
 8002c3e:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <transmit_echo_wandb+0x94>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &array[0], size);
 8002c44:	887b      	ldrh	r3, [r7, #2]
 8002c46:	461a      	mov	r2, r3
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4813      	ldr	r0, [pc, #76]	; (8002c98 <transmit_echo_wandb+0x8c>)
 8002c4c:	f003 ffa0 	bl	8006b90 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002c50:	e001      	b.n	8002c56 <transmit_echo_wandb+0x4a>
			blink_red_fast();
 8002c52:	f7ff fedd 	bl	8002a10 <blink_red_fast>
		while(UartReady != SET){
 8002c56:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <transmit_echo_wandb+0x94>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d1f8      	bne.n	8002c52 <transmit_echo_wandb+0x46>
		}
		UartReady = RESET;
 8002c60:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <transmit_echo_wandb+0x94>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 2);
 8002c66:	2202      	movs	r2, #2
 8002c68:	490e      	ldr	r1, [pc, #56]	; (8002ca4 <transmit_echo_wandb+0x98>)
 8002c6a:	480b      	ldr	r0, [pc, #44]	; (8002c98 <transmit_echo_wandb+0x8c>)
 8002c6c:	f003 ff90 	bl	8006b90 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002c70:	e001      	b.n	8002c76 <transmit_echo_wandb+0x6a>
			blink_red_fast();
 8002c72:	f7ff fecd 	bl	8002a10 <blink_red_fast>
		while(UartReady != SET){
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <transmit_echo_wandb+0x94>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d1f8      	bne.n	8002c72 <transmit_echo_wandb+0x66>
		}
		UartReady = RESET;
 8002c80:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <transmit_echo_wandb+0x94>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
	}
	blink_orange_slow();
 8002c86:	f7ff fedb 	bl	8002a40 <blink_orange_slow>
	clear_leds();
 8002c8a:	f7ff fea9 	bl	80029e0 <clear_leds>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	24014314 	.word	0x24014314
 8002c9c:	08009818 	.word	0x08009818
 8002ca0:	240142b8 	.word	0x240142b8
 8002ca4:	0800981c 	.word	0x0800981c

08002ca8 <transmit_echo_data>:
void transmit_echo_data(uint8_t *array, uint16_t size){
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	807b      	strh	r3, [r7, #2]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8002cb4:	481f      	ldr	r0, [pc, #124]	; (8002d34 <transmit_echo_data+0x8c>)
 8002cb6:	f005 f8a3 	bl	8007e00 <UART_CheckIdleState>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d130      	bne.n	8002d22 <transmit_echo_data+0x7a>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	491d      	ldr	r1, [pc, #116]	; (8002d38 <transmit_echo_data+0x90>)
 8002cc4:	481b      	ldr	r0, [pc, #108]	; (8002d34 <transmit_echo_data+0x8c>)
 8002cc6:	f003 ff63 	bl	8006b90 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002cca:	e001      	b.n	8002cd0 <transmit_echo_data+0x28>
			blink_red_fast();
 8002ccc:	f7ff fea0 	bl	8002a10 <blink_red_fast>
		while(UartReady != SET){
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <transmit_echo_data+0x94>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d1f8      	bne.n	8002ccc <transmit_echo_data+0x24>
		}
		UartReady = RESET;
 8002cda:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <transmit_echo_data+0x94>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &array[0], size);
 8002ce0:	887b      	ldrh	r3, [r7, #2]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4813      	ldr	r0, [pc, #76]	; (8002d34 <transmit_echo_data+0x8c>)
 8002ce8:	f003 ff52 	bl	8006b90 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002cec:	e001      	b.n	8002cf2 <transmit_echo_data+0x4a>
			blink_red_fast();
 8002cee:	f7ff fe8f 	bl	8002a10 <blink_red_fast>
		while(UartReady != SET){
 8002cf2:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <transmit_echo_data+0x94>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d1f8      	bne.n	8002cee <transmit_echo_data+0x46>
		}
		UartReady = RESET;
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <transmit_echo_data+0x94>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8002d02:	2204      	movs	r2, #4
 8002d04:	490e      	ldr	r1, [pc, #56]	; (8002d40 <transmit_echo_data+0x98>)
 8002d06:	480b      	ldr	r0, [pc, #44]	; (8002d34 <transmit_echo_data+0x8c>)
 8002d08:	f003 ff42 	bl	8006b90 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8002d0c:	e001      	b.n	8002d12 <transmit_echo_data+0x6a>
			blink_red_fast();
 8002d0e:	f7ff fe7f 	bl	8002a10 <blink_red_fast>
		while(UartReady != SET){
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <transmit_echo_data+0x94>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d1f8      	bne.n	8002d0e <transmit_echo_data+0x66>
		}
		UartReady = RESET;
 8002d1c:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <transmit_echo_data+0x94>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
	}
	blink_orange_slow();
 8002d22:	f7ff fe8d 	bl	8002a40 <blink_orange_slow>
	clear_leds();
 8002d26:	f7ff fe5b 	bl	80029e0 <clear_leds>
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	24014314 	.word	0x24014314
 8002d38:	08009818 	.word	0x08009818
 8002d3c:	240142b8 	.word	0x240142b8
 8002d40:	0800981c 	.word	0x0800981c

08002d44 <preprocess_features>:
void preprocess_features(float32_t in[], float32_t out[]){
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < NUMBER_OF_FEATURES; i++){
 8002d4e:	2300      	movs	r3, #0
 8002d50:	73fb      	strb	r3, [r7, #15]
 8002d52:	e01f      	b.n	8002d94 <preprocess_features+0x50>
		out[i] = (in[i] - rxScaler.number[i]) / rxScaler.number[i + NUMBER_OF_FEATURES];
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	ed93 7a00 	vldr	s14, [r3]
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	4a11      	ldr	r2, [pc, #68]	; (8002da8 <preprocess_features+0x64>)
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	edd3 7a00 	vldr	s15, [r3]
 8002d6c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	3306      	adds	r3, #6
 8002d74:	4a0c      	ldr	r2, [pc, #48]	; (8002da8 <preprocess_features+0x64>)
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	ed93 7a00 	vldr	s14, [r3]
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	4413      	add	r3, r2
 8002d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d8a:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < NUMBER_OF_FEATURES; i++){
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	3301      	adds	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b05      	cmp	r3, #5
 8002d98:	d9dc      	bls.n	8002d54 <preprocess_features+0x10>
	}
}
 8002d9a:	bf00      	nop
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	2401421c 	.word	0x2401421c

08002dac <quantize_features>:
void quantize_features(float32_t in[], float32_t min_float_range, float32_t max_float_range, q15_t out[]){
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	; 0x28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002db8:	edc7 0a01 	vstr	s1, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
	const int16_t min_int16_t = SHRT_MIN;
 8002dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dc2:	84bb      	strh	r3, [r7, #36]	; 0x24
	const int16_t max_int16_t = SHRT_MAX;
 8002dc4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002dc8:	847b      	strh	r3, [r7, #34]	; 0x22
	const float32_t max_float = FLT_MAX;
 8002dca:	4b52      	ldr	r3, [pc, #328]	; (8002f14 <quantize_features+0x168>)
 8002dcc:	61fb      	str	r3, [r7, #28]

	float32_t scale_factor_from_min_side = 0.0f;
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	61bb      	str	r3, [r7, #24]
	float32_t scale_factor_from_max_side = 0.0f;
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
	float32_t scale_factor = 0.0f;
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	613b      	str	r3, [r7, #16]

	scale_factor_from_min_side = (min_int16_t * min_float_range > 0) ? min_int16_t / min_float_range : max_float;
 8002de0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002de4:	ee07 3a90 	vmov	s15, r3
 8002de8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dec:	edd7 7a02 	vldr	s15, [r7, #8]
 8002df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfc:	dd0a      	ble.n	8002e14 <quantize_features+0x68>
 8002dfe:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e0a:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e12:	e001      	b.n	8002e18 <quantize_features+0x6c>
 8002e14:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e18:	edc7 7a06 	vstr	s15, [r7, #24]
	scale_factor_from_max_side = (max_int16_t * max_float_range > 0) ? max_int16_t / max_float_range : max_float;
 8002e1c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002e20:	ee07 3a90 	vmov	s15, r3
 8002e24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e28:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e38:	dd0a      	ble.n	8002e50 <quantize_features+0xa4>
 8002e3a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002e3e:	ee07 3a90 	vmov	s15, r3
 8002e42:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e46:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e4e:	e001      	b.n	8002e54 <quantize_features+0xa8>
 8002e50:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e54:	edc7 7a05 	vstr	s15, [r7, #20]
	scale_factor = fminf(scale_factor_from_min_side, scale_factor_from_max_side);
 8002e58:	edd7 0a05 	vldr	s1, [r7, #20]
 8002e5c:	ed97 0a06 	vldr	s0, [r7, #24]
 8002e60:	f006 fa83 	bl	800936a <fminf>
 8002e64:	ed87 0a04 	vstr	s0, [r7, #16]

	min_float_range = min_int16_t / scale_factor;
 8002e68:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002e6c:	ee07 3a90 	vmov	s15, r3
 8002e70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e74:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e7c:	edc7 7a02 	vstr	s15, [r7, #8]
	max_float_range = max_int16_t / scale_factor;
 8002e80:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002e84:	ee07 3a90 	vmov	s15, r3
 8002e88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e94:	edc7 7a01 	vstr	s15, [r7, #4]

	for(uint8_t i = 0; i < NUMBER_OF_FEATURES; i++){
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e9e:	e030      	b.n	8002f02 <quantize_features+0x156>
		out[i] = (int16_t) roundf(fminf(max_float_range, fmaxf(min_float_range, in[i])) * scale_factor);
 8002ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	edd3 7a00 	vldr	s15, [r3]
 8002eae:	eef0 0a67 	vmov.f32	s1, s15
 8002eb2:	ed97 0a02 	vldr	s0, [r7, #8]
 8002eb6:	f006 fa3d 	bl	8009334 <fmaxf>
 8002eba:	eef0 7a40 	vmov.f32	s15, s0
 8002ebe:	eef0 0a67 	vmov.f32	s1, s15
 8002ec2:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ec6:	f006 fa50 	bl	800936a <fminf>
 8002eca:	eeb0 7a40 	vmov.f32	s14, s0
 8002ece:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8002eda:	f006 fa7d 	bl	80093d8 <roundf>
 8002ede:	eef0 7a40 	vmov.f32	s15, s0
 8002ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	4413      	add	r3, r2
 8002eec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ef0:	ee17 2a90 	vmov	r2, s15
 8002ef4:	b212      	sxth	r2, r2
 8002ef6:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < NUMBER_OF_FEATURES; i++){
 8002ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002efc:	3301      	adds	r3, #1
 8002efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f06:	2b05      	cmp	r3, #5
 8002f08:	d9ca      	bls.n	8002ea0 <quantize_features+0xf4>
	}
}
 8002f0a:	bf00      	nop
 8002f0c:	3728      	adds	r7, #40	; 0x28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	7f7fffff 	.word	0x7f7fffff

08002f18 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart3){
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8002f20:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <HAL_UART_TxCpltCallback+0x1c>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	240142b8 	.word	0x240142b8

08002f38 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart3){
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <HAL_UART_RxCpltCallback+0x1c>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	701a      	strb	r2, [r3, #0]
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	240142b8 	.word	0x240142b8

08002f58 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <HAL_MspInit+0x30>)
 8002f70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f74:	4a08      	ldr	r2, [pc, #32]	; (8002f98 <HAL_MspInit+0x30>)
 8002f76:	f043 0302 	orr.w	r3, r3, #2
 8002f7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <HAL_MspInit+0x30>)
 8002f80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	58024400 	.word	0x58024400

08002f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002faa:	b480      	push	{r7}
 8002fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fae:	e7fe      	b.n	8002fae <HardFault_Handler+0x4>

08002fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fb4:	e7fe      	b.n	8002fb4 <MemManage_Handler+0x4>

08002fb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fba:	e7fe      	b.n	8002fba <BusFault_Handler+0x4>

08002fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fc0:	e7fe      	b.n	8002fc0 <UsageFault_Handler+0x4>

08002fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ff0:	f000 f9e0 	bl	80033b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ff4:	bf00      	nop
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ffc:	4802      	ldr	r0, [pc, #8]	; (8003008 <USART3_IRQHandler+0x10>)
 8002ffe:	f003 ff23 	bl	8006e48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	24014314 	.word	0x24014314

0800300c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <_sbrk+0x50>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d102      	bne.n	8003022 <_sbrk+0x16>
		heap_end = &end;
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <_sbrk+0x50>)
 800301e:	4a10      	ldr	r2, [pc, #64]	; (8003060 <_sbrk+0x54>)
 8003020:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003022:	4b0e      	ldr	r3, [pc, #56]	; (800305c <_sbrk+0x50>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <_sbrk+0x50>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4413      	add	r3, r2
 8003030:	466a      	mov	r2, sp
 8003032:	4293      	cmp	r3, r2
 8003034:	d907      	bls.n	8003046 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003036:	f006 f881 	bl	800913c <__errno>
 800303a:	4602      	mov	r2, r0
 800303c:	230c      	movs	r3, #12
 800303e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003040:	f04f 33ff 	mov.w	r3, #4294967295
 8003044:	e006      	b.n	8003054 <_sbrk+0x48>
	}

	heap_end += incr;
 8003046:	4b05      	ldr	r3, [pc, #20]	; (800305c <_sbrk+0x50>)
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	4a03      	ldr	r2, [pc, #12]	; (800305c <_sbrk+0x50>)
 8003050:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003052:	68fb      	ldr	r3, [r7, #12]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	240142bc 	.word	0x240142bc
 8003060:	240143a8 	.word	0x240143a8

08003064 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800306a:	f107 0310 	add.w	r3, r7, #16
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	605a      	str	r2, [r3, #4]
 8003080:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8003082:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <MX_TIM2_Init+0x98>)
 8003084:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003088:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800308a:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <MX_TIM2_Init+0x98>)
 800308c:	2200      	movs	r2, #0
 800308e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003090:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <MX_TIM2_Init+0x98>)
 8003092:	2200      	movs	r2, #0
 8003094:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003096:	4b19      	ldr	r3, [pc, #100]	; (80030fc <MX_TIM2_Init+0x98>)
 8003098:	f04f 32ff 	mov.w	r2, #4294967295
 800309c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800309e:	4b17      	ldr	r3, [pc, #92]	; (80030fc <MX_TIM2_Init+0x98>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a4:	4b15      	ldr	r3, [pc, #84]	; (80030fc <MX_TIM2_Init+0x98>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80030aa:	4814      	ldr	r0, [pc, #80]	; (80030fc <MX_TIM2_Init+0x98>)
 80030ac:	f003 fa0a 	bl	80064c4 <HAL_TIM_Base_Init>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80030b6:	f7ff ff4f 	bl	8002f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030c0:	f107 0310 	add.w	r3, r7, #16
 80030c4:	4619      	mov	r1, r3
 80030c6:	480d      	ldr	r0, [pc, #52]	; (80030fc <MX_TIM2_Init+0x98>)
 80030c8:	f003 fa82 	bl	80065d0 <HAL_TIM_ConfigClockSource>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80030d2:	f7ff ff41 	bl	8002f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030d6:	2300      	movs	r3, #0
 80030d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030de:	1d3b      	adds	r3, r7, #4
 80030e0:	4619      	mov	r1, r3
 80030e2:	4806      	ldr	r0, [pc, #24]	; (80030fc <MX_TIM2_Init+0x98>)
 80030e4:	f003 fc7c 	bl	80069e0 <HAL_TIMEx_MasterConfigSynchronization>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80030ee:	f7ff ff33 	bl	8002f58 <Error_Handler>
  }

}
 80030f2:	bf00      	nop
 80030f4:	3720      	adds	r7, #32
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	240142c8 	.word	0x240142c8

08003100 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003110:	d10e      	bne.n	8003130 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <HAL_TIM_Base_MspInit+0x3c>)
 8003114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003118:	4a08      	ldr	r2, [pc, #32]	; (800313c <HAL_TIM_Base_MspInit+0x3c>)
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_TIM_Base_MspInit+0x3c>)
 8003124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	58024400 	.word	0x58024400

08003140 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003144:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <MX_USART3_UART_Init+0x90>)
 8003146:	4a23      	ldr	r2, [pc, #140]	; (80031d4 <MX_USART3_UART_Init+0x94>)
 8003148:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800314a:	4b21      	ldr	r3, [pc, #132]	; (80031d0 <MX_USART3_UART_Init+0x90>)
 800314c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003150:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003152:	4b1f      	ldr	r3, [pc, #124]	; (80031d0 <MX_USART3_UART_Init+0x90>)
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003158:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <MX_USART3_UART_Init+0x90>)
 800315a:	2200      	movs	r2, #0
 800315c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800315e:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <MX_USART3_UART_Init+0x90>)
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003164:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <MX_USART3_UART_Init+0x90>)
 8003166:	220c      	movs	r2, #12
 8003168:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800316a:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <MX_USART3_UART_Init+0x90>)
 800316c:	2200      	movs	r2, #0
 800316e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003170:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <MX_USART3_UART_Init+0x90>)
 8003172:	2200      	movs	r2, #0
 8003174:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003176:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <MX_USART3_UART_Init+0x90>)
 8003178:	2200      	movs	r2, #0
 800317a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800317c:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <MX_USART3_UART_Init+0x90>)
 800317e:	2200      	movs	r2, #0
 8003180:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003182:	4b13      	ldr	r3, [pc, #76]	; (80031d0 <MX_USART3_UART_Init+0x90>)
 8003184:	2200      	movs	r2, #0
 8003186:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003188:	4811      	ldr	r0, [pc, #68]	; (80031d0 <MX_USART3_UART_Init+0x90>)
 800318a:	f003 fcb1 	bl	8006af0 <HAL_UART_Init>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003194:	f7ff fee0 	bl	8002f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003198:	2100      	movs	r1, #0
 800319a:	480d      	ldr	r0, [pc, #52]	; (80031d0 <MX_USART3_UART_Init+0x90>)
 800319c:	f005 fa6d 	bl	800867a <HAL_UARTEx_SetTxFifoThreshold>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80031a6:	f7ff fed7 	bl	8002f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031aa:	2100      	movs	r1, #0
 80031ac:	4808      	ldr	r0, [pc, #32]	; (80031d0 <MX_USART3_UART_Init+0x90>)
 80031ae:	f005 faa2 	bl	80086f6 <HAL_UARTEx_SetRxFifoThreshold>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80031b8:	f7ff fece 	bl	8002f58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80031bc:	4804      	ldr	r0, [pc, #16]	; (80031d0 <MX_USART3_UART_Init+0x90>)
 80031be:	f005 fa23 	bl	8008608 <HAL_UARTEx_DisableFifoMode>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80031c8:	f7ff fec6 	bl	8002f58 <Error_Handler>
  }

}
 80031cc:	bf00      	nop
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	24014314 	.word	0x24014314
 80031d4:	40004800 	.word	0x40004800

080031d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08a      	sub	sp, #40	; 0x28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e0:	f107 0314 	add.w	r3, r7, #20
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1e      	ldr	r2, [pc, #120]	; (8003270 <HAL_UART_MspInit+0x98>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d136      	bne.n	8003268 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80031fa:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <HAL_UART_MspInit+0x9c>)
 80031fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003200:	4a1c      	ldr	r2, [pc, #112]	; (8003274 <HAL_UART_MspInit+0x9c>)
 8003202:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003206:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800320a:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <HAL_UART_MspInit+0x9c>)
 800320c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003218:	4b16      	ldr	r3, [pc, #88]	; (8003274 <HAL_UART_MspInit+0x9c>)
 800321a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800321e:	4a15      	ldr	r2, [pc, #84]	; (8003274 <HAL_UART_MspInit+0x9c>)
 8003220:	f043 0308 	orr.w	r3, r3, #8
 8003224:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003228:	4b12      	ldr	r3, [pc, #72]	; (8003274 <HAL_UART_MspInit+0x9c>)
 800322a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003236:	f44f 7340 	mov.w	r3, #768	; 0x300
 800323a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323c:	2302      	movs	r3, #2
 800323e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003244:	2300      	movs	r3, #0
 8003246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003248:	2307      	movs	r3, #7
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800324c:	f107 0314 	add.w	r3, r7, #20
 8003250:	4619      	mov	r1, r3
 8003252:	4809      	ldr	r0, [pc, #36]	; (8003278 <HAL_UART_MspInit+0xa0>)
 8003254:	f000 fc50 	bl	8003af8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003258:	2200      	movs	r2, #0
 800325a:	2100      	movs	r1, #0
 800325c:	2027      	movs	r0, #39	; 0x27
 800325e:	f000 f9d2 	bl	8003606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003262:	2027      	movs	r0, #39	; 0x27
 8003264:	f000 f9e9 	bl	800363a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003268:	bf00      	nop
 800326a:	3728      	adds	r7, #40	; 0x28
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40004800 	.word	0x40004800
 8003274:	58024400 	.word	0x58024400
 8003278:	58020c00 	.word	0x58020c00

0800327c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800327c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003280:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003282:	e003      	b.n	800328c <LoopCopyDataInit>

08003284 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003286:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003288:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800328a:	3104      	adds	r1, #4

0800328c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800328c:	480b      	ldr	r0, [pc, #44]	; (80032bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800328e:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003290:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003292:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003294:	d3f6      	bcc.n	8003284 <CopyDataInit>
  ldr  r2, =_sbss
 8003296:	4a0b      	ldr	r2, [pc, #44]	; (80032c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003298:	e002      	b.n	80032a0 <LoopFillZerobss>

0800329a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800329a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800329c:	f842 3b04 	str.w	r3, [r2], #4

080032a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032a0:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032a4:	d3f9      	bcc.n	800329a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032a6:	f7fd f9e7 	bl	8000678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032aa:	f005 ff4d 	bl	8009148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ae:	f7ff f83d 	bl	800232c <main>
  bx  lr    
 80032b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80032b8:	08009870 	.word	0x08009870
  ldr  r0, =_sdata
 80032bc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80032c0:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 80032c4:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 80032c8:	240143a8 	.word	0x240143a8

080032cc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032cc:	e7fe      	b.n	80032cc <ADC3_IRQHandler>
	...

080032d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032d6:	2003      	movs	r0, #3
 80032d8:	f000 f98a 	bl	80035f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032dc:	f001 fc24 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 80032e0:	4601      	mov	r1, r0
 80032e2:	4b15      	ldr	r3, [pc, #84]	; (8003338 <HAL_Init+0x68>)
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	0a1b      	lsrs	r3, r3, #8
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	4a13      	ldr	r2, [pc, #76]	; (800333c <HAL_Init+0x6c>)
 80032ee:	5cd3      	ldrb	r3, [r2, r3]
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	fa21 f303 	lsr.w	r3, r1, r3
 80032f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032fa:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <HAL_Init+0x68>)
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	4a0e      	ldr	r2, [pc, #56]	; (800333c <HAL_Init+0x6c>)
 8003304:	5cd3      	ldrb	r3, [r2, r3]
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
 8003310:	4a0b      	ldr	r2, [pc, #44]	; (8003340 <HAL_Init+0x70>)
 8003312:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003314:	4a0b      	ldr	r2, [pc, #44]	; (8003344 <HAL_Init+0x74>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800331a:	2000      	movs	r0, #0
 800331c:	f000 f814 	bl	8003348 <HAL_InitTick>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e002      	b.n	8003330 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800332a:	f7ff fe1d 	bl	8002f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	58024400 	.word	0x58024400
 800333c:	08009804 	.word	0x08009804
 8003340:	24000004 	.word	0x24000004
 8003344:	24000000 	.word	0x24000000

08003348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003350:	4b15      	ldr	r3, [pc, #84]	; (80033a8 <HAL_InitTick+0x60>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e021      	b.n	80033a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800335c:	4b13      	ldr	r3, [pc, #76]	; (80033ac <HAL_InitTick+0x64>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <HAL_InitTick+0x60>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	4619      	mov	r1, r3
 8003366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800336a:	fbb3 f3f1 	udiv	r3, r3, r1
 800336e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f96f 	bl	8003656 <HAL_SYSTICK_Config>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e00e      	b.n	80033a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b0f      	cmp	r3, #15
 8003386:	d80a      	bhi.n	800339e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003388:	2200      	movs	r2, #0
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	f04f 30ff 	mov.w	r0, #4294967295
 8003390:	f000 f939 	bl	8003606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003394:	4a06      	ldr	r2, [pc, #24]	; (80033b0 <HAL_InitTick+0x68>)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	e000      	b.n	80033a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	2400000c 	.word	0x2400000c
 80033ac:	24000000 	.word	0x24000000
 80033b0:	24000008 	.word	0x24000008

080033b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033b8:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_IncTick+0x20>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <HAL_IncTick+0x24>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4413      	add	r3, r2
 80033c4:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <HAL_IncTick+0x24>)
 80033c6:	6013      	str	r3, [r2, #0]
}
 80033c8:	bf00      	nop
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	2400000c 	.word	0x2400000c
 80033d8:	240143a0 	.word	0x240143a0

080033dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return uwTick;
 80033e0:	4b03      	ldr	r3, [pc, #12]	; (80033f0 <HAL_GetTick+0x14>)
 80033e2:	681b      	ldr	r3, [r3, #0]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	240143a0 	.word	0x240143a0

080033f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033fc:	f7ff ffee 	bl	80033dc <HAL_GetTick>
 8003400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d005      	beq.n	800341a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800340e:	4b09      	ldr	r3, [pc, #36]	; (8003434 <HAL_Delay+0x40>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4413      	add	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800341a:	bf00      	nop
 800341c:	f7ff ffde 	bl	80033dc <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	429a      	cmp	r2, r3
 800342a:	d8f7      	bhi.n	800341c <HAL_Delay+0x28>
  {
  }
}
 800342c:	bf00      	nop
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	2400000c 	.word	0x2400000c

08003438 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800343c:	4b03      	ldr	r3, [pc, #12]	; (800344c <HAL_GetREVID+0x14>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	0c1b      	lsrs	r3, r3, #16
}
 8003442:	4618      	mov	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	5c001000 	.word	0x5c001000

08003450 <__NVIC_SetPriorityGrouping>:
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003460:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <__NVIC_SetPriorityGrouping+0x40>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800346c:	4013      	ands	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <__NVIC_SetPriorityGrouping+0x44>)
 800347a:	4313      	orrs	r3, r2
 800347c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800347e:	4a04      	ldr	r2, [pc, #16]	; (8003490 <__NVIC_SetPriorityGrouping+0x40>)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	60d3      	str	r3, [r2, #12]
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	e000ed00 	.word	0xe000ed00
 8003494:	05fa0000 	.word	0x05fa0000

08003498 <__NVIC_GetPriorityGrouping>:
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <__NVIC_GetPriorityGrouping+0x18>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	f003 0307 	and.w	r3, r3, #7
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <__NVIC_EnableIRQ>:
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	db0b      	blt.n	80034de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	f003 021f 	and.w	r2, r3, #31
 80034cc:	4907      	ldr	r1, [pc, #28]	; (80034ec <__NVIC_EnableIRQ+0x38>)
 80034ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2001      	movs	r0, #1
 80034d6:	fa00 f202 	lsl.w	r2, r0, r2
 80034da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	e000e100 	.word	0xe000e100

080034f0 <__NVIC_SetPriority>:
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	6039      	str	r1, [r7, #0]
 80034fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003500:	2b00      	cmp	r3, #0
 8003502:	db0a      	blt.n	800351a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	b2da      	uxtb	r2, r3
 8003508:	490c      	ldr	r1, [pc, #48]	; (800353c <__NVIC_SetPriority+0x4c>)
 800350a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800350e:	0112      	lsls	r2, r2, #4
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	440b      	add	r3, r1
 8003514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003518:	e00a      	b.n	8003530 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	4908      	ldr	r1, [pc, #32]	; (8003540 <__NVIC_SetPriority+0x50>)
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	3b04      	subs	r3, #4
 8003528:	0112      	lsls	r2, r2, #4
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	440b      	add	r3, r1
 800352e:	761a      	strb	r2, [r3, #24]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000e100 	.word	0xe000e100
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <NVIC_EncodePriority>:
{
 8003544:	b480      	push	{r7}
 8003546:	b089      	sub	sp, #36	; 0x24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f1c3 0307 	rsb	r3, r3, #7
 800355e:	2b04      	cmp	r3, #4
 8003560:	bf28      	it	cs
 8003562:	2304      	movcs	r3, #4
 8003564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3304      	adds	r3, #4
 800356a:	2b06      	cmp	r3, #6
 800356c:	d902      	bls.n	8003574 <NVIC_EncodePriority+0x30>
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3b03      	subs	r3, #3
 8003572:	e000      	b.n	8003576 <NVIC_EncodePriority+0x32>
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003578:	f04f 32ff 	mov.w	r2, #4294967295
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43da      	mvns	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	401a      	ands	r2, r3
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800358c:	f04f 31ff 	mov.w	r1, #4294967295
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	fa01 f303 	lsl.w	r3, r1, r3
 8003596:	43d9      	mvns	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800359c:	4313      	orrs	r3, r2
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3724      	adds	r7, #36	; 0x24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035bc:	d301      	bcc.n	80035c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035be:	2301      	movs	r3, #1
 80035c0:	e00f      	b.n	80035e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035c2:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <SysTick_Config+0x40>)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ca:	210f      	movs	r1, #15
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295
 80035d0:	f7ff ff8e 	bl	80034f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035d4:	4b05      	ldr	r3, [pc, #20]	; (80035ec <SysTick_Config+0x40>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035da:	4b04      	ldr	r3, [pc, #16]	; (80035ec <SysTick_Config+0x40>)
 80035dc:	2207      	movs	r2, #7
 80035de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	e000e010 	.word	0xe000e010

080035f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff ff29 	bl	8003450 <__NVIC_SetPriorityGrouping>
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b086      	sub	sp, #24
 800360a:	af00      	add	r7, sp, #0
 800360c:	4603      	mov	r3, r0
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
 8003612:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003614:	f7ff ff40 	bl	8003498 <__NVIC_GetPriorityGrouping>
 8003618:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	6978      	ldr	r0, [r7, #20]
 8003620:	f7ff ff90 	bl	8003544 <NVIC_EncodePriority>
 8003624:	4602      	mov	r2, r0
 8003626:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800362a:	4611      	mov	r1, r2
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff ff5f 	bl	80034f0 <__NVIC_SetPriority>
}
 8003632:	bf00      	nop
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	4603      	mov	r3, r0
 8003642:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff ff33 	bl	80034b4 <__NVIC_EnableIRQ>
}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff ffa4 	bl	80035ac <SysTick_Config>
 8003664:	4603      	mov	r3, r0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e205      	b.n	8003a8e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d004      	beq.n	8003698 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2280      	movs	r2, #128	; 0x80
 8003692:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e1fa      	b.n	8003a8e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a8c      	ldr	r2, [pc, #560]	; (80038d0 <HAL_DMA_Abort_IT+0x260>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d04a      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a8b      	ldr	r2, [pc, #556]	; (80038d4 <HAL_DMA_Abort_IT+0x264>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d045      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a89      	ldr	r2, [pc, #548]	; (80038d8 <HAL_DMA_Abort_IT+0x268>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d040      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a88      	ldr	r2, [pc, #544]	; (80038dc <HAL_DMA_Abort_IT+0x26c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d03b      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a86      	ldr	r2, [pc, #536]	; (80038e0 <HAL_DMA_Abort_IT+0x270>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d036      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a85      	ldr	r2, [pc, #532]	; (80038e4 <HAL_DMA_Abort_IT+0x274>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d031      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a83      	ldr	r2, [pc, #524]	; (80038e8 <HAL_DMA_Abort_IT+0x278>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d02c      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a82      	ldr	r2, [pc, #520]	; (80038ec <HAL_DMA_Abort_IT+0x27c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d027      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a80      	ldr	r2, [pc, #512]	; (80038f0 <HAL_DMA_Abort_IT+0x280>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d022      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a7f      	ldr	r2, [pc, #508]	; (80038f4 <HAL_DMA_Abort_IT+0x284>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d01d      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a7d      	ldr	r2, [pc, #500]	; (80038f8 <HAL_DMA_Abort_IT+0x288>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d018      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a7c      	ldr	r2, [pc, #496]	; (80038fc <HAL_DMA_Abort_IT+0x28c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d013      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a7a      	ldr	r2, [pc, #488]	; (8003900 <HAL_DMA_Abort_IT+0x290>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00e      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a79      	ldr	r2, [pc, #484]	; (8003904 <HAL_DMA_Abort_IT+0x294>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d009      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a77      	ldr	r2, [pc, #476]	; (8003908 <HAL_DMA_Abort_IT+0x298>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a76      	ldr	r2, [pc, #472]	; (800390c <HAL_DMA_Abort_IT+0x29c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d101      	bne.n	800373c <HAL_DMA_Abort_IT+0xcc>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <HAL_DMA_Abort_IT+0xce>
 800373c:	2300      	movs	r3, #0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d065      	beq.n	800380e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2204      	movs	r2, #4
 8003746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a60      	ldr	r2, [pc, #384]	; (80038d0 <HAL_DMA_Abort_IT+0x260>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d04a      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a5e      	ldr	r2, [pc, #376]	; (80038d4 <HAL_DMA_Abort_IT+0x264>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d045      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a5d      	ldr	r2, [pc, #372]	; (80038d8 <HAL_DMA_Abort_IT+0x268>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d040      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a5b      	ldr	r2, [pc, #364]	; (80038dc <HAL_DMA_Abort_IT+0x26c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d03b      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a5a      	ldr	r2, [pc, #360]	; (80038e0 <HAL_DMA_Abort_IT+0x270>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d036      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a58      	ldr	r2, [pc, #352]	; (80038e4 <HAL_DMA_Abort_IT+0x274>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d031      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a57      	ldr	r2, [pc, #348]	; (80038e8 <HAL_DMA_Abort_IT+0x278>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d02c      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a55      	ldr	r2, [pc, #340]	; (80038ec <HAL_DMA_Abort_IT+0x27c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d027      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a54      	ldr	r2, [pc, #336]	; (80038f0 <HAL_DMA_Abort_IT+0x280>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d022      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a52      	ldr	r2, [pc, #328]	; (80038f4 <HAL_DMA_Abort_IT+0x284>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d01d      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a51      	ldr	r2, [pc, #324]	; (80038f8 <HAL_DMA_Abort_IT+0x288>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d018      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a4f      	ldr	r2, [pc, #316]	; (80038fc <HAL_DMA_Abort_IT+0x28c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d013      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a4e      	ldr	r2, [pc, #312]	; (8003900 <HAL_DMA_Abort_IT+0x290>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00e      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a4c      	ldr	r2, [pc, #304]	; (8003904 <HAL_DMA_Abort_IT+0x294>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d009      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a4b      	ldr	r2, [pc, #300]	; (8003908 <HAL_DMA_Abort_IT+0x298>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a49      	ldr	r2, [pc, #292]	; (800390c <HAL_DMA_Abort_IT+0x29c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d108      	bne.n	80037fc <HAL_DMA_Abort_IT+0x18c>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0201 	bic.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e147      	b.n	8003a8c <HAL_DMA_Abort_IT+0x41c>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0201 	bic.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e13e      	b.n	8003a8c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 020e 	bic.w	r2, r2, #14
 800381c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a2b      	ldr	r2, [pc, #172]	; (80038d0 <HAL_DMA_Abort_IT+0x260>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d04a      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a29      	ldr	r2, [pc, #164]	; (80038d4 <HAL_DMA_Abort_IT+0x264>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d045      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a28      	ldr	r2, [pc, #160]	; (80038d8 <HAL_DMA_Abort_IT+0x268>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d040      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a26      	ldr	r2, [pc, #152]	; (80038dc <HAL_DMA_Abort_IT+0x26c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d03b      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a25      	ldr	r2, [pc, #148]	; (80038e0 <HAL_DMA_Abort_IT+0x270>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d036      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a23      	ldr	r2, [pc, #140]	; (80038e4 <HAL_DMA_Abort_IT+0x274>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d031      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a22      	ldr	r2, [pc, #136]	; (80038e8 <HAL_DMA_Abort_IT+0x278>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d02c      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a20      	ldr	r2, [pc, #128]	; (80038ec <HAL_DMA_Abort_IT+0x27c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d027      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1f      	ldr	r2, [pc, #124]	; (80038f0 <HAL_DMA_Abort_IT+0x280>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d022      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1d      	ldr	r2, [pc, #116]	; (80038f4 <HAL_DMA_Abort_IT+0x284>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d01d      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1c      	ldr	r2, [pc, #112]	; (80038f8 <HAL_DMA_Abort_IT+0x288>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d018      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a1a      	ldr	r2, [pc, #104]	; (80038fc <HAL_DMA_Abort_IT+0x28c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a19      	ldr	r2, [pc, #100]	; (8003900 <HAL_DMA_Abort_IT+0x290>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00e      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a17      	ldr	r2, [pc, #92]	; (8003904 <HAL_DMA_Abort_IT+0x294>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d009      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a16      	ldr	r2, [pc, #88]	; (8003908 <HAL_DMA_Abort_IT+0x298>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d004      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a14      	ldr	r2, [pc, #80]	; (800390c <HAL_DMA_Abort_IT+0x29c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d128      	bne.n	8003910 <HAL_DMA_Abort_IT+0x2a0>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	e027      	b.n	8003920 <HAL_DMA_Abort_IT+0x2b0>
 80038d0:	40020010 	.word	0x40020010
 80038d4:	40020028 	.word	0x40020028
 80038d8:	40020040 	.word	0x40020040
 80038dc:	40020058 	.word	0x40020058
 80038e0:	40020070 	.word	0x40020070
 80038e4:	40020088 	.word	0x40020088
 80038e8:	400200a0 	.word	0x400200a0
 80038ec:	400200b8 	.word	0x400200b8
 80038f0:	40020410 	.word	0x40020410
 80038f4:	40020428 	.word	0x40020428
 80038f8:	40020440 	.word	0x40020440
 80038fc:	40020458 	.word	0x40020458
 8003900:	40020470 	.word	0x40020470
 8003904:	40020488 	.word	0x40020488
 8003908:	400204a0 	.word	0x400204a0
 800390c:	400204b8 	.word	0x400204b8
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a5c      	ldr	r2, [pc, #368]	; (8003a98 <HAL_DMA_Abort_IT+0x428>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d072      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a5b      	ldr	r2, [pc, #364]	; (8003a9c <HAL_DMA_Abort_IT+0x42c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d06d      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a59      	ldr	r2, [pc, #356]	; (8003aa0 <HAL_DMA_Abort_IT+0x430>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d068      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a58      	ldr	r2, [pc, #352]	; (8003aa4 <HAL_DMA_Abort_IT+0x434>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d063      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a56      	ldr	r2, [pc, #344]	; (8003aa8 <HAL_DMA_Abort_IT+0x438>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d05e      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a55      	ldr	r2, [pc, #340]	; (8003aac <HAL_DMA_Abort_IT+0x43c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d059      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a53      	ldr	r2, [pc, #332]	; (8003ab0 <HAL_DMA_Abort_IT+0x440>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d054      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a52      	ldr	r2, [pc, #328]	; (8003ab4 <HAL_DMA_Abort_IT+0x444>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d04f      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a50      	ldr	r2, [pc, #320]	; (8003ab8 <HAL_DMA_Abort_IT+0x448>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d04a      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a4f      	ldr	r2, [pc, #316]	; (8003abc <HAL_DMA_Abort_IT+0x44c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d045      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a4d      	ldr	r2, [pc, #308]	; (8003ac0 <HAL_DMA_Abort_IT+0x450>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d040      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a4c      	ldr	r2, [pc, #304]	; (8003ac4 <HAL_DMA_Abort_IT+0x454>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d03b      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a4a      	ldr	r2, [pc, #296]	; (8003ac8 <HAL_DMA_Abort_IT+0x458>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d036      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a49      	ldr	r2, [pc, #292]	; (8003acc <HAL_DMA_Abort_IT+0x45c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d031      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a47      	ldr	r2, [pc, #284]	; (8003ad0 <HAL_DMA_Abort_IT+0x460>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d02c      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a46      	ldr	r2, [pc, #280]	; (8003ad4 <HAL_DMA_Abort_IT+0x464>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d027      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a44      	ldr	r2, [pc, #272]	; (8003ad8 <HAL_DMA_Abort_IT+0x468>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d022      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a43      	ldr	r2, [pc, #268]	; (8003adc <HAL_DMA_Abort_IT+0x46c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d01d      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a41      	ldr	r2, [pc, #260]	; (8003ae0 <HAL_DMA_Abort_IT+0x470>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d018      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a40      	ldr	r2, [pc, #256]	; (8003ae4 <HAL_DMA_Abort_IT+0x474>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d013      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a3e      	ldr	r2, [pc, #248]	; (8003ae8 <HAL_DMA_Abort_IT+0x478>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00e      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a3d      	ldr	r2, [pc, #244]	; (8003aec <HAL_DMA_Abort_IT+0x47c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d009      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a3b      	ldr	r2, [pc, #236]	; (8003af0 <HAL_DMA_Abort_IT+0x480>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d004      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a3a      	ldr	r2, [pc, #232]	; (8003af4 <HAL_DMA_Abort_IT+0x484>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d101      	bne.n	8003a14 <HAL_DMA_Abort_IT+0x3a4>
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <HAL_DMA_Abort_IT+0x3a6>
 8003a14:	2300      	movs	r3, #0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d028      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a28:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	2201      	movs	r2, #1
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a48:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00c      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a60:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a6a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40020010 	.word	0x40020010
 8003a9c:	40020028 	.word	0x40020028
 8003aa0:	40020040 	.word	0x40020040
 8003aa4:	40020058 	.word	0x40020058
 8003aa8:	40020070 	.word	0x40020070
 8003aac:	40020088 	.word	0x40020088
 8003ab0:	400200a0 	.word	0x400200a0
 8003ab4:	400200b8 	.word	0x400200b8
 8003ab8:	40020410 	.word	0x40020410
 8003abc:	40020428 	.word	0x40020428
 8003ac0:	40020440 	.word	0x40020440
 8003ac4:	40020458 	.word	0x40020458
 8003ac8:	40020470 	.word	0x40020470
 8003acc:	40020488 	.word	0x40020488
 8003ad0:	400204a0 	.word	0x400204a0
 8003ad4:	400204b8 	.word	0x400204b8
 8003ad8:	58025408 	.word	0x58025408
 8003adc:	5802541c 	.word	0x5802541c
 8003ae0:	58025430 	.word	0x58025430
 8003ae4:	58025444 	.word	0x58025444
 8003ae8:	58025458 	.word	0x58025458
 8003aec:	5802546c 	.word	0x5802546c
 8003af0:	58025480 	.word	0x58025480
 8003af4:	58025494 	.word	0x58025494

08003af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b089      	sub	sp, #36	; 0x24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003b06:	4b89      	ldr	r3, [pc, #548]	; (8003d2c <HAL_GPIO_Init+0x234>)
 8003b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b0a:	e194      	b.n	8003e36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	2101      	movs	r1, #1
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	fa01 f303 	lsl.w	r3, r1, r3
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8186 	beq.w	8003e30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d00b      	beq.n	8003b44 <HAL_GPIO_Init+0x4c>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d007      	beq.n	8003b44 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b38:	2b11      	cmp	r3, #17
 8003b3a:	d003      	beq.n	8003b44 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b12      	cmp	r3, #18
 8003b42:	d130      	bne.n	8003ba6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	2203      	movs	r2, #3
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4013      	ands	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	091b      	lsrs	r3, r3, #4
 8003b90:	f003 0201 	and.w	r2, r3, #1
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d003      	beq.n	8003be6 <HAL_GPIO_Init+0xee>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b12      	cmp	r3, #18
 8003be4:	d123      	bne.n	8003c2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	08da      	lsrs	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3208      	adds	r2, #8
 8003bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	220f      	movs	r2, #15
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4013      	ands	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	691a      	ldr	r2, [r3, #16]
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	08da      	lsrs	r2, r3, #3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3208      	adds	r2, #8
 8003c28:	69b9      	ldr	r1, [r7, #24]
 8003c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	2203      	movs	r2, #3
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4013      	ands	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 0203 	and.w	r2, r3, #3
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80e0 	beq.w	8003e30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c70:	4b2f      	ldr	r3, [pc, #188]	; (8003d30 <HAL_GPIO_Init+0x238>)
 8003c72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c76:	4a2e      	ldr	r2, [pc, #184]	; (8003d30 <HAL_GPIO_Init+0x238>)
 8003c78:	f043 0302 	orr.w	r3, r3, #2
 8003c7c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c80:	4b2b      	ldr	r3, [pc, #172]	; (8003d30 <HAL_GPIO_Init+0x238>)
 8003c82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c8e:	4a29      	ldr	r2, [pc, #164]	; (8003d34 <HAL_GPIO_Init+0x23c>)
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	089b      	lsrs	r3, r3, #2
 8003c94:	3302      	adds	r3, #2
 8003c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	220f      	movs	r2, #15
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a20      	ldr	r2, [pc, #128]	; (8003d38 <HAL_GPIO_Init+0x240>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d052      	beq.n	8003d60 <HAL_GPIO_Init+0x268>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a1f      	ldr	r2, [pc, #124]	; (8003d3c <HAL_GPIO_Init+0x244>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d031      	beq.n	8003d26 <HAL_GPIO_Init+0x22e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a1e      	ldr	r2, [pc, #120]	; (8003d40 <HAL_GPIO_Init+0x248>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d02b      	beq.n	8003d22 <HAL_GPIO_Init+0x22a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a1d      	ldr	r2, [pc, #116]	; (8003d44 <HAL_GPIO_Init+0x24c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d025      	beq.n	8003d1e <HAL_GPIO_Init+0x226>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a1c      	ldr	r2, [pc, #112]	; (8003d48 <HAL_GPIO_Init+0x250>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d01f      	beq.n	8003d1a <HAL_GPIO_Init+0x222>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a1b      	ldr	r2, [pc, #108]	; (8003d4c <HAL_GPIO_Init+0x254>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d019      	beq.n	8003d16 <HAL_GPIO_Init+0x21e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a1a      	ldr	r2, [pc, #104]	; (8003d50 <HAL_GPIO_Init+0x258>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <HAL_GPIO_Init+0x21a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a19      	ldr	r2, [pc, #100]	; (8003d54 <HAL_GPIO_Init+0x25c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00d      	beq.n	8003d0e <HAL_GPIO_Init+0x216>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a18      	ldr	r2, [pc, #96]	; (8003d58 <HAL_GPIO_Init+0x260>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <HAL_GPIO_Init+0x212>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a17      	ldr	r2, [pc, #92]	; (8003d5c <HAL_GPIO_Init+0x264>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d101      	bne.n	8003d06 <HAL_GPIO_Init+0x20e>
 8003d02:	2309      	movs	r3, #9
 8003d04:	e02d      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d06:	230a      	movs	r3, #10
 8003d08:	e02b      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	e029      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d0e:	2307      	movs	r3, #7
 8003d10:	e027      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d12:	2306      	movs	r3, #6
 8003d14:	e025      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d16:	2305      	movs	r3, #5
 8003d18:	e023      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d1a:	2304      	movs	r3, #4
 8003d1c:	e021      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e01f      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e01d      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e01b      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d2a:	bf00      	nop
 8003d2c:	58000080 	.word	0x58000080
 8003d30:	58024400 	.word	0x58024400
 8003d34:	58000400 	.word	0x58000400
 8003d38:	58020000 	.word	0x58020000
 8003d3c:	58020400 	.word	0x58020400
 8003d40:	58020800 	.word	0x58020800
 8003d44:	58020c00 	.word	0x58020c00
 8003d48:	58021000 	.word	0x58021000
 8003d4c:	58021400 	.word	0x58021400
 8003d50:	58021800 	.word	0x58021800
 8003d54:	58021c00 	.word	0x58021c00
 8003d58:	58022000 	.word	0x58022000
 8003d5c:	58022400 	.word	0x58022400
 8003d60:	2300      	movs	r3, #0
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	f002 0203 	and.w	r2, r2, #3
 8003d68:	0092      	lsls	r2, r2, #2
 8003d6a:	4093      	lsls	r3, r2
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d72:	4938      	ldr	r1, [pc, #224]	; (8003e54 <HAL_GPIO_Init+0x35c>)
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	089b      	lsrs	r3, r3, #2
 8003d78:	3302      	adds	r3, #2
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	43db      	mvns	r3, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4013      	ands	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003dfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	3301      	adds	r3, #1
 8003e34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f47f ae63 	bne.w	8003b0c <HAL_GPIO_Init+0x14>
  }
}
 8003e46:	bf00      	nop
 8003e48:	3724      	adds	r7, #36	; 0x24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	58000400 	.word	0x58000400

08003e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	807b      	strh	r3, [r7, #2]
 8003e64:	4613      	mov	r3, r2
 8003e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e68:	787b      	ldrb	r3, [r7, #1]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e6e:	887a      	ldrh	r2, [r7, #2]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003e74:	e003      	b.n	8003e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003e76:	887b      	ldrh	r3, [r7, #2]
 8003e78:	041a      	lsls	r2, r3, #16
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	619a      	str	r2, [r3, #24]
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003e94:	4a08      	ldr	r2, [pc, #32]	; (8003eb8 <HAL_HSEM_FastTake+0x2c>)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3320      	adds	r3, #32
 8003e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e9e:	4a07      	ldr	r2, [pc, #28]	; (8003ebc <HAL_HSEM_FastTake+0x30>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d101      	bne.n	8003ea8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e000      	b.n	8003eaa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	58026400 	.word	0x58026400
 8003ebc:	80000300 	.word	0x80000300

08003ec0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003eca:	4906      	ldr	r1, [pc, #24]	; (8003ee4 <HAL_HSEM_Release+0x24>)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	58026400 	.word	0x58026400

08003ee8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003ef0:	4b29      	ldr	r3, [pc, #164]	; (8003f98 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	2b06      	cmp	r3, #6
 8003efa:	d00a      	beq.n	8003f12 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003efc:	4b26      	ldr	r3, [pc, #152]	; (8003f98 <HAL_PWREx_ConfigSupply+0xb0>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d001      	beq.n	8003f0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e040      	b.n	8003f90 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e03e      	b.n	8003f90 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003f12:	4b21      	ldr	r3, [pc, #132]	; (8003f98 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003f1a:	491f      	ldr	r1, [pc, #124]	; (8003f98 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003f22:	f7ff fa5b 	bl	80033dc <HAL_GetTick>
 8003f26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f28:	e009      	b.n	8003f3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f2a:	f7ff fa57 	bl	80033dc <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f38:	d901      	bls.n	8003f3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e028      	b.n	8003f90 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f3e:	4b16      	ldr	r3, [pc, #88]	; (8003f98 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f4a:	d1ee      	bne.n	8003f2a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b1e      	cmp	r3, #30
 8003f50:	d008      	beq.n	8003f64 <HAL_PWREx_ConfigSupply+0x7c>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b2e      	cmp	r3, #46	; 0x2e
 8003f56:	d005      	beq.n	8003f64 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b1d      	cmp	r3, #29
 8003f5c:	d002      	beq.n	8003f64 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b2d      	cmp	r3, #45	; 0x2d
 8003f62:	d114      	bne.n	8003f8e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003f64:	f7ff fa3a 	bl	80033dc <HAL_GetTick>
 8003f68:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003f6a:	e009      	b.n	8003f80 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f6c:	f7ff fa36 	bl	80033dc <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f7a:	d901      	bls.n	8003f80 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e007      	b.n	8003f90 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8c:	d1ee      	bne.n	8003f6c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	58024800 	.word	0x58024800

08003f9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08c      	sub	sp, #48	; 0x30
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e3ff      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 8087 	beq.w	80040ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fbc:	4b99      	ldr	r3, [pc, #612]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fc6:	4b97      	ldr	r3, [pc, #604]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fce:	2b10      	cmp	r3, #16
 8003fd0:	d007      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x46>
 8003fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd4:	2b18      	cmp	r3, #24
 8003fd6:	d110      	bne.n	8003ffa <HAL_RCC_OscConfig+0x5e>
 8003fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d10b      	bne.n	8003ffa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe2:	4b90      	ldr	r3, [pc, #576]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d06c      	beq.n	80040c8 <HAL_RCC_OscConfig+0x12c>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d168      	bne.n	80040c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e3d9      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004002:	d106      	bne.n	8004012 <HAL_RCC_OscConfig+0x76>
 8004004:	4b87      	ldr	r3, [pc, #540]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a86      	ldr	r2, [pc, #536]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 800400a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	e02e      	b.n	8004070 <HAL_RCC_OscConfig+0xd4>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10c      	bne.n	8004034 <HAL_RCC_OscConfig+0x98>
 800401a:	4b82      	ldr	r3, [pc, #520]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a81      	ldr	r2, [pc, #516]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 8004020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	4b7f      	ldr	r3, [pc, #508]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a7e      	ldr	r2, [pc, #504]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 800402c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	e01d      	b.n	8004070 <HAL_RCC_OscConfig+0xd4>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800403c:	d10c      	bne.n	8004058 <HAL_RCC_OscConfig+0xbc>
 800403e:	4b79      	ldr	r3, [pc, #484]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a78      	ldr	r2, [pc, #480]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 8004044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	4b76      	ldr	r3, [pc, #472]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a75      	ldr	r2, [pc, #468]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 8004050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	e00b      	b.n	8004070 <HAL_RCC_OscConfig+0xd4>
 8004058:	4b72      	ldr	r3, [pc, #456]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a71      	ldr	r2, [pc, #452]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 800405e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	4b6f      	ldr	r3, [pc, #444]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a6e      	ldr	r2, [pc, #440]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 800406a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800406e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d013      	beq.n	80040a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7ff f9b0 	bl	80033dc <HAL_GetTick>
 800407c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004080:	f7ff f9ac 	bl	80033dc <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b64      	cmp	r3, #100	; 0x64
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e38d      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004092:	4b64      	ldr	r3, [pc, #400]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0xe4>
 800409e:	e014      	b.n	80040ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a0:	f7ff f99c 	bl	80033dc <HAL_GetTick>
 80040a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040a8:	f7ff f998 	bl	80033dc <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b64      	cmp	r3, #100	; 0x64
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e379      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040ba:	4b5a      	ldr	r3, [pc, #360]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f0      	bne.n	80040a8 <HAL_RCC_OscConfig+0x10c>
 80040c6:	e000      	b.n	80040ca <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 80ae 	beq.w	8004234 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040d8:	4b52      	ldr	r3, [pc, #328]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040e2:	4b50      	ldr	r3, [pc, #320]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <HAL_RCC_OscConfig+0x162>
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	2b18      	cmp	r3, #24
 80040f2:	d13a      	bne.n	800416a <HAL_RCC_OscConfig+0x1ce>
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d135      	bne.n	800416a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040fe:	4b49      	ldr	r3, [pc, #292]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b00      	cmp	r3, #0
 8004108:	d005      	beq.n	8004116 <HAL_RCC_OscConfig+0x17a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e34b      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004116:	f7ff f98f 	bl	8003438 <HAL_GetREVID>
 800411a:	4602      	mov	r2, r0
 800411c:	f241 0303 	movw	r3, #4099	; 0x1003
 8004120:	429a      	cmp	r2, r3
 8004122:	d817      	bhi.n	8004154 <HAL_RCC_OscConfig+0x1b8>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	2b40      	cmp	r3, #64	; 0x40
 800412a:	d108      	bne.n	800413e <HAL_RCC_OscConfig+0x1a2>
 800412c:	4b3d      	ldr	r3, [pc, #244]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004134:	4a3b      	ldr	r2, [pc, #236]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 8004136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800413a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800413c:	e07a      	b.n	8004234 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800413e:	4b39      	ldr	r3, [pc, #228]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	031b      	lsls	r3, r3, #12
 800414c:	4935      	ldr	r1, [pc, #212]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 800414e:	4313      	orrs	r3, r2
 8004150:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004152:	e06f      	b.n	8004234 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004154:	4b33      	ldr	r3, [pc, #204]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	061b      	lsls	r3, r3, #24
 8004162:	4930      	ldr	r1, [pc, #192]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 8004164:	4313      	orrs	r3, r2
 8004166:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004168:	e064      	b.n	8004234 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d045      	beq.n	80041fe <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004172:	4b2c      	ldr	r3, [pc, #176]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 0219 	bic.w	r2, r3, #25
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	4929      	ldr	r1, [pc, #164]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 8004180:	4313      	orrs	r3, r2
 8004182:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7ff f92a 	bl	80033dc <HAL_GetTick>
 8004188:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800418c:	f7ff f926 	bl	80033dc <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e307      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800419e:	4b21      	ldr	r3, [pc, #132]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041aa:	f7ff f945 	bl	8003438 <HAL_GetREVID>
 80041ae:	4602      	mov	r2, r0
 80041b0:	f241 0303 	movw	r3, #4099	; 0x1003
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d817      	bhi.n	80041e8 <HAL_RCC_OscConfig+0x24c>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	2b40      	cmp	r3, #64	; 0x40
 80041be:	d108      	bne.n	80041d2 <HAL_RCC_OscConfig+0x236>
 80041c0:	4b18      	ldr	r3, [pc, #96]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80041c8:	4a16      	ldr	r2, [pc, #88]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 80041ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ce:	6053      	str	r3, [r2, #4]
 80041d0:	e030      	b.n	8004234 <HAL_RCC_OscConfig+0x298>
 80041d2:	4b14      	ldr	r3, [pc, #80]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	031b      	lsls	r3, r3, #12
 80041e0:	4910      	ldr	r1, [pc, #64]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	604b      	str	r3, [r1, #4]
 80041e6:	e025      	b.n	8004234 <HAL_RCC_OscConfig+0x298>
 80041e8:	4b0e      	ldr	r3, [pc, #56]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	061b      	lsls	r3, r3, #24
 80041f6:	490b      	ldr	r1, [pc, #44]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	604b      	str	r3, [r1, #4]
 80041fc:	e01a      	b.n	8004234 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041fe:	4b09      	ldr	r3, [pc, #36]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a08      	ldr	r2, [pc, #32]	; (8004224 <HAL_RCC_OscConfig+0x288>)
 8004204:	f023 0301 	bic.w	r3, r3, #1
 8004208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420a:	f7ff f8e7 	bl	80033dc <HAL_GetTick>
 800420e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004210:	e00a      	b.n	8004228 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004212:	f7ff f8e3 	bl	80033dc <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d903      	bls.n	8004228 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e2c4      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
 8004224:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004228:	4ba4      	ldr	r3, [pc, #656]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1ee      	bne.n	8004212 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0310 	and.w	r3, r3, #16
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 80a9 	beq.w	8004394 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004242:	4b9e      	ldr	r3, [pc, #632]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800424a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800424c:	4b9b      	ldr	r3, [pc, #620]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004250:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b08      	cmp	r3, #8
 8004256:	d007      	beq.n	8004268 <HAL_RCC_OscConfig+0x2cc>
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	2b18      	cmp	r3, #24
 800425c:	d13a      	bne.n	80042d4 <HAL_RCC_OscConfig+0x338>
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	2b01      	cmp	r3, #1
 8004266:	d135      	bne.n	80042d4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004268:	4b94      	ldr	r3, [pc, #592]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_RCC_OscConfig+0x2e4>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	2b80      	cmp	r3, #128	; 0x80
 800427a:	d001      	beq.n	8004280 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e296      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004280:	f7ff f8da 	bl	8003438 <HAL_GetREVID>
 8004284:	4602      	mov	r2, r0
 8004286:	f241 0303 	movw	r3, #4099	; 0x1003
 800428a:	429a      	cmp	r2, r3
 800428c:	d817      	bhi.n	80042be <HAL_RCC_OscConfig+0x322>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	2b20      	cmp	r3, #32
 8004294:	d108      	bne.n	80042a8 <HAL_RCC_OscConfig+0x30c>
 8004296:	4b89      	ldr	r3, [pc, #548]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800429e:	4a87      	ldr	r2, [pc, #540]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 80042a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042a4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042a6:	e075      	b.n	8004394 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042a8:	4b84      	ldr	r3, [pc, #528]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	069b      	lsls	r3, r3, #26
 80042b6:	4981      	ldr	r1, [pc, #516]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042bc:	e06a      	b.n	8004394 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042be:	4b7f      	ldr	r3, [pc, #508]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	061b      	lsls	r3, r3, #24
 80042cc:	497b      	ldr	r1, [pc, #492]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042d2:	e05f      	b.n	8004394 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d042      	beq.n	8004362 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80042dc:	4b77      	ldr	r3, [pc, #476]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a76      	ldr	r2, [pc, #472]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 80042e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e8:	f7ff f878 	bl	80033dc <HAL_GetTick>
 80042ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80042f0:	f7ff f874 	bl	80033dc <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e255      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004302:	4b6e      	ldr	r3, [pc, #440]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800430e:	f7ff f893 	bl	8003438 <HAL_GetREVID>
 8004312:	4602      	mov	r2, r0
 8004314:	f241 0303 	movw	r3, #4099	; 0x1003
 8004318:	429a      	cmp	r2, r3
 800431a:	d817      	bhi.n	800434c <HAL_RCC_OscConfig+0x3b0>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	2b20      	cmp	r3, #32
 8004322:	d108      	bne.n	8004336 <HAL_RCC_OscConfig+0x39a>
 8004324:	4b65      	ldr	r3, [pc, #404]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800432c:	4a63      	ldr	r2, [pc, #396]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 800432e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004332:	6053      	str	r3, [r2, #4]
 8004334:	e02e      	b.n	8004394 <HAL_RCC_OscConfig+0x3f8>
 8004336:	4b61      	ldr	r3, [pc, #388]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	069b      	lsls	r3, r3, #26
 8004344:	495d      	ldr	r1, [pc, #372]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 8004346:	4313      	orrs	r3, r2
 8004348:	604b      	str	r3, [r1, #4]
 800434a:	e023      	b.n	8004394 <HAL_RCC_OscConfig+0x3f8>
 800434c:	4b5b      	ldr	r3, [pc, #364]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	061b      	lsls	r3, r3, #24
 800435a:	4958      	ldr	r1, [pc, #352]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 800435c:	4313      	orrs	r3, r2
 800435e:	60cb      	str	r3, [r1, #12]
 8004360:	e018      	b.n	8004394 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004362:	4b56      	ldr	r3, [pc, #344]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a55      	ldr	r2, [pc, #340]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 8004368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800436c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436e:	f7ff f835 	bl	80033dc <HAL_GetTick>
 8004372:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004376:	f7ff f831 	bl	80033dc <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e212      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004388:	4b4c      	ldr	r3, [pc, #304]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1f0      	bne.n	8004376 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b00      	cmp	r3, #0
 800439e:	d036      	beq.n	800440e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d019      	beq.n	80043dc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043a8:	4b44      	ldr	r3, [pc, #272]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 80043aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ac:	4a43      	ldr	r2, [pc, #268]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b4:	f7ff f812 	bl	80033dc <HAL_GetTick>
 80043b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043bc:	f7ff f80e 	bl	80033dc <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e1ef      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043ce:	4b3b      	ldr	r3, [pc, #236]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 80043d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0x420>
 80043da:	e018      	b.n	800440e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043dc:	4b37      	ldr	r3, [pc, #220]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 80043de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e0:	4a36      	ldr	r2, [pc, #216]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e8:	f7fe fff8 	bl	80033dc <HAL_GetTick>
 80043ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043f0:	f7fe fff4 	bl	80033dc <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e1d5      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004402:	4b2e      	ldr	r3, [pc, #184]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 8004404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d036      	beq.n	8004488 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d019      	beq.n	8004456 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004422:	4b26      	ldr	r3, [pc, #152]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a25      	ldr	r2, [pc, #148]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 8004428:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800442c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800442e:	f7fe ffd5 	bl	80033dc <HAL_GetTick>
 8004432:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004436:	f7fe ffd1 	bl	80033dc <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e1b2      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004448:	4b1c      	ldr	r3, [pc, #112]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0f0      	beq.n	8004436 <HAL_RCC_OscConfig+0x49a>
 8004454:	e018      	b.n	8004488 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004456:	4b19      	ldr	r3, [pc, #100]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a18      	ldr	r2, [pc, #96]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 800445c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004460:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004462:	f7fe ffbb 	bl	80033dc <HAL_GetTick>
 8004466:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800446a:	f7fe ffb7 	bl	80033dc <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e198      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800447c:	4b0f      	ldr	r3, [pc, #60]	; (80044bc <HAL_RCC_OscConfig+0x520>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f0      	bne.n	800446a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 8085 	beq.w	80045a0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004496:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <HAL_RCC_OscConfig+0x524>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a09      	ldr	r2, [pc, #36]	; (80044c0 <HAL_RCC_OscConfig+0x524>)
 800449c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044a2:	f7fe ff9b 	bl	80033dc <HAL_GetTick>
 80044a6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044a8:	e00c      	b.n	80044c4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044aa:	f7fe ff97 	bl	80033dc <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b64      	cmp	r3, #100	; 0x64
 80044b6:	d905      	bls.n	80044c4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e178      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
 80044bc:	58024400 	.word	0x58024400
 80044c0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044c4:	4b96      	ldr	r3, [pc, #600]	; (8004720 <HAL_RCC_OscConfig+0x784>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0ec      	beq.n	80044aa <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d106      	bne.n	80044e6 <HAL_RCC_OscConfig+0x54a>
 80044d8:	4b92      	ldr	r3, [pc, #584]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	4a91      	ldr	r2, [pc, #580]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 80044de:	f043 0301 	orr.w	r3, r3, #1
 80044e2:	6713      	str	r3, [r2, #112]	; 0x70
 80044e4:	e02d      	b.n	8004542 <HAL_RCC_OscConfig+0x5a6>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10c      	bne.n	8004508 <HAL_RCC_OscConfig+0x56c>
 80044ee:	4b8d      	ldr	r3, [pc, #564]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	4a8c      	ldr	r2, [pc, #560]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 80044f4:	f023 0301 	bic.w	r3, r3, #1
 80044f8:	6713      	str	r3, [r2, #112]	; 0x70
 80044fa:	4b8a      	ldr	r3, [pc, #552]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fe:	4a89      	ldr	r2, [pc, #548]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 8004500:	f023 0304 	bic.w	r3, r3, #4
 8004504:	6713      	str	r3, [r2, #112]	; 0x70
 8004506:	e01c      	b.n	8004542 <HAL_RCC_OscConfig+0x5a6>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b05      	cmp	r3, #5
 800450e:	d10c      	bne.n	800452a <HAL_RCC_OscConfig+0x58e>
 8004510:	4b84      	ldr	r3, [pc, #528]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 8004512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004514:	4a83      	ldr	r2, [pc, #524]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 8004516:	f043 0304 	orr.w	r3, r3, #4
 800451a:	6713      	str	r3, [r2, #112]	; 0x70
 800451c:	4b81      	ldr	r3, [pc, #516]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 800451e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004520:	4a80      	ldr	r2, [pc, #512]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	6713      	str	r3, [r2, #112]	; 0x70
 8004528:	e00b      	b.n	8004542 <HAL_RCC_OscConfig+0x5a6>
 800452a:	4b7e      	ldr	r3, [pc, #504]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	4a7d      	ldr	r2, [pc, #500]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 8004530:	f023 0301 	bic.w	r3, r3, #1
 8004534:	6713      	str	r3, [r2, #112]	; 0x70
 8004536:	4b7b      	ldr	r3, [pc, #492]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	4a7a      	ldr	r2, [pc, #488]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 800453c:	f023 0304 	bic.w	r3, r3, #4
 8004540:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d015      	beq.n	8004576 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454a:	f7fe ff47 	bl	80033dc <HAL_GetTick>
 800454e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004550:	e00a      	b.n	8004568 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004552:	f7fe ff43 	bl	80033dc <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004560:	4293      	cmp	r3, r2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e122      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004568:	4b6e      	ldr	r3, [pc, #440]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0ee      	beq.n	8004552 <HAL_RCC_OscConfig+0x5b6>
 8004574:	e014      	b.n	80045a0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004576:	f7fe ff31 	bl	80033dc <HAL_GetTick>
 800457a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800457c:	e00a      	b.n	8004594 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800457e:	f7fe ff2d 	bl	80033dc <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	f241 3288 	movw	r2, #5000	; 0x1388
 800458c:	4293      	cmp	r3, r2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e10c      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004594:	4b63      	ldr	r3, [pc, #396]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 8004596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1ee      	bne.n	800457e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 8101 	beq.w	80047ac <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80045aa:	4b5e      	ldr	r3, [pc, #376]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045b2:	2b18      	cmp	r3, #24
 80045b4:	f000 80bc 	beq.w	8004730 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	2b02      	cmp	r3, #2
 80045be:	f040 8095 	bne.w	80046ec <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045c2:	4b58      	ldr	r3, [pc, #352]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a57      	ldr	r2, [pc, #348]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 80045c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ce:	f7fe ff05 	bl	80033dc <HAL_GetTick>
 80045d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045d6:	f7fe ff01 	bl	80033dc <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e0e2      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045e8:	4b4e      	ldr	r3, [pc, #312]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1f0      	bne.n	80045d6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045f4:	4b4b      	ldr	r3, [pc, #300]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 80045f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045f8:	4b4b      	ldr	r3, [pc, #300]	; (8004728 <HAL_RCC_OscConfig+0x78c>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004604:	0112      	lsls	r2, r2, #4
 8004606:	430a      	orrs	r2, r1
 8004608:	4946      	ldr	r1, [pc, #280]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 800460a:	4313      	orrs	r3, r2
 800460c:	628b      	str	r3, [r1, #40]	; 0x28
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004612:	3b01      	subs	r3, #1
 8004614:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461c:	3b01      	subs	r3, #1
 800461e:	025b      	lsls	r3, r3, #9
 8004620:	b29b      	uxth	r3, r3
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	3b01      	subs	r3, #1
 800462a:	041b      	lsls	r3, r3, #16
 800462c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004636:	3b01      	subs	r3, #1
 8004638:	061b      	lsls	r3, r3, #24
 800463a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800463e:	4939      	ldr	r1, [pc, #228]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 8004640:	4313      	orrs	r3, r2
 8004642:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004644:	4b37      	ldr	r3, [pc, #220]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	4a36      	ldr	r2, [pc, #216]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 800464a:	f023 0301 	bic.w	r3, r3, #1
 800464e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004650:	4b34      	ldr	r3, [pc, #208]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 8004652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004654:	4b35      	ldr	r3, [pc, #212]	; (800472c <HAL_RCC_OscConfig+0x790>)
 8004656:	4013      	ands	r3, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800465c:	00d2      	lsls	r2, r2, #3
 800465e:	4931      	ldr	r1, [pc, #196]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 8004660:	4313      	orrs	r3, r2
 8004662:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004664:	4b2f      	ldr	r3, [pc, #188]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	f023 020c 	bic.w	r2, r3, #12
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	492c      	ldr	r1, [pc, #176]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 8004672:	4313      	orrs	r3, r2
 8004674:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004676:	4b2b      	ldr	r3, [pc, #172]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467a:	f023 0202 	bic.w	r2, r3, #2
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	4928      	ldr	r1, [pc, #160]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 8004684:	4313      	orrs	r3, r2
 8004686:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004688:	4b26      	ldr	r3, [pc, #152]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	4a25      	ldr	r2, [pc, #148]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 800468e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004692:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004694:	4b23      	ldr	r3, [pc, #140]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004698:	4a22      	ldr	r2, [pc, #136]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 800469a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800469e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80046a0:	4b20      	ldr	r3, [pc, #128]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	4a1f      	ldr	r2, [pc, #124]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 80046a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80046ac:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	4a1c      	ldr	r2, [pc, #112]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b8:	4b1a      	ldr	r3, [pc, #104]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a19      	ldr	r2, [pc, #100]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 80046be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c4:	f7fe fe8a 	bl	80033dc <HAL_GetTick>
 80046c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046cc:	f7fe fe86 	bl	80033dc <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e067      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046de:	4b11      	ldr	r3, [pc, #68]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCC_OscConfig+0x730>
 80046ea:	e05f      	b.n	80047ac <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ec:	4b0d      	ldr	r3, [pc, #52]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a0c      	ldr	r2, [pc, #48]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 80046f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f8:	f7fe fe70 	bl	80033dc <HAL_GetTick>
 80046fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004700:	f7fe fe6c 	bl	80033dc <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e04d      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004712:	4b04      	ldr	r3, [pc, #16]	; (8004724 <HAL_RCC_OscConfig+0x788>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x764>
 800471e:	e045      	b.n	80047ac <HAL_RCC_OscConfig+0x810>
 8004720:	58024800 	.word	0x58024800
 8004724:	58024400 	.word	0x58024400
 8004728:	fffffc0c 	.word	0xfffffc0c
 800472c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004730:	4b21      	ldr	r3, [pc, #132]	; (80047b8 <HAL_RCC_OscConfig+0x81c>)
 8004732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004734:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004736:	4b20      	ldr	r3, [pc, #128]	; (80047b8 <HAL_RCC_OscConfig+0x81c>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	2b01      	cmp	r3, #1
 8004742:	d031      	beq.n	80047a8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f003 0203 	and.w	r2, r3, #3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800474e:	429a      	cmp	r2, r3
 8004750:	d12a      	bne.n	80047a8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	091b      	lsrs	r3, r3, #4
 8004756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475e:	429a      	cmp	r2, r3
 8004760:	d122      	bne.n	80047a8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800476e:	429a      	cmp	r2, r3
 8004770:	d11a      	bne.n	80047a8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	0a5b      	lsrs	r3, r3, #9
 8004776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004780:	429a      	cmp	r2, r3
 8004782:	d111      	bne.n	80047a8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	0c1b      	lsrs	r3, r3, #16
 8004788:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004792:	429a      	cmp	r2, r3
 8004794:	d108      	bne.n	80047a8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	0e1b      	lsrs	r3, r3, #24
 800479a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3730      	adds	r7, #48	; 0x30
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	58024400 	.word	0x58024400

080047bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e19c      	b.n	8004b0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047d0:	4b8a      	ldr	r3, [pc, #552]	; (80049fc <HAL_RCC_ClockConfig+0x240>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d910      	bls.n	8004800 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047de:	4b87      	ldr	r3, [pc, #540]	; (80049fc <HAL_RCC_ClockConfig+0x240>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 020f 	bic.w	r2, r3, #15
 80047e6:	4985      	ldr	r1, [pc, #532]	; (80049fc <HAL_RCC_ClockConfig+0x240>)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ee:	4b83      	ldr	r3, [pc, #524]	; (80049fc <HAL_RCC_ClockConfig+0x240>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d001      	beq.n	8004800 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e184      	b.n	8004b0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	d010      	beq.n	800482e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	4b7b      	ldr	r3, [pc, #492]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004818:	429a      	cmp	r2, r3
 800481a:	d908      	bls.n	800482e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800481c:	4b78      	ldr	r3, [pc, #480]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	4975      	ldr	r1, [pc, #468]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 800482a:	4313      	orrs	r3, r2
 800482c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d010      	beq.n	800485c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695a      	ldr	r2, [r3, #20]
 800483e:	4b70      	ldr	r3, [pc, #448]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004846:	429a      	cmp	r2, r3
 8004848:	d908      	bls.n	800485c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800484a:	4b6d      	ldr	r3, [pc, #436]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	496a      	ldr	r1, [pc, #424]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 8004858:	4313      	orrs	r3, r2
 800485a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	2b00      	cmp	r3, #0
 8004866:	d010      	beq.n	800488a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699a      	ldr	r2, [r3, #24]
 800486c:	4b64      	ldr	r3, [pc, #400]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004874:	429a      	cmp	r2, r3
 8004876:	d908      	bls.n	800488a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004878:	4b61      	ldr	r3, [pc, #388]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	495e      	ldr	r1, [pc, #376]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 8004886:	4313      	orrs	r3, r2
 8004888:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b00      	cmp	r3, #0
 8004894:	d010      	beq.n	80048b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69da      	ldr	r2, [r3, #28]
 800489a:	4b59      	ldr	r3, [pc, #356]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d908      	bls.n	80048b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80048a6:	4b56      	ldr	r3, [pc, #344]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	4953      	ldr	r1, [pc, #332]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d010      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	4b4d      	ldr	r3, [pc, #308]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d908      	bls.n	80048e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d4:	4b4a      	ldr	r3, [pc, #296]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	f023 020f 	bic.w	r2, r3, #15
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	4947      	ldr	r1, [pc, #284]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d055      	beq.n	800499e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80048f2:	4b43      	ldr	r3, [pc, #268]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	4940      	ldr	r1, [pc, #256]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 8004900:	4313      	orrs	r3, r2
 8004902:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2b02      	cmp	r3, #2
 800490a:	d107      	bne.n	800491c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800490c:	4b3c      	ldr	r3, [pc, #240]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d121      	bne.n	800495c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0f6      	b.n	8004b0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b03      	cmp	r3, #3
 8004922:	d107      	bne.n	8004934 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004924:	4b36      	ldr	r3, [pc, #216]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d115      	bne.n	800495c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e0ea      	b.n	8004b0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d107      	bne.n	800494c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800493c:	4b30      	ldr	r3, [pc, #192]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004944:	2b00      	cmp	r3, #0
 8004946:	d109      	bne.n	800495c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e0de      	b.n	8004b0a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800494c:	4b2c      	ldr	r3, [pc, #176]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e0d6      	b.n	8004b0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800495c:	4b28      	ldr	r3, [pc, #160]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f023 0207 	bic.w	r2, r3, #7
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	4925      	ldr	r1, [pc, #148]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 800496a:	4313      	orrs	r3, r2
 800496c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496e:	f7fe fd35 	bl	80033dc <HAL_GetTick>
 8004972:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004974:	e00a      	b.n	800498c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004976:	f7fe fd31 	bl	80033dc <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	f241 3288 	movw	r2, #5000	; 0x1388
 8004984:	4293      	cmp	r3, r2
 8004986:	d901      	bls.n	800498c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e0be      	b.n	8004b0a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498c:	4b1c      	ldr	r3, [pc, #112]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	429a      	cmp	r2, r3
 800499c:	d1eb      	bne.n	8004976 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d010      	beq.n	80049cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	4b14      	ldr	r3, [pc, #80]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d208      	bcs.n	80049cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ba:	4b11      	ldr	r3, [pc, #68]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f023 020f 	bic.w	r2, r3, #15
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	490e      	ldr	r1, [pc, #56]	; (8004a00 <HAL_RCC_ClockConfig+0x244>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <HAL_RCC_ClockConfig+0x240>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 030f 	and.w	r3, r3, #15
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d214      	bcs.n	8004a04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049da:	4b08      	ldr	r3, [pc, #32]	; (80049fc <HAL_RCC_ClockConfig+0x240>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f023 020f 	bic.w	r2, r3, #15
 80049e2:	4906      	ldr	r1, [pc, #24]	; (80049fc <HAL_RCC_ClockConfig+0x240>)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ea:	4b04      	ldr	r3, [pc, #16]	; (80049fc <HAL_RCC_ClockConfig+0x240>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d005      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e086      	b.n	8004b0a <HAL_RCC_ClockConfig+0x34e>
 80049fc:	52002000 	.word	0x52002000
 8004a00:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d010      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	4b3f      	ldr	r3, [pc, #252]	; (8004b14 <HAL_RCC_ClockConfig+0x358>)
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d208      	bcs.n	8004a32 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a20:	4b3c      	ldr	r3, [pc, #240]	; (8004b14 <HAL_RCC_ClockConfig+0x358>)
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	4939      	ldr	r1, [pc, #228]	; (8004b14 <HAL_RCC_ClockConfig+0x358>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d010      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	695a      	ldr	r2, [r3, #20]
 8004a42:	4b34      	ldr	r3, [pc, #208]	; (8004b14 <HAL_RCC_ClockConfig+0x358>)
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d208      	bcs.n	8004a60 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a4e:	4b31      	ldr	r3, [pc, #196]	; (8004b14 <HAL_RCC_ClockConfig+0x358>)
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	492e      	ldr	r1, [pc, #184]	; (8004b14 <HAL_RCC_ClockConfig+0x358>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d010      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699a      	ldr	r2, [r3, #24]
 8004a70:	4b28      	ldr	r3, [pc, #160]	; (8004b14 <HAL_RCC_ClockConfig+0x358>)
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d208      	bcs.n	8004a8e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a7c:	4b25      	ldr	r3, [pc, #148]	; (8004b14 <HAL_RCC_ClockConfig+0x358>)
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	4922      	ldr	r1, [pc, #136]	; (8004b14 <HAL_RCC_ClockConfig+0x358>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d010      	beq.n	8004abc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69da      	ldr	r2, [r3, #28]
 8004a9e:	4b1d      	ldr	r3, [pc, #116]	; (8004b14 <HAL_RCC_ClockConfig+0x358>)
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d208      	bcs.n	8004abc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004aaa:	4b1a      	ldr	r3, [pc, #104]	; (8004b14 <HAL_RCC_ClockConfig+0x358>)
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	4917      	ldr	r1, [pc, #92]	; (8004b14 <HAL_RCC_ClockConfig+0x358>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004abc:	f000 f834 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8004ac0:	4601      	mov	r1, r0
 8004ac2:	4b14      	ldr	r3, [pc, #80]	; (8004b14 <HAL_RCC_ClockConfig+0x358>)
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	0a1b      	lsrs	r3, r3, #8
 8004ac8:	f003 030f 	and.w	r3, r3, #15
 8004acc:	4a12      	ldr	r2, [pc, #72]	; (8004b18 <HAL_RCC_ClockConfig+0x35c>)
 8004ace:	5cd3      	ldrb	r3, [r2, r3]
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	fa21 f303 	lsr.w	r3, r1, r3
 8004ad8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ada:	4b0e      	ldr	r3, [pc, #56]	; (8004b14 <HAL_RCC_ClockConfig+0x358>)
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	4a0d      	ldr	r2, [pc, #52]	; (8004b18 <HAL_RCC_ClockConfig+0x35c>)
 8004ae4:	5cd3      	ldrb	r3, [r2, r3]
 8004ae6:	f003 031f 	and.w	r3, r3, #31
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	fa22 f303 	lsr.w	r3, r2, r3
 8004af0:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <HAL_RCC_ClockConfig+0x360>)
 8004af2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004af4:	4a0a      	ldr	r2, [pc, #40]	; (8004b20 <HAL_RCC_ClockConfig+0x364>)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004afa:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <HAL_RCC_ClockConfig+0x368>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fe fc22 	bl	8003348 <HAL_InitTick>
 8004b04:	4603      	mov	r3, r0
 8004b06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	58024400 	.word	0x58024400
 8004b18:	08009804 	.word	0x08009804
 8004b1c:	24000004 	.word	0x24000004
 8004b20:	24000000 	.word	0x24000000
 8004b24:	24000008 	.word	0x24000008

08004b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b089      	sub	sp, #36	; 0x24
 8004b2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b2e:	4baf      	ldr	r3, [pc, #700]	; (8004dec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b36:	2b18      	cmp	r3, #24
 8004b38:	f200 814e 	bhi.w	8004dd8 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004b3c:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b42:	bf00      	nop
 8004b44:	08004ba9 	.word	0x08004ba9
 8004b48:	08004dd9 	.word	0x08004dd9
 8004b4c:	08004dd9 	.word	0x08004dd9
 8004b50:	08004dd9 	.word	0x08004dd9
 8004b54:	08004dd9 	.word	0x08004dd9
 8004b58:	08004dd9 	.word	0x08004dd9
 8004b5c:	08004dd9 	.word	0x08004dd9
 8004b60:	08004dd9 	.word	0x08004dd9
 8004b64:	08004bcf 	.word	0x08004bcf
 8004b68:	08004dd9 	.word	0x08004dd9
 8004b6c:	08004dd9 	.word	0x08004dd9
 8004b70:	08004dd9 	.word	0x08004dd9
 8004b74:	08004dd9 	.word	0x08004dd9
 8004b78:	08004dd9 	.word	0x08004dd9
 8004b7c:	08004dd9 	.word	0x08004dd9
 8004b80:	08004dd9 	.word	0x08004dd9
 8004b84:	08004bd5 	.word	0x08004bd5
 8004b88:	08004dd9 	.word	0x08004dd9
 8004b8c:	08004dd9 	.word	0x08004dd9
 8004b90:	08004dd9 	.word	0x08004dd9
 8004b94:	08004dd9 	.word	0x08004dd9
 8004b98:	08004dd9 	.word	0x08004dd9
 8004b9c:	08004dd9 	.word	0x08004dd9
 8004ba0:	08004dd9 	.word	0x08004dd9
 8004ba4:	08004bdb 	.word	0x08004bdb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ba8:	4b90      	ldr	r3, [pc, #576]	; (8004dec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d009      	beq.n	8004bc8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bb4:	4b8d      	ldr	r3, [pc, #564]	; (8004dec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	08db      	lsrs	r3, r3, #3
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	4a8c      	ldr	r2, [pc, #560]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004bc6:	e10a      	b.n	8004dde <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004bc8:	4b89      	ldr	r3, [pc, #548]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004bca:	61bb      	str	r3, [r7, #24]
    break;
 8004bcc:	e107      	b.n	8004dde <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004bce:	4b89      	ldr	r3, [pc, #548]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004bd0:	61bb      	str	r3, [r7, #24]
    break;
 8004bd2:	e104      	b.n	8004dde <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004bd4:	4b88      	ldr	r3, [pc, #544]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004bd6:	61bb      	str	r3, [r7, #24]
    break;
 8004bd8:	e101      	b.n	8004dde <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bda:	4b84      	ldr	r3, [pc, #528]	; (8004dec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004be4:	4b81      	ldr	r3, [pc, #516]	; (8004dec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be8:	091b      	lsrs	r3, r3, #4
 8004bea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004bf0:	4b7e      	ldr	r3, [pc, #504]	; (8004dec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004bfa:	4b7c      	ldr	r3, [pc, #496]	; (8004dec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfe:	08db      	lsrs	r3, r3, #3
 8004c00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	fb02 f303 	mul.w	r3, r2, r3
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c12:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 80da 	beq.w	8004dd2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d05a      	beq.n	8004cda <HAL_RCC_GetSysClockFreq+0x1b2>
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d302      	bcc.n	8004c2e <HAL_RCC_GetSysClockFreq+0x106>
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d078      	beq.n	8004d1e <HAL_RCC_GetSysClockFreq+0x1f6>
 8004c2c:	e099      	b.n	8004d62 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c2e:	4b6f      	ldr	r3, [pc, #444]	; (8004dec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d02d      	beq.n	8004c96 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c3a:	4b6c      	ldr	r3, [pc, #432]	; (8004dec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	08db      	lsrs	r3, r3, #3
 8004c40:	f003 0303 	and.w	r3, r3, #3
 8004c44:	4a6a      	ldr	r2, [pc, #424]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004c46:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	ee07 3a90 	vmov	s15, r3
 8004c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c64:	4b61      	ldr	r3, [pc, #388]	; (8004dec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6c:	ee07 3a90 	vmov	s15, r3
 8004c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c74:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c78:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004dfc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004c7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c90:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004c94:	e087      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	ee07 3a90 	vmov	s15, r3
 8004c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004e00 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004ca4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ca8:	4b50      	ldr	r3, [pc, #320]	; (8004dec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb0:	ee07 3a90 	vmov	s15, r3
 8004cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cbc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004dfc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004cc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cd8:	e065      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	ee07 3a90 	vmov	s15, r3
 8004ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004e04 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004ce8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cec:	4b3f      	ldr	r3, [pc, #252]	; (8004dec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf4:	ee07 3a90 	vmov	s15, r3
 8004cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d00:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004dfc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004d04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d1c:	e043      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	ee07 3a90 	vmov	s15, r3
 8004d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d28:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004e08 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004d2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d30:	4b2e      	ldr	r3, [pc, #184]	; (8004dec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d38:	ee07 3a90 	vmov	s15, r3
 8004d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d40:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d44:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004dfc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004d48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d60:	e021      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	ee07 3a90 	vmov	s15, r3
 8004d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004e04 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d74:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7c:	ee07 3a90 	vmov	s15, r3
 8004d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d84:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d88:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004dfc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004da4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004da6:	4b11      	ldr	r3, [pc, #68]	; (8004dec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	0a5b      	lsrs	r3, r3, #9
 8004dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004db0:	3301      	adds	r3, #1
 8004db2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004dbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dca:	ee17 3a90 	vmov	r3, s15
 8004dce:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004dd0:	e005      	b.n	8004dde <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61bb      	str	r3, [r7, #24]
    break;
 8004dd6:	e002      	b.n	8004dde <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004dd8:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004dda:	61bb      	str	r3, [r7, #24]
    break;
 8004ddc:	bf00      	nop
  }

  return sysclockfreq;
 8004dde:	69bb      	ldr	r3, [r7, #24]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3724      	adds	r7, #36	; 0x24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	58024400 	.word	0x58024400
 8004df0:	03d09000 	.word	0x03d09000
 8004df4:	003d0900 	.word	0x003d0900
 8004df8:	02625a00 	.word	0x02625a00
 8004dfc:	46000000 	.word	0x46000000
 8004e00:	4c742400 	.word	0x4c742400
 8004e04:	4a742400 	.word	0x4a742400
 8004e08:	4c189680 	.word	0x4c189680

08004e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004e12:	f7ff fe89 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8004e16:	4601      	mov	r1, r0
 8004e18:	4b10      	ldr	r3, [pc, #64]	; (8004e5c <HAL_RCC_GetHCLKFreq+0x50>)
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	0a1b      	lsrs	r3, r3, #8
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	4a0f      	ldr	r2, [pc, #60]	; (8004e60 <HAL_RCC_GetHCLKFreq+0x54>)
 8004e24:	5cd3      	ldrb	r3, [r2, r3]
 8004e26:	f003 031f 	and.w	r3, r3, #31
 8004e2a:	fa21 f303 	lsr.w	r3, r1, r3
 8004e2e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e30:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <HAL_RCC_GetHCLKFreq+0x50>)
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	4a09      	ldr	r2, [pc, #36]	; (8004e60 <HAL_RCC_GetHCLKFreq+0x54>)
 8004e3a:	5cd3      	ldrb	r3, [r2, r3]
 8004e3c:	f003 031f 	and.w	r3, r3, #31
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	fa22 f303 	lsr.w	r3, r2, r3
 8004e46:	4a07      	ldr	r2, [pc, #28]	; (8004e64 <HAL_RCC_GetHCLKFreq+0x58>)
 8004e48:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e4a:	4a07      	ldr	r2, [pc, #28]	; (8004e68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004e50:	4b04      	ldr	r3, [pc, #16]	; (8004e64 <HAL_RCC_GetHCLKFreq+0x58>)
 8004e52:	681b      	ldr	r3, [r3, #0]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	58024400 	.word	0x58024400
 8004e60:	08009804 	.word	0x08009804
 8004e64:	24000004 	.word	0x24000004
 8004e68:	24000000 	.word	0x24000000

08004e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004e70:	f7ff ffcc 	bl	8004e0c <HAL_RCC_GetHCLKFreq>
 8004e74:	4601      	mov	r1, r0
 8004e76:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	091b      	lsrs	r3, r3, #4
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	4a04      	ldr	r2, [pc, #16]	; (8004e94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e82:	5cd3      	ldrb	r3, [r2, r3]
 8004e84:	f003 031f 	and.w	r3, r3, #31
 8004e88:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	58024400 	.word	0x58024400
 8004e94:	08009804 	.word	0x08009804

08004e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004e9c:	f7ff ffb6 	bl	8004e0c <HAL_RCC_GetHCLKFreq>
 8004ea0:	4601      	mov	r1, r0
 8004ea2:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	0a1b      	lsrs	r3, r3, #8
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	4a04      	ldr	r2, [pc, #16]	; (8004ec0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004eae:	5cd3      	ldrb	r3, [r2, r3]
 8004eb0:	f003 031f 	and.w	r3, r3, #31
 8004eb4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	58024400 	.word	0x58024400
 8004ec0:	08009804 	.word	0x08009804

08004ec4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ecc:	2300      	movs	r3, #0
 8004ece:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d03d      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ee8:	d013      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004eea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eee:	d802      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d007      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004ef4:	e01f      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004ef6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004efa:	d013      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004efc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f00:	d01c      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004f02:	e018      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f04:	4baf      	ldr	r3, [pc, #700]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	4aae      	ldr	r2, [pc, #696]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f10:	e015      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3304      	adds	r3, #4
 8004f16:	2102      	movs	r1, #2
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f001 f96f 	bl	80061fc <RCCEx_PLL2_Config>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f22:	e00c      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3324      	adds	r3, #36	; 0x24
 8004f28:	2102      	movs	r1, #2
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f001 fa18 	bl	8006360 <RCCEx_PLL3_Config>
 8004f30:	4603      	mov	r3, r0
 8004f32:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f34:	e003      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	75fb      	strb	r3, [r7, #23]
      break;
 8004f3a:	e000      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004f3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d109      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004f44:	4b9f      	ldr	r3, [pc, #636]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f50:	499c      	ldr	r1, [pc, #624]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	650b      	str	r3, [r1, #80]	; 0x50
 8004f56:	e001      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
 8004f5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d03d      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d826      	bhi.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004f70:	a201      	add	r2, pc, #4	; (adr r2, 8004f78 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f76:	bf00      	nop
 8004f78:	08004f8d 	.word	0x08004f8d
 8004f7c:	08004f9b 	.word	0x08004f9b
 8004f80:	08004fad 	.word	0x08004fad
 8004f84:	08004fc5 	.word	0x08004fc5
 8004f88:	08004fc5 	.word	0x08004fc5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f8c:	4b8d      	ldr	r3, [pc, #564]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	4a8c      	ldr	r2, [pc, #560]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f98:	e015      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f001 f92b 	bl	80061fc <RCCEx_PLL2_Config>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004faa:	e00c      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3324      	adds	r3, #36	; 0x24
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f001 f9d4 	bl	8006360 <RCCEx_PLL3_Config>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fbc:	e003      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fc6:	7dfb      	ldrb	r3, [r7, #23]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d109      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fcc:	4b7d      	ldr	r3, [pc, #500]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd0:	f023 0207 	bic.w	r2, r3, #7
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd8:	497a      	ldr	r1, [pc, #488]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	650b      	str	r3, [r1, #80]	; 0x50
 8004fde:	e001      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
 8004fe2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d03e      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff4:	2b80      	cmp	r3, #128	; 0x80
 8004ff6:	d01c      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004ff8:	2b80      	cmp	r3, #128	; 0x80
 8004ffa:	d804      	bhi.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d008      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005000:	2b40      	cmp	r3, #64	; 0x40
 8005002:	d00d      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005004:	e01e      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005006:	2bc0      	cmp	r3, #192	; 0xc0
 8005008:	d01f      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800500a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800500e:	d01e      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005010:	e018      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005012:	4b6c      	ldr	r3, [pc, #432]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005016:	4a6b      	ldr	r2, [pc, #428]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800501c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800501e:	e017      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3304      	adds	r3, #4
 8005024:	2100      	movs	r1, #0
 8005026:	4618      	mov	r0, r3
 8005028:	f001 f8e8 	bl	80061fc <RCCEx_PLL2_Config>
 800502c:	4603      	mov	r3, r0
 800502e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005030:	e00e      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3324      	adds	r3, #36	; 0x24
 8005036:	2100      	movs	r1, #0
 8005038:	4618      	mov	r0, r3
 800503a:	f001 f991 	bl	8006360 <RCCEx_PLL3_Config>
 800503e:	4603      	mov	r3, r0
 8005040:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005042:	e005      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	75fb      	strb	r3, [r7, #23]
      break;
 8005048:	e002      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800504a:	bf00      	nop
 800504c:	e000      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800504e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005050:	7dfb      	ldrb	r3, [r7, #23]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d109      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005056:	4b5b      	ldr	r3, [pc, #364]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005062:	4958      	ldr	r1, [pc, #352]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005064:	4313      	orrs	r3, r2
 8005066:	650b      	str	r3, [r1, #80]	; 0x50
 8005068:	e001      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800506a:	7dfb      	ldrb	r3, [r7, #23]
 800506c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005076:	2b00      	cmp	r3, #0
 8005078:	d044      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005084:	d01f      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800508a:	d805      	bhi.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005090:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005094:	d00e      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8005096:	e01f      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005098:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800509c:	d01f      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800509e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050a2:	d01e      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80050a4:	e018      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a6:	4b47      	ldr	r3, [pc, #284]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050aa:	4a46      	ldr	r2, [pc, #280]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050b2:	e017      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3304      	adds	r3, #4
 80050b8:	2100      	movs	r1, #0
 80050ba:	4618      	mov	r0, r3
 80050bc:	f001 f89e 	bl	80061fc <RCCEx_PLL2_Config>
 80050c0:	4603      	mov	r3, r0
 80050c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80050c4:	e00e      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3324      	adds	r3, #36	; 0x24
 80050ca:	2100      	movs	r1, #0
 80050cc:	4618      	mov	r0, r3
 80050ce:	f001 f947 	bl	8006360 <RCCEx_PLL3_Config>
 80050d2:	4603      	mov	r3, r0
 80050d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050d6:	e005      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	75fb      	strb	r3, [r7, #23]
      break;
 80050dc:	e002      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80050de:	bf00      	nop
 80050e0:	e000      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80050e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050e4:	7dfb      	ldrb	r3, [r7, #23]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10a      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80050ea:	4b36      	ldr	r3, [pc, #216]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ee:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050f8:	4932      	ldr	r1, [pc, #200]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	658b      	str	r3, [r1, #88]	; 0x58
 80050fe:	e001      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005100:	7dfb      	ldrb	r3, [r7, #23]
 8005102:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800510c:	2b00      	cmp	r3, #0
 800510e:	d044      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800511a:	d01f      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800511c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005120:	d805      	bhi.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005126:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800512a:	d00e      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800512c:	e01f      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800512e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005132:	d01f      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005134:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005138:	d01e      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800513a:	e018      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800513c:	4b21      	ldr	r3, [pc, #132]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005140:	4a20      	ldr	r2, [pc, #128]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005146:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005148:	e017      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	3304      	adds	r3, #4
 800514e:	2100      	movs	r1, #0
 8005150:	4618      	mov	r0, r3
 8005152:	f001 f853 	bl	80061fc <RCCEx_PLL2_Config>
 8005156:	4603      	mov	r3, r0
 8005158:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800515a:	e00e      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3324      	adds	r3, #36	; 0x24
 8005160:	2100      	movs	r1, #0
 8005162:	4618      	mov	r0, r3
 8005164:	f001 f8fc 	bl	8006360 <RCCEx_PLL3_Config>
 8005168:	4603      	mov	r3, r0
 800516a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800516c:	e005      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	75fb      	strb	r3, [r7, #23]
      break;
 8005172:	e002      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005174:	bf00      	nop
 8005176:	e000      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005178:	bf00      	nop
    }

    if(ret == HAL_OK)
 800517a:	7dfb      	ldrb	r3, [r7, #23]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10a      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005180:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005184:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800518e:	490d      	ldr	r1, [pc, #52]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005190:	4313      	orrs	r3, r2
 8005192:	658b      	str	r3, [r1, #88]	; 0x58
 8005194:	e001      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005196:	7dfb      	ldrb	r3, [r7, #23]
 8005198:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d035      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051aa:	2b10      	cmp	r3, #16
 80051ac:	d00c      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80051ae:	2b10      	cmp	r3, #16
 80051b0:	d802      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d01b      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80051b6:	e017      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d00c      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80051bc:	2b30      	cmp	r3, #48	; 0x30
 80051be:	d018      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80051c0:	e012      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80051c2:	bf00      	nop
 80051c4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051c8:	4baf      	ldr	r3, [pc, #700]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	4aae      	ldr	r2, [pc, #696]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80051d4:	e00e      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3304      	adds	r3, #4
 80051da:	2102      	movs	r1, #2
 80051dc:	4618      	mov	r0, r3
 80051de:	f001 f80d 	bl	80061fc <RCCEx_PLL2_Config>
 80051e2:	4603      	mov	r3, r0
 80051e4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80051e6:	e005      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	75fb      	strb	r3, [r7, #23]
      break;
 80051ec:	e002      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80051ee:	bf00      	nop
 80051f0:	e000      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80051f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d109      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80051fa:	4ba3      	ldr	r3, [pc, #652]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005206:	49a0      	ldr	r1, [pc, #640]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005208:	4313      	orrs	r3, r2
 800520a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800520c:	e001      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520e:	7dfb      	ldrb	r3, [r7, #23]
 8005210:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d042      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005226:	d01f      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800522c:	d805      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005236:	d00e      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005238:	e01f      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800523a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800523e:	d01f      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005240:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005244:	d01e      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005246:	e018      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005248:	4b8f      	ldr	r3, [pc, #572]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	4a8e      	ldr	r2, [pc, #568]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800524e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005252:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005254:	e017      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3304      	adds	r3, #4
 800525a:	2100      	movs	r1, #0
 800525c:	4618      	mov	r0, r3
 800525e:	f000 ffcd 	bl	80061fc <RCCEx_PLL2_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005266:	e00e      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3324      	adds	r3, #36	; 0x24
 800526c:	2100      	movs	r1, #0
 800526e:	4618      	mov	r0, r3
 8005270:	f001 f876 	bl	8006360 <RCCEx_PLL3_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005278:	e005      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	75fb      	strb	r3, [r7, #23]
      break;
 800527e:	e002      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005280:	bf00      	nop
 8005282:	e000      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005286:	7dfb      	ldrb	r3, [r7, #23]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d109      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800528c:	4b7e      	ldr	r3, [pc, #504]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800528e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005290:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005298:	497b      	ldr	r1, [pc, #492]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800529a:	4313      	orrs	r3, r2
 800529c:	650b      	str	r3, [r1, #80]	; 0x50
 800529e:	e001      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a0:	7dfb      	ldrb	r3, [r7, #23]
 80052a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d042      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052b8:	d01b      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80052ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052be:	d805      	bhi.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d022      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x446>
 80052c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c8:	d00a      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80052ca:	e01b      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80052cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052d0:	d01d      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80052d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052d6:	d01c      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80052d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052dc:	d01b      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80052de:	e011      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3304      	adds	r3, #4
 80052e4:	2101      	movs	r1, #1
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 ff88 	bl	80061fc <RCCEx_PLL2_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80052f0:	e012      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3324      	adds	r3, #36	; 0x24
 80052f6:	2101      	movs	r1, #1
 80052f8:	4618      	mov	r0, r3
 80052fa:	f001 f831 	bl	8006360 <RCCEx_PLL3_Config>
 80052fe:	4603      	mov	r3, r0
 8005300:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005302:	e009      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	75fb      	strb	r3, [r7, #23]
      break;
 8005308:	e006      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800530a:	bf00      	nop
 800530c:	e004      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800530e:	bf00      	nop
 8005310:	e002      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005312:	bf00      	nop
 8005314:	e000      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005318:	7dfb      	ldrb	r3, [r7, #23]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800531e:	4b5a      	ldr	r3, [pc, #360]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005322:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800532a:	4957      	ldr	r1, [pc, #348]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800532c:	4313      	orrs	r3, r2
 800532e:	650b      	str	r3, [r1, #80]	; 0x50
 8005330:	e001      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005332:	7dfb      	ldrb	r3, [r7, #23]
 8005334:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d044      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800534c:	d01b      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800534e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005352:	d805      	bhi.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005354:	2b00      	cmp	r3, #0
 8005356:	d022      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005358:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800535c:	d00a      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800535e:	e01b      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005364:	d01d      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005366:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800536a:	d01c      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800536c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005370:	d01b      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005372:	e011      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3304      	adds	r3, #4
 8005378:	2101      	movs	r1, #1
 800537a:	4618      	mov	r0, r3
 800537c:	f000 ff3e 	bl	80061fc <RCCEx_PLL2_Config>
 8005380:	4603      	mov	r3, r0
 8005382:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005384:	e012      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3324      	adds	r3, #36	; 0x24
 800538a:	2101      	movs	r1, #1
 800538c:	4618      	mov	r0, r3
 800538e:	f000 ffe7 	bl	8006360 <RCCEx_PLL3_Config>
 8005392:	4603      	mov	r3, r0
 8005394:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005396:	e009      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	75fb      	strb	r3, [r7, #23]
      break;
 800539c:	e006      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800539e:	bf00      	nop
 80053a0:	e004      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80053a2:	bf00      	nop
 80053a4:	e002      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80053a6:	bf00      	nop
 80053a8:	e000      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80053aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053ac:	7dfb      	ldrb	r3, [r7, #23]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10a      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80053b2:	4b35      	ldr	r3, [pc, #212]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053c0:	4931      	ldr	r1, [pc, #196]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	658b      	str	r3, [r1, #88]	; 0x58
 80053c6:	e001      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
 80053ca:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d02d      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053e0:	d005      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80053e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e6:	d009      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x538>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d013      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80053ec:	e00f      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ee:	4b26      	ldr	r3, [pc, #152]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	4a25      	ldr	r2, [pc, #148]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80053fa:	e00c      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	3304      	adds	r3, #4
 8005400:	2101      	movs	r1, #1
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fefa 	bl	80061fc <RCCEx_PLL2_Config>
 8005408:	4603      	mov	r3, r0
 800540a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800540c:	e003      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	75fb      	strb	r3, [r7, #23]
      break;
 8005412:	e000      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005416:	7dfb      	ldrb	r3, [r7, #23]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d109      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800541c:	4b1a      	ldr	r3, [pc, #104]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800541e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005420:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005428:	4917      	ldr	r1, [pc, #92]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800542a:	4313      	orrs	r3, r2
 800542c:	650b      	str	r3, [r1, #80]	; 0x50
 800542e:	e001      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005430:	7dfb      	ldrb	r3, [r7, #23]
 8005432:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d035      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005444:	2b03      	cmp	r3, #3
 8005446:	d81b      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005448:	a201      	add	r2, pc, #4	; (adr r2, 8005450 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800544a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544e:	bf00      	nop
 8005450:	0800548d 	.word	0x0800548d
 8005454:	08005461 	.word	0x08005461
 8005458:	0800546f 	.word	0x0800546f
 800545c:	0800548d 	.word	0x0800548d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005460:	4b09      	ldr	r3, [pc, #36]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	4a08      	ldr	r2, [pc, #32]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800546a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800546c:	e00f      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3304      	adds	r3, #4
 8005472:	2102      	movs	r1, #2
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fec1 	bl	80061fc <RCCEx_PLL2_Config>
 800547a:	4603      	mov	r3, r0
 800547c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800547e:	e006      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	75fb      	strb	r3, [r7, #23]
      break;
 8005484:	e003      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005486:	bf00      	nop
 8005488:	58024400 	.word	0x58024400
      break;
 800548c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800548e:	7dfb      	ldrb	r3, [r7, #23]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d109      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005494:	4bba      	ldr	r3, [pc, #744]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005498:	f023 0203 	bic.w	r2, r3, #3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a0:	49b7      	ldr	r1, [pc, #732]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80054a6:	e001      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a8:	7dfb      	ldrb	r3, [r7, #23]
 80054aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 8086 	beq.w	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054ba:	4bb2      	ldr	r3, [pc, #712]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4ab1      	ldr	r2, [pc, #708]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80054c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054c6:	f7fd ff89 	bl	80033dc <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054cc:	e009      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ce:	f7fd ff85 	bl	80033dc <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b64      	cmp	r3, #100	; 0x64
 80054da:	d902      	bls.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	75fb      	strb	r3, [r7, #23]
        break;
 80054e0:	e005      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054e2:	4ba8      	ldr	r3, [pc, #672]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0ef      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80054ee:	7dfb      	ldrb	r3, [r7, #23]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d166      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80054f4:	4ba2      	ldr	r3, [pc, #648]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054fe:	4053      	eors	r3, r2
 8005500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005504:	2b00      	cmp	r3, #0
 8005506:	d013      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005508:	4b9d      	ldr	r3, [pc, #628]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800550a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005510:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005512:	4b9b      	ldr	r3, [pc, #620]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005516:	4a9a      	ldr	r2, [pc, #616]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800551c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800551e:	4b98      	ldr	r3, [pc, #608]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005522:	4a97      	ldr	r2, [pc, #604]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005528:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800552a:	4a95      	ldr	r2, [pc, #596]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800553a:	d115      	bne.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553c:	f7fd ff4e 	bl	80033dc <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005542:	e00b      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005544:	f7fd ff4a 	bl	80033dc <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005552:	4293      	cmp	r3, r2
 8005554:	d902      	bls.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	75fb      	strb	r3, [r7, #23]
            break;
 800555a:	e005      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800555c:	4b88      	ldr	r3, [pc, #544]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800555e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0ed      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005568:	7dfb      	ldrb	r3, [r7, #23]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d126      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800557c:	d10d      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800557e:	4b80      	ldr	r3, [pc, #512]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800558c:	0919      	lsrs	r1, r3, #4
 800558e:	4b7e      	ldr	r3, [pc, #504]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005590:	400b      	ands	r3, r1
 8005592:	497b      	ldr	r1, [pc, #492]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005594:	4313      	orrs	r3, r2
 8005596:	610b      	str	r3, [r1, #16]
 8005598:	e005      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800559a:	4b79      	ldr	r3, [pc, #484]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	4a78      	ldr	r2, [pc, #480]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80055a4:	6113      	str	r3, [r2, #16]
 80055a6:	4b76      	ldr	r3, [pc, #472]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b4:	4972      	ldr	r1, [pc, #456]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	670b      	str	r3, [r1, #112]	; 0x70
 80055ba:	e004      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055bc:	7dfb      	ldrb	r3, [r7, #23]
 80055be:	75bb      	strb	r3, [r7, #22]
 80055c0:	e001      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c2:	7dfb      	ldrb	r3, [r7, #23]
 80055c4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d07d      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055d6:	2b28      	cmp	r3, #40	; 0x28
 80055d8:	d866      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80055da:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80055dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e0:	080056af 	.word	0x080056af
 80055e4:	080056a9 	.word	0x080056a9
 80055e8:	080056a9 	.word	0x080056a9
 80055ec:	080056a9 	.word	0x080056a9
 80055f0:	080056a9 	.word	0x080056a9
 80055f4:	080056a9 	.word	0x080056a9
 80055f8:	080056a9 	.word	0x080056a9
 80055fc:	080056a9 	.word	0x080056a9
 8005600:	08005685 	.word	0x08005685
 8005604:	080056a9 	.word	0x080056a9
 8005608:	080056a9 	.word	0x080056a9
 800560c:	080056a9 	.word	0x080056a9
 8005610:	080056a9 	.word	0x080056a9
 8005614:	080056a9 	.word	0x080056a9
 8005618:	080056a9 	.word	0x080056a9
 800561c:	080056a9 	.word	0x080056a9
 8005620:	08005697 	.word	0x08005697
 8005624:	080056a9 	.word	0x080056a9
 8005628:	080056a9 	.word	0x080056a9
 800562c:	080056a9 	.word	0x080056a9
 8005630:	080056a9 	.word	0x080056a9
 8005634:	080056a9 	.word	0x080056a9
 8005638:	080056a9 	.word	0x080056a9
 800563c:	080056a9 	.word	0x080056a9
 8005640:	080056af 	.word	0x080056af
 8005644:	080056a9 	.word	0x080056a9
 8005648:	080056a9 	.word	0x080056a9
 800564c:	080056a9 	.word	0x080056a9
 8005650:	080056a9 	.word	0x080056a9
 8005654:	080056a9 	.word	0x080056a9
 8005658:	080056a9 	.word	0x080056a9
 800565c:	080056a9 	.word	0x080056a9
 8005660:	080056af 	.word	0x080056af
 8005664:	080056a9 	.word	0x080056a9
 8005668:	080056a9 	.word	0x080056a9
 800566c:	080056a9 	.word	0x080056a9
 8005670:	080056a9 	.word	0x080056a9
 8005674:	080056a9 	.word	0x080056a9
 8005678:	080056a9 	.word	0x080056a9
 800567c:	080056a9 	.word	0x080056a9
 8005680:	080056af 	.word	0x080056af
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3304      	adds	r3, #4
 8005688:	2101      	movs	r1, #1
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fdb6 	bl	80061fc <RCCEx_PLL2_Config>
 8005690:	4603      	mov	r3, r0
 8005692:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005694:	e00c      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3324      	adds	r3, #36	; 0x24
 800569a:	2101      	movs	r1, #1
 800569c:	4618      	mov	r0, r3
 800569e:	f000 fe5f 	bl	8006360 <RCCEx_PLL3_Config>
 80056a2:	4603      	mov	r3, r0
 80056a4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80056a6:	e003      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	75fb      	strb	r3, [r7, #23]
      break;
 80056ac:	e000      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80056ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056b0:	7dfb      	ldrb	r3, [r7, #23]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d109      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80056b6:	4b32      	ldr	r3, [pc, #200]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056c2:	492f      	ldr	r1, [pc, #188]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	654b      	str	r3, [r1, #84]	; 0x54
 80056c8:	e001      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
 80056cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d037      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056de:	2b05      	cmp	r3, #5
 80056e0:	d820      	bhi.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80056e2:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80056e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e8:	0800572b 	.word	0x0800572b
 80056ec:	08005701 	.word	0x08005701
 80056f0:	08005713 	.word	0x08005713
 80056f4:	0800572b 	.word	0x0800572b
 80056f8:	0800572b 	.word	0x0800572b
 80056fc:	0800572b 	.word	0x0800572b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3304      	adds	r3, #4
 8005704:	2101      	movs	r1, #1
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fd78 	bl	80061fc <RCCEx_PLL2_Config>
 800570c:	4603      	mov	r3, r0
 800570e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005710:	e00c      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	3324      	adds	r3, #36	; 0x24
 8005716:	2101      	movs	r1, #1
 8005718:	4618      	mov	r0, r3
 800571a:	f000 fe21 	bl	8006360 <RCCEx_PLL3_Config>
 800571e:	4603      	mov	r3, r0
 8005720:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005722:	e003      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	75fb      	strb	r3, [r7, #23]
      break;
 8005728:	e000      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800572a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800572c:	7dfb      	ldrb	r3, [r7, #23]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d109      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005732:	4b13      	ldr	r3, [pc, #76]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005736:	f023 0207 	bic.w	r2, r3, #7
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800573e:	4910      	ldr	r1, [pc, #64]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005740:	4313      	orrs	r3, r2
 8005742:	654b      	str	r3, [r1, #84]	; 0x54
 8005744:	e001      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005746:	7dfb      	ldrb	r3, [r7, #23]
 8005748:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0304 	and.w	r3, r3, #4
 8005752:	2b00      	cmp	r3, #0
 8005754:	d040      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575c:	2b05      	cmp	r3, #5
 800575e:	d827      	bhi.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005760:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	080057b7 	.word	0x080057b7
 800576c:	0800578d 	.word	0x0800578d
 8005770:	0800579f 	.word	0x0800579f
 8005774:	080057b7 	.word	0x080057b7
 8005778:	080057b7 	.word	0x080057b7
 800577c:	080057b7 	.word	0x080057b7
 8005780:	58024400 	.word	0x58024400
 8005784:	58024800 	.word	0x58024800
 8005788:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3304      	adds	r3, #4
 8005790:	2101      	movs	r1, #1
 8005792:	4618      	mov	r0, r3
 8005794:	f000 fd32 	bl	80061fc <RCCEx_PLL2_Config>
 8005798:	4603      	mov	r3, r0
 800579a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800579c:	e00c      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	3324      	adds	r3, #36	; 0x24
 80057a2:	2101      	movs	r1, #1
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fddb 	bl	8006360 <RCCEx_PLL3_Config>
 80057aa:	4603      	mov	r3, r0
 80057ac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80057ae:	e003      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	75fb      	strb	r3, [r7, #23]
      break;
 80057b4:	e000      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80057b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10a      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057be:	4bb2      	ldr	r3, [pc, #712]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80057c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c2:	f023 0207 	bic.w	r2, r3, #7
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057cc:	49ae      	ldr	r1, [pc, #696]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	658b      	str	r3, [r1, #88]	; 0x58
 80057d2:	e001      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
 80057d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0320 	and.w	r3, r3, #32
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d044      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057ee:	d01b      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80057f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057f4:	d805      	bhi.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d022      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80057fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057fe:	d00a      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005800:	e01b      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005806:	d01d      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800580c:	d01c      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800580e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005812:	d01b      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005814:	e011      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3304      	adds	r3, #4
 800581a:	2100      	movs	r1, #0
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fced 	bl	80061fc <RCCEx_PLL2_Config>
 8005822:	4603      	mov	r3, r0
 8005824:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005826:	e012      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3324      	adds	r3, #36	; 0x24
 800582c:	2102      	movs	r1, #2
 800582e:	4618      	mov	r0, r3
 8005830:	f000 fd96 	bl	8006360 <RCCEx_PLL3_Config>
 8005834:	4603      	mov	r3, r0
 8005836:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005838:	e009      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	75fb      	strb	r3, [r7, #23]
      break;
 800583e:	e006      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005840:	bf00      	nop
 8005842:	e004      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005844:	bf00      	nop
 8005846:	e002      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005848:	bf00      	nop
 800584a:	e000      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800584c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800584e:	7dfb      	ldrb	r3, [r7, #23]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005854:	4b8c      	ldr	r3, [pc, #560]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005858:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005862:	4989      	ldr	r1, [pc, #548]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005864:	4313      	orrs	r3, r2
 8005866:	654b      	str	r3, [r1, #84]	; 0x54
 8005868:	e001      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	d044      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005884:	d01b      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8005886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800588a:	d805      	bhi.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d022      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005894:	d00a      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005896:	e01b      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800589c:	d01d      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800589e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80058a2:	d01c      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80058a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058a8:	d01b      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80058aa:	e011      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3304      	adds	r3, #4
 80058b0:	2100      	movs	r1, #0
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fca2 	bl	80061fc <RCCEx_PLL2_Config>
 80058b8:	4603      	mov	r3, r0
 80058ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80058bc:	e012      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	3324      	adds	r3, #36	; 0x24
 80058c2:	2102      	movs	r1, #2
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 fd4b 	bl	8006360 <RCCEx_PLL3_Config>
 80058ca:	4603      	mov	r3, r0
 80058cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80058ce:	e009      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	75fb      	strb	r3, [r7, #23]
      break;
 80058d4:	e006      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80058d6:	bf00      	nop
 80058d8:	e004      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80058da:	bf00      	nop
 80058dc:	e002      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80058de:	bf00      	nop
 80058e0:	e000      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80058e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058e4:	7dfb      	ldrb	r3, [r7, #23]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058ea:	4b67      	ldr	r3, [pc, #412]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058f8:	4963      	ldr	r1, [pc, #396]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	658b      	str	r3, [r1, #88]	; 0x58
 80058fe:	e001      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005900:	7dfb      	ldrb	r3, [r7, #23]
 8005902:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590c:	2b00      	cmp	r3, #0
 800590e:	d044      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005916:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800591a:	d01b      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800591c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005920:	d805      	bhi.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8005922:	2b00      	cmp	r3, #0
 8005924:	d022      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800592a:	d00a      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800592c:	e01b      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800592e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005932:	d01d      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005934:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005938:	d01c      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800593a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800593e:	d01b      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005940:	e011      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3304      	adds	r3, #4
 8005946:	2100      	movs	r1, #0
 8005948:	4618      	mov	r0, r3
 800594a:	f000 fc57 	bl	80061fc <RCCEx_PLL2_Config>
 800594e:	4603      	mov	r3, r0
 8005950:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005952:	e012      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3324      	adds	r3, #36	; 0x24
 8005958:	2102      	movs	r1, #2
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fd00 	bl	8006360 <RCCEx_PLL3_Config>
 8005960:	4603      	mov	r3, r0
 8005962:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005964:	e009      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	75fb      	strb	r3, [r7, #23]
      break;
 800596a:	e006      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800596c:	bf00      	nop
 800596e:	e004      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005970:	bf00      	nop
 8005972:	e002      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005974:	bf00      	nop
 8005976:	e000      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005978:	bf00      	nop
    }

    if(ret == HAL_OK)
 800597a:	7dfb      	ldrb	r3, [r7, #23]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10a      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005980:	4b41      	ldr	r3, [pc, #260]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005984:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800598e:	493e      	ldr	r1, [pc, #248]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005990:	4313      	orrs	r3, r2
 8005992:	658b      	str	r3, [r1, #88]	; 0x58
 8005994:	e001      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005996:	7dfb      	ldrb	r3, [r7, #23]
 8005998:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d01a      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b0:	d10a      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3324      	adds	r3, #36	; 0x24
 80059b6:	2102      	movs	r1, #2
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 fcd1 	bl	8006360 <RCCEx_PLL3_Config>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80059c8:	4b2f      	ldr	r3, [pc, #188]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80059ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059d6:	492c      	ldr	r1, [pc, #176]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0310 	and.w	r3, r3, #16
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d01a      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f2:	d10a      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3324      	adds	r3, #36	; 0x24
 80059f8:	2102      	movs	r1, #2
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fcb0 	bl	8006360 <RCCEx_PLL3_Config>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a0a:	4b1f      	ldr	r3, [pc, #124]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a18:	491b      	ldr	r1, [pc, #108]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d032      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a34:	d00d      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8005a36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a3a:	d016      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d111      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3304      	adds	r3, #4
 8005a44:	2100      	movs	r1, #0
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 fbd8 	bl	80061fc <RCCEx_PLL2_Config>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005a50:	e00c      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3324      	adds	r3, #36	; 0x24
 8005a56:	2102      	movs	r1, #2
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fc81 	bl	8006360 <RCCEx_PLL3_Config>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005a62:	e003      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	75fb      	strb	r3, [r7, #23]
      break;
 8005a68:	e000      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a6c:	7dfb      	ldrb	r3, [r7, #23]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10c      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a72:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a80:	4901      	ldr	r1, [pc, #4]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	658b      	str	r3, [r1, #88]	; 0x58
 8005a86:	e003      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005a88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d02f      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005aa6:	d00c      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005aa8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005aac:	d015      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005aae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ab2:	d10f      	bne.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ab4:	4b79      	ldr	r3, [pc, #484]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	4a78      	ldr	r2, [pc, #480]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005abe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005ac0:	e00c      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3324      	adds	r3, #36	; 0x24
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 fc49 	bl	8006360 <RCCEx_PLL3_Config>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005ad2:	e003      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ad8:	e000      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005ada:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005adc:	7dfb      	ldrb	r3, [r7, #23]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10a      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ae2:	4b6e      	ldr	r3, [pc, #440]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005af0:	496a      	ldr	r1, [pc, #424]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	654b      	str	r3, [r1, #84]	; 0x54
 8005af6:	e001      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
 8005afa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d029      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b14:	d007      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005b16:	e00f      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b18:	4b60      	ldr	r3, [pc, #384]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1c:	4a5f      	ldr	r2, [pc, #380]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005b24:	e00b      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	2102      	movs	r1, #2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 fb65 	bl	80061fc <RCCEx_PLL2_Config>
 8005b32:	4603      	mov	r3, r0
 8005b34:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005b36:	e002      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b3e:	7dfb      	ldrb	r3, [r7, #23]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d109      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005b44:	4b55      	ldr	r3, [pc, #340]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b50:	4952      	ldr	r1, [pc, #328]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b56:	e001      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b58:	7dfb      	ldrb	r3, [r7, #23]
 8005b5a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00a      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3324      	adds	r3, #36	; 0x24
 8005b6c:	2102      	movs	r1, #2
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fbf6 	bl	8006360 <RCCEx_PLL3_Config>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d02f      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b92:	d00c      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b98:	d802      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d011      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005b9e:	e00d      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ba4:	d00f      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005ba6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005baa:	d00e      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005bac:	e006      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bae:	4b3b      	ldr	r3, [pc, #236]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	4a3a      	ldr	r2, [pc, #232]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005bba:	e007      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8005bc0:	e004      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005bc2:	bf00      	nop
 8005bc4:	e002      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005bc6:	bf00      	nop
 8005bc8:	e000      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d109      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bd2:	4b32      	ldr	r3, [pc, #200]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bde:	492f      	ldr	r1, [pc, #188]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	654b      	str	r3, [r1, #84]	; 0x54
 8005be4:	e001      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be6:	7dfb      	ldrb	r3, [r7, #23]
 8005be8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d008      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005bf6:	4b29      	ldr	r3, [pc, #164]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bfa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c02:	4926      	ldr	r1, [pc, #152]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d009      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005c14:	4b21      	ldr	r3, [pc, #132]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c22:	491e      	ldr	r1, [pc, #120]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d008      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c34:	4b19      	ldr	r3, [pc, #100]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c40:	4916      	ldr	r1, [pc, #88]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00d      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c52:	4b12      	ldr	r3, [pc, #72]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	4a11      	ldr	r2, [pc, #68]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c5c:	6113      	str	r3, [r2, #16]
 8005c5e:	4b0f      	ldr	r3, [pc, #60]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c60:	691a      	ldr	r2, [r3, #16]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005c68:	490c      	ldr	r1, [pc, #48]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	da08      	bge.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005c76:	4b09      	ldr	r3, [pc, #36]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c82:	4906      	ldr	r1, [pc, #24]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005c88:	7dbb      	ldrb	r3, [r7, #22]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e000      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	58024400 	.word	0x58024400

08005ca0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005ca4:	f7ff f8b2 	bl	8004e0c <HAL_RCC_GetHCLKFreq>
 8005ca8:	4601      	mov	r1, r0
 8005caa:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	091b      	lsrs	r3, r3, #4
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	4a04      	ldr	r2, [pc, #16]	; (8005cc8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005cb6:	5cd3      	ldrb	r3, [r2, r3]
 8005cb8:	f003 031f 	and.w	r3, r3, #31
 8005cbc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	58024400 	.word	0x58024400
 8005cc8:	08009804 	.word	0x08009804

08005ccc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b089      	sub	sp, #36	; 0x24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cd4:	4b9d      	ldr	r3, [pc, #628]	; (8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005cde:	4b9b      	ldr	r3, [pc, #620]	; (8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce2:	0b1b      	lsrs	r3, r3, #12
 8005ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ce8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005cea:	4b98      	ldr	r3, [pc, #608]	; (8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cee:	091b      	lsrs	r3, r3, #4
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005cf6:	4b95      	ldr	r3, [pc, #596]	; (8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfa:	08db      	lsrs	r3, r3, #3
 8005cfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	fb02 f303 	mul.w	r3, r2, r3
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 810a 	beq.w	8005f2e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d05a      	beq.n	8005dd6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d302      	bcc.n	8005d2a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d078      	beq.n	8005e1a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005d28:	e099      	b.n	8005e5e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d2a:	4b88      	ldr	r3, [pc, #544]	; (8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0320 	and.w	r3, r3, #32
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d02d      	beq.n	8005d92 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d36:	4b85      	ldr	r3, [pc, #532]	; (8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	08db      	lsrs	r3, r3, #3
 8005d3c:	f003 0303 	and.w	r3, r3, #3
 8005d40:	4a83      	ldr	r2, [pc, #524]	; (8005f50 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005d42:	fa22 f303 	lsr.w	r3, r2, r3
 8005d46:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	ee07 3a90 	vmov	s15, r3
 8005d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d60:	4b7a      	ldr	r3, [pc, #488]	; (8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d68:	ee07 3a90 	vmov	s15, r3
 8005d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d70:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d74:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005f54 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005d78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d8c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d90:	e087      	b.n	8005ea2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	ee07 3a90 	vmov	s15, r3
 8005d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005da0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005da4:	4b69      	ldr	r3, [pc, #420]	; (8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dac:	ee07 3a90 	vmov	s15, r3
 8005db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005db4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005db8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005f54 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005dbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dd4:	e065      	b.n	8005ea2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	ee07 3a90 	vmov	s15, r3
 8005ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005de4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de8:	4b58      	ldr	r3, [pc, #352]	; (8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df0:	ee07 3a90 	vmov	s15, r3
 8005df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dfc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005f54 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005e00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e18:	e043      	b.n	8005ea2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	ee07 3a90 	vmov	s15, r3
 8005e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e24:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005f60 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e2c:	4b47      	ldr	r3, [pc, #284]	; (8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e34:	ee07 3a90 	vmov	s15, r3
 8005e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e40:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005f54 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005e44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e5c:	e021      	b.n	8005ea2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	ee07 3a90 	vmov	s15, r3
 8005e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e68:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e70:	4b36      	ldr	r3, [pc, #216]	; (8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e78:	ee07 3a90 	vmov	s15, r3
 8005e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e80:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e84:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005f54 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005e88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e9c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ea0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005ea2:	4b2a      	ldr	r3, [pc, #168]	; (8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	0a5b      	lsrs	r3, r3, #9
 8005ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eac:	ee07 3a90 	vmov	s15, r3
 8005eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ebc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ec8:	ee17 2a90 	vmov	r2, s15
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005ed0:	4b1e      	ldr	r3, [pc, #120]	; (8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed4:	0c1b      	lsrs	r3, r3, #16
 8005ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eda:	ee07 3a90 	vmov	s15, r3
 8005ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ef6:	ee17 2a90 	vmov	r2, s15
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005efe:	4b13      	ldr	r3, [pc, #76]	; (8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	0e1b      	lsrs	r3, r3, #24
 8005f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f08:	ee07 3a90 	vmov	s15, r3
 8005f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f18:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f24:	ee17 2a90 	vmov	r2, s15
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f2c:	e008      	b.n	8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	609a      	str	r2, [r3, #8]
}
 8005f40:	bf00      	nop
 8005f42:	3724      	adds	r7, #36	; 0x24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	58024400 	.word	0x58024400
 8005f50:	03d09000 	.word	0x03d09000
 8005f54:	46000000 	.word	0x46000000
 8005f58:	4c742400 	.word	0x4c742400
 8005f5c:	4a742400 	.word	0x4a742400
 8005f60:	4c189680 	.word	0x4c189680

08005f64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b089      	sub	sp, #36	; 0x24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f6c:	4b9d      	ldr	r3, [pc, #628]	; (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f70:	f003 0303 	and.w	r3, r3, #3
 8005f74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005f76:	4b9b      	ldr	r3, [pc, #620]	; (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7a:	0d1b      	lsrs	r3, r3, #20
 8005f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f82:	4b98      	ldr	r3, [pc, #608]	; (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f86:	0a1b      	lsrs	r3, r3, #8
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005f8e:	4b95      	ldr	r3, [pc, #596]	; (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f92:	08db      	lsrs	r3, r3, #3
 8005f94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	fb02 f303 	mul.w	r3, r2, r3
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 810a 	beq.w	80061c6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d05a      	beq.n	800606e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d302      	bcc.n	8005fc2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d078      	beq.n	80060b2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8005fc0:	e099      	b.n	80060f6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fc2:	4b88      	ldr	r3, [pc, #544]	; (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d02d      	beq.n	800602a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fce:	4b85      	ldr	r3, [pc, #532]	; (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	08db      	lsrs	r3, r3, #3
 8005fd4:	f003 0303 	and.w	r3, r3, #3
 8005fd8:	4a83      	ldr	r2, [pc, #524]	; (80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005fda:	fa22 f303 	lsr.w	r3, r2, r3
 8005fde:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	ee07 3a90 	vmov	s15, r3
 8005ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff8:	4b7a      	ldr	r3, [pc, #488]	; (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006000:	ee07 3a90 	vmov	s15, r3
 8006004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006008:	ed97 6a03 	vldr	s12, [r7, #12]
 800600c:	eddf 5a77 	vldr	s11, [pc, #476]	; 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006010:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006014:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006018:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800601c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006024:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006028:	e087      	b.n	800613a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	ee07 3a90 	vmov	s15, r3
 8006030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006034:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80061f0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800603c:	4b69      	ldr	r3, [pc, #420]	; (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800603e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006044:	ee07 3a90 	vmov	s15, r3
 8006048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006050:	eddf 5a66 	vldr	s11, [pc, #408]	; 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006054:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006058:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800605c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006060:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006068:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800606c:	e065      	b.n	800613a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	ee07 3a90 	vmov	s15, r3
 8006074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006078:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800607c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006080:	4b58      	ldr	r3, [pc, #352]	; (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006088:	ee07 3a90 	vmov	s15, r3
 800608c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006090:	ed97 6a03 	vldr	s12, [r7, #12]
 8006094:	eddf 5a55 	vldr	s11, [pc, #340]	; 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006098:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800609c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060b0:	e043      	b.n	800613a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	ee07 3a90 	vmov	s15, r3
 80060b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060bc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80061f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80060c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c4:	4b47      	ldr	r3, [pc, #284]	; (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060cc:	ee07 3a90 	vmov	s15, r3
 80060d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80060d8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80060dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060f4:	e021      	b.n	800613a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	ee07 3a90 	vmov	s15, r3
 80060fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006100:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006104:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006108:	4b36      	ldr	r3, [pc, #216]	; (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006110:	ee07 3a90 	vmov	s15, r3
 8006114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006118:	ed97 6a03 	vldr	s12, [r7, #12]
 800611c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006120:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006124:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006128:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800612c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006134:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006138:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800613a:	4b2a      	ldr	r3, [pc, #168]	; (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	0a5b      	lsrs	r3, r3, #9
 8006140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006144:	ee07 3a90 	vmov	s15, r3
 8006148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800614c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006150:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006154:	edd7 6a07 	vldr	s13, [r7, #28]
 8006158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800615c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006160:	ee17 2a90 	vmov	r2, s15
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006168:	4b1e      	ldr	r3, [pc, #120]	; (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	0c1b      	lsrs	r3, r3, #16
 800616e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006172:	ee07 3a90 	vmov	s15, r3
 8006176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800617a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800617e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006182:	edd7 6a07 	vldr	s13, [r7, #28]
 8006186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800618a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800618e:	ee17 2a90 	vmov	r2, s15
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006196:	4b13      	ldr	r3, [pc, #76]	; (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	0e1b      	lsrs	r3, r3, #24
 800619c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a0:	ee07 3a90 	vmov	s15, r3
 80061a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80061b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061bc:	ee17 2a90 	vmov	r2, s15
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80061c4:	e008      	b.n	80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	609a      	str	r2, [r3, #8]
}
 80061d8:	bf00      	nop
 80061da:	3724      	adds	r7, #36	; 0x24
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	58024400 	.word	0x58024400
 80061e8:	03d09000 	.word	0x03d09000
 80061ec:	46000000 	.word	0x46000000
 80061f0:	4c742400 	.word	0x4c742400
 80061f4:	4a742400 	.word	0x4a742400
 80061f8:	4c189680 	.word	0x4c189680

080061fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800620a:	4b53      	ldr	r3, [pc, #332]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 800620c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	2b03      	cmp	r3, #3
 8006214:	d101      	bne.n	800621a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e099      	b.n	800634e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800621a:	4b4f      	ldr	r3, [pc, #316]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a4e      	ldr	r2, [pc, #312]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006220:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006226:	f7fd f8d9 	bl	80033dc <HAL_GetTick>
 800622a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800622c:	e008      	b.n	8006240 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800622e:	f7fd f8d5 	bl	80033dc <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d901      	bls.n	8006240 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e086      	b.n	800634e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006240:	4b45      	ldr	r3, [pc, #276]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1f0      	bne.n	800622e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800624c:	4b42      	ldr	r3, [pc, #264]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006250:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	031b      	lsls	r3, r3, #12
 800625a:	493f      	ldr	r1, [pc, #252]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 800625c:	4313      	orrs	r3, r2
 800625e:	628b      	str	r3, [r1, #40]	; 0x28
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	3b01      	subs	r3, #1
 8006266:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	3b01      	subs	r3, #1
 8006270:	025b      	lsls	r3, r3, #9
 8006272:	b29b      	uxth	r3, r3
 8006274:	431a      	orrs	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	3b01      	subs	r3, #1
 800627c:	041b      	lsls	r3, r3, #16
 800627e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	3b01      	subs	r3, #1
 800628a:	061b      	lsls	r3, r3, #24
 800628c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006290:	4931      	ldr	r1, [pc, #196]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006292:	4313      	orrs	r3, r2
 8006294:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006296:	4b30      	ldr	r3, [pc, #192]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	492d      	ldr	r1, [pc, #180]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80062a8:	4b2b      	ldr	r3, [pc, #172]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ac:	f023 0220 	bic.w	r2, r3, #32
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	4928      	ldr	r1, [pc, #160]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80062ba:	4b27      	ldr	r3, [pc, #156]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062be:	4a26      	ldr	r2, [pc, #152]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062c0:	f023 0310 	bic.w	r3, r3, #16
 80062c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80062c6:	4b24      	ldr	r3, [pc, #144]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062ca:	4b24      	ldr	r3, [pc, #144]	; (800635c <RCCEx_PLL2_Config+0x160>)
 80062cc:	4013      	ands	r3, r2
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	69d2      	ldr	r2, [r2, #28]
 80062d2:	00d2      	lsls	r2, r2, #3
 80062d4:	4920      	ldr	r1, [pc, #128]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80062da:	4b1f      	ldr	r3, [pc, #124]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062de:	4a1e      	ldr	r2, [pc, #120]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062e0:	f043 0310 	orr.w	r3, r3, #16
 80062e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d106      	bne.n	80062fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80062ec:	4b1a      	ldr	r3, [pc, #104]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f0:	4a19      	ldr	r2, [pc, #100]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062f8:	e00f      	b.n	800631a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d106      	bne.n	800630e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006300:	4b15      	ldr	r3, [pc, #84]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	4a14      	ldr	r2, [pc, #80]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800630a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800630c:	e005      	b.n	800631a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800630e:	4b12      	ldr	r3, [pc, #72]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006312:	4a11      	ldr	r2, [pc, #68]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006314:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006318:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800631a:	4b0f      	ldr	r3, [pc, #60]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a0e      	ldr	r2, [pc, #56]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006320:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006326:	f7fd f859 	bl	80033dc <HAL_GetTick>
 800632a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800632c:	e008      	b.n	8006340 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800632e:	f7fd f855 	bl	80033dc <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d901      	bls.n	8006340 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e006      	b.n	800634e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006340:	4b05      	ldr	r3, [pc, #20]	; (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0f0      	beq.n	800632e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800634c:	7bfb      	ldrb	r3, [r7, #15]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	58024400 	.word	0x58024400
 800635c:	ffff0007 	.word	0xffff0007

08006360 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800636e:	4b53      	ldr	r3, [pc, #332]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	2b03      	cmp	r3, #3
 8006378:	d101      	bne.n	800637e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e099      	b.n	80064b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800637e:	4b4f      	ldr	r3, [pc, #316]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a4e      	ldr	r2, [pc, #312]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800638a:	f7fd f827 	bl	80033dc <HAL_GetTick>
 800638e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006390:	e008      	b.n	80063a4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006392:	f7fd f823 	bl	80033dc <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d901      	bls.n	80063a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e086      	b.n	80064b2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063a4:	4b45      	ldr	r3, [pc, #276]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1f0      	bne.n	8006392 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80063b0:	4b42      	ldr	r3, [pc, #264]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 80063b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	051b      	lsls	r3, r3, #20
 80063be:	493f      	ldr	r1, [pc, #252]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	628b      	str	r3, [r1, #40]	; 0x28
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	3b01      	subs	r3, #1
 80063ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	025b      	lsls	r3, r3, #9
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	431a      	orrs	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	3b01      	subs	r3, #1
 80063e0:	041b      	lsls	r3, r3, #16
 80063e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	3b01      	subs	r3, #1
 80063ee:	061b      	lsls	r3, r3, #24
 80063f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063f4:	4931      	ldr	r1, [pc, #196]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80063fa:	4b30      	ldr	r3, [pc, #192]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	492d      	ldr	r1, [pc, #180]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006408:	4313      	orrs	r3, r2
 800640a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800640c:	4b2b      	ldr	r3, [pc, #172]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	4928      	ldr	r1, [pc, #160]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 800641a:	4313      	orrs	r3, r2
 800641c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800641e:	4b27      	ldr	r3, [pc, #156]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006422:	4a26      	ldr	r2, [pc, #152]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006428:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800642a:	4b24      	ldr	r3, [pc, #144]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 800642c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800642e:	4b24      	ldr	r3, [pc, #144]	; (80064c0 <RCCEx_PLL3_Config+0x160>)
 8006430:	4013      	ands	r3, r2
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	69d2      	ldr	r2, [r2, #28]
 8006436:	00d2      	lsls	r2, r2, #3
 8006438:	4920      	ldr	r1, [pc, #128]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 800643a:	4313      	orrs	r3, r2
 800643c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800643e:	4b1f      	ldr	r3, [pc, #124]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006442:	4a1e      	ldr	r2, [pc, #120]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006448:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d106      	bne.n	800645e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006450:	4b1a      	ldr	r3, [pc, #104]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	4a19      	ldr	r2, [pc, #100]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006456:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800645a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800645c:	e00f      	b.n	800647e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d106      	bne.n	8006472 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006464:	4b15      	ldr	r3, [pc, #84]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006468:	4a14      	ldr	r2, [pc, #80]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 800646a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800646e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006470:	e005      	b.n	800647e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006472:	4b12      	ldr	r3, [pc, #72]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	4a11      	ldr	r2, [pc, #68]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006478:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800647c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800647e:	4b0f      	ldr	r3, [pc, #60]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a0e      	ldr	r2, [pc, #56]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006488:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800648a:	f7fc ffa7 	bl	80033dc <HAL_GetTick>
 800648e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006490:	e008      	b.n	80064a4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006492:	f7fc ffa3 	bl	80033dc <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d901      	bls.n	80064a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e006      	b.n	80064b2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80064a4:	4b05      	ldr	r3, [pc, #20]	; (80064bc <RCCEx_PLL3_Config+0x15c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0f0      	beq.n	8006492 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	58024400 	.word	0x58024400
 80064c0:	ffff0007 	.word	0xffff0007

080064c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e049      	b.n	800656a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fc fe08 	bl	8003100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3304      	adds	r3, #4
 8006500:	4619      	mov	r1, r3
 8006502:	4610      	mov	r0, r2
 8006504:	f000 f934 	bl	8006770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b01      	cmp	r3, #1
 8006586:	d001      	beq.n	800658c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e019      	b.n	80065c0 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689a      	ldr	r2, [r3, #8]
 800659a:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <HAL_TIM_Base_Start+0x58>)
 800659c:	4013      	ands	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b06      	cmp	r3, #6
 80065a4:	d00b      	beq.n	80065be <HAL_TIM_Base_Start+0x4a>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ac:	d007      	beq.n	80065be <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f042 0201 	orr.w	r2, r2, #1
 80065bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	00010007 	.word	0x00010007

080065d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d101      	bne.n	80065e8 <HAL_TIM_ConfigClockSource+0x18>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e0b7      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x188>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	4b57      	ldr	r3, [pc, #348]	; (8006760 <HAL_TIM_ConfigClockSource+0x190>)
 8006604:	4013      	ands	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800660e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b70      	cmp	r3, #112	; 0x70
 800661e:	d02e      	beq.n	800667e <HAL_TIM_ConfigClockSource+0xae>
 8006620:	2b70      	cmp	r3, #112	; 0x70
 8006622:	d812      	bhi.n	800664a <HAL_TIM_ConfigClockSource+0x7a>
 8006624:	2b30      	cmp	r3, #48	; 0x30
 8006626:	f000 8084 	beq.w	8006732 <HAL_TIM_ConfigClockSource+0x162>
 800662a:	2b30      	cmp	r3, #48	; 0x30
 800662c:	d806      	bhi.n	800663c <HAL_TIM_ConfigClockSource+0x6c>
 800662e:	2b10      	cmp	r3, #16
 8006630:	d07f      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x162>
 8006632:	2b20      	cmp	r3, #32
 8006634:	d07d      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x162>
 8006636:	2b00      	cmp	r3, #0
 8006638:	d07b      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800663a:	e084      	b.n	8006746 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800663c:	2b50      	cmp	r3, #80	; 0x50
 800663e:	d048      	beq.n	80066d2 <HAL_TIM_ConfigClockSource+0x102>
 8006640:	2b60      	cmp	r3, #96	; 0x60
 8006642:	d056      	beq.n	80066f2 <HAL_TIM_ConfigClockSource+0x122>
 8006644:	2b40      	cmp	r3, #64	; 0x40
 8006646:	d064      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8006648:	e07d      	b.n	8006746 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800664a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800664e:	d070      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x162>
 8006650:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006654:	d809      	bhi.n	800666a <HAL_TIM_ConfigClockSource+0x9a>
 8006656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800665a:	d027      	beq.n	80066ac <HAL_TIM_ConfigClockSource+0xdc>
 800665c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006660:	d067      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x162>
 8006662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006666:	d06d      	beq.n	8006744 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006668:	e06d      	b.n	8006746 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800666a:	4a3e      	ldr	r2, [pc, #248]	; (8006764 <HAL_TIM_ConfigClockSource+0x194>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d060      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x162>
 8006670:	4a3d      	ldr	r2, [pc, #244]	; (8006768 <HAL_TIM_ConfigClockSource+0x198>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d05d      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x162>
 8006676:	4a3d      	ldr	r2, [pc, #244]	; (800676c <HAL_TIM_ConfigClockSource+0x19c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d05a      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x162>
      break;
 800667c:	e063      	b.n	8006746 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6818      	ldr	r0, [r3, #0]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	6899      	ldr	r1, [r3, #8]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f000 f987 	bl	80069a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	609a      	str	r2, [r3, #8]
      break;
 80066aa:	e04c      	b.n	8006746 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	6899      	ldr	r1, [r3, #8]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f000 f970 	bl	80069a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066ce:	609a      	str	r2, [r3, #8]
      break;
 80066d0:	e039      	b.n	8006746 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6818      	ldr	r0, [r3, #0]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	6859      	ldr	r1, [r3, #4]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	461a      	mov	r2, r3
 80066e0:	f000 f8e0 	bl	80068a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2150      	movs	r1, #80	; 0x50
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 f93a 	bl	8006964 <TIM_ITRx_SetConfig>
      break;
 80066f0:	e029      	b.n	8006746 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	6859      	ldr	r1, [r3, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	461a      	mov	r2, r3
 8006700:	f000 f8ff 	bl	8006902 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2160      	movs	r1, #96	; 0x60
 800670a:	4618      	mov	r0, r3
 800670c:	f000 f92a 	bl	8006964 <TIM_ITRx_SetConfig>
      break;
 8006710:	e019      	b.n	8006746 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6818      	ldr	r0, [r3, #0]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	6859      	ldr	r1, [r3, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	461a      	mov	r2, r3
 8006720:	f000 f8c0 	bl	80068a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2140      	movs	r1, #64	; 0x40
 800672a:	4618      	mov	r0, r3
 800672c:	f000 f91a 	bl	8006964 <TIM_ITRx_SetConfig>
      break;
 8006730:	e009      	b.n	8006746 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4619      	mov	r1, r3
 800673c:	4610      	mov	r0, r2
 800673e:	f000 f911 	bl	8006964 <TIM_ITRx_SetConfig>
      break;
 8006742:	e000      	b.n	8006746 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006744:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	ffceff88 	.word	0xffceff88
 8006764:	00100030 	.word	0x00100030
 8006768:	00100040 	.word	0x00100040
 800676c:	00100020 	.word	0x00100020

08006770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a40      	ldr	r2, [pc, #256]	; (8006884 <TIM_Base_SetConfig+0x114>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d013      	beq.n	80067b0 <TIM_Base_SetConfig+0x40>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800678e:	d00f      	beq.n	80067b0 <TIM_Base_SetConfig+0x40>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a3d      	ldr	r2, [pc, #244]	; (8006888 <TIM_Base_SetConfig+0x118>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d00b      	beq.n	80067b0 <TIM_Base_SetConfig+0x40>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a3c      	ldr	r2, [pc, #240]	; (800688c <TIM_Base_SetConfig+0x11c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d007      	beq.n	80067b0 <TIM_Base_SetConfig+0x40>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a3b      	ldr	r2, [pc, #236]	; (8006890 <TIM_Base_SetConfig+0x120>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d003      	beq.n	80067b0 <TIM_Base_SetConfig+0x40>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a3a      	ldr	r2, [pc, #232]	; (8006894 <TIM_Base_SetConfig+0x124>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d108      	bne.n	80067c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a2f      	ldr	r2, [pc, #188]	; (8006884 <TIM_Base_SetConfig+0x114>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d01f      	beq.n	800680a <TIM_Base_SetConfig+0x9a>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d0:	d01b      	beq.n	800680a <TIM_Base_SetConfig+0x9a>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a2c      	ldr	r2, [pc, #176]	; (8006888 <TIM_Base_SetConfig+0x118>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d017      	beq.n	800680a <TIM_Base_SetConfig+0x9a>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a2b      	ldr	r2, [pc, #172]	; (800688c <TIM_Base_SetConfig+0x11c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d013      	beq.n	800680a <TIM_Base_SetConfig+0x9a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a2a      	ldr	r2, [pc, #168]	; (8006890 <TIM_Base_SetConfig+0x120>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d00f      	beq.n	800680a <TIM_Base_SetConfig+0x9a>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a29      	ldr	r2, [pc, #164]	; (8006894 <TIM_Base_SetConfig+0x124>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d00b      	beq.n	800680a <TIM_Base_SetConfig+0x9a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a28      	ldr	r2, [pc, #160]	; (8006898 <TIM_Base_SetConfig+0x128>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d007      	beq.n	800680a <TIM_Base_SetConfig+0x9a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a27      	ldr	r2, [pc, #156]	; (800689c <TIM_Base_SetConfig+0x12c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d003      	beq.n	800680a <TIM_Base_SetConfig+0x9a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a26      	ldr	r2, [pc, #152]	; (80068a0 <TIM_Base_SetConfig+0x130>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d108      	bne.n	800681c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	4313      	orrs	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	4313      	orrs	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	689a      	ldr	r2, [r3, #8]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a10      	ldr	r2, [pc, #64]	; (8006884 <TIM_Base_SetConfig+0x114>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00f      	beq.n	8006868 <TIM_Base_SetConfig+0xf8>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a12      	ldr	r2, [pc, #72]	; (8006894 <TIM_Base_SetConfig+0x124>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00b      	beq.n	8006868 <TIM_Base_SetConfig+0xf8>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a11      	ldr	r2, [pc, #68]	; (8006898 <TIM_Base_SetConfig+0x128>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d007      	beq.n	8006868 <TIM_Base_SetConfig+0xf8>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a10      	ldr	r2, [pc, #64]	; (800689c <TIM_Base_SetConfig+0x12c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d003      	beq.n	8006868 <TIM_Base_SetConfig+0xf8>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a0f      	ldr	r2, [pc, #60]	; (80068a0 <TIM_Base_SetConfig+0x130>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d103      	bne.n	8006870 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	691a      	ldr	r2, [r3, #16]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	615a      	str	r2, [r3, #20]
}
 8006876:	bf00      	nop
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	40010000 	.word	0x40010000
 8006888:	40000400 	.word	0x40000400
 800688c:	40000800 	.word	0x40000800
 8006890:	40000c00 	.word	0x40000c00
 8006894:	40010400 	.word	0x40010400
 8006898:	40014000 	.word	0x40014000
 800689c:	40014400 	.word	0x40014400
 80068a0:	40014800 	.word	0x40014800

080068a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	f023 0201 	bic.w	r2, r3, #1
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	011b      	lsls	r3, r3, #4
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f023 030a 	bic.w	r3, r3, #10
 80068e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	621a      	str	r2, [r3, #32]
}
 80068f6:	bf00      	nop
 80068f8:	371c      	adds	r7, #28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006902:	b480      	push	{r7}
 8006904:	b087      	sub	sp, #28
 8006906:	af00      	add	r7, sp, #0
 8006908:	60f8      	str	r0, [r7, #12]
 800690a:	60b9      	str	r1, [r7, #8]
 800690c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	f023 0210 	bic.w	r2, r3, #16
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800692c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	031b      	lsls	r3, r3, #12
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	4313      	orrs	r3, r2
 8006936:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800693e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	4313      	orrs	r3, r2
 8006948:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	621a      	str	r2, [r3, #32]
}
 8006956:	bf00      	nop
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
	...

08006964 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	4b09      	ldr	r3, [pc, #36]	; (800699c <TIM_ITRx_SetConfig+0x38>)
 8006978:	4013      	ands	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4313      	orrs	r3, r2
 8006982:	f043 0307 	orr.w	r3, r3, #7
 8006986:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	609a      	str	r2, [r3, #8]
}
 800698e:	bf00      	nop
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	ffcfff8f 	.word	0xffcfff8f

080069a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	021a      	lsls	r2, r3, #8
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	431a      	orrs	r2, r3
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	609a      	str	r2, [r3, #8]
}
 80069d4:	bf00      	nop
 80069d6:	371c      	adds	r7, #28
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d101      	bne.n	80069f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069f4:	2302      	movs	r3, #2
 80069f6:	e068      	b.n	8006aca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a2e      	ldr	r2, [pc, #184]	; (8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d004      	beq.n	8006a2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a2d      	ldr	r2, [pc, #180]	; (8006adc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d108      	bne.n	8006a3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a1e      	ldr	r2, [pc, #120]	; (8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d01d      	beq.n	8006a9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a6a:	d018      	beq.n	8006a9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a1b      	ldr	r2, [pc, #108]	; (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d013      	beq.n	8006a9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a1a      	ldr	r2, [pc, #104]	; (8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00e      	beq.n	8006a9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a18      	ldr	r2, [pc, #96]	; (8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d009      	beq.n	8006a9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a13      	ldr	r2, [pc, #76]	; (8006adc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d004      	beq.n	8006a9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a14      	ldr	r2, [pc, #80]	; (8006aec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d10c      	bne.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	40010000 	.word	0x40010000
 8006adc:	40010400 	.word	0x40010400
 8006ae0:	40000400 	.word	0x40000400
 8006ae4:	40000800 	.word	0x40000800
 8006ae8:	40000c00 	.word	0x40000c00
 8006aec:	40001800 	.word	0x40001800

08006af0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e042      	b.n	8006b88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d106      	bne.n	8006b1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7fc fb5f 	bl	80031d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2224      	movs	r2, #36	; 0x24
 8006b1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0201 	bic.w	r2, r2, #1
 8006b30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fb12 	bl	800715c <UART_SetConfig>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d101      	bne.n	8006b42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e022      	b.n	8006b88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f001 f8b6 	bl	8007cbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0201 	orr.w	r2, r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 f93d 	bl	8007e00 <UART_CheckIdleState>
 8006b86:	4603      	mov	r3, r0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ba4:	2b20      	cmp	r3, #32
 8006ba6:	d168      	bne.n	8006c7a <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d002      	beq.n	8006bb4 <HAL_UART_Transmit_IT+0x24>
 8006bae:	88fb      	ldrh	r3, [r7, #6]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e061      	b.n	8006c7c <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d101      	bne.n	8006bc6 <HAL_UART_Transmit_IT+0x36>
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	e05a      	b.n	8006c7c <HAL_UART_Transmit_IT+0xec>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	88fa      	ldrh	r2, [r7, #6]
 8006bd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	88fa      	ldrh	r2, [r7, #6]
 8006be0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2221      	movs	r2, #33	; 0x21
 8006bf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c02:	d11c      	bne.n	8006c3e <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0c:	d107      	bne.n	8006c1e <HAL_UART_Transmit_IT+0x8e>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d103      	bne.n	8006c1e <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4a1b      	ldr	r2, [pc, #108]	; (8006c88 <HAL_UART_Transmit_IT+0xf8>)
 8006c1a:	671a      	str	r2, [r3, #112]	; 0x70
 8006c1c:	e002      	b.n	8006c24 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4a1a      	ldr	r2, [pc, #104]	; (8006c8c <HAL_UART_Transmit_IT+0xfc>)
 8006c22:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689a      	ldr	r2, [r3, #8]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006c3a:	609a      	str	r2, [r3, #8]
 8006c3c:	e01b      	b.n	8006c76 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c46:	d107      	bne.n	8006c58 <HAL_UART_Transmit_IT+0xc8>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d103      	bne.n	8006c58 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4a0f      	ldr	r2, [pc, #60]	; (8006c90 <HAL_UART_Transmit_IT+0x100>)
 8006c54:	671a      	str	r2, [r3, #112]	; 0x70
 8006c56:	e002      	b.n	8006c5e <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4a0e      	ldr	r2, [pc, #56]	; (8006c94 <HAL_UART_Transmit_IT+0x104>)
 8006c5c:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c74:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	e000      	b.n	8006c7c <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8006c7a:	2302      	movs	r3, #2
  }
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	08008191 	.word	0x08008191
 8006c8c:	080080f7 	.word	0x080080f7
 8006c90:	08008079 	.word	0x08008079
 8006c94:	08008005 	.word	0x08008005

08006c98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cac:	2b20      	cmp	r3, #32
 8006cae:	f040 80bc 	bne.w	8006e2a <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <HAL_UART_Receive_IT+0x26>
 8006cb8:	88fb      	ldrh	r3, [r7, #6]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e0b4      	b.n	8006e2c <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <HAL_UART_Receive_IT+0x38>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e0ad      	b.n	8006e2c <HAL_UART_Receive_IT+0x194>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	88fa      	ldrh	r2, [r7, #6]
 8006ce2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	88fa      	ldrh	r2, [r7, #6]
 8006cea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cfc:	d10e      	bne.n	8006d1c <HAL_UART_Receive_IT+0x84>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d105      	bne.n	8006d12 <HAL_UART_Receive_IT+0x7a>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006d0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d10:	e02d      	b.n	8006d6e <HAL_UART_Receive_IT+0xd6>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	22ff      	movs	r2, #255	; 0xff
 8006d16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d1a:	e028      	b.n	8006d6e <HAL_UART_Receive_IT+0xd6>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10d      	bne.n	8006d40 <HAL_UART_Receive_IT+0xa8>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d104      	bne.n	8006d36 <HAL_UART_Receive_IT+0x9e>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	22ff      	movs	r2, #255	; 0xff
 8006d30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d34:	e01b      	b.n	8006d6e <HAL_UART_Receive_IT+0xd6>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	227f      	movs	r2, #127	; 0x7f
 8006d3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d3e:	e016      	b.n	8006d6e <HAL_UART_Receive_IT+0xd6>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d48:	d10d      	bne.n	8006d66 <HAL_UART_Receive_IT+0xce>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d104      	bne.n	8006d5c <HAL_UART_Receive_IT+0xc4>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	227f      	movs	r2, #127	; 0x7f
 8006d56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d5a:	e008      	b.n	8006d6e <HAL_UART_Receive_IT+0xd6>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	223f      	movs	r2, #63	; 0x3f
 8006d60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d64:	e003      	b.n	8006d6e <HAL_UART_Receive_IT+0xd6>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2222      	movs	r2, #34	; 0x22
 8006d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f042 0201 	orr.w	r2, r2, #1
 8006d8c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d96:	d12a      	bne.n	8006dee <HAL_UART_Receive_IT+0x156>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006d9e:	88fa      	ldrh	r2, [r7, #6]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d324      	bcc.n	8006dee <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dac:	d107      	bne.n	8006dbe <HAL_UART_Receive_IT+0x126>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d103      	bne.n	8006dbe <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4a1f      	ldr	r2, [pc, #124]	; (8006e38 <HAL_UART_Receive_IT+0x1a0>)
 8006dba:	66da      	str	r2, [r3, #108]	; 0x6c
 8006dbc:	e002      	b.n	8006dc4 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	4a1e      	ldr	r2, [pc, #120]	; (8006e3c <HAL_UART_Receive_IT+0x1a4>)
 8006dc2:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dda:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006dea:	609a      	str	r2, [r3, #8]
 8006dec:	e01b      	b.n	8006e26 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df6:	d107      	bne.n	8006e08 <HAL_UART_Receive_IT+0x170>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d103      	bne.n	8006e08 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4a0f      	ldr	r2, [pc, #60]	; (8006e40 <HAL_UART_Receive_IT+0x1a8>)
 8006e04:	66da      	str	r2, [r3, #108]	; 0x6c
 8006e06:	e002      	b.n	8006e0e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4a0e      	ldr	r2, [pc, #56]	; (8006e44 <HAL_UART_Receive_IT+0x1ac>)
 8006e0c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006e24:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	e000      	b.n	8006e2c <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8006e2a:	2302      	movs	r3, #2
  }
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3714      	adds	r7, #20
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	080084c5 	.word	0x080084c5
 8006e3c:	080083bd 	.word	0x080083bd
 8006e40:	08008313 	.word	0x08008313
 8006e44:	08008269 	.word	0x08008269

08006e48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e68:	69fa      	ldr	r2, [r7, #28]
 8006e6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e6e:	4013      	ands	r3, r2
 8006e70:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d118      	bne.n	8006eaa <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	f003 0320 	and.w	r3, r3, #32
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d013      	beq.n	8006eaa <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	f003 0320 	and.w	r3, r3, #32
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d104      	bne.n	8006e96 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d009      	beq.n	8006eaa <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f000 8145 	beq.w	800712a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4798      	blx	r3
      }
      return;
 8006ea8:	e13f      	b.n	800712a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 80e8 	beq.w	8007082 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	4ba1      	ldr	r3, [pc, #644]	; (800713c <HAL_UART_IRQHandler+0x2f4>)
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d105      	bne.n	8006ec8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	4ba0      	ldr	r3, [pc, #640]	; (8007140 <HAL_UART_IRQHandler+0x2f8>)
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 80dd 	beq.w	8007082 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d010      	beq.n	8006ef4 <HAL_UART_IRQHandler+0xac>
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00b      	beq.n	8006ef4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eea:	f043 0201 	orr.w	r2, r3, #1
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d010      	beq.n	8006f20 <HAL_UART_IRQHandler+0xd8>
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00b      	beq.n	8006f20 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f16:	f043 0204 	orr.w	r2, r3, #4
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	f003 0304 	and.w	r3, r3, #4
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d010      	beq.n	8006f4c <HAL_UART_IRQHandler+0x104>
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00b      	beq.n	8006f4c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2204      	movs	r2, #4
 8006f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f42:	f043 0202 	orr.w	r2, r3, #2
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d015      	beq.n	8006f82 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	f003 0320 	and.w	r3, r3, #32
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d104      	bne.n	8006f6a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	4b76      	ldr	r3, [pc, #472]	; (800713c <HAL_UART_IRQHandler+0x2f4>)
 8006f64:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00b      	beq.n	8006f82 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2208      	movs	r2, #8
 8006f70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f78:	f043 0208 	orr.w	r2, r3, #8
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d011      	beq.n	8006fb0 <HAL_UART_IRQHandler+0x168>
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00c      	beq.n	8006fb0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa6:	f043 0220 	orr.w	r2, r3, #32
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 80b9 	beq.w	800712e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d011      	beq.n	8006fea <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	f003 0320 	and.w	r3, r3, #32
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d104      	bne.n	8006fda <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d007      	beq.n	8006fea <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffc:	2b40      	cmp	r3, #64	; 0x40
 8006ffe:	d004      	beq.n	800700a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007006:	2b00      	cmp	r3, #0
 8007008:	d031      	beq.n	800706e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 ffc0 	bl	8007f90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701a:	2b40      	cmp	r3, #64	; 0x40
 800701c:	d123      	bne.n	8007066 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800702c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007032:	2b00      	cmp	r3, #0
 8007034:	d013      	beq.n	800705e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800703a:	4a42      	ldr	r2, [pc, #264]	; (8007144 <HAL_UART_IRQHandler+0x2fc>)
 800703c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007042:	4618      	mov	r0, r3
 8007044:	f7fc fb14 	bl	8003670 <HAL_DMA_Abort_IT>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d017      	beq.n	800707e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8007058:	4610      	mov	r0, r2
 800705a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800705c:	e00f      	b.n	800707e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f872 	bl	8007148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007064:	e00b      	b.n	800707e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f86e 	bl	8007148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800706c:	e007      	b.n	800707e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f86a 	bl	8007148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800707c:	e057      	b.n	800712e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800707e:	bf00      	nop
    return;
 8007080:	e055      	b.n	800712e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00d      	beq.n	80070a8 <HAL_UART_IRQHandler+0x260>
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d008      	beq.n	80070a8 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800709e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f001 fa93 	bl	80085cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070a6:	e045      	b.n	8007134 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d012      	beq.n	80070d8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d104      	bne.n	80070c6 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d008      	beq.n	80070d8 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d031      	beq.n	8007132 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	4798      	blx	r3
    }
    return;
 80070d6:	e02c      	b.n	8007132 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d008      	beq.n	80070f4 <HAL_UART_IRQHandler+0x2ac>
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d003      	beq.n	80070f4 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f001 f8a1 	bl	8008234 <UART_EndTransmit_IT>
    return;
 80070f2:	e01f      	b.n	8007134 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d008      	beq.n	8007110 <HAL_UART_IRQHandler+0x2c8>
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f001 fa73 	bl	80085f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800710e:	e011      	b.n	8007134 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00c      	beq.n	8007134 <HAL_UART_IRQHandler+0x2ec>
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	2b00      	cmp	r3, #0
 800711e:	da09      	bge.n	8007134 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 fa5d 	bl	80085e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007126:	bf00      	nop
 8007128:	e004      	b.n	8007134 <HAL_UART_IRQHandler+0x2ec>
      return;
 800712a:	bf00      	nop
 800712c:	e002      	b.n	8007134 <HAL_UART_IRQHandler+0x2ec>
    return;
 800712e:	bf00      	nop
 8007130:	e000      	b.n	8007134 <HAL_UART_IRQHandler+0x2ec>
    return;
 8007132:	bf00      	nop
  }
}
 8007134:	3720      	adds	r7, #32
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	10000001 	.word	0x10000001
 8007140:	04000120 	.word	0x04000120
 8007144:	08007fd9 	.word	0x08007fd9

08007148 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800715c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007160:	b08e      	sub	sp, #56	; 0x38
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	431a      	orrs	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	431a      	orrs	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	69db      	ldr	r3, [r3, #28]
 8007180:	4313      	orrs	r3, r2
 8007182:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800718a:	4313      	orrs	r3, r2
 800718c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	4bc1      	ldr	r3, [pc, #772]	; (800749c <UART_SetConfig+0x340>)
 8007196:	4013      	ands	r3, r2
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	6812      	ldr	r2, [r2, #0]
 800719c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800719e:	430b      	orrs	r3, r1
 80071a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68da      	ldr	r2, [r3, #12]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4ab7      	ldr	r2, [pc, #732]	; (80074a0 <UART_SetConfig+0x344>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d004      	beq.n	80071d2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a1b      	ldr	r3, [r3, #32]
 80071cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071ce:	4313      	orrs	r3, r2
 80071d0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	689a      	ldr	r2, [r3, #8]
 80071d8:	4bb2      	ldr	r3, [pc, #712]	; (80074a4 <UART_SetConfig+0x348>)
 80071da:	4013      	ands	r3, r2
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	6812      	ldr	r2, [r2, #0]
 80071e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80071e2:	430b      	orrs	r3, r1
 80071e4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	f023 010f 	bic.w	r1, r3, #15
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4aa9      	ldr	r2, [pc, #676]	; (80074a8 <UART_SetConfig+0x34c>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d177      	bne.n	80072f6 <UART_SetConfig+0x19a>
 8007206:	4ba9      	ldr	r3, [pc, #676]	; (80074ac <UART_SetConfig+0x350>)
 8007208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800720e:	2b28      	cmp	r3, #40	; 0x28
 8007210:	d86c      	bhi.n	80072ec <UART_SetConfig+0x190>
 8007212:	a201      	add	r2, pc, #4	; (adr r2, 8007218 <UART_SetConfig+0xbc>)
 8007214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007218:	080072bd 	.word	0x080072bd
 800721c:	080072ed 	.word	0x080072ed
 8007220:	080072ed 	.word	0x080072ed
 8007224:	080072ed 	.word	0x080072ed
 8007228:	080072ed 	.word	0x080072ed
 800722c:	080072ed 	.word	0x080072ed
 8007230:	080072ed 	.word	0x080072ed
 8007234:	080072ed 	.word	0x080072ed
 8007238:	080072c5 	.word	0x080072c5
 800723c:	080072ed 	.word	0x080072ed
 8007240:	080072ed 	.word	0x080072ed
 8007244:	080072ed 	.word	0x080072ed
 8007248:	080072ed 	.word	0x080072ed
 800724c:	080072ed 	.word	0x080072ed
 8007250:	080072ed 	.word	0x080072ed
 8007254:	080072ed 	.word	0x080072ed
 8007258:	080072cd 	.word	0x080072cd
 800725c:	080072ed 	.word	0x080072ed
 8007260:	080072ed 	.word	0x080072ed
 8007264:	080072ed 	.word	0x080072ed
 8007268:	080072ed 	.word	0x080072ed
 800726c:	080072ed 	.word	0x080072ed
 8007270:	080072ed 	.word	0x080072ed
 8007274:	080072ed 	.word	0x080072ed
 8007278:	080072d5 	.word	0x080072d5
 800727c:	080072ed 	.word	0x080072ed
 8007280:	080072ed 	.word	0x080072ed
 8007284:	080072ed 	.word	0x080072ed
 8007288:	080072ed 	.word	0x080072ed
 800728c:	080072ed 	.word	0x080072ed
 8007290:	080072ed 	.word	0x080072ed
 8007294:	080072ed 	.word	0x080072ed
 8007298:	080072dd 	.word	0x080072dd
 800729c:	080072ed 	.word	0x080072ed
 80072a0:	080072ed 	.word	0x080072ed
 80072a4:	080072ed 	.word	0x080072ed
 80072a8:	080072ed 	.word	0x080072ed
 80072ac:	080072ed 	.word	0x080072ed
 80072b0:	080072ed 	.word	0x080072ed
 80072b4:	080072ed 	.word	0x080072ed
 80072b8:	080072e5 	.word	0x080072e5
 80072bc:	2301      	movs	r3, #1
 80072be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072c2:	e233      	b.n	800772c <UART_SetConfig+0x5d0>
 80072c4:	2304      	movs	r3, #4
 80072c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072ca:	e22f      	b.n	800772c <UART_SetConfig+0x5d0>
 80072cc:	2308      	movs	r3, #8
 80072ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072d2:	e22b      	b.n	800772c <UART_SetConfig+0x5d0>
 80072d4:	2310      	movs	r3, #16
 80072d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072da:	e227      	b.n	800772c <UART_SetConfig+0x5d0>
 80072dc:	2320      	movs	r3, #32
 80072de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072e2:	e223      	b.n	800772c <UART_SetConfig+0x5d0>
 80072e4:	2340      	movs	r3, #64	; 0x40
 80072e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072ea:	e21f      	b.n	800772c <UART_SetConfig+0x5d0>
 80072ec:	2380      	movs	r3, #128	; 0x80
 80072ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072f2:	bf00      	nop
 80072f4:	e21a      	b.n	800772c <UART_SetConfig+0x5d0>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a6d      	ldr	r2, [pc, #436]	; (80074b0 <UART_SetConfig+0x354>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d132      	bne.n	8007366 <UART_SetConfig+0x20a>
 8007300:	4b6a      	ldr	r3, [pc, #424]	; (80074ac <UART_SetConfig+0x350>)
 8007302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	2b05      	cmp	r3, #5
 800730a:	d827      	bhi.n	800735c <UART_SetConfig+0x200>
 800730c:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <UART_SetConfig+0x1b8>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	0800732d 	.word	0x0800732d
 8007318:	08007335 	.word	0x08007335
 800731c:	0800733d 	.word	0x0800733d
 8007320:	08007345 	.word	0x08007345
 8007324:	0800734d 	.word	0x0800734d
 8007328:	08007355 	.word	0x08007355
 800732c:	2300      	movs	r3, #0
 800732e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007332:	e1fb      	b.n	800772c <UART_SetConfig+0x5d0>
 8007334:	2304      	movs	r3, #4
 8007336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800733a:	e1f7      	b.n	800772c <UART_SetConfig+0x5d0>
 800733c:	2308      	movs	r3, #8
 800733e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007342:	e1f3      	b.n	800772c <UART_SetConfig+0x5d0>
 8007344:	2310      	movs	r3, #16
 8007346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800734a:	e1ef      	b.n	800772c <UART_SetConfig+0x5d0>
 800734c:	2320      	movs	r3, #32
 800734e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007352:	e1eb      	b.n	800772c <UART_SetConfig+0x5d0>
 8007354:	2340      	movs	r3, #64	; 0x40
 8007356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800735a:	e1e7      	b.n	800772c <UART_SetConfig+0x5d0>
 800735c:	2380      	movs	r3, #128	; 0x80
 800735e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007362:	bf00      	nop
 8007364:	e1e2      	b.n	800772c <UART_SetConfig+0x5d0>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a52      	ldr	r2, [pc, #328]	; (80074b4 <UART_SetConfig+0x358>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d132      	bne.n	80073d6 <UART_SetConfig+0x27a>
 8007370:	4b4e      	ldr	r3, [pc, #312]	; (80074ac <UART_SetConfig+0x350>)
 8007372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007374:	f003 0307 	and.w	r3, r3, #7
 8007378:	2b05      	cmp	r3, #5
 800737a:	d827      	bhi.n	80073cc <UART_SetConfig+0x270>
 800737c:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <UART_SetConfig+0x228>)
 800737e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007382:	bf00      	nop
 8007384:	0800739d 	.word	0x0800739d
 8007388:	080073a5 	.word	0x080073a5
 800738c:	080073ad 	.word	0x080073ad
 8007390:	080073b5 	.word	0x080073b5
 8007394:	080073bd 	.word	0x080073bd
 8007398:	080073c5 	.word	0x080073c5
 800739c:	2300      	movs	r3, #0
 800739e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073a2:	e1c3      	b.n	800772c <UART_SetConfig+0x5d0>
 80073a4:	2304      	movs	r3, #4
 80073a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073aa:	e1bf      	b.n	800772c <UART_SetConfig+0x5d0>
 80073ac:	2308      	movs	r3, #8
 80073ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073b2:	e1bb      	b.n	800772c <UART_SetConfig+0x5d0>
 80073b4:	2310      	movs	r3, #16
 80073b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ba:	e1b7      	b.n	800772c <UART_SetConfig+0x5d0>
 80073bc:	2320      	movs	r3, #32
 80073be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073c2:	e1b3      	b.n	800772c <UART_SetConfig+0x5d0>
 80073c4:	2340      	movs	r3, #64	; 0x40
 80073c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ca:	e1af      	b.n	800772c <UART_SetConfig+0x5d0>
 80073cc:	2380      	movs	r3, #128	; 0x80
 80073ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073d2:	bf00      	nop
 80073d4:	e1aa      	b.n	800772c <UART_SetConfig+0x5d0>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a37      	ldr	r2, [pc, #220]	; (80074b8 <UART_SetConfig+0x35c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d132      	bne.n	8007446 <UART_SetConfig+0x2ea>
 80073e0:	4b32      	ldr	r3, [pc, #200]	; (80074ac <UART_SetConfig+0x350>)
 80073e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e4:	f003 0307 	and.w	r3, r3, #7
 80073e8:	2b05      	cmp	r3, #5
 80073ea:	d827      	bhi.n	800743c <UART_SetConfig+0x2e0>
 80073ec:	a201      	add	r2, pc, #4	; (adr r2, 80073f4 <UART_SetConfig+0x298>)
 80073ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f2:	bf00      	nop
 80073f4:	0800740d 	.word	0x0800740d
 80073f8:	08007415 	.word	0x08007415
 80073fc:	0800741d 	.word	0x0800741d
 8007400:	08007425 	.word	0x08007425
 8007404:	0800742d 	.word	0x0800742d
 8007408:	08007435 	.word	0x08007435
 800740c:	2300      	movs	r3, #0
 800740e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007412:	e18b      	b.n	800772c <UART_SetConfig+0x5d0>
 8007414:	2304      	movs	r3, #4
 8007416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800741a:	e187      	b.n	800772c <UART_SetConfig+0x5d0>
 800741c:	2308      	movs	r3, #8
 800741e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007422:	e183      	b.n	800772c <UART_SetConfig+0x5d0>
 8007424:	2310      	movs	r3, #16
 8007426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800742a:	e17f      	b.n	800772c <UART_SetConfig+0x5d0>
 800742c:	2320      	movs	r3, #32
 800742e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007432:	e17b      	b.n	800772c <UART_SetConfig+0x5d0>
 8007434:	2340      	movs	r3, #64	; 0x40
 8007436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800743a:	e177      	b.n	800772c <UART_SetConfig+0x5d0>
 800743c:	2380      	movs	r3, #128	; 0x80
 800743e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007442:	bf00      	nop
 8007444:	e172      	b.n	800772c <UART_SetConfig+0x5d0>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a1c      	ldr	r2, [pc, #112]	; (80074bc <UART_SetConfig+0x360>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d144      	bne.n	80074da <UART_SetConfig+0x37e>
 8007450:	4b16      	ldr	r3, [pc, #88]	; (80074ac <UART_SetConfig+0x350>)
 8007452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	2b05      	cmp	r3, #5
 800745a:	d839      	bhi.n	80074d0 <UART_SetConfig+0x374>
 800745c:	a201      	add	r2, pc, #4	; (adr r2, 8007464 <UART_SetConfig+0x308>)
 800745e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007462:	bf00      	nop
 8007464:	0800747d 	.word	0x0800747d
 8007468:	08007485 	.word	0x08007485
 800746c:	0800748d 	.word	0x0800748d
 8007470:	08007495 	.word	0x08007495
 8007474:	080074c1 	.word	0x080074c1
 8007478:	080074c9 	.word	0x080074c9
 800747c:	2300      	movs	r3, #0
 800747e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007482:	e153      	b.n	800772c <UART_SetConfig+0x5d0>
 8007484:	2304      	movs	r3, #4
 8007486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800748a:	e14f      	b.n	800772c <UART_SetConfig+0x5d0>
 800748c:	2308      	movs	r3, #8
 800748e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007492:	e14b      	b.n	800772c <UART_SetConfig+0x5d0>
 8007494:	2310      	movs	r3, #16
 8007496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800749a:	e147      	b.n	800772c <UART_SetConfig+0x5d0>
 800749c:	cfff69f3 	.word	0xcfff69f3
 80074a0:	58000c00 	.word	0x58000c00
 80074a4:	11fff4ff 	.word	0x11fff4ff
 80074a8:	40011000 	.word	0x40011000
 80074ac:	58024400 	.word	0x58024400
 80074b0:	40004400 	.word	0x40004400
 80074b4:	40004800 	.word	0x40004800
 80074b8:	40004c00 	.word	0x40004c00
 80074bc:	40005000 	.word	0x40005000
 80074c0:	2320      	movs	r3, #32
 80074c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074c6:	e131      	b.n	800772c <UART_SetConfig+0x5d0>
 80074c8:	2340      	movs	r3, #64	; 0x40
 80074ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ce:	e12d      	b.n	800772c <UART_SetConfig+0x5d0>
 80074d0:	2380      	movs	r3, #128	; 0x80
 80074d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074d6:	bf00      	nop
 80074d8:	e128      	b.n	800772c <UART_SetConfig+0x5d0>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4ab6      	ldr	r2, [pc, #728]	; (80077b8 <UART_SetConfig+0x65c>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d178      	bne.n	80075d6 <UART_SetConfig+0x47a>
 80074e4:	4bb5      	ldr	r3, [pc, #724]	; (80077bc <UART_SetConfig+0x660>)
 80074e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074ec:	2b28      	cmp	r3, #40	; 0x28
 80074ee:	d86d      	bhi.n	80075cc <UART_SetConfig+0x470>
 80074f0:	a201      	add	r2, pc, #4	; (adr r2, 80074f8 <UART_SetConfig+0x39c>)
 80074f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f6:	bf00      	nop
 80074f8:	0800759d 	.word	0x0800759d
 80074fc:	080075cd 	.word	0x080075cd
 8007500:	080075cd 	.word	0x080075cd
 8007504:	080075cd 	.word	0x080075cd
 8007508:	080075cd 	.word	0x080075cd
 800750c:	080075cd 	.word	0x080075cd
 8007510:	080075cd 	.word	0x080075cd
 8007514:	080075cd 	.word	0x080075cd
 8007518:	080075a5 	.word	0x080075a5
 800751c:	080075cd 	.word	0x080075cd
 8007520:	080075cd 	.word	0x080075cd
 8007524:	080075cd 	.word	0x080075cd
 8007528:	080075cd 	.word	0x080075cd
 800752c:	080075cd 	.word	0x080075cd
 8007530:	080075cd 	.word	0x080075cd
 8007534:	080075cd 	.word	0x080075cd
 8007538:	080075ad 	.word	0x080075ad
 800753c:	080075cd 	.word	0x080075cd
 8007540:	080075cd 	.word	0x080075cd
 8007544:	080075cd 	.word	0x080075cd
 8007548:	080075cd 	.word	0x080075cd
 800754c:	080075cd 	.word	0x080075cd
 8007550:	080075cd 	.word	0x080075cd
 8007554:	080075cd 	.word	0x080075cd
 8007558:	080075b5 	.word	0x080075b5
 800755c:	080075cd 	.word	0x080075cd
 8007560:	080075cd 	.word	0x080075cd
 8007564:	080075cd 	.word	0x080075cd
 8007568:	080075cd 	.word	0x080075cd
 800756c:	080075cd 	.word	0x080075cd
 8007570:	080075cd 	.word	0x080075cd
 8007574:	080075cd 	.word	0x080075cd
 8007578:	080075bd 	.word	0x080075bd
 800757c:	080075cd 	.word	0x080075cd
 8007580:	080075cd 	.word	0x080075cd
 8007584:	080075cd 	.word	0x080075cd
 8007588:	080075cd 	.word	0x080075cd
 800758c:	080075cd 	.word	0x080075cd
 8007590:	080075cd 	.word	0x080075cd
 8007594:	080075cd 	.word	0x080075cd
 8007598:	080075c5 	.word	0x080075c5
 800759c:	2301      	movs	r3, #1
 800759e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075a2:	e0c3      	b.n	800772c <UART_SetConfig+0x5d0>
 80075a4:	2304      	movs	r3, #4
 80075a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075aa:	e0bf      	b.n	800772c <UART_SetConfig+0x5d0>
 80075ac:	2308      	movs	r3, #8
 80075ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075b2:	e0bb      	b.n	800772c <UART_SetConfig+0x5d0>
 80075b4:	2310      	movs	r3, #16
 80075b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ba:	e0b7      	b.n	800772c <UART_SetConfig+0x5d0>
 80075bc:	2320      	movs	r3, #32
 80075be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075c2:	e0b3      	b.n	800772c <UART_SetConfig+0x5d0>
 80075c4:	2340      	movs	r3, #64	; 0x40
 80075c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ca:	e0af      	b.n	800772c <UART_SetConfig+0x5d0>
 80075cc:	2380      	movs	r3, #128	; 0x80
 80075ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075d2:	bf00      	nop
 80075d4:	e0aa      	b.n	800772c <UART_SetConfig+0x5d0>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a79      	ldr	r2, [pc, #484]	; (80077c0 <UART_SetConfig+0x664>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d132      	bne.n	8007646 <UART_SetConfig+0x4ea>
 80075e0:	4b76      	ldr	r3, [pc, #472]	; (80077bc <UART_SetConfig+0x660>)
 80075e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e4:	f003 0307 	and.w	r3, r3, #7
 80075e8:	2b05      	cmp	r3, #5
 80075ea:	d827      	bhi.n	800763c <UART_SetConfig+0x4e0>
 80075ec:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <UART_SetConfig+0x498>)
 80075ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f2:	bf00      	nop
 80075f4:	0800760d 	.word	0x0800760d
 80075f8:	08007615 	.word	0x08007615
 80075fc:	0800761d 	.word	0x0800761d
 8007600:	08007625 	.word	0x08007625
 8007604:	0800762d 	.word	0x0800762d
 8007608:	08007635 	.word	0x08007635
 800760c:	2300      	movs	r3, #0
 800760e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007612:	e08b      	b.n	800772c <UART_SetConfig+0x5d0>
 8007614:	2304      	movs	r3, #4
 8007616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800761a:	e087      	b.n	800772c <UART_SetConfig+0x5d0>
 800761c:	2308      	movs	r3, #8
 800761e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007622:	e083      	b.n	800772c <UART_SetConfig+0x5d0>
 8007624:	2310      	movs	r3, #16
 8007626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800762a:	e07f      	b.n	800772c <UART_SetConfig+0x5d0>
 800762c:	2320      	movs	r3, #32
 800762e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007632:	e07b      	b.n	800772c <UART_SetConfig+0x5d0>
 8007634:	2340      	movs	r3, #64	; 0x40
 8007636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800763a:	e077      	b.n	800772c <UART_SetConfig+0x5d0>
 800763c:	2380      	movs	r3, #128	; 0x80
 800763e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007642:	bf00      	nop
 8007644:	e072      	b.n	800772c <UART_SetConfig+0x5d0>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a5e      	ldr	r2, [pc, #376]	; (80077c4 <UART_SetConfig+0x668>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d132      	bne.n	80076b6 <UART_SetConfig+0x55a>
 8007650:	4b5a      	ldr	r3, [pc, #360]	; (80077bc <UART_SetConfig+0x660>)
 8007652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007654:	f003 0307 	and.w	r3, r3, #7
 8007658:	2b05      	cmp	r3, #5
 800765a:	d827      	bhi.n	80076ac <UART_SetConfig+0x550>
 800765c:	a201      	add	r2, pc, #4	; (adr r2, 8007664 <UART_SetConfig+0x508>)
 800765e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007662:	bf00      	nop
 8007664:	0800767d 	.word	0x0800767d
 8007668:	08007685 	.word	0x08007685
 800766c:	0800768d 	.word	0x0800768d
 8007670:	08007695 	.word	0x08007695
 8007674:	0800769d 	.word	0x0800769d
 8007678:	080076a5 	.word	0x080076a5
 800767c:	2300      	movs	r3, #0
 800767e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007682:	e053      	b.n	800772c <UART_SetConfig+0x5d0>
 8007684:	2304      	movs	r3, #4
 8007686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800768a:	e04f      	b.n	800772c <UART_SetConfig+0x5d0>
 800768c:	2308      	movs	r3, #8
 800768e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007692:	e04b      	b.n	800772c <UART_SetConfig+0x5d0>
 8007694:	2310      	movs	r3, #16
 8007696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800769a:	e047      	b.n	800772c <UART_SetConfig+0x5d0>
 800769c:	2320      	movs	r3, #32
 800769e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076a2:	e043      	b.n	800772c <UART_SetConfig+0x5d0>
 80076a4:	2340      	movs	r3, #64	; 0x40
 80076a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076aa:	e03f      	b.n	800772c <UART_SetConfig+0x5d0>
 80076ac:	2380      	movs	r3, #128	; 0x80
 80076ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076b2:	bf00      	nop
 80076b4:	e03a      	b.n	800772c <UART_SetConfig+0x5d0>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a43      	ldr	r2, [pc, #268]	; (80077c8 <UART_SetConfig+0x66c>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d132      	bne.n	8007726 <UART_SetConfig+0x5ca>
 80076c0:	4b3e      	ldr	r3, [pc, #248]	; (80077bc <UART_SetConfig+0x660>)
 80076c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c4:	f003 0307 	and.w	r3, r3, #7
 80076c8:	2b05      	cmp	r3, #5
 80076ca:	d827      	bhi.n	800771c <UART_SetConfig+0x5c0>
 80076cc:	a201      	add	r2, pc, #4	; (adr r2, 80076d4 <UART_SetConfig+0x578>)
 80076ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d2:	bf00      	nop
 80076d4:	080076ed 	.word	0x080076ed
 80076d8:	080076f5 	.word	0x080076f5
 80076dc:	080076fd 	.word	0x080076fd
 80076e0:	08007705 	.word	0x08007705
 80076e4:	0800770d 	.word	0x0800770d
 80076e8:	08007715 	.word	0x08007715
 80076ec:	2302      	movs	r3, #2
 80076ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076f2:	e01b      	b.n	800772c <UART_SetConfig+0x5d0>
 80076f4:	2304      	movs	r3, #4
 80076f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076fa:	e017      	b.n	800772c <UART_SetConfig+0x5d0>
 80076fc:	2308      	movs	r3, #8
 80076fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007702:	e013      	b.n	800772c <UART_SetConfig+0x5d0>
 8007704:	2310      	movs	r3, #16
 8007706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800770a:	e00f      	b.n	800772c <UART_SetConfig+0x5d0>
 800770c:	2320      	movs	r3, #32
 800770e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007712:	e00b      	b.n	800772c <UART_SetConfig+0x5d0>
 8007714:	2340      	movs	r3, #64	; 0x40
 8007716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800771a:	e007      	b.n	800772c <UART_SetConfig+0x5d0>
 800771c:	2380      	movs	r3, #128	; 0x80
 800771e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007722:	bf00      	nop
 8007724:	e002      	b.n	800772c <UART_SetConfig+0x5d0>
 8007726:	2380      	movs	r3, #128	; 0x80
 8007728:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a25      	ldr	r2, [pc, #148]	; (80077c8 <UART_SetConfig+0x66c>)
 8007732:	4293      	cmp	r3, r2
 8007734:	f040 80b8 	bne.w	80078a8 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007738:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800773c:	2b08      	cmp	r3, #8
 800773e:	d019      	beq.n	8007774 <UART_SetConfig+0x618>
 8007740:	2b08      	cmp	r3, #8
 8007742:	dc04      	bgt.n	800774e <UART_SetConfig+0x5f2>
 8007744:	2b02      	cmp	r3, #2
 8007746:	d009      	beq.n	800775c <UART_SetConfig+0x600>
 8007748:	2b04      	cmp	r3, #4
 800774a:	d00b      	beq.n	8007764 <UART_SetConfig+0x608>
 800774c:	e042      	b.n	80077d4 <UART_SetConfig+0x678>
 800774e:	2b20      	cmp	r3, #32
 8007750:	d02b      	beq.n	80077aa <UART_SetConfig+0x64e>
 8007752:	2b40      	cmp	r3, #64	; 0x40
 8007754:	d02c      	beq.n	80077b0 <UART_SetConfig+0x654>
 8007756:	2b10      	cmp	r3, #16
 8007758:	d014      	beq.n	8007784 <UART_SetConfig+0x628>
 800775a:	e03b      	b.n	80077d4 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800775c:	f7fe faa0 	bl	8005ca0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007760:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007762:	e03d      	b.n	80077e0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007764:	f107 0314 	add.w	r3, r7, #20
 8007768:	4618      	mov	r0, r3
 800776a:	f7fe faaf 	bl	8005ccc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007772:	e035      	b.n	80077e0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007774:	f107 0308 	add.w	r3, r7, #8
 8007778:	4618      	mov	r0, r3
 800777a:	f7fe fbf3 	bl	8005f64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007782:	e02d      	b.n	80077e0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007784:	4b0d      	ldr	r3, [pc, #52]	; (80077bc <UART_SetConfig+0x660>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0320 	and.w	r3, r3, #32
 800778c:	2b00      	cmp	r3, #0
 800778e:	d009      	beq.n	80077a4 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007790:	4b0a      	ldr	r3, [pc, #40]	; (80077bc <UART_SetConfig+0x660>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	08db      	lsrs	r3, r3, #3
 8007796:	f003 0303 	and.w	r3, r3, #3
 800779a:	4a0c      	ldr	r2, [pc, #48]	; (80077cc <UART_SetConfig+0x670>)
 800779c:	fa22 f303 	lsr.w	r3, r2, r3
 80077a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077a2:	e01d      	b.n	80077e0 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80077a4:	4b09      	ldr	r3, [pc, #36]	; (80077cc <UART_SetConfig+0x670>)
 80077a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077a8:	e01a      	b.n	80077e0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80077aa:	4b09      	ldr	r3, [pc, #36]	; (80077d0 <UART_SetConfig+0x674>)
 80077ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077ae:	e017      	b.n	80077e0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077b6:	e013      	b.n	80077e0 <UART_SetConfig+0x684>
 80077b8:	40011400 	.word	0x40011400
 80077bc:	58024400 	.word	0x58024400
 80077c0:	40007800 	.word	0x40007800
 80077c4:	40007c00 	.word	0x40007c00
 80077c8:	58000c00 	.word	0x58000c00
 80077cc:	03d09000 	.word	0x03d09000
 80077d0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80077d4:	2300      	movs	r3, #0
 80077d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80077de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 824d 	beq.w	8007c82 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	4aad      	ldr	r2, [pc, #692]	; (8007aa4 <UART_SetConfig+0x948>)
 80077ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077f2:	461a      	mov	r2, r3
 80077f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80077fa:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	4613      	mov	r3, r2
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	4413      	add	r3, r2
 8007806:	6a3a      	ldr	r2, [r7, #32]
 8007808:	429a      	cmp	r2, r3
 800780a:	d305      	bcc.n	8007818 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007812:	6a3a      	ldr	r2, [r7, #32]
 8007814:	429a      	cmp	r2, r3
 8007816:	d903      	bls.n	8007820 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800781e:	e230      	b.n	8007c82 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007822:	4618      	mov	r0, r3
 8007824:	f04f 0100 	mov.w	r1, #0
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782c:	4a9d      	ldr	r2, [pc, #628]	; (8007aa4 <UART_SetConfig+0x948>)
 800782e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007832:	b29b      	uxth	r3, r3
 8007834:	f04f 0400 	mov.w	r4, #0
 8007838:	461a      	mov	r2, r3
 800783a:	4623      	mov	r3, r4
 800783c:	f7f8 fd9c 	bl	8000378 <__aeabi_uldivmod>
 8007840:	4603      	mov	r3, r0
 8007842:	460c      	mov	r4, r1
 8007844:	4619      	mov	r1, r3
 8007846:	4622      	mov	r2, r4
 8007848:	f04f 0300 	mov.w	r3, #0
 800784c:	f04f 0400 	mov.w	r4, #0
 8007850:	0214      	lsls	r4, r2, #8
 8007852:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007856:	020b      	lsls	r3, r1, #8
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	6852      	ldr	r2, [r2, #4]
 800785c:	0852      	lsrs	r2, r2, #1
 800785e:	4611      	mov	r1, r2
 8007860:	f04f 0200 	mov.w	r2, #0
 8007864:	eb13 0b01 	adds.w	fp, r3, r1
 8007868:	eb44 0c02 	adc.w	ip, r4, r2
 800786c:	4658      	mov	r0, fp
 800786e:	4661      	mov	r1, ip
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f04f 0400 	mov.w	r4, #0
 8007878:	461a      	mov	r2, r3
 800787a:	4623      	mov	r3, r4
 800787c:	f7f8 fd7c 	bl	8000378 <__aeabi_uldivmod>
 8007880:	4603      	mov	r3, r0
 8007882:	460c      	mov	r4, r1
 8007884:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800788c:	d308      	bcc.n	80078a0 <UART_SetConfig+0x744>
 800788e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007894:	d204      	bcs.n	80078a0 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800789c:	60da      	str	r2, [r3, #12]
 800789e:	e1f0      	b.n	8007c82 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80078a6:	e1ec      	b.n	8007c82 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078b0:	f040 8100 	bne.w	8007ab4 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80078b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80078b8:	2b40      	cmp	r3, #64	; 0x40
 80078ba:	f200 80b7 	bhi.w	8007a2c <UART_SetConfig+0x8d0>
 80078be:	a201      	add	r2, pc, #4	; (adr r2, 80078c4 <UART_SetConfig+0x768>)
 80078c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c4:	080079c9 	.word	0x080079c9
 80078c8:	080079d1 	.word	0x080079d1
 80078cc:	08007a2d 	.word	0x08007a2d
 80078d0:	08007a2d 	.word	0x08007a2d
 80078d4:	080079d9 	.word	0x080079d9
 80078d8:	08007a2d 	.word	0x08007a2d
 80078dc:	08007a2d 	.word	0x08007a2d
 80078e0:	08007a2d 	.word	0x08007a2d
 80078e4:	080079e9 	.word	0x080079e9
 80078e8:	08007a2d 	.word	0x08007a2d
 80078ec:	08007a2d 	.word	0x08007a2d
 80078f0:	08007a2d 	.word	0x08007a2d
 80078f4:	08007a2d 	.word	0x08007a2d
 80078f8:	08007a2d 	.word	0x08007a2d
 80078fc:	08007a2d 	.word	0x08007a2d
 8007900:	08007a2d 	.word	0x08007a2d
 8007904:	080079f9 	.word	0x080079f9
 8007908:	08007a2d 	.word	0x08007a2d
 800790c:	08007a2d 	.word	0x08007a2d
 8007910:	08007a2d 	.word	0x08007a2d
 8007914:	08007a2d 	.word	0x08007a2d
 8007918:	08007a2d 	.word	0x08007a2d
 800791c:	08007a2d 	.word	0x08007a2d
 8007920:	08007a2d 	.word	0x08007a2d
 8007924:	08007a2d 	.word	0x08007a2d
 8007928:	08007a2d 	.word	0x08007a2d
 800792c:	08007a2d 	.word	0x08007a2d
 8007930:	08007a2d 	.word	0x08007a2d
 8007934:	08007a2d 	.word	0x08007a2d
 8007938:	08007a2d 	.word	0x08007a2d
 800793c:	08007a2d 	.word	0x08007a2d
 8007940:	08007a2d 	.word	0x08007a2d
 8007944:	08007a1f 	.word	0x08007a1f
 8007948:	08007a2d 	.word	0x08007a2d
 800794c:	08007a2d 	.word	0x08007a2d
 8007950:	08007a2d 	.word	0x08007a2d
 8007954:	08007a2d 	.word	0x08007a2d
 8007958:	08007a2d 	.word	0x08007a2d
 800795c:	08007a2d 	.word	0x08007a2d
 8007960:	08007a2d 	.word	0x08007a2d
 8007964:	08007a2d 	.word	0x08007a2d
 8007968:	08007a2d 	.word	0x08007a2d
 800796c:	08007a2d 	.word	0x08007a2d
 8007970:	08007a2d 	.word	0x08007a2d
 8007974:	08007a2d 	.word	0x08007a2d
 8007978:	08007a2d 	.word	0x08007a2d
 800797c:	08007a2d 	.word	0x08007a2d
 8007980:	08007a2d 	.word	0x08007a2d
 8007984:	08007a2d 	.word	0x08007a2d
 8007988:	08007a2d 	.word	0x08007a2d
 800798c:	08007a2d 	.word	0x08007a2d
 8007990:	08007a2d 	.word	0x08007a2d
 8007994:	08007a2d 	.word	0x08007a2d
 8007998:	08007a2d 	.word	0x08007a2d
 800799c:	08007a2d 	.word	0x08007a2d
 80079a0:	08007a2d 	.word	0x08007a2d
 80079a4:	08007a2d 	.word	0x08007a2d
 80079a8:	08007a2d 	.word	0x08007a2d
 80079ac:	08007a2d 	.word	0x08007a2d
 80079b0:	08007a2d 	.word	0x08007a2d
 80079b4:	08007a2d 	.word	0x08007a2d
 80079b8:	08007a2d 	.word	0x08007a2d
 80079bc:	08007a2d 	.word	0x08007a2d
 80079c0:	08007a2d 	.word	0x08007a2d
 80079c4:	08007a25 	.word	0x08007a25
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079c8:	f7fd fa50 	bl	8004e6c <HAL_RCC_GetPCLK1Freq>
 80079cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80079ce:	e033      	b.n	8007a38 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079d0:	f7fd fa62 	bl	8004e98 <HAL_RCC_GetPCLK2Freq>
 80079d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80079d6:	e02f      	b.n	8007a38 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079d8:	f107 0314 	add.w	r3, r7, #20
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fe f975 	bl	8005ccc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079e6:	e027      	b.n	8007a38 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079e8:	f107 0308 	add.w	r3, r7, #8
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fe fab9 	bl	8005f64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079f6:	e01f      	b.n	8007a38 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079f8:	4b2b      	ldr	r3, [pc, #172]	; (8007aa8 <UART_SetConfig+0x94c>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0320 	and.w	r3, r3, #32
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d009      	beq.n	8007a18 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a04:	4b28      	ldr	r3, [pc, #160]	; (8007aa8 <UART_SetConfig+0x94c>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	08db      	lsrs	r3, r3, #3
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	4a27      	ldr	r2, [pc, #156]	; (8007aac <UART_SetConfig+0x950>)
 8007a10:	fa22 f303 	lsr.w	r3, r2, r3
 8007a14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a16:	e00f      	b.n	8007a38 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8007a18:	4b24      	ldr	r3, [pc, #144]	; (8007aac <UART_SetConfig+0x950>)
 8007a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a1c:	e00c      	b.n	8007a38 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a1e:	4b24      	ldr	r3, [pc, #144]	; (8007ab0 <UART_SetConfig+0x954>)
 8007a20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a22:	e009      	b.n	8007a38 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a2a:	e005      	b.n	8007a38 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007a36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 8121 	beq.w	8007c82 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	4a17      	ldr	r2, [pc, #92]	; (8007aa4 <UART_SetConfig+0x948>)
 8007a46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a52:	005a      	lsls	r2, r3, #1
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	085b      	lsrs	r3, r3, #1
 8007a5a:	441a      	add	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6a:	2b0f      	cmp	r3, #15
 8007a6c:	d916      	bls.n	8007a9c <UART_SetConfig+0x940>
 8007a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a74:	d212      	bcs.n	8007a9c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	f023 030f 	bic.w	r3, r3, #15
 8007a7e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a82:	085b      	lsrs	r3, r3, #1
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007a98:	60da      	str	r2, [r3, #12]
 8007a9a:	e0f2      	b.n	8007c82 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007aa2:	e0ee      	b.n	8007c82 <UART_SetConfig+0xb26>
 8007aa4:	08009820 	.word	0x08009820
 8007aa8:	58024400 	.word	0x58024400
 8007aac:	03d09000 	.word	0x03d09000
 8007ab0:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ab4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ab8:	2b40      	cmp	r3, #64	; 0x40
 8007aba:	f200 80b7 	bhi.w	8007c2c <UART_SetConfig+0xad0>
 8007abe:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <UART_SetConfig+0x968>)
 8007ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac4:	08007bc9 	.word	0x08007bc9
 8007ac8:	08007bd1 	.word	0x08007bd1
 8007acc:	08007c2d 	.word	0x08007c2d
 8007ad0:	08007c2d 	.word	0x08007c2d
 8007ad4:	08007bd9 	.word	0x08007bd9
 8007ad8:	08007c2d 	.word	0x08007c2d
 8007adc:	08007c2d 	.word	0x08007c2d
 8007ae0:	08007c2d 	.word	0x08007c2d
 8007ae4:	08007be9 	.word	0x08007be9
 8007ae8:	08007c2d 	.word	0x08007c2d
 8007aec:	08007c2d 	.word	0x08007c2d
 8007af0:	08007c2d 	.word	0x08007c2d
 8007af4:	08007c2d 	.word	0x08007c2d
 8007af8:	08007c2d 	.word	0x08007c2d
 8007afc:	08007c2d 	.word	0x08007c2d
 8007b00:	08007c2d 	.word	0x08007c2d
 8007b04:	08007bf9 	.word	0x08007bf9
 8007b08:	08007c2d 	.word	0x08007c2d
 8007b0c:	08007c2d 	.word	0x08007c2d
 8007b10:	08007c2d 	.word	0x08007c2d
 8007b14:	08007c2d 	.word	0x08007c2d
 8007b18:	08007c2d 	.word	0x08007c2d
 8007b1c:	08007c2d 	.word	0x08007c2d
 8007b20:	08007c2d 	.word	0x08007c2d
 8007b24:	08007c2d 	.word	0x08007c2d
 8007b28:	08007c2d 	.word	0x08007c2d
 8007b2c:	08007c2d 	.word	0x08007c2d
 8007b30:	08007c2d 	.word	0x08007c2d
 8007b34:	08007c2d 	.word	0x08007c2d
 8007b38:	08007c2d 	.word	0x08007c2d
 8007b3c:	08007c2d 	.word	0x08007c2d
 8007b40:	08007c2d 	.word	0x08007c2d
 8007b44:	08007c1f 	.word	0x08007c1f
 8007b48:	08007c2d 	.word	0x08007c2d
 8007b4c:	08007c2d 	.word	0x08007c2d
 8007b50:	08007c2d 	.word	0x08007c2d
 8007b54:	08007c2d 	.word	0x08007c2d
 8007b58:	08007c2d 	.word	0x08007c2d
 8007b5c:	08007c2d 	.word	0x08007c2d
 8007b60:	08007c2d 	.word	0x08007c2d
 8007b64:	08007c2d 	.word	0x08007c2d
 8007b68:	08007c2d 	.word	0x08007c2d
 8007b6c:	08007c2d 	.word	0x08007c2d
 8007b70:	08007c2d 	.word	0x08007c2d
 8007b74:	08007c2d 	.word	0x08007c2d
 8007b78:	08007c2d 	.word	0x08007c2d
 8007b7c:	08007c2d 	.word	0x08007c2d
 8007b80:	08007c2d 	.word	0x08007c2d
 8007b84:	08007c2d 	.word	0x08007c2d
 8007b88:	08007c2d 	.word	0x08007c2d
 8007b8c:	08007c2d 	.word	0x08007c2d
 8007b90:	08007c2d 	.word	0x08007c2d
 8007b94:	08007c2d 	.word	0x08007c2d
 8007b98:	08007c2d 	.word	0x08007c2d
 8007b9c:	08007c2d 	.word	0x08007c2d
 8007ba0:	08007c2d 	.word	0x08007c2d
 8007ba4:	08007c2d 	.word	0x08007c2d
 8007ba8:	08007c2d 	.word	0x08007c2d
 8007bac:	08007c2d 	.word	0x08007c2d
 8007bb0:	08007c2d 	.word	0x08007c2d
 8007bb4:	08007c2d 	.word	0x08007c2d
 8007bb8:	08007c2d 	.word	0x08007c2d
 8007bbc:	08007c2d 	.word	0x08007c2d
 8007bc0:	08007c2d 	.word	0x08007c2d
 8007bc4:	08007c25 	.word	0x08007c25
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bc8:	f7fd f950 	bl	8004e6c <HAL_RCC_GetPCLK1Freq>
 8007bcc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007bce:	e033      	b.n	8007c38 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bd0:	f7fd f962 	bl	8004e98 <HAL_RCC_GetPCLK2Freq>
 8007bd4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007bd6:	e02f      	b.n	8007c38 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bd8:	f107 0314 	add.w	r3, r7, #20
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fe f875 	bl	8005ccc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007be6:	e027      	b.n	8007c38 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007be8:	f107 0308 	add.w	r3, r7, #8
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7fe f9b9 	bl	8005f64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bf6:	e01f      	b.n	8007c38 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bf8:	4b2c      	ldr	r3, [pc, #176]	; (8007cac <UART_SetConfig+0xb50>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0320 	and.w	r3, r3, #32
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d009      	beq.n	8007c18 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c04:	4b29      	ldr	r3, [pc, #164]	; (8007cac <UART_SetConfig+0xb50>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	08db      	lsrs	r3, r3, #3
 8007c0a:	f003 0303 	and.w	r3, r3, #3
 8007c0e:	4a28      	ldr	r2, [pc, #160]	; (8007cb0 <UART_SetConfig+0xb54>)
 8007c10:	fa22 f303 	lsr.w	r3, r2, r3
 8007c14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c16:	e00f      	b.n	8007c38 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8007c18:	4b25      	ldr	r3, [pc, #148]	; (8007cb0 <UART_SetConfig+0xb54>)
 8007c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c1c:	e00c      	b.n	8007c38 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c1e:	4b25      	ldr	r3, [pc, #148]	; (8007cb4 <UART_SetConfig+0xb58>)
 8007c20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c22:	e009      	b.n	8007c38 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c2a:	e005      	b.n	8007c38 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007c36:	bf00      	nop
    }

    if (pclk != 0U)
 8007c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d021      	beq.n	8007c82 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c42:	4a1d      	ldr	r2, [pc, #116]	; (8007cb8 <UART_SetConfig+0xb5c>)
 8007c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	085b      	lsrs	r3, r3, #1
 8007c56:	441a      	add	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c66:	2b0f      	cmp	r3, #15
 8007c68:	d908      	bls.n	8007c7c <UART_SetConfig+0xb20>
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c70:	d204      	bcs.n	8007c7c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c78:	60da      	str	r2, [r3, #12]
 8007c7a:	e002      	b.n	8007c82 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007c9e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3738      	adds	r7, #56	; 0x38
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007cac:	58024400 	.word	0x58024400
 8007cb0:	03d09000 	.word	0x03d09000
 8007cb4:	003d0900 	.word	0x003d0900
 8007cb8:	08009820 	.word	0x08009820

08007cbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00a      	beq.n	8007ce6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00a      	beq.n	8007d08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	430a      	orrs	r2, r1
 8007d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0c:	f003 0304 	and.w	r3, r3, #4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00a      	beq.n	8007d2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	430a      	orrs	r2, r1
 8007d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2e:	f003 0308 	and.w	r3, r3, #8
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00a      	beq.n	8007d4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d50:	f003 0310 	and.w	r3, r3, #16
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00a      	beq.n	8007d6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	430a      	orrs	r2, r1
 8007d6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d72:	f003 0320 	and.w	r3, r3, #32
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00a      	beq.n	8007d90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	430a      	orrs	r2, r1
 8007d8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d01a      	beq.n	8007dd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	430a      	orrs	r2, r1
 8007db0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dba:	d10a      	bne.n	8007dd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	605a      	str	r2, [r3, #4]
  }
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af02      	add	r7, sp, #8
 8007e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007e10:	f7fb fae4 	bl	80033dc <HAL_GetTick>
 8007e14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0308 	and.w	r3, r3, #8
 8007e20:	2b08      	cmp	r3, #8
 8007e22:	d10e      	bne.n	8007e42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f82c 	bl	8007e90 <UART_WaitOnFlagUntilTimeout>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e022      	b.n	8007e88 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0304 	and.w	r3, r3, #4
 8007e4c:	2b04      	cmp	r3, #4
 8007e4e:	d10e      	bne.n	8007e6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f816 	bl	8007e90 <UART_WaitOnFlagUntilTimeout>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e00c      	b.n	8007e88 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	603b      	str	r3, [r7, #0]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ea0:	e062      	b.n	8007f68 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea8:	d05e      	beq.n	8007f68 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eaa:	f7fb fa97 	bl	80033dc <HAL_GetTick>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	69ba      	ldr	r2, [r7, #24]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d302      	bcc.n	8007ec0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d11d      	bne.n	8007efc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ece:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689a      	ldr	r2, [r3, #8]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f022 0201 	bic.w	r2, r2, #1
 8007ede:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2220      	movs	r2, #32
 8007ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2220      	movs	r2, #32
 8007eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e045      	b.n	8007f88 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0304 	and.w	r3, r3, #4
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d02e      	beq.n	8007f68 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69db      	ldr	r3, [r3, #28]
 8007f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f18:	d126      	bne.n	8007f68 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f22:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f32:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	689a      	ldr	r2, [r3, #8]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f022 0201 	bic.w	r2, r2, #1
 8007f42:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2220      	movs	r2, #32
 8007f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2220      	movs	r2, #32
 8007f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2220      	movs	r2, #32
 8007f58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e00f      	b.n	8007f88 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	69da      	ldr	r2, [r3, #28]
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	4013      	ands	r3, r2
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	bf0c      	ite	eq
 8007f78:	2301      	moveq	r3, #1
 8007f7a:	2300      	movne	r3, #0
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	461a      	mov	r2, r3
 8007f80:	79fb      	ldrb	r3, [r7, #7]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d08d      	beq.n	8007ea2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007fa6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6899      	ldr	r1, [r3, #8]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	4b08      	ldr	r3, [pc, #32]	; (8007fd4 <UART_EndRxTransfer+0x44>)
 8007fb4:	400b      	ands	r3, r1
 8007fb6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8007fc6:	bf00      	nop
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	effffffe 	.word	0xeffffffe

08007fd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f7ff f8a6 	bl	8007148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ffc:	bf00      	nop
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008012:	2b21      	cmp	r3, #33	; 0x21
 8008014:	d12a      	bne.n	800806c <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800801c:	b29b      	uxth	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d110      	bne.n	8008044 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008030:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008040:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008042:	e013      	b.n	800806c <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008048:	781a      	ldrb	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008054:	1c5a      	adds	r2, r3, #1
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008060:	b29b      	uxth	r3, r3
 8008062:	3b01      	subs	r3, #1
 8008064:	b29a      	uxth	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008086:	2b21      	cmp	r3, #33	; 0x21
 8008088:	d12f      	bne.n	80080ea <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008090:	b29b      	uxth	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d110      	bne.n	80080b8 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080a4:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080b4:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80080b6:	e018      	b.n	80080ea <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	881b      	ldrh	r3, [r3, #0]
 80080c2:	461a      	mov	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080cc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080d2:	1c9a      	adds	r2, r3, #2
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080de:	b29b      	uxth	r3, r3
 80080e0:	3b01      	subs	r3, #1
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80080ea:	bf00      	nop
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080f6:	b480      	push	{r7}
 80080f8:	b085      	sub	sp, #20
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008104:	2b21      	cmp	r3, #33	; 0x21
 8008106:	d13d      	bne.n	8008184 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800810e:	81fb      	strh	r3, [r7, #14]
 8008110:	e035      	b.n	800817e <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008118:	b29b      	uxth	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d111      	bne.n	8008142 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800812c:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800813c:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800813e:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8008140:	e020      	b.n	8008184 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	69db      	ldr	r3, [r3, #28]
 8008148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814c:	2b00      	cmp	r3, #0
 800814e:	d013      	beq.n	8008178 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008154:	781a      	ldrb	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008160:	1c5a      	adds	r2, r3, #1
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800816c:	b29b      	uxth	r3, r3
 800816e:	3b01      	subs	r3, #1
 8008170:	b29a      	uxth	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008178:	89fb      	ldrh	r3, [r7, #14]
 800817a:	3b01      	subs	r3, #1
 800817c:	81fb      	strh	r3, [r7, #14]
 800817e:	89fb      	ldrh	r3, [r7, #14]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1c6      	bne.n	8008112 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8008184:	bf00      	nop
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800819e:	2b21      	cmp	r3, #33	; 0x21
 80081a0:	d142      	bne.n	8008228 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081a8:	81fb      	strh	r3, [r7, #14]
 80081aa:	e03a      	b.n	8008222 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d111      	bne.n	80081dc <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689a      	ldr	r2, [r3, #8]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80081c6:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081d6:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80081d8:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 80081da:	e025      	b.n	8008228 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d018      	beq.n	800821c <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ee:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	881b      	ldrh	r3, [r3, #0]
 80081f4:	461a      	mov	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081fe:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008204:	1c9a      	adds	r2, r3, #2
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008210:	b29b      	uxth	r3, r3
 8008212:	3b01      	subs	r3, #1
 8008214:	b29a      	uxth	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800821c:	89fb      	ldrh	r3, [r7, #14]
 800821e:	3b01      	subs	r3, #1
 8008220:	81fb      	strh	r3, [r7, #14]
 8008222:	89fb      	ldrh	r3, [r7, #14]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1c1      	bne.n	80081ac <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8008228:	bf00      	nop
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800824a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2220      	movs	r2, #32
 8008250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7fa fe5c 	bl	8002f18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008276:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800827e:	2b22      	cmp	r3, #34	; 0x22
 8008280:	d13b      	bne.n	80082fa <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800828a:	89bb      	ldrh	r3, [r7, #12]
 800828c:	b2d9      	uxtb	r1, r3
 800828e:	89fb      	ldrh	r3, [r7, #14]
 8008290:	b2da      	uxtb	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008296:	400a      	ands	r2, r1
 8008298:	b2d2      	uxtb	r2, r2
 800829a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a0:	1c5a      	adds	r2, r3, #1
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	3b01      	subs	r3, #1
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082be:	b29b      	uxth	r3, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d122      	bne.n	800830a <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80082d2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689a      	ldr	r2, [r3, #8]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f022 0201 	bic.w	r2, r2, #1
 80082e2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2220      	movs	r2, #32
 80082e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7fa fe20 	bl	8002f38 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082f8:	e007      	b.n	800830a <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	699a      	ldr	r2, [r3, #24]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f042 0208 	orr.w	r2, r2, #8
 8008308:	619a      	str	r2, [r3, #24]
}
 800830a:	bf00      	nop
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b084      	sub	sp, #16
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008320:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008328:	2b22      	cmp	r3, #34	; 0x22
 800832a:	d13b      	bne.n	80083a4 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008332:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008338:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800833a:	89ba      	ldrh	r2, [r7, #12]
 800833c:	89fb      	ldrh	r3, [r7, #14]
 800833e:	4013      	ands	r3, r2
 8008340:	b29a      	uxth	r2, r3
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800834a:	1c9a      	adds	r2, r3, #2
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008356:	b29b      	uxth	r3, r3
 8008358:	3b01      	subs	r3, #1
 800835a:	b29a      	uxth	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008368:	b29b      	uxth	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	d122      	bne.n	80083b4 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800837c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689a      	ldr	r2, [r3, #8]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0201 	bic.w	r2, r2, #1
 800838c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2220      	movs	r2, #32
 8008392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7fa fdcb 	bl	8002f38 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083a2:	e007      	b.n	80083b4 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	699a      	ldr	r2, [r3, #24]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f042 0208 	orr.w	r2, r2, #8
 80083b2:	619a      	str	r2, [r3, #24]
}
 80083b4:	bf00      	nop
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80083ca:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083d2:	2b22      	cmp	r3, #34	; 0x22
 80083d4:	d166      	bne.n	80084a4 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80083dc:	81fb      	strh	r3, [r7, #14]
 80083de:	e03d      	b.n	800845c <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e6:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80083e8:	893b      	ldrh	r3, [r7, #8]
 80083ea:	b2d9      	uxtb	r1, r3
 80083ec:	89bb      	ldrh	r3, [r7, #12]
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f4:	400a      	ands	r2, r1
 80083f6:	b2d2      	uxtb	r2, r2
 80083f8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083fe:	1c5a      	adds	r2, r3, #1
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800840a:	b29b      	uxth	r3, r3
 800840c:	3b01      	subs	r3, #1
 800840e:	b29a      	uxth	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800841c:	b29b      	uxth	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	d119      	bne.n	8008456 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008430:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	6899      	ldr	r1, [r3, #8]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	4b1f      	ldr	r3, [pc, #124]	; (80084bc <UART_RxISR_8BIT_FIFOEN+0x100>)
 800843e:	400b      	ands	r3, r1
 8008440:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2220      	movs	r2, #32
 8008446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7fa fd71 	bl	8002f38 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008456:	89fb      	ldrh	r3, [r7, #14]
 8008458:	3b01      	subs	r3, #1
 800845a:	81fb      	strh	r3, [r7, #14]
 800845c:	89fb      	ldrh	r3, [r7, #14]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1be      	bne.n	80083e0 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008468:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800846a:	897b      	ldrh	r3, [r7, #10]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d021      	beq.n	80084b4 <UART_RxISR_8BIT_FIFOEN+0xf8>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008476:	897a      	ldrh	r2, [r7, #10]
 8008478:	429a      	cmp	r2, r3
 800847a:	d21b      	bcs.n	80084b4 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	689a      	ldr	r2, [r3, #8]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800848a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a0c      	ldr	r2, [pc, #48]	; (80084c0 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8008490:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f042 0220 	orr.w	r2, r2, #32
 80084a0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084a2:	e007      	b.n	80084b4 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	699a      	ldr	r2, [r3, #24]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f042 0208 	orr.w	r2, r2, #8
 80084b2:	619a      	str	r2, [r3, #24]
}
 80084b4:	bf00      	nop
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	effffffe 	.word	0xeffffffe
 80084c0:	08008269 	.word	0x08008269

080084c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80084d2:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084da:	2b22      	cmp	r3, #34	; 0x22
 80084dc:	d166      	bne.n	80085ac <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80084e4:	82fb      	strh	r3, [r7, #22]
 80084e6:	e03d      	b.n	8008564 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ee:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f4:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 80084f6:	8a3a      	ldrh	r2, [r7, #16]
 80084f8:	8abb      	ldrh	r3, [r7, #20]
 80084fa:	4013      	ands	r3, r2
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008506:	1c9a      	adds	r2, r3, #2
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008512:	b29b      	uxth	r3, r3
 8008514:	3b01      	subs	r3, #1
 8008516:	b29a      	uxth	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008524:	b29b      	uxth	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d119      	bne.n	800855e <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008538:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	6899      	ldr	r1, [r3, #8]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	4b1f      	ldr	r3, [pc, #124]	; (80085c4 <UART_RxISR_16BIT_FIFOEN+0x100>)
 8008546:	400b      	ands	r3, r1
 8008548:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2220      	movs	r2, #32
 800854e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7fa fced 	bl	8002f38 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800855e:	8afb      	ldrh	r3, [r7, #22]
 8008560:	3b01      	subs	r3, #1
 8008562:	82fb      	strh	r3, [r7, #22]
 8008564:	8afb      	ldrh	r3, [r7, #22]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1be      	bne.n	80084e8 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008570:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008572:	8a7b      	ldrh	r3, [r7, #18]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d021      	beq.n	80085bc <UART_RxISR_16BIT_FIFOEN+0xf8>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800857e:	8a7a      	ldrh	r2, [r7, #18]
 8008580:	429a      	cmp	r2, r3
 8008582:	d21b      	bcs.n	80085bc <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	689a      	ldr	r2, [r3, #8]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008592:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a0c      	ldr	r2, [pc, #48]	; (80085c8 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8008598:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f042 0220 	orr.w	r2, r2, #32
 80085a8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085aa:	e007      	b.n	80085bc <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	699a      	ldr	r2, [r3, #24]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f042 0208 	orr.w	r2, r2, #8
 80085ba:	619a      	str	r2, [r3, #24]
}
 80085bc:	bf00      	nop
 80085be:	3718      	adds	r7, #24
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	effffffe 	.word	0xeffffffe
 80085c8:	08008313 	.word	0x08008313

080085cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80085fc:	bf00      	nop
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008616:	2b01      	cmp	r3, #1
 8008618:	d101      	bne.n	800861e <HAL_UARTEx_DisableFifoMode+0x16>
 800861a:	2302      	movs	r3, #2
 800861c:	e027      	b.n	800866e <HAL_UARTEx_DisableFifoMode+0x66>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2224      	movs	r2, #36	; 0x24
 800862a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f022 0201 	bic.w	r2, r2, #1
 8008644:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800864c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2220      	movs	r2, #32
 8008660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800868a:	2b01      	cmp	r3, #1
 800868c:	d101      	bne.n	8008692 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800868e:	2302      	movs	r3, #2
 8008690:	e02d      	b.n	80086ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2224      	movs	r2, #36	; 0x24
 800869e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f022 0201 	bic.w	r2, r2, #1
 80086b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	430a      	orrs	r2, r1
 80086cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f850 	bl	8008774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2220      	movs	r2, #32
 80086e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b084      	sub	sp, #16
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
 80086fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008706:	2b01      	cmp	r3, #1
 8008708:	d101      	bne.n	800870e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800870a:	2302      	movs	r3, #2
 800870c:	e02d      	b.n	800876a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2224      	movs	r2, #36	; 0x24
 800871a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f022 0201 	bic.w	r2, r2, #1
 8008734:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	430a      	orrs	r2, r1
 8008748:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f812 	bl	8008774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2220      	movs	r2, #32
 800875c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
	...

08008774 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008774:	b480      	push	{r7}
 8008776:	b089      	sub	sp, #36	; 0x24
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800877c:	4a2f      	ldr	r2, [pc, #188]	; (800883c <UARTEx_SetNbDataToProcess+0xc8>)
 800877e:	f107 0314 	add.w	r3, r7, #20
 8008782:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008786:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800878a:	4a2d      	ldr	r2, [pc, #180]	; (8008840 <UARTEx_SetNbDataToProcess+0xcc>)
 800878c:	f107 030c 	add.w	r3, r7, #12
 8008790:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008794:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800879c:	2b00      	cmp	r3, #0
 800879e:	d108      	bne.n	80087b2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087b0:	e03d      	b.n	800882e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087b2:	2310      	movs	r3, #16
 80087b4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087b6:	2310      	movs	r3, #16
 80087b8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	0e5b      	lsrs	r3, r3, #25
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	f003 0307 	and.w	r3, r3, #7
 80087c8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	0f5b      	lsrs	r3, r3, #29
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	f003 0307 	and.w	r3, r3, #7
 80087d8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80087da:	7fbb      	ldrb	r3, [r7, #30]
 80087dc:	7f3a      	ldrb	r2, [r7, #28]
 80087de:	f107 0120 	add.w	r1, r7, #32
 80087e2:	440a      	add	r2, r1
 80087e4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80087e8:	fb02 f303 	mul.w	r3, r2, r3
 80087ec:	7f3a      	ldrb	r2, [r7, #28]
 80087ee:	f107 0120 	add.w	r1, r7, #32
 80087f2:	440a      	add	r2, r1
 80087f4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80087f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008804:	7ffb      	ldrb	r3, [r7, #31]
 8008806:	7f7a      	ldrb	r2, [r7, #29]
 8008808:	f107 0120 	add.w	r1, r7, #32
 800880c:	440a      	add	r2, r1
 800880e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008812:	fb02 f303 	mul.w	r3, r2, r3
 8008816:	7f7a      	ldrb	r2, [r7, #29]
 8008818:	f107 0120 	add.w	r1, r7, #32
 800881c:	440a      	add	r2, r1
 800881e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008822:	fb93 f3f2 	sdiv	r3, r3, r2
 8008826:	b29a      	uxth	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800882e:	bf00      	nop
 8008830:	3724      	adds	r7, #36	; 0x24
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	080097f4 	.word	0x080097f4
 8008840:	080097fc 	.word	0x080097fc

08008844 <arm_fill_f32>:
 8008844:	b410      	push	{r4}
 8008846:	088c      	lsrs	r4, r1, #2
 8008848:	d010      	beq.n	800886c <arm_fill_f32+0x28>
 800884a:	f100 0310 	add.w	r3, r0, #16
 800884e:	4622      	mov	r2, r4
 8008850:	3a01      	subs	r2, #1
 8008852:	ed03 0a04 	vstr	s0, [r3, #-16]
 8008856:	ed03 0a03 	vstr	s0, [r3, #-12]
 800885a:	f103 0310 	add.w	r3, r3, #16
 800885e:	ed03 0a06 	vstr	s0, [r3, #-24]	; 0xffffffe8
 8008862:	ed03 0a05 	vstr	s0, [r3, #-20]	; 0xffffffec
 8008866:	d1f3      	bne.n	8008850 <arm_fill_f32+0xc>
 8008868:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800886c:	f011 0103 	ands.w	r1, r1, #3
 8008870:	d003      	beq.n	800887a <arm_fill_f32+0x36>
 8008872:	3901      	subs	r1, #1
 8008874:	eca0 0a01 	vstmia	r0!, {s0}
 8008878:	d1fb      	bne.n	8008872 <arm_fill_f32+0x2e>
 800887a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800887e:	4770      	bx	lr

08008880 <arm_copy_q15>:
 8008880:	b4f0      	push	{r4, r5, r6, r7}
 8008882:	0897      	lsrs	r7, r2, #2
 8008884:	d015      	beq.n	80088b2 <arm_copy_q15+0x32>
 8008886:	f101 0408 	add.w	r4, r1, #8
 800888a:	f100 0308 	add.w	r3, r0, #8
 800888e:	463d      	mov	r5, r7
 8008890:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8008894:	3d01      	subs	r5, #1
 8008896:	f103 0308 	add.w	r3, r3, #8
 800889a:	f104 0408 	add.w	r4, r4, #8
 800889e:	f844 6c10 	str.w	r6, [r4, #-16]
 80088a2:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 80088a6:	f844 6c0c 	str.w	r6, [r4, #-12]
 80088aa:	d1f1      	bne.n	8008890 <arm_copy_q15+0x10>
 80088ac:	00ff      	lsls	r7, r7, #3
 80088ae:	4439      	add	r1, r7
 80088b0:	4438      	add	r0, r7
 80088b2:	f012 0203 	ands.w	r2, r2, #3
 80088b6:	d006      	beq.n	80088c6 <arm_copy_q15+0x46>
 80088b8:	3902      	subs	r1, #2
 80088ba:	f930 3b02 	ldrsh.w	r3, [r0], #2
 80088be:	3a01      	subs	r2, #1
 80088c0:	f821 3f02 	strh.w	r3, [r1, #2]!
 80088c4:	d1f9      	bne.n	80088ba <arm_copy_q15+0x3a>
 80088c6:	bcf0      	pop	{r4, r5, r6, r7}
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop

080088cc <arm_copy_f32>:
 80088cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d0:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80088d4:	d01e      	beq.n	8008914 <arm_copy_f32+0x48>
 80088d6:	f100 0410 	add.w	r4, r0, #16
 80088da:	f101 0310 	add.w	r3, r1, #16
 80088de:	4645      	mov	r5, r8
 80088e0:	f854 cc10 	ldr.w	ip, [r4, #-16]
 80088e4:	3d01      	subs	r5, #1
 80088e6:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 80088ea:	f103 0310 	add.w	r3, r3, #16
 80088ee:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80088f2:	f104 0410 	add.w	r4, r4, #16
 80088f6:	f854 6c14 	ldr.w	r6, [r4, #-20]
 80088fa:	f843 cc20 	str.w	ip, [r3, #-32]
 80088fe:	f843 ec1c 	str.w	lr, [r3, #-28]
 8008902:	f843 7c18 	str.w	r7, [r3, #-24]
 8008906:	f843 6c14 	str.w	r6, [r3, #-20]
 800890a:	d1e9      	bne.n	80088e0 <arm_copy_f32+0x14>
 800890c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8008910:	4440      	add	r0, r8
 8008912:	4441      	add	r1, r8
 8008914:	f012 0203 	ands.w	r2, r2, #3
 8008918:	d005      	beq.n	8008926 <arm_copy_f32+0x5a>
 800891a:	f850 3b04 	ldr.w	r3, [r0], #4
 800891e:	3a01      	subs	r2, #1
 8008920:	f841 3b04 	str.w	r3, [r1], #4
 8008924:	d1f9      	bne.n	800891a <arm_copy_f32+0x4e>
 8008926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800892a:	bf00      	nop

0800892c <arm_std_f32>:
 800892c:	2901      	cmp	r1, #1
 800892e:	d065      	beq.n	80089fc <arm_std_f32+0xd0>
 8008930:	eddf 5a39 	vldr	s11, [pc, #228]	; 8008a18 <arm_std_f32+0xec>
 8008934:	b530      	push	{r4, r5, lr}
 8008936:	088d      	lsrs	r5, r1, #2
 8008938:	b083      	sub	sp, #12
 800893a:	d062      	beq.n	8008a02 <arm_std_f32+0xd6>
 800893c:	eef0 6a65 	vmov.f32	s13, s11
 8008940:	f100 0310 	add.w	r3, r0, #16
 8008944:	462c      	mov	r4, r5
 8008946:	ed53 7a04 	vldr	s15, [r3, #-16]
 800894a:	3c01      	subs	r4, #1
 800894c:	ed13 7a03 	vldr	s14, [r3, #-12]
 8008950:	f103 0310 	add.w	r3, r3, #16
 8008954:	ee27 4aa7 	vmul.f32	s8, s15, s15
 8008958:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 800895c:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8008960:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8008964:	ee27 5a07 	vmul.f32	s10, s14, s14
 8008968:	ee74 5a25 	vadd.f32	s11, s8, s11
 800896c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8008970:	ee64 6aa4 	vmul.f32	s13, s9, s9
 8008974:	ee75 5a25 	vadd.f32	s11, s10, s11
 8008978:	ee77 7a24 	vadd.f32	s15, s14, s9
 800897c:	ee26 7a06 	vmul.f32	s14, s12, s12
 8008980:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8008984:	ee77 6a86 	vadd.f32	s13, s15, s12
 8008988:	ee77 5a25 	vadd.f32	s11, s14, s11
 800898c:	d1db      	bne.n	8008946 <arm_std_f32+0x1a>
 800898e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8008992:	f011 0303 	ands.w	r3, r1, #3
 8008996:	d009      	beq.n	80089ac <arm_std_f32+0x80>
 8008998:	ecf0 7a01 	vldmia	r0!, {s15}
 800899c:	3b01      	subs	r3, #1
 800899e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80089a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80089a6:	ee75 5a87 	vadd.f32	s11, s11, s14
 80089aa:	d1f5      	bne.n	8008998 <arm_std_f32+0x6c>
 80089ac:	ee07 1a90 	vmov	s15, r1
 80089b0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80089b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089bc:	ee77 6ac6 	vsub.f32	s13, s15, s12
 80089c0:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 80089c4:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 80089c8:	ee27 7a07 	vmul.f32	s14, s14, s14
 80089cc:	ee27 7a00 	vmul.f32	s14, s14, s0
 80089d0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80089d4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80089d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089dc:	db0a      	blt.n	80089f4 <arm_std_f32+0xc8>
 80089de:	eeb1 0ac7 	vsqrt.f32	s0, s14
 80089e2:	eeb4 0a40 	vcmp.f32	s0, s0
 80089e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ea:	d10d      	bne.n	8008a08 <arm_std_f32+0xdc>
 80089ec:	ed82 0a00 	vstr	s0, [r2]
 80089f0:	b003      	add	sp, #12
 80089f2:	bd30      	pop	{r4, r5, pc}
 80089f4:	2300      	movs	r3, #0
 80089f6:	6013      	str	r3, [r2, #0]
 80089f8:	b003      	add	sp, #12
 80089fa:	bd30      	pop	{r4, r5, pc}
 80089fc:	2300      	movs	r3, #0
 80089fe:	6013      	str	r3, [r2, #0]
 8008a00:	4770      	bx	lr
 8008a02:	eef0 6a65 	vmov.f32	s13, s11
 8008a06:	e7c4      	b.n	8008992 <arm_std_f32+0x66>
 8008a08:	eeb0 0a47 	vmov.f32	s0, s14
 8008a0c:	9201      	str	r2, [sp, #4]
 8008a0e:	f000 fd0b 	bl	8009428 <sqrtf>
 8008a12:	9a01      	ldr	r2, [sp, #4]
 8008a14:	e7ea      	b.n	80089ec <arm_std_f32+0xc0>
 8008a16:	bf00      	nop
 8008a18:	00000000 	.word	0x00000000

08008a1c <arm_mean_f32>:
 8008a1c:	b430      	push	{r4, r5}
 8008a1e:	088d      	lsrs	r5, r1, #2
 8008a20:	d02d      	beq.n	8008a7e <arm_mean_f32+0x62>
 8008a22:	f100 0310 	add.w	r3, r0, #16
 8008a26:	462c      	mov	r4, r5
 8008a28:	eddf 7a16 	vldr	s15, [pc, #88]	; 8008a84 <arm_mean_f32+0x68>
 8008a2c:	ed13 7a04 	vldr	s14, [r3, #-16]
 8008a30:	3c01      	subs	r4, #1
 8008a32:	ed13 6a03 	vldr	s12, [r3, #-12]
 8008a36:	f103 0310 	add.w	r3, r3, #16
 8008a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a3e:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 8008a42:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 8008a46:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a52:	d1eb      	bne.n	8008a2c <arm_mean_f32+0x10>
 8008a54:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8008a58:	f011 0303 	ands.w	r3, r1, #3
 8008a5c:	d005      	beq.n	8008a6a <arm_mean_f32+0x4e>
 8008a5e:	ecb0 7a01 	vldmia	r0!, {s14}
 8008a62:	3b01      	subs	r3, #1
 8008a64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a68:	d1f9      	bne.n	8008a5e <arm_mean_f32+0x42>
 8008a6a:	ee07 1a10 	vmov	s14, r1
 8008a6e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008a72:	bc30      	pop	{r4, r5}
 8008a74:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008a78:	edc2 6a00 	vstr	s13, [r2]
 8008a7c:	4770      	bx	lr
 8008a7e:	eddf 7a01 	vldr	s15, [pc, #4]	; 8008a84 <arm_mean_f32+0x68>
 8008a82:	e7e9      	b.n	8008a58 <arm_mean_f32+0x3c>
 8008a84:	00000000 	.word	0x00000000

08008a88 <arm_max_q15>:
 8008a88:	f101 3cff 	add.w	ip, r1, #4294967295
 8008a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a90:	ea5f 0a9c 	movs.w	sl, ip, lsr #2
 8008a94:	f100 0902 	add.w	r9, r0, #2
 8008a98:	f9b0 4000 	ldrsh.w	r4, [r0]
 8008a9c:	d049      	beq.n	8008b32 <arm_max_q15+0xaa>
 8008a9e:	300a      	adds	r0, #10
 8008aa0:	46d0      	mov	r8, sl
 8008aa2:	f04f 0e04 	mov.w	lr, #4
 8008aa6:	2700      	movs	r7, #0
 8008aa8:	f930 5c08 	ldrsh.w	r5, [r0, #-8]
 8008aac:	f1ae 0603 	sub.w	r6, lr, #3
 8008ab0:	f930 bc06 	ldrsh.w	fp, [r0, #-6]
 8008ab4:	3008      	adds	r0, #8
 8008ab6:	42a5      	cmp	r5, r4
 8008ab8:	bfc8      	it	gt
 8008aba:	4637      	movgt	r7, r6
 8008abc:	42ac      	cmp	r4, r5
 8008abe:	f930 6c0c 	ldrsh.w	r6, [r0, #-12]
 8008ac2:	bfb8      	it	lt
 8008ac4:	462c      	movlt	r4, r5
 8008ac6:	f1ae 0502 	sub.w	r5, lr, #2
 8008aca:	455c      	cmp	r4, fp
 8008acc:	bfb8      	it	lt
 8008ace:	462f      	movlt	r7, r5
 8008ad0:	455c      	cmp	r4, fp
 8008ad2:	bfb8      	it	lt
 8008ad4:	465c      	movlt	r4, fp
 8008ad6:	f10e 3bff 	add.w	fp, lr, #4294967295
 8008ada:	4625      	mov	r5, r4
 8008adc:	f930 4c0a 	ldrsh.w	r4, [r0, #-10]
 8008ae0:	42b5      	cmp	r5, r6
 8008ae2:	bfb8      	it	lt
 8008ae4:	465f      	movlt	r7, fp
 8008ae6:	42b5      	cmp	r5, r6
 8008ae8:	bfb8      	it	lt
 8008aea:	4635      	movlt	r5, r6
 8008aec:	42a5      	cmp	r5, r4
 8008aee:	bfb8      	it	lt
 8008af0:	4677      	movlt	r7, lr
 8008af2:	42ac      	cmp	r4, r5
 8008af4:	f10e 0e04 	add.w	lr, lr, #4
 8008af8:	bfb8      	it	lt
 8008afa:	462c      	movlt	r4, r5
 8008afc:	f1b8 0801 	subs.w	r8, r8, #1
 8008b00:	d1d2      	bne.n	8008aa8 <arm_max_q15+0x20>
 8008b02:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
 8008b06:	f01c 0c03 	ands.w	ip, ip, #3
 8008b0a:	d014      	beq.n	8008b36 <arm_max_q15+0xae>
 8008b0c:	ebcc 0c01 	rsb	ip, ip, r1
 8008b10:	f939 0b02 	ldrsh.w	r0, [r9], #2
 8008b14:	42a0      	cmp	r0, r4
 8008b16:	bfc8      	it	gt
 8008b18:	4667      	movgt	r7, ip
 8008b1a:	42a0      	cmp	r0, r4
 8008b1c:	f10c 0c01 	add.w	ip, ip, #1
 8008b20:	bfb8      	it	lt
 8008b22:	4620      	movlt	r0, r4
 8008b24:	4561      	cmp	r1, ip
 8008b26:	4604      	mov	r4, r0
 8008b28:	d1f2      	bne.n	8008b10 <arm_max_q15+0x88>
 8008b2a:	8010      	strh	r0, [r2, #0]
 8008b2c:	601f      	str	r7, [r3, #0]
 8008b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b32:	4657      	mov	r7, sl
 8008b34:	e7e7      	b.n	8008b06 <arm_max_q15+0x7e>
 8008b36:	4620      	mov	r0, r4
 8008b38:	e7f7      	b.n	8008b2a <arm_max_q15+0xa2>
 8008b3a:	bf00      	nop

08008b3c <arm_max_f32>:
 8008b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b40:	1e4d      	subs	r5, r1, #1
 8008b42:	f100 0c04 	add.w	ip, r0, #4
 8008b46:	edd0 7a00 	vldr	s15, [r0]
 8008b4a:	ea5f 0995 	movs.w	r9, r5, lsr #2
 8008b4e:	d056      	beq.n	8008bfe <arm_max_f32+0xc2>
 8008b50:	3014      	adds	r0, #20
 8008b52:	46c8      	mov	r8, r9
 8008b54:	2404      	movs	r4, #4
 8008b56:	2600      	movs	r6, #0
 8008b58:	ed10 6a04 	vldr	s12, [r0, #-16]
 8008b5c:	f1a4 0a03 	sub.w	sl, r4, #3
 8008b60:	ed50 6a03 	vldr	s13, [r0, #-12]
 8008b64:	f1a4 0e02 	sub.w	lr, r4, #2
 8008b68:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8008b6c:	ed10 7a02 	vldr	s14, [r0, #-8]
 8008b70:	ed50 5a01 	vldr	s11, [r0, #-4]
 8008b74:	1e67      	subs	r7, r4, #1
 8008b76:	3010      	adds	r0, #16
 8008b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b7c:	bfc8      	it	gt
 8008b7e:	eef0 7a46 	vmovgt.f32	s15, s12
 8008b82:	bfc8      	it	gt
 8008b84:	4656      	movgt	r6, sl
 8008b86:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b8e:	bf48      	it	mi
 8008b90:	eef0 7a66 	vmovmi.f32	s15, s13
 8008b94:	bf48      	it	mi
 8008b96:	4676      	movmi	r6, lr
 8008b98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba0:	bf48      	it	mi
 8008ba2:	eef0 7a47 	vmovmi.f32	s15, s14
 8008ba6:	bf48      	it	mi
 8008ba8:	463e      	movmi	r6, r7
 8008baa:	eef4 7ae5 	vcmpe.f32	s15, s11
 8008bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bb2:	bf48      	it	mi
 8008bb4:	4626      	movmi	r6, r4
 8008bb6:	bf48      	it	mi
 8008bb8:	eef0 7a65 	vmovmi.f32	s15, s11
 8008bbc:	f1b8 0801 	subs.w	r8, r8, #1
 8008bc0:	f104 0404 	add.w	r4, r4, #4
 8008bc4:	d1c8      	bne.n	8008b58 <arm_max_f32+0x1c>
 8008bc6:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 8008bca:	f015 0003 	ands.w	r0, r5, #3
 8008bce:	d018      	beq.n	8008c02 <arm_max_f32+0xc6>
 8008bd0:	1a08      	subs	r0, r1, r0
 8008bd2:	ecbc 7a01 	vldmia	ip!, {s14}
 8008bd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bde:	bfc8      	it	gt
 8008be0:	4606      	movgt	r6, r0
 8008be2:	f100 0001 	add.w	r0, r0, #1
 8008be6:	bfd8      	it	le
 8008be8:	eeb0 7a67 	vmovle.f32	s14, s15
 8008bec:	4281      	cmp	r1, r0
 8008bee:	eef0 7a47 	vmov.f32	s15, s14
 8008bf2:	d1ee      	bne.n	8008bd2 <arm_max_f32+0x96>
 8008bf4:	ed82 7a00 	vstr	s14, [r2]
 8008bf8:	601e      	str	r6, [r3, #0]
 8008bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bfe:	464e      	mov	r6, r9
 8008c00:	e7e3      	b.n	8008bca <arm_max_f32+0x8e>
 8008c02:	eeb0 7a67 	vmov.f32	s14, s15
 8008c06:	e7f5      	b.n	8008bf4 <arm_max_f32+0xb8>

08008c08 <arm_cmplx_mult_cmplx_f32>:
 8008c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c0a:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8008c0e:	d073      	beq.n	8008cf8 <arm_cmplx_mult_cmplx_f32+0xf0>
 8008c10:	f100 0620 	add.w	r6, r0, #32
 8008c14:	f101 0520 	add.w	r5, r1, #32
 8008c18:	f102 0420 	add.w	r4, r2, #32
 8008c1c:	4677      	mov	r7, lr
 8008c1e:	ed16 7a08 	vldr	s14, [r6, #-32]	; 0xffffffe0
 8008c22:	3f01      	subs	r7, #1
 8008c24:	ed55 7a08 	vldr	s15, [r5, #-32]	; 0xffffffe0
 8008c28:	f106 0620 	add.w	r6, r6, #32
 8008c2c:	ed56 5a0f 	vldr	s11, [r6, #-60]	; 0xffffffc4
 8008c30:	f105 0520 	add.w	r5, r5, #32
 8008c34:	ed55 6a0f 	vldr	s13, [r5, #-60]	; 0xffffffc4
 8008c38:	ee27 3a27 	vmul.f32	s6, s14, s15
 8008c3c:	ee67 4aa5 	vmul.f32	s9, s15, s11
 8008c40:	ed16 6a0e 	vldr	s12, [r6, #-56]	; 0xffffffc8
 8008c44:	ee25 4aa6 	vmul.f32	s8, s11, s13
 8008c48:	ed55 7a0e 	vldr	s15, [r5, #-56]	; 0xffffffc8
 8008c4c:	ee67 6a26 	vmul.f32	s13, s14, s13
 8008c50:	ed15 5a0d 	vldr	s10, [r5, #-52]	; 0xffffffcc
 8008c54:	ed56 2a0d 	vldr	s5, [r6, #-52]	; 0xffffffcc
 8008c58:	ee66 3a27 	vmul.f32	s7, s12, s15
 8008c5c:	ee66 5a05 	vmul.f32	s11, s12, s10
 8008c60:	ed16 7a0c 	vldr	s14, [r6, #-48]	; 0xffffffd0
 8008c64:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008c68:	ed15 6a0c 	vldr	s12, [r5, #-48]	; 0xffffffd0
 8008c6c:	ee25 5a22 	vmul.f32	s10, s10, s5
 8008c70:	f104 0420 	add.w	r4, r4, #32
 8008c74:	ee33 4a44 	vsub.f32	s8, s6, s8
 8008c78:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8008c7c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8008c80:	ed04 4a10 	vstr	s8, [r4, #-64]	; 0xffffffc0
 8008c84:	ee67 4a06 	vmul.f32	s9, s14, s12
 8008c88:	ed16 5a0b 	vldr	s10, [r6, #-44]	; 0xffffffd4
 8008c8c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008c90:	ed44 6a0f 	vstr	s13, [r4, #-60]	; 0xffffffc4
 8008c94:	ed55 6a0b 	vldr	s13, [r5, #-44]	; 0xffffffd4
 8008c98:	ee66 5a05 	vmul.f32	s11, s12, s10
 8008c9c:	ed44 3a0e 	vstr	s7, [r4, #-56]	; 0xffffffc8
 8008ca0:	ee25 5a26 	vmul.f32	s10, s10, s13
 8008ca4:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 8008ca8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008cac:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 8008cb0:	ed55 6a0a 	vldr	s13, [r5, #-40]	; 0xffffffd8
 8008cb4:	ed16 6a09 	vldr	s12, [r6, #-36]	; 0xffffffdc
 8008cb8:	ee34 5ac5 	vsub.f32	s10, s9, s10
 8008cbc:	ed15 4a09 	vldr	s8, [r5, #-36]	; 0xffffffdc
 8008cc0:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8008cc4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008cc8:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008ccc:	ed04 5a0c 	vstr	s10, [r4, #-48]	; 0xffffffd0
 8008cd0:	ee26 6a04 	vmul.f32	s12, s12, s8
 8008cd4:	ee37 7a25 	vadd.f32	s14, s14, s11
 8008cd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cdc:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8008ce0:	ed04 7a0b 	vstr	s14, [r4, #-44]	; 0xffffffd4
 8008ce4:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 8008ce8:	ed04 6a0a 	vstr	s12, [r4, #-40]	; 0xffffffd8
 8008cec:	d197      	bne.n	8008c1e <arm_cmplx_mult_cmplx_f32+0x16>
 8008cee:	ea4f 144e 	mov.w	r4, lr, lsl #5
 8008cf2:	4420      	add	r0, r4
 8008cf4:	4421      	add	r1, r4
 8008cf6:	4422      	add	r2, r4
 8008cf8:	f013 0303 	ands.w	r3, r3, #3
 8008cfc:	d022      	beq.n	8008d44 <arm_cmplx_mult_cmplx_f32+0x13c>
 8008cfe:	3008      	adds	r0, #8
 8008d00:	3108      	adds	r1, #8
 8008d02:	3208      	adds	r2, #8
 8008d04:	ed50 7a02 	vldr	s15, [r0, #-8]
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	ed11 7a02 	vldr	s14, [r1, #-8]
 8008d0e:	f100 0008 	add.w	r0, r0, #8
 8008d12:	ed50 6a03 	vldr	s13, [r0, #-12]
 8008d16:	f101 0108 	add.w	r1, r1, #8
 8008d1a:	ed51 5a03 	vldr	s11, [r1, #-12]
 8008d1e:	ee27 6a87 	vmul.f32	s12, s15, s14
 8008d22:	ee26 7a87 	vmul.f32	s14, s13, s14
 8008d26:	f102 0208 	add.w	r2, r2, #8
 8008d2a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008d2e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008d32:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008d36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d3a:	ed42 6a04 	vstr	s13, [r2, #-16]
 8008d3e:	ed42 7a03 	vstr	s15, [r2, #-12]
 8008d42:	d1df      	bne.n	8008d04 <arm_cmplx_mult_cmplx_f32+0xfc>
 8008d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d46:	bf00      	nop

08008d48 <arm_cmplx_mag_f32>:
 8008d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d4c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8008d50:	b084      	sub	sp, #16
 8008d52:	d07f      	beq.n	8008e54 <arm_cmplx_mag_f32+0x10c>
 8008d54:	f100 0420 	add.w	r4, r0, #32
 8008d58:	f101 0510 	add.w	r5, r1, #16
 8008d5c:	4646      	mov	r6, r8
 8008d5e:	2700      	movs	r7, #0
 8008d60:	e05a      	b.n	8008e18 <arm_cmplx_mag_f32+0xd0>
 8008d62:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008d66:	eeb4 0a40 	vcmp.f32	s0, s0
 8008d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d6e:	f040 80a4 	bne.w	8008eba <arm_cmplx_mag_f32+0x172>
 8008d72:	ed05 0a04 	vstr	s0, [r5, #-16]
 8008d76:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8008d7a:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8008d7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008d82:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008d86:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008d8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d92:	f2c0 808f 	blt.w	8008eb4 <arm_cmplx_mag_f32+0x16c>
 8008d96:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008d9a:	eeb4 0a40 	vcmp.f32	s0, s0
 8008d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da2:	f040 80af 	bne.w	8008f04 <arm_cmplx_mag_f32+0x1bc>
 8008da6:	ed05 0a03 	vstr	s0, [r5, #-12]
 8008daa:	ed54 7a04 	vldr	s15, [r4, #-16]
 8008dae:	ed14 0a03 	vldr	s0, [r4, #-12]
 8008db2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008db6:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008dba:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008dbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc6:	db72      	blt.n	8008eae <arm_cmplx_mag_f32+0x166>
 8008dc8:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008dcc:	eeb4 0a40 	vcmp.f32	s0, s0
 8008dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd4:	f040 808c 	bne.w	8008ef0 <arm_cmplx_mag_f32+0x1a8>
 8008dd8:	ed05 0a02 	vstr	s0, [r5, #-8]
 8008ddc:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008de0:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008de4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008de8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008dec:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008df0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008df8:	db20      	blt.n	8008e3c <arm_cmplx_mag_f32+0xf4>
 8008dfa:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008dfe:	eeb4 0a40 	vcmp.f32	s0, s0
 8008e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e06:	d169      	bne.n	8008edc <arm_cmplx_mag_f32+0x194>
 8008e08:	3e01      	subs	r6, #1
 8008e0a:	ed05 0a01 	vstr	s0, [r5, #-4]
 8008e0e:	f104 0420 	add.w	r4, r4, #32
 8008e12:	f105 0510 	add.w	r5, r5, #16
 8008e16:	d019      	beq.n	8008e4c <arm_cmplx_mag_f32+0x104>
 8008e18:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8008e1c:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8008e20:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008e24:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008e28:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008e2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e34:	da95      	bge.n	8008d62 <arm_cmplx_mag_f32+0x1a>
 8008e36:	f845 7c10 	str.w	r7, [r5, #-16]
 8008e3a:	e79c      	b.n	8008d76 <arm_cmplx_mag_f32+0x2e>
 8008e3c:	3e01      	subs	r6, #1
 8008e3e:	f845 7c04 	str.w	r7, [r5, #-4]
 8008e42:	f104 0420 	add.w	r4, r4, #32
 8008e46:	f105 0510 	add.w	r5, r5, #16
 8008e4a:	d1e5      	bne.n	8008e18 <arm_cmplx_mag_f32+0xd0>
 8008e4c:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8008e50:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8008e54:	f012 0503 	ands.w	r5, r2, #3
 8008e58:	d026      	beq.n	8008ea8 <arm_cmplx_mag_f32+0x160>
 8008e5a:	f100 0408 	add.w	r4, r0, #8
 8008e5e:	2600      	movs	r6, #0
 8008e60:	e00c      	b.n	8008e7c <arm_cmplx_mag_f32+0x134>
 8008e62:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008e66:	eeb4 0a40 	vcmp.f32	s0, s0
 8008e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e6e:	d12e      	bne.n	8008ece <arm_cmplx_mag_f32+0x186>
 8008e70:	3d01      	subs	r5, #1
 8008e72:	ed01 0a01 	vstr	s0, [r1, #-4]
 8008e76:	f104 0408 	add.w	r4, r4, #8
 8008e7a:	d015      	beq.n	8008ea8 <arm_cmplx_mag_f32+0x160>
 8008e7c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008e80:	3104      	adds	r1, #4
 8008e82:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008e86:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008e8a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008e8e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008e92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e9a:	dae2      	bge.n	8008e62 <arm_cmplx_mag_f32+0x11a>
 8008e9c:	3d01      	subs	r5, #1
 8008e9e:	f841 6c04 	str.w	r6, [r1, #-4]
 8008ea2:	f104 0408 	add.w	r4, r4, #8
 8008ea6:	d1e9      	bne.n	8008e7c <arm_cmplx_mag_f32+0x134>
 8008ea8:	b004      	add	sp, #16
 8008eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eae:	f845 7c08 	str.w	r7, [r5, #-8]
 8008eb2:	e793      	b.n	8008ddc <arm_cmplx_mag_f32+0x94>
 8008eb4:	f845 7c0c 	str.w	r7, [r5, #-12]
 8008eb8:	e777      	b.n	8008daa <arm_cmplx_mag_f32+0x62>
 8008eba:	eeb0 0a67 	vmov.f32	s0, s15
 8008ebe:	9203      	str	r2, [sp, #12]
 8008ec0:	9102      	str	r1, [sp, #8]
 8008ec2:	9001      	str	r0, [sp, #4]
 8008ec4:	f000 fab0 	bl	8009428 <sqrtf>
 8008ec8:	a801      	add	r0, sp, #4
 8008eca:	c807      	ldmia	r0, {r0, r1, r2}
 8008ecc:	e751      	b.n	8008d72 <arm_cmplx_mag_f32+0x2a>
 8008ece:	eeb0 0a67 	vmov.f32	s0, s15
 8008ed2:	9101      	str	r1, [sp, #4]
 8008ed4:	f000 faa8 	bl	8009428 <sqrtf>
 8008ed8:	9901      	ldr	r1, [sp, #4]
 8008eda:	e7c9      	b.n	8008e70 <arm_cmplx_mag_f32+0x128>
 8008edc:	eeb0 0a67 	vmov.f32	s0, s15
 8008ee0:	9203      	str	r2, [sp, #12]
 8008ee2:	9102      	str	r1, [sp, #8]
 8008ee4:	9001      	str	r0, [sp, #4]
 8008ee6:	f000 fa9f 	bl	8009428 <sqrtf>
 8008eea:	a801      	add	r0, sp, #4
 8008eec:	c807      	ldmia	r0, {r0, r1, r2}
 8008eee:	e78b      	b.n	8008e08 <arm_cmplx_mag_f32+0xc0>
 8008ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8008ef4:	9203      	str	r2, [sp, #12]
 8008ef6:	9102      	str	r1, [sp, #8]
 8008ef8:	9001      	str	r0, [sp, #4]
 8008efa:	f000 fa95 	bl	8009428 <sqrtf>
 8008efe:	a801      	add	r0, sp, #4
 8008f00:	c807      	ldmia	r0, {r0, r1, r2}
 8008f02:	e769      	b.n	8008dd8 <arm_cmplx_mag_f32+0x90>
 8008f04:	eeb0 0a67 	vmov.f32	s0, s15
 8008f08:	9203      	str	r2, [sp, #12]
 8008f0a:	9102      	str	r1, [sp, #8]
 8008f0c:	9001      	str	r0, [sp, #4]
 8008f0e:	f000 fa8b 	bl	8009428 <sqrtf>
 8008f12:	a801      	add	r0, sp, #4
 8008f14:	c807      	ldmia	r0, {r0, r1, r2}
 8008f16:	e746      	b.n	8008da6 <arm_cmplx_mag_f32+0x5e>

08008f18 <arm_cmplx_conj_f32>:
 8008f18:	b4f0      	push	{r4, r5, r6, r7}
 8008f1a:	0897      	lsrs	r7, r2, #2
 8008f1c:	d035      	beq.n	8008f8a <arm_cmplx_conj_f32+0x72>
 8008f1e:	f100 0420 	add.w	r4, r0, #32
 8008f22:	f101 0320 	add.w	r3, r1, #32
 8008f26:	463d      	mov	r5, r7
 8008f28:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8008f2c:	3d01      	subs	r5, #1
 8008f2e:	f104 0420 	add.w	r4, r4, #32
 8008f32:	f103 0320 	add.w	r3, r3, #32
 8008f36:	f843 6c40 	str.w	r6, [r3, #-64]
 8008f3a:	f854 6c38 	ldr.w	r6, [r4, #-56]
 8008f3e:	f843 6c38 	str.w	r6, [r3, #-56]
 8008f42:	f854 6c30 	ldr.w	r6, [r4, #-48]
 8008f46:	f843 6c30 	str.w	r6, [r3, #-48]
 8008f4a:	f854 6c28 	ldr.w	r6, [r4, #-40]
 8008f4e:	f843 6c28 	str.w	r6, [r3, #-40]
 8008f52:	ed14 6a0f 	vldr	s12, [r4, #-60]	; 0xffffffc4
 8008f56:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8008f5a:	ed14 7a0b 	vldr	s14, [r4, #-44]	; 0xffffffd4
 8008f5e:	eeb1 6a46 	vneg.f32	s12, s12
 8008f62:	ed54 7a09 	vldr	s15, [r4, #-36]	; 0xffffffdc
 8008f66:	eef1 6a66 	vneg.f32	s13, s13
 8008f6a:	eeb1 7a47 	vneg.f32	s14, s14
 8008f6e:	eef1 7a67 	vneg.f32	s15, s15
 8008f72:	ed03 6a0f 	vstr	s12, [r3, #-60]	; 0xffffffc4
 8008f76:	ed43 6a0d 	vstr	s13, [r3, #-52]	; 0xffffffcc
 8008f7a:	ed03 7a0b 	vstr	s14, [r3, #-44]	; 0xffffffd4
 8008f7e:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
 8008f82:	d1d1      	bne.n	8008f28 <arm_cmplx_conj_f32+0x10>
 8008f84:	017f      	lsls	r7, r7, #5
 8008f86:	4438      	add	r0, r7
 8008f88:	4439      	add	r1, r7
 8008f8a:	f012 0203 	ands.w	r2, r2, #3
 8008f8e:	d011      	beq.n	8008fb4 <arm_cmplx_conj_f32+0x9c>
 8008f90:	3108      	adds	r1, #8
 8008f92:	3008      	adds	r0, #8
 8008f94:	f850 3c08 	ldr.w	r3, [r0, #-8]
 8008f98:	3a01      	subs	r2, #1
 8008f9a:	f100 0008 	add.w	r0, r0, #8
 8008f9e:	f101 0108 	add.w	r1, r1, #8
 8008fa2:	f841 3c10 	str.w	r3, [r1, #-16]
 8008fa6:	ed50 7a03 	vldr	s15, [r0, #-12]
 8008faa:	eef1 7a67 	vneg.f32	s15, s15
 8008fae:	ed41 7a03 	vstr	s15, [r1, #-12]
 8008fb2:	d1ef      	bne.n	8008f94 <arm_cmplx_conj_f32+0x7c>
 8008fb4:	bcf0      	pop	{r4, r5, r6, r7}
 8008fb6:	4770      	bx	lr

08008fb8 <arm_sub_f32>:
 8008fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fba:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8008fbe:	d033      	beq.n	8009028 <arm_sub_f32+0x70>
 8008fc0:	f100 0610 	add.w	r6, r0, #16
 8008fc4:	f101 0510 	add.w	r5, r1, #16
 8008fc8:	f102 0410 	add.w	r4, r2, #16
 8008fcc:	4677      	mov	r7, lr
 8008fce:	ed16 7a03 	vldr	s14, [r6, #-12]
 8008fd2:	3f01      	subs	r7, #1
 8008fd4:	ed56 7a02 	vldr	s15, [r6, #-8]
 8008fd8:	f105 0510 	add.w	r5, r5, #16
 8008fdc:	ed15 6a07 	vldr	s12, [r5, #-28]	; 0xffffffe4
 8008fe0:	f106 0610 	add.w	r6, r6, #16
 8008fe4:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 8008fe8:	f104 0410 	add.w	r4, r4, #16
 8008fec:	ed15 5a05 	vldr	s10, [r5, #-20]	; 0xffffffec
 8008ff0:	ee37 6a46 	vsub.f32	s12, s14, s12
 8008ff4:	ed55 5a08 	vldr	s11, [r5, #-32]	; 0xffffffe0
 8008ff8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8008ffc:	ed16 7a05 	vldr	s14, [r6, #-20]	; 0xffffffec
 8009000:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 8009004:	ee37 7a45 	vsub.f32	s14, s14, s10
 8009008:	ed04 6a07 	vstr	s12, [r4, #-28]	; 0xffffffe4
 800900c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009010:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 8009014:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 8009018:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 800901c:	d1d7      	bne.n	8008fce <arm_sub_f32+0x16>
 800901e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8009022:	4420      	add	r0, r4
 8009024:	4421      	add	r1, r4
 8009026:	4422      	add	r2, r4
 8009028:	f013 0303 	ands.w	r3, r3, #3
 800902c:	d009      	beq.n	8009042 <arm_sub_f32+0x8a>
 800902e:	ecf0 7a01 	vldmia	r0!, {s15}
 8009032:	3b01      	subs	r3, #1
 8009034:	ecb1 7a01 	vldmia	r1!, {s14}
 8009038:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800903c:	ece2 7a01 	vstmia	r2!, {s15}
 8009040:	d1f5      	bne.n	800902e <arm_sub_f32+0x76>
 8009042:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009044 <arm_mult_f32>:
 8009044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009046:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800904a:	d033      	beq.n	80090b4 <arm_mult_f32+0x70>
 800904c:	f100 0610 	add.w	r6, r0, #16
 8009050:	f101 0510 	add.w	r5, r1, #16
 8009054:	f102 0410 	add.w	r4, r2, #16
 8009058:	4677      	mov	r7, lr
 800905a:	ed16 7a04 	vldr	s14, [r6, #-16]
 800905e:	3f01      	subs	r7, #1
 8009060:	ed15 6a04 	vldr	s12, [r5, #-16]
 8009064:	f106 0610 	add.w	r6, r6, #16
 8009068:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800906c:	f105 0510 	add.w	r5, r5, #16
 8009070:	ee27 6a06 	vmul.f32	s12, s14, s12
 8009074:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 8009078:	ed16 7a07 	vldr	s14, [r6, #-28]	; 0xffffffe4
 800907c:	f104 0410 	add.w	r4, r4, #16
 8009080:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 8009084:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009088:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800908c:	ed04 6a08 	vstr	s12, [r4, #-32]	; 0xffffffe0
 8009090:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009094:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8009098:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 800909c:	ee67 7a86 	vmul.f32	s15, s15, s12
 80090a0:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 80090a4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80090a8:	d1d7      	bne.n	800905a <arm_mult_f32+0x16>
 80090aa:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80090ae:	4420      	add	r0, r4
 80090b0:	4421      	add	r1, r4
 80090b2:	4422      	add	r2, r4
 80090b4:	f013 0303 	ands.w	r3, r3, #3
 80090b8:	d009      	beq.n	80090ce <arm_mult_f32+0x8a>
 80090ba:	ecf0 7a01 	vldmia	r0!, {s15}
 80090be:	3b01      	subs	r3, #1
 80090c0:	ecb1 7a01 	vldmia	r1!, {s14}
 80090c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090c8:	ece2 7a01 	vstmia	r2!, {s15}
 80090cc:	d1f5      	bne.n	80090ba <arm_mult_f32+0x76>
 80090ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080090d0 <arm_abs_f32>:
 80090d0:	b470      	push	{r4, r5, r6}
 80090d2:	0896      	lsrs	r6, r2, #2
 80090d4:	d025      	beq.n	8009122 <arm_abs_f32+0x52>
 80090d6:	f100 0410 	add.w	r4, r0, #16
 80090da:	f101 0310 	add.w	r3, r1, #16
 80090de:	4635      	mov	r5, r6
 80090e0:	ed14 6a04 	vldr	s12, [r4, #-16]
 80090e4:	3d01      	subs	r5, #1
 80090e6:	ed54 6a03 	vldr	s13, [r4, #-12]
 80090ea:	f103 0310 	add.w	r3, r3, #16
 80090ee:	ed14 7a02 	vldr	s14, [r4, #-8]
 80090f2:	eeb0 6ac6 	vabs.f32	s12, s12
 80090f6:	ed54 7a01 	vldr	s15, [r4, #-4]
 80090fa:	eef0 6ae6 	vabs.f32	s13, s13
 80090fe:	eeb0 7ac7 	vabs.f32	s14, s14
 8009102:	f104 0410 	add.w	r4, r4, #16
 8009106:	eef0 7ae7 	vabs.f32	s15, s15
 800910a:	ed03 6a08 	vstr	s12, [r3, #-32]	; 0xffffffe0
 800910e:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8009112:	ed03 7a06 	vstr	s14, [r3, #-24]	; 0xffffffe8
 8009116:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800911a:	d1e1      	bne.n	80090e0 <arm_abs_f32+0x10>
 800911c:	0136      	lsls	r6, r6, #4
 800911e:	4430      	add	r0, r6
 8009120:	4431      	add	r1, r6
 8009122:	f012 0203 	ands.w	r2, r2, #3
 8009126:	d007      	beq.n	8009138 <arm_abs_f32+0x68>
 8009128:	ecf0 7a01 	vldmia	r0!, {s15}
 800912c:	3a01      	subs	r2, #1
 800912e:	eef0 7ae7 	vabs.f32	s15, s15
 8009132:	ece1 7a01 	vstmia	r1!, {s15}
 8009136:	d1f7      	bne.n	8009128 <arm_abs_f32+0x58>
 8009138:	bc70      	pop	{r4, r5, r6}
 800913a:	4770      	bx	lr

0800913c <__errno>:
 800913c:	4b01      	ldr	r3, [pc, #4]	; (8009144 <__errno+0x8>)
 800913e:	6818      	ldr	r0, [r3, #0]
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	24000010 	.word	0x24000010

08009148 <__libc_init_array>:
 8009148:	b570      	push	{r4, r5, r6, lr}
 800914a:	4e0d      	ldr	r6, [pc, #52]	; (8009180 <__libc_init_array+0x38>)
 800914c:	4c0d      	ldr	r4, [pc, #52]	; (8009184 <__libc_init_array+0x3c>)
 800914e:	1ba4      	subs	r4, r4, r6
 8009150:	10a4      	asrs	r4, r4, #2
 8009152:	2500      	movs	r5, #0
 8009154:	42a5      	cmp	r5, r4
 8009156:	d109      	bne.n	800916c <__libc_init_array+0x24>
 8009158:	4e0b      	ldr	r6, [pc, #44]	; (8009188 <__libc_init_array+0x40>)
 800915a:	4c0c      	ldr	r4, [pc, #48]	; (800918c <__libc_init_array+0x44>)
 800915c:	f000 fb3e 	bl	80097dc <_init>
 8009160:	1ba4      	subs	r4, r4, r6
 8009162:	10a4      	asrs	r4, r4, #2
 8009164:	2500      	movs	r5, #0
 8009166:	42a5      	cmp	r5, r4
 8009168:	d105      	bne.n	8009176 <__libc_init_array+0x2e>
 800916a:	bd70      	pop	{r4, r5, r6, pc}
 800916c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009170:	4798      	blx	r3
 8009172:	3501      	adds	r5, #1
 8009174:	e7ee      	b.n	8009154 <__libc_init_array+0xc>
 8009176:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800917a:	4798      	blx	r3
 800917c:	3501      	adds	r5, #1
 800917e:	e7f2      	b.n	8009166 <__libc_init_array+0x1e>
 8009180:	08009868 	.word	0x08009868
 8009184:	08009868 	.word	0x08009868
 8009188:	08009868 	.word	0x08009868
 800918c:	0800986c 	.word	0x0800986c

08009190 <malloc>:
 8009190:	4b02      	ldr	r3, [pc, #8]	; (800919c <malloc+0xc>)
 8009192:	4601      	mov	r1, r0
 8009194:	6818      	ldr	r0, [r3, #0]
 8009196:	f000 b861 	b.w	800925c <_malloc_r>
 800919a:	bf00      	nop
 800919c:	24000010 	.word	0x24000010

080091a0 <free>:
 80091a0:	4b02      	ldr	r3, [pc, #8]	; (80091ac <free+0xc>)
 80091a2:	4601      	mov	r1, r0
 80091a4:	6818      	ldr	r0, [r3, #0]
 80091a6:	f000 b80b 	b.w	80091c0 <_free_r>
 80091aa:	bf00      	nop
 80091ac:	24000010 	.word	0x24000010

080091b0 <memset>:
 80091b0:	4402      	add	r2, r0
 80091b2:	4603      	mov	r3, r0
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d100      	bne.n	80091ba <memset+0xa>
 80091b8:	4770      	bx	lr
 80091ba:	f803 1b01 	strb.w	r1, [r3], #1
 80091be:	e7f9      	b.n	80091b4 <memset+0x4>

080091c0 <_free_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	4605      	mov	r5, r0
 80091c4:	2900      	cmp	r1, #0
 80091c6:	d045      	beq.n	8009254 <_free_r+0x94>
 80091c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091cc:	1f0c      	subs	r4, r1, #4
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	bfb8      	it	lt
 80091d2:	18e4      	addlt	r4, r4, r3
 80091d4:	f000 f8ac 	bl	8009330 <__malloc_lock>
 80091d8:	4a1f      	ldr	r2, [pc, #124]	; (8009258 <_free_r+0x98>)
 80091da:	6813      	ldr	r3, [r2, #0]
 80091dc:	4610      	mov	r0, r2
 80091de:	b933      	cbnz	r3, 80091ee <_free_r+0x2e>
 80091e0:	6063      	str	r3, [r4, #4]
 80091e2:	6014      	str	r4, [r2, #0]
 80091e4:	4628      	mov	r0, r5
 80091e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091ea:	f000 b8a2 	b.w	8009332 <__malloc_unlock>
 80091ee:	42a3      	cmp	r3, r4
 80091f0:	d90c      	bls.n	800920c <_free_r+0x4c>
 80091f2:	6821      	ldr	r1, [r4, #0]
 80091f4:	1862      	adds	r2, r4, r1
 80091f6:	4293      	cmp	r3, r2
 80091f8:	bf04      	itt	eq
 80091fa:	681a      	ldreq	r2, [r3, #0]
 80091fc:	685b      	ldreq	r3, [r3, #4]
 80091fe:	6063      	str	r3, [r4, #4]
 8009200:	bf04      	itt	eq
 8009202:	1852      	addeq	r2, r2, r1
 8009204:	6022      	streq	r2, [r4, #0]
 8009206:	6004      	str	r4, [r0, #0]
 8009208:	e7ec      	b.n	80091e4 <_free_r+0x24>
 800920a:	4613      	mov	r3, r2
 800920c:	685a      	ldr	r2, [r3, #4]
 800920e:	b10a      	cbz	r2, 8009214 <_free_r+0x54>
 8009210:	42a2      	cmp	r2, r4
 8009212:	d9fa      	bls.n	800920a <_free_r+0x4a>
 8009214:	6819      	ldr	r1, [r3, #0]
 8009216:	1858      	adds	r0, r3, r1
 8009218:	42a0      	cmp	r0, r4
 800921a:	d10b      	bne.n	8009234 <_free_r+0x74>
 800921c:	6820      	ldr	r0, [r4, #0]
 800921e:	4401      	add	r1, r0
 8009220:	1858      	adds	r0, r3, r1
 8009222:	4282      	cmp	r2, r0
 8009224:	6019      	str	r1, [r3, #0]
 8009226:	d1dd      	bne.n	80091e4 <_free_r+0x24>
 8009228:	6810      	ldr	r0, [r2, #0]
 800922a:	6852      	ldr	r2, [r2, #4]
 800922c:	605a      	str	r2, [r3, #4]
 800922e:	4401      	add	r1, r0
 8009230:	6019      	str	r1, [r3, #0]
 8009232:	e7d7      	b.n	80091e4 <_free_r+0x24>
 8009234:	d902      	bls.n	800923c <_free_r+0x7c>
 8009236:	230c      	movs	r3, #12
 8009238:	602b      	str	r3, [r5, #0]
 800923a:	e7d3      	b.n	80091e4 <_free_r+0x24>
 800923c:	6820      	ldr	r0, [r4, #0]
 800923e:	1821      	adds	r1, r4, r0
 8009240:	428a      	cmp	r2, r1
 8009242:	bf04      	itt	eq
 8009244:	6811      	ldreq	r1, [r2, #0]
 8009246:	6852      	ldreq	r2, [r2, #4]
 8009248:	6062      	str	r2, [r4, #4]
 800924a:	bf04      	itt	eq
 800924c:	1809      	addeq	r1, r1, r0
 800924e:	6021      	streq	r1, [r4, #0]
 8009250:	605c      	str	r4, [r3, #4]
 8009252:	e7c7      	b.n	80091e4 <_free_r+0x24>
 8009254:	bd38      	pop	{r3, r4, r5, pc}
 8009256:	bf00      	nop
 8009258:	240142c0 	.word	0x240142c0

0800925c <_malloc_r>:
 800925c:	b570      	push	{r4, r5, r6, lr}
 800925e:	1ccd      	adds	r5, r1, #3
 8009260:	f025 0503 	bic.w	r5, r5, #3
 8009264:	3508      	adds	r5, #8
 8009266:	2d0c      	cmp	r5, #12
 8009268:	bf38      	it	cc
 800926a:	250c      	movcc	r5, #12
 800926c:	2d00      	cmp	r5, #0
 800926e:	4606      	mov	r6, r0
 8009270:	db01      	blt.n	8009276 <_malloc_r+0x1a>
 8009272:	42a9      	cmp	r1, r5
 8009274:	d903      	bls.n	800927e <_malloc_r+0x22>
 8009276:	230c      	movs	r3, #12
 8009278:	6033      	str	r3, [r6, #0]
 800927a:	2000      	movs	r0, #0
 800927c:	bd70      	pop	{r4, r5, r6, pc}
 800927e:	f000 f857 	bl	8009330 <__malloc_lock>
 8009282:	4a21      	ldr	r2, [pc, #132]	; (8009308 <_malloc_r+0xac>)
 8009284:	6814      	ldr	r4, [r2, #0]
 8009286:	4621      	mov	r1, r4
 8009288:	b991      	cbnz	r1, 80092b0 <_malloc_r+0x54>
 800928a:	4c20      	ldr	r4, [pc, #128]	; (800930c <_malloc_r+0xb0>)
 800928c:	6823      	ldr	r3, [r4, #0]
 800928e:	b91b      	cbnz	r3, 8009298 <_malloc_r+0x3c>
 8009290:	4630      	mov	r0, r6
 8009292:	f000 f83d 	bl	8009310 <_sbrk_r>
 8009296:	6020      	str	r0, [r4, #0]
 8009298:	4629      	mov	r1, r5
 800929a:	4630      	mov	r0, r6
 800929c:	f000 f838 	bl	8009310 <_sbrk_r>
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	d124      	bne.n	80092ee <_malloc_r+0x92>
 80092a4:	230c      	movs	r3, #12
 80092a6:	6033      	str	r3, [r6, #0]
 80092a8:	4630      	mov	r0, r6
 80092aa:	f000 f842 	bl	8009332 <__malloc_unlock>
 80092ae:	e7e4      	b.n	800927a <_malloc_r+0x1e>
 80092b0:	680b      	ldr	r3, [r1, #0]
 80092b2:	1b5b      	subs	r3, r3, r5
 80092b4:	d418      	bmi.n	80092e8 <_malloc_r+0x8c>
 80092b6:	2b0b      	cmp	r3, #11
 80092b8:	d90f      	bls.n	80092da <_malloc_r+0x7e>
 80092ba:	600b      	str	r3, [r1, #0]
 80092bc:	50cd      	str	r5, [r1, r3]
 80092be:	18cc      	adds	r4, r1, r3
 80092c0:	4630      	mov	r0, r6
 80092c2:	f000 f836 	bl	8009332 <__malloc_unlock>
 80092c6:	f104 000b 	add.w	r0, r4, #11
 80092ca:	1d23      	adds	r3, r4, #4
 80092cc:	f020 0007 	bic.w	r0, r0, #7
 80092d0:	1ac3      	subs	r3, r0, r3
 80092d2:	d0d3      	beq.n	800927c <_malloc_r+0x20>
 80092d4:	425a      	negs	r2, r3
 80092d6:	50e2      	str	r2, [r4, r3]
 80092d8:	e7d0      	b.n	800927c <_malloc_r+0x20>
 80092da:	428c      	cmp	r4, r1
 80092dc:	684b      	ldr	r3, [r1, #4]
 80092de:	bf16      	itet	ne
 80092e0:	6063      	strne	r3, [r4, #4]
 80092e2:	6013      	streq	r3, [r2, #0]
 80092e4:	460c      	movne	r4, r1
 80092e6:	e7eb      	b.n	80092c0 <_malloc_r+0x64>
 80092e8:	460c      	mov	r4, r1
 80092ea:	6849      	ldr	r1, [r1, #4]
 80092ec:	e7cc      	b.n	8009288 <_malloc_r+0x2c>
 80092ee:	1cc4      	adds	r4, r0, #3
 80092f0:	f024 0403 	bic.w	r4, r4, #3
 80092f4:	42a0      	cmp	r0, r4
 80092f6:	d005      	beq.n	8009304 <_malloc_r+0xa8>
 80092f8:	1a21      	subs	r1, r4, r0
 80092fa:	4630      	mov	r0, r6
 80092fc:	f000 f808 	bl	8009310 <_sbrk_r>
 8009300:	3001      	adds	r0, #1
 8009302:	d0cf      	beq.n	80092a4 <_malloc_r+0x48>
 8009304:	6025      	str	r5, [r4, #0]
 8009306:	e7db      	b.n	80092c0 <_malloc_r+0x64>
 8009308:	240142c0 	.word	0x240142c0
 800930c:	240142c4 	.word	0x240142c4

08009310 <_sbrk_r>:
 8009310:	b538      	push	{r3, r4, r5, lr}
 8009312:	4c06      	ldr	r4, [pc, #24]	; (800932c <_sbrk_r+0x1c>)
 8009314:	2300      	movs	r3, #0
 8009316:	4605      	mov	r5, r0
 8009318:	4608      	mov	r0, r1
 800931a:	6023      	str	r3, [r4, #0]
 800931c:	f7f9 fe76 	bl	800300c <_sbrk>
 8009320:	1c43      	adds	r3, r0, #1
 8009322:	d102      	bne.n	800932a <_sbrk_r+0x1a>
 8009324:	6823      	ldr	r3, [r4, #0]
 8009326:	b103      	cbz	r3, 800932a <_sbrk_r+0x1a>
 8009328:	602b      	str	r3, [r5, #0]
 800932a:	bd38      	pop	{r3, r4, r5, pc}
 800932c:	240143a4 	.word	0x240143a4

08009330 <__malloc_lock>:
 8009330:	4770      	bx	lr

08009332 <__malloc_unlock>:
 8009332:	4770      	bx	lr

08009334 <fmaxf>:
 8009334:	b508      	push	{r3, lr}
 8009336:	ed2d 8b02 	vpush	{d8}
 800933a:	eeb0 8a40 	vmov.f32	s16, s0
 800933e:	eef0 8a60 	vmov.f32	s17, s1
 8009342:	f000 f82d 	bl	80093a0 <__fpclassifyf>
 8009346:	b148      	cbz	r0, 800935c <fmaxf+0x28>
 8009348:	eeb0 0a68 	vmov.f32	s0, s17
 800934c:	f000 f828 	bl	80093a0 <__fpclassifyf>
 8009350:	b130      	cbz	r0, 8009360 <fmaxf+0x2c>
 8009352:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800935a:	dc01      	bgt.n	8009360 <fmaxf+0x2c>
 800935c:	eeb0 8a68 	vmov.f32	s16, s17
 8009360:	eeb0 0a48 	vmov.f32	s0, s16
 8009364:	ecbd 8b02 	vpop	{d8}
 8009368:	bd08      	pop	{r3, pc}

0800936a <fminf>:
 800936a:	b508      	push	{r3, lr}
 800936c:	ed2d 8b02 	vpush	{d8}
 8009370:	eeb0 8a40 	vmov.f32	s16, s0
 8009374:	eef0 8a60 	vmov.f32	s17, s1
 8009378:	f000 f812 	bl	80093a0 <__fpclassifyf>
 800937c:	b148      	cbz	r0, 8009392 <fminf+0x28>
 800937e:	eeb0 0a68 	vmov.f32	s0, s17
 8009382:	f000 f80d 	bl	80093a0 <__fpclassifyf>
 8009386:	b130      	cbz	r0, 8009396 <fminf+0x2c>
 8009388:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800938c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009390:	d401      	bmi.n	8009396 <fminf+0x2c>
 8009392:	eeb0 8a68 	vmov.f32	s16, s17
 8009396:	eeb0 0a48 	vmov.f32	s0, s16
 800939a:	ecbd 8b02 	vpop	{d8}
 800939e:	bd08      	pop	{r3, pc}

080093a0 <__fpclassifyf>:
 80093a0:	ee10 3a10 	vmov	r3, s0
 80093a4:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80093a8:	d00d      	beq.n	80093c6 <__fpclassifyf+0x26>
 80093aa:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80093ae:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80093b2:	d30a      	bcc.n	80093ca <__fpclassifyf+0x2a>
 80093b4:	4b07      	ldr	r3, [pc, #28]	; (80093d4 <__fpclassifyf+0x34>)
 80093b6:	1e42      	subs	r2, r0, #1
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d908      	bls.n	80093ce <__fpclassifyf+0x2e>
 80093bc:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 80093c0:	4258      	negs	r0, r3
 80093c2:	4158      	adcs	r0, r3
 80093c4:	4770      	bx	lr
 80093c6:	2002      	movs	r0, #2
 80093c8:	4770      	bx	lr
 80093ca:	2004      	movs	r0, #4
 80093cc:	4770      	bx	lr
 80093ce:	2003      	movs	r0, #3
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	007ffffe 	.word	0x007ffffe

080093d8 <roundf>:
 80093d8:	ee10 0a10 	vmov	r0, s0
 80093dc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80093e0:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80093e4:	2a16      	cmp	r2, #22
 80093e6:	dc15      	bgt.n	8009414 <roundf+0x3c>
 80093e8:	2a00      	cmp	r2, #0
 80093ea:	da08      	bge.n	80093fe <roundf+0x26>
 80093ec:	3201      	adds	r2, #1
 80093ee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80093f2:	d101      	bne.n	80093f8 <roundf+0x20>
 80093f4:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80093f8:	ee00 3a10 	vmov	s0, r3
 80093fc:	4770      	bx	lr
 80093fe:	4908      	ldr	r1, [pc, #32]	; (8009420 <roundf+0x48>)
 8009400:	4111      	asrs	r1, r2
 8009402:	4208      	tst	r0, r1
 8009404:	d0fa      	beq.n	80093fc <roundf+0x24>
 8009406:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800940a:	4113      	asrs	r3, r2
 800940c:	4403      	add	r3, r0
 800940e:	ea23 0301 	bic.w	r3, r3, r1
 8009412:	e7f1      	b.n	80093f8 <roundf+0x20>
 8009414:	2a80      	cmp	r2, #128	; 0x80
 8009416:	d1f1      	bne.n	80093fc <roundf+0x24>
 8009418:	ee30 0a00 	vadd.f32	s0, s0, s0
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	007fffff 	.word	0x007fffff

08009424 <atan2f>:
 8009424:	f000 b850 	b.w	80094c8 <__ieee754_atan2f>

08009428 <sqrtf>:
 8009428:	b500      	push	{lr}
 800942a:	ed2d 8b02 	vpush	{d8}
 800942e:	b08b      	sub	sp, #44	; 0x2c
 8009430:	eeb0 8a40 	vmov.f32	s16, s0
 8009434:	f000 f8f2 	bl	800961c <__ieee754_sqrtf>
 8009438:	4b21      	ldr	r3, [pc, #132]	; (80094c0 <sqrtf+0x98>)
 800943a:	f993 3000 	ldrsb.w	r3, [r3]
 800943e:	1c5a      	adds	r2, r3, #1
 8009440:	d028      	beq.n	8009494 <sqrtf+0x6c>
 8009442:	eeb4 8a48 	vcmp.f32	s16, s16
 8009446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800944a:	d623      	bvs.n	8009494 <sqrtf+0x6c>
 800944c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009454:	d51e      	bpl.n	8009494 <sqrtf+0x6c>
 8009456:	2201      	movs	r2, #1
 8009458:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800945c:	9200      	str	r2, [sp, #0]
 800945e:	4a19      	ldr	r2, [pc, #100]	; (80094c4 <sqrtf+0x9c>)
 8009460:	9201      	str	r2, [sp, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	9208      	str	r2, [sp, #32]
 8009466:	ed8d 8b04 	vstr	d8, [sp, #16]
 800946a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800946e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 80094b8 <sqrtf+0x90>
 8009472:	b9a3      	cbnz	r3, 800949e <sqrtf+0x76>
 8009474:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009478:	4668      	mov	r0, sp
 800947a:	f000 f8d2 	bl	8009622 <matherr>
 800947e:	b1a0      	cbz	r0, 80094aa <sqrtf+0x82>
 8009480:	9b08      	ldr	r3, [sp, #32]
 8009482:	b11b      	cbz	r3, 800948c <sqrtf+0x64>
 8009484:	f7ff fe5a 	bl	800913c <__errno>
 8009488:	9b08      	ldr	r3, [sp, #32]
 800948a:	6003      	str	r3, [r0, #0]
 800948c:	ed9d 0b06 	vldr	d0, [sp, #24]
 8009490:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009494:	b00b      	add	sp, #44	; 0x2c
 8009496:	ecbd 8b02 	vpop	{d8}
 800949a:	f85d fb04 	ldr.w	pc, [sp], #4
 800949e:	2b02      	cmp	r3, #2
 80094a0:	ee87 6b07 	vdiv.f64	d6, d7, d7
 80094a4:	ed8d 6b06 	vstr	d6, [sp, #24]
 80094a8:	d1e6      	bne.n	8009478 <sqrtf+0x50>
 80094aa:	f7ff fe47 	bl	800913c <__errno>
 80094ae:	2321      	movs	r3, #33	; 0x21
 80094b0:	6003      	str	r3, [r0, #0]
 80094b2:	e7e5      	b.n	8009480 <sqrtf+0x58>
 80094b4:	f3af 8000 	nop.w
	...
 80094c0:	24000074 	.word	0x24000074
 80094c4:	08009838 	.word	0x08009838

080094c8 <__ieee754_atan2f>:
 80094c8:	ee10 2a90 	vmov	r2, s1
 80094cc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80094d0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80094d4:	b510      	push	{r4, lr}
 80094d6:	eef0 7a40 	vmov.f32	s15, s0
 80094da:	dc06      	bgt.n	80094ea <__ieee754_atan2f+0x22>
 80094dc:	ee10 0a10 	vmov	r0, s0
 80094e0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80094e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80094e8:	dd04      	ble.n	80094f4 <__ieee754_atan2f+0x2c>
 80094ea:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80094ee:	eeb0 0a67 	vmov.f32	s0, s15
 80094f2:	bd10      	pop	{r4, pc}
 80094f4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80094f8:	d103      	bne.n	8009502 <__ieee754_atan2f+0x3a>
 80094fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094fe:	f000 b893 	b.w	8009628 <atanf>
 8009502:	1794      	asrs	r4, r2, #30
 8009504:	f004 0402 	and.w	r4, r4, #2
 8009508:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800950c:	b93b      	cbnz	r3, 800951e <__ieee754_atan2f+0x56>
 800950e:	2c02      	cmp	r4, #2
 8009510:	d06b      	beq.n	80095ea <__ieee754_atan2f+0x122>
 8009512:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80095f0 <__ieee754_atan2f+0x128>
 8009516:	2c03      	cmp	r4, #3
 8009518:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800951c:	e7e7      	b.n	80094ee <__ieee754_atan2f+0x26>
 800951e:	b939      	cbnz	r1, 8009530 <__ieee754_atan2f+0x68>
 8009520:	eddf 7a34 	vldr	s15, [pc, #208]	; 80095f4 <__ieee754_atan2f+0x12c>
 8009524:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80095f8 <__ieee754_atan2f+0x130>
 8009528:	2800      	cmp	r0, #0
 800952a:	fe67 7a87 	vselge.f32	s15, s15, s14
 800952e:	e7de      	b.n	80094ee <__ieee754_atan2f+0x26>
 8009530:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009534:	d121      	bne.n	800957a <__ieee754_atan2f+0xb2>
 8009536:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800953a:	d111      	bne.n	8009560 <__ieee754_atan2f+0x98>
 800953c:	2c02      	cmp	r4, #2
 800953e:	d009      	beq.n	8009554 <__ieee754_atan2f+0x8c>
 8009540:	2c03      	cmp	r4, #3
 8009542:	d00a      	beq.n	800955a <__ieee754_atan2f+0x92>
 8009544:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80095fc <__ieee754_atan2f+0x134>
 8009548:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8009600 <__ieee754_atan2f+0x138>
 800954c:	2c01      	cmp	r4, #1
 800954e:	fe47 7a87 	vseleq.f32	s15, s15, s14
 8009552:	e7cc      	b.n	80094ee <__ieee754_atan2f+0x26>
 8009554:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009604 <__ieee754_atan2f+0x13c>
 8009558:	e7c9      	b.n	80094ee <__ieee754_atan2f+0x26>
 800955a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009608 <__ieee754_atan2f+0x140>
 800955e:	e7c6      	b.n	80094ee <__ieee754_atan2f+0x26>
 8009560:	2c02      	cmp	r4, #2
 8009562:	d042      	beq.n	80095ea <__ieee754_atan2f+0x122>
 8009564:	2c03      	cmp	r4, #3
 8009566:	d005      	beq.n	8009574 <__ieee754_atan2f+0xac>
 8009568:	2c01      	cmp	r4, #1
 800956a:	eddf 7a28 	vldr	s15, [pc, #160]	; 800960c <__ieee754_atan2f+0x144>
 800956e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8009610 <__ieee754_atan2f+0x148>
 8009572:	e7ec      	b.n	800954e <__ieee754_atan2f+0x86>
 8009574:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80095f0 <__ieee754_atan2f+0x128>
 8009578:	e7b9      	b.n	80094ee <__ieee754_atan2f+0x26>
 800957a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800957e:	d0cf      	beq.n	8009520 <__ieee754_atan2f+0x58>
 8009580:	1a5b      	subs	r3, r3, r1
 8009582:	15db      	asrs	r3, r3, #23
 8009584:	2b3c      	cmp	r3, #60	; 0x3c
 8009586:	dc1a      	bgt.n	80095be <__ieee754_atan2f+0xf6>
 8009588:	2a00      	cmp	r2, #0
 800958a:	da01      	bge.n	8009590 <__ieee754_atan2f+0xc8>
 800958c:	333c      	adds	r3, #60	; 0x3c
 800958e:	db19      	blt.n	80095c4 <__ieee754_atan2f+0xfc>
 8009590:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8009594:	f000 f91a 	bl	80097cc <fabsf>
 8009598:	f000 f846 	bl	8009628 <atanf>
 800959c:	eef0 7a40 	vmov.f32	s15, s0
 80095a0:	2c01      	cmp	r4, #1
 80095a2:	d012      	beq.n	80095ca <__ieee754_atan2f+0x102>
 80095a4:	2c02      	cmp	r4, #2
 80095a6:	d017      	beq.n	80095d8 <__ieee754_atan2f+0x110>
 80095a8:	2c00      	cmp	r4, #0
 80095aa:	d0a0      	beq.n	80094ee <__ieee754_atan2f+0x26>
 80095ac:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009614 <__ieee754_atan2f+0x14c>
 80095b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80095b4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8009618 <__ieee754_atan2f+0x150>
 80095b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80095bc:	e797      	b.n	80094ee <__ieee754_atan2f+0x26>
 80095be:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80095f4 <__ieee754_atan2f+0x12c>
 80095c2:	e7ed      	b.n	80095a0 <__ieee754_atan2f+0xd8>
 80095c4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009610 <__ieee754_atan2f+0x148>
 80095c8:	e7ea      	b.n	80095a0 <__ieee754_atan2f+0xd8>
 80095ca:	ee17 3a90 	vmov	r3, s15
 80095ce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80095d2:	ee07 3a90 	vmov	s15, r3
 80095d6:	e78a      	b.n	80094ee <__ieee754_atan2f+0x26>
 80095d8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8009614 <__ieee754_atan2f+0x14c>
 80095dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80095e0:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8009618 <__ieee754_atan2f+0x150>
 80095e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095e8:	e781      	b.n	80094ee <__ieee754_atan2f+0x26>
 80095ea:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009618 <__ieee754_atan2f+0x150>
 80095ee:	e77e      	b.n	80094ee <__ieee754_atan2f+0x26>
 80095f0:	c0490fdb 	.word	0xc0490fdb
 80095f4:	3fc90fdb 	.word	0x3fc90fdb
 80095f8:	bfc90fdb 	.word	0xbfc90fdb
 80095fc:	bf490fdb 	.word	0xbf490fdb
 8009600:	3f490fdb 	.word	0x3f490fdb
 8009604:	4016cbe4 	.word	0x4016cbe4
 8009608:	c016cbe4 	.word	0xc016cbe4
 800960c:	80000000 	.word	0x80000000
 8009610:	00000000 	.word	0x00000000
 8009614:	33bbbd2e 	.word	0x33bbbd2e
 8009618:	40490fdb 	.word	0x40490fdb

0800961c <__ieee754_sqrtf>:
 800961c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009620:	4770      	bx	lr

08009622 <matherr>:
 8009622:	2000      	movs	r0, #0
 8009624:	4770      	bx	lr
	...

08009628 <atanf>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	ee10 5a10 	vmov	r5, s0
 800962e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009632:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009636:	eef0 7a40 	vmov.f32	s15, s0
 800963a:	db0f      	blt.n	800965c <atanf+0x34>
 800963c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009640:	dd04      	ble.n	800964c <atanf+0x24>
 8009642:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009646:	eeb0 0a67 	vmov.f32	s0, s15
 800964a:	bd38      	pop	{r3, r4, r5, pc}
 800964c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8009780 <atanf+0x158>
 8009650:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8009784 <atanf+0x15c>
 8009654:	2d00      	cmp	r5, #0
 8009656:	fe77 7a87 	vselgt.f32	s15, s15, s14
 800965a:	e7f4      	b.n	8009646 <atanf+0x1e>
 800965c:	4b4a      	ldr	r3, [pc, #296]	; (8009788 <atanf+0x160>)
 800965e:	429c      	cmp	r4, r3
 8009660:	dc10      	bgt.n	8009684 <atanf+0x5c>
 8009662:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009666:	da0a      	bge.n	800967e <atanf+0x56>
 8009668:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800978c <atanf+0x164>
 800966c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009670:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009674:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800967c:	dce3      	bgt.n	8009646 <atanf+0x1e>
 800967e:	f04f 33ff 	mov.w	r3, #4294967295
 8009682:	e013      	b.n	80096ac <atanf+0x84>
 8009684:	f000 f8a2 	bl	80097cc <fabsf>
 8009688:	4b41      	ldr	r3, [pc, #260]	; (8009790 <atanf+0x168>)
 800968a:	429c      	cmp	r4, r3
 800968c:	dc4f      	bgt.n	800972e <atanf+0x106>
 800968e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009692:	429c      	cmp	r4, r3
 8009694:	dc41      	bgt.n	800971a <atanf+0xf2>
 8009696:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800969a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800969e:	eea0 7a27 	vfma.f32	s14, s0, s15
 80096a2:	2300      	movs	r3, #0
 80096a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80096a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80096ac:	1c5a      	adds	r2, r3, #1
 80096ae:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80096b2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009794 <atanf+0x16c>
 80096b6:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009798 <atanf+0x170>
 80096ba:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800979c <atanf+0x174>
 80096be:	ee66 6a06 	vmul.f32	s13, s12, s12
 80096c2:	eee6 5a87 	vfma.f32	s11, s13, s14
 80096c6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80097a0 <atanf+0x178>
 80096ca:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80096ce:	eddf 5a35 	vldr	s11, [pc, #212]	; 80097a4 <atanf+0x17c>
 80096d2:	eee7 5a26 	vfma.f32	s11, s14, s13
 80096d6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80097a8 <atanf+0x180>
 80096da:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80096de:	eddf 5a33 	vldr	s11, [pc, #204]	; 80097ac <atanf+0x184>
 80096e2:	eee7 5a26 	vfma.f32	s11, s14, s13
 80096e6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80097b0 <atanf+0x188>
 80096ea:	eea6 5a87 	vfma.f32	s10, s13, s14
 80096ee:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80097b4 <atanf+0x18c>
 80096f2:	eea5 7a26 	vfma.f32	s14, s10, s13
 80096f6:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80097b8 <atanf+0x190>
 80096fa:	eea7 5a26 	vfma.f32	s10, s14, s13
 80096fe:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80097bc <atanf+0x194>
 8009702:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009706:	ee27 7a26 	vmul.f32	s14, s14, s13
 800970a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800970e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009712:	d121      	bne.n	8009758 <atanf+0x130>
 8009714:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009718:	e795      	b.n	8009646 <atanf+0x1e>
 800971a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800971e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009722:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009726:	2301      	movs	r3, #1
 8009728:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800972c:	e7be      	b.n	80096ac <atanf+0x84>
 800972e:	4b24      	ldr	r3, [pc, #144]	; (80097c0 <atanf+0x198>)
 8009730:	429c      	cmp	r4, r3
 8009732:	dc0b      	bgt.n	800974c <atanf+0x124>
 8009734:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009738:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800973c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009740:	2302      	movs	r3, #2
 8009742:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800974a:	e7af      	b.n	80096ac <atanf+0x84>
 800974c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009750:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009754:	2303      	movs	r3, #3
 8009756:	e7a9      	b.n	80096ac <atanf+0x84>
 8009758:	4a1a      	ldr	r2, [pc, #104]	; (80097c4 <atanf+0x19c>)
 800975a:	491b      	ldr	r1, [pc, #108]	; (80097c8 <atanf+0x1a0>)
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	441a      	add	r2, r3
 8009760:	440b      	add	r3, r1
 8009762:	edd3 6a00 	vldr	s13, [r3]
 8009766:	ee37 7a66 	vsub.f32	s14, s14, s13
 800976a:	2d00      	cmp	r5, #0
 800976c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009770:	ed92 7a00 	vldr	s14, [r2]
 8009774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009778:	bfb8      	it	lt
 800977a:	eef1 7a67 	vneglt.f32	s15, s15
 800977e:	e762      	b.n	8009646 <atanf+0x1e>
 8009780:	bfc90fdb 	.word	0xbfc90fdb
 8009784:	3fc90fdb 	.word	0x3fc90fdb
 8009788:	3edfffff 	.word	0x3edfffff
 800978c:	7149f2ca 	.word	0x7149f2ca
 8009790:	3f97ffff 	.word	0x3f97ffff
 8009794:	3c8569d7 	.word	0x3c8569d7
 8009798:	3d4bda59 	.word	0x3d4bda59
 800979c:	bd6ef16b 	.word	0xbd6ef16b
 80097a0:	3d886b35 	.word	0x3d886b35
 80097a4:	3dba2e6e 	.word	0x3dba2e6e
 80097a8:	3e124925 	.word	0x3e124925
 80097ac:	3eaaaaab 	.word	0x3eaaaaab
 80097b0:	bd15a221 	.word	0xbd15a221
 80097b4:	bd9d8795 	.word	0xbd9d8795
 80097b8:	bde38e38 	.word	0xbde38e38
 80097bc:	be4ccccd 	.word	0xbe4ccccd
 80097c0:	401bffff 	.word	0x401bffff
 80097c4:	08009840 	.word	0x08009840
 80097c8:	08009850 	.word	0x08009850

080097cc <fabsf>:
 80097cc:	ee10 3a10 	vmov	r3, s0
 80097d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097d4:	ee00 3a10 	vmov	s0, r3
 80097d8:	4770      	bx	lr
	...

080097dc <_init>:
 80097dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097de:	bf00      	nop
 80097e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097e2:	bc08      	pop	{r3}
 80097e4:	469e      	mov	lr, r3
 80097e6:	4770      	bx	lr

080097e8 <_fini>:
 80097e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ea:	bf00      	nop
 80097ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ee:	bc08      	pop	{r3}
 80097f0:	469e      	mov	lr, r3
 80097f2:	4770      	bx	lr
