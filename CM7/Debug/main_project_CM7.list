
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090b4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08009358  08009358  00019358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080096d0  080096d0  000196d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080096d8  080096d8  000196d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080096dc  080096dc  000196dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  20000000  080096e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006140  200001e8  080098c8  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20006328  080098c8  00026328  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021a0b  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003672  00000000  00000000  00041c21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001260  00000000  00000000  00045298  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000010e8  00000000  00000000  000464f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003b055  00000000  00000000  000475e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00012627  00000000  00000000  00082635  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00183fc4  00000000  00000000  00094c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000e9  00000000  00000000  00218c20  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005544  00000000  00000000  00218d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00000339  00000000  00000000  0021e250  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001e8 	.word	0x200001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800933c 	.word	0x0800933c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001ec 	.word	0x200001ec
 80002dc:	0800933c 	.word	0x0800933c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <SystemInit+0xc4>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <SystemInit+0xc4>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <SystemInit+0xc4>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <SystemInit+0xc4>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemInit+0xc8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <SystemInit+0xc8>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <SystemInit+0xc8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemInit+0xc8>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4924      	ldr	r1, [pc, #144]	; (8000758 <SystemInit+0xc8>)
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <SystemInit+0xcc>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemInit+0xc8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006d4:	4b20      	ldr	r3, [pc, #128]	; (8000758 <SystemInit+0xc8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemInit+0xc8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <SystemInit+0xc8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <SystemInit+0xc8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <SystemInit+0xc8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <SystemInit+0xc8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <SystemInit+0xc8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <SystemInit+0xc8>)
 8000700:	2200      	movs	r2, #0
 8000702:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <SystemInit+0xc8>)
 8000706:	2200      	movs	r2, #0
 8000708:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <SystemInit+0xc8>)
 800070c:	2200      	movs	r2, #0
 800070e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <SystemInit+0xc8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a10      	ldr	r2, [pc, #64]	; (8000758 <SystemInit+0xc8>)
 8000716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800071a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <SystemInit+0xc8>)
 800071e:	2200      	movs	r2, #0
 8000720:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <SystemInit+0xd0>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <SystemInit+0xd0>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <SystemInit+0xd4>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <SystemInit+0xd8>)
 8000734:	4013      	ands	r3, r2
 8000736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800073a:	d202      	bcs.n	8000742 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <SystemInit+0xdc>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SystemInit+0xc4>)
 8000744:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000748:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	58024400 	.word	0x58024400
 800075c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000760:	580000c0 	.word	0x580000c0
 8000764:	5c001000 	.word	0x5c001000
 8000768:	ffff0000 	.word	0xffff0000
 800076c:	51008108 	.word	0x51008108

08000770 <inst_absolute>:
static float32_t pi = 3.141592654f;
extern uint16_t frameSize;

// Preprocessing

void inst_absolute(float32_t in[], float32_t out[]){
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	int j = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	e031      	b.n	80007e8 <inst_absolute+0x78>
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	ed93 7a00 	vldr	s14, [r3]
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	4413      	add	r3, r2
 8000798:	edd3 7a00 	vldr	s15, [r3]
 800079c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	3301      	adds	r3, #1
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	edd3 6a00 	vldr	s13, [r3]
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	3301      	adds	r3, #1
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	4413      	add	r3, r2
 80007b8:	edd3 7a00 	vldr	s15, [r3]
 80007bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	683a      	ldr	r2, [r7, #0]
 80007ca:	18d4      	adds	r4, r2, r3
 80007cc:	eeb0 0a67 	vmov.f32	s0, s15
 80007d0:	f008 fb76 	bl	8008ec0 <sqrtf>
 80007d4:	eef0 7a40 	vmov.f32	s15, s0
 80007d8:	edc4 7a00 	vstr	s15, [r4]
		j++;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3301      	adds	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	3302      	adds	r3, #2
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <inst_absolute+0x8c>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	dbc7      	blt.n	8000784 <inst_absolute+0x14>
	}
}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd90      	pop	{r4, r7, pc}
 80007fc:	08009404 	.word	0x08009404

08000800 <inst_phase>:

void inst_phase(float32_t in[], float32_t out[]){
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
	int j = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	e026      	b.n	8000862 <inst_phase+0x62>
		out[j] = atan2(in[i+1], in[i]);
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	3301      	adds	r3, #1
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	edd3 7a00 	vldr	s15, [r3]
 8000822:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	4413      	add	r3, r2
 800082e:	edd3 6a00 	vldr	s13, [r3]
 8000832:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000836:	eeb0 1b46 	vmov.f64	d1, d6
 800083a:	eeb0 0b47 	vmov.f64	d0, d7
 800083e:	f008 fb3b 	bl	8008eb8 <atan2>
 8000842:	eeb0 7b40 	vmov.f64	d7, d0
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	683a      	ldr	r2, [r7, #0]
 800084c:	4413      	add	r3, r2
 800084e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000852:	edc3 7a00 	vstr	s15, [r3]
		j++;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	3301      	adds	r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	3302      	adds	r3, #2
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <inst_phase+0x78>)
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	68ba      	ldr	r2, [r7, #8]
 800086a:	429a      	cmp	r2, r3
 800086c:	dbd2      	blt.n	8000814 <inst_phase+0x14>
	}
}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	08009404 	.word	0x08009404

0800087c <unwrap>:

void unwrap(float32_t in[], float32_t out[]){
 800087c:	b480      	push	{r7}
 800087e:	b087      	sub	sp, #28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
	        end
	    end
	end
	yout((i+1),:)=u(i+1)+(2*pi*k); % add 2*pi*k to the last element of the input
	*/
	uint16_t k = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	82fb      	strh	r3, [r7, #22]
	float32_t alpha = pi;
 800088a:	4b47      	ldr	r3, [pc, #284]	; (80009a8 <unwrap+0x12c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < (frameSize - 1); i++){
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	e057      	b.n	8000946 <unwrap+0xca>
		out[i] = in[i] + 2*pi*k;
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	ed93 7a00 	vldr	s14, [r3]
 80008a2:	4b41      	ldr	r3, [pc, #260]	; (80009a8 <unwrap+0x12c>)
 80008a4:	edd3 7a00 	vldr	s15, [r3]
 80008a8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80008ac:	8afb      	ldrh	r3, [r7, #22]
 80008ae:	ee07 3a90 	vmov	s15, r3
 80008b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	683a      	ldr	r2, [r7, #0]
 80008c0:	4413      	add	r3, r2
 80008c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008c6:	edc3 7a00 	vstr	s15, [r3]
		if(abs(in[i+1] - in[i]) > abs(alpha)){
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	3301      	adds	r3, #1
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	4413      	add	r3, r2
 80008d4:	ed93 7a00 	vldr	s14, [r3]
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	4413      	add	r3, r2
 80008e0:	edd3 7a00 	vldr	s15, [r3]
 80008e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ec:	ee17 3a90 	vmov	r3, s15
 80008f0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80008f4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80008f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80008fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000900:	ee17 3a90 	vmov	r3, s15
 8000904:	2b00      	cmp	r3, #0
 8000906:	bfb8      	it	lt
 8000908:	425b      	neglt	r3, r3
 800090a:	429a      	cmp	r2, r3
 800090c:	dd18      	ble.n	8000940 <unwrap+0xc4>
			if(in[i+1] < in[i]){
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	3301      	adds	r3, #1
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	4413      	add	r3, r2
 8000918:	ed93 7a00 	vldr	s14, [r3]
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	4413      	add	r3, r2
 8000924:	edd3 7a00 	vldr	s15, [r3]
 8000928:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800092c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000930:	d503      	bpl.n	800093a <unwrap+0xbe>
				k++;
 8000932:	8afb      	ldrh	r3, [r7, #22]
 8000934:	3301      	adds	r3, #1
 8000936:	82fb      	strh	r3, [r7, #22]
 8000938:	e002      	b.n	8000940 <unwrap+0xc4>
			} else {
				k--;
 800093a:	8afb      	ldrh	r3, [r7, #22]
 800093c:	3b01      	subs	r3, #1
 800093e:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (frameSize - 1); i++){
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	3301      	adds	r3, #1
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <unwrap+0x130>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	3b01      	subs	r3, #1
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	429a      	cmp	r2, r3
 8000950:	dba1      	blt.n	8000896 <unwrap+0x1a>
			}
		}
	}
	out[frameSize-1] = in[frameSize-1] + 2*pi*k;
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <unwrap+0x130>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800095c:	4413      	add	r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	4413      	add	r3, r2
 8000964:	ed93 7a00 	vldr	s14, [r3]
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <unwrap+0x12c>)
 800096a:	edd3 7a00 	vldr	s15, [r3]
 800096e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000972:	8afb      	ldrh	r3, [r7, #22]
 8000974:	ee07 3a90 	vmov	s15, r3
 8000978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800097c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <unwrap+0x130>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800098a:	4413      	add	r3, r2
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	683a      	ldr	r2, [r7, #0]
 8000990:	4413      	add	r3, r2
 8000992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000996:	edc3 7a00 	vstr	s15, [r3]
}
 800099a:	bf00      	nop
 800099c:	371c      	adds	r7, #28
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000008 	.word	0x20000008
 80009ac:	08009404 	.word	0x08009404

080009b0 <inst_frequency>:

void inst_frequency(float32_t in[], float32_t out[]){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
	float32_t *inst_phase, *unwrapped_phase;
	inst_phase = (float32_t *) malloc(frameSize * sizeof(float32_t));
 80009ba:	4b50      	ldr	r3, [pc, #320]	; (8000afc <inst_frequency+0x14c>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f006 fabb 	bl	8006f3c <malloc>
 80009c6:	4603      	mov	r3, r0
 80009c8:	613b      	str	r3, [r7, #16]
	unwrapped_phase = (float32_t *) malloc(frameSize * sizeof(float32_t));
 80009ca:	4b4c      	ldr	r3, [pc, #304]	; (8000afc <inst_frequency+0x14c>)
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f006 fab3 	bl	8006f3c <malloc>
 80009d6:	4603      	mov	r3, r0
 80009d8:	60fb      	str	r3, [r7, #12]
	int j = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
 80009e2:	e026      	b.n	8000a32 <inst_frequency+0x82>
		inst_phase[j] = atan2(in[i], in[i+1]);
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	4413      	add	r3, r2
 80009ec:	edd3 7a00 	vldr	s15, [r3]
 80009f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	3301      	adds	r3, #1
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	edd3 6a00 	vldr	s13, [r3]
 8000a02:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000a06:	eeb0 1b46 	vmov.f64	d1, d6
 8000a0a:	eeb0 0b47 	vmov.f64	d0, d7
 8000a0e:	f008 fa53 	bl	8008eb8 <atan2>
 8000a12:	eeb0 7b40 	vmov.f64	d7, d0
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a22:	edc3 7a00 	vstr	s15, [r3]
		j++;
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	3302      	adds	r3, #2
 8000a30:	61bb      	str	r3, [r7, #24]
 8000a32:	4b32      	ldr	r3, [pc, #200]	; (8000afc <inst_frequency+0x14c>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	dbd2      	blt.n	80009e4 <inst_frequency+0x34>
	}
	unwrap(inst_phase, unwrapped_phase);
 8000a3e:	68f9      	ldr	r1, [r7, #12]
 8000a40:	6938      	ldr	r0, [r7, #16]
 8000a42:	f7ff ff1b 	bl	800087c <unwrap>
	for(int i = 0; i < frameSize - 1; i++){
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	e022      	b.n	8000a92 <inst_frequency+0xe2>
		out[i] = (1/(2*pi))*(unwrapped_phase[i+1] - unwrapped_phase[i]);
 8000a4c:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <inst_frequency+0x150>)
 8000a4e:	edd3 7a00 	vldr	s15, [r3]
 8000a52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	4413      	add	r3, r2
 8000a68:	edd3 6a00 	vldr	s13, [r3]
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	edd3 7a00 	vldr	s15, [r3]
 8000a78:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	683a      	ldr	r2, [r7, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a88:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < frameSize - 1; i++){
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <inst_frequency+0x14c>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	dbd6      	blt.n	8000a4c <inst_frequency+0x9c>
	}
	out[frameSize - 1] = (1/(2*pi))*(0 - unwrapped_phase[frameSize - 1]);
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <inst_frequency+0x150>)
 8000aa0:	edd3 7a00 	vldr	s15, [r3]
 8000aa4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000aa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000aac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <inst_frequency+0x14c>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000aba:	4413      	add	r3, r2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	edd3 7a00 	vldr	s15, [r3]
 8000ac6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000b04 <inst_frequency+0x154>
 8000aca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <inst_frequency+0x14c>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000ad8:	4413      	add	r3, r2
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ae4:	edc3 7a00 	vstr	s15, [r3]
	free(inst_phase);
 8000ae8:	6938      	ldr	r0, [r7, #16]
 8000aea:	f006 fa2f 	bl	8006f4c <free>
	free(unwrapped_phase);
 8000aee:	68f8      	ldr	r0, [r7, #12]
 8000af0:	f006 fa2c 	bl	8006f4c <free>
}
 8000af4:	bf00      	nop
 8000af6:	3720      	adds	r7, #32
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	08009404 	.word	0x08009404
 8000b00:	20000008 	.word	0x20000008
 8000b04:	00000000 	.word	0x00000000

08000b08 <inst_centralized_normalized_absolute>:

void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
	float32_t mean = 0, max = 0;
 8000b12:	f04f 0300 	mov.w	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	f04f 0300 	mov.w	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
	uint32_t max_index = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
	float32_t *absolute, *normalized;
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000b22:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <inst_centralized_normalized_absolute+0xf4>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f006 fa07 	bl	8006f3c <malloc>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	61fb      	str	r3, [r7, #28]
	normalized = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000b32:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <inst_centralized_normalized_absolute+0xf4>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f006 f9ff 	bl	8006f3c <malloc>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	61bb      	str	r3, [r7, #24]
	inst_absolute(in, &absolute[0]);
 8000b42:	69f9      	ldr	r1, [r7, #28]
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff fe13 	bl	8000770 <inst_absolute>
	arm_max_f32(absolute, frameSize, &max, &max_index);
 8000b4a:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <inst_centralized_normalized_absolute+0xf4>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	f107 0210 	add.w	r2, r7, #16
 8000b58:	69f8      	ldr	r0, [r7, #28]
 8000b5a:	f006 f95f 	bl	8006e1c <arm_max_f32>
	for(int a = 0; a < frameSize; a++){
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
 8000b62:	e012      	b.n	8000b8a <inst_centralized_normalized_absolute+0x82>
		normalized[a] = absolute[a] / max;
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	69fa      	ldr	r2, [r7, #28]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	edd3 6a00 	vldr	s13, [r3]
 8000b70:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b80:	edc3 7a00 	vstr	s15, [r3]
	for(int a = 0; a < frameSize; a++){
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	3301      	adds	r3, #1
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <inst_centralized_normalized_absolute+0xf4>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b92:	4293      	cmp	r3, r2
 8000b94:	dbe6      	blt.n	8000b64 <inst_centralized_normalized_absolute+0x5c>
	}
	arm_mean_f32(&normalized[0], frameSize, &mean);
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <inst_centralized_normalized_absolute+0xf4>)
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	69b8      	ldr	r0, [r7, #24]
 8000ba4:	f006 f904 	bl	8006db0 <arm_mean_f32>
	for(int i = 0; i < frameSize; i++){
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
 8000bac:	e016      	b.n	8000bdc <inst_centralized_normalized_absolute+0xd4>
		out[i] = normalized[i] / mean - 1;
 8000bae:	6a3b      	ldr	r3, [r7, #32]
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	edd3 6a00 	vldr	s13, [r3]
 8000bba:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bc2:	6a3b      	ldr	r3, [r7, #32]
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	4413      	add	r3, r2
 8000bca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bd2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < frameSize; i++){
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	623b      	str	r3, [r7, #32]
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <inst_centralized_normalized_absolute+0xf4>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	6a3b      	ldr	r3, [r7, #32]
 8000be4:	4293      	cmp	r3, r2
 8000be6:	dbe2      	blt.n	8000bae <inst_centralized_normalized_absolute+0xa6>
	}
	free(absolute);
 8000be8:	69f8      	ldr	r0, [r7, #28]
 8000bea:	f006 f9af 	bl	8006f4c <free>
	free(normalized);
 8000bee:	69b8      	ldr	r0, [r7, #24]
 8000bf0:	f006 f9ac 	bl	8006f4c <free>
}
 8000bf4:	bf00      	nop
 8000bf6:	3728      	adds	r7, #40	; 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	08009404 	.word	0x08009404

08000c00 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08c      	sub	sp, #48	; 0x30
 8000c04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	4b4b      	ldr	r3, [pc, #300]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	4a49      	ldr	r2, [pc, #292]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000c1e:	f043 0304 	orr.w	r3, r3, #4
 8000c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c26:	4b47      	ldr	r3, [pc, #284]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	61bb      	str	r3, [r7, #24]
 8000c32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c34:	4b43      	ldr	r3, [pc, #268]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	4a42      	ldr	r2, [pc, #264]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c44:	4b3f      	ldr	r3, [pc, #252]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	4b3c      	ldr	r3, [pc, #240]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	4a3a      	ldr	r2, [pc, #232]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000c5a:	f043 0302 	orr.w	r3, r3, #2
 8000c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c62:	4b38      	ldr	r3, [pc, #224]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	f003 0302 	and.w	r3, r3, #2
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c70:	4b34      	ldr	r3, [pc, #208]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	4a33      	ldr	r2, [pc, #204]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c80:	4b30      	ldr	r3, [pc, #192]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	4a2b      	ldr	r2, [pc, #172]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9e:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cac:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	4a24      	ldr	r2, [pc, #144]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000cb4:	f043 0310 	orr.w	r3, r3, #16
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbc:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	f003 0310 	and.w	r3, r3, #16
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cd0:	481d      	ldr	r0, [pc, #116]	; (8000d48 <MX_GPIO_Init+0x148>)
 8000cd2:	f001 fc7d 	bl	80025d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2102      	movs	r1, #2
 8000cda:	481c      	ldr	r0, [pc, #112]	; (8000d4c <MX_GPIO_Init+0x14c>)
 8000cdc:	f001 fc78 	bl	80025d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ce0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4813      	ldr	r0, [pc, #76]	; (8000d48 <MX_GPIO_Init+0x148>)
 8000cfa:	f001 faa1 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000cfe:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d10:	230a      	movs	r3, #10
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480d      	ldr	r0, [pc, #52]	; (8000d50 <MX_GPIO_Init+0x150>)
 8000d1c:	f001 fa90 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_GPIO_Init+0x14c>)
 8000d38:	f001 fa82 	bl	8002240 <HAL_GPIO_Init>

}
 8000d3c:	bf00      	nop
 8000d3e:	3730      	adds	r7, #48	; 0x30
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	58024400 	.word	0x58024400
 8000d48:	58020400 	.word	0x58020400
 8000d4c:	58021000 	.word	0x58021000
 8000d50:	58020000 	.word	0x58020000

08000d54 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d5c:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <SCB_EnableICache+0x3c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d6c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <SCB_EnableICache+0x3c>)
 8000d72:	695b      	ldr	r3, [r3, #20]
 8000d74:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <SCB_EnableICache+0x3c>)
 8000d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d80:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <SCB_EnableDCache+0x7c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000da2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000da6:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <SCB_EnableDCache+0x7c>)
 8000da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dac:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	0b5b      	lsrs	r3, r3, #13
 8000db2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000db6:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	08db      	lsrs	r3, r3, #3
 8000dbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000dc0:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	015a      	lsls	r2, r3, #5
 8000dc6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000dca:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000dcc:	68ba      	ldr	r2, [r7, #8]
 8000dce:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dd0:	490f      	ldr	r1, [pc, #60]	; (8000e10 <SCB_EnableDCache+0x7c>)
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	1e5a      	subs	r2, r3, #1
 8000ddc:	60ba      	str	r2, [r7, #8]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1ef      	bne.n	8000dc2 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	1e5a      	subs	r2, r3, #1
 8000de6:	60fa      	str	r2, [r7, #12]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1e5      	bne.n	8000db8 <SCB_EnableDCache+0x24>
 8000dec:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <SCB_EnableDCache+0x7c>)
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <SCB_EnableDCache+0x7c>)
 8000df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfa:	6153      	str	r3, [r2, #20]
 8000dfc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e00:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	f5ad 4da0 	sub.w	sp, sp, #20480	; 0x5000
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// char hello_world[50] = {"\r\nHello World!\r\n"};
	uint32_t counter = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f245 0208 	movw	r2, #20488	; 0x5008
 8000e24:	443a      	add	r2, r7
 8000e26:	6013      	str	r3, [r2, #0]
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
    int32_t timeout; 
/* USER CODE END Boot_Mode_Sequence_0 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000e28:	f7ff ff94 	bl	8000d54 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000e2c:	f7ff ffb2 	bl	8000d94 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000e30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e34:	f245 020c 	movw	r2, #20492	; 0x500c
 8000e38:	443a      	add	r2, r7
 8000e3a:	6013      	str	r3, [r2, #0]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000e3c:	bf00      	nop
 8000e3e:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <main+0x10c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d00a      	beq.n	8000e60 <main+0x4c>
 8000e4a:	f245 030c 	movw	r3, #20492	; 0x500c
 8000e4e:	443b      	add	r3, r7
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	1e5a      	subs	r2, r3, #1
 8000e54:	f245 010c 	movw	r1, #20492	; 0x500c
 8000e58:	4439      	add	r1, r7
 8000e5a:	600a      	str	r2, [r1, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	dcee      	bgt.n	8000e3e <main+0x2a>
  if ( timeout < 0 )
 8000e60:	f245 030c 	movw	r3, #20492	; 0x500c
 8000e64:	443b      	add	r3, r7
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	da01      	bge.n	8000e70 <main+0x5c>
  {
  Error_Handler();
 8000e6c:	f000 fc18 	bl	80016a0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e70:	f000 fdd2 	bl	8001a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e74:	f000 fa94 	bl	80013a0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e78:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <main+0x10c>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	4a28      	ldr	r2, [pc, #160]	; (8000f20 <main+0x10c>)
 8000e80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e88:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <main+0x10c>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8e:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8000e92:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <main+0x110>)
 8000e94:	f245 0110 	movw	r1, #20496	; 0x5010
 8000e98:	4439      	add	r1, r7
 8000e9a:	440b      	add	r3, r1
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <main+0x110>)
 8000ea0:	f245 0210 	movw	r2, #20496	; 0x5010
 8000ea4:	443a      	add	r2, r7
 8000ea6:	4413      	add	r3, r2
 8000ea8:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f001 fbaa 	bl	8002604 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f001 fbc0 	bl	8002638 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ebc:	f245 020c 	movw	r2, #20492	; 0x500c
 8000ec0:	443a      	add	r2, r7
 8000ec2:	6013      	str	r3, [r2, #0]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000ec4:	bf00      	nop
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <main+0x10c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10a      	bne.n	8000ee8 <main+0xd4>
 8000ed2:	f245 030c 	movw	r3, #20492	; 0x500c
 8000ed6:	443b      	add	r3, r7
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	1e5a      	subs	r2, r3, #1
 8000edc:	f245 010c 	movw	r1, #20492	; 0x500c
 8000ee0:	4439      	add	r1, r7
 8000ee2:	600a      	str	r2, [r1, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	dcee      	bgt.n	8000ec6 <main+0xb2>
if ( timeout < 0 )
 8000ee8:	f245 030c 	movw	r3, #20492	; 0x500c
 8000eec:	443b      	add	r3, r7
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	da01      	bge.n	8000ef8 <main+0xe4>
{
Error_Handler();
 8000ef4:	f000 fbd4 	bl	80016a0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef8:	f7ff fe82 	bl	8000c00 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000efc:	f000 fcc4 	bl	8001888 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000f00:	f000 fc54 	bl	80017ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Put UART peripheral in reception process
  if(HAL_UART_Receive_IT(&huart3, &rxDataBuffer[0], bufferSize) != HAL_OK)
 8000f04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4907      	ldr	r1, [pc, #28]	; (8000f28 <main+0x114>)
 8000f0c:	4807      	ldr	r0, [pc, #28]	; (8000f2c <main+0x118>)
 8000f0e:	f004 fa91 	bl	8005434 <HAL_UART_Receive_IT>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d02c      	beq.n	8000f72 <main+0x15e>
  {
    Error_Handler();
 8000f18:	f000 fbc2 	bl	80016a0 <Error_Handler>
  }
  // Wait for message
  while (UartReady != SET)
 8000f1c:	e029      	b.n	8000f72 <main+0x15e>
 8000f1e:	bf00      	nop
 8000f20:	58024400 	.word	0x58024400
 8000f24:	ffffaff4 	.word	0xffffaff4
 8000f28:	20004248 	.word	0x20004248
 8000f2c:	20006294 	.word	0x20006294
  {
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	2101      	movs	r1, #1
 8000f34:	48b9      	ldr	r0, [pc, #740]	; (800121c <main+0x408>)
 8000f36:	f001 fb4b 	bl	80025d0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000f3a:	2064      	movs	r0, #100	; 0x64
 8000f3c:	f000 fdfe 	bl	8001b3c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2101      	movs	r1, #1
 8000f44:	48b5      	ldr	r0, [pc, #724]	; (800121c <main+0x408>)
 8000f46:	f001 fb43 	bl	80025d0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000f4a:	2064      	movs	r0, #100	; 0x64
 8000f4c:	f000 fdf6 	bl	8001b3c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	2101      	movs	r1, #1
 8000f54:	48b1      	ldr	r0, [pc, #708]	; (800121c <main+0x408>)
 8000f56:	f001 fb3b 	bl	80025d0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000f5a:	2064      	movs	r0, #100	; 0x64
 8000f5c:	f000 fdee 	bl	8001b3c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2101      	movs	r1, #1
 8000f64:	48ad      	ldr	r0, [pc, #692]	; (800121c <main+0x408>)
 8000f66:	f001 fb33 	bl	80025d0 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000f6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f6e:	f000 fde5 	bl	8001b3c <HAL_Delay>
  while (UartReady != SET)
 8000f72:	4bab      	ldr	r3, [pc, #684]	; (8001220 <main+0x40c>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d1d9      	bne.n	8000f30 <main+0x11c>
  }
  UartReady = RESET;
 8000f7c:	4ba8      	ldr	r3, [pc, #672]	; (8001220 <main+0x40c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]

  // HAL_UART_Transmit(&huart3, (uint8_t*) &hello_world[0], sizeof(hello_world), 100);
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2101      	movs	r1, #1
 8000f86:	48a5      	ldr	r0, [pc, #660]	; (800121c <main+0x408>)
 8000f88:	f001 fb22 	bl	80025d0 <HAL_GPIO_WritePin>

  if(rxDataBuffer[8191] != 0 && (processed == 0)){
 8000f8c:	4aa5      	ldr	r2, [pc, #660]	; (8001224 <main+0x410>)
 8000f8e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000f92:	4413      	add	r3, r2
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d007      	beq.n	8000faa <main+0x196>
 8000f9a:	4ba3      	ldr	r3, [pc, #652]	; (8001228 <main+0x414>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d103      	bne.n	8000faa <main+0x196>
	  byte2float(rxDataBuffer, processedData);
 8000fa2:	49a2      	ldr	r1, [pc, #648]	; (800122c <main+0x418>)
 8000fa4:	489f      	ldr	r0, [pc, #636]	; (8001224 <main+0x410>)
 8000fa6:	f000 fadf 	bl	8001568 <byte2float>
  }

  // HRTimer enable
  __HAL_TIM_ENABLE(&htim2);
 8000faa:	4ba1      	ldr	r3, [pc, #644]	; (8001230 <main+0x41c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b9f      	ldr	r3, [pc, #636]	; (8001230 <main+0x41c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f042 0201 	orr.w	r2, r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]
  __HAL_TIM_UIFREMAP_DISABLE(&htim2);
 8000fba:	4b9d      	ldr	r3, [pc, #628]	; (8001230 <main+0x41c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b9b      	ldr	r3, [pc, #620]	; (8001230 <main+0x41c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fc8:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim2);
 8000fca:	4899      	ldr	r0, [pc, #612]	; (8001230 <main+0x41c>)
 8000fcc:	f003 fe8e 	bl	8004cec <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000fd0:	4b97      	ldr	r3, [pc, #604]	; (8001230 <main+0x41c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	625a      	str	r2, [r3, #36]	; 0x24

  	/*****************************************************************************************************/
    // Instantaneous absolute value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000fd8:	4b95      	ldr	r3, [pc, #596]	; (8001230 <main+0x41c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(&processedData[0], &instAbs[0]);
 8000fe0:	4b94      	ldr	r3, [pc, #592]	; (8001234 <main+0x420>)
 8000fe2:	f245 0210 	movw	r2, #20496	; 0x5010
 8000fe6:	443a      	add	r2, r7
 8000fe8:	4413      	add	r3, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	488f      	ldr	r0, [pc, #572]	; (800122c <main+0x418>)
 8000fee:	f7ff fbbf 	bl	8000770 <inst_absolute>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000ff2:	4b8f      	ldr	r3, [pc, #572]	; (8001230 <main+0x41c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff8:	f245 0208 	movw	r2, #20488	; 0x5008
 8000ffc:	443a      	add	r2, r7
 8000ffe:	6013      	str	r3, [r2, #0]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001000:	488d      	ldr	r0, [pc, #564]	; (8001238 <main+0x424>)
 8001002:	f000 fa7f 	bl	8001504 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst abs counter = %ld\r\n&", counter);
 8001006:	f245 0308 	movw	r3, #20488	; 0x5008
 800100a:	443b      	add	r3, r7
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	498b      	ldr	r1, [pc, #556]	; (800123c <main+0x428>)
 8001010:	4889      	ldr	r0, [pc, #548]	; (8001238 <main+0x424>)
 8001012:	f006 fc9d 	bl	8007950 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001016:	488a      	ldr	r0, [pc, #552]	; (8001240 <main+0x42c>)
 8001018:	f005 fac0 	bl	800659c <UART_CheckIdleState>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d105      	bne.n	800102e <main+0x21a>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txStringBuffer[0], sizeof(txStringBuffer), 100);
 8001022:	2364      	movs	r3, #100	; 0x64
 8001024:	2232      	movs	r2, #50	; 0x32
 8001026:	4984      	ldr	r1, [pc, #528]	; (8001238 <main+0x424>)
 8001028:	4885      	ldr	r0, [pc, #532]	; (8001240 <main+0x42c>)
 800102a:	f004 f96d 	bl	8005308 <HAL_UART_Transmit>
	}
	HAL_Delay(2000);
 800102e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001032:	f000 fd83 	bl	8001b3c <HAL_Delay>
	resetDataBuffer(txDataBuffer);
 8001036:	4883      	ldr	r0, [pc, #524]	; (8001244 <main+0x430>)
 8001038:	f000 fa7c 	bl	8001534 <resetDataBuffer>
	float2byte(txDataBuffer, instAbs);
 800103c:	4b7d      	ldr	r3, [pc, #500]	; (8001234 <main+0x420>)
 800103e:	f245 0210 	movw	r2, #20496	; 0x5010
 8001042:	443a      	add	r2, r7
 8001044:	4413      	add	r3, r2
 8001046:	4619      	mov	r1, r3
 8001048:	487e      	ldr	r0, [pc, #504]	; (8001244 <main+0x430>)
 800104a:	f000 facb 	bl	80015e4 <float2byte>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800104e:	487c      	ldr	r0, [pc, #496]	; (8001240 <main+0x42c>)
 8001050:	f005 faa4 	bl	800659c <UART_CheckIdleState>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d113      	bne.n	8001082 <main+0x26e>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txHead[0], 4, 100);
 800105a:	2364      	movs	r3, #100	; 0x64
 800105c:	2204      	movs	r2, #4
 800105e:	497a      	ldr	r1, [pc, #488]	; (8001248 <main+0x434>)
 8001060:	4877      	ldr	r0, [pc, #476]	; (8001240 <main+0x42c>)
 8001062:	f004 f951 	bl	8005308 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txDataBuffer[0], 4096, 2000);
 8001066:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800106a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800106e:	4975      	ldr	r1, [pc, #468]	; (8001244 <main+0x430>)
 8001070:	4873      	ldr	r0, [pc, #460]	; (8001240 <main+0x42c>)
 8001072:	f004 f949 	bl	8005308 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txTail[0], 4, 100);
 8001076:	2364      	movs	r3, #100	; 0x64
 8001078:	2204      	movs	r2, #4
 800107a:	4974      	ldr	r1, [pc, #464]	; (800124c <main+0x438>)
 800107c:	4870      	ldr	r0, [pc, #448]	; (8001240 <main+0x42c>)
 800107e:	f004 f943 	bl	8005308 <HAL_UART_Transmit>
	}

	HAL_Delay(2000);
 8001082:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001086:	f000 fd59 	bl	8001b3c <HAL_Delay>
	/*****************************************************************************************************/

	// Instantaneous phase value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800108a:	4b69      	ldr	r3, [pc, #420]	; (8001230 <main+0x41c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
	inst_phase(&processedData[0], &instPhase[0]);
 8001092:	4b6f      	ldr	r3, [pc, #444]	; (8001250 <main+0x43c>)
 8001094:	f245 0210 	movw	r2, #20496	; 0x5010
 8001098:	443a      	add	r2, r7
 800109a:	4413      	add	r3, r2
 800109c:	4619      	mov	r1, r3
 800109e:	4863      	ldr	r0, [pc, #396]	; (800122c <main+0x418>)
 80010a0:	f7ff fbae 	bl	8000800 <inst_phase>
	unwrap(&instPhase[0], &unwrappedPhase[0]);
 80010a4:	4a6b      	ldr	r2, [pc, #428]	; (8001254 <main+0x440>)
 80010a6:	f245 0310 	movw	r3, #20496	; 0x5010
 80010aa:	443b      	add	r3, r7
 80010ac:	441a      	add	r2, r3
 80010ae:	4b68      	ldr	r3, [pc, #416]	; (8001250 <main+0x43c>)
 80010b0:	f245 0110 	movw	r1, #20496	; 0x5010
 80010b4:	4439      	add	r1, r7
 80010b6:	440b      	add	r3, r1
 80010b8:	4611      	mov	r1, r2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fbde 	bl	800087c <unwrap>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 80010c0:	4b5b      	ldr	r3, [pc, #364]	; (8001230 <main+0x41c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	f245 0208 	movw	r2, #20488	; 0x5008
 80010ca:	443a      	add	r2, r7
 80010cc:	6013      	str	r3, [r2, #0]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 80010ce:	485a      	ldr	r0, [pc, #360]	; (8001238 <main+0x424>)
 80010d0:	f000 fa18 	bl	8001504 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst phase counter = %ld\r\n", counter);
 80010d4:	f245 0308 	movw	r3, #20488	; 0x5008
 80010d8:	443b      	add	r3, r7
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	495e      	ldr	r1, [pc, #376]	; (8001258 <main+0x444>)
 80010de:	4856      	ldr	r0, [pc, #344]	; (8001238 <main+0x424>)
 80010e0:	f006 fc36 	bl	8007950 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80010e4:	4856      	ldr	r0, [pc, #344]	; (8001240 <main+0x42c>)
 80010e6:	f005 fa59 	bl	800659c <UART_CheckIdleState>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d105      	bne.n	80010fc <main+0x2e8>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txStringBuffer[0], sizeof(txStringBuffer), 100);
 80010f0:	2364      	movs	r3, #100	; 0x64
 80010f2:	2232      	movs	r2, #50	; 0x32
 80010f4:	4950      	ldr	r1, [pc, #320]	; (8001238 <main+0x424>)
 80010f6:	4852      	ldr	r0, [pc, #328]	; (8001240 <main+0x42c>)
 80010f8:	f004 f906 	bl	8005308 <HAL_UART_Transmit>
	}
	HAL_Delay(2000);
 80010fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001100:	f000 fd1c 	bl	8001b3c <HAL_Delay>
	resetDataBuffer(txDataBuffer);
 8001104:	484f      	ldr	r0, [pc, #316]	; (8001244 <main+0x430>)
 8001106:	f000 fa15 	bl	8001534 <resetDataBuffer>
	float2byte(txDataBuffer, instPhase);
 800110a:	4b51      	ldr	r3, [pc, #324]	; (8001250 <main+0x43c>)
 800110c:	f245 0210 	movw	r2, #20496	; 0x5010
 8001110:	443a      	add	r2, r7
 8001112:	4413      	add	r3, r2
 8001114:	4619      	mov	r1, r3
 8001116:	484b      	ldr	r0, [pc, #300]	; (8001244 <main+0x430>)
 8001118:	f000 fa64 	bl	80015e4 <float2byte>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800111c:	4848      	ldr	r0, [pc, #288]	; (8001240 <main+0x42c>)
 800111e:	f005 fa3d 	bl	800659c <UART_CheckIdleState>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d113      	bne.n	8001150 <main+0x33c>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txHead[0], 4, 100);
 8001128:	2364      	movs	r3, #100	; 0x64
 800112a:	2204      	movs	r2, #4
 800112c:	4946      	ldr	r1, [pc, #280]	; (8001248 <main+0x434>)
 800112e:	4844      	ldr	r0, [pc, #272]	; (8001240 <main+0x42c>)
 8001130:	f004 f8ea 	bl	8005308 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txDataBuffer[0], 4096, 2000);
 8001134:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001138:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800113c:	4941      	ldr	r1, [pc, #260]	; (8001244 <main+0x430>)
 800113e:	4840      	ldr	r0, [pc, #256]	; (8001240 <main+0x42c>)
 8001140:	f004 f8e2 	bl	8005308 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txTail[0], 4, 100);
 8001144:	2364      	movs	r3, #100	; 0x64
 8001146:	2204      	movs	r2, #4
 8001148:	4940      	ldr	r1, [pc, #256]	; (800124c <main+0x438>)
 800114a:	483d      	ldr	r0, [pc, #244]	; (8001240 <main+0x42c>)
 800114c:	f004 f8dc 	bl	8005308 <HAL_UART_Transmit>
	}

	HAL_Delay(2000);
 8001150:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001154:	f000 fcf2 	bl	8001b3c <HAL_Delay>
	/*****************************************************************************************************/
	// Instantaneous frequency value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001158:	4b35      	ldr	r3, [pc, #212]	; (8001230 <main+0x41c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
	inst_frequency(&processedData[0], &instFreq[0]);
 8001160:	4b3e      	ldr	r3, [pc, #248]	; (800125c <main+0x448>)
 8001162:	f245 0210 	movw	r2, #20496	; 0x5010
 8001166:	443a      	add	r2, r7
 8001168:	4413      	add	r3, r2
 800116a:	4619      	mov	r1, r3
 800116c:	482f      	ldr	r0, [pc, #188]	; (800122c <main+0x418>)
 800116e:	f7ff fc1f 	bl	80009b0 <inst_frequency>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001172:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <main+0x41c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	f245 0208 	movw	r2, #20488	; 0x5008
 800117c:	443a      	add	r2, r7
 800117e:	6013      	str	r3, [r2, #0]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001180:	482d      	ldr	r0, [pc, #180]	; (8001238 <main+0x424>)
 8001182:	f000 f9bf 	bl	8001504 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst freq counter = %ld\r\n", counter);
 8001186:	f245 0308 	movw	r3, #20488	; 0x5008
 800118a:	443b      	add	r3, r7
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4934      	ldr	r1, [pc, #208]	; (8001260 <main+0x44c>)
 8001190:	4829      	ldr	r0, [pc, #164]	; (8001238 <main+0x424>)
 8001192:	f006 fbdd 	bl	8007950 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001196:	482a      	ldr	r0, [pc, #168]	; (8001240 <main+0x42c>)
 8001198:	f005 fa00 	bl	800659c <UART_CheckIdleState>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d105      	bne.n	80011ae <main+0x39a>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txStringBuffer[0], sizeof(txStringBuffer), 100);
 80011a2:	2364      	movs	r3, #100	; 0x64
 80011a4:	2232      	movs	r2, #50	; 0x32
 80011a6:	4924      	ldr	r1, [pc, #144]	; (8001238 <main+0x424>)
 80011a8:	4825      	ldr	r0, [pc, #148]	; (8001240 <main+0x42c>)
 80011aa:	f004 f8ad 	bl	8005308 <HAL_UART_Transmit>
	}
	HAL_Delay(2000);
 80011ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011b2:	f000 fcc3 	bl	8001b3c <HAL_Delay>
	resetDataBuffer(txDataBuffer);
 80011b6:	4823      	ldr	r0, [pc, #140]	; (8001244 <main+0x430>)
 80011b8:	f000 f9bc 	bl	8001534 <resetDataBuffer>
	float2byte(txDataBuffer, instFreq);
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <main+0x448>)
 80011be:	f245 0210 	movw	r2, #20496	; 0x5010
 80011c2:	443a      	add	r2, r7
 80011c4:	4413      	add	r3, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	481e      	ldr	r0, [pc, #120]	; (8001244 <main+0x430>)
 80011ca:	f000 fa0b 	bl	80015e4 <float2byte>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80011ce:	481c      	ldr	r0, [pc, #112]	; (8001240 <main+0x42c>)
 80011d0:	f005 f9e4 	bl	800659c <UART_CheckIdleState>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d113      	bne.n	8001202 <main+0x3ee>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txHead[0], 4, 100);
 80011da:	2364      	movs	r3, #100	; 0x64
 80011dc:	2204      	movs	r2, #4
 80011de:	491a      	ldr	r1, [pc, #104]	; (8001248 <main+0x434>)
 80011e0:	4817      	ldr	r0, [pc, #92]	; (8001240 <main+0x42c>)
 80011e2:	f004 f891 	bl	8005308 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txDataBuffer[0], 4096, 2000);
 80011e6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ee:	4915      	ldr	r1, [pc, #84]	; (8001244 <main+0x430>)
 80011f0:	4813      	ldr	r0, [pc, #76]	; (8001240 <main+0x42c>)
 80011f2:	f004 f889 	bl	8005308 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txTail[0], 4, 100);
 80011f6:	2364      	movs	r3, #100	; 0x64
 80011f8:	2204      	movs	r2, #4
 80011fa:	4914      	ldr	r1, [pc, #80]	; (800124c <main+0x438>)
 80011fc:	4810      	ldr	r0, [pc, #64]	; (8001240 <main+0x42c>)
 80011fe:	f004 f883 	bl	8005308 <HAL_UART_Transmit>
	}
	HAL_Delay(2000);
 8001202:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001206:	f000 fc99 	bl	8001b3c <HAL_Delay>
	/*****************************************************************************************************/
	// Instantaneous centered normalized absolute value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <main+0x41c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2200      	movs	r2, #0
 8001210:	625a      	str	r2, [r3, #36]	; 0x24
	inst_centralized_normalized_absolute(&processedData[0], &instCNA[0]);
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <main+0x450>)
 8001214:	f245 0210 	movw	r2, #20496	; 0x5010
 8001218:	e026      	b.n	8001268 <main+0x454>
 800121a:	bf00      	nop
 800121c:	58020400 	.word	0x58020400
 8001220:	2000023a 	.word	0x2000023a
 8001224:	20004248 	.word	0x20004248
 8001228:	20000205 	.word	0x20000205
 800122c:	20000248 	.word	0x20000248
 8001230:	20006248 	.word	0x20006248
 8001234:	ffffeff8 	.word	0xffffeff8
 8001238:	20000208 	.word	0x20000208
 800123c:	08009358 	.word	0x08009358
 8001240:	20006294 	.word	0x20006294
 8001244:	20002248 	.word	0x20002248
 8001248:	08009408 	.word	0x08009408
 800124c:	0800940c 	.word	0x0800940c
 8001250:	ffffdff8 	.word	0xffffdff8
 8001254:	ffffaff8 	.word	0xffffaff8
 8001258:	08009374 	.word	0x08009374
 800125c:	ffffcff8 	.word	0xffffcff8
 8001260:	08009390 	.word	0x08009390
 8001264:	ffffbff8 	.word	0xffffbff8
 8001268:	443a      	add	r2, r7
 800126a:	4413      	add	r3, r2
 800126c:	4619      	mov	r1, r3
 800126e:	4840      	ldr	r0, [pc, #256]	; (8001370 <main+0x55c>)
 8001270:	f7ff fc4a 	bl	8000b08 <inst_centralized_normalized_absolute>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001274:	4b3f      	ldr	r3, [pc, #252]	; (8001374 <main+0x560>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	f245 0208 	movw	r2, #20488	; 0x5008
 800127e:	443a      	add	r2, r7
 8001280:	6013      	str	r3, [r2, #0]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001282:	483d      	ldr	r0, [pc, #244]	; (8001378 <main+0x564>)
 8001284:	f000 f93e 	bl	8001504 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst CNA counter = %ld\r\n&", counter);
 8001288:	f245 0308 	movw	r3, #20488	; 0x5008
 800128c:	443b      	add	r3, r7
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	493a      	ldr	r1, [pc, #232]	; (800137c <main+0x568>)
 8001292:	4839      	ldr	r0, [pc, #228]	; (8001378 <main+0x564>)
 8001294:	f006 fb5c 	bl	8007950 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001298:	4839      	ldr	r0, [pc, #228]	; (8001380 <main+0x56c>)
 800129a:	f005 f97f 	bl	800659c <UART_CheckIdleState>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d105      	bne.n	80012b0 <main+0x49c>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txStringBuffer[0], sizeof(txStringBuffer), 100);
 80012a4:	2364      	movs	r3, #100	; 0x64
 80012a6:	2232      	movs	r2, #50	; 0x32
 80012a8:	4933      	ldr	r1, [pc, #204]	; (8001378 <main+0x564>)
 80012aa:	4835      	ldr	r0, [pc, #212]	; (8001380 <main+0x56c>)
 80012ac:	f004 f82c 	bl	8005308 <HAL_UART_Transmit>
	}
	HAL_Delay(2000);
 80012b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012b4:	f000 fc42 	bl	8001b3c <HAL_Delay>
	resetDataBuffer(txDataBuffer);
 80012b8:	4832      	ldr	r0, [pc, #200]	; (8001384 <main+0x570>)
 80012ba:	f000 f93b 	bl	8001534 <resetDataBuffer>
	float2byte(txDataBuffer, instCNA);
 80012be:	4b32      	ldr	r3, [pc, #200]	; (8001388 <main+0x574>)
 80012c0:	f245 0210 	movw	r2, #20496	; 0x5010
 80012c4:	443a      	add	r2, r7
 80012c6:	4413      	add	r3, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	482e      	ldr	r0, [pc, #184]	; (8001384 <main+0x570>)
 80012cc:	f000 f98a 	bl	80015e4 <float2byte>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80012d0:	482b      	ldr	r0, [pc, #172]	; (8001380 <main+0x56c>)
 80012d2:	f005 f963 	bl	800659c <UART_CheckIdleState>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d113      	bne.n	8001304 <main+0x4f0>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txHead[0], 4, 100);
 80012dc:	2364      	movs	r3, #100	; 0x64
 80012de:	2204      	movs	r2, #4
 80012e0:	492a      	ldr	r1, [pc, #168]	; (800138c <main+0x578>)
 80012e2:	4827      	ldr	r0, [pc, #156]	; (8001380 <main+0x56c>)
 80012e4:	f004 f810 	bl	8005308 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txDataBuffer[0], 4096, 2000);
 80012e8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012f0:	4924      	ldr	r1, [pc, #144]	; (8001384 <main+0x570>)
 80012f2:	4823      	ldr	r0, [pc, #140]	; (8001380 <main+0x56c>)
 80012f4:	f004 f808 	bl	8005308 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txTail[0], 4, 100);
 80012f8:	2364      	movs	r3, #100	; 0x64
 80012fa:	2204      	movs	r2, #4
 80012fc:	4924      	ldr	r1, [pc, #144]	; (8001390 <main+0x57c>)
 80012fe:	4820      	ldr	r0, [pc, #128]	; (8001380 <main+0x56c>)
 8001300:	f004 f802 	bl	8005308 <HAL_UART_Transmit>
	}
	HAL_Delay(2000);
 8001304:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001308:	f000 fc18 	bl	8001b3c <HAL_Delay>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <main+0x560>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2200      	movs	r2, #0
 8001312:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	2101      	movs	r1, #1
 8001318:	481e      	ldr	r0, [pc, #120]	; (8001394 <main+0x580>)
 800131a:	f001 f959 	bl	80025d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2102      	movs	r1, #2
 8001322:	481d      	ldr	r0, [pc, #116]	; (8001398 <main+0x584>)
 8001324:	f001 f954 	bl	80025d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800132e:	4819      	ldr	r0, [pc, #100]	; (8001394 <main+0x580>)
 8001330:	f001 f94e 	bl	80025d0 <HAL_GPIO_WritePin>
  while (1)
  {
	if(__HAL_TIM_GET_COUNTER(&htim2) >= 240000000){
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <main+0x560>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	4a18      	ldr	r2, [pc, #96]	; (800139c <main+0x588>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d9f9      	bls.n	8001334 <main+0x520>
		if((HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin))){
 8001340:	2102      	movs	r1, #2
 8001342:	4815      	ldr	r0, [pc, #84]	; (8001398 <main+0x584>)
 8001344:	f001 f92c 	bl	80025a0 <HAL_GPIO_ReadPin>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <main+0x546>
			HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	2102      	movs	r1, #2
 8001352:	4811      	ldr	r0, [pc, #68]	; (8001398 <main+0x584>)
 8001354:	f001 f93c 	bl	80025d0 <HAL_GPIO_WritePin>
 8001358:	e004      	b.n	8001364 <main+0x550>
		} else {
			HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 800135a:	2201      	movs	r2, #1
 800135c:	2102      	movs	r1, #2
 800135e:	480e      	ldr	r0, [pc, #56]	; (8001398 <main+0x584>)
 8001360:	f001 f936 	bl	80025d0 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <main+0x560>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2200      	movs	r2, #0
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
	if(__HAL_TIM_GET_COUNTER(&htim2) >= 240000000){
 800136c:	e7e2      	b.n	8001334 <main+0x520>
 800136e:	bf00      	nop
 8001370:	20000248 	.word	0x20000248
 8001374:	20006248 	.word	0x20006248
 8001378:	20000208 	.word	0x20000208
 800137c:	080093ac 	.word	0x080093ac
 8001380:	20006294 	.word	0x20006294
 8001384:	20002248 	.word	0x20002248
 8001388:	ffffbff8 	.word	0xffffbff8
 800138c:	08009408 	.word	0x08009408
 8001390:	0800940c 	.word	0x0800940c
 8001394:	58020400 	.word	0x58020400
 8001398:	58021000 	.word	0x58021000
 800139c:	0e4e1bff 	.word	0x0e4e1bff

080013a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b0cc      	sub	sp, #304	; 0x130
 80013a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013aa:	224c      	movs	r2, #76	; 0x4c
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f005 fdd4 	bl	8006f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013b8:	2220      	movs	r2, #32
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f005 fdcd 	bl	8006f5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	4618      	mov	r0, r3
 80013c8:	23bc      	movs	r3, #188	; 0xbc
 80013ca:	461a      	mov	r2, r3
 80013cc:	2100      	movs	r1, #0
 80013ce:	f005 fdc5 	bl	8006f5c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80013d2:	2004      	movs	r0, #4
 80013d4:	f001 f944 	bl	8002660 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	4b47      	ldr	r3, [pc, #284]	; (80014fc <SystemClock_Config+0x15c>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	4a46      	ldr	r2, [pc, #280]	; (80014fc <SystemClock_Config+0x15c>)
 80013e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013e8:	6193      	str	r3, [r2, #24]
 80013ea:	4b44      	ldr	r3, [pc, #272]	; (80014fc <SystemClock_Config+0x15c>)
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	4b42      	ldr	r3, [pc, #264]	; (8001500 <SystemClock_Config+0x160>)
 80013f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fa:	4a41      	ldr	r2, [pc, #260]	; (8001500 <SystemClock_Config+0x160>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001402:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <SystemClock_Config+0x160>)
 8001404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001406:	f003 0201 	and.w	r2, r3, #1
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001412:	bf00      	nop
 8001414:	4b39      	ldr	r3, [pc, #228]	; (80014fc <SystemClock_Config+0x15c>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800141c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001420:	d1f8      	bne.n	8001414 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001422:	2302      	movs	r3, #2
 8001424:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001428:	2301      	movs	r3, #1
 800142a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800142e:	2340      	movs	r3, #64	; 0x40
 8001430:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001434:	2302      	movs	r3, #2
 8001436:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001440:	2304      	movs	r3, #4
 8001442:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001446:	233c      	movs	r3, #60	; 0x3c
 8001448:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800144c:	2302      	movs	r3, #2
 800144e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001452:	2302      	movs	r3, #2
 8001454:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001458:	2302      	movs	r3, #2
 800145a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800145e:	230c      	movs	r3, #12
 8001460:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001470:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001474:	4618      	mov	r0, r3
 8001476:	f001 f94d 	bl	8002714 <HAL_RCC_OscConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001480:	f000 f90e 	bl	80016a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001484:	233f      	movs	r3, #63	; 0x3f
 8001486:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800148a:	2303      	movs	r3, #3
 800148c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001496:	2308      	movs	r3, #8
 8001498:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800149c:	2340      	movs	r3, #64	; 0x40
 800149e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80014a2:	2340      	movs	r3, #64	; 0x40
 80014a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80014a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80014b0:	2340      	movs	r3, #64	; 0x40
 80014b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014b6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014ba:	2104      	movs	r1, #4
 80014bc:	4618      	mov	r0, r3
 80014be:	f001 fd39 	bl	8002f34 <HAL_RCC_ClockConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0x12c>
  {
    Error_Handler();
 80014c8:	f000 f8ea 	bl	80016a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	2202      	movs	r2, #2
 80014d2:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	2203      	movs	r2, #3
 80014da:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 f8ab 	bl	800363c <HAL_RCCEx_PeriphCLKConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0x150>
  {
    Error_Handler();
 80014ec:	f000 f8d8 	bl	80016a0 <Error_Handler>
  }
}
 80014f0:	bf00      	nop
 80014f2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	58024800 	.word	0x58024800
 8001500:	58000400 	.word	0x58000400

08001504 <reset_buffer>:

/* USER CODE BEGIN 4 */
void reset_buffer(char *stringBuffer){
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 1; i < 50; i++){
 800150c:	2301      	movs	r3, #1
 800150e:	81fb      	strh	r3, [r7, #14]
 8001510:	e007      	b.n	8001522 <reset_buffer+0x1e>
		stringBuffer[i] = '\0';
 8001512:	89fb      	ldrh	r3, [r7, #14]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	4413      	add	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 1; i < 50; i++){
 800151c:	89fb      	ldrh	r3, [r7, #14]
 800151e:	3301      	adds	r3, #1
 8001520:	81fb      	strh	r3, [r7, #14]
 8001522:	89fb      	ldrh	r3, [r7, #14]
 8001524:	2b31      	cmp	r3, #49	; 0x31
 8001526:	d9f4      	bls.n	8001512 <reset_buffer+0xe>
	}
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <resetDataBuffer>:
void resetDataBuffer(uint8_t *dataBuffer){
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 1; i < 8192; i++){
 800153c:	2301      	movs	r3, #1
 800153e:	81fb      	strh	r3, [r7, #14]
 8001540:	e007      	b.n	8001552 <resetDataBuffer+0x1e>
		dataBuffer[i] = 0;
 8001542:	89fb      	ldrh	r3, [r7, #14]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	4413      	add	r3, r2
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 1; i < 8192; i++){
 800154c:	89fb      	ldrh	r3, [r7, #14]
 800154e:	3301      	adds	r3, #1
 8001550:	81fb      	strh	r3, [r7, #14]
 8001552:	89fb      	ldrh	r3, [r7, #14]
 8001554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001558:	d3f3      	bcc.n	8001542 <resetDataBuffer+0xe>
	}
}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <byte2float>:
void byte2float(uint8_t *rxDataBuffer, float *processedData){
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001572:	2201      	movs	r2, #1
 8001574:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001578:	4817      	ldr	r0, [pc, #92]	; (80015d8 <byte2float+0x70>)
 800157a:	f001 f829 	bl	80025d0 <HAL_GPIO_WritePin>
	for(int i = 0; i < 2*frameSize; i = i + 4){
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	e00f      	b.n	80015a4 <byte2float+0x3c>
		memcpy(&processedData[i / 4], &rxDataBuffer[i], 4);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	da00      	bge.n	800158c <byte2float+0x24>
 800158a:	3303      	adds	r3, #3
 800158c:	109b      	asrs	r3, r3, #2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	4413      	add	r3, r2
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	440a      	add	r2, r1
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 2*frameSize; i = i + 4){
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3304      	adds	r3, #4
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	dbe9      	blt.n	8001584 <byte2float+0x1c>
	}
	processed = 1;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <byte2float+0x74>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	701a      	strb	r2, [r3, #0]
	received = 1;
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <byte2float+0x78>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
	// memcpy(&processedBuffer[0], &receiveBuffer[0], 4);
	HAL_Delay(500);
 80015bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015c0:	f000 fabc 	bl	8001b3c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ca:	4803      	ldr	r0, [pc, #12]	; (80015d8 <byte2float+0x70>)
 80015cc:	f001 f800 	bl	80025d0 <HAL_GPIO_WritePin>
}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	58020400 	.word	0x58020400
 80015dc:	20000205 	.word	0x20000205
 80015e0:	20000204 	.word	0x20000204

080015e4 <float2byte>:
void float2byte(uint8_t *txDataBuffer, float *processedData){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80015ee:	2201      	movs	r2, #1
 80015f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015f4:	4817      	ldr	r0, [pc, #92]	; (8001654 <float2byte+0x70>)
 80015f6:	f000 ffeb 	bl	80025d0 <HAL_GPIO_WritePin>
	for(int i = 0; i < 2*frameSize; i = i + 4){
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	e00f      	b.n	8001620 <float2byte+0x3c>
		memcpy(&txDataBuffer[i], &processedData[i / 4], 4);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	441a      	add	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2b00      	cmp	r3, #0
 800160a:	da00      	bge.n	800160e <float2byte+0x2a>
 800160c:	3303      	adds	r3, #3
 800160e:	109b      	asrs	r3, r3, #2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	6839      	ldr	r1, [r7, #0]
 8001614:	440b      	add	r3, r1
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 2*frameSize; i = i + 4){
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	3304      	adds	r3, #4
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	429a      	cmp	r2, r3
 800162a:	dbe9      	blt.n	8001600 <float2byte+0x1c>
	}
	processed = 1;
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <float2byte+0x74>)
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
	received = 1;
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <float2byte+0x78>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
	// memcpy(&processedBuffer[0], &receiveBuffer[0], 4);
	HAL_Delay(500);
 8001638:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800163c:	f000 fa7e 	bl	8001b3c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001646:	4803      	ldr	r0, [pc, #12]	; (8001654 <float2byte+0x70>)
 8001648:	f000 ffc2 	bl	80025d0 <HAL_GPIO_WritePin>
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	58020400 	.word	0x58020400
 8001658:	20000205 	.word	0x20000205
 800165c:	20000204 	.word	0x20000204

08001660 <HAL_UART_TxCpltCallback>:
	}
	received = 0;
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart3)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <HAL_UART_TxCpltCallback+0x1c>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	2000023a 	.word	0x2000023a

08001680 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart3){
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <HAL_UART_RxCpltCallback+0x1c>)
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	2000023a 	.word	0x2000023a

080016a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_MspInit+0x30>)
 80016b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016bc:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <HAL_MspInit+0x30>)
 80016be:	f043 0302 	orr.w	r3, r3, #2
 80016c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_MspInit+0x30>)
 80016c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	58024400 	.word	0x58024400

080016e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <HardFault_Handler+0x4>

080016f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <MemManage_Handler+0x4>

080016fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <BusFault_Handler+0x4>

08001704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <UsageFault_Handler+0x4>

0800170a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001738:	f000 f9e0 	bl	8001afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}

08001740 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <USART3_IRQHandler+0x10>)
 8001746:	f003 ff4d 	bl	80055e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20006294 	.word	0x20006294

08001754 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <_sbrk+0x50>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <_sbrk+0x16>
		heap_end = &end;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <_sbrk+0x50>)
 8001766:	4a10      	ldr	r2, [pc, #64]	; (80017a8 <_sbrk+0x54>)
 8001768:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <_sbrk+0x50>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <_sbrk+0x50>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	466a      	mov	r2, sp
 800177a:	4293      	cmp	r3, r2
 800177c:	d907      	bls.n	800178e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800177e:	f005 fbb3 	bl	8006ee8 <__errno>
 8001782:	4602      	mov	r2, r0
 8001784:	230c      	movs	r3, #12
 8001786:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001788:	f04f 33ff 	mov.w	r3, #4294967295
 800178c:	e006      	b.n	800179c <_sbrk+0x48>
	}

	heap_end += incr;
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <_sbrk+0x50>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	4a03      	ldr	r2, [pc, #12]	; (80017a4 <_sbrk+0x50>)
 8001798:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2000023c 	.word	0x2000023c
 80017a8:	20006328 	.word	0x20006328

080017ac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b2:	f107 0310 	add.w	r3, r7, #16
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <MX_TIM2_Init+0x98>)
 80017cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <MX_TIM2_Init+0x98>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d8:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <MX_TIM2_Init+0x98>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <MX_TIM2_Init+0x98>)
 80017e0:	f04f 32ff 	mov.w	r2, #4294967295
 80017e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <MX_TIM2_Init+0x98>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <MX_TIM2_Init+0x98>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017f2:	4814      	ldr	r0, [pc, #80]	; (8001844 <MX_TIM2_Init+0x98>)
 80017f4:	f003 fa22 	bl	8004c3c <HAL_TIM_Base_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017fe:	f7ff ff4f 	bl	80016a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001806:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	4619      	mov	r1, r3
 800180e:	480d      	ldr	r0, [pc, #52]	; (8001844 <MX_TIM2_Init+0x98>)
 8001810:	f003 fa9a 	bl	8004d48 <HAL_TIM_ConfigClockSource>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800181a:	f7ff ff41 	bl	80016a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	4619      	mov	r1, r3
 800182a:	4806      	ldr	r0, [pc, #24]	; (8001844 <MX_TIM2_Init+0x98>)
 800182c:	f003 fc94 	bl	8005158 <HAL_TIMEx_MasterConfigSynchronization>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001836:	f7ff ff33 	bl	80016a0 <Error_Handler>
  }

}
 800183a:	bf00      	nop
 800183c:	3720      	adds	r7, #32
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20006248 	.word	0x20006248

08001848 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001858:	d10e      	bne.n	8001878 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_TIM_Base_MspInit+0x3c>)
 800185c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001860:	4a08      	ldr	r2, [pc, #32]	; (8001884 <HAL_TIM_Base_MspInit+0x3c>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_TIM_Base_MspInit+0x3c>)
 800186c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	58024400 	.word	0x58024400

08001888 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800188c:	4b22      	ldr	r3, [pc, #136]	; (8001918 <MX_USART3_UART_Init+0x90>)
 800188e:	4a23      	ldr	r2, [pc, #140]	; (800191c <MX_USART3_UART_Init+0x94>)
 8001890:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001892:	4b21      	ldr	r3, [pc, #132]	; (8001918 <MX_USART3_UART_Init+0x90>)
 8001894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001898:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800189a:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <MX_USART3_UART_Init+0x90>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <MX_USART3_UART_Init+0x90>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <MX_USART3_UART_Init+0x90>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <MX_USART3_UART_Init+0x90>)
 80018ae:	220c      	movs	r2, #12
 80018b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <MX_USART3_UART_Init+0x90>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <MX_USART3_UART_Init+0x90>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <MX_USART3_UART_Init+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <MX_USART3_UART_Init+0x90>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <MX_USART3_UART_Init+0x90>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018d0:	4811      	ldr	r0, [pc, #68]	; (8001918 <MX_USART3_UART_Init+0x90>)
 80018d2:	f003 fcc9 	bl	8005268 <HAL_UART_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80018dc:	f7ff fee0 	bl	80016a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018e0:	2100      	movs	r1, #0
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <MX_USART3_UART_Init+0x90>)
 80018e4:	f005 f97f 	bl	8006be6 <HAL_UARTEx_SetTxFifoThreshold>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80018ee:	f7ff fed7 	bl	80016a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f2:	2100      	movs	r1, #0
 80018f4:	4808      	ldr	r0, [pc, #32]	; (8001918 <MX_USART3_UART_Init+0x90>)
 80018f6:	f005 f9b4 	bl	8006c62 <HAL_UARTEx_SetRxFifoThreshold>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001900:	f7ff fece 	bl	80016a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <MX_USART3_UART_Init+0x90>)
 8001906:	f005 f935 	bl	8006b74 <HAL_UARTEx_DisableFifoMode>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001910:	f7ff fec6 	bl	80016a0 <Error_Handler>
  }

}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20006294 	.word	0x20006294
 800191c:	40004800 	.word	0x40004800

08001920 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a1e      	ldr	r2, [pc, #120]	; (80019b8 <HAL_UART_MspInit+0x98>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d136      	bne.n	80019b0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001942:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <HAL_UART_MspInit+0x9c>)
 8001944:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001948:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <HAL_UART_MspInit+0x9c>)
 800194a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800194e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001952:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <HAL_UART_MspInit+0x9c>)
 8001954:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001960:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_UART_MspInit+0x9c>)
 8001962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001966:	4a15      	ldr	r2, [pc, #84]	; (80019bc <HAL_UART_MspInit+0x9c>)
 8001968:	f043 0308 	orr.w	r3, r3, #8
 800196c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_UART_MspInit+0x9c>)
 8001972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800197e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001990:	2307      	movs	r3, #7
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4619      	mov	r1, r3
 800199a:	4809      	ldr	r0, [pc, #36]	; (80019c0 <HAL_UART_MspInit+0xa0>)
 800199c:	f000 fc50 	bl	8002240 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2100      	movs	r1, #0
 80019a4:	2027      	movs	r0, #39	; 0x27
 80019a6:	f000 f9d2 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019aa:	2027      	movs	r0, #39	; 0x27
 80019ac:	f000 f9e9 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80019b0:	bf00      	nop
 80019b2:	3728      	adds	r7, #40	; 0x28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40004800 	.word	0x40004800
 80019bc:	58024400 	.word	0x58024400
 80019c0:	58020c00 	.word	0x58020c00

080019c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019ca:	e003      	b.n	80019d4 <LoopCopyDataInit>

080019cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019d2:	3104      	adds	r1, #4

080019d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019d4:	480b      	ldr	r0, [pc, #44]	; (8001a04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019dc:	d3f6      	bcc.n	80019cc <CopyDataInit>
  ldr  r2, =_sbss
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019e0:	e002      	b.n	80019e8 <LoopFillZerobss>

080019e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019e4:	f842 3b04 	str.w	r3, [r2], #4

080019e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019ec:	d3f9      	bcc.n	80019e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019ee:	f7fe fe4f 	bl	8000690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019f2:	f005 fa7f 	bl	8006ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019f6:	f7ff fa0d 	bl	8000e14 <main>
  bx  lr    
 80019fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a00:	080096e0 	.word	0x080096e0
  ldr  r0, =_sdata
 8001a04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a08:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8001a0c:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8001a10:	20006328 	.word	0x20006328

08001a14 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a14:	e7fe      	b.n	8001a14 <ADC3_IRQHandler>
	...

08001a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1e:	2003      	movs	r0, #3
 8001a20:	f000 f98a 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a24:	f001 fc3c 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8001a28:	4601      	mov	r1, r0
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_Init+0x68>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	0a1b      	lsrs	r3, r3, #8
 8001a30:	f003 030f 	and.w	r3, r3, #15
 8001a34:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <HAL_Init+0x6c>)
 8001a36:	5cd3      	ldrb	r3, [r2, r3]
 8001a38:	f003 031f 	and.w	r3, r3, #31
 8001a3c:	fa21 f303 	lsr.w	r3, r1, r3
 8001a40:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a42:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <HAL_Init+0x68>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <HAL_Init+0x6c>)
 8001a4c:	5cd3      	ldrb	r3, [r2, r3]
 8001a4e:	f003 031f 	and.w	r3, r3, #31
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
 8001a58:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <HAL_Init+0x70>)
 8001a5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a5c:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <HAL_Init+0x74>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a62:	2000      	movs	r0, #0
 8001a64:	f000 f814 	bl	8001a90 <HAL_InitTick>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e002      	b.n	8001a78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a72:	f7ff fe1d 	bl	80016b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	58024400 	.word	0x58024400
 8001a84:	080093f4 	.word	0x080093f4
 8001a88:	20000004 	.word	0x20000004
 8001a8c:	20000000 	.word	0x20000000

08001a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a98:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <HAL_InitTick+0x60>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e021      	b.n	8001ae8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <HAL_InitTick+0x64>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_InitTick+0x60>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 f96f 	bl	8001d9e <HAL_SYSTICK_Config>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00e      	b.n	8001ae8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b0f      	cmp	r3, #15
 8001ace:	d80a      	bhi.n	8001ae6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f000 f939 	bl	8001d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001adc:	4a06      	ldr	r2, [pc, #24]	; (8001af8 <HAL_InitTick+0x68>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e000      	b.n	8001ae8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000010 	.word	0x20000010
 8001af4:	20000000 	.word	0x20000000
 8001af8:	2000000c 	.word	0x2000000c

08001afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_IncTick+0x20>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_IncTick+0x24>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <HAL_IncTick+0x24>)
 8001b0e:	6013      	str	r3, [r2, #0]
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000010 	.word	0x20000010
 8001b20:	20006320 	.word	0x20006320

08001b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_GetTick+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20006320 	.word	0x20006320

08001b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b44:	f7ff ffee 	bl	8001b24 <HAL_GetTick>
 8001b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b54:	d005      	beq.n	8001b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_Delay+0x40>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b62:	bf00      	nop
 8001b64:	f7ff ffde 	bl	8001b24 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d8f7      	bhi.n	8001b64 <HAL_Delay+0x28>
  {
  }
}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000010 	.word	0x20000010

08001b80 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <HAL_GetREVID+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	0c1b      	lsrs	r3, r3, #16
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	5c001000 	.word	0x5c001000

08001b98 <__NVIC_SetPriorityGrouping>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00
 8001bdc:	05fa0000 	.word	0x05fa0000

08001be0 <__NVIC_GetPriorityGrouping>:
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_EnableIRQ>:
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db0b      	blt.n	8001c26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	4907      	ldr	r1, [pc, #28]	; (8001c34 <__NVIC_EnableIRQ+0x38>)
 8001c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000e100 	.word	0xe000e100

08001c38 <__NVIC_SetPriority>:
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	db0a      	blt.n	8001c62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	490c      	ldr	r1, [pc, #48]	; (8001c84 <__NVIC_SetPriority+0x4c>)
 8001c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c56:	0112      	lsls	r2, r2, #4
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c60:	e00a      	b.n	8001c78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4908      	ldr	r1, [pc, #32]	; (8001c88 <__NVIC_SetPriority+0x50>)
 8001c68:	88fb      	ldrh	r3, [r7, #6]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	3b04      	subs	r3, #4
 8001c70:	0112      	lsls	r2, r2, #4
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	440b      	add	r3, r1
 8001c76:	761a      	strb	r2, [r3, #24]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000e100 	.word	0xe000e100
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <NVIC_EncodePriority>:
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f1c3 0307 	rsb	r3, r3, #7
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	bf28      	it	cs
 8001caa:	2304      	movcs	r3, #4
 8001cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d902      	bls.n	8001cbc <NVIC_EncodePriority+0x30>
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3b03      	subs	r3, #3
 8001cba:	e000      	b.n	8001cbe <NVIC_EncodePriority+0x32>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	401a      	ands	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43d9      	mvns	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	4313      	orrs	r3, r2
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3724      	adds	r7, #36	; 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f7ff ff8e 	bl	8001c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff29 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d5c:	f7ff ff40 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001d60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	6978      	ldr	r0, [r7, #20]
 8001d68:	f7ff ff90 	bl	8001c8c <NVIC_EncodePriority>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff5f 	bl	8001c38 <__NVIC_SetPriority>
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff33 	bl	8001bfc <__NVIC_EnableIRQ>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ffa4 	bl	8001cf4 <SysTick_Config>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e205      	b.n	80021d6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d004      	beq.n	8001de0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2280      	movs	r2, #128	; 0x80
 8001dda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e1fa      	b.n	80021d6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a8c      	ldr	r2, [pc, #560]	; (8002018 <HAL_DMA_Abort_IT+0x260>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d04a      	beq.n	8001e80 <HAL_DMA_Abort_IT+0xc8>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a8b      	ldr	r2, [pc, #556]	; (800201c <HAL_DMA_Abort_IT+0x264>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d045      	beq.n	8001e80 <HAL_DMA_Abort_IT+0xc8>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a89      	ldr	r2, [pc, #548]	; (8002020 <HAL_DMA_Abort_IT+0x268>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d040      	beq.n	8001e80 <HAL_DMA_Abort_IT+0xc8>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a88      	ldr	r2, [pc, #544]	; (8002024 <HAL_DMA_Abort_IT+0x26c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d03b      	beq.n	8001e80 <HAL_DMA_Abort_IT+0xc8>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a86      	ldr	r2, [pc, #536]	; (8002028 <HAL_DMA_Abort_IT+0x270>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d036      	beq.n	8001e80 <HAL_DMA_Abort_IT+0xc8>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a85      	ldr	r2, [pc, #532]	; (800202c <HAL_DMA_Abort_IT+0x274>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d031      	beq.n	8001e80 <HAL_DMA_Abort_IT+0xc8>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a83      	ldr	r2, [pc, #524]	; (8002030 <HAL_DMA_Abort_IT+0x278>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d02c      	beq.n	8001e80 <HAL_DMA_Abort_IT+0xc8>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a82      	ldr	r2, [pc, #520]	; (8002034 <HAL_DMA_Abort_IT+0x27c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d027      	beq.n	8001e80 <HAL_DMA_Abort_IT+0xc8>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a80      	ldr	r2, [pc, #512]	; (8002038 <HAL_DMA_Abort_IT+0x280>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d022      	beq.n	8001e80 <HAL_DMA_Abort_IT+0xc8>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a7f      	ldr	r2, [pc, #508]	; (800203c <HAL_DMA_Abort_IT+0x284>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d01d      	beq.n	8001e80 <HAL_DMA_Abort_IT+0xc8>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a7d      	ldr	r2, [pc, #500]	; (8002040 <HAL_DMA_Abort_IT+0x288>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d018      	beq.n	8001e80 <HAL_DMA_Abort_IT+0xc8>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a7c      	ldr	r2, [pc, #496]	; (8002044 <HAL_DMA_Abort_IT+0x28c>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d013      	beq.n	8001e80 <HAL_DMA_Abort_IT+0xc8>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a7a      	ldr	r2, [pc, #488]	; (8002048 <HAL_DMA_Abort_IT+0x290>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00e      	beq.n	8001e80 <HAL_DMA_Abort_IT+0xc8>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a79      	ldr	r2, [pc, #484]	; (800204c <HAL_DMA_Abort_IT+0x294>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d009      	beq.n	8001e80 <HAL_DMA_Abort_IT+0xc8>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a77      	ldr	r2, [pc, #476]	; (8002050 <HAL_DMA_Abort_IT+0x298>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d004      	beq.n	8001e80 <HAL_DMA_Abort_IT+0xc8>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a76      	ldr	r2, [pc, #472]	; (8002054 <HAL_DMA_Abort_IT+0x29c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d101      	bne.n	8001e84 <HAL_DMA_Abort_IT+0xcc>
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <HAL_DMA_Abort_IT+0xce>
 8001e84:	2300      	movs	r3, #0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d065      	beq.n	8001f56 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a60      	ldr	r2, [pc, #384]	; (8002018 <HAL_DMA_Abort_IT+0x260>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d04a      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x17a>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a5e      	ldr	r2, [pc, #376]	; (800201c <HAL_DMA_Abort_IT+0x264>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d045      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x17a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a5d      	ldr	r2, [pc, #372]	; (8002020 <HAL_DMA_Abort_IT+0x268>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d040      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x17a>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a5b      	ldr	r2, [pc, #364]	; (8002024 <HAL_DMA_Abort_IT+0x26c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d03b      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x17a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a5a      	ldr	r2, [pc, #360]	; (8002028 <HAL_DMA_Abort_IT+0x270>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d036      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x17a>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a58      	ldr	r2, [pc, #352]	; (800202c <HAL_DMA_Abort_IT+0x274>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d031      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x17a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a57      	ldr	r2, [pc, #348]	; (8002030 <HAL_DMA_Abort_IT+0x278>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d02c      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x17a>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a55      	ldr	r2, [pc, #340]	; (8002034 <HAL_DMA_Abort_IT+0x27c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d027      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x17a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a54      	ldr	r2, [pc, #336]	; (8002038 <HAL_DMA_Abort_IT+0x280>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d022      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x17a>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a52      	ldr	r2, [pc, #328]	; (800203c <HAL_DMA_Abort_IT+0x284>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d01d      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x17a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a51      	ldr	r2, [pc, #324]	; (8002040 <HAL_DMA_Abort_IT+0x288>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d018      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x17a>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a4f      	ldr	r2, [pc, #316]	; (8002044 <HAL_DMA_Abort_IT+0x28c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d013      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x17a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a4e      	ldr	r2, [pc, #312]	; (8002048 <HAL_DMA_Abort_IT+0x290>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d00e      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x17a>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a4c      	ldr	r2, [pc, #304]	; (800204c <HAL_DMA_Abort_IT+0x294>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d009      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x17a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a4b      	ldr	r2, [pc, #300]	; (8002050 <HAL_DMA_Abort_IT+0x298>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d004      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x17a>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a49      	ldr	r2, [pc, #292]	; (8002054 <HAL_DMA_Abort_IT+0x29c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d108      	bne.n	8001f44 <HAL_DMA_Abort_IT+0x18c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0201 	bic.w	r2, r2, #1
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	e147      	b.n	80021d4 <HAL_DMA_Abort_IT+0x41c>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0201 	bic.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	e13e      	b.n	80021d4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 020e 	bic.w	r2, r2, #14
 8001f64:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a2b      	ldr	r2, [pc, #172]	; (8002018 <HAL_DMA_Abort_IT+0x260>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d04a      	beq.n	8002006 <HAL_DMA_Abort_IT+0x24e>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a29      	ldr	r2, [pc, #164]	; (800201c <HAL_DMA_Abort_IT+0x264>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d045      	beq.n	8002006 <HAL_DMA_Abort_IT+0x24e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a28      	ldr	r2, [pc, #160]	; (8002020 <HAL_DMA_Abort_IT+0x268>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d040      	beq.n	8002006 <HAL_DMA_Abort_IT+0x24e>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a26      	ldr	r2, [pc, #152]	; (8002024 <HAL_DMA_Abort_IT+0x26c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d03b      	beq.n	8002006 <HAL_DMA_Abort_IT+0x24e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a25      	ldr	r2, [pc, #148]	; (8002028 <HAL_DMA_Abort_IT+0x270>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d036      	beq.n	8002006 <HAL_DMA_Abort_IT+0x24e>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a23      	ldr	r2, [pc, #140]	; (800202c <HAL_DMA_Abort_IT+0x274>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d031      	beq.n	8002006 <HAL_DMA_Abort_IT+0x24e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a22      	ldr	r2, [pc, #136]	; (8002030 <HAL_DMA_Abort_IT+0x278>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d02c      	beq.n	8002006 <HAL_DMA_Abort_IT+0x24e>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a20      	ldr	r2, [pc, #128]	; (8002034 <HAL_DMA_Abort_IT+0x27c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d027      	beq.n	8002006 <HAL_DMA_Abort_IT+0x24e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a1f      	ldr	r2, [pc, #124]	; (8002038 <HAL_DMA_Abort_IT+0x280>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d022      	beq.n	8002006 <HAL_DMA_Abort_IT+0x24e>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a1d      	ldr	r2, [pc, #116]	; (800203c <HAL_DMA_Abort_IT+0x284>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d01d      	beq.n	8002006 <HAL_DMA_Abort_IT+0x24e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <HAL_DMA_Abort_IT+0x288>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d018      	beq.n	8002006 <HAL_DMA_Abort_IT+0x24e>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a1a      	ldr	r2, [pc, #104]	; (8002044 <HAL_DMA_Abort_IT+0x28c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <HAL_DMA_Abort_IT+0x24e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a19      	ldr	r2, [pc, #100]	; (8002048 <HAL_DMA_Abort_IT+0x290>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d00e      	beq.n	8002006 <HAL_DMA_Abort_IT+0x24e>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a17      	ldr	r2, [pc, #92]	; (800204c <HAL_DMA_Abort_IT+0x294>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d009      	beq.n	8002006 <HAL_DMA_Abort_IT+0x24e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a16      	ldr	r2, [pc, #88]	; (8002050 <HAL_DMA_Abort_IT+0x298>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d004      	beq.n	8002006 <HAL_DMA_Abort_IT+0x24e>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a14      	ldr	r2, [pc, #80]	; (8002054 <HAL_DMA_Abort_IT+0x29c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d128      	bne.n	8002058 <HAL_DMA_Abort_IT+0x2a0>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0201 	bic.w	r2, r2, #1
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	e027      	b.n	8002068 <HAL_DMA_Abort_IT+0x2b0>
 8002018:	40020010 	.word	0x40020010
 800201c:	40020028 	.word	0x40020028
 8002020:	40020040 	.word	0x40020040
 8002024:	40020058 	.word	0x40020058
 8002028:	40020070 	.word	0x40020070
 800202c:	40020088 	.word	0x40020088
 8002030:	400200a0 	.word	0x400200a0
 8002034:	400200b8 	.word	0x400200b8
 8002038:	40020410 	.word	0x40020410
 800203c:	40020428 	.word	0x40020428
 8002040:	40020440 	.word	0x40020440
 8002044:	40020458 	.word	0x40020458
 8002048:	40020470 	.word	0x40020470
 800204c:	40020488 	.word	0x40020488
 8002050:	400204a0 	.word	0x400204a0
 8002054:	400204b8 	.word	0x400204b8
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a5c      	ldr	r2, [pc, #368]	; (80021e0 <HAL_DMA_Abort_IT+0x428>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d072      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a5b      	ldr	r2, [pc, #364]	; (80021e4 <HAL_DMA_Abort_IT+0x42c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d06d      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a59      	ldr	r2, [pc, #356]	; (80021e8 <HAL_DMA_Abort_IT+0x430>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d068      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a58      	ldr	r2, [pc, #352]	; (80021ec <HAL_DMA_Abort_IT+0x434>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d063      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a56      	ldr	r2, [pc, #344]	; (80021f0 <HAL_DMA_Abort_IT+0x438>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d05e      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a55      	ldr	r2, [pc, #340]	; (80021f4 <HAL_DMA_Abort_IT+0x43c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d059      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a53      	ldr	r2, [pc, #332]	; (80021f8 <HAL_DMA_Abort_IT+0x440>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d054      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a52      	ldr	r2, [pc, #328]	; (80021fc <HAL_DMA_Abort_IT+0x444>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d04f      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a50      	ldr	r2, [pc, #320]	; (8002200 <HAL_DMA_Abort_IT+0x448>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d04a      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a4f      	ldr	r2, [pc, #316]	; (8002204 <HAL_DMA_Abort_IT+0x44c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d045      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a4d      	ldr	r2, [pc, #308]	; (8002208 <HAL_DMA_Abort_IT+0x450>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d040      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a4c      	ldr	r2, [pc, #304]	; (800220c <HAL_DMA_Abort_IT+0x454>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d03b      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a4a      	ldr	r2, [pc, #296]	; (8002210 <HAL_DMA_Abort_IT+0x458>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d036      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a49      	ldr	r2, [pc, #292]	; (8002214 <HAL_DMA_Abort_IT+0x45c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d031      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a47      	ldr	r2, [pc, #284]	; (8002218 <HAL_DMA_Abort_IT+0x460>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d02c      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a46      	ldr	r2, [pc, #280]	; (800221c <HAL_DMA_Abort_IT+0x464>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d027      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a44      	ldr	r2, [pc, #272]	; (8002220 <HAL_DMA_Abort_IT+0x468>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d022      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a43      	ldr	r2, [pc, #268]	; (8002224 <HAL_DMA_Abort_IT+0x46c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d01d      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a41      	ldr	r2, [pc, #260]	; (8002228 <HAL_DMA_Abort_IT+0x470>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d018      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a40      	ldr	r2, [pc, #256]	; (800222c <HAL_DMA_Abort_IT+0x474>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d013      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a3e      	ldr	r2, [pc, #248]	; (8002230 <HAL_DMA_Abort_IT+0x478>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00e      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a3d      	ldr	r2, [pc, #244]	; (8002234 <HAL_DMA_Abort_IT+0x47c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d009      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a3b      	ldr	r2, [pc, #236]	; (8002238 <HAL_DMA_Abort_IT+0x480>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d004      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3a0>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a3a      	ldr	r2, [pc, #232]	; (800223c <HAL_DMA_Abort_IT+0x484>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_DMA_Abort_IT+0x3a4>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_DMA_Abort_IT+0x3a6>
 800215c:	2300      	movs	r3, #0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d028      	beq.n	80021b4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002170:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	2201      	movs	r2, #1
 8002182:	409a      	lsls	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002190:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00c      	beq.n	80021b4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40020010 	.word	0x40020010
 80021e4:	40020028 	.word	0x40020028
 80021e8:	40020040 	.word	0x40020040
 80021ec:	40020058 	.word	0x40020058
 80021f0:	40020070 	.word	0x40020070
 80021f4:	40020088 	.word	0x40020088
 80021f8:	400200a0 	.word	0x400200a0
 80021fc:	400200b8 	.word	0x400200b8
 8002200:	40020410 	.word	0x40020410
 8002204:	40020428 	.word	0x40020428
 8002208:	40020440 	.word	0x40020440
 800220c:	40020458 	.word	0x40020458
 8002210:	40020470 	.word	0x40020470
 8002214:	40020488 	.word	0x40020488
 8002218:	400204a0 	.word	0x400204a0
 800221c:	400204b8 	.word	0x400204b8
 8002220:	58025408 	.word	0x58025408
 8002224:	5802541c 	.word	0x5802541c
 8002228:	58025430 	.word	0x58025430
 800222c:	58025444 	.word	0x58025444
 8002230:	58025458 	.word	0x58025458
 8002234:	5802546c 	.word	0x5802546c
 8002238:	58025480 	.word	0x58025480
 800223c:	58025494 	.word	0x58025494

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	; 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800224e:	4b89      	ldr	r3, [pc, #548]	; (8002474 <HAL_GPIO_Init+0x234>)
 8002250:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002252:	e194      	b.n	800257e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2101      	movs	r1, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa01 f303 	lsl.w	r3, r1, r3
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 8186 	beq.w	8002578 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d00b      	beq.n	800228c <HAL_GPIO_Init+0x4c>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d007      	beq.n	800228c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002280:	2b11      	cmp	r3, #17
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b12      	cmp	r3, #18
 800228a:	d130      	bne.n	80022ee <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022c2:	2201      	movs	r2, #1
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	091b      	lsrs	r3, r3, #4
 80022d8:	f003 0201 	and.w	r2, r3, #1
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0xee>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b12      	cmp	r3, #18
 800232c:	d123      	bne.n	8002376 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	08da      	lsrs	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3208      	adds	r2, #8
 8002336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	220f      	movs	r2, #15
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	08da      	lsrs	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3208      	adds	r2, #8
 8002370:	69b9      	ldr	r1, [r7, #24]
 8002372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	2203      	movs	r2, #3
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0203 	and.w	r2, r3, #3
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80e0 	beq.w	8002578 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b8:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <HAL_GPIO_Init+0x238>)
 80023ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023be:	4a2e      	ldr	r2, [pc, #184]	; (8002478 <HAL_GPIO_Init+0x238>)
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023c8:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <HAL_GPIO_Init+0x238>)
 80023ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023d6:	4a29      	ldr	r2, [pc, #164]	; (800247c <HAL_GPIO_Init+0x23c>)
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	089b      	lsrs	r3, r3, #2
 80023dc:	3302      	adds	r3, #2
 80023de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	220f      	movs	r2, #15
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a20      	ldr	r2, [pc, #128]	; (8002480 <HAL_GPIO_Init+0x240>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d052      	beq.n	80024a8 <HAL_GPIO_Init+0x268>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <HAL_GPIO_Init+0x244>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d031      	beq.n	800246e <HAL_GPIO_Init+0x22e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a1e      	ldr	r2, [pc, #120]	; (8002488 <HAL_GPIO_Init+0x248>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d02b      	beq.n	800246a <HAL_GPIO_Init+0x22a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a1d      	ldr	r2, [pc, #116]	; (800248c <HAL_GPIO_Init+0x24c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d025      	beq.n	8002466 <HAL_GPIO_Init+0x226>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a1c      	ldr	r2, [pc, #112]	; (8002490 <HAL_GPIO_Init+0x250>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d01f      	beq.n	8002462 <HAL_GPIO_Init+0x222>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a1b      	ldr	r2, [pc, #108]	; (8002494 <HAL_GPIO_Init+0x254>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d019      	beq.n	800245e <HAL_GPIO_Init+0x21e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a1a      	ldr	r2, [pc, #104]	; (8002498 <HAL_GPIO_Init+0x258>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d013      	beq.n	800245a <HAL_GPIO_Init+0x21a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a19      	ldr	r2, [pc, #100]	; (800249c <HAL_GPIO_Init+0x25c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d00d      	beq.n	8002456 <HAL_GPIO_Init+0x216>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a18      	ldr	r2, [pc, #96]	; (80024a0 <HAL_GPIO_Init+0x260>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d007      	beq.n	8002452 <HAL_GPIO_Init+0x212>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a17      	ldr	r2, [pc, #92]	; (80024a4 <HAL_GPIO_Init+0x264>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d101      	bne.n	800244e <HAL_GPIO_Init+0x20e>
 800244a:	2309      	movs	r3, #9
 800244c:	e02d      	b.n	80024aa <HAL_GPIO_Init+0x26a>
 800244e:	230a      	movs	r3, #10
 8002450:	e02b      	b.n	80024aa <HAL_GPIO_Init+0x26a>
 8002452:	2308      	movs	r3, #8
 8002454:	e029      	b.n	80024aa <HAL_GPIO_Init+0x26a>
 8002456:	2307      	movs	r3, #7
 8002458:	e027      	b.n	80024aa <HAL_GPIO_Init+0x26a>
 800245a:	2306      	movs	r3, #6
 800245c:	e025      	b.n	80024aa <HAL_GPIO_Init+0x26a>
 800245e:	2305      	movs	r3, #5
 8002460:	e023      	b.n	80024aa <HAL_GPIO_Init+0x26a>
 8002462:	2304      	movs	r3, #4
 8002464:	e021      	b.n	80024aa <HAL_GPIO_Init+0x26a>
 8002466:	2303      	movs	r3, #3
 8002468:	e01f      	b.n	80024aa <HAL_GPIO_Init+0x26a>
 800246a:	2302      	movs	r3, #2
 800246c:	e01d      	b.n	80024aa <HAL_GPIO_Init+0x26a>
 800246e:	2301      	movs	r3, #1
 8002470:	e01b      	b.n	80024aa <HAL_GPIO_Init+0x26a>
 8002472:	bf00      	nop
 8002474:	58000080 	.word	0x58000080
 8002478:	58024400 	.word	0x58024400
 800247c:	58000400 	.word	0x58000400
 8002480:	58020000 	.word	0x58020000
 8002484:	58020400 	.word	0x58020400
 8002488:	58020800 	.word	0x58020800
 800248c:	58020c00 	.word	0x58020c00
 8002490:	58021000 	.word	0x58021000
 8002494:	58021400 	.word	0x58021400
 8002498:	58021800 	.word	0x58021800
 800249c:	58021c00 	.word	0x58021c00
 80024a0:	58022000 	.word	0x58022000
 80024a4:	58022400 	.word	0x58022400
 80024a8:	2300      	movs	r3, #0
 80024aa:	69fa      	ldr	r2, [r7, #28]
 80024ac:	f002 0203 	and.w	r2, r2, #3
 80024b0:	0092      	lsls	r2, r2, #2
 80024b2:	4093      	lsls	r3, r2
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ba:	4938      	ldr	r1, [pc, #224]	; (800259c <HAL_GPIO_Init+0x35c>)
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	3302      	adds	r3, #2
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800251c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002542:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800254a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002570:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	3301      	adds	r3, #1
 800257c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	f47f ae63 	bne.w	8002254 <HAL_GPIO_Init+0x14>
  }
}
 800258e:	bf00      	nop
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	58000400 	.word	0x58000400

080025a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	887b      	ldrh	r3, [r7, #2]
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
 80025bc:	e001      	b.n	80025c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025be:	2300      	movs	r3, #0
 80025c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	807b      	strh	r3, [r7, #2]
 80025dc:	4613      	mov	r3, r2
 80025de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025e0:	787b      	ldrb	r3, [r7, #1]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025e6:	887a      	ldrh	r2, [r7, #2]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025ec:	e003      	b.n	80025f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025ee:	887b      	ldrh	r3, [r7, #2]
 80025f0:	041a      	lsls	r2, r3, #16
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	619a      	str	r2, [r3, #24]
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800260c:	4a08      	ldr	r2, [pc, #32]	; (8002630 <HAL_HSEM_FastTake+0x2c>)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3320      	adds	r3, #32
 8002612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002616:	4a07      	ldr	r2, [pc, #28]	; (8002634 <HAL_HSEM_FastTake+0x30>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d101      	bne.n	8002620 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	e000      	b.n	8002622 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
}
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	58026400 	.word	0x58026400
 8002634:	80000300 	.word	0x80000300

08002638 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002642:	4906      	ldr	r1, [pc, #24]	; (800265c <HAL_HSEM_Release+0x24>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	58026400 	.word	0x58026400

08002660 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002668:	4b29      	ldr	r3, [pc, #164]	; (8002710 <HAL_PWREx_ConfigSupply+0xb0>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	2b06      	cmp	r3, #6
 8002672:	d00a      	beq.n	800268a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002674:	4b26      	ldr	r3, [pc, #152]	; (8002710 <HAL_PWREx_ConfigSupply+0xb0>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	429a      	cmp	r2, r3
 8002680:	d001      	beq.n	8002686 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e040      	b.n	8002708 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e03e      	b.n	8002708 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800268a:	4b21      	ldr	r3, [pc, #132]	; (8002710 <HAL_PWREx_ConfigSupply+0xb0>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002692:	491f      	ldr	r1, [pc, #124]	; (8002710 <HAL_PWREx_ConfigSupply+0xb0>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4313      	orrs	r3, r2
 8002698:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800269a:	f7ff fa43 	bl	8001b24 <HAL_GetTick>
 800269e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026a0:	e009      	b.n	80026b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80026a2:	f7ff fa3f 	bl	8001b24 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026b0:	d901      	bls.n	80026b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e028      	b.n	8002708 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026b6:	4b16      	ldr	r3, [pc, #88]	; (8002710 <HAL_PWREx_ConfigSupply+0xb0>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026c2:	d1ee      	bne.n	80026a2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b1e      	cmp	r3, #30
 80026c8:	d008      	beq.n	80026dc <HAL_PWREx_ConfigSupply+0x7c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b2e      	cmp	r3, #46	; 0x2e
 80026ce:	d005      	beq.n	80026dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b1d      	cmp	r3, #29
 80026d4:	d002      	beq.n	80026dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b2d      	cmp	r3, #45	; 0x2d
 80026da:	d114      	bne.n	8002706 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80026dc:	f7ff fa22 	bl	8001b24 <HAL_GetTick>
 80026e0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80026e2:	e009      	b.n	80026f8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80026e4:	f7ff fa1e 	bl	8001b24 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026f2:	d901      	bls.n	80026f8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e007      	b.n	8002708 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_PWREx_ConfigSupply+0xb0>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002704:	d1ee      	bne.n	80026e4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	58024800 	.word	0x58024800

08002714 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08c      	sub	sp, #48	; 0x30
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e3ff      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 8087 	beq.w	8002842 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002734:	4b99      	ldr	r3, [pc, #612]	; (800299c <HAL_RCC_OscConfig+0x288>)
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800273e:	4b97      	ldr	r3, [pc, #604]	; (800299c <HAL_RCC_OscConfig+0x288>)
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002746:	2b10      	cmp	r3, #16
 8002748:	d007      	beq.n	800275a <HAL_RCC_OscConfig+0x46>
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	2b18      	cmp	r3, #24
 800274e:	d110      	bne.n	8002772 <HAL_RCC_OscConfig+0x5e>
 8002750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d10b      	bne.n	8002772 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275a:	4b90      	ldr	r3, [pc, #576]	; (800299c <HAL_RCC_OscConfig+0x288>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d06c      	beq.n	8002840 <HAL_RCC_OscConfig+0x12c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d168      	bne.n	8002840 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e3d9      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277a:	d106      	bne.n	800278a <HAL_RCC_OscConfig+0x76>
 800277c:	4b87      	ldr	r3, [pc, #540]	; (800299c <HAL_RCC_OscConfig+0x288>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a86      	ldr	r2, [pc, #536]	; (800299c <HAL_RCC_OscConfig+0x288>)
 8002782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	e02e      	b.n	80027e8 <HAL_RCC_OscConfig+0xd4>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0x98>
 8002792:	4b82      	ldr	r3, [pc, #520]	; (800299c <HAL_RCC_OscConfig+0x288>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a81      	ldr	r2, [pc, #516]	; (800299c <HAL_RCC_OscConfig+0x288>)
 8002798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b7f      	ldr	r3, [pc, #508]	; (800299c <HAL_RCC_OscConfig+0x288>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a7e      	ldr	r2, [pc, #504]	; (800299c <HAL_RCC_OscConfig+0x288>)
 80027a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	e01d      	b.n	80027e8 <HAL_RCC_OscConfig+0xd4>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCC_OscConfig+0xbc>
 80027b6:	4b79      	ldr	r3, [pc, #484]	; (800299c <HAL_RCC_OscConfig+0x288>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a78      	ldr	r2, [pc, #480]	; (800299c <HAL_RCC_OscConfig+0x288>)
 80027bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	4b76      	ldr	r3, [pc, #472]	; (800299c <HAL_RCC_OscConfig+0x288>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a75      	ldr	r2, [pc, #468]	; (800299c <HAL_RCC_OscConfig+0x288>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	e00b      	b.n	80027e8 <HAL_RCC_OscConfig+0xd4>
 80027d0:	4b72      	ldr	r3, [pc, #456]	; (800299c <HAL_RCC_OscConfig+0x288>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a71      	ldr	r2, [pc, #452]	; (800299c <HAL_RCC_OscConfig+0x288>)
 80027d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	4b6f      	ldr	r3, [pc, #444]	; (800299c <HAL_RCC_OscConfig+0x288>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a6e      	ldr	r2, [pc, #440]	; (800299c <HAL_RCC_OscConfig+0x288>)
 80027e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d013      	beq.n	8002818 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f0:	f7ff f998 	bl	8001b24 <HAL_GetTick>
 80027f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f8:	f7ff f994 	bl	8001b24 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	; 0x64
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e38d      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800280a:	4b64      	ldr	r3, [pc, #400]	; (800299c <HAL_RCC_OscConfig+0x288>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0xe4>
 8002816:	e014      	b.n	8002842 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7ff f984 	bl	8001b24 <HAL_GetTick>
 800281c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002820:	f7ff f980 	bl	8001b24 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b64      	cmp	r3, #100	; 0x64
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e379      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002832:	4b5a      	ldr	r3, [pc, #360]	; (800299c <HAL_RCC_OscConfig+0x288>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x10c>
 800283e:	e000      	b.n	8002842 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80ae 	beq.w	80029ac <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002850:	4b52      	ldr	r3, [pc, #328]	; (800299c <HAL_RCC_OscConfig+0x288>)
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002858:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800285a:	4b50      	ldr	r3, [pc, #320]	; (800299c <HAL_RCC_OscConfig+0x288>)
 800285c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d007      	beq.n	8002876 <HAL_RCC_OscConfig+0x162>
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	2b18      	cmp	r3, #24
 800286a:	d13a      	bne.n	80028e2 <HAL_RCC_OscConfig+0x1ce>
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d135      	bne.n	80028e2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002876:	4b49      	ldr	r3, [pc, #292]	; (800299c <HAL_RCC_OscConfig+0x288>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_RCC_OscConfig+0x17a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e34b      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288e:	f7ff f977 	bl	8001b80 <HAL_GetREVID>
 8002892:	4602      	mov	r2, r0
 8002894:	f241 0303 	movw	r3, #4099	; 0x1003
 8002898:	429a      	cmp	r2, r3
 800289a:	d817      	bhi.n	80028cc <HAL_RCC_OscConfig+0x1b8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	2b40      	cmp	r3, #64	; 0x40
 80028a2:	d108      	bne.n	80028b6 <HAL_RCC_OscConfig+0x1a2>
 80028a4:	4b3d      	ldr	r3, [pc, #244]	; (800299c <HAL_RCC_OscConfig+0x288>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80028ac:	4a3b      	ldr	r2, [pc, #236]	; (800299c <HAL_RCC_OscConfig+0x288>)
 80028ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028b4:	e07a      	b.n	80029ac <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b6:	4b39      	ldr	r3, [pc, #228]	; (800299c <HAL_RCC_OscConfig+0x288>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	031b      	lsls	r3, r3, #12
 80028c4:	4935      	ldr	r1, [pc, #212]	; (800299c <HAL_RCC_OscConfig+0x288>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ca:	e06f      	b.n	80029ac <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	4b33      	ldr	r3, [pc, #204]	; (800299c <HAL_RCC_OscConfig+0x288>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	4930      	ldr	r1, [pc, #192]	; (800299c <HAL_RCC_OscConfig+0x288>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028e0:	e064      	b.n	80029ac <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d045      	beq.n	8002976 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028ea:	4b2c      	ldr	r3, [pc, #176]	; (800299c <HAL_RCC_OscConfig+0x288>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 0219 	bic.w	r2, r3, #25
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	4929      	ldr	r1, [pc, #164]	; (800299c <HAL_RCC_OscConfig+0x288>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fc:	f7ff f912 	bl	8001b24 <HAL_GetTick>
 8002900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002904:	f7ff f90e 	bl	8001b24 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e307      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002916:	4b21      	ldr	r3, [pc, #132]	; (800299c <HAL_RCC_OscConfig+0x288>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002922:	f7ff f92d 	bl	8001b80 <HAL_GetREVID>
 8002926:	4602      	mov	r2, r0
 8002928:	f241 0303 	movw	r3, #4099	; 0x1003
 800292c:	429a      	cmp	r2, r3
 800292e:	d817      	bhi.n	8002960 <HAL_RCC_OscConfig+0x24c>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b40      	cmp	r3, #64	; 0x40
 8002936:	d108      	bne.n	800294a <HAL_RCC_OscConfig+0x236>
 8002938:	4b18      	ldr	r3, [pc, #96]	; (800299c <HAL_RCC_OscConfig+0x288>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002940:	4a16      	ldr	r2, [pc, #88]	; (800299c <HAL_RCC_OscConfig+0x288>)
 8002942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002946:	6053      	str	r3, [r2, #4]
 8002948:	e030      	b.n	80029ac <HAL_RCC_OscConfig+0x298>
 800294a:	4b14      	ldr	r3, [pc, #80]	; (800299c <HAL_RCC_OscConfig+0x288>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	031b      	lsls	r3, r3, #12
 8002958:	4910      	ldr	r1, [pc, #64]	; (800299c <HAL_RCC_OscConfig+0x288>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
 800295e:	e025      	b.n	80029ac <HAL_RCC_OscConfig+0x298>
 8002960:	4b0e      	ldr	r3, [pc, #56]	; (800299c <HAL_RCC_OscConfig+0x288>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	061b      	lsls	r3, r3, #24
 800296e:	490b      	ldr	r1, [pc, #44]	; (800299c <HAL_RCC_OscConfig+0x288>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]
 8002974:	e01a      	b.n	80029ac <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_RCC_OscConfig+0x288>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a08      	ldr	r2, [pc, #32]	; (800299c <HAL_RCC_OscConfig+0x288>)
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7ff f8cf 	bl	8001b24 <HAL_GetTick>
 8002986:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800298a:	f7ff f8cb 	bl	8001b24 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d903      	bls.n	80029a0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e2c4      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
 800299c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029a0:	4ba4      	ldr	r3, [pc, #656]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1ee      	bne.n	800298a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80a9 	beq.w	8002b0c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ba:	4b9e      	ldr	r3, [pc, #632]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029c4:	4b9b      	ldr	r3, [pc, #620]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 80029c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d007      	beq.n	80029e0 <HAL_RCC_OscConfig+0x2cc>
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	2b18      	cmp	r3, #24
 80029d4:	d13a      	bne.n	8002a4c <HAL_RCC_OscConfig+0x338>
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d135      	bne.n	8002a4c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029e0:	4b94      	ldr	r3, [pc, #592]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_OscConfig+0x2e4>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	2b80      	cmp	r3, #128	; 0x80
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e296      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029f8:	f7ff f8c2 	bl	8001b80 <HAL_GetREVID>
 80029fc:	4602      	mov	r2, r0
 80029fe:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d817      	bhi.n	8002a36 <HAL_RCC_OscConfig+0x322>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d108      	bne.n	8002a20 <HAL_RCC_OscConfig+0x30c>
 8002a0e:	4b89      	ldr	r3, [pc, #548]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a16:	4a87      	ldr	r2, [pc, #540]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002a18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a1c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a1e:	e075      	b.n	8002b0c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a20:	4b84      	ldr	r3, [pc, #528]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	069b      	lsls	r3, r3, #26
 8002a2e:	4981      	ldr	r1, [pc, #516]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a34:	e06a      	b.n	8002b0c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a36:	4b7f      	ldr	r3, [pc, #508]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	061b      	lsls	r3, r3, #24
 8002a44:	497b      	ldr	r1, [pc, #492]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a4a:	e05f      	b.n	8002b0c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d042      	beq.n	8002ada <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a54:	4b77      	ldr	r3, [pc, #476]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a76      	ldr	r2, [pc, #472]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7ff f860 	bl	8001b24 <HAL_GetTick>
 8002a64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a68:	f7ff f85c 	bl	8001b24 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e255      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a7a:	4b6e      	ldr	r3, [pc, #440]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a86:	f7ff f87b 	bl	8001b80 <HAL_GetREVID>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d817      	bhi.n	8002ac4 <HAL_RCC_OscConfig+0x3b0>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d108      	bne.n	8002aae <HAL_RCC_OscConfig+0x39a>
 8002a9c:	4b65      	ldr	r3, [pc, #404]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002aa4:	4a63      	ldr	r2, [pc, #396]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002aa6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002aaa:	6053      	str	r3, [r2, #4]
 8002aac:	e02e      	b.n	8002b0c <HAL_RCC_OscConfig+0x3f8>
 8002aae:	4b61      	ldr	r3, [pc, #388]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	069b      	lsls	r3, r3, #26
 8002abc:	495d      	ldr	r1, [pc, #372]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
 8002ac2:	e023      	b.n	8002b0c <HAL_RCC_OscConfig+0x3f8>
 8002ac4:	4b5b      	ldr	r3, [pc, #364]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	061b      	lsls	r3, r3, #24
 8002ad2:	4958      	ldr	r1, [pc, #352]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60cb      	str	r3, [r1, #12]
 8002ad8:	e018      	b.n	8002b0c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002ada:	4b56      	ldr	r3, [pc, #344]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a55      	ldr	r2, [pc, #340]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002ae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7ff f81d 	bl	8001b24 <HAL_GetTick>
 8002aea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002aee:	f7ff f819 	bl	8001b24 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e212      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b00:	4b4c      	ldr	r3, [pc, #304]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1f0      	bne.n	8002aee <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d036      	beq.n	8002b86 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d019      	beq.n	8002b54 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b20:	4b44      	ldr	r3, [pc, #272]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b24:	4a43      	ldr	r2, [pc, #268]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7fe fffa 	bl	8001b24 <HAL_GetTick>
 8002b30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b34:	f7fe fff6 	bl	8001b24 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e1ef      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b46:	4b3b      	ldr	r3, [pc, #236]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x420>
 8002b52:	e018      	b.n	8002b86 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b54:	4b37      	ldr	r3, [pc, #220]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b58:	4a36      	ldr	r2, [pc, #216]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b60:	f7fe ffe0 	bl	8001b24 <HAL_GetTick>
 8002b64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b68:	f7fe ffdc 	bl	8001b24 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e1d5      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b7a:	4b2e      	ldr	r3, [pc, #184]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d036      	beq.n	8002c00 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d019      	beq.n	8002bce <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b9a:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a25      	ldr	r2, [pc, #148]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002ba0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ba4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ba6:	f7fe ffbd 	bl	8001b24 <HAL_GetTick>
 8002baa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002bae:	f7fe ffb9 	bl	8001b24 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e1b2      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bc0:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x49a>
 8002bcc:	e018      	b.n	8002c00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bce:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a18      	ldr	r2, [pc, #96]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bda:	f7fe ffa3 	bl	8001b24 <HAL_GetTick>
 8002bde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002be2:	f7fe ff9f 	bl	8001b24 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e198      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <HAL_RCC_OscConfig+0x520>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f0      	bne.n	8002be2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8085 	beq.w	8002d18 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <HAL_RCC_OscConfig+0x524>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a09      	ldr	r2, [pc, #36]	; (8002c38 <HAL_RCC_OscConfig+0x524>)
 8002c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c1a:	f7fe ff83 	bl	8001b24 <HAL_GetTick>
 8002c1e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c20:	e00c      	b.n	8002c3c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c22:	f7fe ff7f 	bl	8001b24 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b64      	cmp	r3, #100	; 0x64
 8002c2e:	d905      	bls.n	8002c3c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e178      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
 8002c34:	58024400 	.word	0x58024400
 8002c38:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c3c:	4b96      	ldr	r3, [pc, #600]	; (8002e98 <HAL_RCC_OscConfig+0x784>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0ec      	beq.n	8002c22 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d106      	bne.n	8002c5e <HAL_RCC_OscConfig+0x54a>
 8002c50:	4b92      	ldr	r3, [pc, #584]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	4a91      	ldr	r2, [pc, #580]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5c:	e02d      	b.n	8002cba <HAL_RCC_OscConfig+0x5a6>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x56c>
 8002c66:	4b8d      	ldr	r3, [pc, #564]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	4a8c      	ldr	r2, [pc, #560]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002c6c:	f023 0301 	bic.w	r3, r3, #1
 8002c70:	6713      	str	r3, [r2, #112]	; 0x70
 8002c72:	4b8a      	ldr	r3, [pc, #552]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c76:	4a89      	ldr	r2, [pc, #548]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002c78:	f023 0304 	bic.w	r3, r3, #4
 8002c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7e:	e01c      	b.n	8002cba <HAL_RCC_OscConfig+0x5a6>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b05      	cmp	r3, #5
 8002c86:	d10c      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x58e>
 8002c88:	4b84      	ldr	r3, [pc, #528]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8c:	4a83      	ldr	r2, [pc, #524]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002c8e:	f043 0304 	orr.w	r3, r3, #4
 8002c92:	6713      	str	r3, [r2, #112]	; 0x70
 8002c94:	4b81      	ldr	r3, [pc, #516]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	4a80      	ldr	r2, [pc, #512]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca0:	e00b      	b.n	8002cba <HAL_RCC_OscConfig+0x5a6>
 8002ca2:	4b7e      	ldr	r3, [pc, #504]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	4a7d      	ldr	r2, [pc, #500]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	6713      	str	r3, [r2, #112]	; 0x70
 8002cae:	4b7b      	ldr	r3, [pc, #492]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb2:	4a7a      	ldr	r2, [pc, #488]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002cb4:	f023 0304 	bic.w	r3, r3, #4
 8002cb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d015      	beq.n	8002cee <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc2:	f7fe ff2f 	bl	8001b24 <HAL_GetTick>
 8002cc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cc8:	e00a      	b.n	8002ce0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cca:	f7fe ff2b 	bl	8001b24 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e122      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ce0:	4b6e      	ldr	r3, [pc, #440]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0ee      	beq.n	8002cca <HAL_RCC_OscConfig+0x5b6>
 8002cec:	e014      	b.n	8002d18 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cee:	f7fe ff19 	bl	8001b24 <HAL_GetTick>
 8002cf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cf4:	e00a      	b.n	8002d0c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf6:	f7fe ff15 	bl	8001b24 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e10c      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d0c:	4b63      	ldr	r3, [pc, #396]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1ee      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 8101 	beq.w	8002f24 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d22:	4b5e      	ldr	r3, [pc, #376]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d2a:	2b18      	cmp	r3, #24
 8002d2c:	f000 80bc 	beq.w	8002ea8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	f040 8095 	bne.w	8002e64 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3a:	4b58      	ldr	r3, [pc, #352]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a57      	ldr	r2, [pc, #348]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002d40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d46:	f7fe feed 	bl	8001b24 <HAL_GetTick>
 8002d4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4e:	f7fe fee9 	bl	8001b24 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e0e2      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d60:	4b4e      	ldr	r3, [pc, #312]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f0      	bne.n	8002d4e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d6c:	4b4b      	ldr	r3, [pc, #300]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002d6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d70:	4b4b      	ldr	r3, [pc, #300]	; (8002ea0 <HAL_RCC_OscConfig+0x78c>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d7c:	0112      	lsls	r2, r2, #4
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	4946      	ldr	r1, [pc, #280]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	628b      	str	r3, [r1, #40]	; 0x28
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d94:	3b01      	subs	r3, #1
 8002d96:	025b      	lsls	r3, r3, #9
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	3b01      	subs	r3, #1
 8002da2:	041b      	lsls	r3, r3, #16
 8002da4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	3b01      	subs	r3, #1
 8002db0:	061b      	lsls	r3, r3, #24
 8002db2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002db6:	4939      	ldr	r1, [pc, #228]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002dbc:	4b37      	ldr	r3, [pc, #220]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc0:	4a36      	ldr	r2, [pc, #216]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002dc8:	4b34      	ldr	r3, [pc, #208]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dcc:	4b35      	ldr	r3, [pc, #212]	; (8002ea4 <HAL_RCC_OscConfig+0x790>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002dd4:	00d2      	lsls	r2, r2, #3
 8002dd6:	4931      	ldr	r1, [pc, #196]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ddc:	4b2f      	ldr	r3, [pc, #188]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	f023 020c 	bic.w	r2, r3, #12
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	492c      	ldr	r1, [pc, #176]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002dee:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	f023 0202 	bic.w	r2, r3, #2
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	4928      	ldr	r1, [pc, #160]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e00:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	4a25      	ldr	r2, [pc, #148]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e0c:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	4a22      	ldr	r2, [pc, #136]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e18:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	4a1f      	ldr	r2, [pc, #124]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002e1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002e24:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	4a1c      	ldr	r2, [pc, #112]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e30:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a19      	ldr	r2, [pc, #100]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fe72 	bl	8001b24 <HAL_GetTick>
 8002e40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fe fe6e 	bl	8001b24 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e067      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e56:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x730>
 8002e62:	e05f      	b.n	8002f24 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e64:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a0c      	ldr	r2, [pc, #48]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fe fe58 	bl	8001b24 <HAL_GetTick>
 8002e74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e78:	f7fe fe54 	bl	8001b24 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e04d      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e8a:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <HAL_RCC_OscConfig+0x788>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x764>
 8002e96:	e045      	b.n	8002f24 <HAL_RCC_OscConfig+0x810>
 8002e98:	58024800 	.word	0x58024800
 8002e9c:	58024400 	.word	0x58024400
 8002ea0:	fffffc0c 	.word	0xfffffc0c
 8002ea4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ea8:	4b21      	ldr	r3, [pc, #132]	; (8002f30 <HAL_RCC_OscConfig+0x81c>)
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002eae:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <HAL_RCC_OscConfig+0x81c>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d031      	beq.n	8002f20 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f003 0203 	and.w	r2, r3, #3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d12a      	bne.n	8002f20 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d122      	bne.n	8002f20 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d11a      	bne.n	8002f20 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	0a5b      	lsrs	r3, r3, #9
 8002eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d111      	bne.n	8002f20 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	0c1b      	lsrs	r3, r3, #16
 8002f00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d108      	bne.n	8002f20 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	0e1b      	lsrs	r3, r3, #24
 8002f12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3730      	adds	r7, #48	; 0x30
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	58024400 	.word	0x58024400

08002f34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e19c      	b.n	8003282 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f48:	4b8a      	ldr	r3, [pc, #552]	; (8003174 <HAL_RCC_ClockConfig+0x240>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d910      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b87      	ldr	r3, [pc, #540]	; (8003174 <HAL_RCC_ClockConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 020f 	bic.w	r2, r3, #15
 8002f5e:	4985      	ldr	r1, [pc, #532]	; (8003174 <HAL_RCC_ClockConfig+0x240>)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b83      	ldr	r3, [pc, #524]	; (8003174 <HAL_RCC_ClockConfig+0x240>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e184      	b.n	8003282 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d010      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	4b7b      	ldr	r3, [pc, #492]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d908      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f94:	4b78      	ldr	r3, [pc, #480]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	4975      	ldr	r1, [pc, #468]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d010      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	4b70      	ldr	r3, [pc, #448]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d908      	bls.n	8002fd4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fc2:	4b6d      	ldr	r3, [pc, #436]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	496a      	ldr	r1, [pc, #424]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d010      	beq.n	8003002 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699a      	ldr	r2, [r3, #24]
 8002fe4:	4b64      	ldr	r3, [pc, #400]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d908      	bls.n	8003002 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ff0:	4b61      	ldr	r3, [pc, #388]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	495e      	ldr	r1, [pc, #376]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0320 	and.w	r3, r3, #32
 800300a:	2b00      	cmp	r3, #0
 800300c:	d010      	beq.n	8003030 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69da      	ldr	r2, [r3, #28]
 8003012:	4b59      	ldr	r3, [pc, #356]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800301a:	429a      	cmp	r2, r3
 800301c:	d908      	bls.n	8003030 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800301e:	4b56      	ldr	r3, [pc, #344]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	4953      	ldr	r1, [pc, #332]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 800302c:	4313      	orrs	r3, r2
 800302e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d010      	beq.n	800305e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	4b4d      	ldr	r3, [pc, #308]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	429a      	cmp	r2, r3
 800304a:	d908      	bls.n	800305e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800304c:	4b4a      	ldr	r3, [pc, #296]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f023 020f 	bic.w	r2, r3, #15
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4947      	ldr	r1, [pc, #284]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 800305a:	4313      	orrs	r3, r2
 800305c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d055      	beq.n	8003116 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800306a:	4b43      	ldr	r3, [pc, #268]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	4940      	ldr	r1, [pc, #256]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8003078:	4313      	orrs	r3, r2
 800307a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d107      	bne.n	8003094 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003084:	4b3c      	ldr	r3, [pc, #240]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d121      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0f6      	b.n	8003282 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d107      	bne.n	80030ac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800309c:	4b36      	ldr	r3, [pc, #216]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d115      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0ea      	b.n	8003282 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030b4:	4b30      	ldr	r3, [pc, #192]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d109      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0de      	b.n	8003282 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030c4:	4b2c      	ldr	r3, [pc, #176]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0d6      	b.n	8003282 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030d4:	4b28      	ldr	r3, [pc, #160]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f023 0207 	bic.w	r2, r3, #7
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4925      	ldr	r1, [pc, #148]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e6:	f7fe fd1d 	bl	8001b24 <HAL_GetTick>
 80030ea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ec:	e00a      	b.n	8003104 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ee:	f7fe fd19 	bl	8001b24 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e0be      	b.n	8003282 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003104:	4b1c      	ldr	r3, [pc, #112]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	429a      	cmp	r2, r3
 8003114:	d1eb      	bne.n	80030ee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d010      	beq.n	8003144 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	4b14      	ldr	r3, [pc, #80]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	429a      	cmp	r2, r3
 8003130:	d208      	bcs.n	8003144 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003132:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f023 020f 	bic.w	r2, r3, #15
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	490e      	ldr	r1, [pc, #56]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8003140:	4313      	orrs	r3, r2
 8003142:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_ClockConfig+0x240>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d214      	bcs.n	800317c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_RCC_ClockConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 020f 	bic.w	r2, r3, #15
 800315a:	4906      	ldr	r1, [pc, #24]	; (8003174 <HAL_RCC_ClockConfig+0x240>)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b04      	ldr	r3, [pc, #16]	; (8003174 <HAL_RCC_ClockConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e086      	b.n	8003282 <HAL_RCC_ClockConfig+0x34e>
 8003174:	52002000 	.word	0x52002000
 8003178:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d010      	beq.n	80031aa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	4b3f      	ldr	r3, [pc, #252]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003194:	429a      	cmp	r2, r3
 8003196:	d208      	bcs.n	80031aa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003198:	4b3c      	ldr	r3, [pc, #240]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	4939      	ldr	r1, [pc, #228]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d010      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	4b34      	ldr	r3, [pc, #208]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d208      	bcs.n	80031d8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031c6:	4b31      	ldr	r3, [pc, #196]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	492e      	ldr	r1, [pc, #184]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d010      	beq.n	8003206 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699a      	ldr	r2, [r3, #24]
 80031e8:	4b28      	ldr	r3, [pc, #160]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d208      	bcs.n	8003206 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	4922      	ldr	r1, [pc, #136]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 8003202:	4313      	orrs	r3, r2
 8003204:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d010      	beq.n	8003234 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	4b1d      	ldr	r3, [pc, #116]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800321e:	429a      	cmp	r2, r3
 8003220:	d208      	bcs.n	8003234 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003222:	4b1a      	ldr	r3, [pc, #104]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	4917      	ldr	r1, [pc, #92]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 8003230:	4313      	orrs	r3, r2
 8003232:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003234:	f000 f834 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8003238:	4601      	mov	r1, r0
 800323a:	4b14      	ldr	r3, [pc, #80]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	4a12      	ldr	r2, [pc, #72]	; (8003290 <HAL_RCC_ClockConfig+0x35c>)
 8003246:	5cd3      	ldrb	r3, [r2, r3]
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	fa21 f303 	lsr.w	r3, r1, r3
 8003250:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003252:	4b0e      	ldr	r3, [pc, #56]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	4a0d      	ldr	r2, [pc, #52]	; (8003290 <HAL_RCC_ClockConfig+0x35c>)
 800325c:	5cd3      	ldrb	r3, [r2, r3]
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	fa22 f303 	lsr.w	r3, r2, r3
 8003268:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <HAL_RCC_ClockConfig+0x360>)
 800326a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800326c:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <HAL_RCC_ClockConfig+0x364>)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <HAL_RCC_ClockConfig+0x368>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe fc0a 	bl	8001a90 <HAL_InitTick>
 800327c:	4603      	mov	r3, r0
 800327e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003280:	7bfb      	ldrb	r3, [r7, #15]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	58024400 	.word	0x58024400
 8003290:	080093f4 	.word	0x080093f4
 8003294:	20000004 	.word	0x20000004
 8003298:	20000000 	.word	0x20000000
 800329c:	2000000c 	.word	0x2000000c

080032a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	; 0x24
 80032a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a6:	4baf      	ldr	r3, [pc, #700]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032ae:	2b18      	cmp	r3, #24
 80032b0:	f200 814e 	bhi.w	8003550 <HAL_RCC_GetSysClockFreq+0x2b0>
 80032b4:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80032b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ba:	bf00      	nop
 80032bc:	08003321 	.word	0x08003321
 80032c0:	08003551 	.word	0x08003551
 80032c4:	08003551 	.word	0x08003551
 80032c8:	08003551 	.word	0x08003551
 80032cc:	08003551 	.word	0x08003551
 80032d0:	08003551 	.word	0x08003551
 80032d4:	08003551 	.word	0x08003551
 80032d8:	08003551 	.word	0x08003551
 80032dc:	08003347 	.word	0x08003347
 80032e0:	08003551 	.word	0x08003551
 80032e4:	08003551 	.word	0x08003551
 80032e8:	08003551 	.word	0x08003551
 80032ec:	08003551 	.word	0x08003551
 80032f0:	08003551 	.word	0x08003551
 80032f4:	08003551 	.word	0x08003551
 80032f8:	08003551 	.word	0x08003551
 80032fc:	0800334d 	.word	0x0800334d
 8003300:	08003551 	.word	0x08003551
 8003304:	08003551 	.word	0x08003551
 8003308:	08003551 	.word	0x08003551
 800330c:	08003551 	.word	0x08003551
 8003310:	08003551 	.word	0x08003551
 8003314:	08003551 	.word	0x08003551
 8003318:	08003551 	.word	0x08003551
 800331c:	08003353 	.word	0x08003353
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003320:	4b90      	ldr	r3, [pc, #576]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d009      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800332c:	4b8d      	ldr	r3, [pc, #564]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	08db      	lsrs	r3, r3, #3
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	4a8c      	ldr	r2, [pc, #560]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003338:	fa22 f303 	lsr.w	r3, r2, r3
 800333c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800333e:	e10a      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003340:	4b89      	ldr	r3, [pc, #548]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003342:	61bb      	str	r3, [r7, #24]
    break;
 8003344:	e107      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003346:	4b89      	ldr	r3, [pc, #548]	; (800356c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003348:	61bb      	str	r3, [r7, #24]
    break;
 800334a:	e104      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800334c:	4b88      	ldr	r3, [pc, #544]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800334e:	61bb      	str	r3, [r7, #24]
    break;
 8003350:	e101      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003352:	4b84      	ldr	r3, [pc, #528]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800335c:	4b81      	ldr	r3, [pc, #516]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003366:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003368:	4b7e      	ldr	r3, [pc, #504]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003372:	4b7c      	ldr	r3, [pc, #496]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003376:	08db      	lsrs	r3, r3, #3
 8003378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	fb02 f303 	mul.w	r3, r2, r3
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80da 	beq.w	800354a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d05a      	beq.n	8003452 <HAL_RCC_GetSysClockFreq+0x1b2>
 800339c:	2b01      	cmp	r3, #1
 800339e:	d302      	bcc.n	80033a6 <HAL_RCC_GetSysClockFreq+0x106>
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d078      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0x1f6>
 80033a4:	e099      	b.n	80034da <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033a6:	4b6f      	ldr	r3, [pc, #444]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0320 	and.w	r3, r3, #32
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d02d      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033b2:	4b6c      	ldr	r3, [pc, #432]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	08db      	lsrs	r3, r3, #3
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	4a6a      	ldr	r2, [pc, #424]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80033be:	fa22 f303 	lsr.w	r3, r2, r3
 80033c2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	ee07 3a90 	vmov	s15, r3
 80033ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	ee07 3a90 	vmov	s15, r3
 80033d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033dc:	4b61      	ldr	r3, [pc, #388]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e4:	ee07 3a90 	vmov	s15, r3
 80033e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80033f0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003574 <HAL_RCC_GetSysClockFreq+0x2d4>
 80033f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003408:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800340c:	e087      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003418:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003578 <HAL_RCC_GetSysClockFreq+0x2d8>
 800341c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003420:	4b50      	ldr	r3, [pc, #320]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003428:	ee07 3a90 	vmov	s15, r3
 800342c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003430:	ed97 6a02 	vldr	s12, [r7, #8]
 8003434:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003574 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003438:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800343c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003440:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800344c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003450:	e065      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	ee07 3a90 	vmov	s15, r3
 8003458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800345c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800357c <HAL_RCC_GetSysClockFreq+0x2dc>
 8003460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003464:	4b3f      	ldr	r3, [pc, #252]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346c:	ee07 3a90 	vmov	s15, r3
 8003470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003474:	ed97 6a02 	vldr	s12, [r7, #8]
 8003478:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003574 <HAL_RCC_GetSysClockFreq+0x2d4>
 800347c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800348c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003490:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003494:	e043      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	ee07 3a90 	vmov	s15, r3
 800349c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003580 <HAL_RCC_GetSysClockFreq+0x2e0>
 80034a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034a8:	4b2e      	ldr	r3, [pc, #184]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80034bc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003574 <HAL_RCC_GetSysClockFreq+0x2d4>
 80034c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034d8:	e021      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	ee07 3a90 	vmov	s15, r3
 80034e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800357c <HAL_RCC_GetSysClockFreq+0x2dc>
 80034e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ec:	4b1d      	ldr	r3, [pc, #116]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f4:	ee07 3a90 	vmov	s15, r3
 80034f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003500:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003574 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003504:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800350c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003518:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800351c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800351e:	4b11      	ldr	r3, [pc, #68]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	0a5b      	lsrs	r3, r3, #9
 8003524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003528:	3301      	adds	r3, #1
 800352a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	ee07 3a90 	vmov	s15, r3
 8003532:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003536:	edd7 6a07 	vldr	s13, [r7, #28]
 800353a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800353e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003542:	ee17 3a90 	vmov	r3, s15
 8003546:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003548:	e005      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]
    break;
 800354e:	e002      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003552:	61bb      	str	r3, [r7, #24]
    break;
 8003554:	bf00      	nop
  }

  return sysclockfreq;
 8003556:	69bb      	ldr	r3, [r7, #24]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3724      	adds	r7, #36	; 0x24
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	58024400 	.word	0x58024400
 8003568:	03d09000 	.word	0x03d09000
 800356c:	003d0900 	.word	0x003d0900
 8003570:	02625a00 	.word	0x02625a00
 8003574:	46000000 	.word	0x46000000
 8003578:	4c742400 	.word	0x4c742400
 800357c:	4a742400 	.word	0x4a742400
 8003580:	4c189680 	.word	0x4c189680

08003584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800358a:	f7ff fe89 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 800358e:	4601      	mov	r1, r0
 8003590:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	0a1b      	lsrs	r3, r3, #8
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	4a0f      	ldr	r2, [pc, #60]	; (80035d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800359c:	5cd3      	ldrb	r3, [r2, r3]
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	fa21 f303 	lsr.w	r3, r1, r3
 80035a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035a8:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	4a09      	ldr	r2, [pc, #36]	; (80035d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80035b2:	5cd3      	ldrb	r3, [r2, r3]
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	fa22 f303 	lsr.w	r3, r2, r3
 80035be:	4a07      	ldr	r2, [pc, #28]	; (80035dc <HAL_RCC_GetHCLKFreq+0x58>)
 80035c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035c2:	4a07      	ldr	r2, [pc, #28]	; (80035e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035c8:	4b04      	ldr	r3, [pc, #16]	; (80035dc <HAL_RCC_GetHCLKFreq+0x58>)
 80035ca:	681b      	ldr	r3, [r3, #0]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	58024400 	.word	0x58024400
 80035d8:	080093f4 	.word	0x080093f4
 80035dc:	20000004 	.word	0x20000004
 80035e0:	20000000 	.word	0x20000000

080035e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80035e8:	f7ff ffcc 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 80035ec:	4601      	mov	r1, r0
 80035ee:	4b06      	ldr	r3, [pc, #24]	; (8003608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	091b      	lsrs	r3, r3, #4
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	4a04      	ldr	r2, [pc, #16]	; (800360c <HAL_RCC_GetPCLK1Freq+0x28>)
 80035fa:	5cd3      	ldrb	r3, [r2, r3]
 80035fc:	f003 031f 	and.w	r3, r3, #31
 8003600:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd80      	pop	{r7, pc}
 8003608:	58024400 	.word	0x58024400
 800360c:	080093f4 	.word	0x080093f4

08003610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003614:	f7ff ffb6 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 8003618:	4601      	mov	r1, r0
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <HAL_RCC_GetPCLK2Freq+0x24>)
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4a04      	ldr	r2, [pc, #16]	; (8003638 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003626:	5cd3      	ldrb	r3, [r2, r3]
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003630:	4618      	mov	r0, r3
 8003632:	bd80      	pop	{r7, pc}
 8003634:	58024400 	.word	0x58024400
 8003638:	080093f4 	.word	0x080093f4

0800363c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003644:	2300      	movs	r3, #0
 8003646:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003648:	2300      	movs	r3, #0
 800364a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d03d      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800365c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003660:	d013      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003666:	d802      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003668:	2b00      	cmp	r3, #0
 800366a:	d007      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800366c:	e01f      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x72>
 800366e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003672:	d013      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003674:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003678:	d01c      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800367a:	e018      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800367c:	4baf      	ldr	r3, [pc, #700]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	4aae      	ldr	r2, [pc, #696]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003686:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003688:	e015      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3304      	adds	r3, #4
 800368e:	2102      	movs	r1, #2
 8003690:	4618      	mov	r0, r3
 8003692:	f001 f96f 	bl	8004974 <RCCEx_PLL2_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800369a:	e00c      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3324      	adds	r3, #36	; 0x24
 80036a0:	2102      	movs	r1, #2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f001 fa18 	bl	8004ad8 <RCCEx_PLL3_Config>
 80036a8:	4603      	mov	r3, r0
 80036aa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036ac:	e003      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	75fb      	strb	r3, [r7, #23]
      break;
 80036b2:	e000      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80036b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d109      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80036bc:	4b9f      	ldr	r3, [pc, #636]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036c8:	499c      	ldr	r1, [pc, #624]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	650b      	str	r3, [r1, #80]	; 0x50
 80036ce:	e001      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d0:	7dfb      	ldrb	r3, [r7, #23]
 80036d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d03d      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d826      	bhi.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80036e8:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80036ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ee:	bf00      	nop
 80036f0:	08003705 	.word	0x08003705
 80036f4:	08003713 	.word	0x08003713
 80036f8:	08003725 	.word	0x08003725
 80036fc:	0800373d 	.word	0x0800373d
 8003700:	0800373d 	.word	0x0800373d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003704:	4b8d      	ldr	r3, [pc, #564]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	4a8c      	ldr	r2, [pc, #560]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800370a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003710:	e015      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3304      	adds	r3, #4
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f001 f92b 	bl	8004974 <RCCEx_PLL2_Config>
 800371e:	4603      	mov	r3, r0
 8003720:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003722:	e00c      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3324      	adds	r3, #36	; 0x24
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f001 f9d4 	bl	8004ad8 <RCCEx_PLL3_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003734:	e003      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	75fb      	strb	r3, [r7, #23]
      break;
 800373a:	e000      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800373c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800373e:	7dfb      	ldrb	r3, [r7, #23]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d109      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003744:	4b7d      	ldr	r3, [pc, #500]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003748:	f023 0207 	bic.w	r2, r3, #7
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003750:	497a      	ldr	r1, [pc, #488]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003752:	4313      	orrs	r3, r2
 8003754:	650b      	str	r3, [r1, #80]	; 0x50
 8003756:	e001      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003764:	2b00      	cmp	r3, #0
 8003766:	d03e      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376c:	2b80      	cmp	r3, #128	; 0x80
 800376e:	d01c      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003770:	2b80      	cmp	r3, #128	; 0x80
 8003772:	d804      	bhi.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d00d      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800377c:	e01e      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x180>
 800377e:	2bc0      	cmp	r3, #192	; 0xc0
 8003780:	d01f      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003786:	d01e      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003788:	e018      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800378a:	4b6c      	ldr	r3, [pc, #432]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	4a6b      	ldr	r2, [pc, #428]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003794:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003796:	e017      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3304      	adds	r3, #4
 800379c:	2100      	movs	r1, #0
 800379e:	4618      	mov	r0, r3
 80037a0:	f001 f8e8 	bl	8004974 <RCCEx_PLL2_Config>
 80037a4:	4603      	mov	r3, r0
 80037a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037a8:	e00e      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3324      	adds	r3, #36	; 0x24
 80037ae:	2100      	movs	r1, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f001 f991 	bl	8004ad8 <RCCEx_PLL3_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037ba:	e005      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	75fb      	strb	r3, [r7, #23]
      break;
 80037c0:	e002      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80037c2:	bf00      	nop
 80037c4:	e000      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80037c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80037ce:	4b5b      	ldr	r3, [pc, #364]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	4958      	ldr	r1, [pc, #352]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	650b      	str	r3, [r1, #80]	; 0x50
 80037e0:	e001      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e2:	7dfb      	ldrb	r3, [r7, #23]
 80037e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d044      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037fc:	d01f      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80037fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003802:	d805      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003808:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800380c:	d00e      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800380e:	e01f      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003810:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003814:	d01f      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003816:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800381a:	d01e      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800381c:	e018      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800381e:	4b47      	ldr	r3, [pc, #284]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	4a46      	ldr	r2, [pc, #280]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003828:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800382a:	e017      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3304      	adds	r3, #4
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f001 f89e 	bl	8004974 <RCCEx_PLL2_Config>
 8003838:	4603      	mov	r3, r0
 800383a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800383c:	e00e      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3324      	adds	r3, #36	; 0x24
 8003842:	2100      	movs	r1, #0
 8003844:	4618      	mov	r0, r3
 8003846:	f001 f947 	bl	8004ad8 <RCCEx_PLL3_Config>
 800384a:	4603      	mov	r3, r0
 800384c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800384e:	e005      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	75fb      	strb	r3, [r7, #23]
      break;
 8003854:	e002      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800385a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800385c:	7dfb      	ldrb	r3, [r7, #23]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10a      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003862:	4b36      	ldr	r3, [pc, #216]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003866:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003870:	4932      	ldr	r1, [pc, #200]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003872:	4313      	orrs	r3, r2
 8003874:	658b      	str	r3, [r1, #88]	; 0x58
 8003876:	e001      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003878:	7dfb      	ldrb	r3, [r7, #23]
 800387a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003884:	2b00      	cmp	r3, #0
 8003886:	d044      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800388e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003892:	d01f      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003894:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003898:	d805      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800389e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038a2:	d00e      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80038a4:	e01f      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80038a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038aa:	d01f      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80038ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038b0:	d01e      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80038b2:	e018      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b4:	4b21      	ldr	r3, [pc, #132]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	4a20      	ldr	r2, [pc, #128]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038c0:	e017      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3304      	adds	r3, #4
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f001 f853 	bl	8004974 <RCCEx_PLL2_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80038d2:	e00e      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3324      	adds	r3, #36	; 0x24
 80038d8:	2100      	movs	r1, #0
 80038da:	4618      	mov	r0, r3
 80038dc:	f001 f8fc 	bl	8004ad8 <RCCEx_PLL3_Config>
 80038e0:	4603      	mov	r3, r0
 80038e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038e4:	e005      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	75fb      	strb	r3, [r7, #23]
      break;
 80038ea:	e002      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80038ec:	bf00      	nop
 80038ee:	e000      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80038f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10a      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038f8:	4b10      	ldr	r3, [pc, #64]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003906:	490d      	ldr	r1, [pc, #52]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003908:	4313      	orrs	r3, r2
 800390a:	658b      	str	r3, [r1, #88]	; 0x58
 800390c:	e001      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390e:	7dfb      	ldrb	r3, [r7, #23]
 8003910:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d035      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003922:	2b10      	cmp	r3, #16
 8003924:	d00c      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003926:	2b10      	cmp	r3, #16
 8003928:	d802      	bhi.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800392a:	2b00      	cmp	r3, #0
 800392c:	d01b      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800392e:	e017      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003930:	2b20      	cmp	r3, #32
 8003932:	d00c      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003934:	2b30      	cmp	r3, #48	; 0x30
 8003936:	d018      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003938:	e012      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800393a:	bf00      	nop
 800393c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003940:	4baf      	ldr	r3, [pc, #700]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	4aae      	ldr	r2, [pc, #696]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800394a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800394c:	e00e      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3304      	adds	r3, #4
 8003952:	2102      	movs	r1, #2
 8003954:	4618      	mov	r0, r3
 8003956:	f001 f80d 	bl	8004974 <RCCEx_PLL2_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800395e:	e005      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	75fb      	strb	r3, [r7, #23]
      break;
 8003964:	e002      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003966:	bf00      	nop
 8003968:	e000      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800396a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800396c:	7dfb      	ldrb	r3, [r7, #23]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003972:	4ba3      	ldr	r3, [pc, #652]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003976:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397e:	49a0      	ldr	r1, [pc, #640]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003980:	4313      	orrs	r3, r2
 8003982:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003984:	e001      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003986:	7dfb      	ldrb	r3, [r7, #23]
 8003988:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d042      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399e:	d01f      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80039a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039a4:	d805      	bhi.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80039aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ae:	d00e      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x392>
 80039b0:	e01f      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80039b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039b6:	d01f      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80039b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039bc:	d01e      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80039be:	e018      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c0:	4b8f      	ldr	r3, [pc, #572]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	4a8e      	ldr	r2, [pc, #568]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039cc:	e017      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3304      	adds	r3, #4
 80039d2:	2100      	movs	r1, #0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 ffcd 	bl	8004974 <RCCEx_PLL2_Config>
 80039da:	4603      	mov	r3, r0
 80039dc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039de:	e00e      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3324      	adds	r3, #36	; 0x24
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f001 f876 	bl	8004ad8 <RCCEx_PLL3_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039f0:	e005      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	75fb      	strb	r3, [r7, #23]
      break;
 80039f6:	e002      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80039f8:	bf00      	nop
 80039fa:	e000      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80039fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d109      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a04:	4b7e      	ldr	r3, [pc, #504]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a08:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a10:	497b      	ldr	r1, [pc, #492]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	650b      	str	r3, [r1, #80]	; 0x50
 8003a16:	e001      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a18:	7dfb      	ldrb	r3, [r7, #23]
 8003a1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d042      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a30:	d01b      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003a32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a36:	d805      	bhi.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d022      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a40:	d00a      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003a42:	e01b      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003a44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a48:	d01d      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003a4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a4e:	d01c      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003a50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a54:	d01b      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003a56:	e011      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 ff88 	bl	8004974 <RCCEx_PLL2_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a68:	e012      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3324      	adds	r3, #36	; 0x24
 8003a6e:	2101      	movs	r1, #1
 8003a70:	4618      	mov	r0, r3
 8003a72:	f001 f831 	bl	8004ad8 <RCCEx_PLL3_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a7a:	e009      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a80:	e006      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003a82:	bf00      	nop
 8003a84:	e004      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003a86:	bf00      	nop
 8003a88:	e002      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003a8a:	bf00      	nop
 8003a8c:	e000      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003a8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a96:	4b5a      	ldr	r3, [pc, #360]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a9a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa2:	4957      	ldr	r1, [pc, #348]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	650b      	str	r3, [r1, #80]	; 0x50
 8003aa8:	e001      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aaa:	7dfb      	ldrb	r3, [r7, #23]
 8003aac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d044      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ac4:	d01b      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aca:	d805      	bhi.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d022      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003ad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ad4:	d00a      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003ad6:	e01b      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003adc:	d01d      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ae2:	d01c      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003ae4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ae8:	d01b      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003aea:	e011      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3304      	adds	r3, #4
 8003af0:	2101      	movs	r1, #1
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 ff3e 	bl	8004974 <RCCEx_PLL2_Config>
 8003af8:	4603      	mov	r3, r0
 8003afa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003afc:	e012      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3324      	adds	r3, #36	; 0x24
 8003b02:	2101      	movs	r1, #1
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 ffe7 	bl	8004ad8 <RCCEx_PLL3_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b0e:	e009      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	75fb      	strb	r3, [r7, #23]
      break;
 8003b14:	e006      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003b16:	bf00      	nop
 8003b18:	e004      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e002      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e000      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003b22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10a      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b2a:	4b35      	ldr	r3, [pc, #212]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b38:	4931      	ldr	r1, [pc, #196]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	658b      	str	r3, [r1, #88]	; 0x58
 8003b3e:	e001      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
 8003b42:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d02d      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b58:	d005      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b5e:	d009      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d013      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003b64:	e00f      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b66:	4b26      	ldr	r3, [pc, #152]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	4a25      	ldr	r2, [pc, #148]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b72:	e00c      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3304      	adds	r3, #4
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fefa 	bl	8004974 <RCCEx_PLL2_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b84:	e003      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	75fb      	strb	r3, [r7, #23]
      break;
 8003b8a:	e000      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d109      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b94:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b98:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba0:	4917      	ldr	r1, [pc, #92]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	650b      	str	r3, [r1, #80]	; 0x50
 8003ba6:	e001      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba8:	7dfb      	ldrb	r3, [r7, #23]
 8003baa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d035      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d81b      	bhi.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003bc0:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc6:	bf00      	nop
 8003bc8:	08003c05 	.word	0x08003c05
 8003bcc:	08003bd9 	.word	0x08003bd9
 8003bd0:	08003be7 	.word	0x08003be7
 8003bd4:	08003c05 	.word	0x08003c05
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	4a08      	ldr	r2, [pc, #32]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003be4:	e00f      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3304      	adds	r3, #4
 8003bea:	2102      	movs	r1, #2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fec1 	bl	8004974 <RCCEx_PLL2_Config>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003bf6:	e006      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003bfc:	e003      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003bfe:	bf00      	nop
 8003c00:	58024400 	.word	0x58024400
      break;
 8003c04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c06:	7dfb      	ldrb	r3, [r7, #23]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d109      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c0c:	4bba      	ldr	r3, [pc, #744]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c10:	f023 0203 	bic.w	r2, r3, #3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c18:	49b7      	ldr	r1, [pc, #732]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c1e:	e001      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c20:	7dfb      	ldrb	r3, [r7, #23]
 8003c22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8086 	beq.w	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c32:	4bb2      	ldr	r3, [pc, #712]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4ab1      	ldr	r2, [pc, #708]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c3e:	f7fd ff71 	bl	8001b24 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c44:	e009      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c46:	f7fd ff6d 	bl	8001b24 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b64      	cmp	r3, #100	; 0x64
 8003c52:	d902      	bls.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	75fb      	strb	r3, [r7, #23]
        break;
 8003c58:	e005      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c5a:	4ba8      	ldr	r3, [pc, #672]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0ef      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003c66:	7dfb      	ldrb	r3, [r7, #23]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d166      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c6c:	4ba2      	ldr	r3, [pc, #648]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c76:	4053      	eors	r3, r2
 8003c78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d013      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c80:	4b9d      	ldr	r3, [pc, #628]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c88:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c8a:	4b9b      	ldr	r3, [pc, #620]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	4a9a      	ldr	r2, [pc, #616]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c94:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c96:	4b98      	ldr	r3, [pc, #608]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9a:	4a97      	ldr	r2, [pc, #604]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ca2:	4a95      	ldr	r2, [pc, #596]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb2:	d115      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb4:	f7fd ff36 	bl	8001b24 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cbc:	f7fd ff32 	bl	8001b24 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d902      	bls.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	75fb      	strb	r3, [r7, #23]
            break;
 8003cd2:	e005      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cd4:	4b88      	ldr	r3, [pc, #544]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0ed      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003ce0:	7dfb      	ldrb	r3, [r7, #23]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d126      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cf4:	d10d      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003cf6:	4b80      	ldr	r3, [pc, #512]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d04:	0919      	lsrs	r1, r3, #4
 8003d06:	4b7e      	ldr	r3, [pc, #504]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003d08:	400b      	ands	r3, r1
 8003d0a:	497b      	ldr	r1, [pc, #492]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	610b      	str	r3, [r1, #16]
 8003d10:	e005      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003d12:	4b79      	ldr	r3, [pc, #484]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	4a78      	ldr	r2, [pc, #480]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d1c:	6113      	str	r3, [r2, #16]
 8003d1e:	4b76      	ldr	r3, [pc, #472]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d2c:	4972      	ldr	r1, [pc, #456]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	670b      	str	r3, [r1, #112]	; 0x70
 8003d32:	e004      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
 8003d36:	75bb      	strb	r3, [r7, #22]
 8003d38:	e001      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d07d      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d4e:	2b28      	cmp	r3, #40	; 0x28
 8003d50:	d866      	bhi.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003d52:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d58:	08003e27 	.word	0x08003e27
 8003d5c:	08003e21 	.word	0x08003e21
 8003d60:	08003e21 	.word	0x08003e21
 8003d64:	08003e21 	.word	0x08003e21
 8003d68:	08003e21 	.word	0x08003e21
 8003d6c:	08003e21 	.word	0x08003e21
 8003d70:	08003e21 	.word	0x08003e21
 8003d74:	08003e21 	.word	0x08003e21
 8003d78:	08003dfd 	.word	0x08003dfd
 8003d7c:	08003e21 	.word	0x08003e21
 8003d80:	08003e21 	.word	0x08003e21
 8003d84:	08003e21 	.word	0x08003e21
 8003d88:	08003e21 	.word	0x08003e21
 8003d8c:	08003e21 	.word	0x08003e21
 8003d90:	08003e21 	.word	0x08003e21
 8003d94:	08003e21 	.word	0x08003e21
 8003d98:	08003e0f 	.word	0x08003e0f
 8003d9c:	08003e21 	.word	0x08003e21
 8003da0:	08003e21 	.word	0x08003e21
 8003da4:	08003e21 	.word	0x08003e21
 8003da8:	08003e21 	.word	0x08003e21
 8003dac:	08003e21 	.word	0x08003e21
 8003db0:	08003e21 	.word	0x08003e21
 8003db4:	08003e21 	.word	0x08003e21
 8003db8:	08003e27 	.word	0x08003e27
 8003dbc:	08003e21 	.word	0x08003e21
 8003dc0:	08003e21 	.word	0x08003e21
 8003dc4:	08003e21 	.word	0x08003e21
 8003dc8:	08003e21 	.word	0x08003e21
 8003dcc:	08003e21 	.word	0x08003e21
 8003dd0:	08003e21 	.word	0x08003e21
 8003dd4:	08003e21 	.word	0x08003e21
 8003dd8:	08003e27 	.word	0x08003e27
 8003ddc:	08003e21 	.word	0x08003e21
 8003de0:	08003e21 	.word	0x08003e21
 8003de4:	08003e21 	.word	0x08003e21
 8003de8:	08003e21 	.word	0x08003e21
 8003dec:	08003e21 	.word	0x08003e21
 8003df0:	08003e21 	.word	0x08003e21
 8003df4:	08003e21 	.word	0x08003e21
 8003df8:	08003e27 	.word	0x08003e27
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3304      	adds	r3, #4
 8003e00:	2101      	movs	r1, #1
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fdb6 	bl	8004974 <RCCEx_PLL2_Config>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e0c:	e00c      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3324      	adds	r3, #36	; 0x24
 8003e12:	2101      	movs	r1, #1
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fe5f 	bl	8004ad8 <RCCEx_PLL3_Config>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e1e:	e003      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	75fb      	strb	r3, [r7, #23]
      break;
 8003e24:	e000      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003e26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e28:	7dfb      	ldrb	r3, [r7, #23]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d109      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e2e:	4b32      	ldr	r3, [pc, #200]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e32:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e3a:	492f      	ldr	r1, [pc, #188]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	654b      	str	r3, [r1, #84]	; 0x54
 8003e40:	e001      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e42:	7dfb      	ldrb	r3, [r7, #23]
 8003e44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d037      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e56:	2b05      	cmp	r3, #5
 8003e58:	d820      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003e5a:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e60:	08003ea3 	.word	0x08003ea3
 8003e64:	08003e79 	.word	0x08003e79
 8003e68:	08003e8b 	.word	0x08003e8b
 8003e6c:	08003ea3 	.word	0x08003ea3
 8003e70:	08003ea3 	.word	0x08003ea3
 8003e74:	08003ea3 	.word	0x08003ea3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fd78 	bl	8004974 <RCCEx_PLL2_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e88:	e00c      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3324      	adds	r3, #36	; 0x24
 8003e8e:	2101      	movs	r1, #1
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fe21 	bl	8004ad8 <RCCEx_PLL3_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e9a:	e003      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea0:	e000      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003ea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea4:	7dfb      	ldrb	r3, [r7, #23]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003eaa:	4b13      	ldr	r3, [pc, #76]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eae:	f023 0207 	bic.w	r2, r3, #7
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb6:	4910      	ldr	r1, [pc, #64]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	654b      	str	r3, [r1, #84]	; 0x54
 8003ebc:	e001      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ebe:	7dfb      	ldrb	r3, [r7, #23]
 8003ec0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d040      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed4:	2b05      	cmp	r3, #5
 8003ed6:	d827      	bhi.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8003ed8:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8003eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ede:	bf00      	nop
 8003ee0:	08003f2f 	.word	0x08003f2f
 8003ee4:	08003f05 	.word	0x08003f05
 8003ee8:	08003f17 	.word	0x08003f17
 8003eec:	08003f2f 	.word	0x08003f2f
 8003ef0:	08003f2f 	.word	0x08003f2f
 8003ef4:	08003f2f 	.word	0x08003f2f
 8003ef8:	58024400 	.word	0x58024400
 8003efc:	58024800 	.word	0x58024800
 8003f00:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
 8003f08:	2101      	movs	r1, #1
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fd32 	bl	8004974 <RCCEx_PLL2_Config>
 8003f10:	4603      	mov	r3, r0
 8003f12:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f14:	e00c      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3324      	adds	r3, #36	; 0x24
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fddb 	bl	8004ad8 <RCCEx_PLL3_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f26:	e003      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f2c:	e000      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8003f2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10a      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f36:	4bb2      	ldr	r3, [pc, #712]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3a:	f023 0207 	bic.w	r2, r3, #7
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f44:	49ae      	ldr	r1, [pc, #696]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	658b      	str	r3, [r1, #88]	; 0x58
 8003f4a:	e001      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d044      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f66:	d01b      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f6c:	d805      	bhi.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d022      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f76:	d00a      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003f78:	e01b      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7e:	d01d      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x980>
 8003f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f84:	d01c      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003f86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f8a:	d01b      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003f8c:	e011      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3304      	adds	r3, #4
 8003f92:	2100      	movs	r1, #0
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fced 	bl	8004974 <RCCEx_PLL2_Config>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f9e:	e012      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3324      	adds	r3, #36	; 0x24
 8003fa4:	2102      	movs	r1, #2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fd96 	bl	8004ad8 <RCCEx_PLL3_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003fb0:	e009      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb6:	e006      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003fb8:	bf00      	nop
 8003fba:	e004      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003fbc:	bf00      	nop
 8003fbe:	e002      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003fc0:	bf00      	nop
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fcc:	4b8c      	ldr	r3, [pc, #560]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fda:	4989      	ldr	r1, [pc, #548]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	654b      	str	r3, [r1, #84]	; 0x54
 8003fe0:	e001      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe2:	7dfb      	ldrb	r3, [r7, #23]
 8003fe4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d044      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ffc:	d01b      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8003ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004002:	d805      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004004:	2b00      	cmp	r3, #0
 8004006:	d022      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800400c:	d00a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800400e:	e01b      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004014:	d01d      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004016:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800401a:	d01c      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800401c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004020:	d01b      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004022:	e011      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3304      	adds	r3, #4
 8004028:	2100      	movs	r1, #0
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fca2 	bl	8004974 <RCCEx_PLL2_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004034:	e012      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3324      	adds	r3, #36	; 0x24
 800403a:	2102      	movs	r1, #2
 800403c:	4618      	mov	r0, r3
 800403e:	f000 fd4b 	bl	8004ad8 <RCCEx_PLL3_Config>
 8004042:	4603      	mov	r3, r0
 8004044:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004046:	e009      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	75fb      	strb	r3, [r7, #23]
      break;
 800404c:	e006      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800404e:	bf00      	nop
 8004050:	e004      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004052:	bf00      	nop
 8004054:	e002      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004056:	bf00      	nop
 8004058:	e000      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800405a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800405c:	7dfb      	ldrb	r3, [r7, #23]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004062:	4b67      	ldr	r3, [pc, #412]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004066:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004070:	4963      	ldr	r1, [pc, #396]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004072:	4313      	orrs	r3, r2
 8004074:	658b      	str	r3, [r1, #88]	; 0x58
 8004076:	e001      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004078:	7dfb      	ldrb	r3, [r7, #23]
 800407a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004084:	2b00      	cmp	r3, #0
 8004086:	d044      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800408e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004092:	d01b      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004098:	d805      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d022      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800409e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80040a4:	e01b      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80040a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040aa:	d01d      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80040ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040b0:	d01c      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80040b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040b6:	d01b      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80040b8:	e011      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3304      	adds	r3, #4
 80040be:	2100      	movs	r1, #0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fc57 	bl	8004974 <RCCEx_PLL2_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040ca:	e012      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3324      	adds	r3, #36	; 0x24
 80040d0:	2102      	movs	r1, #2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fd00 	bl	8004ad8 <RCCEx_PLL3_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040dc:	e009      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	75fb      	strb	r3, [r7, #23]
      break;
 80040e2:	e006      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80040e4:	bf00      	nop
 80040e6:	e004      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80040e8:	bf00      	nop
 80040ea:	e002      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80040ec:	bf00      	nop
 80040ee:	e000      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80040f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f2:	7dfb      	ldrb	r3, [r7, #23]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040f8:	4b41      	ldr	r3, [pc, #260]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80040fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004106:	493e      	ldr	r1, [pc, #248]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004108:	4313      	orrs	r3, r2
 800410a:	658b      	str	r3, [r1, #88]	; 0x58
 800410c:	e001      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410e:	7dfb      	ldrb	r3, [r7, #23]
 8004110:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d01a      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004128:	d10a      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	3324      	adds	r3, #36	; 0x24
 800412e:	2102      	movs	r1, #2
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fcd1 	bl	8004ad8 <RCCEx_PLL3_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004140:	4b2f      	ldr	r3, [pc, #188]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800414e:	492c      	ldr	r1, [pc, #176]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004150:	4313      	orrs	r3, r2
 8004152:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b00      	cmp	r3, #0
 800415e:	d01a      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800416a:	d10a      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3324      	adds	r3, #36	; 0x24
 8004170:	2102      	movs	r1, #2
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fcb0 	bl	8004ad8 <RCCEx_PLL3_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004182:	4b1f      	ldr	r3, [pc, #124]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004186:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004190:	491b      	ldr	r1, [pc, #108]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004192:	4313      	orrs	r3, r2
 8004194:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d032      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ac:	d00d      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80041ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041b2:	d016      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d111      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3304      	adds	r3, #4
 80041bc:	2100      	movs	r1, #0
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fbd8 	bl	8004974 <RCCEx_PLL2_Config>
 80041c4:	4603      	mov	r3, r0
 80041c6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041c8:	e00c      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3324      	adds	r3, #36	; 0x24
 80041ce:	2102      	movs	r1, #2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fc81 	bl	8004ad8 <RCCEx_PLL3_Config>
 80041d6:	4603      	mov	r3, r0
 80041d8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041da:	e003      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	75fb      	strb	r3, [r7, #23]
      break;
 80041e0:	e000      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80041e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10c      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041ea:	4b05      	ldr	r3, [pc, #20]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80041ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041f8:	4901      	ldr	r1, [pc, #4]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	658b      	str	r3, [r1, #88]	; 0x58
 80041fe:	e003      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8004200:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004204:	7dfb      	ldrb	r3, [r7, #23]
 8004206:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d02f      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800421a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800421e:	d00c      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004220:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004224:	d015      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8004226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800422a:	d10f      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800422c:	4b79      	ldr	r3, [pc, #484]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	4a78      	ldr	r2, [pc, #480]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004236:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004238:	e00c      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3324      	adds	r3, #36	; 0x24
 800423e:	2101      	movs	r1, #1
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fc49 	bl	8004ad8 <RCCEx_PLL3_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800424a:	e003      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	75fb      	strb	r3, [r7, #23]
      break;
 8004250:	e000      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004254:	7dfb      	ldrb	r3, [r7, #23]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10a      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800425a:	4b6e      	ldr	r3, [pc, #440]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800425c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004268:	496a      	ldr	r1, [pc, #424]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800426a:	4313      	orrs	r3, r2
 800426c:	654b      	str	r3, [r1, #84]	; 0x54
 800426e:	e001      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004270:	7dfb      	ldrb	r3, [r7, #23]
 8004272:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d029      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428c:	d007      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800428e:	e00f      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004290:	4b60      	ldr	r3, [pc, #384]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	4a5f      	ldr	r2, [pc, #380]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800429a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800429c:	e00b      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3304      	adds	r3, #4
 80042a2:	2102      	movs	r1, #2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fb65 	bl	8004974 <RCCEx_PLL2_Config>
 80042aa:	4603      	mov	r3, r0
 80042ac:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042ae:	e002      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	75fb      	strb	r3, [r7, #23]
      break;
 80042b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042bc:	4b55      	ldr	r3, [pc, #340]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80042be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c8:	4952      	ldr	r1, [pc, #328]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042ce:	e001      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
 80042d2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3324      	adds	r3, #36	; 0x24
 80042e4:	2102      	movs	r1, #2
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fbf6 	bl	8004ad8 <RCCEx_PLL3_Config>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d02f      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800430a:	d00c      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800430c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004310:	d802      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004312:	2b00      	cmp	r3, #0
 8004314:	d011      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8004316:	e00d      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8004318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800431c:	d00f      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800431e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004322:	d00e      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004324:	e006      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004326:	4b3b      	ldr	r3, [pc, #236]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	4a3a      	ldr	r2, [pc, #232]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800432c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004330:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004332:	e007      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	75fb      	strb	r3, [r7, #23]
      break;
 8004338:	e004      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800433a:	bf00      	nop
 800433c:	e002      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800433e:	bf00      	nop
 8004340:	e000      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004342:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004344:	7dfb      	ldrb	r3, [r7, #23]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d109      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800434a:	4b32      	ldr	r3, [pc, #200]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004356:	492f      	ldr	r1, [pc, #188]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004358:	4313      	orrs	r3, r2
 800435a:	654b      	str	r3, [r1, #84]	; 0x54
 800435c:	e001      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435e:	7dfb      	ldrb	r3, [r7, #23]
 8004360:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d008      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800436e:	4b29      	ldr	r3, [pc, #164]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004372:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	4926      	ldr	r1, [pc, #152]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800437c:	4313      	orrs	r3, r2
 800437e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d009      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800438c:	4b21      	ldr	r3, [pc, #132]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800439a:	491e      	ldr	r1, [pc, #120]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800439c:	4313      	orrs	r3, r2
 800439e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043ac:	4b19      	ldr	r3, [pc, #100]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043b8:	4916      	ldr	r1, [pc, #88]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00d      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043ca:	4b12      	ldr	r3, [pc, #72]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	4a11      	ldr	r2, [pc, #68]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043d4:	6113      	str	r3, [r2, #16]
 80043d6:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80043e0:	490c      	ldr	r1, [pc, #48]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	da08      	bge.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fa:	4906      	ldr	r1, [pc, #24]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004400:	7dbb      	ldrb	r3, [r7, #22]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	e000      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
}
 800440c:	4618      	mov	r0, r3
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	58024400 	.word	0x58024400

08004418 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800441c:	f7ff f8b2 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 8004420:	4601      	mov	r1, r0
 8004422:	4b06      	ldr	r3, [pc, #24]	; (800443c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	091b      	lsrs	r3, r3, #4
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	4a04      	ldr	r2, [pc, #16]	; (8004440 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800442e:	5cd3      	ldrb	r3, [r2, r3]
 8004430:	f003 031f 	and.w	r3, r3, #31
 8004434:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004438:	4618      	mov	r0, r3
 800443a:	bd80      	pop	{r7, pc}
 800443c:	58024400 	.word	0x58024400
 8004440:	080093f4 	.word	0x080093f4

08004444 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004444:	b480      	push	{r7}
 8004446:	b089      	sub	sp, #36	; 0x24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800444c:	4b9d      	ldr	r3, [pc, #628]	; (80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	f003 0303 	and.w	r3, r3, #3
 8004454:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004456:	4b9b      	ldr	r3, [pc, #620]	; (80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	0b1b      	lsrs	r3, r3, #12
 800445c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004460:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004462:	4b98      	ldr	r3, [pc, #608]	; (80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	091b      	lsrs	r3, r3, #4
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800446e:	4b95      	ldr	r3, [pc, #596]	; (80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004472:	08db      	lsrs	r3, r3, #3
 8004474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	fb02 f303 	mul.w	r3, r2, r3
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004486:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 810a 	beq.w	80046a6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d05a      	beq.n	800454e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004498:	2b01      	cmp	r3, #1
 800449a:	d302      	bcc.n	80044a2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800449c:	2b02      	cmp	r3, #2
 800449e:	d078      	beq.n	8004592 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80044a0:	e099      	b.n	80045d6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044a2:	4b88      	ldr	r3, [pc, #544]	; (80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d02d      	beq.n	800450a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044ae:	4b85      	ldr	r3, [pc, #532]	; (80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	08db      	lsrs	r3, r3, #3
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	4a83      	ldr	r2, [pc, #524]	; (80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80044ba:	fa22 f303 	lsr.w	r3, r2, r3
 80044be:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	ee07 3a90 	vmov	s15, r3
 80044d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d8:	4b7a      	ldr	r3, [pc, #488]	; (80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e0:	ee07 3a90 	vmov	s15, r3
 80044e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ec:	eddf 5a77 	vldr	s11, [pc, #476]	; 80046cc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80044f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004504:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004508:	e087      	b.n	800461a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	ee07 3a90 	vmov	s15, r3
 8004510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004514:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80046d0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800451c:	4b69      	ldr	r3, [pc, #420]	; (80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004524:	ee07 3a90 	vmov	s15, r3
 8004528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004530:	eddf 5a66 	vldr	s11, [pc, #408]	; 80046cc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004534:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800453c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004548:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800454c:	e065      	b.n	800461a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	ee07 3a90 	vmov	s15, r3
 8004554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004558:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80046d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800455c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004560:	4b58      	ldr	r3, [pc, #352]	; (80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004568:	ee07 3a90 	vmov	s15, r3
 800456c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004570:	ed97 6a03 	vldr	s12, [r7, #12]
 8004574:	eddf 5a55 	vldr	s11, [pc, #340]	; 80046cc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800457c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800458c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004590:	e043      	b.n	800461a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	ee07 3a90 	vmov	s15, r3
 8004598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80046d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80045a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045a4:	4b47      	ldr	r3, [pc, #284]	; (80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ac:	ee07 3a90 	vmov	s15, r3
 80045b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80045b8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80046cc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80045bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045d4:	e021      	b.n	800461a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	ee07 3a90 	vmov	s15, r3
 80045dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80046d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80045e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e8:	4b36      	ldr	r3, [pc, #216]	; (80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f0:	ee07 3a90 	vmov	s15, r3
 80045f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80045fc:	eddf 5a33 	vldr	s11, [pc, #204]	; 80046cc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800460c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004614:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004618:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800461a:	4b2a      	ldr	r3, [pc, #168]	; (80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	0a5b      	lsrs	r3, r3, #9
 8004620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004624:	ee07 3a90 	vmov	s15, r3
 8004628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800462c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004630:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004634:	edd7 6a07 	vldr	s13, [r7, #28]
 8004638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800463c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004640:	ee17 2a90 	vmov	r2, s15
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004648:	4b1e      	ldr	r3, [pc, #120]	; (80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	0c1b      	lsrs	r3, r3, #16
 800464e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800465e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004662:	edd7 6a07 	vldr	s13, [r7, #28]
 8004666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800466a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800466e:	ee17 2a90 	vmov	r2, s15
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004676:	4b13      	ldr	r3, [pc, #76]	; (80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	0e1b      	lsrs	r3, r3, #24
 800467c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004680:	ee07 3a90 	vmov	s15, r3
 8004684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004688:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800468c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004690:	edd7 6a07 	vldr	s13, [r7, #28]
 8004694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800469c:	ee17 2a90 	vmov	r2, s15
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80046a4:	e008      	b.n	80046b8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	609a      	str	r2, [r3, #8]
}
 80046b8:	bf00      	nop
 80046ba:	3724      	adds	r7, #36	; 0x24
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	58024400 	.word	0x58024400
 80046c8:	03d09000 	.word	0x03d09000
 80046cc:	46000000 	.word	0x46000000
 80046d0:	4c742400 	.word	0x4c742400
 80046d4:	4a742400 	.word	0x4a742400
 80046d8:	4c189680 	.word	0x4c189680

080046dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80046dc:	b480      	push	{r7}
 80046de:	b089      	sub	sp, #36	; 0x24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046e4:	4b9d      	ldr	r3, [pc, #628]	; (800495c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80046e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e8:	f003 0303 	and.w	r3, r3, #3
 80046ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80046ee:	4b9b      	ldr	r3, [pc, #620]	; (800495c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	0d1b      	lsrs	r3, r3, #20
 80046f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80046fa:	4b98      	ldr	r3, [pc, #608]	; (800495c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80046fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fe:	0a1b      	lsrs	r3, r3, #8
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004706:	4b95      	ldr	r3, [pc, #596]	; (800495c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470a:	08db      	lsrs	r3, r3, #3
 800470c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	fb02 f303 	mul.w	r3, r2, r3
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 810a 	beq.w	800493e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d05a      	beq.n	80047e6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004730:	2b01      	cmp	r3, #1
 8004732:	d302      	bcc.n	800473a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004734:	2b02      	cmp	r3, #2
 8004736:	d078      	beq.n	800482a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004738:	e099      	b.n	800486e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800473a:	4b88      	ldr	r3, [pc, #544]	; (800495c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	2b00      	cmp	r3, #0
 8004744:	d02d      	beq.n	80047a2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004746:	4b85      	ldr	r3, [pc, #532]	; (800495c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	08db      	lsrs	r3, r3, #3
 800474c:	f003 0303 	and.w	r3, r3, #3
 8004750:	4a83      	ldr	r2, [pc, #524]	; (8004960 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004752:	fa22 f303 	lsr.w	r3, r2, r3
 8004756:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	ee07 3a90 	vmov	s15, r3
 8004768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004770:	4b7a      	ldr	r3, [pc, #488]	; (800495c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004778:	ee07 3a90 	vmov	s15, r3
 800477c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004780:	ed97 6a03 	vldr	s12, [r7, #12]
 8004784:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004964 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004788:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800478c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004790:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004794:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80047a0:	e087      	b.n	80048b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	ee07 3a90 	vmov	s15, r3
 80047a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80047b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047b4:	4b69      	ldr	r3, [pc, #420]	; (800495c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047bc:	ee07 3a90 	vmov	s15, r3
 80047c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80047c8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004964 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80047cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047e4:	e065      	b.n	80048b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	ee07 3a90 	vmov	s15, r3
 80047ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800496c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80047f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047f8:	4b58      	ldr	r3, [pc, #352]	; (800495c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004800:	ee07 3a90 	vmov	s15, r3
 8004804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004808:	ed97 6a03 	vldr	s12, [r7, #12]
 800480c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004964 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004810:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004814:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004818:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800481c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004824:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004828:	e043      	b.n	80048b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	ee07 3a90 	vmov	s15, r3
 8004830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004834:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800483c:	4b47      	ldr	r3, [pc, #284]	; (800495c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004844:	ee07 3a90 	vmov	s15, r3
 8004848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800484c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004850:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004964 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004854:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004858:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800485c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004868:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800486c:	e021      	b.n	80048b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	ee07 3a90 	vmov	s15, r3
 8004874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004878:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800496c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800487c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004880:	4b36      	ldr	r3, [pc, #216]	; (800495c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004888:	ee07 3a90 	vmov	s15, r3
 800488c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004890:	ed97 6a03 	vldr	s12, [r7, #12]
 8004894:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004964 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004898:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800489c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048b0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80048b2:	4b2a      	ldr	r3, [pc, #168]	; (800495c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	0a5b      	lsrs	r3, r3, #9
 80048b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048bc:	ee07 3a90 	vmov	s15, r3
 80048c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80048d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048d8:	ee17 2a90 	vmov	r2, s15
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80048e0:	4b1e      	ldr	r3, [pc, #120]	; (800495c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80048fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004906:	ee17 2a90 	vmov	r2, s15
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800490e:	4b13      	ldr	r3, [pc, #76]	; (800495c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	0e1b      	lsrs	r3, r3, #24
 8004914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004918:	ee07 3a90 	vmov	s15, r3
 800491c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004920:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004924:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004928:	edd7 6a07 	vldr	s13, [r7, #28]
 800492c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004934:	ee17 2a90 	vmov	r2, s15
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800493c:	e008      	b.n	8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	609a      	str	r2, [r3, #8]
}
 8004950:	bf00      	nop
 8004952:	3724      	adds	r7, #36	; 0x24
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	58024400 	.word	0x58024400
 8004960:	03d09000 	.word	0x03d09000
 8004964:	46000000 	.word	0x46000000
 8004968:	4c742400 	.word	0x4c742400
 800496c:	4a742400 	.word	0x4a742400
 8004970:	4c189680 	.word	0x4c189680

08004974 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004982:	4b53      	ldr	r3, [pc, #332]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b03      	cmp	r3, #3
 800498c:	d101      	bne.n	8004992 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e099      	b.n	8004ac6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004992:	4b4f      	ldr	r3, [pc, #316]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a4e      	ldr	r2, [pc, #312]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004998:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800499c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800499e:	f7fd f8c1 	bl	8001b24 <HAL_GetTick>
 80049a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049a4:	e008      	b.n	80049b8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80049a6:	f7fd f8bd 	bl	8001b24 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e086      	b.n	8004ac6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049b8:	4b45      	ldr	r3, [pc, #276]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1f0      	bne.n	80049a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80049c4:	4b42      	ldr	r3, [pc, #264]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	031b      	lsls	r3, r3, #12
 80049d2:	493f      	ldr	r1, [pc, #252]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	628b      	str	r3, [r1, #40]	; 0x28
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	3b01      	subs	r3, #1
 80049de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	025b      	lsls	r3, r3, #9
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	041b      	lsls	r3, r3, #16
 80049f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	3b01      	subs	r3, #1
 8004a02:	061b      	lsls	r3, r3, #24
 8004a04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a08:	4931      	ldr	r1, [pc, #196]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a0e:	4b30      	ldr	r3, [pc, #192]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	492d      	ldr	r1, [pc, #180]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a20:	4b2b      	ldr	r3, [pc, #172]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	f023 0220 	bic.w	r2, r3, #32
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	4928      	ldr	r1, [pc, #160]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a32:	4b27      	ldr	r3, [pc, #156]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	4a26      	ldr	r2, [pc, #152]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004a38:	f023 0310 	bic.w	r3, r3, #16
 8004a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a3e:	4b24      	ldr	r3, [pc, #144]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004a40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a42:	4b24      	ldr	r3, [pc, #144]	; (8004ad4 <RCCEx_PLL2_Config+0x160>)
 8004a44:	4013      	ands	r3, r2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	69d2      	ldr	r2, [r2, #28]
 8004a4a:	00d2      	lsls	r2, r2, #3
 8004a4c:	4920      	ldr	r1, [pc, #128]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004a52:	4b1f      	ldr	r3, [pc, #124]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	4a1e      	ldr	r2, [pc, #120]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004a58:	f043 0310 	orr.w	r3, r3, #16
 8004a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d106      	bne.n	8004a72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a64:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a68:	4a19      	ldr	r2, [pc, #100]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004a6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a70:	e00f      	b.n	8004a92 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d106      	bne.n	8004a86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004a78:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	4a14      	ldr	r2, [pc, #80]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a84:	e005      	b.n	8004a92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004a86:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8a:	4a11      	ldr	r2, [pc, #68]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004a8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a92:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a0e      	ldr	r2, [pc, #56]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004a98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a9e:	f7fd f841 	bl	8001b24 <HAL_GetTick>
 8004aa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004aa4:	e008      	b.n	8004ab8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004aa6:	f7fd f83d 	bl	8001b24 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e006      	b.n	8004ac6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <RCCEx_PLL2_Config+0x15c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0f0      	beq.n	8004aa6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	58024400 	.word	0x58024400
 8004ad4:	ffff0007 	.word	0xffff0007

08004ad8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ae6:	4b53      	ldr	r3, [pc, #332]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d101      	bne.n	8004af6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e099      	b.n	8004c2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004af6:	4b4f      	ldr	r3, [pc, #316]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a4e      	ldr	r2, [pc, #312]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b02:	f7fd f80f 	bl	8001b24 <HAL_GetTick>
 8004b06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b08:	e008      	b.n	8004b1c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b0a:	f7fd f80b 	bl	8001b24 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e086      	b.n	8004c2a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b1c:	4b45      	ldr	r3, [pc, #276]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1f0      	bne.n	8004b0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b28:	4b42      	ldr	r3, [pc, #264]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	051b      	lsls	r3, r3, #20
 8004b36:	493f      	ldr	r1, [pc, #252]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	628b      	str	r3, [r1, #40]	; 0x28
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	025b      	lsls	r3, r3, #9
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	431a      	orrs	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	041b      	lsls	r3, r3, #16
 8004b5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	3b01      	subs	r3, #1
 8004b66:	061b      	lsls	r3, r3, #24
 8004b68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b6c:	4931      	ldr	r1, [pc, #196]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b72:	4b30      	ldr	r3, [pc, #192]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	492d      	ldr	r1, [pc, #180]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b84:	4b2b      	ldr	r3, [pc, #172]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	4928      	ldr	r1, [pc, #160]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004b96:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	4a26      	ldr	r2, [pc, #152]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ba2:	4b24      	ldr	r3, [pc, #144]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ba6:	4b24      	ldr	r3, [pc, #144]	; (8004c38 <RCCEx_PLL3_Config+0x160>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	69d2      	ldr	r2, [r2, #28]
 8004bae:	00d2      	lsls	r2, r2, #3
 8004bb0:	4920      	ldr	r1, [pc, #128]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004bb6:	4b1f      	ldr	r3, [pc, #124]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	4a1e      	ldr	r2, [pc, #120]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d106      	bne.n	8004bd6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004bc8:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bcc:	4a19      	ldr	r2, [pc, #100]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004bce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bd4:	e00f      	b.n	8004bf6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d106      	bne.n	8004bea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004bdc:	4b15      	ldr	r3, [pc, #84]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	4a14      	ldr	r2, [pc, #80]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004be2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004be6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004be8:	e005      	b.n	8004bf6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004bea:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	4a11      	ldr	r2, [pc, #68]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004bf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bf4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004bf6:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a0e      	ldr	r2, [pc, #56]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c02:	f7fc ff8f 	bl	8001b24 <HAL_GetTick>
 8004c06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c08:	e008      	b.n	8004c1c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c0a:	f7fc ff8b 	bl	8001b24 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d901      	bls.n	8004c1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e006      	b.n	8004c2a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <RCCEx_PLL3_Config+0x15c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0f0      	beq.n	8004c0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	58024400 	.word	0x58024400
 8004c38:	ffff0007 	.word	0xffff0007

08004c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e049      	b.n	8004ce2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fc fdf0 	bl	8001848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3304      	adds	r3, #4
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f000 f934 	bl	8004ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d001      	beq.n	8004d04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e019      	b.n	8004d38 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <HAL_TIM_Base_Start+0x58>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b06      	cmp	r3, #6
 8004d1c:	d00b      	beq.n	8004d36 <HAL_TIM_Base_Start+0x4a>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d24:	d007      	beq.n	8004d36 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	00010007 	.word	0x00010007

08004d48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_TIM_ConfigClockSource+0x18>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e0b7      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x188>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4b57      	ldr	r3, [pc, #348]	; (8004ed8 <HAL_TIM_ConfigClockSource+0x190>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b70      	cmp	r3, #112	; 0x70
 8004d96:	d02e      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0xae>
 8004d98:	2b70      	cmp	r3, #112	; 0x70
 8004d9a:	d812      	bhi.n	8004dc2 <HAL_TIM_ConfigClockSource+0x7a>
 8004d9c:	2b30      	cmp	r3, #48	; 0x30
 8004d9e:	f000 8084 	beq.w	8004eaa <HAL_TIM_ConfigClockSource+0x162>
 8004da2:	2b30      	cmp	r3, #48	; 0x30
 8004da4:	d806      	bhi.n	8004db4 <HAL_TIM_ConfigClockSource+0x6c>
 8004da6:	2b10      	cmp	r3, #16
 8004da8:	d07f      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x162>
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	d07d      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x162>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d07b      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004db2:	e084      	b.n	8004ebe <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8004db4:	2b50      	cmp	r3, #80	; 0x50
 8004db6:	d048      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0x102>
 8004db8:	2b60      	cmp	r3, #96	; 0x60
 8004dba:	d056      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0x122>
 8004dbc:	2b40      	cmp	r3, #64	; 0x40
 8004dbe:	d064      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0x142>
      break;
 8004dc0:	e07d      	b.n	8004ebe <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8004dc2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004dc6:	d070      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x162>
 8004dc8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004dcc:	d809      	bhi.n	8004de2 <HAL_TIM_ConfigClockSource+0x9a>
 8004dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd2:	d027      	beq.n	8004e24 <HAL_TIM_ConfigClockSource+0xdc>
 8004dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dd8:	d067      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x162>
 8004dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dde:	d06d      	beq.n	8004ebc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004de0:	e06d      	b.n	8004ebe <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8004de2:	4a3e      	ldr	r2, [pc, #248]	; (8004edc <HAL_TIM_ConfigClockSource+0x194>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d060      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x162>
 8004de8:	4a3d      	ldr	r2, [pc, #244]	; (8004ee0 <HAL_TIM_ConfigClockSource+0x198>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d05d      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x162>
 8004dee:	4a3d      	ldr	r2, [pc, #244]	; (8004ee4 <HAL_TIM_ConfigClockSource+0x19c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d05a      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x162>
      break;
 8004df4:	e063      	b.n	8004ebe <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	6899      	ldr	r1, [r3, #8]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f000 f987 	bl	8005118 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	609a      	str	r2, [r3, #8]
      break;
 8004e22:	e04c      	b.n	8004ebe <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6818      	ldr	r0, [r3, #0]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	6899      	ldr	r1, [r3, #8]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f000 f970 	bl	8005118 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e46:	609a      	str	r2, [r3, #8]
      break;
 8004e48:	e039      	b.n	8004ebe <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6818      	ldr	r0, [r3, #0]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	6859      	ldr	r1, [r3, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	461a      	mov	r2, r3
 8004e58:	f000 f8e0 	bl	800501c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2150      	movs	r1, #80	; 0x50
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 f93a 	bl	80050dc <TIM_ITRx_SetConfig>
      break;
 8004e68:	e029      	b.n	8004ebe <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6859      	ldr	r1, [r3, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	461a      	mov	r2, r3
 8004e78:	f000 f8ff 	bl	800507a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2160      	movs	r1, #96	; 0x60
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 f92a 	bl	80050dc <TIM_ITRx_SetConfig>
      break;
 8004e88:	e019      	b.n	8004ebe <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6859      	ldr	r1, [r3, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	461a      	mov	r2, r3
 8004e98:	f000 f8c0 	bl	800501c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2140      	movs	r1, #64	; 0x40
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 f91a 	bl	80050dc <TIM_ITRx_SetConfig>
      break;
 8004ea8:	e009      	b.n	8004ebe <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	f000 f911 	bl	80050dc <TIM_ITRx_SetConfig>
      break;
 8004eba:	e000      	b.n	8004ebe <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004ebc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	ffceff88 	.word	0xffceff88
 8004edc:	00100030 	.word	0x00100030
 8004ee0:	00100040 	.word	0x00100040
 8004ee4:	00100020 	.word	0x00100020

08004ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a40      	ldr	r2, [pc, #256]	; (8004ffc <TIM_Base_SetConfig+0x114>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d013      	beq.n	8004f28 <TIM_Base_SetConfig+0x40>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f06:	d00f      	beq.n	8004f28 <TIM_Base_SetConfig+0x40>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a3d      	ldr	r2, [pc, #244]	; (8005000 <TIM_Base_SetConfig+0x118>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00b      	beq.n	8004f28 <TIM_Base_SetConfig+0x40>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a3c      	ldr	r2, [pc, #240]	; (8005004 <TIM_Base_SetConfig+0x11c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d007      	beq.n	8004f28 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a3b      	ldr	r2, [pc, #236]	; (8005008 <TIM_Base_SetConfig+0x120>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d003      	beq.n	8004f28 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a3a      	ldr	r2, [pc, #232]	; (800500c <TIM_Base_SetConfig+0x124>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d108      	bne.n	8004f3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a2f      	ldr	r2, [pc, #188]	; (8004ffc <TIM_Base_SetConfig+0x114>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d01f      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f48:	d01b      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a2c      	ldr	r2, [pc, #176]	; (8005000 <TIM_Base_SetConfig+0x118>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d017      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a2b      	ldr	r2, [pc, #172]	; (8005004 <TIM_Base_SetConfig+0x11c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a2a      	ldr	r2, [pc, #168]	; (8005008 <TIM_Base_SetConfig+0x120>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00f      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a29      	ldr	r2, [pc, #164]	; (800500c <TIM_Base_SetConfig+0x124>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00b      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a28      	ldr	r2, [pc, #160]	; (8005010 <TIM_Base_SetConfig+0x128>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d007      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a27      	ldr	r2, [pc, #156]	; (8005014 <TIM_Base_SetConfig+0x12c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d003      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a26      	ldr	r2, [pc, #152]	; (8005018 <TIM_Base_SetConfig+0x130>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d108      	bne.n	8004f94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a10      	ldr	r2, [pc, #64]	; (8004ffc <TIM_Base_SetConfig+0x114>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00f      	beq.n	8004fe0 <TIM_Base_SetConfig+0xf8>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a12      	ldr	r2, [pc, #72]	; (800500c <TIM_Base_SetConfig+0x124>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00b      	beq.n	8004fe0 <TIM_Base_SetConfig+0xf8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a11      	ldr	r2, [pc, #68]	; (8005010 <TIM_Base_SetConfig+0x128>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d007      	beq.n	8004fe0 <TIM_Base_SetConfig+0xf8>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a10      	ldr	r2, [pc, #64]	; (8005014 <TIM_Base_SetConfig+0x12c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d003      	beq.n	8004fe0 <TIM_Base_SetConfig+0xf8>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a0f      	ldr	r2, [pc, #60]	; (8005018 <TIM_Base_SetConfig+0x130>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d103      	bne.n	8004fe8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	615a      	str	r2, [r3, #20]
}
 8004fee:	bf00      	nop
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40010000 	.word	0x40010000
 8005000:	40000400 	.word	0x40000400
 8005004:	40000800 	.word	0x40000800
 8005008:	40000c00 	.word	0x40000c00
 800500c:	40010400 	.word	0x40010400
 8005010:	40014000 	.word	0x40014000
 8005014:	40014400 	.word	0x40014400
 8005018:	40014800 	.word	0x40014800

0800501c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	f023 0201 	bic.w	r2, r3, #1
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f023 030a 	bic.w	r3, r3, #10
 8005058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4313      	orrs	r3, r2
 8005060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	621a      	str	r2, [r3, #32]
}
 800506e:	bf00      	nop
 8005070:	371c      	adds	r7, #28
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800507a:	b480      	push	{r7}
 800507c:	b087      	sub	sp, #28
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	f023 0210 	bic.w	r2, r3, #16
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	031b      	lsls	r3, r3, #12
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	621a      	str	r2, [r3, #32]
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
	...

080050dc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4b09      	ldr	r3, [pc, #36]	; (8005114 <TIM_ITRx_SetConfig+0x38>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f043 0307 	orr.w	r3, r3, #7
 80050fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	609a      	str	r2, [r3, #8]
}
 8005106:	bf00      	nop
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	ffcfff8f 	.word	0xffcfff8f

08005118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	021a      	lsls	r2, r3, #8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	431a      	orrs	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4313      	orrs	r3, r2
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	609a      	str	r2, [r3, #8]
}
 800514c:	bf00      	nop
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800516c:	2302      	movs	r3, #2
 800516e:	e068      	b.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a2e      	ldr	r2, [pc, #184]	; (8005250 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d004      	beq.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a2d      	ldr	r2, [pc, #180]	; (8005254 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d108      	bne.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a1e      	ldr	r2, [pc, #120]	; (8005250 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d01d      	beq.n	8005216 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e2:	d018      	beq.n	8005216 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1b      	ldr	r2, [pc, #108]	; (8005258 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d013      	beq.n	8005216 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1a      	ldr	r2, [pc, #104]	; (800525c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00e      	beq.n	8005216 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a18      	ldr	r2, [pc, #96]	; (8005260 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d009      	beq.n	8005216 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a13      	ldr	r2, [pc, #76]	; (8005254 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d004      	beq.n	8005216 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a14      	ldr	r2, [pc, #80]	; (8005264 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d10c      	bne.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800521c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	4313      	orrs	r3, r2
 8005226:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40010000 	.word	0x40010000
 8005254:	40010400 	.word	0x40010400
 8005258:	40000400 	.word	0x40000400
 800525c:	40000800 	.word	0x40000800
 8005260:	40000c00 	.word	0x40000c00
 8005264:	40001800 	.word	0x40001800

08005268 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e042      	b.n	8005300 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005280:	2b00      	cmp	r3, #0
 8005282:	d106      	bne.n	8005292 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7fc fb47 	bl	8001920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2224      	movs	r2, #36	; 0x24
 8005296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0201 	bic.w	r2, r2, #1
 80052a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fb24 	bl	80058f8 <UART_SetConfig>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d101      	bne.n	80052ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e022      	b.n	8005300 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d002      	beq.n	80052c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f001 f8c8 	bl	8006458 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f001 f94f 	bl	800659c <UART_CheckIdleState>
 80052fe:	4603      	mov	r3, r0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b08a      	sub	sp, #40	; 0x28
 800530c:	af02      	add	r7, sp, #8
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	4613      	mov	r3, r2
 8005316:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800531e:	2b20      	cmp	r3, #32
 8005320:	f040 8083 	bne.w	800542a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_UART_Transmit+0x28>
 800532a:	88fb      	ldrh	r3, [r7, #6]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e07b      	b.n	800542c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_UART_Transmit+0x3a>
 800533e:	2302      	movs	r3, #2
 8005340:	e074      	b.n	800542c <HAL_UART_Transmit+0x124>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2221      	movs	r2, #33	; 0x21
 8005356:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800535a:	f7fc fbe3 	bl	8001b24 <HAL_GetTick>
 800535e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	88fa      	ldrh	r2, [r7, #6]
 8005364:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	88fa      	ldrh	r2, [r7, #6]
 800536c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005378:	d108      	bne.n	800538c <HAL_UART_Transmit+0x84>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d104      	bne.n	800538c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005382:	2300      	movs	r3, #0
 8005384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	61bb      	str	r3, [r7, #24]
 800538a:	e003      	b.n	8005394 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005390:	2300      	movs	r3, #0
 8005392:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800539c:	e02c      	b.n	80053f8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2200      	movs	r2, #0
 80053a6:	2180      	movs	r1, #128	; 0x80
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f001 f93f 	bl	800662c <UART_WaitOnFlagUntilTimeout>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e039      	b.n	800542c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10b      	bne.n	80053d6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	461a      	mov	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	3302      	adds	r3, #2
 80053d2:	61bb      	str	r3, [r7, #24]
 80053d4:	e007      	b.n	80053e6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	781a      	ldrb	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	3301      	adds	r3, #1
 80053e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053fe:	b29b      	uxth	r3, r3
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1cc      	bne.n	800539e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2200      	movs	r2, #0
 800540c:	2140      	movs	r1, #64	; 0x40
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f001 f90c 	bl	800662c <UART_WaitOnFlagUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e006      	b.n	800542c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	e000      	b.n	800542c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800542a:	2302      	movs	r3, #2
  }
}
 800542c:	4618      	mov	r0, r3
 800542e:	3720      	adds	r7, #32
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	4613      	mov	r3, r2
 8005440:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005448:	2b20      	cmp	r3, #32
 800544a:	f040 80bc 	bne.w	80055c6 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <HAL_UART_Receive_IT+0x26>
 8005454:	88fb      	ldrh	r3, [r7, #6]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e0b4      	b.n	80055c8 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_UART_Receive_IT+0x38>
 8005468:	2302      	movs	r3, #2
 800546a:	e0ad      	b.n	80055c8 <HAL_UART_Receive_IT+0x194>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	88fa      	ldrh	r2, [r7, #6]
 800547e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	88fa      	ldrh	r2, [r7, #6]
 8005486:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005498:	d10e      	bne.n	80054b8 <HAL_UART_Receive_IT+0x84>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d105      	bne.n	80054ae <HAL_UART_Receive_IT+0x7a>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80054a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054ac:	e02d      	b.n	800550a <HAL_UART_Receive_IT+0xd6>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	22ff      	movs	r2, #255	; 0xff
 80054b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054b6:	e028      	b.n	800550a <HAL_UART_Receive_IT+0xd6>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10d      	bne.n	80054dc <HAL_UART_Receive_IT+0xa8>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d104      	bne.n	80054d2 <HAL_UART_Receive_IT+0x9e>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	22ff      	movs	r2, #255	; 0xff
 80054cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054d0:	e01b      	b.n	800550a <HAL_UART_Receive_IT+0xd6>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	227f      	movs	r2, #127	; 0x7f
 80054d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054da:	e016      	b.n	800550a <HAL_UART_Receive_IT+0xd6>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054e4:	d10d      	bne.n	8005502 <HAL_UART_Receive_IT+0xce>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d104      	bne.n	80054f8 <HAL_UART_Receive_IT+0xc4>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	227f      	movs	r2, #127	; 0x7f
 80054f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054f6:	e008      	b.n	800550a <HAL_UART_Receive_IT+0xd6>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	223f      	movs	r2, #63	; 0x3f
 80054fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005500:	e003      	b.n	800550a <HAL_UART_Receive_IT+0xd6>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2222      	movs	r2, #34	; 0x22
 8005516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f042 0201 	orr.w	r2, r2, #1
 8005528:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800552e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005532:	d12a      	bne.n	800558a <HAL_UART_Receive_IT+0x156>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800553a:	88fa      	ldrh	r2, [r7, #6]
 800553c:	429a      	cmp	r2, r3
 800553e:	d324      	bcc.n	800558a <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005548:	d107      	bne.n	800555a <HAL_UART_Receive_IT+0x126>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d103      	bne.n	800555a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4a1f      	ldr	r2, [pc, #124]	; (80055d4 <HAL_UART_Receive_IT+0x1a0>)
 8005556:	66da      	str	r2, [r3, #108]	; 0x6c
 8005558:	e002      	b.n	8005560 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4a1e      	ldr	r2, [pc, #120]	; (80055d8 <HAL_UART_Receive_IT+0x1a4>)
 800555e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005576:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005586:	609a      	str	r2, [r3, #8]
 8005588:	e01b      	b.n	80055c2 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005592:	d107      	bne.n	80055a4 <HAL_UART_Receive_IT+0x170>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d103      	bne.n	80055a4 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4a0f      	ldr	r2, [pc, #60]	; (80055dc <HAL_UART_Receive_IT+0x1a8>)
 80055a0:	66da      	str	r2, [r3, #108]	; 0x6c
 80055a2:	e002      	b.n	80055aa <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4a0e      	ldr	r2, [pc, #56]	; (80055e0 <HAL_UART_Receive_IT+0x1ac>)
 80055a8:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80055c0:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	e000      	b.n	80055c8 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80055c6:	2302      	movs	r3, #2
  }
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	08006a31 	.word	0x08006a31
 80055d8:	08006929 	.word	0x08006929
 80055dc:	0800687f 	.word	0x0800687f
 80055e0:	080067d5 	.word	0x080067d5

080055e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005604:	69fa      	ldr	r2, [r7, #28]
 8005606:	f640 030f 	movw	r3, #2063	; 0x80f
 800560a:	4013      	ands	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d118      	bne.n	8005646 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b00      	cmp	r3, #0
 800561c:	d013      	beq.n	8005646 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b00      	cmp	r3, #0
 8005626:	d104      	bne.n	8005632 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d009      	beq.n	8005646 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 8145 	beq.w	80058c6 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	4798      	blx	r3
      }
      return;
 8005644:	e13f      	b.n	80058c6 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 80e8 	beq.w	800581e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4ba1      	ldr	r3, [pc, #644]	; (80058d8 <HAL_UART_IRQHandler+0x2f4>)
 8005652:	4013      	ands	r3, r2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d105      	bne.n	8005664 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	4ba0      	ldr	r3, [pc, #640]	; (80058dc <HAL_UART_IRQHandler+0x2f8>)
 800565c:	4013      	ands	r3, r2
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 80dd 	beq.w	800581e <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d010      	beq.n	8005690 <HAL_UART_IRQHandler+0xac>
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00b      	beq.n	8005690 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2201      	movs	r2, #1
 800567e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005686:	f043 0201 	orr.w	r2, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d010      	beq.n	80056bc <HAL_UART_IRQHandler+0xd8>
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00b      	beq.n	80056bc <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2202      	movs	r2, #2
 80056aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b2:	f043 0204 	orr.w	r2, r3, #4
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d010      	beq.n	80056e8 <HAL_UART_IRQHandler+0x104>
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00b      	beq.n	80056e8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2204      	movs	r2, #4
 80056d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056de:	f043 0202 	orr.w	r2, r3, #2
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	f003 0308 	and.w	r3, r3, #8
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d015      	beq.n	800571e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	f003 0320 	and.w	r3, r3, #32
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d104      	bne.n	8005706 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4b76      	ldr	r3, [pc, #472]	; (80058d8 <HAL_UART_IRQHandler+0x2f4>)
 8005700:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00b      	beq.n	800571e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2208      	movs	r2, #8
 800570c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005714:	f043 0208 	orr.w	r2, r3, #8
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005724:	2b00      	cmp	r3, #0
 8005726:	d011      	beq.n	800574c <HAL_UART_IRQHandler+0x168>
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00c      	beq.n	800574c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800573a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005742:	f043 0220 	orr.w	r2, r3, #32
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 80b9 	beq.w	80058ca <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	f003 0320 	and.w	r3, r3, #32
 800575e:	2b00      	cmp	r3, #0
 8005760:	d011      	beq.n	8005786 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b00      	cmp	r3, #0
 800576a:	d104      	bne.n	8005776 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d007      	beq.n	8005786 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005798:	2b40      	cmp	r3, #64	; 0x40
 800579a:	d004      	beq.n	80057a6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d031      	beq.n	800580a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 ffc0 	bl	800672c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b6:	2b40      	cmp	r3, #64	; 0x40
 80057b8:	d123      	bne.n	8005802 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057c8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d013      	beq.n	80057fa <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057d6:	4a42      	ldr	r2, [pc, #264]	; (80058e0 <HAL_UART_IRQHandler+0x2fc>)
 80057d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fc faea 	bl	8001db8 <HAL_DMA_Abort_IT>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d017      	beq.n	800581a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80057f4:	4610      	mov	r0, r2
 80057f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f8:	e00f      	b.n	800581a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f872 	bl	80058e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005800:	e00b      	b.n	800581a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f86e 	bl	80058e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005808:	e007      	b.n	800581a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f86a 	bl	80058e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005818:	e057      	b.n	80058ca <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800581a:	bf00      	nop
    return;
 800581c:	e055      	b.n	80058ca <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00d      	beq.n	8005844 <HAL_UART_IRQHandler+0x260>
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d008      	beq.n	8005844 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800583a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f001 f97b 	bl	8006b38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005842:	e045      	b.n	80058d0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584a:	2b00      	cmp	r3, #0
 800584c:	d012      	beq.n	8005874 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005854:	2b00      	cmp	r3, #0
 8005856:	d104      	bne.n	8005862 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d008      	beq.n	8005874 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005866:	2b00      	cmp	r3, #0
 8005868:	d031      	beq.n	80058ce <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	4798      	blx	r3
    }
    return;
 8005872:	e02c      	b.n	80058ce <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	d008      	beq.n	8005890 <HAL_UART_IRQHandler+0x2ac>
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 ff89 	bl	80067a0 <UART_EndTransmit_IT>
    return;
 800588e:	e01f      	b.n	80058d0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d008      	beq.n	80058ac <HAL_UART_IRQHandler+0x2c8>
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f001 f95b 	bl	8006b60 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058aa:	e011      	b.n	80058d0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00c      	beq.n	80058d0 <HAL_UART_IRQHandler+0x2ec>
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	da09      	bge.n	80058d0 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f001 f945 	bl	8006b4c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058c2:	bf00      	nop
 80058c4:	e004      	b.n	80058d0 <HAL_UART_IRQHandler+0x2ec>
      return;
 80058c6:	bf00      	nop
 80058c8:	e002      	b.n	80058d0 <HAL_UART_IRQHandler+0x2ec>
    return;
 80058ca:	bf00      	nop
 80058cc:	e000      	b.n	80058d0 <HAL_UART_IRQHandler+0x2ec>
    return;
 80058ce:	bf00      	nop
  }
}
 80058d0:	3720      	adds	r7, #32
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	10000001 	.word	0x10000001
 80058dc:	04000120 	.word	0x04000120
 80058e0:	08006775 	.word	0x08006775

080058e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058f8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80058fc:	b08e      	sub	sp, #56	; 0x38
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	431a      	orrs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	4313      	orrs	r3, r2
 800591e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005926:	4313      	orrs	r3, r2
 8005928:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	4bc1      	ldr	r3, [pc, #772]	; (8005c38 <UART_SetConfig+0x340>)
 8005932:	4013      	ands	r3, r2
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6812      	ldr	r2, [r2, #0]
 8005938:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800593a:	430b      	orrs	r3, r1
 800593c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68da      	ldr	r2, [r3, #12]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4ab7      	ldr	r2, [pc, #732]	; (8005c3c <UART_SetConfig+0x344>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d004      	beq.n	800596e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800596a:	4313      	orrs	r3, r2
 800596c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	4bb2      	ldr	r3, [pc, #712]	; (8005c40 <UART_SetConfig+0x348>)
 8005976:	4013      	ands	r3, r2
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6812      	ldr	r2, [r2, #0]
 800597c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800597e:	430b      	orrs	r3, r1
 8005980:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	f023 010f 	bic.w	r1, r3, #15
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4aa9      	ldr	r2, [pc, #676]	; (8005c44 <UART_SetConfig+0x34c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d177      	bne.n	8005a92 <UART_SetConfig+0x19a>
 80059a2:	4ba9      	ldr	r3, [pc, #676]	; (8005c48 <UART_SetConfig+0x350>)
 80059a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059aa:	2b28      	cmp	r3, #40	; 0x28
 80059ac:	d86c      	bhi.n	8005a88 <UART_SetConfig+0x190>
 80059ae:	a201      	add	r2, pc, #4	; (adr r2, 80059b4 <UART_SetConfig+0xbc>)
 80059b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b4:	08005a59 	.word	0x08005a59
 80059b8:	08005a89 	.word	0x08005a89
 80059bc:	08005a89 	.word	0x08005a89
 80059c0:	08005a89 	.word	0x08005a89
 80059c4:	08005a89 	.word	0x08005a89
 80059c8:	08005a89 	.word	0x08005a89
 80059cc:	08005a89 	.word	0x08005a89
 80059d0:	08005a89 	.word	0x08005a89
 80059d4:	08005a61 	.word	0x08005a61
 80059d8:	08005a89 	.word	0x08005a89
 80059dc:	08005a89 	.word	0x08005a89
 80059e0:	08005a89 	.word	0x08005a89
 80059e4:	08005a89 	.word	0x08005a89
 80059e8:	08005a89 	.word	0x08005a89
 80059ec:	08005a89 	.word	0x08005a89
 80059f0:	08005a89 	.word	0x08005a89
 80059f4:	08005a69 	.word	0x08005a69
 80059f8:	08005a89 	.word	0x08005a89
 80059fc:	08005a89 	.word	0x08005a89
 8005a00:	08005a89 	.word	0x08005a89
 8005a04:	08005a89 	.word	0x08005a89
 8005a08:	08005a89 	.word	0x08005a89
 8005a0c:	08005a89 	.word	0x08005a89
 8005a10:	08005a89 	.word	0x08005a89
 8005a14:	08005a71 	.word	0x08005a71
 8005a18:	08005a89 	.word	0x08005a89
 8005a1c:	08005a89 	.word	0x08005a89
 8005a20:	08005a89 	.word	0x08005a89
 8005a24:	08005a89 	.word	0x08005a89
 8005a28:	08005a89 	.word	0x08005a89
 8005a2c:	08005a89 	.word	0x08005a89
 8005a30:	08005a89 	.word	0x08005a89
 8005a34:	08005a79 	.word	0x08005a79
 8005a38:	08005a89 	.word	0x08005a89
 8005a3c:	08005a89 	.word	0x08005a89
 8005a40:	08005a89 	.word	0x08005a89
 8005a44:	08005a89 	.word	0x08005a89
 8005a48:	08005a89 	.word	0x08005a89
 8005a4c:	08005a89 	.word	0x08005a89
 8005a50:	08005a89 	.word	0x08005a89
 8005a54:	08005a81 	.word	0x08005a81
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a5e:	e233      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005a60:	2304      	movs	r3, #4
 8005a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a66:	e22f      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005a68:	2308      	movs	r3, #8
 8005a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a6e:	e22b      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005a70:	2310      	movs	r3, #16
 8005a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a76:	e227      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005a78:	2320      	movs	r3, #32
 8005a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a7e:	e223      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005a80:	2340      	movs	r3, #64	; 0x40
 8005a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a86:	e21f      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005a88:	2380      	movs	r3, #128	; 0x80
 8005a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a8e:	bf00      	nop
 8005a90:	e21a      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a6d      	ldr	r2, [pc, #436]	; (8005c4c <UART_SetConfig+0x354>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d132      	bne.n	8005b02 <UART_SetConfig+0x20a>
 8005a9c:	4b6a      	ldr	r3, [pc, #424]	; (8005c48 <UART_SetConfig+0x350>)
 8005a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	2b05      	cmp	r3, #5
 8005aa6:	d827      	bhi.n	8005af8 <UART_SetConfig+0x200>
 8005aa8:	a201      	add	r2, pc, #4	; (adr r2, 8005ab0 <UART_SetConfig+0x1b8>)
 8005aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aae:	bf00      	nop
 8005ab0:	08005ac9 	.word	0x08005ac9
 8005ab4:	08005ad1 	.word	0x08005ad1
 8005ab8:	08005ad9 	.word	0x08005ad9
 8005abc:	08005ae1 	.word	0x08005ae1
 8005ac0:	08005ae9 	.word	0x08005ae9
 8005ac4:	08005af1 	.word	0x08005af1
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ace:	e1fb      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005ad0:	2304      	movs	r3, #4
 8005ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ad6:	e1f7      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005ad8:	2308      	movs	r3, #8
 8005ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ade:	e1f3      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005ae0:	2310      	movs	r3, #16
 8005ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ae6:	e1ef      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005ae8:	2320      	movs	r3, #32
 8005aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aee:	e1eb      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005af0:	2340      	movs	r3, #64	; 0x40
 8005af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005af6:	e1e7      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005af8:	2380      	movs	r3, #128	; 0x80
 8005afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005afe:	bf00      	nop
 8005b00:	e1e2      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a52      	ldr	r2, [pc, #328]	; (8005c50 <UART_SetConfig+0x358>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d132      	bne.n	8005b72 <UART_SetConfig+0x27a>
 8005b0c:	4b4e      	ldr	r3, [pc, #312]	; (8005c48 <UART_SetConfig+0x350>)
 8005b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	2b05      	cmp	r3, #5
 8005b16:	d827      	bhi.n	8005b68 <UART_SetConfig+0x270>
 8005b18:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <UART_SetConfig+0x228>)
 8005b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1e:	bf00      	nop
 8005b20:	08005b39 	.word	0x08005b39
 8005b24:	08005b41 	.word	0x08005b41
 8005b28:	08005b49 	.word	0x08005b49
 8005b2c:	08005b51 	.word	0x08005b51
 8005b30:	08005b59 	.word	0x08005b59
 8005b34:	08005b61 	.word	0x08005b61
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b3e:	e1c3      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005b40:	2304      	movs	r3, #4
 8005b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b46:	e1bf      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005b48:	2308      	movs	r3, #8
 8005b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4e:	e1bb      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005b50:	2310      	movs	r3, #16
 8005b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b56:	e1b7      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005b58:	2320      	movs	r3, #32
 8005b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b5e:	e1b3      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005b60:	2340      	movs	r3, #64	; 0x40
 8005b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b66:	e1af      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005b68:	2380      	movs	r3, #128	; 0x80
 8005b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b6e:	bf00      	nop
 8005b70:	e1aa      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a37      	ldr	r2, [pc, #220]	; (8005c54 <UART_SetConfig+0x35c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d132      	bne.n	8005be2 <UART_SetConfig+0x2ea>
 8005b7c:	4b32      	ldr	r3, [pc, #200]	; (8005c48 <UART_SetConfig+0x350>)
 8005b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	2b05      	cmp	r3, #5
 8005b86:	d827      	bhi.n	8005bd8 <UART_SetConfig+0x2e0>
 8005b88:	a201      	add	r2, pc, #4	; (adr r2, 8005b90 <UART_SetConfig+0x298>)
 8005b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8e:	bf00      	nop
 8005b90:	08005ba9 	.word	0x08005ba9
 8005b94:	08005bb1 	.word	0x08005bb1
 8005b98:	08005bb9 	.word	0x08005bb9
 8005b9c:	08005bc1 	.word	0x08005bc1
 8005ba0:	08005bc9 	.word	0x08005bc9
 8005ba4:	08005bd1 	.word	0x08005bd1
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bae:	e18b      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bb6:	e187      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005bb8:	2308      	movs	r3, #8
 8005bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bbe:	e183      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005bc0:	2310      	movs	r3, #16
 8005bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bc6:	e17f      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005bc8:	2320      	movs	r3, #32
 8005bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bce:	e17b      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005bd0:	2340      	movs	r3, #64	; 0x40
 8005bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bd6:	e177      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005bd8:	2380      	movs	r3, #128	; 0x80
 8005bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bde:	bf00      	nop
 8005be0:	e172      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a1c      	ldr	r2, [pc, #112]	; (8005c58 <UART_SetConfig+0x360>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d144      	bne.n	8005c76 <UART_SetConfig+0x37e>
 8005bec:	4b16      	ldr	r3, [pc, #88]	; (8005c48 <UART_SetConfig+0x350>)
 8005bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	2b05      	cmp	r3, #5
 8005bf6:	d839      	bhi.n	8005c6c <UART_SetConfig+0x374>
 8005bf8:	a201      	add	r2, pc, #4	; (adr r2, 8005c00 <UART_SetConfig+0x308>)
 8005bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfe:	bf00      	nop
 8005c00:	08005c19 	.word	0x08005c19
 8005c04:	08005c21 	.word	0x08005c21
 8005c08:	08005c29 	.word	0x08005c29
 8005c0c:	08005c31 	.word	0x08005c31
 8005c10:	08005c5d 	.word	0x08005c5d
 8005c14:	08005c65 	.word	0x08005c65
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c1e:	e153      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005c20:	2304      	movs	r3, #4
 8005c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c26:	e14f      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005c28:	2308      	movs	r3, #8
 8005c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c2e:	e14b      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005c30:	2310      	movs	r3, #16
 8005c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c36:	e147      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005c38:	cfff69f3 	.word	0xcfff69f3
 8005c3c:	58000c00 	.word	0x58000c00
 8005c40:	11fff4ff 	.word	0x11fff4ff
 8005c44:	40011000 	.word	0x40011000
 8005c48:	58024400 	.word	0x58024400
 8005c4c:	40004400 	.word	0x40004400
 8005c50:	40004800 	.word	0x40004800
 8005c54:	40004c00 	.word	0x40004c00
 8005c58:	40005000 	.word	0x40005000
 8005c5c:	2320      	movs	r3, #32
 8005c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c62:	e131      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005c64:	2340      	movs	r3, #64	; 0x40
 8005c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c6a:	e12d      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005c6c:	2380      	movs	r3, #128	; 0x80
 8005c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c72:	bf00      	nop
 8005c74:	e128      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4ab6      	ldr	r2, [pc, #728]	; (8005f54 <UART_SetConfig+0x65c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d178      	bne.n	8005d72 <UART_SetConfig+0x47a>
 8005c80:	4bb5      	ldr	r3, [pc, #724]	; (8005f58 <UART_SetConfig+0x660>)
 8005c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c88:	2b28      	cmp	r3, #40	; 0x28
 8005c8a:	d86d      	bhi.n	8005d68 <UART_SetConfig+0x470>
 8005c8c:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <UART_SetConfig+0x39c>)
 8005c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c92:	bf00      	nop
 8005c94:	08005d39 	.word	0x08005d39
 8005c98:	08005d69 	.word	0x08005d69
 8005c9c:	08005d69 	.word	0x08005d69
 8005ca0:	08005d69 	.word	0x08005d69
 8005ca4:	08005d69 	.word	0x08005d69
 8005ca8:	08005d69 	.word	0x08005d69
 8005cac:	08005d69 	.word	0x08005d69
 8005cb0:	08005d69 	.word	0x08005d69
 8005cb4:	08005d41 	.word	0x08005d41
 8005cb8:	08005d69 	.word	0x08005d69
 8005cbc:	08005d69 	.word	0x08005d69
 8005cc0:	08005d69 	.word	0x08005d69
 8005cc4:	08005d69 	.word	0x08005d69
 8005cc8:	08005d69 	.word	0x08005d69
 8005ccc:	08005d69 	.word	0x08005d69
 8005cd0:	08005d69 	.word	0x08005d69
 8005cd4:	08005d49 	.word	0x08005d49
 8005cd8:	08005d69 	.word	0x08005d69
 8005cdc:	08005d69 	.word	0x08005d69
 8005ce0:	08005d69 	.word	0x08005d69
 8005ce4:	08005d69 	.word	0x08005d69
 8005ce8:	08005d69 	.word	0x08005d69
 8005cec:	08005d69 	.word	0x08005d69
 8005cf0:	08005d69 	.word	0x08005d69
 8005cf4:	08005d51 	.word	0x08005d51
 8005cf8:	08005d69 	.word	0x08005d69
 8005cfc:	08005d69 	.word	0x08005d69
 8005d00:	08005d69 	.word	0x08005d69
 8005d04:	08005d69 	.word	0x08005d69
 8005d08:	08005d69 	.word	0x08005d69
 8005d0c:	08005d69 	.word	0x08005d69
 8005d10:	08005d69 	.word	0x08005d69
 8005d14:	08005d59 	.word	0x08005d59
 8005d18:	08005d69 	.word	0x08005d69
 8005d1c:	08005d69 	.word	0x08005d69
 8005d20:	08005d69 	.word	0x08005d69
 8005d24:	08005d69 	.word	0x08005d69
 8005d28:	08005d69 	.word	0x08005d69
 8005d2c:	08005d69 	.word	0x08005d69
 8005d30:	08005d69 	.word	0x08005d69
 8005d34:	08005d61 	.word	0x08005d61
 8005d38:	2301      	movs	r3, #1
 8005d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d3e:	e0c3      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005d40:	2304      	movs	r3, #4
 8005d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d46:	e0bf      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005d48:	2308      	movs	r3, #8
 8005d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d4e:	e0bb      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005d50:	2310      	movs	r3, #16
 8005d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d56:	e0b7      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005d58:	2320      	movs	r3, #32
 8005d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d5e:	e0b3      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005d60:	2340      	movs	r3, #64	; 0x40
 8005d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d66:	e0af      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005d68:	2380      	movs	r3, #128	; 0x80
 8005d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d6e:	bf00      	nop
 8005d70:	e0aa      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a79      	ldr	r2, [pc, #484]	; (8005f5c <UART_SetConfig+0x664>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d132      	bne.n	8005de2 <UART_SetConfig+0x4ea>
 8005d7c:	4b76      	ldr	r3, [pc, #472]	; (8005f58 <UART_SetConfig+0x660>)
 8005d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	2b05      	cmp	r3, #5
 8005d86:	d827      	bhi.n	8005dd8 <UART_SetConfig+0x4e0>
 8005d88:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <UART_SetConfig+0x498>)
 8005d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8e:	bf00      	nop
 8005d90:	08005da9 	.word	0x08005da9
 8005d94:	08005db1 	.word	0x08005db1
 8005d98:	08005db9 	.word	0x08005db9
 8005d9c:	08005dc1 	.word	0x08005dc1
 8005da0:	08005dc9 	.word	0x08005dc9
 8005da4:	08005dd1 	.word	0x08005dd1
 8005da8:	2300      	movs	r3, #0
 8005daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dae:	e08b      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005db0:	2304      	movs	r3, #4
 8005db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005db6:	e087      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005db8:	2308      	movs	r3, #8
 8005dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dbe:	e083      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005dc0:	2310      	movs	r3, #16
 8005dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dc6:	e07f      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005dc8:	2320      	movs	r3, #32
 8005dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dce:	e07b      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005dd0:	2340      	movs	r3, #64	; 0x40
 8005dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dd6:	e077      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005dd8:	2380      	movs	r3, #128	; 0x80
 8005dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dde:	bf00      	nop
 8005de0:	e072      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a5e      	ldr	r2, [pc, #376]	; (8005f60 <UART_SetConfig+0x668>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d132      	bne.n	8005e52 <UART_SetConfig+0x55a>
 8005dec:	4b5a      	ldr	r3, [pc, #360]	; (8005f58 <UART_SetConfig+0x660>)
 8005dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df0:	f003 0307 	and.w	r3, r3, #7
 8005df4:	2b05      	cmp	r3, #5
 8005df6:	d827      	bhi.n	8005e48 <UART_SetConfig+0x550>
 8005df8:	a201      	add	r2, pc, #4	; (adr r2, 8005e00 <UART_SetConfig+0x508>)
 8005dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfe:	bf00      	nop
 8005e00:	08005e19 	.word	0x08005e19
 8005e04:	08005e21 	.word	0x08005e21
 8005e08:	08005e29 	.word	0x08005e29
 8005e0c:	08005e31 	.word	0x08005e31
 8005e10:	08005e39 	.word	0x08005e39
 8005e14:	08005e41 	.word	0x08005e41
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e1e:	e053      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005e20:	2304      	movs	r3, #4
 8005e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e26:	e04f      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005e28:	2308      	movs	r3, #8
 8005e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2e:	e04b      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005e30:	2310      	movs	r3, #16
 8005e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e36:	e047      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005e38:	2320      	movs	r3, #32
 8005e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3e:	e043      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005e40:	2340      	movs	r3, #64	; 0x40
 8005e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e46:	e03f      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005e48:	2380      	movs	r3, #128	; 0x80
 8005e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e4e:	bf00      	nop
 8005e50:	e03a      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a43      	ldr	r2, [pc, #268]	; (8005f64 <UART_SetConfig+0x66c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d132      	bne.n	8005ec2 <UART_SetConfig+0x5ca>
 8005e5c:	4b3e      	ldr	r3, [pc, #248]	; (8005f58 <UART_SetConfig+0x660>)
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	2b05      	cmp	r3, #5
 8005e66:	d827      	bhi.n	8005eb8 <UART_SetConfig+0x5c0>
 8005e68:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <UART_SetConfig+0x578>)
 8005e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6e:	bf00      	nop
 8005e70:	08005e89 	.word	0x08005e89
 8005e74:	08005e91 	.word	0x08005e91
 8005e78:	08005e99 	.word	0x08005e99
 8005e7c:	08005ea1 	.word	0x08005ea1
 8005e80:	08005ea9 	.word	0x08005ea9
 8005e84:	08005eb1 	.word	0x08005eb1
 8005e88:	2302      	movs	r3, #2
 8005e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e8e:	e01b      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005e90:	2304      	movs	r3, #4
 8005e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e96:	e017      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005e98:	2308      	movs	r3, #8
 8005e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9e:	e013      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea6:	e00f      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005ea8:	2320      	movs	r3, #32
 8005eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eae:	e00b      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005eb0:	2340      	movs	r3, #64	; 0x40
 8005eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eb6:	e007      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005eb8:	2380      	movs	r3, #128	; 0x80
 8005eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ebe:	bf00      	nop
 8005ec0:	e002      	b.n	8005ec8 <UART_SetConfig+0x5d0>
 8005ec2:	2380      	movs	r3, #128	; 0x80
 8005ec4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a25      	ldr	r2, [pc, #148]	; (8005f64 <UART_SetConfig+0x66c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	f040 80b8 	bne.w	8006044 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ed4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d019      	beq.n	8005f10 <UART_SetConfig+0x618>
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	dc04      	bgt.n	8005eea <UART_SetConfig+0x5f2>
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d009      	beq.n	8005ef8 <UART_SetConfig+0x600>
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d00b      	beq.n	8005f00 <UART_SetConfig+0x608>
 8005ee8:	e042      	b.n	8005f70 <UART_SetConfig+0x678>
 8005eea:	2b20      	cmp	r3, #32
 8005eec:	d02b      	beq.n	8005f46 <UART_SetConfig+0x64e>
 8005eee:	2b40      	cmp	r3, #64	; 0x40
 8005ef0:	d02c      	beq.n	8005f4c <UART_SetConfig+0x654>
 8005ef2:	2b10      	cmp	r3, #16
 8005ef4:	d014      	beq.n	8005f20 <UART_SetConfig+0x628>
 8005ef6:	e03b      	b.n	8005f70 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005ef8:	f7fe fa8e 	bl	8004418 <HAL_RCCEx_GetD3PCLK1Freq>
 8005efc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005efe:	e03d      	b.n	8005f7c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f00:	f107 0314 	add.w	r3, r7, #20
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7fe fa9d 	bl	8004444 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f0e:	e035      	b.n	8005f7c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f10:	f107 0308 	add.w	r3, r7, #8
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fe fbe1 	bl	80046dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f1e:	e02d      	b.n	8005f7c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f20:	4b0d      	ldr	r3, [pc, #52]	; (8005f58 <UART_SetConfig+0x660>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d009      	beq.n	8005f40 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f2c:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <UART_SetConfig+0x660>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	08db      	lsrs	r3, r3, #3
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	4a0c      	ldr	r2, [pc, #48]	; (8005f68 <UART_SetConfig+0x670>)
 8005f38:	fa22 f303 	lsr.w	r3, r2, r3
 8005f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f3e:	e01d      	b.n	8005f7c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8005f40:	4b09      	ldr	r3, [pc, #36]	; (8005f68 <UART_SetConfig+0x670>)
 8005f42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f44:	e01a      	b.n	8005f7c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f46:	4b09      	ldr	r3, [pc, #36]	; (8005f6c <UART_SetConfig+0x674>)
 8005f48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f4a:	e017      	b.n	8005f7c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f52:	e013      	b.n	8005f7c <UART_SetConfig+0x684>
 8005f54:	40011400 	.word	0x40011400
 8005f58:	58024400 	.word	0x58024400
 8005f5c:	40007800 	.word	0x40007800
 8005f60:	40007c00 	.word	0x40007c00
 8005f64:	58000c00 	.word	0x58000c00
 8005f68:	03d09000 	.word	0x03d09000
 8005f6c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005f7a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 824d 	beq.w	800641e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	4aad      	ldr	r2, [pc, #692]	; (8006240 <UART_SetConfig+0x948>)
 8005f8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f92:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f96:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	4413      	add	r3, r2
 8005fa2:	6a3a      	ldr	r2, [r7, #32]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d305      	bcc.n	8005fb4 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fae:	6a3a      	ldr	r2, [r7, #32]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d903      	bls.n	8005fbc <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005fba:	e230      	b.n	800641e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f04f 0100 	mov.w	r1, #0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	4a9d      	ldr	r2, [pc, #628]	; (8006240 <UART_SetConfig+0x948>)
 8005fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f04f 0400 	mov.w	r4, #0
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	4623      	mov	r3, r4
 8005fd8:	f7fa f9da 	bl	8000390 <__aeabi_uldivmod>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	460c      	mov	r4, r1
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4622      	mov	r2, r4
 8005fe4:	f04f 0300 	mov.w	r3, #0
 8005fe8:	f04f 0400 	mov.w	r4, #0
 8005fec:	0214      	lsls	r4, r2, #8
 8005fee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005ff2:	020b      	lsls	r3, r1, #8
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	6852      	ldr	r2, [r2, #4]
 8005ff8:	0852      	lsrs	r2, r2, #1
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	eb13 0b01 	adds.w	fp, r3, r1
 8006004:	eb44 0c02 	adc.w	ip, r4, r2
 8006008:	4658      	mov	r0, fp
 800600a:	4661      	mov	r1, ip
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f04f 0400 	mov.w	r4, #0
 8006014:	461a      	mov	r2, r3
 8006016:	4623      	mov	r3, r4
 8006018:	f7fa f9ba 	bl	8000390 <__aeabi_uldivmod>
 800601c:	4603      	mov	r3, r0
 800601e:	460c      	mov	r4, r1
 8006020:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006028:	d308      	bcc.n	800603c <UART_SetConfig+0x744>
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006030:	d204      	bcs.n	800603c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006038:	60da      	str	r2, [r3, #12]
 800603a:	e1f0      	b.n	800641e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006042:	e1ec      	b.n	800641e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800604c:	f040 8100 	bne.w	8006250 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8006050:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006054:	2b40      	cmp	r3, #64	; 0x40
 8006056:	f200 80b7 	bhi.w	80061c8 <UART_SetConfig+0x8d0>
 800605a:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <UART_SetConfig+0x768>)
 800605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006060:	08006165 	.word	0x08006165
 8006064:	0800616d 	.word	0x0800616d
 8006068:	080061c9 	.word	0x080061c9
 800606c:	080061c9 	.word	0x080061c9
 8006070:	08006175 	.word	0x08006175
 8006074:	080061c9 	.word	0x080061c9
 8006078:	080061c9 	.word	0x080061c9
 800607c:	080061c9 	.word	0x080061c9
 8006080:	08006185 	.word	0x08006185
 8006084:	080061c9 	.word	0x080061c9
 8006088:	080061c9 	.word	0x080061c9
 800608c:	080061c9 	.word	0x080061c9
 8006090:	080061c9 	.word	0x080061c9
 8006094:	080061c9 	.word	0x080061c9
 8006098:	080061c9 	.word	0x080061c9
 800609c:	080061c9 	.word	0x080061c9
 80060a0:	08006195 	.word	0x08006195
 80060a4:	080061c9 	.word	0x080061c9
 80060a8:	080061c9 	.word	0x080061c9
 80060ac:	080061c9 	.word	0x080061c9
 80060b0:	080061c9 	.word	0x080061c9
 80060b4:	080061c9 	.word	0x080061c9
 80060b8:	080061c9 	.word	0x080061c9
 80060bc:	080061c9 	.word	0x080061c9
 80060c0:	080061c9 	.word	0x080061c9
 80060c4:	080061c9 	.word	0x080061c9
 80060c8:	080061c9 	.word	0x080061c9
 80060cc:	080061c9 	.word	0x080061c9
 80060d0:	080061c9 	.word	0x080061c9
 80060d4:	080061c9 	.word	0x080061c9
 80060d8:	080061c9 	.word	0x080061c9
 80060dc:	080061c9 	.word	0x080061c9
 80060e0:	080061bb 	.word	0x080061bb
 80060e4:	080061c9 	.word	0x080061c9
 80060e8:	080061c9 	.word	0x080061c9
 80060ec:	080061c9 	.word	0x080061c9
 80060f0:	080061c9 	.word	0x080061c9
 80060f4:	080061c9 	.word	0x080061c9
 80060f8:	080061c9 	.word	0x080061c9
 80060fc:	080061c9 	.word	0x080061c9
 8006100:	080061c9 	.word	0x080061c9
 8006104:	080061c9 	.word	0x080061c9
 8006108:	080061c9 	.word	0x080061c9
 800610c:	080061c9 	.word	0x080061c9
 8006110:	080061c9 	.word	0x080061c9
 8006114:	080061c9 	.word	0x080061c9
 8006118:	080061c9 	.word	0x080061c9
 800611c:	080061c9 	.word	0x080061c9
 8006120:	080061c9 	.word	0x080061c9
 8006124:	080061c9 	.word	0x080061c9
 8006128:	080061c9 	.word	0x080061c9
 800612c:	080061c9 	.word	0x080061c9
 8006130:	080061c9 	.word	0x080061c9
 8006134:	080061c9 	.word	0x080061c9
 8006138:	080061c9 	.word	0x080061c9
 800613c:	080061c9 	.word	0x080061c9
 8006140:	080061c9 	.word	0x080061c9
 8006144:	080061c9 	.word	0x080061c9
 8006148:	080061c9 	.word	0x080061c9
 800614c:	080061c9 	.word	0x080061c9
 8006150:	080061c9 	.word	0x080061c9
 8006154:	080061c9 	.word	0x080061c9
 8006158:	080061c9 	.word	0x080061c9
 800615c:	080061c9 	.word	0x080061c9
 8006160:	080061c1 	.word	0x080061c1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006164:	f7fd fa3e 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 8006168:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800616a:	e033      	b.n	80061d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800616c:	f7fd fa50 	bl	8003610 <HAL_RCC_GetPCLK2Freq>
 8006170:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006172:	e02f      	b.n	80061d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006174:	f107 0314 	add.w	r3, r7, #20
 8006178:	4618      	mov	r0, r3
 800617a:	f7fe f963 	bl	8004444 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006182:	e027      	b.n	80061d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006184:	f107 0308 	add.w	r3, r7, #8
 8006188:	4618      	mov	r0, r3
 800618a:	f7fe faa7 	bl	80046dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006192:	e01f      	b.n	80061d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006194:	4b2b      	ldr	r3, [pc, #172]	; (8006244 <UART_SetConfig+0x94c>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0320 	and.w	r3, r3, #32
 800619c:	2b00      	cmp	r3, #0
 800619e:	d009      	beq.n	80061b4 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061a0:	4b28      	ldr	r3, [pc, #160]	; (8006244 <UART_SetConfig+0x94c>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	08db      	lsrs	r3, r3, #3
 80061a6:	f003 0303 	and.w	r3, r3, #3
 80061aa:	4a27      	ldr	r2, [pc, #156]	; (8006248 <UART_SetConfig+0x950>)
 80061ac:	fa22 f303 	lsr.w	r3, r2, r3
 80061b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061b2:	e00f      	b.n	80061d4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80061b4:	4b24      	ldr	r3, [pc, #144]	; (8006248 <UART_SetConfig+0x950>)
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061b8:	e00c      	b.n	80061d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061ba:	4b24      	ldr	r3, [pc, #144]	; (800624c <UART_SetConfig+0x954>)
 80061bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061be:	e009      	b.n	80061d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061c6:	e005      	b.n	80061d4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80061d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f000 8121 	beq.w	800641e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	4a17      	ldr	r2, [pc, #92]	; (8006240 <UART_SetConfig+0x948>)
 80061e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061e6:	461a      	mov	r2, r3
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80061ee:	005a      	lsls	r2, r3, #1
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	085b      	lsrs	r3, r3, #1
 80061f6:	441a      	add	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006200:	b29b      	uxth	r3, r3
 8006202:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	2b0f      	cmp	r3, #15
 8006208:	d916      	bls.n	8006238 <UART_SetConfig+0x940>
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006210:	d212      	bcs.n	8006238 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006214:	b29b      	uxth	r3, r3
 8006216:	f023 030f 	bic.w	r3, r3, #15
 800621a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	085b      	lsrs	r3, r3, #1
 8006220:	b29b      	uxth	r3, r3
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	b29a      	uxth	r2, r3
 8006228:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800622a:	4313      	orrs	r3, r2
 800622c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006234:	60da      	str	r2, [r3, #12]
 8006236:	e0f2      	b.n	800641e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800623e:	e0ee      	b.n	800641e <UART_SetConfig+0xb26>
 8006240:	08009410 	.word	0x08009410
 8006244:	58024400 	.word	0x58024400
 8006248:	03d09000 	.word	0x03d09000
 800624c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8006250:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006254:	2b40      	cmp	r3, #64	; 0x40
 8006256:	f200 80b7 	bhi.w	80063c8 <UART_SetConfig+0xad0>
 800625a:	a201      	add	r2, pc, #4	; (adr r2, 8006260 <UART_SetConfig+0x968>)
 800625c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006260:	08006365 	.word	0x08006365
 8006264:	0800636d 	.word	0x0800636d
 8006268:	080063c9 	.word	0x080063c9
 800626c:	080063c9 	.word	0x080063c9
 8006270:	08006375 	.word	0x08006375
 8006274:	080063c9 	.word	0x080063c9
 8006278:	080063c9 	.word	0x080063c9
 800627c:	080063c9 	.word	0x080063c9
 8006280:	08006385 	.word	0x08006385
 8006284:	080063c9 	.word	0x080063c9
 8006288:	080063c9 	.word	0x080063c9
 800628c:	080063c9 	.word	0x080063c9
 8006290:	080063c9 	.word	0x080063c9
 8006294:	080063c9 	.word	0x080063c9
 8006298:	080063c9 	.word	0x080063c9
 800629c:	080063c9 	.word	0x080063c9
 80062a0:	08006395 	.word	0x08006395
 80062a4:	080063c9 	.word	0x080063c9
 80062a8:	080063c9 	.word	0x080063c9
 80062ac:	080063c9 	.word	0x080063c9
 80062b0:	080063c9 	.word	0x080063c9
 80062b4:	080063c9 	.word	0x080063c9
 80062b8:	080063c9 	.word	0x080063c9
 80062bc:	080063c9 	.word	0x080063c9
 80062c0:	080063c9 	.word	0x080063c9
 80062c4:	080063c9 	.word	0x080063c9
 80062c8:	080063c9 	.word	0x080063c9
 80062cc:	080063c9 	.word	0x080063c9
 80062d0:	080063c9 	.word	0x080063c9
 80062d4:	080063c9 	.word	0x080063c9
 80062d8:	080063c9 	.word	0x080063c9
 80062dc:	080063c9 	.word	0x080063c9
 80062e0:	080063bb 	.word	0x080063bb
 80062e4:	080063c9 	.word	0x080063c9
 80062e8:	080063c9 	.word	0x080063c9
 80062ec:	080063c9 	.word	0x080063c9
 80062f0:	080063c9 	.word	0x080063c9
 80062f4:	080063c9 	.word	0x080063c9
 80062f8:	080063c9 	.word	0x080063c9
 80062fc:	080063c9 	.word	0x080063c9
 8006300:	080063c9 	.word	0x080063c9
 8006304:	080063c9 	.word	0x080063c9
 8006308:	080063c9 	.word	0x080063c9
 800630c:	080063c9 	.word	0x080063c9
 8006310:	080063c9 	.word	0x080063c9
 8006314:	080063c9 	.word	0x080063c9
 8006318:	080063c9 	.word	0x080063c9
 800631c:	080063c9 	.word	0x080063c9
 8006320:	080063c9 	.word	0x080063c9
 8006324:	080063c9 	.word	0x080063c9
 8006328:	080063c9 	.word	0x080063c9
 800632c:	080063c9 	.word	0x080063c9
 8006330:	080063c9 	.word	0x080063c9
 8006334:	080063c9 	.word	0x080063c9
 8006338:	080063c9 	.word	0x080063c9
 800633c:	080063c9 	.word	0x080063c9
 8006340:	080063c9 	.word	0x080063c9
 8006344:	080063c9 	.word	0x080063c9
 8006348:	080063c9 	.word	0x080063c9
 800634c:	080063c9 	.word	0x080063c9
 8006350:	080063c9 	.word	0x080063c9
 8006354:	080063c9 	.word	0x080063c9
 8006358:	080063c9 	.word	0x080063c9
 800635c:	080063c9 	.word	0x080063c9
 8006360:	080063c1 	.word	0x080063c1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006364:	f7fd f93e 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 8006368:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800636a:	e033      	b.n	80063d4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800636c:	f7fd f950 	bl	8003610 <HAL_RCC_GetPCLK2Freq>
 8006370:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006372:	e02f      	b.n	80063d4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006374:	f107 0314 	add.w	r3, r7, #20
 8006378:	4618      	mov	r0, r3
 800637a:	f7fe f863 	bl	8004444 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006382:	e027      	b.n	80063d4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006384:	f107 0308 	add.w	r3, r7, #8
 8006388:	4618      	mov	r0, r3
 800638a:	f7fe f9a7 	bl	80046dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006392:	e01f      	b.n	80063d4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006394:	4b2c      	ldr	r3, [pc, #176]	; (8006448 <UART_SetConfig+0xb50>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0320 	and.w	r3, r3, #32
 800639c:	2b00      	cmp	r3, #0
 800639e:	d009      	beq.n	80063b4 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063a0:	4b29      	ldr	r3, [pc, #164]	; (8006448 <UART_SetConfig+0xb50>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	08db      	lsrs	r3, r3, #3
 80063a6:	f003 0303 	and.w	r3, r3, #3
 80063aa:	4a28      	ldr	r2, [pc, #160]	; (800644c <UART_SetConfig+0xb54>)
 80063ac:	fa22 f303 	lsr.w	r3, r2, r3
 80063b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063b2:	e00f      	b.n	80063d4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80063b4:	4b25      	ldr	r3, [pc, #148]	; (800644c <UART_SetConfig+0xb54>)
 80063b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063b8:	e00c      	b.n	80063d4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063ba:	4b25      	ldr	r3, [pc, #148]	; (8006450 <UART_SetConfig+0xb58>)
 80063bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063be:	e009      	b.n	80063d4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063c6:	e005      	b.n	80063d4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80063d2:	bf00      	nop
    }

    if (pclk != 0U)
 80063d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d021      	beq.n	800641e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	4a1d      	ldr	r2, [pc, #116]	; (8006454 <UART_SetConfig+0xb5c>)
 80063e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063e4:	461a      	mov	r2, r3
 80063e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	085b      	lsrs	r3, r3, #1
 80063f2:	441a      	add	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006402:	2b0f      	cmp	r3, #15
 8006404:	d908      	bls.n	8006418 <UART_SetConfig+0xb20>
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800640c:	d204      	bcs.n	8006418 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006414:	60da      	str	r2, [r3, #12]
 8006416:	e002      	b.n	800641e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800643a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800643e:	4618      	mov	r0, r3
 8006440:	3738      	adds	r7, #56	; 0x38
 8006442:	46bd      	mov	sp, r7
 8006444:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006448:	58024400 	.word	0x58024400
 800644c:	03d09000 	.word	0x03d09000
 8006450:	003d0900 	.word	0x003d0900
 8006454:	08009410 	.word	0x08009410

08006458 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00a      	beq.n	8006482 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a8:	f003 0304 	and.w	r3, r3, #4
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00a      	beq.n	80064c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ca:	f003 0308 	and.w	r3, r3, #8
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ec:	f003 0310 	and.w	r3, r3, #16
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00a      	beq.n	800650a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01a      	beq.n	800656e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006556:	d10a      	bne.n	800656e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	605a      	str	r2, [r3, #4]
  }
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af02      	add	r7, sp, #8
 80065a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80065ac:	f7fb faba 	bl	8001b24 <HAL_GetTick>
 80065b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0308 	and.w	r3, r3, #8
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d10e      	bne.n	80065de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f82c 	bl	800662c <UART_WaitOnFlagUntilTimeout>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e022      	b.n	8006624 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d10e      	bne.n	800660a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f816 	bl	800662c <UART_WaitOnFlagUntilTimeout>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e00c      	b.n	8006624 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2220      	movs	r2, #32
 800660e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2220      	movs	r2, #32
 8006616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	603b      	str	r3, [r7, #0]
 8006638:	4613      	mov	r3, r2
 800663a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800663c:	e062      	b.n	8006704 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006644:	d05e      	beq.n	8006704 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006646:	f7fb fa6d 	bl	8001b24 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	429a      	cmp	r2, r3
 8006654:	d302      	bcc.n	800665c <UART_WaitOnFlagUntilTimeout+0x30>
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d11d      	bne.n	8006698 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800666a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 0201 	bic.w	r2, r2, #1
 800667a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2220      	movs	r2, #32
 8006688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e045      	b.n	8006724 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0304 	and.w	r3, r3, #4
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d02e      	beq.n	8006704 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b4:	d126      	bne.n	8006704 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066be:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066ce:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 0201 	bic.w	r2, r2, #1
 80066de:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e00f      	b.n	8006724 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	69da      	ldr	r2, [r3, #28]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	4013      	ands	r3, r2
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	429a      	cmp	r2, r3
 8006712:	bf0c      	ite	eq
 8006714:	2301      	moveq	r3, #1
 8006716:	2300      	movne	r3, #0
 8006718:	b2db      	uxtb	r3, r3
 800671a:	461a      	mov	r2, r3
 800671c:	79fb      	ldrb	r3, [r7, #7]
 800671e:	429a      	cmp	r2, r3
 8006720:	d08d      	beq.n	800663e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006742:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6899      	ldr	r1, [r3, #8]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	4b08      	ldr	r3, [pc, #32]	; (8006770 <UART_EndRxTransfer+0x44>)
 8006750:	400b      	ands	r3, r1
 8006752:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2220      	movs	r2, #32
 8006758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	effffffe 	.word	0xeffffffe

08006774 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006780:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7ff f8a6 	bl	80058e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067b6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7fa ff4a 	bl	8001660 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067cc:	bf00      	nop
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067e2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067ea:	2b22      	cmp	r3, #34	; 0x22
 80067ec:	d13b      	bne.n	8006866 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80067f6:	89bb      	ldrh	r3, [r7, #12]
 80067f8:	b2d9      	uxtb	r1, r3
 80067fa:	89fb      	ldrh	r3, [r7, #14]
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006802:	400a      	ands	r2, r1
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006818:	b29b      	uxth	r3, r3
 800681a:	3b01      	subs	r3, #1
 800681c:	b29a      	uxth	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800682a:	b29b      	uxth	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d122      	bne.n	8006876 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800683e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689a      	ldr	r2, [r3, #8]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0201 	bic.w	r2, r2, #1
 800684e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2220      	movs	r2, #32
 8006854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fa ff0e 	bl	8001680 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006864:	e007      	b.n	8006876 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	699a      	ldr	r2, [r3, #24]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f042 0208 	orr.w	r2, r2, #8
 8006874:	619a      	str	r2, [r3, #24]
}
 8006876:	bf00      	nop
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800688c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006894:	2b22      	cmp	r3, #34	; 0x22
 8006896:	d13b      	bne.n	8006910 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80068a6:	89ba      	ldrh	r2, [r7, #12]
 80068a8:	89fb      	ldrh	r3, [r7, #14]
 80068aa:	4013      	ands	r3, r2
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b6:	1c9a      	adds	r2, r3, #2
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d122      	bne.n	8006920 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80068e8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 0201 	bic.w	r2, r2, #1
 80068f8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2220      	movs	r2, #32
 80068fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7fa feb9 	bl	8001680 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800690e:	e007      	b.n	8006920 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f042 0208 	orr.w	r2, r2, #8
 800691e:	619a      	str	r2, [r3, #24]
}
 8006920:	bf00      	nop
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006936:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800693e:	2b22      	cmp	r3, #34	; 0x22
 8006940:	d166      	bne.n	8006a10 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006948:	81fb      	strh	r3, [r7, #14]
 800694a:	e03d      	b.n	80069c8 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006954:	893b      	ldrh	r3, [r7, #8]
 8006956:	b2d9      	uxtb	r1, r3
 8006958:	89bb      	ldrh	r3, [r7, #12]
 800695a:	b2da      	uxtb	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006960:	400a      	ands	r2, r1
 8006962:	b2d2      	uxtb	r2, r2
 8006964:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006976:	b29b      	uxth	r3, r3
 8006978:	3b01      	subs	r3, #1
 800697a:	b29a      	uxth	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006988:	b29b      	uxth	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d119      	bne.n	80069c2 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800699c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6899      	ldr	r1, [r3, #8]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	4b1f      	ldr	r3, [pc, #124]	; (8006a28 <UART_RxISR_8BIT_FIFOEN+0x100>)
 80069aa:	400b      	ands	r3, r1
 80069ac:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2220      	movs	r2, #32
 80069b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7fa fe5f 	bl	8001680 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80069c2:	89fb      	ldrh	r3, [r7, #14]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	81fb      	strh	r3, [r7, #14]
 80069c8:	89fb      	ldrh	r3, [r7, #14]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1be      	bne.n	800694c <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069d4:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80069d6:	897b      	ldrh	r3, [r7, #10]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d021      	beq.n	8006a20 <UART_RxISR_8BIT_FIFOEN+0xf8>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80069e2:	897a      	ldrh	r2, [r7, #10]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d21b      	bcs.n	8006a20 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689a      	ldr	r2, [r3, #8]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80069f6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a0c      	ldr	r2, [pc, #48]	; (8006a2c <UART_RxISR_8BIT_FIFOEN+0x104>)
 80069fc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f042 0220 	orr.w	r2, r2, #32
 8006a0c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a0e:	e007      	b.n	8006a20 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699a      	ldr	r2, [r3, #24]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0208 	orr.w	r2, r2, #8
 8006a1e:	619a      	str	r2, [r3, #24]
}
 8006a20:	bf00      	nop
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	effffffe 	.word	0xeffffffe
 8006a2c:	080067d5 	.word	0x080067d5

08006a30 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a3e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a46:	2b22      	cmp	r3, #34	; 0x22
 8006a48:	d166      	bne.n	8006b18 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a50:	82fb      	strh	r3, [r7, #22]
 8006a52:	e03d      	b.n	8006ad0 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5a:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a60:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006a62:	8a3a      	ldrh	r2, [r7, #16]
 8006a64:	8abb      	ldrh	r3, [r7, #20]
 8006a66:	4013      	ands	r3, r2
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a72:	1c9a      	adds	r2, r3, #2
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	3b01      	subs	r3, #1
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d119      	bne.n	8006aca <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006aa4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6899      	ldr	r1, [r3, #8]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	4b1f      	ldr	r3, [pc, #124]	; (8006b30 <UART_RxISR_16BIT_FIFOEN+0x100>)
 8006ab2:	400b      	ands	r3, r1
 8006ab4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7fa fddb 	bl	8001680 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006aca:	8afb      	ldrh	r3, [r7, #22]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	82fb      	strh	r3, [r7, #22]
 8006ad0:	8afb      	ldrh	r3, [r7, #22]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1be      	bne.n	8006a54 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006adc:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006ade:	8a7b      	ldrh	r3, [r7, #18]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d021      	beq.n	8006b28 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006aea:	8a7a      	ldrh	r2, [r7, #18]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d21b      	bcs.n	8006b28 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006afe:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a0c      	ldr	r2, [pc, #48]	; (8006b34 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8006b04:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 0220 	orr.w	r2, r2, #32
 8006b14:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b16:	e007      	b.n	8006b28 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699a      	ldr	r2, [r3, #24]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0208 	orr.w	r2, r2, #8
 8006b26:	619a      	str	r2, [r3, #24]
}
 8006b28:	bf00      	nop
 8006b2a:	3718      	adds	r7, #24
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	effffffe 	.word	0xeffffffe
 8006b34:	0800687f 	.word	0x0800687f

08006b38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <HAL_UARTEx_DisableFifoMode+0x16>
 8006b86:	2302      	movs	r3, #2
 8006b88:	e027      	b.n	8006bda <HAL_UARTEx_DisableFifoMode+0x66>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2224      	movs	r2, #36	; 0x24
 8006b96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0201 	bic.w	r2, r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e02d      	b.n	8006c5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2224      	movs	r2, #36	; 0x24
 8006c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0201 	bic.w	r2, r2, #1
 8006c24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f850 	bl	8006ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e02d      	b.n	8006cd6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2224      	movs	r2, #36	; 0x24
 8006c86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0201 	bic.w	r2, r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f812 	bl	8006ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
	...

08006ce0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b089      	sub	sp, #36	; 0x24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006ce8:	4a2f      	ldr	r2, [pc, #188]	; (8006da8 <UARTEx_SetNbDataToProcess+0xc8>)
 8006cea:	f107 0314 	add.w	r3, r7, #20
 8006cee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cf2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006cf6:	4a2d      	ldr	r2, [pc, #180]	; (8006dac <UARTEx_SetNbDataToProcess+0xcc>)
 8006cf8:	f107 030c 	add.w	r3, r7, #12
 8006cfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d00:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d108      	bne.n	8006d1e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d1c:	e03d      	b.n	8006d9a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d1e:	2310      	movs	r3, #16
 8006d20:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d22:	2310      	movs	r3, #16
 8006d24:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	0e5b      	lsrs	r3, r3, #25
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	f003 0307 	and.w	r3, r3, #7
 8006d34:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	0f5b      	lsrs	r3, r3, #29
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	f003 0307 	and.w	r3, r3, #7
 8006d44:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006d46:	7fbb      	ldrb	r3, [r7, #30]
 8006d48:	7f3a      	ldrb	r2, [r7, #28]
 8006d4a:	f107 0120 	add.w	r1, r7, #32
 8006d4e:	440a      	add	r2, r1
 8006d50:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006d54:	fb02 f303 	mul.w	r3, r2, r3
 8006d58:	7f3a      	ldrb	r2, [r7, #28]
 8006d5a:	f107 0120 	add.w	r1, r7, #32
 8006d5e:	440a      	add	r2, r1
 8006d60:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006d64:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006d70:	7ffb      	ldrb	r3, [r7, #31]
 8006d72:	7f7a      	ldrb	r2, [r7, #29]
 8006d74:	f107 0120 	add.w	r1, r7, #32
 8006d78:	440a      	add	r2, r1
 8006d7a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006d7e:	fb02 f303 	mul.w	r3, r2, r3
 8006d82:	7f7a      	ldrb	r2, [r7, #29]
 8006d84:	f107 0120 	add.w	r1, r7, #32
 8006d88:	440a      	add	r2, r1
 8006d8a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006d8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d9a:	bf00      	nop
 8006d9c:	3724      	adds	r7, #36	; 0x24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	080093e4 	.word	0x080093e4
 8006dac:	080093ec 	.word	0x080093ec

08006db0 <arm_mean_f32>:
 8006db0:	b430      	push	{r4, r5}
 8006db2:	088d      	lsrs	r5, r1, #2
 8006db4:	d02d      	beq.n	8006e12 <arm_mean_f32+0x62>
 8006db6:	f100 0310 	add.w	r3, r0, #16
 8006dba:	462c      	mov	r4, r5
 8006dbc:	eddf 7a16 	vldr	s15, [pc, #88]	; 8006e18 <arm_mean_f32+0x68>
 8006dc0:	ed13 7a04 	vldr	s14, [r3, #-16]
 8006dc4:	3c01      	subs	r4, #1
 8006dc6:	ed13 6a03 	vldr	s12, [r3, #-12]
 8006dca:	f103 0310 	add.w	r3, r3, #16
 8006dce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dd2:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 8006dd6:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 8006dda:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006de6:	d1eb      	bne.n	8006dc0 <arm_mean_f32+0x10>
 8006de8:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8006dec:	f011 0303 	ands.w	r3, r1, #3
 8006df0:	d005      	beq.n	8006dfe <arm_mean_f32+0x4e>
 8006df2:	ecb0 7a01 	vldmia	r0!, {s14}
 8006df6:	3b01      	subs	r3, #1
 8006df8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006dfc:	d1f9      	bne.n	8006df2 <arm_mean_f32+0x42>
 8006dfe:	ee07 1a10 	vmov	s14, r1
 8006e02:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006e06:	bc30      	pop	{r4, r5}
 8006e08:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006e0c:	edc2 6a00 	vstr	s13, [r2]
 8006e10:	4770      	bx	lr
 8006e12:	eddf 7a01 	vldr	s15, [pc, #4]	; 8006e18 <arm_mean_f32+0x68>
 8006e16:	e7e9      	b.n	8006dec <arm_mean_f32+0x3c>
 8006e18:	00000000 	.word	0x00000000

08006e1c <arm_max_f32>:
 8006e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e20:	1e4d      	subs	r5, r1, #1
 8006e22:	f100 0c04 	add.w	ip, r0, #4
 8006e26:	edd0 7a00 	vldr	s15, [r0]
 8006e2a:	ea5f 0995 	movs.w	r9, r5, lsr #2
 8006e2e:	d056      	beq.n	8006ede <arm_max_f32+0xc2>
 8006e30:	3014      	adds	r0, #20
 8006e32:	46c8      	mov	r8, r9
 8006e34:	2404      	movs	r4, #4
 8006e36:	2600      	movs	r6, #0
 8006e38:	ed10 6a04 	vldr	s12, [r0, #-16]
 8006e3c:	f1a4 0a03 	sub.w	sl, r4, #3
 8006e40:	ed50 6a03 	vldr	s13, [r0, #-12]
 8006e44:	f1a4 0e02 	sub.w	lr, r4, #2
 8006e48:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8006e4c:	ed10 7a02 	vldr	s14, [r0, #-8]
 8006e50:	ed50 5a01 	vldr	s11, [r0, #-4]
 8006e54:	1e67      	subs	r7, r4, #1
 8006e56:	3010      	adds	r0, #16
 8006e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e5c:	bfc8      	it	gt
 8006e5e:	eef0 7a46 	vmovgt.f32	s15, s12
 8006e62:	bfc8      	it	gt
 8006e64:	4656      	movgt	r6, sl
 8006e66:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e6e:	bf48      	it	mi
 8006e70:	eef0 7a66 	vmovmi.f32	s15, s13
 8006e74:	bf48      	it	mi
 8006e76:	4676      	movmi	r6, lr
 8006e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e80:	bf48      	it	mi
 8006e82:	eef0 7a47 	vmovmi.f32	s15, s14
 8006e86:	bf48      	it	mi
 8006e88:	463e      	movmi	r6, r7
 8006e8a:	eef4 7ae5 	vcmpe.f32	s15, s11
 8006e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e92:	bf48      	it	mi
 8006e94:	4626      	movmi	r6, r4
 8006e96:	bf48      	it	mi
 8006e98:	eef0 7a65 	vmovmi.f32	s15, s11
 8006e9c:	f1b8 0801 	subs.w	r8, r8, #1
 8006ea0:	f104 0404 	add.w	r4, r4, #4
 8006ea4:	d1c8      	bne.n	8006e38 <arm_max_f32+0x1c>
 8006ea6:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 8006eaa:	f015 0003 	ands.w	r0, r5, #3
 8006eae:	d018      	beq.n	8006ee2 <arm_max_f32+0xc6>
 8006eb0:	1a08      	subs	r0, r1, r0
 8006eb2:	ecbc 7a01 	vldmia	ip!, {s14}
 8006eb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ebe:	bfc8      	it	gt
 8006ec0:	4606      	movgt	r6, r0
 8006ec2:	f100 0001 	add.w	r0, r0, #1
 8006ec6:	bfd8      	it	le
 8006ec8:	eeb0 7a67 	vmovle.f32	s14, s15
 8006ecc:	4281      	cmp	r1, r0
 8006ece:	eef0 7a47 	vmov.f32	s15, s14
 8006ed2:	d1ee      	bne.n	8006eb2 <arm_max_f32+0x96>
 8006ed4:	ed82 7a00 	vstr	s14, [r2]
 8006ed8:	601e      	str	r6, [r3, #0]
 8006eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ede:	464e      	mov	r6, r9
 8006ee0:	e7e3      	b.n	8006eaa <arm_max_f32+0x8e>
 8006ee2:	eeb0 7a67 	vmov.f32	s14, s15
 8006ee6:	e7f5      	b.n	8006ed4 <arm_max_f32+0xb8>

08006ee8 <__errno>:
 8006ee8:	4b01      	ldr	r3, [pc, #4]	; (8006ef0 <__errno+0x8>)
 8006eea:	6818      	ldr	r0, [r3, #0]
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	20000014 	.word	0x20000014

08006ef4 <__libc_init_array>:
 8006ef4:	b570      	push	{r4, r5, r6, lr}
 8006ef6:	4e0d      	ldr	r6, [pc, #52]	; (8006f2c <__libc_init_array+0x38>)
 8006ef8:	4c0d      	ldr	r4, [pc, #52]	; (8006f30 <__libc_init_array+0x3c>)
 8006efa:	1ba4      	subs	r4, r4, r6
 8006efc:	10a4      	asrs	r4, r4, #2
 8006efe:	2500      	movs	r5, #0
 8006f00:	42a5      	cmp	r5, r4
 8006f02:	d109      	bne.n	8006f18 <__libc_init_array+0x24>
 8006f04:	4e0b      	ldr	r6, [pc, #44]	; (8006f34 <__libc_init_array+0x40>)
 8006f06:	4c0c      	ldr	r4, [pc, #48]	; (8006f38 <__libc_init_array+0x44>)
 8006f08:	f002 fa18 	bl	800933c <_init>
 8006f0c:	1ba4      	subs	r4, r4, r6
 8006f0e:	10a4      	asrs	r4, r4, #2
 8006f10:	2500      	movs	r5, #0
 8006f12:	42a5      	cmp	r5, r4
 8006f14:	d105      	bne.n	8006f22 <__libc_init_array+0x2e>
 8006f16:	bd70      	pop	{r4, r5, r6, pc}
 8006f18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f1c:	4798      	blx	r3
 8006f1e:	3501      	adds	r5, #1
 8006f20:	e7ee      	b.n	8006f00 <__libc_init_array+0xc>
 8006f22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f26:	4798      	blx	r3
 8006f28:	3501      	adds	r5, #1
 8006f2a:	e7f2      	b.n	8006f12 <__libc_init_array+0x1e>
 8006f2c:	080096d8 	.word	0x080096d8
 8006f30:	080096d8 	.word	0x080096d8
 8006f34:	080096d8 	.word	0x080096d8
 8006f38:	080096dc 	.word	0x080096dc

08006f3c <malloc>:
 8006f3c:	4b02      	ldr	r3, [pc, #8]	; (8006f48 <malloc+0xc>)
 8006f3e:	4601      	mov	r1, r0
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	f000 b861 	b.w	8007008 <_malloc_r>
 8006f46:	bf00      	nop
 8006f48:	20000014 	.word	0x20000014

08006f4c <free>:
 8006f4c:	4b02      	ldr	r3, [pc, #8]	; (8006f58 <free+0xc>)
 8006f4e:	4601      	mov	r1, r0
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	f000 b80b 	b.w	8006f6c <_free_r>
 8006f56:	bf00      	nop
 8006f58:	20000014 	.word	0x20000014

08006f5c <memset>:
 8006f5c:	4402      	add	r2, r0
 8006f5e:	4603      	mov	r3, r0
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d100      	bne.n	8006f66 <memset+0xa>
 8006f64:	4770      	bx	lr
 8006f66:	f803 1b01 	strb.w	r1, [r3], #1
 8006f6a:	e7f9      	b.n	8006f60 <memset+0x4>

08006f6c <_free_r>:
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	4605      	mov	r5, r0
 8006f70:	2900      	cmp	r1, #0
 8006f72:	d045      	beq.n	8007000 <_free_r+0x94>
 8006f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f78:	1f0c      	subs	r4, r1, #4
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	bfb8      	it	lt
 8006f7e:	18e4      	addlt	r4, r4, r3
 8006f80:	f001 faf7 	bl	8008572 <__malloc_lock>
 8006f84:	4a1f      	ldr	r2, [pc, #124]	; (8007004 <_free_r+0x98>)
 8006f86:	6813      	ldr	r3, [r2, #0]
 8006f88:	4610      	mov	r0, r2
 8006f8a:	b933      	cbnz	r3, 8006f9a <_free_r+0x2e>
 8006f8c:	6063      	str	r3, [r4, #4]
 8006f8e:	6014      	str	r4, [r2, #0]
 8006f90:	4628      	mov	r0, r5
 8006f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f96:	f001 baed 	b.w	8008574 <__malloc_unlock>
 8006f9a:	42a3      	cmp	r3, r4
 8006f9c:	d90c      	bls.n	8006fb8 <_free_r+0x4c>
 8006f9e:	6821      	ldr	r1, [r4, #0]
 8006fa0:	1862      	adds	r2, r4, r1
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	bf04      	itt	eq
 8006fa6:	681a      	ldreq	r2, [r3, #0]
 8006fa8:	685b      	ldreq	r3, [r3, #4]
 8006faa:	6063      	str	r3, [r4, #4]
 8006fac:	bf04      	itt	eq
 8006fae:	1852      	addeq	r2, r2, r1
 8006fb0:	6022      	streq	r2, [r4, #0]
 8006fb2:	6004      	str	r4, [r0, #0]
 8006fb4:	e7ec      	b.n	8006f90 <_free_r+0x24>
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	b10a      	cbz	r2, 8006fc0 <_free_r+0x54>
 8006fbc:	42a2      	cmp	r2, r4
 8006fbe:	d9fa      	bls.n	8006fb6 <_free_r+0x4a>
 8006fc0:	6819      	ldr	r1, [r3, #0]
 8006fc2:	1858      	adds	r0, r3, r1
 8006fc4:	42a0      	cmp	r0, r4
 8006fc6:	d10b      	bne.n	8006fe0 <_free_r+0x74>
 8006fc8:	6820      	ldr	r0, [r4, #0]
 8006fca:	4401      	add	r1, r0
 8006fcc:	1858      	adds	r0, r3, r1
 8006fce:	4282      	cmp	r2, r0
 8006fd0:	6019      	str	r1, [r3, #0]
 8006fd2:	d1dd      	bne.n	8006f90 <_free_r+0x24>
 8006fd4:	6810      	ldr	r0, [r2, #0]
 8006fd6:	6852      	ldr	r2, [r2, #4]
 8006fd8:	605a      	str	r2, [r3, #4]
 8006fda:	4401      	add	r1, r0
 8006fdc:	6019      	str	r1, [r3, #0]
 8006fde:	e7d7      	b.n	8006f90 <_free_r+0x24>
 8006fe0:	d902      	bls.n	8006fe8 <_free_r+0x7c>
 8006fe2:	230c      	movs	r3, #12
 8006fe4:	602b      	str	r3, [r5, #0]
 8006fe6:	e7d3      	b.n	8006f90 <_free_r+0x24>
 8006fe8:	6820      	ldr	r0, [r4, #0]
 8006fea:	1821      	adds	r1, r4, r0
 8006fec:	428a      	cmp	r2, r1
 8006fee:	bf04      	itt	eq
 8006ff0:	6811      	ldreq	r1, [r2, #0]
 8006ff2:	6852      	ldreq	r2, [r2, #4]
 8006ff4:	6062      	str	r2, [r4, #4]
 8006ff6:	bf04      	itt	eq
 8006ff8:	1809      	addeq	r1, r1, r0
 8006ffa:	6021      	streq	r1, [r4, #0]
 8006ffc:	605c      	str	r4, [r3, #4]
 8006ffe:	e7c7      	b.n	8006f90 <_free_r+0x24>
 8007000:	bd38      	pop	{r3, r4, r5, pc}
 8007002:	bf00      	nop
 8007004:	20000240 	.word	0x20000240

08007008 <_malloc_r>:
 8007008:	b570      	push	{r4, r5, r6, lr}
 800700a:	1ccd      	adds	r5, r1, #3
 800700c:	f025 0503 	bic.w	r5, r5, #3
 8007010:	3508      	adds	r5, #8
 8007012:	2d0c      	cmp	r5, #12
 8007014:	bf38      	it	cc
 8007016:	250c      	movcc	r5, #12
 8007018:	2d00      	cmp	r5, #0
 800701a:	4606      	mov	r6, r0
 800701c:	db01      	blt.n	8007022 <_malloc_r+0x1a>
 800701e:	42a9      	cmp	r1, r5
 8007020:	d903      	bls.n	800702a <_malloc_r+0x22>
 8007022:	230c      	movs	r3, #12
 8007024:	6033      	str	r3, [r6, #0]
 8007026:	2000      	movs	r0, #0
 8007028:	bd70      	pop	{r4, r5, r6, pc}
 800702a:	f001 faa2 	bl	8008572 <__malloc_lock>
 800702e:	4a21      	ldr	r2, [pc, #132]	; (80070b4 <_malloc_r+0xac>)
 8007030:	6814      	ldr	r4, [r2, #0]
 8007032:	4621      	mov	r1, r4
 8007034:	b991      	cbnz	r1, 800705c <_malloc_r+0x54>
 8007036:	4c20      	ldr	r4, [pc, #128]	; (80070b8 <_malloc_r+0xb0>)
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	b91b      	cbnz	r3, 8007044 <_malloc_r+0x3c>
 800703c:	4630      	mov	r0, r6
 800703e:	f000 fc77 	bl	8007930 <_sbrk_r>
 8007042:	6020      	str	r0, [r4, #0]
 8007044:	4629      	mov	r1, r5
 8007046:	4630      	mov	r0, r6
 8007048:	f000 fc72 	bl	8007930 <_sbrk_r>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d124      	bne.n	800709a <_malloc_r+0x92>
 8007050:	230c      	movs	r3, #12
 8007052:	6033      	str	r3, [r6, #0]
 8007054:	4630      	mov	r0, r6
 8007056:	f001 fa8d 	bl	8008574 <__malloc_unlock>
 800705a:	e7e4      	b.n	8007026 <_malloc_r+0x1e>
 800705c:	680b      	ldr	r3, [r1, #0]
 800705e:	1b5b      	subs	r3, r3, r5
 8007060:	d418      	bmi.n	8007094 <_malloc_r+0x8c>
 8007062:	2b0b      	cmp	r3, #11
 8007064:	d90f      	bls.n	8007086 <_malloc_r+0x7e>
 8007066:	600b      	str	r3, [r1, #0]
 8007068:	50cd      	str	r5, [r1, r3]
 800706a:	18cc      	adds	r4, r1, r3
 800706c:	4630      	mov	r0, r6
 800706e:	f001 fa81 	bl	8008574 <__malloc_unlock>
 8007072:	f104 000b 	add.w	r0, r4, #11
 8007076:	1d23      	adds	r3, r4, #4
 8007078:	f020 0007 	bic.w	r0, r0, #7
 800707c:	1ac3      	subs	r3, r0, r3
 800707e:	d0d3      	beq.n	8007028 <_malloc_r+0x20>
 8007080:	425a      	negs	r2, r3
 8007082:	50e2      	str	r2, [r4, r3]
 8007084:	e7d0      	b.n	8007028 <_malloc_r+0x20>
 8007086:	428c      	cmp	r4, r1
 8007088:	684b      	ldr	r3, [r1, #4]
 800708a:	bf16      	itet	ne
 800708c:	6063      	strne	r3, [r4, #4]
 800708e:	6013      	streq	r3, [r2, #0]
 8007090:	460c      	movne	r4, r1
 8007092:	e7eb      	b.n	800706c <_malloc_r+0x64>
 8007094:	460c      	mov	r4, r1
 8007096:	6849      	ldr	r1, [r1, #4]
 8007098:	e7cc      	b.n	8007034 <_malloc_r+0x2c>
 800709a:	1cc4      	adds	r4, r0, #3
 800709c:	f024 0403 	bic.w	r4, r4, #3
 80070a0:	42a0      	cmp	r0, r4
 80070a2:	d005      	beq.n	80070b0 <_malloc_r+0xa8>
 80070a4:	1a21      	subs	r1, r4, r0
 80070a6:	4630      	mov	r0, r6
 80070a8:	f000 fc42 	bl	8007930 <_sbrk_r>
 80070ac:	3001      	adds	r0, #1
 80070ae:	d0cf      	beq.n	8007050 <_malloc_r+0x48>
 80070b0:	6025      	str	r5, [r4, #0]
 80070b2:	e7db      	b.n	800706c <_malloc_r+0x64>
 80070b4:	20000240 	.word	0x20000240
 80070b8:	20000244 	.word	0x20000244

080070bc <__cvt>:
 80070bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070be:	ed2d 8b02 	vpush	{d8}
 80070c2:	eeb0 8b40 	vmov.f64	d8, d0
 80070c6:	b085      	sub	sp, #20
 80070c8:	4617      	mov	r7, r2
 80070ca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80070cc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80070ce:	ee18 2a90 	vmov	r2, s17
 80070d2:	f025 0520 	bic.w	r5, r5, #32
 80070d6:	2a00      	cmp	r2, #0
 80070d8:	bfb6      	itet	lt
 80070da:	222d      	movlt	r2, #45	; 0x2d
 80070dc:	2200      	movge	r2, #0
 80070de:	eeb1 8b40 	vneglt.f64	d8, d0
 80070e2:	2d46      	cmp	r5, #70	; 0x46
 80070e4:	460c      	mov	r4, r1
 80070e6:	701a      	strb	r2, [r3, #0]
 80070e8:	d004      	beq.n	80070f4 <__cvt+0x38>
 80070ea:	2d45      	cmp	r5, #69	; 0x45
 80070ec:	d100      	bne.n	80070f0 <__cvt+0x34>
 80070ee:	3401      	adds	r4, #1
 80070f0:	2102      	movs	r1, #2
 80070f2:	e000      	b.n	80070f6 <__cvt+0x3a>
 80070f4:	2103      	movs	r1, #3
 80070f6:	ab03      	add	r3, sp, #12
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	ab02      	add	r3, sp, #8
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	4622      	mov	r2, r4
 8007100:	4633      	mov	r3, r6
 8007102:	eeb0 0b48 	vmov.f64	d0, d8
 8007106:	f000 fccf 	bl	8007aa8 <_dtoa_r>
 800710a:	2d47      	cmp	r5, #71	; 0x47
 800710c:	d101      	bne.n	8007112 <__cvt+0x56>
 800710e:	07fb      	lsls	r3, r7, #31
 8007110:	d51e      	bpl.n	8007150 <__cvt+0x94>
 8007112:	2d46      	cmp	r5, #70	; 0x46
 8007114:	eb00 0304 	add.w	r3, r0, r4
 8007118:	d10c      	bne.n	8007134 <__cvt+0x78>
 800711a:	7802      	ldrb	r2, [r0, #0]
 800711c:	2a30      	cmp	r2, #48	; 0x30
 800711e:	d107      	bne.n	8007130 <__cvt+0x74>
 8007120:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007128:	bf1c      	itt	ne
 800712a:	f1c4 0401 	rsbne	r4, r4, #1
 800712e:	6034      	strne	r4, [r6, #0]
 8007130:	6832      	ldr	r2, [r6, #0]
 8007132:	4413      	add	r3, r2
 8007134:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800713c:	d007      	beq.n	800714e <__cvt+0x92>
 800713e:	2130      	movs	r1, #48	; 0x30
 8007140:	9a03      	ldr	r2, [sp, #12]
 8007142:	429a      	cmp	r2, r3
 8007144:	d204      	bcs.n	8007150 <__cvt+0x94>
 8007146:	1c54      	adds	r4, r2, #1
 8007148:	9403      	str	r4, [sp, #12]
 800714a:	7011      	strb	r1, [r2, #0]
 800714c:	e7f8      	b.n	8007140 <__cvt+0x84>
 800714e:	9303      	str	r3, [sp, #12]
 8007150:	9b03      	ldr	r3, [sp, #12]
 8007152:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007154:	1a1b      	subs	r3, r3, r0
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	b005      	add	sp, #20
 800715a:	ecbd 8b02 	vpop	{d8}
 800715e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007160 <__exponent>:
 8007160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007162:	2900      	cmp	r1, #0
 8007164:	4604      	mov	r4, r0
 8007166:	bfba      	itte	lt
 8007168:	4249      	neglt	r1, r1
 800716a:	232d      	movlt	r3, #45	; 0x2d
 800716c:	232b      	movge	r3, #43	; 0x2b
 800716e:	2909      	cmp	r1, #9
 8007170:	f804 2b02 	strb.w	r2, [r4], #2
 8007174:	7043      	strb	r3, [r0, #1]
 8007176:	dd20      	ble.n	80071ba <__exponent+0x5a>
 8007178:	f10d 0307 	add.w	r3, sp, #7
 800717c:	461f      	mov	r7, r3
 800717e:	260a      	movs	r6, #10
 8007180:	fb91 f5f6 	sdiv	r5, r1, r6
 8007184:	fb06 1115 	mls	r1, r6, r5, r1
 8007188:	3130      	adds	r1, #48	; 0x30
 800718a:	2d09      	cmp	r5, #9
 800718c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007190:	f103 32ff 	add.w	r2, r3, #4294967295
 8007194:	4629      	mov	r1, r5
 8007196:	dc09      	bgt.n	80071ac <__exponent+0x4c>
 8007198:	3130      	adds	r1, #48	; 0x30
 800719a:	3b02      	subs	r3, #2
 800719c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80071a0:	42bb      	cmp	r3, r7
 80071a2:	4622      	mov	r2, r4
 80071a4:	d304      	bcc.n	80071b0 <__exponent+0x50>
 80071a6:	1a10      	subs	r0, r2, r0
 80071a8:	b003      	add	sp, #12
 80071aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ac:	4613      	mov	r3, r2
 80071ae:	e7e7      	b.n	8007180 <__exponent+0x20>
 80071b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071b4:	f804 2b01 	strb.w	r2, [r4], #1
 80071b8:	e7f2      	b.n	80071a0 <__exponent+0x40>
 80071ba:	2330      	movs	r3, #48	; 0x30
 80071bc:	4419      	add	r1, r3
 80071be:	7083      	strb	r3, [r0, #2]
 80071c0:	1d02      	adds	r2, r0, #4
 80071c2:	70c1      	strb	r1, [r0, #3]
 80071c4:	e7ef      	b.n	80071a6 <__exponent+0x46>
	...

080071c8 <_printf_float>:
 80071c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071cc:	b08d      	sub	sp, #52	; 0x34
 80071ce:	460c      	mov	r4, r1
 80071d0:	4616      	mov	r6, r2
 80071d2:	461f      	mov	r7, r3
 80071d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80071d8:	4605      	mov	r5, r0
 80071da:	f001 f9b1 	bl	8008540 <_localeconv_r>
 80071de:	f8d0 b000 	ldr.w	fp, [r0]
 80071e2:	4658      	mov	r0, fp
 80071e4:	f7f9 f87c 	bl	80002e0 <strlen>
 80071e8:	2300      	movs	r3, #0
 80071ea:	930a      	str	r3, [sp, #40]	; 0x28
 80071ec:	f8d8 3000 	ldr.w	r3, [r8]
 80071f0:	9005      	str	r0, [sp, #20]
 80071f2:	3307      	adds	r3, #7
 80071f4:	f023 0307 	bic.w	r3, r3, #7
 80071f8:	f103 0108 	add.w	r1, r3, #8
 80071fc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007200:	6822      	ldr	r2, [r4, #0]
 8007202:	f8c8 1000 	str.w	r1, [r8]
 8007206:	e9d3 0100 	ldrd	r0, r1, [r3]
 800720a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800720e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8007498 <_printf_float+0x2d0>
 8007212:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007216:	eeb0 6bc0 	vabs.f64	d6, d0
 800721a:	eeb4 6b47 	vcmp.f64	d6, d7
 800721e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007222:	dd24      	ble.n	800726e <_printf_float+0xa6>
 8007224:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800722c:	d502      	bpl.n	8007234 <_printf_float+0x6c>
 800722e:	232d      	movs	r3, #45	; 0x2d
 8007230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007234:	499a      	ldr	r1, [pc, #616]	; (80074a0 <_printf_float+0x2d8>)
 8007236:	4b9b      	ldr	r3, [pc, #620]	; (80074a4 <_printf_float+0x2dc>)
 8007238:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800723c:	bf8c      	ite	hi
 800723e:	4688      	movhi	r8, r1
 8007240:	4698      	movls	r8, r3
 8007242:	f022 0204 	bic.w	r2, r2, #4
 8007246:	2303      	movs	r3, #3
 8007248:	6123      	str	r3, [r4, #16]
 800724a:	6022      	str	r2, [r4, #0]
 800724c:	f04f 0a00 	mov.w	sl, #0
 8007250:	9700      	str	r7, [sp, #0]
 8007252:	4633      	mov	r3, r6
 8007254:	aa0b      	add	r2, sp, #44	; 0x2c
 8007256:	4621      	mov	r1, r4
 8007258:	4628      	mov	r0, r5
 800725a:	f000 f9e1 	bl	8007620 <_printf_common>
 800725e:	3001      	adds	r0, #1
 8007260:	f040 8089 	bne.w	8007376 <_printf_float+0x1ae>
 8007264:	f04f 30ff 	mov.w	r0, #4294967295
 8007268:	b00d      	add	sp, #52	; 0x34
 800726a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726e:	eeb4 0b40 	vcmp.f64	d0, d0
 8007272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007276:	d702      	bvc.n	800727e <_printf_float+0xb6>
 8007278:	498b      	ldr	r1, [pc, #556]	; (80074a8 <_printf_float+0x2e0>)
 800727a:	4b8c      	ldr	r3, [pc, #560]	; (80074ac <_printf_float+0x2e4>)
 800727c:	e7dc      	b.n	8007238 <_printf_float+0x70>
 800727e:	6861      	ldr	r1, [r4, #4]
 8007280:	1c4b      	adds	r3, r1, #1
 8007282:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007286:	ab0a      	add	r3, sp, #40	; 0x28
 8007288:	a809      	add	r0, sp, #36	; 0x24
 800728a:	d13b      	bne.n	8007304 <_printf_float+0x13c>
 800728c:	2106      	movs	r1, #6
 800728e:	6061      	str	r1, [r4, #4]
 8007290:	f04f 0c00 	mov.w	ip, #0
 8007294:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8007298:	e9cd 0900 	strd	r0, r9, [sp]
 800729c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80072a0:	6022      	str	r2, [r4, #0]
 80072a2:	6861      	ldr	r1, [r4, #4]
 80072a4:	4628      	mov	r0, r5
 80072a6:	f7ff ff09 	bl	80070bc <__cvt>
 80072aa:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80072ae:	2b47      	cmp	r3, #71	; 0x47
 80072b0:	4680      	mov	r8, r0
 80072b2:	d109      	bne.n	80072c8 <_printf_float+0x100>
 80072b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b6:	1cd8      	adds	r0, r3, #3
 80072b8:	db02      	blt.n	80072c0 <_printf_float+0xf8>
 80072ba:	6862      	ldr	r2, [r4, #4]
 80072bc:	4293      	cmp	r3, r2
 80072be:	dd47      	ble.n	8007350 <_printf_float+0x188>
 80072c0:	f1a9 0902 	sub.w	r9, r9, #2
 80072c4:	fa5f f989 	uxtb.w	r9, r9
 80072c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80072cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072ce:	d824      	bhi.n	800731a <_printf_float+0x152>
 80072d0:	3901      	subs	r1, #1
 80072d2:	464a      	mov	r2, r9
 80072d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80072d8:	9109      	str	r1, [sp, #36]	; 0x24
 80072da:	f7ff ff41 	bl	8007160 <__exponent>
 80072de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072e0:	1813      	adds	r3, r2, r0
 80072e2:	2a01      	cmp	r2, #1
 80072e4:	4682      	mov	sl, r0
 80072e6:	6123      	str	r3, [r4, #16]
 80072e8:	dc02      	bgt.n	80072f0 <_printf_float+0x128>
 80072ea:	6822      	ldr	r2, [r4, #0]
 80072ec:	07d1      	lsls	r1, r2, #31
 80072ee:	d501      	bpl.n	80072f4 <_printf_float+0x12c>
 80072f0:	3301      	adds	r3, #1
 80072f2:	6123      	str	r3, [r4, #16]
 80072f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d0a9      	beq.n	8007250 <_printf_float+0x88>
 80072fc:	232d      	movs	r3, #45	; 0x2d
 80072fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007302:	e7a5      	b.n	8007250 <_printf_float+0x88>
 8007304:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8007308:	f000 8178 	beq.w	80075fc <_printf_float+0x434>
 800730c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007310:	d1be      	bne.n	8007290 <_printf_float+0xc8>
 8007312:	2900      	cmp	r1, #0
 8007314:	d1bc      	bne.n	8007290 <_printf_float+0xc8>
 8007316:	2101      	movs	r1, #1
 8007318:	e7b9      	b.n	800728e <_printf_float+0xc6>
 800731a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800731e:	d119      	bne.n	8007354 <_printf_float+0x18c>
 8007320:	2900      	cmp	r1, #0
 8007322:	6863      	ldr	r3, [r4, #4]
 8007324:	dd0c      	ble.n	8007340 <_printf_float+0x178>
 8007326:	6121      	str	r1, [r4, #16]
 8007328:	b913      	cbnz	r3, 8007330 <_printf_float+0x168>
 800732a:	6822      	ldr	r2, [r4, #0]
 800732c:	07d2      	lsls	r2, r2, #31
 800732e:	d502      	bpl.n	8007336 <_printf_float+0x16e>
 8007330:	3301      	adds	r3, #1
 8007332:	440b      	add	r3, r1
 8007334:	6123      	str	r3, [r4, #16]
 8007336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007338:	65a3      	str	r3, [r4, #88]	; 0x58
 800733a:	f04f 0a00 	mov.w	sl, #0
 800733e:	e7d9      	b.n	80072f4 <_printf_float+0x12c>
 8007340:	b913      	cbnz	r3, 8007348 <_printf_float+0x180>
 8007342:	6822      	ldr	r2, [r4, #0]
 8007344:	07d0      	lsls	r0, r2, #31
 8007346:	d501      	bpl.n	800734c <_printf_float+0x184>
 8007348:	3302      	adds	r3, #2
 800734a:	e7f3      	b.n	8007334 <_printf_float+0x16c>
 800734c:	2301      	movs	r3, #1
 800734e:	e7f1      	b.n	8007334 <_printf_float+0x16c>
 8007350:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007354:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007358:	4293      	cmp	r3, r2
 800735a:	db05      	blt.n	8007368 <_printf_float+0x1a0>
 800735c:	6822      	ldr	r2, [r4, #0]
 800735e:	6123      	str	r3, [r4, #16]
 8007360:	07d1      	lsls	r1, r2, #31
 8007362:	d5e8      	bpl.n	8007336 <_printf_float+0x16e>
 8007364:	3301      	adds	r3, #1
 8007366:	e7e5      	b.n	8007334 <_printf_float+0x16c>
 8007368:	2b00      	cmp	r3, #0
 800736a:	bfd4      	ite	le
 800736c:	f1c3 0302 	rsble	r3, r3, #2
 8007370:	2301      	movgt	r3, #1
 8007372:	4413      	add	r3, r2
 8007374:	e7de      	b.n	8007334 <_printf_float+0x16c>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	055a      	lsls	r2, r3, #21
 800737a:	d407      	bmi.n	800738c <_printf_float+0x1c4>
 800737c:	6923      	ldr	r3, [r4, #16]
 800737e:	4642      	mov	r2, r8
 8007380:	4631      	mov	r1, r6
 8007382:	4628      	mov	r0, r5
 8007384:	47b8      	blx	r7
 8007386:	3001      	adds	r0, #1
 8007388:	d12a      	bne.n	80073e0 <_printf_float+0x218>
 800738a:	e76b      	b.n	8007264 <_printf_float+0x9c>
 800738c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007390:	f240 80de 	bls.w	8007550 <_printf_float+0x388>
 8007394:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007398:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800739c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a0:	d133      	bne.n	800740a <_printf_float+0x242>
 80073a2:	2301      	movs	r3, #1
 80073a4:	4a42      	ldr	r2, [pc, #264]	; (80074b0 <_printf_float+0x2e8>)
 80073a6:	4631      	mov	r1, r6
 80073a8:	4628      	mov	r0, r5
 80073aa:	47b8      	blx	r7
 80073ac:	3001      	adds	r0, #1
 80073ae:	f43f af59 	beq.w	8007264 <_printf_float+0x9c>
 80073b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073b6:	429a      	cmp	r2, r3
 80073b8:	db02      	blt.n	80073c0 <_printf_float+0x1f8>
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	07d8      	lsls	r0, r3, #31
 80073be:	d50f      	bpl.n	80073e0 <_printf_float+0x218>
 80073c0:	9b05      	ldr	r3, [sp, #20]
 80073c2:	465a      	mov	r2, fp
 80073c4:	4631      	mov	r1, r6
 80073c6:	4628      	mov	r0, r5
 80073c8:	47b8      	blx	r7
 80073ca:	3001      	adds	r0, #1
 80073cc:	f43f af4a 	beq.w	8007264 <_printf_float+0x9c>
 80073d0:	f04f 0800 	mov.w	r8, #0
 80073d4:	f104 091a 	add.w	r9, r4, #26
 80073d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073da:	3b01      	subs	r3, #1
 80073dc:	4543      	cmp	r3, r8
 80073de:	dc09      	bgt.n	80073f4 <_printf_float+0x22c>
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	079b      	lsls	r3, r3, #30
 80073e4:	f100 8105 	bmi.w	80075f2 <_printf_float+0x42a>
 80073e8:	68e0      	ldr	r0, [r4, #12]
 80073ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ec:	4298      	cmp	r0, r3
 80073ee:	bfb8      	it	lt
 80073f0:	4618      	movlt	r0, r3
 80073f2:	e739      	b.n	8007268 <_printf_float+0xa0>
 80073f4:	2301      	movs	r3, #1
 80073f6:	464a      	mov	r2, r9
 80073f8:	4631      	mov	r1, r6
 80073fa:	4628      	mov	r0, r5
 80073fc:	47b8      	blx	r7
 80073fe:	3001      	adds	r0, #1
 8007400:	f43f af30 	beq.w	8007264 <_printf_float+0x9c>
 8007404:	f108 0801 	add.w	r8, r8, #1
 8007408:	e7e6      	b.n	80073d8 <_printf_float+0x210>
 800740a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800740c:	2b00      	cmp	r3, #0
 800740e:	dc2b      	bgt.n	8007468 <_printf_float+0x2a0>
 8007410:	2301      	movs	r3, #1
 8007412:	4a27      	ldr	r2, [pc, #156]	; (80074b0 <_printf_float+0x2e8>)
 8007414:	4631      	mov	r1, r6
 8007416:	4628      	mov	r0, r5
 8007418:	47b8      	blx	r7
 800741a:	3001      	adds	r0, #1
 800741c:	f43f af22 	beq.w	8007264 <_printf_float+0x9c>
 8007420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007422:	b923      	cbnz	r3, 800742e <_printf_float+0x266>
 8007424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007426:	b913      	cbnz	r3, 800742e <_printf_float+0x266>
 8007428:	6823      	ldr	r3, [r4, #0]
 800742a:	07d9      	lsls	r1, r3, #31
 800742c:	d5d8      	bpl.n	80073e0 <_printf_float+0x218>
 800742e:	9b05      	ldr	r3, [sp, #20]
 8007430:	465a      	mov	r2, fp
 8007432:	4631      	mov	r1, r6
 8007434:	4628      	mov	r0, r5
 8007436:	47b8      	blx	r7
 8007438:	3001      	adds	r0, #1
 800743a:	f43f af13 	beq.w	8007264 <_printf_float+0x9c>
 800743e:	f04f 0900 	mov.w	r9, #0
 8007442:	f104 0a1a 	add.w	sl, r4, #26
 8007446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007448:	425b      	negs	r3, r3
 800744a:	454b      	cmp	r3, r9
 800744c:	dc01      	bgt.n	8007452 <_printf_float+0x28a>
 800744e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007450:	e795      	b.n	800737e <_printf_float+0x1b6>
 8007452:	2301      	movs	r3, #1
 8007454:	4652      	mov	r2, sl
 8007456:	4631      	mov	r1, r6
 8007458:	4628      	mov	r0, r5
 800745a:	47b8      	blx	r7
 800745c:	3001      	adds	r0, #1
 800745e:	f43f af01 	beq.w	8007264 <_printf_float+0x9c>
 8007462:	f109 0901 	add.w	r9, r9, #1
 8007466:	e7ee      	b.n	8007446 <_printf_float+0x27e>
 8007468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800746a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800746c:	429a      	cmp	r2, r3
 800746e:	bfa8      	it	ge
 8007470:	461a      	movge	r2, r3
 8007472:	2a00      	cmp	r2, #0
 8007474:	4691      	mov	r9, r2
 8007476:	dd07      	ble.n	8007488 <_printf_float+0x2c0>
 8007478:	4613      	mov	r3, r2
 800747a:	4631      	mov	r1, r6
 800747c:	4642      	mov	r2, r8
 800747e:	4628      	mov	r0, r5
 8007480:	47b8      	blx	r7
 8007482:	3001      	adds	r0, #1
 8007484:	f43f aeee 	beq.w	8007264 <_printf_float+0x9c>
 8007488:	f104 031a 	add.w	r3, r4, #26
 800748c:	f04f 0a00 	mov.w	sl, #0
 8007490:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007494:	9307      	str	r3, [sp, #28]
 8007496:	e017      	b.n	80074c8 <_printf_float+0x300>
 8007498:	ffffffff 	.word	0xffffffff
 800749c:	7fefffff 	.word	0x7fefffff
 80074a0:	0800942c 	.word	0x0800942c
 80074a4:	08009428 	.word	0x08009428
 80074a8:	08009434 	.word	0x08009434
 80074ac:	08009430 	.word	0x08009430
 80074b0:	08009438 	.word	0x08009438
 80074b4:	2301      	movs	r3, #1
 80074b6:	9a07      	ldr	r2, [sp, #28]
 80074b8:	4631      	mov	r1, r6
 80074ba:	4628      	mov	r0, r5
 80074bc:	47b8      	blx	r7
 80074be:	3001      	adds	r0, #1
 80074c0:	f43f aed0 	beq.w	8007264 <_printf_float+0x9c>
 80074c4:	f10a 0a01 	add.w	sl, sl, #1
 80074c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074ca:	9306      	str	r3, [sp, #24]
 80074cc:	eba3 0309 	sub.w	r3, r3, r9
 80074d0:	4553      	cmp	r3, sl
 80074d2:	dcef      	bgt.n	80074b4 <_printf_float+0x2ec>
 80074d4:	9b06      	ldr	r3, [sp, #24]
 80074d6:	4498      	add	r8, r3
 80074d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074dc:	429a      	cmp	r2, r3
 80074de:	db15      	blt.n	800750c <_printf_float+0x344>
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	07da      	lsls	r2, r3, #31
 80074e4:	d412      	bmi.n	800750c <_printf_float+0x344>
 80074e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074e8:	9a06      	ldr	r2, [sp, #24]
 80074ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074ec:	1a9a      	subs	r2, r3, r2
 80074ee:	eba3 0a01 	sub.w	sl, r3, r1
 80074f2:	4592      	cmp	sl, r2
 80074f4:	bfa8      	it	ge
 80074f6:	4692      	movge	sl, r2
 80074f8:	f1ba 0f00 	cmp.w	sl, #0
 80074fc:	dc0e      	bgt.n	800751c <_printf_float+0x354>
 80074fe:	f04f 0800 	mov.w	r8, #0
 8007502:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007506:	f104 091a 	add.w	r9, r4, #26
 800750a:	e019      	b.n	8007540 <_printf_float+0x378>
 800750c:	9b05      	ldr	r3, [sp, #20]
 800750e:	465a      	mov	r2, fp
 8007510:	4631      	mov	r1, r6
 8007512:	4628      	mov	r0, r5
 8007514:	47b8      	blx	r7
 8007516:	3001      	adds	r0, #1
 8007518:	d1e5      	bne.n	80074e6 <_printf_float+0x31e>
 800751a:	e6a3      	b.n	8007264 <_printf_float+0x9c>
 800751c:	4653      	mov	r3, sl
 800751e:	4642      	mov	r2, r8
 8007520:	4631      	mov	r1, r6
 8007522:	4628      	mov	r0, r5
 8007524:	47b8      	blx	r7
 8007526:	3001      	adds	r0, #1
 8007528:	d1e9      	bne.n	80074fe <_printf_float+0x336>
 800752a:	e69b      	b.n	8007264 <_printf_float+0x9c>
 800752c:	2301      	movs	r3, #1
 800752e:	464a      	mov	r2, r9
 8007530:	4631      	mov	r1, r6
 8007532:	4628      	mov	r0, r5
 8007534:	47b8      	blx	r7
 8007536:	3001      	adds	r0, #1
 8007538:	f43f ae94 	beq.w	8007264 <_printf_float+0x9c>
 800753c:	f108 0801 	add.w	r8, r8, #1
 8007540:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007544:	1a9b      	subs	r3, r3, r2
 8007546:	eba3 030a 	sub.w	r3, r3, sl
 800754a:	4543      	cmp	r3, r8
 800754c:	dcee      	bgt.n	800752c <_printf_float+0x364>
 800754e:	e747      	b.n	80073e0 <_printf_float+0x218>
 8007550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007552:	2a01      	cmp	r2, #1
 8007554:	dc01      	bgt.n	800755a <_printf_float+0x392>
 8007556:	07db      	lsls	r3, r3, #31
 8007558:	d539      	bpl.n	80075ce <_printf_float+0x406>
 800755a:	2301      	movs	r3, #1
 800755c:	4642      	mov	r2, r8
 800755e:	4631      	mov	r1, r6
 8007560:	4628      	mov	r0, r5
 8007562:	47b8      	blx	r7
 8007564:	3001      	adds	r0, #1
 8007566:	f43f ae7d 	beq.w	8007264 <_printf_float+0x9c>
 800756a:	9b05      	ldr	r3, [sp, #20]
 800756c:	465a      	mov	r2, fp
 800756e:	4631      	mov	r1, r6
 8007570:	4628      	mov	r0, r5
 8007572:	47b8      	blx	r7
 8007574:	3001      	adds	r0, #1
 8007576:	f108 0801 	add.w	r8, r8, #1
 800757a:	f43f ae73 	beq.w	8007264 <_printf_float+0x9c>
 800757e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007584:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800758c:	f103 33ff 	add.w	r3, r3, #4294967295
 8007590:	d018      	beq.n	80075c4 <_printf_float+0x3fc>
 8007592:	4642      	mov	r2, r8
 8007594:	4631      	mov	r1, r6
 8007596:	4628      	mov	r0, r5
 8007598:	47b8      	blx	r7
 800759a:	3001      	adds	r0, #1
 800759c:	d10e      	bne.n	80075bc <_printf_float+0x3f4>
 800759e:	e661      	b.n	8007264 <_printf_float+0x9c>
 80075a0:	2301      	movs	r3, #1
 80075a2:	464a      	mov	r2, r9
 80075a4:	4631      	mov	r1, r6
 80075a6:	4628      	mov	r0, r5
 80075a8:	47b8      	blx	r7
 80075aa:	3001      	adds	r0, #1
 80075ac:	f43f ae5a 	beq.w	8007264 <_printf_float+0x9c>
 80075b0:	f108 0801 	add.w	r8, r8, #1
 80075b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b6:	3b01      	subs	r3, #1
 80075b8:	4543      	cmp	r3, r8
 80075ba:	dcf1      	bgt.n	80075a0 <_printf_float+0x3d8>
 80075bc:	4653      	mov	r3, sl
 80075be:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80075c2:	e6dd      	b.n	8007380 <_printf_float+0x1b8>
 80075c4:	f04f 0800 	mov.w	r8, #0
 80075c8:	f104 091a 	add.w	r9, r4, #26
 80075cc:	e7f2      	b.n	80075b4 <_printf_float+0x3ec>
 80075ce:	2301      	movs	r3, #1
 80075d0:	e7df      	b.n	8007592 <_printf_float+0x3ca>
 80075d2:	2301      	movs	r3, #1
 80075d4:	464a      	mov	r2, r9
 80075d6:	4631      	mov	r1, r6
 80075d8:	4628      	mov	r0, r5
 80075da:	47b8      	blx	r7
 80075dc:	3001      	adds	r0, #1
 80075de:	f43f ae41 	beq.w	8007264 <_printf_float+0x9c>
 80075e2:	f108 0801 	add.w	r8, r8, #1
 80075e6:	68e3      	ldr	r3, [r4, #12]
 80075e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075ea:	1a9b      	subs	r3, r3, r2
 80075ec:	4543      	cmp	r3, r8
 80075ee:	dcf0      	bgt.n	80075d2 <_printf_float+0x40a>
 80075f0:	e6fa      	b.n	80073e8 <_printf_float+0x220>
 80075f2:	f04f 0800 	mov.w	r8, #0
 80075f6:	f104 0919 	add.w	r9, r4, #25
 80075fa:	e7f4      	b.n	80075e6 <_printf_float+0x41e>
 80075fc:	2900      	cmp	r1, #0
 80075fe:	f43f ae8a 	beq.w	8007316 <_printf_float+0x14e>
 8007602:	f04f 0c00 	mov.w	ip, #0
 8007606:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800760a:	e9cd 0900 	strd	r0, r9, [sp]
 800760e:	6022      	str	r2, [r4, #0]
 8007610:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007614:	4628      	mov	r0, r5
 8007616:	f7ff fd51 	bl	80070bc <__cvt>
 800761a:	4680      	mov	r8, r0
 800761c:	e64a      	b.n	80072b4 <_printf_float+0xec>
 800761e:	bf00      	nop

08007620 <_printf_common>:
 8007620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007624:	4691      	mov	r9, r2
 8007626:	461f      	mov	r7, r3
 8007628:	688a      	ldr	r2, [r1, #8]
 800762a:	690b      	ldr	r3, [r1, #16]
 800762c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007630:	4293      	cmp	r3, r2
 8007632:	bfb8      	it	lt
 8007634:	4613      	movlt	r3, r2
 8007636:	f8c9 3000 	str.w	r3, [r9]
 800763a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800763e:	4606      	mov	r6, r0
 8007640:	460c      	mov	r4, r1
 8007642:	b112      	cbz	r2, 800764a <_printf_common+0x2a>
 8007644:	3301      	adds	r3, #1
 8007646:	f8c9 3000 	str.w	r3, [r9]
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	0699      	lsls	r1, r3, #26
 800764e:	bf42      	ittt	mi
 8007650:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007654:	3302      	addmi	r3, #2
 8007656:	f8c9 3000 	strmi.w	r3, [r9]
 800765a:	6825      	ldr	r5, [r4, #0]
 800765c:	f015 0506 	ands.w	r5, r5, #6
 8007660:	d107      	bne.n	8007672 <_printf_common+0x52>
 8007662:	f104 0a19 	add.w	sl, r4, #25
 8007666:	68e3      	ldr	r3, [r4, #12]
 8007668:	f8d9 2000 	ldr.w	r2, [r9]
 800766c:	1a9b      	subs	r3, r3, r2
 800766e:	42ab      	cmp	r3, r5
 8007670:	dc28      	bgt.n	80076c4 <_printf_common+0xa4>
 8007672:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007676:	6822      	ldr	r2, [r4, #0]
 8007678:	3300      	adds	r3, #0
 800767a:	bf18      	it	ne
 800767c:	2301      	movne	r3, #1
 800767e:	0692      	lsls	r2, r2, #26
 8007680:	d42d      	bmi.n	80076de <_printf_common+0xbe>
 8007682:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007686:	4639      	mov	r1, r7
 8007688:	4630      	mov	r0, r6
 800768a:	47c0      	blx	r8
 800768c:	3001      	adds	r0, #1
 800768e:	d020      	beq.n	80076d2 <_printf_common+0xb2>
 8007690:	6823      	ldr	r3, [r4, #0]
 8007692:	68e5      	ldr	r5, [r4, #12]
 8007694:	f8d9 2000 	ldr.w	r2, [r9]
 8007698:	f003 0306 	and.w	r3, r3, #6
 800769c:	2b04      	cmp	r3, #4
 800769e:	bf08      	it	eq
 80076a0:	1aad      	subeq	r5, r5, r2
 80076a2:	68a3      	ldr	r3, [r4, #8]
 80076a4:	6922      	ldr	r2, [r4, #16]
 80076a6:	bf0c      	ite	eq
 80076a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076ac:	2500      	movne	r5, #0
 80076ae:	4293      	cmp	r3, r2
 80076b0:	bfc4      	itt	gt
 80076b2:	1a9b      	subgt	r3, r3, r2
 80076b4:	18ed      	addgt	r5, r5, r3
 80076b6:	f04f 0900 	mov.w	r9, #0
 80076ba:	341a      	adds	r4, #26
 80076bc:	454d      	cmp	r5, r9
 80076be:	d11a      	bne.n	80076f6 <_printf_common+0xd6>
 80076c0:	2000      	movs	r0, #0
 80076c2:	e008      	b.n	80076d6 <_printf_common+0xb6>
 80076c4:	2301      	movs	r3, #1
 80076c6:	4652      	mov	r2, sl
 80076c8:	4639      	mov	r1, r7
 80076ca:	4630      	mov	r0, r6
 80076cc:	47c0      	blx	r8
 80076ce:	3001      	adds	r0, #1
 80076d0:	d103      	bne.n	80076da <_printf_common+0xba>
 80076d2:	f04f 30ff 	mov.w	r0, #4294967295
 80076d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076da:	3501      	adds	r5, #1
 80076dc:	e7c3      	b.n	8007666 <_printf_common+0x46>
 80076de:	18e1      	adds	r1, r4, r3
 80076e0:	1c5a      	adds	r2, r3, #1
 80076e2:	2030      	movs	r0, #48	; 0x30
 80076e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076e8:	4422      	add	r2, r4
 80076ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076f2:	3302      	adds	r3, #2
 80076f4:	e7c5      	b.n	8007682 <_printf_common+0x62>
 80076f6:	2301      	movs	r3, #1
 80076f8:	4622      	mov	r2, r4
 80076fa:	4639      	mov	r1, r7
 80076fc:	4630      	mov	r0, r6
 80076fe:	47c0      	blx	r8
 8007700:	3001      	adds	r0, #1
 8007702:	d0e6      	beq.n	80076d2 <_printf_common+0xb2>
 8007704:	f109 0901 	add.w	r9, r9, #1
 8007708:	e7d8      	b.n	80076bc <_printf_common+0x9c>
	...

0800770c <_printf_i>:
 800770c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007710:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007714:	460c      	mov	r4, r1
 8007716:	7e09      	ldrb	r1, [r1, #24]
 8007718:	b085      	sub	sp, #20
 800771a:	296e      	cmp	r1, #110	; 0x6e
 800771c:	4617      	mov	r7, r2
 800771e:	4606      	mov	r6, r0
 8007720:	4698      	mov	r8, r3
 8007722:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007724:	f000 80b3 	beq.w	800788e <_printf_i+0x182>
 8007728:	d822      	bhi.n	8007770 <_printf_i+0x64>
 800772a:	2963      	cmp	r1, #99	; 0x63
 800772c:	d036      	beq.n	800779c <_printf_i+0x90>
 800772e:	d80a      	bhi.n	8007746 <_printf_i+0x3a>
 8007730:	2900      	cmp	r1, #0
 8007732:	f000 80b9 	beq.w	80078a8 <_printf_i+0x19c>
 8007736:	2958      	cmp	r1, #88	; 0x58
 8007738:	f000 8083 	beq.w	8007842 <_printf_i+0x136>
 800773c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007740:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007744:	e032      	b.n	80077ac <_printf_i+0xa0>
 8007746:	2964      	cmp	r1, #100	; 0x64
 8007748:	d001      	beq.n	800774e <_printf_i+0x42>
 800774a:	2969      	cmp	r1, #105	; 0x69
 800774c:	d1f6      	bne.n	800773c <_printf_i+0x30>
 800774e:	6820      	ldr	r0, [r4, #0]
 8007750:	6813      	ldr	r3, [r2, #0]
 8007752:	0605      	lsls	r5, r0, #24
 8007754:	f103 0104 	add.w	r1, r3, #4
 8007758:	d52a      	bpl.n	80077b0 <_printf_i+0xa4>
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6011      	str	r1, [r2, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	da03      	bge.n	800776a <_printf_i+0x5e>
 8007762:	222d      	movs	r2, #45	; 0x2d
 8007764:	425b      	negs	r3, r3
 8007766:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800776a:	486f      	ldr	r0, [pc, #444]	; (8007928 <_printf_i+0x21c>)
 800776c:	220a      	movs	r2, #10
 800776e:	e039      	b.n	80077e4 <_printf_i+0xd8>
 8007770:	2973      	cmp	r1, #115	; 0x73
 8007772:	f000 809d 	beq.w	80078b0 <_printf_i+0x1a4>
 8007776:	d808      	bhi.n	800778a <_printf_i+0x7e>
 8007778:	296f      	cmp	r1, #111	; 0x6f
 800777a:	d020      	beq.n	80077be <_printf_i+0xb2>
 800777c:	2970      	cmp	r1, #112	; 0x70
 800777e:	d1dd      	bne.n	800773c <_printf_i+0x30>
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	f043 0320 	orr.w	r3, r3, #32
 8007786:	6023      	str	r3, [r4, #0]
 8007788:	e003      	b.n	8007792 <_printf_i+0x86>
 800778a:	2975      	cmp	r1, #117	; 0x75
 800778c:	d017      	beq.n	80077be <_printf_i+0xb2>
 800778e:	2978      	cmp	r1, #120	; 0x78
 8007790:	d1d4      	bne.n	800773c <_printf_i+0x30>
 8007792:	2378      	movs	r3, #120	; 0x78
 8007794:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007798:	4864      	ldr	r0, [pc, #400]	; (800792c <_printf_i+0x220>)
 800779a:	e055      	b.n	8007848 <_printf_i+0x13c>
 800779c:	6813      	ldr	r3, [r2, #0]
 800779e:	1d19      	adds	r1, r3, #4
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6011      	str	r1, [r2, #0]
 80077a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077ac:	2301      	movs	r3, #1
 80077ae:	e08c      	b.n	80078ca <_printf_i+0x1be>
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6011      	str	r1, [r2, #0]
 80077b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077b8:	bf18      	it	ne
 80077ba:	b21b      	sxthne	r3, r3
 80077bc:	e7cf      	b.n	800775e <_printf_i+0x52>
 80077be:	6813      	ldr	r3, [r2, #0]
 80077c0:	6825      	ldr	r5, [r4, #0]
 80077c2:	1d18      	adds	r0, r3, #4
 80077c4:	6010      	str	r0, [r2, #0]
 80077c6:	0628      	lsls	r0, r5, #24
 80077c8:	d501      	bpl.n	80077ce <_printf_i+0xc2>
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	e002      	b.n	80077d4 <_printf_i+0xc8>
 80077ce:	0668      	lsls	r0, r5, #25
 80077d0:	d5fb      	bpl.n	80077ca <_printf_i+0xbe>
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	4854      	ldr	r0, [pc, #336]	; (8007928 <_printf_i+0x21c>)
 80077d6:	296f      	cmp	r1, #111	; 0x6f
 80077d8:	bf14      	ite	ne
 80077da:	220a      	movne	r2, #10
 80077dc:	2208      	moveq	r2, #8
 80077de:	2100      	movs	r1, #0
 80077e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077e4:	6865      	ldr	r5, [r4, #4]
 80077e6:	60a5      	str	r5, [r4, #8]
 80077e8:	2d00      	cmp	r5, #0
 80077ea:	f2c0 8095 	blt.w	8007918 <_printf_i+0x20c>
 80077ee:	6821      	ldr	r1, [r4, #0]
 80077f0:	f021 0104 	bic.w	r1, r1, #4
 80077f4:	6021      	str	r1, [r4, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d13d      	bne.n	8007876 <_printf_i+0x16a>
 80077fa:	2d00      	cmp	r5, #0
 80077fc:	f040 808e 	bne.w	800791c <_printf_i+0x210>
 8007800:	4665      	mov	r5, ip
 8007802:	2a08      	cmp	r2, #8
 8007804:	d10b      	bne.n	800781e <_printf_i+0x112>
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	07db      	lsls	r3, r3, #31
 800780a:	d508      	bpl.n	800781e <_printf_i+0x112>
 800780c:	6923      	ldr	r3, [r4, #16]
 800780e:	6862      	ldr	r2, [r4, #4]
 8007810:	429a      	cmp	r2, r3
 8007812:	bfde      	ittt	le
 8007814:	2330      	movle	r3, #48	; 0x30
 8007816:	f805 3c01 	strble.w	r3, [r5, #-1]
 800781a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800781e:	ebac 0305 	sub.w	r3, ip, r5
 8007822:	6123      	str	r3, [r4, #16]
 8007824:	f8cd 8000 	str.w	r8, [sp]
 8007828:	463b      	mov	r3, r7
 800782a:	aa03      	add	r2, sp, #12
 800782c:	4621      	mov	r1, r4
 800782e:	4630      	mov	r0, r6
 8007830:	f7ff fef6 	bl	8007620 <_printf_common>
 8007834:	3001      	adds	r0, #1
 8007836:	d14d      	bne.n	80078d4 <_printf_i+0x1c8>
 8007838:	f04f 30ff 	mov.w	r0, #4294967295
 800783c:	b005      	add	sp, #20
 800783e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007842:	4839      	ldr	r0, [pc, #228]	; (8007928 <_printf_i+0x21c>)
 8007844:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007848:	6813      	ldr	r3, [r2, #0]
 800784a:	6821      	ldr	r1, [r4, #0]
 800784c:	1d1d      	adds	r5, r3, #4
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6015      	str	r5, [r2, #0]
 8007852:	060a      	lsls	r2, r1, #24
 8007854:	d50b      	bpl.n	800786e <_printf_i+0x162>
 8007856:	07ca      	lsls	r2, r1, #31
 8007858:	bf44      	itt	mi
 800785a:	f041 0120 	orrmi.w	r1, r1, #32
 800785e:	6021      	strmi	r1, [r4, #0]
 8007860:	b91b      	cbnz	r3, 800786a <_printf_i+0x15e>
 8007862:	6822      	ldr	r2, [r4, #0]
 8007864:	f022 0220 	bic.w	r2, r2, #32
 8007868:	6022      	str	r2, [r4, #0]
 800786a:	2210      	movs	r2, #16
 800786c:	e7b7      	b.n	80077de <_printf_i+0xd2>
 800786e:	064d      	lsls	r5, r1, #25
 8007870:	bf48      	it	mi
 8007872:	b29b      	uxthmi	r3, r3
 8007874:	e7ef      	b.n	8007856 <_printf_i+0x14a>
 8007876:	4665      	mov	r5, ip
 8007878:	fbb3 f1f2 	udiv	r1, r3, r2
 800787c:	fb02 3311 	mls	r3, r2, r1, r3
 8007880:	5cc3      	ldrb	r3, [r0, r3]
 8007882:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007886:	460b      	mov	r3, r1
 8007888:	2900      	cmp	r1, #0
 800788a:	d1f5      	bne.n	8007878 <_printf_i+0x16c>
 800788c:	e7b9      	b.n	8007802 <_printf_i+0xf6>
 800788e:	6813      	ldr	r3, [r2, #0]
 8007890:	6825      	ldr	r5, [r4, #0]
 8007892:	6961      	ldr	r1, [r4, #20]
 8007894:	1d18      	adds	r0, r3, #4
 8007896:	6010      	str	r0, [r2, #0]
 8007898:	0628      	lsls	r0, r5, #24
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	d501      	bpl.n	80078a2 <_printf_i+0x196>
 800789e:	6019      	str	r1, [r3, #0]
 80078a0:	e002      	b.n	80078a8 <_printf_i+0x19c>
 80078a2:	066a      	lsls	r2, r5, #25
 80078a4:	d5fb      	bpl.n	800789e <_printf_i+0x192>
 80078a6:	8019      	strh	r1, [r3, #0]
 80078a8:	2300      	movs	r3, #0
 80078aa:	6123      	str	r3, [r4, #16]
 80078ac:	4665      	mov	r5, ip
 80078ae:	e7b9      	b.n	8007824 <_printf_i+0x118>
 80078b0:	6813      	ldr	r3, [r2, #0]
 80078b2:	1d19      	adds	r1, r3, #4
 80078b4:	6011      	str	r1, [r2, #0]
 80078b6:	681d      	ldr	r5, [r3, #0]
 80078b8:	6862      	ldr	r2, [r4, #4]
 80078ba:	2100      	movs	r1, #0
 80078bc:	4628      	mov	r0, r5
 80078be:	f7f8 fd17 	bl	80002f0 <memchr>
 80078c2:	b108      	cbz	r0, 80078c8 <_printf_i+0x1bc>
 80078c4:	1b40      	subs	r0, r0, r5
 80078c6:	6060      	str	r0, [r4, #4]
 80078c8:	6863      	ldr	r3, [r4, #4]
 80078ca:	6123      	str	r3, [r4, #16]
 80078cc:	2300      	movs	r3, #0
 80078ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078d2:	e7a7      	b.n	8007824 <_printf_i+0x118>
 80078d4:	6923      	ldr	r3, [r4, #16]
 80078d6:	462a      	mov	r2, r5
 80078d8:	4639      	mov	r1, r7
 80078da:	4630      	mov	r0, r6
 80078dc:	47c0      	blx	r8
 80078de:	3001      	adds	r0, #1
 80078e0:	d0aa      	beq.n	8007838 <_printf_i+0x12c>
 80078e2:	6823      	ldr	r3, [r4, #0]
 80078e4:	079b      	lsls	r3, r3, #30
 80078e6:	d413      	bmi.n	8007910 <_printf_i+0x204>
 80078e8:	68e0      	ldr	r0, [r4, #12]
 80078ea:	9b03      	ldr	r3, [sp, #12]
 80078ec:	4298      	cmp	r0, r3
 80078ee:	bfb8      	it	lt
 80078f0:	4618      	movlt	r0, r3
 80078f2:	e7a3      	b.n	800783c <_printf_i+0x130>
 80078f4:	2301      	movs	r3, #1
 80078f6:	464a      	mov	r2, r9
 80078f8:	4639      	mov	r1, r7
 80078fa:	4630      	mov	r0, r6
 80078fc:	47c0      	blx	r8
 80078fe:	3001      	adds	r0, #1
 8007900:	d09a      	beq.n	8007838 <_printf_i+0x12c>
 8007902:	3501      	adds	r5, #1
 8007904:	68e3      	ldr	r3, [r4, #12]
 8007906:	9a03      	ldr	r2, [sp, #12]
 8007908:	1a9b      	subs	r3, r3, r2
 800790a:	42ab      	cmp	r3, r5
 800790c:	dcf2      	bgt.n	80078f4 <_printf_i+0x1e8>
 800790e:	e7eb      	b.n	80078e8 <_printf_i+0x1dc>
 8007910:	2500      	movs	r5, #0
 8007912:	f104 0919 	add.w	r9, r4, #25
 8007916:	e7f5      	b.n	8007904 <_printf_i+0x1f8>
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1ac      	bne.n	8007876 <_printf_i+0x16a>
 800791c:	7803      	ldrb	r3, [r0, #0]
 800791e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007922:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007926:	e76c      	b.n	8007802 <_printf_i+0xf6>
 8007928:	0800943a 	.word	0x0800943a
 800792c:	0800944b 	.word	0x0800944b

08007930 <_sbrk_r>:
 8007930:	b538      	push	{r3, r4, r5, lr}
 8007932:	4c06      	ldr	r4, [pc, #24]	; (800794c <_sbrk_r+0x1c>)
 8007934:	2300      	movs	r3, #0
 8007936:	4605      	mov	r5, r0
 8007938:	4608      	mov	r0, r1
 800793a:	6023      	str	r3, [r4, #0]
 800793c:	f7f9 ff0a 	bl	8001754 <_sbrk>
 8007940:	1c43      	adds	r3, r0, #1
 8007942:	d102      	bne.n	800794a <_sbrk_r+0x1a>
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	b103      	cbz	r3, 800794a <_sbrk_r+0x1a>
 8007948:	602b      	str	r3, [r5, #0]
 800794a:	bd38      	pop	{r3, r4, r5, pc}
 800794c:	20006324 	.word	0x20006324

08007950 <siprintf>:
 8007950:	b40e      	push	{r1, r2, r3}
 8007952:	b500      	push	{lr}
 8007954:	b09c      	sub	sp, #112	; 0x70
 8007956:	ab1d      	add	r3, sp, #116	; 0x74
 8007958:	9002      	str	r0, [sp, #8]
 800795a:	9006      	str	r0, [sp, #24]
 800795c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007960:	4809      	ldr	r0, [pc, #36]	; (8007988 <siprintf+0x38>)
 8007962:	9107      	str	r1, [sp, #28]
 8007964:	9104      	str	r1, [sp, #16]
 8007966:	4909      	ldr	r1, [pc, #36]	; (800798c <siprintf+0x3c>)
 8007968:	f853 2b04 	ldr.w	r2, [r3], #4
 800796c:	9105      	str	r1, [sp, #20]
 800796e:	6800      	ldr	r0, [r0, #0]
 8007970:	9301      	str	r3, [sp, #4]
 8007972:	a902      	add	r1, sp, #8
 8007974:	f001 f942 	bl	8008bfc <_svfiprintf_r>
 8007978:	9b02      	ldr	r3, [sp, #8]
 800797a:	2200      	movs	r2, #0
 800797c:	701a      	strb	r2, [r3, #0]
 800797e:	b01c      	add	sp, #112	; 0x70
 8007980:	f85d eb04 	ldr.w	lr, [sp], #4
 8007984:	b003      	add	sp, #12
 8007986:	4770      	bx	lr
 8007988:	20000014 	.word	0x20000014
 800798c:	ffff0208 	.word	0xffff0208

08007990 <quorem>:
 8007990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007994:	6903      	ldr	r3, [r0, #16]
 8007996:	690c      	ldr	r4, [r1, #16]
 8007998:	42a3      	cmp	r3, r4
 800799a:	4680      	mov	r8, r0
 800799c:	f2c0 8082 	blt.w	8007aa4 <quorem+0x114>
 80079a0:	3c01      	subs	r4, #1
 80079a2:	f101 0714 	add.w	r7, r1, #20
 80079a6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80079aa:	f100 0614 	add.w	r6, r0, #20
 80079ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80079b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80079b6:	eb06 030c 	add.w	r3, r6, ip
 80079ba:	3501      	adds	r5, #1
 80079bc:	eb07 090c 	add.w	r9, r7, ip
 80079c0:	9301      	str	r3, [sp, #4]
 80079c2:	fbb0 f5f5 	udiv	r5, r0, r5
 80079c6:	b395      	cbz	r5, 8007a2e <quorem+0x9e>
 80079c8:	f04f 0a00 	mov.w	sl, #0
 80079cc:	4638      	mov	r0, r7
 80079ce:	46b6      	mov	lr, r6
 80079d0:	46d3      	mov	fp, sl
 80079d2:	f850 2b04 	ldr.w	r2, [r0], #4
 80079d6:	b293      	uxth	r3, r2
 80079d8:	fb05 a303 	mla	r3, r5, r3, sl
 80079dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	ebab 0303 	sub.w	r3, fp, r3
 80079e6:	0c12      	lsrs	r2, r2, #16
 80079e8:	f8de b000 	ldr.w	fp, [lr]
 80079ec:	fb05 a202 	mla	r2, r5, r2, sl
 80079f0:	fa13 f38b 	uxtah	r3, r3, fp
 80079f4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80079f8:	fa1f fb82 	uxth.w	fp, r2
 80079fc:	f8de 2000 	ldr.w	r2, [lr]
 8007a00:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007a04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a0e:	4581      	cmp	r9, r0
 8007a10:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007a14:	f84e 3b04 	str.w	r3, [lr], #4
 8007a18:	d2db      	bcs.n	80079d2 <quorem+0x42>
 8007a1a:	f856 300c 	ldr.w	r3, [r6, ip]
 8007a1e:	b933      	cbnz	r3, 8007a2e <quorem+0x9e>
 8007a20:	9b01      	ldr	r3, [sp, #4]
 8007a22:	3b04      	subs	r3, #4
 8007a24:	429e      	cmp	r6, r3
 8007a26:	461a      	mov	r2, r3
 8007a28:	d330      	bcc.n	8007a8c <quorem+0xfc>
 8007a2a:	f8c8 4010 	str.w	r4, [r8, #16]
 8007a2e:	4640      	mov	r0, r8
 8007a30:	f000 ffb6 	bl	80089a0 <__mcmp>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	db25      	blt.n	8007a84 <quorem+0xf4>
 8007a38:	3501      	adds	r5, #1
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	f04f 0c00 	mov.w	ip, #0
 8007a40:	f857 2b04 	ldr.w	r2, [r7], #4
 8007a44:	f8d0 e000 	ldr.w	lr, [r0]
 8007a48:	b293      	uxth	r3, r2
 8007a4a:	ebac 0303 	sub.w	r3, ip, r3
 8007a4e:	0c12      	lsrs	r2, r2, #16
 8007a50:	fa13 f38e 	uxtah	r3, r3, lr
 8007a54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a62:	45b9      	cmp	r9, r7
 8007a64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a68:	f840 3b04 	str.w	r3, [r0], #4
 8007a6c:	d2e8      	bcs.n	8007a40 <quorem+0xb0>
 8007a6e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007a72:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007a76:	b92a      	cbnz	r2, 8007a84 <quorem+0xf4>
 8007a78:	3b04      	subs	r3, #4
 8007a7a:	429e      	cmp	r6, r3
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	d30b      	bcc.n	8007a98 <quorem+0x108>
 8007a80:	f8c8 4010 	str.w	r4, [r8, #16]
 8007a84:	4628      	mov	r0, r5
 8007a86:	b003      	add	sp, #12
 8007a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8c:	6812      	ldr	r2, [r2, #0]
 8007a8e:	3b04      	subs	r3, #4
 8007a90:	2a00      	cmp	r2, #0
 8007a92:	d1ca      	bne.n	8007a2a <quorem+0x9a>
 8007a94:	3c01      	subs	r4, #1
 8007a96:	e7c5      	b.n	8007a24 <quorem+0x94>
 8007a98:	6812      	ldr	r2, [r2, #0]
 8007a9a:	3b04      	subs	r3, #4
 8007a9c:	2a00      	cmp	r2, #0
 8007a9e:	d1ef      	bne.n	8007a80 <quorem+0xf0>
 8007aa0:	3c01      	subs	r4, #1
 8007aa2:	e7ea      	b.n	8007a7a <quorem+0xea>
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	e7ee      	b.n	8007a86 <quorem+0xf6>

08007aa8 <_dtoa_r>:
 8007aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aac:	ec57 6b10 	vmov	r6, r7, d0
 8007ab0:	b095      	sub	sp, #84	; 0x54
 8007ab2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ab4:	9108      	str	r1, [sp, #32]
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	920a      	str	r2, [sp, #40]	; 0x28
 8007aba:	9311      	str	r3, [sp, #68]	; 0x44
 8007abc:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8007ac0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007ac4:	b93d      	cbnz	r5, 8007ad6 <_dtoa_r+0x2e>
 8007ac6:	2010      	movs	r0, #16
 8007ac8:	f7ff fa38 	bl	8006f3c <malloc>
 8007acc:	6260      	str	r0, [r4, #36]	; 0x24
 8007ace:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ad2:	6005      	str	r5, [r0, #0]
 8007ad4:	60c5      	str	r5, [r0, #12]
 8007ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ad8:	6819      	ldr	r1, [r3, #0]
 8007ada:	b151      	cbz	r1, 8007af2 <_dtoa_r+0x4a>
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	604a      	str	r2, [r1, #4]
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	4093      	lsls	r3, r2
 8007ae4:	608b      	str	r3, [r1, #8]
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f000 fd79 	bl	80085de <_Bfree>
 8007aec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	1e3b      	subs	r3, r7, #0
 8007af4:	bfb9      	ittee	lt
 8007af6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007afa:	9303      	strlt	r3, [sp, #12]
 8007afc:	2300      	movge	r3, #0
 8007afe:	f8c8 3000 	strge.w	r3, [r8]
 8007b02:	9d03      	ldr	r5, [sp, #12]
 8007b04:	4bac      	ldr	r3, [pc, #688]	; (8007db8 <_dtoa_r+0x310>)
 8007b06:	bfbc      	itt	lt
 8007b08:	2201      	movlt	r2, #1
 8007b0a:	f8c8 2000 	strlt.w	r2, [r8]
 8007b0e:	43ab      	bics	r3, r5
 8007b10:	d11b      	bne.n	8007b4a <_dtoa_r+0xa2>
 8007b12:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007b14:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b18:	6013      	str	r3, [r2, #0]
 8007b1a:	9b02      	ldr	r3, [sp, #8]
 8007b1c:	b923      	cbnz	r3, 8007b28 <_dtoa_r+0x80>
 8007b1e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007b22:	2d00      	cmp	r5, #0
 8007b24:	f000 84dd 	beq.w	80084e2 <_dtoa_r+0xa3a>
 8007b28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007b2a:	b953      	cbnz	r3, 8007b42 <_dtoa_r+0x9a>
 8007b2c:	4ba3      	ldr	r3, [pc, #652]	; (8007dbc <_dtoa_r+0x314>)
 8007b2e:	e020      	b.n	8007b72 <_dtoa_r+0xca>
 8007b30:	4ba3      	ldr	r3, [pc, #652]	; (8007dc0 <_dtoa_r+0x318>)
 8007b32:	9304      	str	r3, [sp, #16]
 8007b34:	3308      	adds	r3, #8
 8007b36:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	9804      	ldr	r0, [sp, #16]
 8007b3c:	b015      	add	sp, #84	; 0x54
 8007b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b42:	4b9e      	ldr	r3, [pc, #632]	; (8007dbc <_dtoa_r+0x314>)
 8007b44:	9304      	str	r3, [sp, #16]
 8007b46:	3303      	adds	r3, #3
 8007b48:	e7f5      	b.n	8007b36 <_dtoa_r+0x8e>
 8007b4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b4e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b56:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007b5a:	d10c      	bne.n	8007b76 <_dtoa_r+0xce>
 8007b5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007b5e:	2301      	movs	r3, #1
 8007b60:	6013      	str	r3, [r2, #0]
 8007b62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 84b9 	beq.w	80084dc <_dtoa_r+0xa34>
 8007b6a:	4b96      	ldr	r3, [pc, #600]	; (8007dc4 <_dtoa_r+0x31c>)
 8007b6c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	3b01      	subs	r3, #1
 8007b72:	9304      	str	r3, [sp, #16]
 8007b74:	e7e1      	b.n	8007b3a <_dtoa_r+0x92>
 8007b76:	a913      	add	r1, sp, #76	; 0x4c
 8007b78:	aa12      	add	r2, sp, #72	; 0x48
 8007b7a:	ed9d 0b04 	vldr	d0, [sp, #16]
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f000 ff85 	bl	8008a8e <__d2b>
 8007b84:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8007b88:	9001      	str	r0, [sp, #4]
 8007b8a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007b8c:	2e00      	cmp	r6, #0
 8007b8e:	d046      	beq.n	8007c1e <_dtoa_r+0x176>
 8007b90:	9805      	ldr	r0, [sp, #20]
 8007b92:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8007b96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b9a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8007b9e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007ba2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8007ba6:	2700      	movs	r7, #0
 8007ba8:	ee07 aa90 	vmov	s15, sl
 8007bac:	ec43 2b16 	vmov	d6, r2, r3
 8007bb0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8007bb4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8007da0 <_dtoa_r+0x2f8>
 8007bb8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007bbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007bc0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8007da8 <_dtoa_r+0x300>
 8007bc4:	eea7 6b04 	vfma.f64	d6, d7, d4
 8007bc8:	eeb0 7b46 	vmov.f64	d7, d6
 8007bcc:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8007db0 <_dtoa_r+0x308>
 8007bd0:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007bd4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007bd8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007be0:	ee16 ba90 	vmov	fp, s13
 8007be4:	d508      	bpl.n	8007bf8 <_dtoa_r+0x150>
 8007be6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007bea:	eeb4 6b47 	vcmp.f64	d6, d7
 8007bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bf2:	bf18      	it	ne
 8007bf4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007bf8:	f1bb 0f16 	cmp.w	fp, #22
 8007bfc:	d834      	bhi.n	8007c68 <_dtoa_r+0x1c0>
 8007bfe:	4b72      	ldr	r3, [pc, #456]	; (8007dc8 <_dtoa_r+0x320>)
 8007c00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c04:	ed93 7b00 	vldr	d7, [r3]
 8007c08:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007c0c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c14:	dd01      	ble.n	8007c1a <_dtoa_r+0x172>
 8007c16:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	e025      	b.n	8007c6a <_dtoa_r+0x1c2>
 8007c1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c20:	eb01 0a03 	add.w	sl, r1, r3
 8007c24:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8007c28:	2b20      	cmp	r3, #32
 8007c2a:	dd17      	ble.n	8007c5c <_dtoa_r+0x1b4>
 8007c2c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007c30:	9a02      	ldr	r2, [sp, #8]
 8007c32:	409d      	lsls	r5, r3
 8007c34:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8007c38:	fa22 f303 	lsr.w	r3, r2, r3
 8007c3c:	432b      	orrs	r3, r5
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007c46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c4a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007c4e:	9805      	ldr	r0, [sp, #20]
 8007c50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c54:	2701      	movs	r7, #1
 8007c56:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8007c5a:	e7a5      	b.n	8007ba8 <_dtoa_r+0x100>
 8007c5c:	9a02      	ldr	r2, [sp, #8]
 8007c5e:	f1c3 0320 	rsb	r3, r3, #32
 8007c62:	fa02 f303 	lsl.w	r3, r2, r3
 8007c66:	e7ea      	b.n	8007c3e <_dtoa_r+0x196>
 8007c68:	2301      	movs	r3, #1
 8007c6a:	eba1 0a0a 	sub.w	sl, r1, sl
 8007c6e:	9310      	str	r3, [sp, #64]	; 0x40
 8007c70:	f1ba 0301 	subs.w	r3, sl, #1
 8007c74:	9307      	str	r3, [sp, #28]
 8007c76:	bf43      	ittte	mi
 8007c78:	2300      	movmi	r3, #0
 8007c7a:	f1ca 0a01 	rsbmi	sl, sl, #1
 8007c7e:	9307      	strmi	r3, [sp, #28]
 8007c80:	f04f 0a00 	movpl.w	sl, #0
 8007c84:	f1bb 0f00 	cmp.w	fp, #0
 8007c88:	db19      	blt.n	8007cbe <_dtoa_r+0x216>
 8007c8a:	9b07      	ldr	r3, [sp, #28]
 8007c8c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007c90:	445b      	add	r3, fp
 8007c92:	9307      	str	r3, [sp, #28]
 8007c94:	f04f 0800 	mov.w	r8, #0
 8007c98:	9b08      	ldr	r3, [sp, #32]
 8007c9a:	2b09      	cmp	r3, #9
 8007c9c:	d866      	bhi.n	8007d6c <_dtoa_r+0x2c4>
 8007c9e:	2b05      	cmp	r3, #5
 8007ca0:	bfc4      	itt	gt
 8007ca2:	3b04      	subgt	r3, #4
 8007ca4:	9308      	strgt	r3, [sp, #32]
 8007ca6:	9b08      	ldr	r3, [sp, #32]
 8007ca8:	f1a3 0302 	sub.w	r3, r3, #2
 8007cac:	bfcc      	ite	gt
 8007cae:	2500      	movgt	r5, #0
 8007cb0:	2501      	movle	r5, #1
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d866      	bhi.n	8007d84 <_dtoa_r+0x2dc>
 8007cb6:	e8df f003 	tbb	[pc, r3]
 8007cba:	5755      	.short	0x5755
 8007cbc:	4909      	.short	0x4909
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	ebaa 0a0b 	sub.w	sl, sl, fp
 8007cc4:	f1cb 0800 	rsb	r8, fp, #0
 8007cc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cca:	e7e5      	b.n	8007c98 <_dtoa_r+0x1f0>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	dd59      	ble.n	8007d8a <_dtoa_r+0x2e2>
 8007cd6:	9306      	str	r3, [sp, #24]
 8007cd8:	4699      	mov	r9, r3
 8007cda:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007cdc:	2200      	movs	r2, #0
 8007cde:	6072      	str	r2, [r6, #4]
 8007ce0:	2204      	movs	r2, #4
 8007ce2:	f102 0014 	add.w	r0, r2, #20
 8007ce6:	4298      	cmp	r0, r3
 8007ce8:	6871      	ldr	r1, [r6, #4]
 8007cea:	d953      	bls.n	8007d94 <_dtoa_r+0x2ec>
 8007cec:	4620      	mov	r0, r4
 8007cee:	f000 fc42 	bl	8008576 <_Balloc>
 8007cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cf4:	6030      	str	r0, [r6, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	9304      	str	r3, [sp, #16]
 8007cfa:	f1b9 0f0e 	cmp.w	r9, #14
 8007cfe:	f200 80c2 	bhi.w	8007e86 <_dtoa_r+0x3de>
 8007d02:	2d00      	cmp	r5, #0
 8007d04:	f000 80bf 	beq.w	8007e86 <_dtoa_r+0x3de>
 8007d08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d0c:	f1bb 0f00 	cmp.w	fp, #0
 8007d10:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8007d14:	f340 80e6 	ble.w	8007ee4 <_dtoa_r+0x43c>
 8007d18:	4a2b      	ldr	r2, [pc, #172]	; (8007dc8 <_dtoa_r+0x320>)
 8007d1a:	f00b 030f 	and.w	r3, fp, #15
 8007d1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d22:	ed93 7b00 	vldr	d7, [r3]
 8007d26:	ea4f 132b 	mov.w	r3, fp, asr #4
 8007d2a:	06da      	lsls	r2, r3, #27
 8007d2c:	f140 80d8 	bpl.w	8007ee0 <_dtoa_r+0x438>
 8007d30:	4a26      	ldr	r2, [pc, #152]	; (8007dcc <_dtoa_r+0x324>)
 8007d32:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8007d36:	ed92 6b08 	vldr	d6, [r2, #32]
 8007d3a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8007d3e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007d42:	f003 030f 	and.w	r3, r3, #15
 8007d46:	2203      	movs	r2, #3
 8007d48:	4920      	ldr	r1, [pc, #128]	; (8007dcc <_dtoa_r+0x324>)
 8007d4a:	e04a      	b.n	8007de2 <_dtoa_r+0x33a>
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d52:	445b      	add	r3, fp
 8007d54:	f103 0901 	add.w	r9, r3, #1
 8007d58:	9306      	str	r3, [sp, #24]
 8007d5a:	464b      	mov	r3, r9
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	bfb8      	it	lt
 8007d60:	2301      	movlt	r3, #1
 8007d62:	e7ba      	b.n	8007cda <_dtoa_r+0x232>
 8007d64:	2300      	movs	r3, #0
 8007d66:	e7b2      	b.n	8007cce <_dtoa_r+0x226>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	e7f0      	b.n	8007d4e <_dtoa_r+0x2a6>
 8007d6c:	2501      	movs	r5, #1
 8007d6e:	2300      	movs	r3, #0
 8007d70:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8007d74:	f04f 33ff 	mov.w	r3, #4294967295
 8007d78:	9306      	str	r3, [sp, #24]
 8007d7a:	4699      	mov	r9, r3
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2312      	movs	r3, #18
 8007d80:	920a      	str	r2, [sp, #40]	; 0x28
 8007d82:	e7aa      	b.n	8007cda <_dtoa_r+0x232>
 8007d84:	2301      	movs	r3, #1
 8007d86:	9309      	str	r3, [sp, #36]	; 0x24
 8007d88:	e7f4      	b.n	8007d74 <_dtoa_r+0x2cc>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	9306      	str	r3, [sp, #24]
 8007d8e:	4699      	mov	r9, r3
 8007d90:	461a      	mov	r2, r3
 8007d92:	e7f5      	b.n	8007d80 <_dtoa_r+0x2d8>
 8007d94:	3101      	adds	r1, #1
 8007d96:	6071      	str	r1, [r6, #4]
 8007d98:	0052      	lsls	r2, r2, #1
 8007d9a:	e7a2      	b.n	8007ce2 <_dtoa_r+0x23a>
 8007d9c:	f3af 8000 	nop.w
 8007da0:	636f4361 	.word	0x636f4361
 8007da4:	3fd287a7 	.word	0x3fd287a7
 8007da8:	8b60c8b3 	.word	0x8b60c8b3
 8007dac:	3fc68a28 	.word	0x3fc68a28
 8007db0:	509f79fb 	.word	0x509f79fb
 8007db4:	3fd34413 	.word	0x3fd34413
 8007db8:	7ff00000 	.word	0x7ff00000
 8007dbc:	08009465 	.word	0x08009465
 8007dc0:	0800945c 	.word	0x0800945c
 8007dc4:	08009439 	.word	0x08009439
 8007dc8:	08009498 	.word	0x08009498
 8007dcc:	08009470 	.word	0x08009470
 8007dd0:	07de      	lsls	r6, r3, #31
 8007dd2:	d504      	bpl.n	8007dde <_dtoa_r+0x336>
 8007dd4:	ed91 6b00 	vldr	d6, [r1]
 8007dd8:	3201      	adds	r2, #1
 8007dda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007dde:	105b      	asrs	r3, r3, #1
 8007de0:	3108      	adds	r1, #8
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1f4      	bne.n	8007dd0 <_dtoa_r+0x328>
 8007de6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007dea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007dee:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007df2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 80a7 	beq.w	8007f48 <_dtoa_r+0x4a0>
 8007dfa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007dfe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e02:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e0a:	f140 809d 	bpl.w	8007f48 <_dtoa_r+0x4a0>
 8007e0e:	f1b9 0f00 	cmp.w	r9, #0
 8007e12:	f000 8099 	beq.w	8007f48 <_dtoa_r+0x4a0>
 8007e16:	9b06      	ldr	r3, [sp, #24]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	dd30      	ble.n	8007e7e <_dtoa_r+0x3d6>
 8007e1c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007e20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007e24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007e28:	9d06      	ldr	r5, [sp, #24]
 8007e2a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007e2e:	3201      	adds	r2, #1
 8007e30:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007e34:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007e38:	ee07 2a90 	vmov	s15, r2
 8007e3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007e40:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007e44:	ed8d 5b02 	vstr	d5, [sp, #8]
 8007e48:	9a03      	ldr	r2, [sp, #12]
 8007e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e4e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8007e52:	2d00      	cmp	r5, #0
 8007e54:	d17b      	bne.n	8007f4e <_dtoa_r+0x4a6>
 8007e56:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007e5a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007e5e:	ec41 0b17 	vmov	d7, r0, r1
 8007e62:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e6a:	f300 8253 	bgt.w	8008314 <_dtoa_r+0x86c>
 8007e6e:	eeb1 7b47 	vneg.f64	d7, d7
 8007e72:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e7a:	f100 8249 	bmi.w	8008310 <_dtoa_r+0x868>
 8007e7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007e82:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f2c0 8119 	blt.w	80080c0 <_dtoa_r+0x618>
 8007e8e:	f1bb 0f0e 	cmp.w	fp, #14
 8007e92:	f300 8115 	bgt.w	80080c0 <_dtoa_r+0x618>
 8007e96:	4bc3      	ldr	r3, [pc, #780]	; (80081a4 <_dtoa_r+0x6fc>)
 8007e98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e9c:	ed93 6b00 	vldr	d6, [r3]
 8007ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f280 80ba 	bge.w	800801c <_dtoa_r+0x574>
 8007ea8:	f1b9 0f00 	cmp.w	r9, #0
 8007eac:	f300 80b6 	bgt.w	800801c <_dtoa_r+0x574>
 8007eb0:	f040 822d 	bne.w	800830e <_dtoa_r+0x866>
 8007eb4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007eb8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007ebc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ec0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ec8:	464d      	mov	r5, r9
 8007eca:	464f      	mov	r7, r9
 8007ecc:	f280 8204 	bge.w	80082d8 <_dtoa_r+0x830>
 8007ed0:	9b04      	ldr	r3, [sp, #16]
 8007ed2:	9a04      	ldr	r2, [sp, #16]
 8007ed4:	1c5e      	adds	r6, r3, #1
 8007ed6:	2331      	movs	r3, #49	; 0x31
 8007ed8:	7013      	strb	r3, [r2, #0]
 8007eda:	f10b 0b01 	add.w	fp, fp, #1
 8007ede:	e1ff      	b.n	80082e0 <_dtoa_r+0x838>
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	e731      	b.n	8007d48 <_dtoa_r+0x2a0>
 8007ee4:	d02e      	beq.n	8007f44 <_dtoa_r+0x49c>
 8007ee6:	f1cb 0300 	rsb	r3, fp, #0
 8007eea:	4aae      	ldr	r2, [pc, #696]	; (80081a4 <_dtoa_r+0x6fc>)
 8007eec:	f003 010f 	and.w	r1, r3, #15
 8007ef0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007ef4:	ed92 7b00 	vldr	d7, [r2]
 8007ef8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8007efc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007f00:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007f04:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8007f08:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007f0c:	49a6      	ldr	r1, [pc, #664]	; (80081a8 <_dtoa_r+0x700>)
 8007f0e:	111b      	asrs	r3, r3, #4
 8007f10:	2000      	movs	r0, #0
 8007f12:	2202      	movs	r2, #2
 8007f14:	b93b      	cbnz	r3, 8007f26 <_dtoa_r+0x47e>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	f43f af6b 	beq.w	8007df2 <_dtoa_r+0x34a>
 8007f1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f24:	e765      	b.n	8007df2 <_dtoa_r+0x34a>
 8007f26:	07dd      	lsls	r5, r3, #31
 8007f28:	d509      	bpl.n	8007f3e <_dtoa_r+0x496>
 8007f2a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8007f2e:	ed91 7b00 	vldr	d7, [r1]
 8007f32:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007f36:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007f3a:	3201      	adds	r2, #1
 8007f3c:	2001      	movs	r0, #1
 8007f3e:	105b      	asrs	r3, r3, #1
 8007f40:	3108      	adds	r1, #8
 8007f42:	e7e7      	b.n	8007f14 <_dtoa_r+0x46c>
 8007f44:	2202      	movs	r2, #2
 8007f46:	e754      	b.n	8007df2 <_dtoa_r+0x34a>
 8007f48:	465b      	mov	r3, fp
 8007f4a:	464d      	mov	r5, r9
 8007f4c:	e770      	b.n	8007e30 <_dtoa_r+0x388>
 8007f4e:	4a95      	ldr	r2, [pc, #596]	; (80081a4 <_dtoa_r+0x6fc>)
 8007f50:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8007f54:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f5a:	ec41 0b17 	vmov	d7, r0, r1
 8007f5e:	b35a      	cbz	r2, 8007fb8 <_dtoa_r+0x510>
 8007f60:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007f64:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007f68:	9e04      	ldr	r6, [sp, #16]
 8007f6a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007f6e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007f72:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007f76:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007f7a:	ee14 2a90 	vmov	r2, s9
 8007f7e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007f82:	3230      	adds	r2, #48	; 0x30
 8007f84:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007f88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f90:	f806 2b01 	strb.w	r2, [r6], #1
 8007f94:	d43b      	bmi.n	800800e <_dtoa_r+0x566>
 8007f96:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007f9a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fa2:	d472      	bmi.n	800808a <_dtoa_r+0x5e2>
 8007fa4:	9a04      	ldr	r2, [sp, #16]
 8007fa6:	1ab2      	subs	r2, r6, r2
 8007fa8:	4295      	cmp	r5, r2
 8007faa:	f77f af68 	ble.w	8007e7e <_dtoa_r+0x3d6>
 8007fae:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007fb2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007fb6:	e7de      	b.n	8007f76 <_dtoa_r+0x4ce>
 8007fb8:	9a04      	ldr	r2, [sp, #16]
 8007fba:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007fbe:	1956      	adds	r6, r2, r5
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007fc6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007fca:	ee14 2a90 	vmov	r2, s9
 8007fce:	3230      	adds	r2, #48	; 0x30
 8007fd0:	f801 2b01 	strb.w	r2, [r1], #1
 8007fd4:	42b1      	cmp	r1, r6
 8007fd6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007fda:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007fde:	d11a      	bne.n	8008016 <_dtoa_r+0x56e>
 8007fe0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007fe4:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007fe8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ff0:	dc4b      	bgt.n	800808a <_dtoa_r+0x5e2>
 8007ff2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007ff6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ffe:	f57f af3e 	bpl.w	8007e7e <_dtoa_r+0x3d6>
 8008002:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008006:	2a30      	cmp	r2, #48	; 0x30
 8008008:	f106 31ff 	add.w	r1, r6, #4294967295
 800800c:	d001      	beq.n	8008012 <_dtoa_r+0x56a>
 800800e:	469b      	mov	fp, r3
 8008010:	e02a      	b.n	8008068 <_dtoa_r+0x5c0>
 8008012:	460e      	mov	r6, r1
 8008014:	e7f5      	b.n	8008002 <_dtoa_r+0x55a>
 8008016:	ee26 6b03 	vmul.f64	d6, d6, d3
 800801a:	e7d4      	b.n	8007fc6 <_dtoa_r+0x51e>
 800801c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008020:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008024:	9e04      	ldr	r6, [sp, #16]
 8008026:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800802a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800802e:	ee15 3a10 	vmov	r3, s10
 8008032:	3330      	adds	r3, #48	; 0x30
 8008034:	f806 3b01 	strb.w	r3, [r6], #1
 8008038:	9b04      	ldr	r3, [sp, #16]
 800803a:	1af3      	subs	r3, r6, r3
 800803c:	4599      	cmp	r9, r3
 800803e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008042:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008046:	d133      	bne.n	80080b0 <_dtoa_r+0x608>
 8008048:	ee37 7b07 	vadd.f64	d7, d7, d7
 800804c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008054:	dc18      	bgt.n	8008088 <_dtoa_r+0x5e0>
 8008056:	eeb4 7b46 	vcmp.f64	d7, d6
 800805a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800805e:	d103      	bne.n	8008068 <_dtoa_r+0x5c0>
 8008060:	ee15 3a10 	vmov	r3, s10
 8008064:	07db      	lsls	r3, r3, #31
 8008066:	d40f      	bmi.n	8008088 <_dtoa_r+0x5e0>
 8008068:	9901      	ldr	r1, [sp, #4]
 800806a:	4620      	mov	r0, r4
 800806c:	f000 fab7 	bl	80085de <_Bfree>
 8008070:	2300      	movs	r3, #0
 8008072:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008074:	7033      	strb	r3, [r6, #0]
 8008076:	f10b 0301 	add.w	r3, fp, #1
 800807a:	6013      	str	r3, [r2, #0]
 800807c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800807e:	2b00      	cmp	r3, #0
 8008080:	f43f ad5b 	beq.w	8007b3a <_dtoa_r+0x92>
 8008084:	601e      	str	r6, [r3, #0]
 8008086:	e558      	b.n	8007b3a <_dtoa_r+0x92>
 8008088:	465b      	mov	r3, fp
 800808a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800808e:	2939      	cmp	r1, #57	; 0x39
 8008090:	f106 32ff 	add.w	r2, r6, #4294967295
 8008094:	d106      	bne.n	80080a4 <_dtoa_r+0x5fc>
 8008096:	9904      	ldr	r1, [sp, #16]
 8008098:	4291      	cmp	r1, r2
 800809a:	d107      	bne.n	80080ac <_dtoa_r+0x604>
 800809c:	2230      	movs	r2, #48	; 0x30
 800809e:	700a      	strb	r2, [r1, #0]
 80080a0:	3301      	adds	r3, #1
 80080a2:	460a      	mov	r2, r1
 80080a4:	7811      	ldrb	r1, [r2, #0]
 80080a6:	3101      	adds	r1, #1
 80080a8:	7011      	strb	r1, [r2, #0]
 80080aa:	e7b0      	b.n	800800e <_dtoa_r+0x566>
 80080ac:	4616      	mov	r6, r2
 80080ae:	e7ec      	b.n	800808a <_dtoa_r+0x5e2>
 80080b0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80080b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80080b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080bc:	d1b3      	bne.n	8008026 <_dtoa_r+0x57e>
 80080be:	e7d3      	b.n	8008068 <_dtoa_r+0x5c0>
 80080c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080c2:	2a00      	cmp	r2, #0
 80080c4:	f000 808d 	beq.w	80081e2 <_dtoa_r+0x73a>
 80080c8:	9a08      	ldr	r2, [sp, #32]
 80080ca:	2a01      	cmp	r2, #1
 80080cc:	dc72      	bgt.n	80081b4 <_dtoa_r+0x70c>
 80080ce:	2f00      	cmp	r7, #0
 80080d0:	d06c      	beq.n	80081ac <_dtoa_r+0x704>
 80080d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80080d6:	4645      	mov	r5, r8
 80080d8:	4656      	mov	r6, sl
 80080da:	9a07      	ldr	r2, [sp, #28]
 80080dc:	2101      	movs	r1, #1
 80080de:	441a      	add	r2, r3
 80080e0:	4620      	mov	r0, r4
 80080e2:	449a      	add	sl, r3
 80080e4:	9207      	str	r2, [sp, #28]
 80080e6:	f000 fb1a 	bl	800871e <__i2b>
 80080ea:	4607      	mov	r7, r0
 80080ec:	2e00      	cmp	r6, #0
 80080ee:	dd0b      	ble.n	8008108 <_dtoa_r+0x660>
 80080f0:	9b07      	ldr	r3, [sp, #28]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	dd08      	ble.n	8008108 <_dtoa_r+0x660>
 80080f6:	42b3      	cmp	r3, r6
 80080f8:	9a07      	ldr	r2, [sp, #28]
 80080fa:	bfa8      	it	ge
 80080fc:	4633      	movge	r3, r6
 80080fe:	ebaa 0a03 	sub.w	sl, sl, r3
 8008102:	1af6      	subs	r6, r6, r3
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	9307      	str	r3, [sp, #28]
 8008108:	f1b8 0f00 	cmp.w	r8, #0
 800810c:	d01d      	beq.n	800814a <_dtoa_r+0x6a2>
 800810e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008110:	2b00      	cmp	r3, #0
 8008112:	d06a      	beq.n	80081ea <_dtoa_r+0x742>
 8008114:	b18d      	cbz	r5, 800813a <_dtoa_r+0x692>
 8008116:	4639      	mov	r1, r7
 8008118:	462a      	mov	r2, r5
 800811a:	4620      	mov	r0, r4
 800811c:	f000 fb9e 	bl	800885c <__pow5mult>
 8008120:	9a01      	ldr	r2, [sp, #4]
 8008122:	4601      	mov	r1, r0
 8008124:	4607      	mov	r7, r0
 8008126:	4620      	mov	r0, r4
 8008128:	f000 fb02 	bl	8008730 <__multiply>
 800812c:	9901      	ldr	r1, [sp, #4]
 800812e:	900c      	str	r0, [sp, #48]	; 0x30
 8008130:	4620      	mov	r0, r4
 8008132:	f000 fa54 	bl	80085de <_Bfree>
 8008136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008138:	9301      	str	r3, [sp, #4]
 800813a:	ebb8 0205 	subs.w	r2, r8, r5
 800813e:	d004      	beq.n	800814a <_dtoa_r+0x6a2>
 8008140:	9901      	ldr	r1, [sp, #4]
 8008142:	4620      	mov	r0, r4
 8008144:	f000 fb8a 	bl	800885c <__pow5mult>
 8008148:	9001      	str	r0, [sp, #4]
 800814a:	2101      	movs	r1, #1
 800814c:	4620      	mov	r0, r4
 800814e:	f000 fae6 	bl	800871e <__i2b>
 8008152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008154:	4605      	mov	r5, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 81ca 	beq.w	80084f0 <_dtoa_r+0xa48>
 800815c:	461a      	mov	r2, r3
 800815e:	4601      	mov	r1, r0
 8008160:	4620      	mov	r0, r4
 8008162:	f000 fb7b 	bl	800885c <__pow5mult>
 8008166:	9b08      	ldr	r3, [sp, #32]
 8008168:	2b01      	cmp	r3, #1
 800816a:	4605      	mov	r5, r0
 800816c:	dc44      	bgt.n	80081f8 <_dtoa_r+0x750>
 800816e:	9b02      	ldr	r3, [sp, #8]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d13c      	bne.n	80081ee <_dtoa_r+0x746>
 8008174:	9b03      	ldr	r3, [sp, #12]
 8008176:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800817a:	2b00      	cmp	r3, #0
 800817c:	d137      	bne.n	80081ee <_dtoa_r+0x746>
 800817e:	9b03      	ldr	r3, [sp, #12]
 8008180:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008184:	0d1b      	lsrs	r3, r3, #20
 8008186:	051b      	lsls	r3, r3, #20
 8008188:	2b00      	cmp	r3, #0
 800818a:	d033      	beq.n	80081f4 <_dtoa_r+0x74c>
 800818c:	9b07      	ldr	r3, [sp, #28]
 800818e:	3301      	adds	r3, #1
 8008190:	f10a 0a01 	add.w	sl, sl, #1
 8008194:	9307      	str	r3, [sp, #28]
 8008196:	f04f 0801 	mov.w	r8, #1
 800819a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800819c:	bb73      	cbnz	r3, 80081fc <_dtoa_r+0x754>
 800819e:	2001      	movs	r0, #1
 80081a0:	e034      	b.n	800820c <_dtoa_r+0x764>
 80081a2:	bf00      	nop
 80081a4:	08009498 	.word	0x08009498
 80081a8:	08009470 	.word	0x08009470
 80081ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80081b2:	e790      	b.n	80080d6 <_dtoa_r+0x62e>
 80081b4:	f109 35ff 	add.w	r5, r9, #4294967295
 80081b8:	45a8      	cmp	r8, r5
 80081ba:	bfbf      	itttt	lt
 80081bc:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80081be:	eba5 0808 	sublt.w	r8, r5, r8
 80081c2:	4443      	addlt	r3, r8
 80081c4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80081c6:	bfb6      	itet	lt
 80081c8:	46a8      	movlt	r8, r5
 80081ca:	eba8 0505 	subge.w	r5, r8, r5
 80081ce:	2500      	movlt	r5, #0
 80081d0:	f1b9 0f00 	cmp.w	r9, #0
 80081d4:	bfb9      	ittee	lt
 80081d6:	ebaa 0609 	sublt.w	r6, sl, r9
 80081da:	2300      	movlt	r3, #0
 80081dc:	4656      	movge	r6, sl
 80081de:	464b      	movge	r3, r9
 80081e0:	e77b      	b.n	80080da <_dtoa_r+0x632>
 80081e2:	4645      	mov	r5, r8
 80081e4:	4656      	mov	r6, sl
 80081e6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80081e8:	e780      	b.n	80080ec <_dtoa_r+0x644>
 80081ea:	4642      	mov	r2, r8
 80081ec:	e7a8      	b.n	8008140 <_dtoa_r+0x698>
 80081ee:	f04f 0800 	mov.w	r8, #0
 80081f2:	e7d2      	b.n	800819a <_dtoa_r+0x6f2>
 80081f4:	4698      	mov	r8, r3
 80081f6:	e7d0      	b.n	800819a <_dtoa_r+0x6f2>
 80081f8:	f04f 0800 	mov.w	r8, #0
 80081fc:	692b      	ldr	r3, [r5, #16]
 80081fe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008202:	6918      	ldr	r0, [r3, #16]
 8008204:	f000 fa3d 	bl	8008682 <__hi0bits>
 8008208:	f1c0 0020 	rsb	r0, r0, #32
 800820c:	9b07      	ldr	r3, [sp, #28]
 800820e:	4418      	add	r0, r3
 8008210:	f010 001f 	ands.w	r0, r0, #31
 8008214:	d047      	beq.n	80082a6 <_dtoa_r+0x7fe>
 8008216:	f1c0 0320 	rsb	r3, r0, #32
 800821a:	2b04      	cmp	r3, #4
 800821c:	dd3b      	ble.n	8008296 <_dtoa_r+0x7ee>
 800821e:	9b07      	ldr	r3, [sp, #28]
 8008220:	f1c0 001c 	rsb	r0, r0, #28
 8008224:	4482      	add	sl, r0
 8008226:	4406      	add	r6, r0
 8008228:	4403      	add	r3, r0
 800822a:	9307      	str	r3, [sp, #28]
 800822c:	f1ba 0f00 	cmp.w	sl, #0
 8008230:	dd05      	ble.n	800823e <_dtoa_r+0x796>
 8008232:	4652      	mov	r2, sl
 8008234:	9901      	ldr	r1, [sp, #4]
 8008236:	4620      	mov	r0, r4
 8008238:	f000 fb5e 	bl	80088f8 <__lshift>
 800823c:	9001      	str	r0, [sp, #4]
 800823e:	9b07      	ldr	r3, [sp, #28]
 8008240:	2b00      	cmp	r3, #0
 8008242:	dd05      	ble.n	8008250 <_dtoa_r+0x7a8>
 8008244:	4629      	mov	r1, r5
 8008246:	461a      	mov	r2, r3
 8008248:	4620      	mov	r0, r4
 800824a:	f000 fb55 	bl	80088f8 <__lshift>
 800824e:	4605      	mov	r5, r0
 8008250:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008252:	b353      	cbz	r3, 80082aa <_dtoa_r+0x802>
 8008254:	4629      	mov	r1, r5
 8008256:	9801      	ldr	r0, [sp, #4]
 8008258:	f000 fba2 	bl	80089a0 <__mcmp>
 800825c:	2800      	cmp	r0, #0
 800825e:	da24      	bge.n	80082aa <_dtoa_r+0x802>
 8008260:	2300      	movs	r3, #0
 8008262:	220a      	movs	r2, #10
 8008264:	9901      	ldr	r1, [sp, #4]
 8008266:	4620      	mov	r0, r4
 8008268:	f000 f9d0 	bl	800860c <__multadd>
 800826c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800826e:	9001      	str	r0, [sp, #4]
 8008270:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 8142 	beq.w	80084fe <_dtoa_r+0xa56>
 800827a:	2300      	movs	r3, #0
 800827c:	4639      	mov	r1, r7
 800827e:	220a      	movs	r2, #10
 8008280:	4620      	mov	r0, r4
 8008282:	f000 f9c3 	bl	800860c <__multadd>
 8008286:	9b06      	ldr	r3, [sp, #24]
 8008288:	2b00      	cmp	r3, #0
 800828a:	4607      	mov	r7, r0
 800828c:	dc4b      	bgt.n	8008326 <_dtoa_r+0x87e>
 800828e:	9b08      	ldr	r3, [sp, #32]
 8008290:	2b02      	cmp	r3, #2
 8008292:	dd48      	ble.n	8008326 <_dtoa_r+0x87e>
 8008294:	e011      	b.n	80082ba <_dtoa_r+0x812>
 8008296:	d0c9      	beq.n	800822c <_dtoa_r+0x784>
 8008298:	9a07      	ldr	r2, [sp, #28]
 800829a:	331c      	adds	r3, #28
 800829c:	441a      	add	r2, r3
 800829e:	449a      	add	sl, r3
 80082a0:	441e      	add	r6, r3
 80082a2:	4613      	mov	r3, r2
 80082a4:	e7c1      	b.n	800822a <_dtoa_r+0x782>
 80082a6:	4603      	mov	r3, r0
 80082a8:	e7f6      	b.n	8008298 <_dtoa_r+0x7f0>
 80082aa:	f1b9 0f00 	cmp.w	r9, #0
 80082ae:	dc34      	bgt.n	800831a <_dtoa_r+0x872>
 80082b0:	9b08      	ldr	r3, [sp, #32]
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	dd31      	ble.n	800831a <_dtoa_r+0x872>
 80082b6:	f8cd 9018 	str.w	r9, [sp, #24]
 80082ba:	9b06      	ldr	r3, [sp, #24]
 80082bc:	b963      	cbnz	r3, 80082d8 <_dtoa_r+0x830>
 80082be:	4629      	mov	r1, r5
 80082c0:	2205      	movs	r2, #5
 80082c2:	4620      	mov	r0, r4
 80082c4:	f000 f9a2 	bl	800860c <__multadd>
 80082c8:	4601      	mov	r1, r0
 80082ca:	4605      	mov	r5, r0
 80082cc:	9801      	ldr	r0, [sp, #4]
 80082ce:	f000 fb67 	bl	80089a0 <__mcmp>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	f73f adfc 	bgt.w	8007ed0 <_dtoa_r+0x428>
 80082d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082da:	9e04      	ldr	r6, [sp, #16]
 80082dc:	ea6f 0b03 	mvn.w	fp, r3
 80082e0:	f04f 0900 	mov.w	r9, #0
 80082e4:	4629      	mov	r1, r5
 80082e6:	4620      	mov	r0, r4
 80082e8:	f000 f979 	bl	80085de <_Bfree>
 80082ec:	2f00      	cmp	r7, #0
 80082ee:	f43f aebb 	beq.w	8008068 <_dtoa_r+0x5c0>
 80082f2:	f1b9 0f00 	cmp.w	r9, #0
 80082f6:	d005      	beq.n	8008304 <_dtoa_r+0x85c>
 80082f8:	45b9      	cmp	r9, r7
 80082fa:	d003      	beq.n	8008304 <_dtoa_r+0x85c>
 80082fc:	4649      	mov	r1, r9
 80082fe:	4620      	mov	r0, r4
 8008300:	f000 f96d 	bl	80085de <_Bfree>
 8008304:	4639      	mov	r1, r7
 8008306:	4620      	mov	r0, r4
 8008308:	f000 f969 	bl	80085de <_Bfree>
 800830c:	e6ac      	b.n	8008068 <_dtoa_r+0x5c0>
 800830e:	2500      	movs	r5, #0
 8008310:	462f      	mov	r7, r5
 8008312:	e7e1      	b.n	80082d8 <_dtoa_r+0x830>
 8008314:	469b      	mov	fp, r3
 8008316:	462f      	mov	r7, r5
 8008318:	e5da      	b.n	8007ed0 <_dtoa_r+0x428>
 800831a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800831c:	f8cd 9018 	str.w	r9, [sp, #24]
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 80f3 	beq.w	800850c <_dtoa_r+0xa64>
 8008326:	2e00      	cmp	r6, #0
 8008328:	dd05      	ble.n	8008336 <_dtoa_r+0x88e>
 800832a:	4639      	mov	r1, r7
 800832c:	4632      	mov	r2, r6
 800832e:	4620      	mov	r0, r4
 8008330:	f000 fae2 	bl	80088f8 <__lshift>
 8008334:	4607      	mov	r7, r0
 8008336:	f1b8 0f00 	cmp.w	r8, #0
 800833a:	d04c      	beq.n	80083d6 <_dtoa_r+0x92e>
 800833c:	6879      	ldr	r1, [r7, #4]
 800833e:	4620      	mov	r0, r4
 8008340:	f000 f919 	bl	8008576 <_Balloc>
 8008344:	693a      	ldr	r2, [r7, #16]
 8008346:	3202      	adds	r2, #2
 8008348:	4606      	mov	r6, r0
 800834a:	0092      	lsls	r2, r2, #2
 800834c:	f107 010c 	add.w	r1, r7, #12
 8008350:	300c      	adds	r0, #12
 8008352:	f000 f903 	bl	800855c <memcpy>
 8008356:	2201      	movs	r2, #1
 8008358:	4631      	mov	r1, r6
 800835a:	4620      	mov	r0, r4
 800835c:	f000 facc 	bl	80088f8 <__lshift>
 8008360:	9b02      	ldr	r3, [sp, #8]
 8008362:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008366:	f003 0301 	and.w	r3, r3, #1
 800836a:	46b9      	mov	r9, r7
 800836c:	9307      	str	r3, [sp, #28]
 800836e:	4607      	mov	r7, r0
 8008370:	4629      	mov	r1, r5
 8008372:	9801      	ldr	r0, [sp, #4]
 8008374:	f7ff fb0c 	bl	8007990 <quorem>
 8008378:	4649      	mov	r1, r9
 800837a:	4606      	mov	r6, r0
 800837c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008380:	9801      	ldr	r0, [sp, #4]
 8008382:	f000 fb0d 	bl	80089a0 <__mcmp>
 8008386:	463a      	mov	r2, r7
 8008388:	9002      	str	r0, [sp, #8]
 800838a:	4629      	mov	r1, r5
 800838c:	4620      	mov	r0, r4
 800838e:	f000 fb21 	bl	80089d4 <__mdiff>
 8008392:	68c3      	ldr	r3, [r0, #12]
 8008394:	4602      	mov	r2, r0
 8008396:	bb03      	cbnz	r3, 80083da <_dtoa_r+0x932>
 8008398:	4601      	mov	r1, r0
 800839a:	9009      	str	r0, [sp, #36]	; 0x24
 800839c:	9801      	ldr	r0, [sp, #4]
 800839e:	f000 faff 	bl	80089a0 <__mcmp>
 80083a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083a4:	4603      	mov	r3, r0
 80083a6:	4611      	mov	r1, r2
 80083a8:	4620      	mov	r0, r4
 80083aa:	9309      	str	r3, [sp, #36]	; 0x24
 80083ac:	f000 f917 	bl	80085de <_Bfree>
 80083b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b2:	b9a3      	cbnz	r3, 80083de <_dtoa_r+0x936>
 80083b4:	9a08      	ldr	r2, [sp, #32]
 80083b6:	b992      	cbnz	r2, 80083de <_dtoa_r+0x936>
 80083b8:	9a07      	ldr	r2, [sp, #28]
 80083ba:	b982      	cbnz	r2, 80083de <_dtoa_r+0x936>
 80083bc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80083c0:	d029      	beq.n	8008416 <_dtoa_r+0x96e>
 80083c2:	9b02      	ldr	r3, [sp, #8]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	dd01      	ble.n	80083cc <_dtoa_r+0x924>
 80083c8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 80083cc:	f10a 0601 	add.w	r6, sl, #1
 80083d0:	f88a 8000 	strb.w	r8, [sl]
 80083d4:	e786      	b.n	80082e4 <_dtoa_r+0x83c>
 80083d6:	4638      	mov	r0, r7
 80083d8:	e7c2      	b.n	8008360 <_dtoa_r+0x8b8>
 80083da:	2301      	movs	r3, #1
 80083dc:	e7e3      	b.n	80083a6 <_dtoa_r+0x8fe>
 80083de:	9a02      	ldr	r2, [sp, #8]
 80083e0:	2a00      	cmp	r2, #0
 80083e2:	db04      	blt.n	80083ee <_dtoa_r+0x946>
 80083e4:	d124      	bne.n	8008430 <_dtoa_r+0x988>
 80083e6:	9a08      	ldr	r2, [sp, #32]
 80083e8:	bb12      	cbnz	r2, 8008430 <_dtoa_r+0x988>
 80083ea:	9a07      	ldr	r2, [sp, #28]
 80083ec:	bb02      	cbnz	r2, 8008430 <_dtoa_r+0x988>
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	ddec      	ble.n	80083cc <_dtoa_r+0x924>
 80083f2:	2201      	movs	r2, #1
 80083f4:	9901      	ldr	r1, [sp, #4]
 80083f6:	4620      	mov	r0, r4
 80083f8:	f000 fa7e 	bl	80088f8 <__lshift>
 80083fc:	4629      	mov	r1, r5
 80083fe:	9001      	str	r0, [sp, #4]
 8008400:	f000 face 	bl	80089a0 <__mcmp>
 8008404:	2800      	cmp	r0, #0
 8008406:	dc03      	bgt.n	8008410 <_dtoa_r+0x968>
 8008408:	d1e0      	bne.n	80083cc <_dtoa_r+0x924>
 800840a:	f018 0f01 	tst.w	r8, #1
 800840e:	d0dd      	beq.n	80083cc <_dtoa_r+0x924>
 8008410:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008414:	d1d8      	bne.n	80083c8 <_dtoa_r+0x920>
 8008416:	2339      	movs	r3, #57	; 0x39
 8008418:	f10a 0601 	add.w	r6, sl, #1
 800841c:	f88a 3000 	strb.w	r3, [sl]
 8008420:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008424:	2b39      	cmp	r3, #57	; 0x39
 8008426:	f106 32ff 	add.w	r2, r6, #4294967295
 800842a:	d04c      	beq.n	80084c6 <_dtoa_r+0xa1e>
 800842c:	3301      	adds	r3, #1
 800842e:	e051      	b.n	80084d4 <_dtoa_r+0xa2c>
 8008430:	2b00      	cmp	r3, #0
 8008432:	f10a 0601 	add.w	r6, sl, #1
 8008436:	dd05      	ble.n	8008444 <_dtoa_r+0x99c>
 8008438:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800843c:	d0eb      	beq.n	8008416 <_dtoa_r+0x96e>
 800843e:	f108 0801 	add.w	r8, r8, #1
 8008442:	e7c5      	b.n	80083d0 <_dtoa_r+0x928>
 8008444:	9b04      	ldr	r3, [sp, #16]
 8008446:	9a06      	ldr	r2, [sp, #24]
 8008448:	f806 8c01 	strb.w	r8, [r6, #-1]
 800844c:	1af3      	subs	r3, r6, r3
 800844e:	4293      	cmp	r3, r2
 8008450:	d021      	beq.n	8008496 <_dtoa_r+0x9ee>
 8008452:	2300      	movs	r3, #0
 8008454:	220a      	movs	r2, #10
 8008456:	9901      	ldr	r1, [sp, #4]
 8008458:	4620      	mov	r0, r4
 800845a:	f000 f8d7 	bl	800860c <__multadd>
 800845e:	45b9      	cmp	r9, r7
 8008460:	9001      	str	r0, [sp, #4]
 8008462:	f04f 0300 	mov.w	r3, #0
 8008466:	f04f 020a 	mov.w	r2, #10
 800846a:	4649      	mov	r1, r9
 800846c:	4620      	mov	r0, r4
 800846e:	d105      	bne.n	800847c <_dtoa_r+0x9d4>
 8008470:	f000 f8cc 	bl	800860c <__multadd>
 8008474:	4681      	mov	r9, r0
 8008476:	4607      	mov	r7, r0
 8008478:	46b2      	mov	sl, r6
 800847a:	e779      	b.n	8008370 <_dtoa_r+0x8c8>
 800847c:	f000 f8c6 	bl	800860c <__multadd>
 8008480:	4639      	mov	r1, r7
 8008482:	4681      	mov	r9, r0
 8008484:	2300      	movs	r3, #0
 8008486:	220a      	movs	r2, #10
 8008488:	4620      	mov	r0, r4
 800848a:	f000 f8bf 	bl	800860c <__multadd>
 800848e:	4607      	mov	r7, r0
 8008490:	e7f2      	b.n	8008478 <_dtoa_r+0x9d0>
 8008492:	f04f 0900 	mov.w	r9, #0
 8008496:	2201      	movs	r2, #1
 8008498:	9901      	ldr	r1, [sp, #4]
 800849a:	4620      	mov	r0, r4
 800849c:	f000 fa2c 	bl	80088f8 <__lshift>
 80084a0:	4629      	mov	r1, r5
 80084a2:	9001      	str	r0, [sp, #4]
 80084a4:	f000 fa7c 	bl	80089a0 <__mcmp>
 80084a8:	2800      	cmp	r0, #0
 80084aa:	dcb9      	bgt.n	8008420 <_dtoa_r+0x978>
 80084ac:	d102      	bne.n	80084b4 <_dtoa_r+0xa0c>
 80084ae:	f018 0f01 	tst.w	r8, #1
 80084b2:	d1b5      	bne.n	8008420 <_dtoa_r+0x978>
 80084b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80084b8:	2b30      	cmp	r3, #48	; 0x30
 80084ba:	f106 32ff 	add.w	r2, r6, #4294967295
 80084be:	f47f af11 	bne.w	80082e4 <_dtoa_r+0x83c>
 80084c2:	4616      	mov	r6, r2
 80084c4:	e7f6      	b.n	80084b4 <_dtoa_r+0xa0c>
 80084c6:	9b04      	ldr	r3, [sp, #16]
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d105      	bne.n	80084d8 <_dtoa_r+0xa30>
 80084cc:	9a04      	ldr	r2, [sp, #16]
 80084ce:	f10b 0b01 	add.w	fp, fp, #1
 80084d2:	2331      	movs	r3, #49	; 0x31
 80084d4:	7013      	strb	r3, [r2, #0]
 80084d6:	e705      	b.n	80082e4 <_dtoa_r+0x83c>
 80084d8:	4616      	mov	r6, r2
 80084da:	e7a1      	b.n	8008420 <_dtoa_r+0x978>
 80084dc:	4b16      	ldr	r3, [pc, #88]	; (8008538 <_dtoa_r+0xa90>)
 80084de:	f7ff bb48 	b.w	8007b72 <_dtoa_r+0xca>
 80084e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f47f ab23 	bne.w	8007b30 <_dtoa_r+0x88>
 80084ea:	4b14      	ldr	r3, [pc, #80]	; (800853c <_dtoa_r+0xa94>)
 80084ec:	f7ff bb41 	b.w	8007b72 <_dtoa_r+0xca>
 80084f0:	9b08      	ldr	r3, [sp, #32]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	f77f ae3b 	ble.w	800816e <_dtoa_r+0x6c6>
 80084f8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80084fc:	e64f      	b.n	800819e <_dtoa_r+0x6f6>
 80084fe:	9b06      	ldr	r3, [sp, #24]
 8008500:	2b00      	cmp	r3, #0
 8008502:	dc03      	bgt.n	800850c <_dtoa_r+0xa64>
 8008504:	9b08      	ldr	r3, [sp, #32]
 8008506:	2b02      	cmp	r3, #2
 8008508:	f73f aed7 	bgt.w	80082ba <_dtoa_r+0x812>
 800850c:	9e04      	ldr	r6, [sp, #16]
 800850e:	9801      	ldr	r0, [sp, #4]
 8008510:	4629      	mov	r1, r5
 8008512:	f7ff fa3d 	bl	8007990 <quorem>
 8008516:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800851a:	f806 8b01 	strb.w	r8, [r6], #1
 800851e:	9b04      	ldr	r3, [sp, #16]
 8008520:	9a06      	ldr	r2, [sp, #24]
 8008522:	1af3      	subs	r3, r6, r3
 8008524:	429a      	cmp	r2, r3
 8008526:	ddb4      	ble.n	8008492 <_dtoa_r+0x9ea>
 8008528:	2300      	movs	r3, #0
 800852a:	220a      	movs	r2, #10
 800852c:	9901      	ldr	r1, [sp, #4]
 800852e:	4620      	mov	r0, r4
 8008530:	f000 f86c 	bl	800860c <__multadd>
 8008534:	9001      	str	r0, [sp, #4]
 8008536:	e7ea      	b.n	800850e <_dtoa_r+0xa66>
 8008538:	08009438 	.word	0x08009438
 800853c:	0800945c 	.word	0x0800945c

08008540 <_localeconv_r>:
 8008540:	4b04      	ldr	r3, [pc, #16]	; (8008554 <_localeconv_r+0x14>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6a18      	ldr	r0, [r3, #32]
 8008546:	4b04      	ldr	r3, [pc, #16]	; (8008558 <_localeconv_r+0x18>)
 8008548:	2800      	cmp	r0, #0
 800854a:	bf08      	it	eq
 800854c:	4618      	moveq	r0, r3
 800854e:	30f0      	adds	r0, #240	; 0xf0
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	20000014 	.word	0x20000014
 8008558:	20000078 	.word	0x20000078

0800855c <memcpy>:
 800855c:	b510      	push	{r4, lr}
 800855e:	1e43      	subs	r3, r0, #1
 8008560:	440a      	add	r2, r1
 8008562:	4291      	cmp	r1, r2
 8008564:	d100      	bne.n	8008568 <memcpy+0xc>
 8008566:	bd10      	pop	{r4, pc}
 8008568:	f811 4b01 	ldrb.w	r4, [r1], #1
 800856c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008570:	e7f7      	b.n	8008562 <memcpy+0x6>

08008572 <__malloc_lock>:
 8008572:	4770      	bx	lr

08008574 <__malloc_unlock>:
 8008574:	4770      	bx	lr

08008576 <_Balloc>:
 8008576:	b570      	push	{r4, r5, r6, lr}
 8008578:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800857a:	4604      	mov	r4, r0
 800857c:	460e      	mov	r6, r1
 800857e:	b93d      	cbnz	r5, 8008590 <_Balloc+0x1a>
 8008580:	2010      	movs	r0, #16
 8008582:	f7fe fcdb 	bl	8006f3c <malloc>
 8008586:	6260      	str	r0, [r4, #36]	; 0x24
 8008588:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800858c:	6005      	str	r5, [r0, #0]
 800858e:	60c5      	str	r5, [r0, #12]
 8008590:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008592:	68eb      	ldr	r3, [r5, #12]
 8008594:	b183      	cbz	r3, 80085b8 <_Balloc+0x42>
 8008596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800859e:	b9b8      	cbnz	r0, 80085d0 <_Balloc+0x5a>
 80085a0:	2101      	movs	r1, #1
 80085a2:	fa01 f506 	lsl.w	r5, r1, r6
 80085a6:	1d6a      	adds	r2, r5, #5
 80085a8:	0092      	lsls	r2, r2, #2
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 fabe 	bl	8008b2c <_calloc_r>
 80085b0:	b160      	cbz	r0, 80085cc <_Balloc+0x56>
 80085b2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80085b6:	e00e      	b.n	80085d6 <_Balloc+0x60>
 80085b8:	2221      	movs	r2, #33	; 0x21
 80085ba:	2104      	movs	r1, #4
 80085bc:	4620      	mov	r0, r4
 80085be:	f000 fab5 	bl	8008b2c <_calloc_r>
 80085c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085c4:	60e8      	str	r0, [r5, #12]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1e4      	bne.n	8008596 <_Balloc+0x20>
 80085cc:	2000      	movs	r0, #0
 80085ce:	bd70      	pop	{r4, r5, r6, pc}
 80085d0:	6802      	ldr	r2, [r0, #0]
 80085d2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80085d6:	2300      	movs	r3, #0
 80085d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085dc:	e7f7      	b.n	80085ce <_Balloc+0x58>

080085de <_Bfree>:
 80085de:	b570      	push	{r4, r5, r6, lr}
 80085e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80085e2:	4606      	mov	r6, r0
 80085e4:	460d      	mov	r5, r1
 80085e6:	b93c      	cbnz	r4, 80085f8 <_Bfree+0x1a>
 80085e8:	2010      	movs	r0, #16
 80085ea:	f7fe fca7 	bl	8006f3c <malloc>
 80085ee:	6270      	str	r0, [r6, #36]	; 0x24
 80085f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085f4:	6004      	str	r4, [r0, #0]
 80085f6:	60c4      	str	r4, [r0, #12]
 80085f8:	b13d      	cbz	r5, 800860a <_Bfree+0x2c>
 80085fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80085fc:	686a      	ldr	r2, [r5, #4]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008604:	6029      	str	r1, [r5, #0]
 8008606:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800860a:	bd70      	pop	{r4, r5, r6, pc}

0800860c <__multadd>:
 800860c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008610:	690d      	ldr	r5, [r1, #16]
 8008612:	461f      	mov	r7, r3
 8008614:	4606      	mov	r6, r0
 8008616:	460c      	mov	r4, r1
 8008618:	f101 0c14 	add.w	ip, r1, #20
 800861c:	2300      	movs	r3, #0
 800861e:	f8dc 0000 	ldr.w	r0, [ip]
 8008622:	b281      	uxth	r1, r0
 8008624:	fb02 7101 	mla	r1, r2, r1, r7
 8008628:	0c0f      	lsrs	r7, r1, #16
 800862a:	0c00      	lsrs	r0, r0, #16
 800862c:	fb02 7000 	mla	r0, r2, r0, r7
 8008630:	b289      	uxth	r1, r1
 8008632:	3301      	adds	r3, #1
 8008634:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008638:	429d      	cmp	r5, r3
 800863a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800863e:	f84c 1b04 	str.w	r1, [ip], #4
 8008642:	dcec      	bgt.n	800861e <__multadd+0x12>
 8008644:	b1d7      	cbz	r7, 800867c <__multadd+0x70>
 8008646:	68a3      	ldr	r3, [r4, #8]
 8008648:	42ab      	cmp	r3, r5
 800864a:	dc12      	bgt.n	8008672 <__multadd+0x66>
 800864c:	6861      	ldr	r1, [r4, #4]
 800864e:	4630      	mov	r0, r6
 8008650:	3101      	adds	r1, #1
 8008652:	f7ff ff90 	bl	8008576 <_Balloc>
 8008656:	6922      	ldr	r2, [r4, #16]
 8008658:	3202      	adds	r2, #2
 800865a:	f104 010c 	add.w	r1, r4, #12
 800865e:	4680      	mov	r8, r0
 8008660:	0092      	lsls	r2, r2, #2
 8008662:	300c      	adds	r0, #12
 8008664:	f7ff ff7a 	bl	800855c <memcpy>
 8008668:	4621      	mov	r1, r4
 800866a:	4630      	mov	r0, r6
 800866c:	f7ff ffb7 	bl	80085de <_Bfree>
 8008670:	4644      	mov	r4, r8
 8008672:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008676:	3501      	adds	r5, #1
 8008678:	615f      	str	r7, [r3, #20]
 800867a:	6125      	str	r5, [r4, #16]
 800867c:	4620      	mov	r0, r4
 800867e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008682 <__hi0bits>:
 8008682:	0c02      	lsrs	r2, r0, #16
 8008684:	0412      	lsls	r2, r2, #16
 8008686:	4603      	mov	r3, r0
 8008688:	b9b2      	cbnz	r2, 80086b8 <__hi0bits+0x36>
 800868a:	0403      	lsls	r3, r0, #16
 800868c:	2010      	movs	r0, #16
 800868e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008692:	bf04      	itt	eq
 8008694:	021b      	lsleq	r3, r3, #8
 8008696:	3008      	addeq	r0, #8
 8008698:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800869c:	bf04      	itt	eq
 800869e:	011b      	lsleq	r3, r3, #4
 80086a0:	3004      	addeq	r0, #4
 80086a2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80086a6:	bf04      	itt	eq
 80086a8:	009b      	lsleq	r3, r3, #2
 80086aa:	3002      	addeq	r0, #2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	db06      	blt.n	80086be <__hi0bits+0x3c>
 80086b0:	005b      	lsls	r3, r3, #1
 80086b2:	d503      	bpl.n	80086bc <__hi0bits+0x3a>
 80086b4:	3001      	adds	r0, #1
 80086b6:	4770      	bx	lr
 80086b8:	2000      	movs	r0, #0
 80086ba:	e7e8      	b.n	800868e <__hi0bits+0xc>
 80086bc:	2020      	movs	r0, #32
 80086be:	4770      	bx	lr

080086c0 <__lo0bits>:
 80086c0:	6803      	ldr	r3, [r0, #0]
 80086c2:	f013 0207 	ands.w	r2, r3, #7
 80086c6:	4601      	mov	r1, r0
 80086c8:	d00b      	beq.n	80086e2 <__lo0bits+0x22>
 80086ca:	07da      	lsls	r2, r3, #31
 80086cc:	d423      	bmi.n	8008716 <__lo0bits+0x56>
 80086ce:	0798      	lsls	r0, r3, #30
 80086d0:	bf49      	itett	mi
 80086d2:	085b      	lsrmi	r3, r3, #1
 80086d4:	089b      	lsrpl	r3, r3, #2
 80086d6:	2001      	movmi	r0, #1
 80086d8:	600b      	strmi	r3, [r1, #0]
 80086da:	bf5c      	itt	pl
 80086dc:	600b      	strpl	r3, [r1, #0]
 80086de:	2002      	movpl	r0, #2
 80086e0:	4770      	bx	lr
 80086e2:	b298      	uxth	r0, r3
 80086e4:	b9a8      	cbnz	r0, 8008712 <__lo0bits+0x52>
 80086e6:	0c1b      	lsrs	r3, r3, #16
 80086e8:	2010      	movs	r0, #16
 80086ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80086ee:	bf04      	itt	eq
 80086f0:	0a1b      	lsreq	r3, r3, #8
 80086f2:	3008      	addeq	r0, #8
 80086f4:	071a      	lsls	r2, r3, #28
 80086f6:	bf04      	itt	eq
 80086f8:	091b      	lsreq	r3, r3, #4
 80086fa:	3004      	addeq	r0, #4
 80086fc:	079a      	lsls	r2, r3, #30
 80086fe:	bf04      	itt	eq
 8008700:	089b      	lsreq	r3, r3, #2
 8008702:	3002      	addeq	r0, #2
 8008704:	07da      	lsls	r2, r3, #31
 8008706:	d402      	bmi.n	800870e <__lo0bits+0x4e>
 8008708:	085b      	lsrs	r3, r3, #1
 800870a:	d006      	beq.n	800871a <__lo0bits+0x5a>
 800870c:	3001      	adds	r0, #1
 800870e:	600b      	str	r3, [r1, #0]
 8008710:	4770      	bx	lr
 8008712:	4610      	mov	r0, r2
 8008714:	e7e9      	b.n	80086ea <__lo0bits+0x2a>
 8008716:	2000      	movs	r0, #0
 8008718:	4770      	bx	lr
 800871a:	2020      	movs	r0, #32
 800871c:	4770      	bx	lr

0800871e <__i2b>:
 800871e:	b510      	push	{r4, lr}
 8008720:	460c      	mov	r4, r1
 8008722:	2101      	movs	r1, #1
 8008724:	f7ff ff27 	bl	8008576 <_Balloc>
 8008728:	2201      	movs	r2, #1
 800872a:	6144      	str	r4, [r0, #20]
 800872c:	6102      	str	r2, [r0, #16]
 800872e:	bd10      	pop	{r4, pc}

08008730 <__multiply>:
 8008730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008734:	4614      	mov	r4, r2
 8008736:	690a      	ldr	r2, [r1, #16]
 8008738:	6923      	ldr	r3, [r4, #16]
 800873a:	429a      	cmp	r2, r3
 800873c:	bfb8      	it	lt
 800873e:	460b      	movlt	r3, r1
 8008740:	4688      	mov	r8, r1
 8008742:	bfbc      	itt	lt
 8008744:	46a0      	movlt	r8, r4
 8008746:	461c      	movlt	r4, r3
 8008748:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800874c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008750:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008754:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008758:	eb07 0609 	add.w	r6, r7, r9
 800875c:	42b3      	cmp	r3, r6
 800875e:	bfb8      	it	lt
 8008760:	3101      	addlt	r1, #1
 8008762:	f7ff ff08 	bl	8008576 <_Balloc>
 8008766:	f100 0514 	add.w	r5, r0, #20
 800876a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800876e:	462b      	mov	r3, r5
 8008770:	2200      	movs	r2, #0
 8008772:	4573      	cmp	r3, lr
 8008774:	d316      	bcc.n	80087a4 <__multiply+0x74>
 8008776:	f104 0214 	add.w	r2, r4, #20
 800877a:	f108 0114 	add.w	r1, r8, #20
 800877e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008782:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	9b00      	ldr	r3, [sp, #0]
 800878a:	9201      	str	r2, [sp, #4]
 800878c:	4293      	cmp	r3, r2
 800878e:	d80c      	bhi.n	80087aa <__multiply+0x7a>
 8008790:	2e00      	cmp	r6, #0
 8008792:	dd03      	ble.n	800879c <__multiply+0x6c>
 8008794:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008798:	2b00      	cmp	r3, #0
 800879a:	d05d      	beq.n	8008858 <__multiply+0x128>
 800879c:	6106      	str	r6, [r0, #16]
 800879e:	b003      	add	sp, #12
 80087a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a4:	f843 2b04 	str.w	r2, [r3], #4
 80087a8:	e7e3      	b.n	8008772 <__multiply+0x42>
 80087aa:	f8b2 b000 	ldrh.w	fp, [r2]
 80087ae:	f1bb 0f00 	cmp.w	fp, #0
 80087b2:	d023      	beq.n	80087fc <__multiply+0xcc>
 80087b4:	4689      	mov	r9, r1
 80087b6:	46ac      	mov	ip, r5
 80087b8:	f04f 0800 	mov.w	r8, #0
 80087bc:	f859 4b04 	ldr.w	r4, [r9], #4
 80087c0:	f8dc a000 	ldr.w	sl, [ip]
 80087c4:	b2a3      	uxth	r3, r4
 80087c6:	fa1f fa8a 	uxth.w	sl, sl
 80087ca:	fb0b a303 	mla	r3, fp, r3, sl
 80087ce:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80087d2:	f8dc 4000 	ldr.w	r4, [ip]
 80087d6:	4443      	add	r3, r8
 80087d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80087dc:	fb0b 840a 	mla	r4, fp, sl, r8
 80087e0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80087e4:	46e2      	mov	sl, ip
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80087ec:	454f      	cmp	r7, r9
 80087ee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80087f2:	f84a 3b04 	str.w	r3, [sl], #4
 80087f6:	d82b      	bhi.n	8008850 <__multiply+0x120>
 80087f8:	f8cc 8004 	str.w	r8, [ip, #4]
 80087fc:	9b01      	ldr	r3, [sp, #4]
 80087fe:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008802:	3204      	adds	r2, #4
 8008804:	f1ba 0f00 	cmp.w	sl, #0
 8008808:	d020      	beq.n	800884c <__multiply+0x11c>
 800880a:	682b      	ldr	r3, [r5, #0]
 800880c:	4689      	mov	r9, r1
 800880e:	46a8      	mov	r8, r5
 8008810:	f04f 0b00 	mov.w	fp, #0
 8008814:	f8b9 c000 	ldrh.w	ip, [r9]
 8008818:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800881c:	fb0a 440c 	mla	r4, sl, ip, r4
 8008820:	445c      	add	r4, fp
 8008822:	46c4      	mov	ip, r8
 8008824:	b29b      	uxth	r3, r3
 8008826:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800882a:	f84c 3b04 	str.w	r3, [ip], #4
 800882e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008832:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008836:	0c1b      	lsrs	r3, r3, #16
 8008838:	fb0a b303 	mla	r3, sl, r3, fp
 800883c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008840:	454f      	cmp	r7, r9
 8008842:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008846:	d805      	bhi.n	8008854 <__multiply+0x124>
 8008848:	f8c8 3004 	str.w	r3, [r8, #4]
 800884c:	3504      	adds	r5, #4
 800884e:	e79b      	b.n	8008788 <__multiply+0x58>
 8008850:	46d4      	mov	ip, sl
 8008852:	e7b3      	b.n	80087bc <__multiply+0x8c>
 8008854:	46e0      	mov	r8, ip
 8008856:	e7dd      	b.n	8008814 <__multiply+0xe4>
 8008858:	3e01      	subs	r6, #1
 800885a:	e799      	b.n	8008790 <__multiply+0x60>

0800885c <__pow5mult>:
 800885c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008860:	4615      	mov	r5, r2
 8008862:	f012 0203 	ands.w	r2, r2, #3
 8008866:	4606      	mov	r6, r0
 8008868:	460f      	mov	r7, r1
 800886a:	d007      	beq.n	800887c <__pow5mult+0x20>
 800886c:	3a01      	subs	r2, #1
 800886e:	4c21      	ldr	r4, [pc, #132]	; (80088f4 <__pow5mult+0x98>)
 8008870:	2300      	movs	r3, #0
 8008872:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008876:	f7ff fec9 	bl	800860c <__multadd>
 800887a:	4607      	mov	r7, r0
 800887c:	10ad      	asrs	r5, r5, #2
 800887e:	d035      	beq.n	80088ec <__pow5mult+0x90>
 8008880:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008882:	b93c      	cbnz	r4, 8008894 <__pow5mult+0x38>
 8008884:	2010      	movs	r0, #16
 8008886:	f7fe fb59 	bl	8006f3c <malloc>
 800888a:	6270      	str	r0, [r6, #36]	; 0x24
 800888c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008890:	6004      	str	r4, [r0, #0]
 8008892:	60c4      	str	r4, [r0, #12]
 8008894:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008898:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800889c:	b94c      	cbnz	r4, 80088b2 <__pow5mult+0x56>
 800889e:	f240 2171 	movw	r1, #625	; 0x271
 80088a2:	4630      	mov	r0, r6
 80088a4:	f7ff ff3b 	bl	800871e <__i2b>
 80088a8:	2300      	movs	r3, #0
 80088aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80088ae:	4604      	mov	r4, r0
 80088b0:	6003      	str	r3, [r0, #0]
 80088b2:	f04f 0800 	mov.w	r8, #0
 80088b6:	07eb      	lsls	r3, r5, #31
 80088b8:	d50a      	bpl.n	80088d0 <__pow5mult+0x74>
 80088ba:	4639      	mov	r1, r7
 80088bc:	4622      	mov	r2, r4
 80088be:	4630      	mov	r0, r6
 80088c0:	f7ff ff36 	bl	8008730 <__multiply>
 80088c4:	4639      	mov	r1, r7
 80088c6:	4681      	mov	r9, r0
 80088c8:	4630      	mov	r0, r6
 80088ca:	f7ff fe88 	bl	80085de <_Bfree>
 80088ce:	464f      	mov	r7, r9
 80088d0:	106d      	asrs	r5, r5, #1
 80088d2:	d00b      	beq.n	80088ec <__pow5mult+0x90>
 80088d4:	6820      	ldr	r0, [r4, #0]
 80088d6:	b938      	cbnz	r0, 80088e8 <__pow5mult+0x8c>
 80088d8:	4622      	mov	r2, r4
 80088da:	4621      	mov	r1, r4
 80088dc:	4630      	mov	r0, r6
 80088de:	f7ff ff27 	bl	8008730 <__multiply>
 80088e2:	6020      	str	r0, [r4, #0]
 80088e4:	f8c0 8000 	str.w	r8, [r0]
 80088e8:	4604      	mov	r4, r0
 80088ea:	e7e4      	b.n	80088b6 <__pow5mult+0x5a>
 80088ec:	4638      	mov	r0, r7
 80088ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088f2:	bf00      	nop
 80088f4:	08009560 	.word	0x08009560

080088f8 <__lshift>:
 80088f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088fc:	460c      	mov	r4, r1
 80088fe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008902:	6923      	ldr	r3, [r4, #16]
 8008904:	6849      	ldr	r1, [r1, #4]
 8008906:	eb0a 0903 	add.w	r9, sl, r3
 800890a:	68a3      	ldr	r3, [r4, #8]
 800890c:	4607      	mov	r7, r0
 800890e:	4616      	mov	r6, r2
 8008910:	f109 0501 	add.w	r5, r9, #1
 8008914:	42ab      	cmp	r3, r5
 8008916:	db32      	blt.n	800897e <__lshift+0x86>
 8008918:	4638      	mov	r0, r7
 800891a:	f7ff fe2c 	bl	8008576 <_Balloc>
 800891e:	2300      	movs	r3, #0
 8008920:	4680      	mov	r8, r0
 8008922:	f100 0114 	add.w	r1, r0, #20
 8008926:	461a      	mov	r2, r3
 8008928:	4553      	cmp	r3, sl
 800892a:	db2b      	blt.n	8008984 <__lshift+0x8c>
 800892c:	6920      	ldr	r0, [r4, #16]
 800892e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008932:	f104 0314 	add.w	r3, r4, #20
 8008936:	f016 021f 	ands.w	r2, r6, #31
 800893a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800893e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008942:	d025      	beq.n	8008990 <__lshift+0x98>
 8008944:	f1c2 0e20 	rsb	lr, r2, #32
 8008948:	2000      	movs	r0, #0
 800894a:	681e      	ldr	r6, [r3, #0]
 800894c:	468a      	mov	sl, r1
 800894e:	4096      	lsls	r6, r2
 8008950:	4330      	orrs	r0, r6
 8008952:	f84a 0b04 	str.w	r0, [sl], #4
 8008956:	f853 0b04 	ldr.w	r0, [r3], #4
 800895a:	459c      	cmp	ip, r3
 800895c:	fa20 f00e 	lsr.w	r0, r0, lr
 8008960:	d814      	bhi.n	800898c <__lshift+0x94>
 8008962:	6048      	str	r0, [r1, #4]
 8008964:	b108      	cbz	r0, 800896a <__lshift+0x72>
 8008966:	f109 0502 	add.w	r5, r9, #2
 800896a:	3d01      	subs	r5, #1
 800896c:	4638      	mov	r0, r7
 800896e:	f8c8 5010 	str.w	r5, [r8, #16]
 8008972:	4621      	mov	r1, r4
 8008974:	f7ff fe33 	bl	80085de <_Bfree>
 8008978:	4640      	mov	r0, r8
 800897a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800897e:	3101      	adds	r1, #1
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	e7c7      	b.n	8008914 <__lshift+0x1c>
 8008984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008988:	3301      	adds	r3, #1
 800898a:	e7cd      	b.n	8008928 <__lshift+0x30>
 800898c:	4651      	mov	r1, sl
 800898e:	e7dc      	b.n	800894a <__lshift+0x52>
 8008990:	3904      	subs	r1, #4
 8008992:	f853 2b04 	ldr.w	r2, [r3], #4
 8008996:	f841 2f04 	str.w	r2, [r1, #4]!
 800899a:	459c      	cmp	ip, r3
 800899c:	d8f9      	bhi.n	8008992 <__lshift+0x9a>
 800899e:	e7e4      	b.n	800896a <__lshift+0x72>

080089a0 <__mcmp>:
 80089a0:	6903      	ldr	r3, [r0, #16]
 80089a2:	690a      	ldr	r2, [r1, #16]
 80089a4:	1a9b      	subs	r3, r3, r2
 80089a6:	b530      	push	{r4, r5, lr}
 80089a8:	d10c      	bne.n	80089c4 <__mcmp+0x24>
 80089aa:	0092      	lsls	r2, r2, #2
 80089ac:	3014      	adds	r0, #20
 80089ae:	3114      	adds	r1, #20
 80089b0:	1884      	adds	r4, r0, r2
 80089b2:	4411      	add	r1, r2
 80089b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089bc:	4295      	cmp	r5, r2
 80089be:	d003      	beq.n	80089c8 <__mcmp+0x28>
 80089c0:	d305      	bcc.n	80089ce <__mcmp+0x2e>
 80089c2:	2301      	movs	r3, #1
 80089c4:	4618      	mov	r0, r3
 80089c6:	bd30      	pop	{r4, r5, pc}
 80089c8:	42a0      	cmp	r0, r4
 80089ca:	d3f3      	bcc.n	80089b4 <__mcmp+0x14>
 80089cc:	e7fa      	b.n	80089c4 <__mcmp+0x24>
 80089ce:	f04f 33ff 	mov.w	r3, #4294967295
 80089d2:	e7f7      	b.n	80089c4 <__mcmp+0x24>

080089d4 <__mdiff>:
 80089d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089d8:	460d      	mov	r5, r1
 80089da:	4607      	mov	r7, r0
 80089dc:	4611      	mov	r1, r2
 80089de:	4628      	mov	r0, r5
 80089e0:	4614      	mov	r4, r2
 80089e2:	f7ff ffdd 	bl	80089a0 <__mcmp>
 80089e6:	1e06      	subs	r6, r0, #0
 80089e8:	d108      	bne.n	80089fc <__mdiff+0x28>
 80089ea:	4631      	mov	r1, r6
 80089ec:	4638      	mov	r0, r7
 80089ee:	f7ff fdc2 	bl	8008576 <_Balloc>
 80089f2:	2301      	movs	r3, #1
 80089f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80089f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fc:	bfa4      	itt	ge
 80089fe:	4623      	movge	r3, r4
 8008a00:	462c      	movge	r4, r5
 8008a02:	4638      	mov	r0, r7
 8008a04:	6861      	ldr	r1, [r4, #4]
 8008a06:	bfa6      	itte	ge
 8008a08:	461d      	movge	r5, r3
 8008a0a:	2600      	movge	r6, #0
 8008a0c:	2601      	movlt	r6, #1
 8008a0e:	f7ff fdb2 	bl	8008576 <_Balloc>
 8008a12:	692b      	ldr	r3, [r5, #16]
 8008a14:	60c6      	str	r6, [r0, #12]
 8008a16:	6926      	ldr	r6, [r4, #16]
 8008a18:	f105 0914 	add.w	r9, r5, #20
 8008a1c:	f104 0214 	add.w	r2, r4, #20
 8008a20:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008a24:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008a28:	f100 0514 	add.w	r5, r0, #20
 8008a2c:	f04f 0e00 	mov.w	lr, #0
 8008a30:	f852 ab04 	ldr.w	sl, [r2], #4
 8008a34:	f859 4b04 	ldr.w	r4, [r9], #4
 8008a38:	fa1e f18a 	uxtah	r1, lr, sl
 8008a3c:	b2a3      	uxth	r3, r4
 8008a3e:	1ac9      	subs	r1, r1, r3
 8008a40:	0c23      	lsrs	r3, r4, #16
 8008a42:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008a46:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008a4a:	b289      	uxth	r1, r1
 8008a4c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008a50:	45c8      	cmp	r8, r9
 8008a52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008a56:	4694      	mov	ip, r2
 8008a58:	f845 3b04 	str.w	r3, [r5], #4
 8008a5c:	d8e8      	bhi.n	8008a30 <__mdiff+0x5c>
 8008a5e:	45bc      	cmp	ip, r7
 8008a60:	d304      	bcc.n	8008a6c <__mdiff+0x98>
 8008a62:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008a66:	b183      	cbz	r3, 8008a8a <__mdiff+0xb6>
 8008a68:	6106      	str	r6, [r0, #16]
 8008a6a:	e7c5      	b.n	80089f8 <__mdiff+0x24>
 8008a6c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008a70:	fa1e f381 	uxtah	r3, lr, r1
 8008a74:	141a      	asrs	r2, r3, #16
 8008a76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a80:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008a84:	f845 3b04 	str.w	r3, [r5], #4
 8008a88:	e7e9      	b.n	8008a5e <__mdiff+0x8a>
 8008a8a:	3e01      	subs	r6, #1
 8008a8c:	e7e9      	b.n	8008a62 <__mdiff+0x8e>

08008a8e <__d2b>:
 8008a8e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a92:	460e      	mov	r6, r1
 8008a94:	2101      	movs	r1, #1
 8008a96:	ec59 8b10 	vmov	r8, r9, d0
 8008a9a:	4615      	mov	r5, r2
 8008a9c:	f7ff fd6b 	bl	8008576 <_Balloc>
 8008aa0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008aa4:	4607      	mov	r7, r0
 8008aa6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008aaa:	bb34      	cbnz	r4, 8008afa <__d2b+0x6c>
 8008aac:	9301      	str	r3, [sp, #4]
 8008aae:	f1b8 0300 	subs.w	r3, r8, #0
 8008ab2:	d027      	beq.n	8008b04 <__d2b+0x76>
 8008ab4:	a802      	add	r0, sp, #8
 8008ab6:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008aba:	f7ff fe01 	bl	80086c0 <__lo0bits>
 8008abe:	9900      	ldr	r1, [sp, #0]
 8008ac0:	b1f0      	cbz	r0, 8008b00 <__d2b+0x72>
 8008ac2:	9a01      	ldr	r2, [sp, #4]
 8008ac4:	f1c0 0320 	rsb	r3, r0, #32
 8008ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8008acc:	430b      	orrs	r3, r1
 8008ace:	40c2      	lsrs	r2, r0
 8008ad0:	617b      	str	r3, [r7, #20]
 8008ad2:	9201      	str	r2, [sp, #4]
 8008ad4:	9b01      	ldr	r3, [sp, #4]
 8008ad6:	61bb      	str	r3, [r7, #24]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	bf14      	ite	ne
 8008adc:	2102      	movne	r1, #2
 8008ade:	2101      	moveq	r1, #1
 8008ae0:	6139      	str	r1, [r7, #16]
 8008ae2:	b1c4      	cbz	r4, 8008b16 <__d2b+0x88>
 8008ae4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008ae8:	4404      	add	r4, r0
 8008aea:	6034      	str	r4, [r6, #0]
 8008aec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008af0:	6028      	str	r0, [r5, #0]
 8008af2:	4638      	mov	r0, r7
 8008af4:	b003      	add	sp, #12
 8008af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008afa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008afe:	e7d5      	b.n	8008aac <__d2b+0x1e>
 8008b00:	6179      	str	r1, [r7, #20]
 8008b02:	e7e7      	b.n	8008ad4 <__d2b+0x46>
 8008b04:	a801      	add	r0, sp, #4
 8008b06:	f7ff fddb 	bl	80086c0 <__lo0bits>
 8008b0a:	9b01      	ldr	r3, [sp, #4]
 8008b0c:	617b      	str	r3, [r7, #20]
 8008b0e:	2101      	movs	r1, #1
 8008b10:	6139      	str	r1, [r7, #16]
 8008b12:	3020      	adds	r0, #32
 8008b14:	e7e5      	b.n	8008ae2 <__d2b+0x54>
 8008b16:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008b1a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b1e:	6030      	str	r0, [r6, #0]
 8008b20:	6918      	ldr	r0, [r3, #16]
 8008b22:	f7ff fdae 	bl	8008682 <__hi0bits>
 8008b26:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008b2a:	e7e1      	b.n	8008af0 <__d2b+0x62>

08008b2c <_calloc_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	fb02 f401 	mul.w	r4, r2, r1
 8008b32:	4621      	mov	r1, r4
 8008b34:	f7fe fa68 	bl	8007008 <_malloc_r>
 8008b38:	4605      	mov	r5, r0
 8008b3a:	b118      	cbz	r0, 8008b44 <_calloc_r+0x18>
 8008b3c:	4622      	mov	r2, r4
 8008b3e:	2100      	movs	r1, #0
 8008b40:	f7fe fa0c 	bl	8006f5c <memset>
 8008b44:	4628      	mov	r0, r5
 8008b46:	bd38      	pop	{r3, r4, r5, pc}

08008b48 <__ssputs_r>:
 8008b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b4c:	688e      	ldr	r6, [r1, #8]
 8008b4e:	429e      	cmp	r6, r3
 8008b50:	4682      	mov	sl, r0
 8008b52:	460c      	mov	r4, r1
 8008b54:	4690      	mov	r8, r2
 8008b56:	4699      	mov	r9, r3
 8008b58:	d837      	bhi.n	8008bca <__ssputs_r+0x82>
 8008b5a:	898a      	ldrh	r2, [r1, #12]
 8008b5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b60:	d031      	beq.n	8008bc6 <__ssputs_r+0x7e>
 8008b62:	6825      	ldr	r5, [r4, #0]
 8008b64:	6909      	ldr	r1, [r1, #16]
 8008b66:	1a6f      	subs	r7, r5, r1
 8008b68:	6965      	ldr	r5, [r4, #20]
 8008b6a:	2302      	movs	r3, #2
 8008b6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b70:	fb95 f5f3 	sdiv	r5, r5, r3
 8008b74:	f109 0301 	add.w	r3, r9, #1
 8008b78:	443b      	add	r3, r7
 8008b7a:	429d      	cmp	r5, r3
 8008b7c:	bf38      	it	cc
 8008b7e:	461d      	movcc	r5, r3
 8008b80:	0553      	lsls	r3, r2, #21
 8008b82:	d530      	bpl.n	8008be6 <__ssputs_r+0x9e>
 8008b84:	4629      	mov	r1, r5
 8008b86:	f7fe fa3f 	bl	8007008 <_malloc_r>
 8008b8a:	4606      	mov	r6, r0
 8008b8c:	b950      	cbnz	r0, 8008ba4 <__ssputs_r+0x5c>
 8008b8e:	230c      	movs	r3, #12
 8008b90:	f8ca 3000 	str.w	r3, [sl]
 8008b94:	89a3      	ldrh	r3, [r4, #12]
 8008b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b9a:	81a3      	strh	r3, [r4, #12]
 8008b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba4:	463a      	mov	r2, r7
 8008ba6:	6921      	ldr	r1, [r4, #16]
 8008ba8:	f7ff fcd8 	bl	800855c <memcpy>
 8008bac:	89a3      	ldrh	r3, [r4, #12]
 8008bae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb6:	81a3      	strh	r3, [r4, #12]
 8008bb8:	6126      	str	r6, [r4, #16]
 8008bba:	6165      	str	r5, [r4, #20]
 8008bbc:	443e      	add	r6, r7
 8008bbe:	1bed      	subs	r5, r5, r7
 8008bc0:	6026      	str	r6, [r4, #0]
 8008bc2:	60a5      	str	r5, [r4, #8]
 8008bc4:	464e      	mov	r6, r9
 8008bc6:	454e      	cmp	r6, r9
 8008bc8:	d900      	bls.n	8008bcc <__ssputs_r+0x84>
 8008bca:	464e      	mov	r6, r9
 8008bcc:	4632      	mov	r2, r6
 8008bce:	4641      	mov	r1, r8
 8008bd0:	6820      	ldr	r0, [r4, #0]
 8008bd2:	f000 f91d 	bl	8008e10 <memmove>
 8008bd6:	68a3      	ldr	r3, [r4, #8]
 8008bd8:	1b9b      	subs	r3, r3, r6
 8008bda:	60a3      	str	r3, [r4, #8]
 8008bdc:	6823      	ldr	r3, [r4, #0]
 8008bde:	441e      	add	r6, r3
 8008be0:	6026      	str	r6, [r4, #0]
 8008be2:	2000      	movs	r0, #0
 8008be4:	e7dc      	b.n	8008ba0 <__ssputs_r+0x58>
 8008be6:	462a      	mov	r2, r5
 8008be8:	f000 f92b 	bl	8008e42 <_realloc_r>
 8008bec:	4606      	mov	r6, r0
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	d1e2      	bne.n	8008bb8 <__ssputs_r+0x70>
 8008bf2:	6921      	ldr	r1, [r4, #16]
 8008bf4:	4650      	mov	r0, sl
 8008bf6:	f7fe f9b9 	bl	8006f6c <_free_r>
 8008bfa:	e7c8      	b.n	8008b8e <__ssputs_r+0x46>

08008bfc <_svfiprintf_r>:
 8008bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c00:	461d      	mov	r5, r3
 8008c02:	898b      	ldrh	r3, [r1, #12]
 8008c04:	061f      	lsls	r7, r3, #24
 8008c06:	b09d      	sub	sp, #116	; 0x74
 8008c08:	4680      	mov	r8, r0
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	4616      	mov	r6, r2
 8008c0e:	d50f      	bpl.n	8008c30 <_svfiprintf_r+0x34>
 8008c10:	690b      	ldr	r3, [r1, #16]
 8008c12:	b96b      	cbnz	r3, 8008c30 <_svfiprintf_r+0x34>
 8008c14:	2140      	movs	r1, #64	; 0x40
 8008c16:	f7fe f9f7 	bl	8007008 <_malloc_r>
 8008c1a:	6020      	str	r0, [r4, #0]
 8008c1c:	6120      	str	r0, [r4, #16]
 8008c1e:	b928      	cbnz	r0, 8008c2c <_svfiprintf_r+0x30>
 8008c20:	230c      	movs	r3, #12
 8008c22:	f8c8 3000 	str.w	r3, [r8]
 8008c26:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2a:	e0c8      	b.n	8008dbe <_svfiprintf_r+0x1c2>
 8008c2c:	2340      	movs	r3, #64	; 0x40
 8008c2e:	6163      	str	r3, [r4, #20]
 8008c30:	2300      	movs	r3, #0
 8008c32:	9309      	str	r3, [sp, #36]	; 0x24
 8008c34:	2320      	movs	r3, #32
 8008c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c3a:	2330      	movs	r3, #48	; 0x30
 8008c3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c40:	9503      	str	r5, [sp, #12]
 8008c42:	f04f 0b01 	mov.w	fp, #1
 8008c46:	4637      	mov	r7, r6
 8008c48:	463d      	mov	r5, r7
 8008c4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008c4e:	b10b      	cbz	r3, 8008c54 <_svfiprintf_r+0x58>
 8008c50:	2b25      	cmp	r3, #37	; 0x25
 8008c52:	d13e      	bne.n	8008cd2 <_svfiprintf_r+0xd6>
 8008c54:	ebb7 0a06 	subs.w	sl, r7, r6
 8008c58:	d00b      	beq.n	8008c72 <_svfiprintf_r+0x76>
 8008c5a:	4653      	mov	r3, sl
 8008c5c:	4632      	mov	r2, r6
 8008c5e:	4621      	mov	r1, r4
 8008c60:	4640      	mov	r0, r8
 8008c62:	f7ff ff71 	bl	8008b48 <__ssputs_r>
 8008c66:	3001      	adds	r0, #1
 8008c68:	f000 80a4 	beq.w	8008db4 <_svfiprintf_r+0x1b8>
 8008c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c6e:	4453      	add	r3, sl
 8008c70:	9309      	str	r3, [sp, #36]	; 0x24
 8008c72:	783b      	ldrb	r3, [r7, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f000 809d 	beq.w	8008db4 <_svfiprintf_r+0x1b8>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c84:	9304      	str	r3, [sp, #16]
 8008c86:	9307      	str	r3, [sp, #28]
 8008c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8008c8e:	462f      	mov	r7, r5
 8008c90:	2205      	movs	r2, #5
 8008c92:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008c96:	4850      	ldr	r0, [pc, #320]	; (8008dd8 <_svfiprintf_r+0x1dc>)
 8008c98:	f7f7 fb2a 	bl	80002f0 <memchr>
 8008c9c:	9b04      	ldr	r3, [sp, #16]
 8008c9e:	b9d0      	cbnz	r0, 8008cd6 <_svfiprintf_r+0xda>
 8008ca0:	06d9      	lsls	r1, r3, #27
 8008ca2:	bf44      	itt	mi
 8008ca4:	2220      	movmi	r2, #32
 8008ca6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008caa:	071a      	lsls	r2, r3, #28
 8008cac:	bf44      	itt	mi
 8008cae:	222b      	movmi	r2, #43	; 0x2b
 8008cb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008cb4:	782a      	ldrb	r2, [r5, #0]
 8008cb6:	2a2a      	cmp	r2, #42	; 0x2a
 8008cb8:	d015      	beq.n	8008ce6 <_svfiprintf_r+0xea>
 8008cba:	9a07      	ldr	r2, [sp, #28]
 8008cbc:	462f      	mov	r7, r5
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	250a      	movs	r5, #10
 8008cc2:	4639      	mov	r1, r7
 8008cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cc8:	3b30      	subs	r3, #48	; 0x30
 8008cca:	2b09      	cmp	r3, #9
 8008ccc:	d94d      	bls.n	8008d6a <_svfiprintf_r+0x16e>
 8008cce:	b1b8      	cbz	r0, 8008d00 <_svfiprintf_r+0x104>
 8008cd0:	e00f      	b.n	8008cf2 <_svfiprintf_r+0xf6>
 8008cd2:	462f      	mov	r7, r5
 8008cd4:	e7b8      	b.n	8008c48 <_svfiprintf_r+0x4c>
 8008cd6:	4a40      	ldr	r2, [pc, #256]	; (8008dd8 <_svfiprintf_r+0x1dc>)
 8008cd8:	1a80      	subs	r0, r0, r2
 8008cda:	fa0b f000 	lsl.w	r0, fp, r0
 8008cde:	4318      	orrs	r0, r3
 8008ce0:	9004      	str	r0, [sp, #16]
 8008ce2:	463d      	mov	r5, r7
 8008ce4:	e7d3      	b.n	8008c8e <_svfiprintf_r+0x92>
 8008ce6:	9a03      	ldr	r2, [sp, #12]
 8008ce8:	1d11      	adds	r1, r2, #4
 8008cea:	6812      	ldr	r2, [r2, #0]
 8008cec:	9103      	str	r1, [sp, #12]
 8008cee:	2a00      	cmp	r2, #0
 8008cf0:	db01      	blt.n	8008cf6 <_svfiprintf_r+0xfa>
 8008cf2:	9207      	str	r2, [sp, #28]
 8008cf4:	e004      	b.n	8008d00 <_svfiprintf_r+0x104>
 8008cf6:	4252      	negs	r2, r2
 8008cf8:	f043 0302 	orr.w	r3, r3, #2
 8008cfc:	9207      	str	r2, [sp, #28]
 8008cfe:	9304      	str	r3, [sp, #16]
 8008d00:	783b      	ldrb	r3, [r7, #0]
 8008d02:	2b2e      	cmp	r3, #46	; 0x2e
 8008d04:	d10c      	bne.n	8008d20 <_svfiprintf_r+0x124>
 8008d06:	787b      	ldrb	r3, [r7, #1]
 8008d08:	2b2a      	cmp	r3, #42	; 0x2a
 8008d0a:	d133      	bne.n	8008d74 <_svfiprintf_r+0x178>
 8008d0c:	9b03      	ldr	r3, [sp, #12]
 8008d0e:	1d1a      	adds	r2, r3, #4
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	9203      	str	r2, [sp, #12]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	bfb8      	it	lt
 8008d18:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d1c:	3702      	adds	r7, #2
 8008d1e:	9305      	str	r3, [sp, #20]
 8008d20:	4d2e      	ldr	r5, [pc, #184]	; (8008ddc <_svfiprintf_r+0x1e0>)
 8008d22:	7839      	ldrb	r1, [r7, #0]
 8008d24:	2203      	movs	r2, #3
 8008d26:	4628      	mov	r0, r5
 8008d28:	f7f7 fae2 	bl	80002f0 <memchr>
 8008d2c:	b138      	cbz	r0, 8008d3e <_svfiprintf_r+0x142>
 8008d2e:	2340      	movs	r3, #64	; 0x40
 8008d30:	1b40      	subs	r0, r0, r5
 8008d32:	fa03 f000 	lsl.w	r0, r3, r0
 8008d36:	9b04      	ldr	r3, [sp, #16]
 8008d38:	4303      	orrs	r3, r0
 8008d3a:	3701      	adds	r7, #1
 8008d3c:	9304      	str	r3, [sp, #16]
 8008d3e:	7839      	ldrb	r1, [r7, #0]
 8008d40:	4827      	ldr	r0, [pc, #156]	; (8008de0 <_svfiprintf_r+0x1e4>)
 8008d42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d46:	2206      	movs	r2, #6
 8008d48:	1c7e      	adds	r6, r7, #1
 8008d4a:	f7f7 fad1 	bl	80002f0 <memchr>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d038      	beq.n	8008dc4 <_svfiprintf_r+0x1c8>
 8008d52:	4b24      	ldr	r3, [pc, #144]	; (8008de4 <_svfiprintf_r+0x1e8>)
 8008d54:	bb13      	cbnz	r3, 8008d9c <_svfiprintf_r+0x1a0>
 8008d56:	9b03      	ldr	r3, [sp, #12]
 8008d58:	3307      	adds	r3, #7
 8008d5a:	f023 0307 	bic.w	r3, r3, #7
 8008d5e:	3308      	adds	r3, #8
 8008d60:	9303      	str	r3, [sp, #12]
 8008d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d64:	444b      	add	r3, r9
 8008d66:	9309      	str	r3, [sp, #36]	; 0x24
 8008d68:	e76d      	b.n	8008c46 <_svfiprintf_r+0x4a>
 8008d6a:	fb05 3202 	mla	r2, r5, r2, r3
 8008d6e:	2001      	movs	r0, #1
 8008d70:	460f      	mov	r7, r1
 8008d72:	e7a6      	b.n	8008cc2 <_svfiprintf_r+0xc6>
 8008d74:	2300      	movs	r3, #0
 8008d76:	3701      	adds	r7, #1
 8008d78:	9305      	str	r3, [sp, #20]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	250a      	movs	r5, #10
 8008d7e:	4638      	mov	r0, r7
 8008d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d84:	3a30      	subs	r2, #48	; 0x30
 8008d86:	2a09      	cmp	r2, #9
 8008d88:	d903      	bls.n	8008d92 <_svfiprintf_r+0x196>
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d0c8      	beq.n	8008d20 <_svfiprintf_r+0x124>
 8008d8e:	9105      	str	r1, [sp, #20]
 8008d90:	e7c6      	b.n	8008d20 <_svfiprintf_r+0x124>
 8008d92:	fb05 2101 	mla	r1, r5, r1, r2
 8008d96:	2301      	movs	r3, #1
 8008d98:	4607      	mov	r7, r0
 8008d9a:	e7f0      	b.n	8008d7e <_svfiprintf_r+0x182>
 8008d9c:	ab03      	add	r3, sp, #12
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	4622      	mov	r2, r4
 8008da2:	4b11      	ldr	r3, [pc, #68]	; (8008de8 <_svfiprintf_r+0x1ec>)
 8008da4:	a904      	add	r1, sp, #16
 8008da6:	4640      	mov	r0, r8
 8008da8:	f7fe fa0e 	bl	80071c8 <_printf_float>
 8008dac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008db0:	4681      	mov	r9, r0
 8008db2:	d1d6      	bne.n	8008d62 <_svfiprintf_r+0x166>
 8008db4:	89a3      	ldrh	r3, [r4, #12]
 8008db6:	065b      	lsls	r3, r3, #25
 8008db8:	f53f af35 	bmi.w	8008c26 <_svfiprintf_r+0x2a>
 8008dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dbe:	b01d      	add	sp, #116	; 0x74
 8008dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc4:	ab03      	add	r3, sp, #12
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	4622      	mov	r2, r4
 8008dca:	4b07      	ldr	r3, [pc, #28]	; (8008de8 <_svfiprintf_r+0x1ec>)
 8008dcc:	a904      	add	r1, sp, #16
 8008dce:	4640      	mov	r0, r8
 8008dd0:	f7fe fc9c 	bl	800770c <_printf_i>
 8008dd4:	e7ea      	b.n	8008dac <_svfiprintf_r+0x1b0>
 8008dd6:	bf00      	nop
 8008dd8:	0800956c 	.word	0x0800956c
 8008ddc:	08009572 	.word	0x08009572
 8008de0:	08009576 	.word	0x08009576
 8008de4:	080071c9 	.word	0x080071c9
 8008de8:	08008b49 	.word	0x08008b49

08008dec <__ascii_mbtowc>:
 8008dec:	b082      	sub	sp, #8
 8008dee:	b901      	cbnz	r1, 8008df2 <__ascii_mbtowc+0x6>
 8008df0:	a901      	add	r1, sp, #4
 8008df2:	b142      	cbz	r2, 8008e06 <__ascii_mbtowc+0x1a>
 8008df4:	b14b      	cbz	r3, 8008e0a <__ascii_mbtowc+0x1e>
 8008df6:	7813      	ldrb	r3, [r2, #0]
 8008df8:	600b      	str	r3, [r1, #0]
 8008dfa:	7812      	ldrb	r2, [r2, #0]
 8008dfc:	1c10      	adds	r0, r2, #0
 8008dfe:	bf18      	it	ne
 8008e00:	2001      	movne	r0, #1
 8008e02:	b002      	add	sp, #8
 8008e04:	4770      	bx	lr
 8008e06:	4610      	mov	r0, r2
 8008e08:	e7fb      	b.n	8008e02 <__ascii_mbtowc+0x16>
 8008e0a:	f06f 0001 	mvn.w	r0, #1
 8008e0e:	e7f8      	b.n	8008e02 <__ascii_mbtowc+0x16>

08008e10 <memmove>:
 8008e10:	4288      	cmp	r0, r1
 8008e12:	b510      	push	{r4, lr}
 8008e14:	eb01 0302 	add.w	r3, r1, r2
 8008e18:	d807      	bhi.n	8008e2a <memmove+0x1a>
 8008e1a:	1e42      	subs	r2, r0, #1
 8008e1c:	4299      	cmp	r1, r3
 8008e1e:	d00a      	beq.n	8008e36 <memmove+0x26>
 8008e20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e24:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008e28:	e7f8      	b.n	8008e1c <memmove+0xc>
 8008e2a:	4283      	cmp	r3, r0
 8008e2c:	d9f5      	bls.n	8008e1a <memmove+0xa>
 8008e2e:	1881      	adds	r1, r0, r2
 8008e30:	1ad2      	subs	r2, r2, r3
 8008e32:	42d3      	cmn	r3, r2
 8008e34:	d100      	bne.n	8008e38 <memmove+0x28>
 8008e36:	bd10      	pop	{r4, pc}
 8008e38:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e3c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008e40:	e7f7      	b.n	8008e32 <memmove+0x22>

08008e42 <_realloc_r>:
 8008e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e44:	4607      	mov	r7, r0
 8008e46:	4614      	mov	r4, r2
 8008e48:	460e      	mov	r6, r1
 8008e4a:	b921      	cbnz	r1, 8008e56 <_realloc_r+0x14>
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008e52:	f7fe b8d9 	b.w	8007008 <_malloc_r>
 8008e56:	b922      	cbnz	r2, 8008e62 <_realloc_r+0x20>
 8008e58:	f7fe f888 	bl	8006f6c <_free_r>
 8008e5c:	4625      	mov	r5, r4
 8008e5e:	4628      	mov	r0, r5
 8008e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e62:	f000 f821 	bl	8008ea8 <_malloc_usable_size_r>
 8008e66:	42a0      	cmp	r0, r4
 8008e68:	d20f      	bcs.n	8008e8a <_realloc_r+0x48>
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	4638      	mov	r0, r7
 8008e6e:	f7fe f8cb 	bl	8007008 <_malloc_r>
 8008e72:	4605      	mov	r5, r0
 8008e74:	2800      	cmp	r0, #0
 8008e76:	d0f2      	beq.n	8008e5e <_realloc_r+0x1c>
 8008e78:	4631      	mov	r1, r6
 8008e7a:	4622      	mov	r2, r4
 8008e7c:	f7ff fb6e 	bl	800855c <memcpy>
 8008e80:	4631      	mov	r1, r6
 8008e82:	4638      	mov	r0, r7
 8008e84:	f7fe f872 	bl	8006f6c <_free_r>
 8008e88:	e7e9      	b.n	8008e5e <_realloc_r+0x1c>
 8008e8a:	4635      	mov	r5, r6
 8008e8c:	e7e7      	b.n	8008e5e <_realloc_r+0x1c>

08008e8e <__ascii_wctomb>:
 8008e8e:	b149      	cbz	r1, 8008ea4 <__ascii_wctomb+0x16>
 8008e90:	2aff      	cmp	r2, #255	; 0xff
 8008e92:	bf85      	ittet	hi
 8008e94:	238a      	movhi	r3, #138	; 0x8a
 8008e96:	6003      	strhi	r3, [r0, #0]
 8008e98:	700a      	strbls	r2, [r1, #0]
 8008e9a:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e9e:	bf98      	it	ls
 8008ea0:	2001      	movls	r0, #1
 8008ea2:	4770      	bx	lr
 8008ea4:	4608      	mov	r0, r1
 8008ea6:	4770      	bx	lr

08008ea8 <_malloc_usable_size_r>:
 8008ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eac:	1f18      	subs	r0, r3, #4
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	bfbc      	itt	lt
 8008eb2:	580b      	ldrlt	r3, [r1, r0]
 8008eb4:	18c0      	addlt	r0, r0, r3
 8008eb6:	4770      	bx	lr

08008eb8 <atan2>:
 8008eb8:	f000 b852 	b.w	8008f60 <__ieee754_atan2>
 8008ebc:	0000      	movs	r0, r0
	...

08008ec0 <sqrtf>:
 8008ec0:	b500      	push	{lr}
 8008ec2:	ed2d 8b02 	vpush	{d8}
 8008ec6:	b08b      	sub	sp, #44	; 0x2c
 8008ec8:	eeb0 8a40 	vmov.f32	s16, s0
 8008ecc:	f000 f92a 	bl	8009124 <__ieee754_sqrtf>
 8008ed0:	4b21      	ldr	r3, [pc, #132]	; (8008f58 <sqrtf+0x98>)
 8008ed2:	f993 3000 	ldrsb.w	r3, [r3]
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	d028      	beq.n	8008f2c <sqrtf+0x6c>
 8008eda:	eeb4 8a48 	vcmp.f32	s16, s16
 8008ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee2:	d623      	bvs.n	8008f2c <sqrtf+0x6c>
 8008ee4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eec:	d51e      	bpl.n	8008f2c <sqrtf+0x6c>
 8008eee:	2201      	movs	r2, #1
 8008ef0:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8008ef4:	9200      	str	r2, [sp, #0]
 8008ef6:	4a19      	ldr	r2, [pc, #100]	; (8008f5c <sqrtf+0x9c>)
 8008ef8:	9201      	str	r2, [sp, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	9208      	str	r2, [sp, #32]
 8008efe:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008f02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008f06:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8008f50 <sqrtf+0x90>
 8008f0a:	b9a3      	cbnz	r3, 8008f36 <sqrtf+0x76>
 8008f0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008f10:	4668      	mov	r0, sp
 8008f12:	f000 fa10 	bl	8009336 <matherr>
 8008f16:	b1a0      	cbz	r0, 8008f42 <sqrtf+0x82>
 8008f18:	9b08      	ldr	r3, [sp, #32]
 8008f1a:	b11b      	cbz	r3, 8008f24 <sqrtf+0x64>
 8008f1c:	f7fd ffe4 	bl	8006ee8 <__errno>
 8008f20:	9b08      	ldr	r3, [sp, #32]
 8008f22:	6003      	str	r3, [r0, #0]
 8008f24:	ed9d 0b06 	vldr	d0, [sp, #24]
 8008f28:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008f2c:	b00b      	add	sp, #44	; 0x2c
 8008f2e:	ecbd 8b02 	vpop	{d8}
 8008f32:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8008f3c:	ed8d 6b06 	vstr	d6, [sp, #24]
 8008f40:	d1e6      	bne.n	8008f10 <sqrtf+0x50>
 8008f42:	f7fd ffd1 	bl	8006ee8 <__errno>
 8008f46:	2321      	movs	r3, #33	; 0x21
 8008f48:	6003      	str	r3, [r0, #0]
 8008f4a:	e7e5      	b.n	8008f18 <sqrtf+0x58>
 8008f4c:	f3af 8000 	nop.w
	...
 8008f58:	200001e4 	.word	0x200001e4
 8008f5c:	08009688 	.word	0x08009688

08008f60 <__ieee754_atan2>:
 8008f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f62:	ee11 6a10 	vmov	r6, s2
 8008f66:	ee11 0a90 	vmov	r0, s3
 8008f6a:	4273      	negs	r3, r6
 8008f6c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008f70:	4333      	orrs	r3, r6
 8008f72:	4f6b      	ldr	r7, [pc, #428]	; (8009120 <__ieee754_atan2+0x1c0>)
 8008f74:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008f78:	42bb      	cmp	r3, r7
 8008f7a:	ed8d 0b00 	vstr	d0, [sp]
 8008f7e:	d80b      	bhi.n	8008f98 <__ieee754_atan2+0x38>
 8008f80:	e9dd c500 	ldrd	ip, r5, [sp]
 8008f84:	f1cc 0100 	rsb	r1, ip, #0
 8008f88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008f8c:	ea41 010c 	orr.w	r1, r1, ip
 8008f90:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8008f94:	42b9      	cmp	r1, r7
 8008f96:	d906      	bls.n	8008fa6 <__ieee754_atan2+0x46>
 8008f98:	ed9d 7b00 	vldr	d7, [sp]
 8008f9c:	ee37 7b01 	vadd.f64	d7, d7, d1
 8008fa0:	ed8d 7b00 	vstr	d7, [sp]
 8008fa4:	e063      	b.n	800906e <__ieee754_atan2+0x10e>
 8008fa6:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8008faa:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8008fae:	4331      	orrs	r1, r6
 8008fb0:	d104      	bne.n	8008fbc <__ieee754_atan2+0x5c>
 8008fb2:	b003      	add	sp, #12
 8008fb4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008fb8:	f000 b8ba 	b.w	8009130 <atan>
 8008fbc:	1784      	asrs	r4, r0, #30
 8008fbe:	f004 0402 	and.w	r4, r4, #2
 8008fc2:	ea53 010c 	orrs.w	r1, r3, ip
 8008fc6:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8008fca:	d109      	bne.n	8008fe0 <__ieee754_atan2+0x80>
 8008fcc:	2c02      	cmp	r4, #2
 8008fce:	d078      	beq.n	80090c2 <__ieee754_atan2+0x162>
 8008fd0:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 80090c8 <__ieee754_atan2+0x168>
 8008fd4:	ed9d 6b00 	vldr	d6, [sp]
 8008fd8:	2c03      	cmp	r4, #3
 8008fda:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8008fde:	e7df      	b.n	8008fa0 <__ieee754_atan2+0x40>
 8008fe0:	ea52 0106 	orrs.w	r1, r2, r6
 8008fe4:	d107      	bne.n	8008ff6 <__ieee754_atan2+0x96>
 8008fe6:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 80090d0 <__ieee754_atan2+0x170>
 8008fea:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 80090d8 <__ieee754_atan2+0x178>
 8008fee:	2d00      	cmp	r5, #0
 8008ff0:	fe26 7b07 	vselge.f64	d7, d6, d7
 8008ff4:	e7d4      	b.n	8008fa0 <__ieee754_atan2+0x40>
 8008ff6:	42ba      	cmp	r2, r7
 8008ff8:	d120      	bne.n	800903c <__ieee754_atan2+0xdc>
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d111      	bne.n	8009022 <__ieee754_atan2+0xc2>
 8008ffe:	2c02      	cmp	r4, #2
 8009000:	d009      	beq.n	8009016 <__ieee754_atan2+0xb6>
 8009002:	2c03      	cmp	r4, #3
 8009004:	d00a      	beq.n	800901c <__ieee754_atan2+0xbc>
 8009006:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80090e0 <__ieee754_atan2+0x180>
 800900a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 80090e8 <__ieee754_atan2+0x188>
 800900e:	2c01      	cmp	r4, #1
 8009010:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8009014:	e7c4      	b.n	8008fa0 <__ieee754_atan2+0x40>
 8009016:	ed9f 7b36 	vldr	d7, [pc, #216]	; 80090f0 <__ieee754_atan2+0x190>
 800901a:	e7c1      	b.n	8008fa0 <__ieee754_atan2+0x40>
 800901c:	ed9f 7b36 	vldr	d7, [pc, #216]	; 80090f8 <__ieee754_atan2+0x198>
 8009020:	e7be      	b.n	8008fa0 <__ieee754_atan2+0x40>
 8009022:	2c02      	cmp	r4, #2
 8009024:	d04d      	beq.n	80090c2 <__ieee754_atan2+0x162>
 8009026:	2c03      	cmp	r4, #3
 8009028:	d005      	beq.n	8009036 <__ieee754_atan2+0xd6>
 800902a:	2c01      	cmp	r4, #1
 800902c:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8009100 <__ieee754_atan2+0x1a0>
 8009030:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8009108 <__ieee754_atan2+0x1a8>
 8009034:	e7ec      	b.n	8009010 <__ieee754_atan2+0xb0>
 8009036:	ed9f 7b24 	vldr	d7, [pc, #144]	; 80090c8 <__ieee754_atan2+0x168>
 800903a:	e7b1      	b.n	8008fa0 <__ieee754_atan2+0x40>
 800903c:	42bb      	cmp	r3, r7
 800903e:	d0d2      	beq.n	8008fe6 <__ieee754_atan2+0x86>
 8009040:	1a9b      	subs	r3, r3, r2
 8009042:	151b      	asrs	r3, r3, #20
 8009044:	2b3c      	cmp	r3, #60	; 0x3c
 8009046:	dc16      	bgt.n	8009076 <__ieee754_atan2+0x116>
 8009048:	2800      	cmp	r0, #0
 800904a:	da01      	bge.n	8009050 <__ieee754_atan2+0xf0>
 800904c:	333c      	adds	r3, #60	; 0x3c
 800904e:	db17      	blt.n	8009080 <__ieee754_atan2+0x120>
 8009050:	ed9d 7b00 	vldr	d7, [sp]
 8009054:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8009058:	f000 f964 	bl	8009324 <fabs>
 800905c:	f000 f868 	bl	8009130 <atan>
 8009060:	ed8d 0b00 	vstr	d0, [sp]
 8009064:	2c01      	cmp	r4, #1
 8009066:	d00e      	beq.n	8009086 <__ieee754_atan2+0x126>
 8009068:	2c02      	cmp	r4, #2
 800906a:	d014      	beq.n	8009096 <__ieee754_atan2+0x136>
 800906c:	b9f4      	cbnz	r4, 80090ac <__ieee754_atan2+0x14c>
 800906e:	ed9d 0b00 	vldr	d0, [sp]
 8009072:	b003      	add	sp, #12
 8009074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009076:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80090d0 <__ieee754_atan2+0x170>
 800907a:	ed8d 7b00 	vstr	d7, [sp]
 800907e:	e7f1      	b.n	8009064 <__ieee754_atan2+0x104>
 8009080:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009108 <__ieee754_atan2+0x1a8>
 8009084:	e7f9      	b.n	800907a <__ieee754_atan2+0x11a>
 8009086:	e9dd 2300 	ldrd	r2, r3, [sp]
 800908a:	9901      	ldr	r1, [sp, #4]
 800908c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009090:	e9cd 2300 	strd	r2, r3, [sp]
 8009094:	e7eb      	b.n	800906e <__ieee754_atan2+0x10e>
 8009096:	ed9d 6b00 	vldr	d6, [sp]
 800909a:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8009110 <__ieee754_atan2+0x1b0>
 800909e:	ee36 7b47 	vsub.f64	d7, d6, d7
 80090a2:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8009118 <__ieee754_atan2+0x1b8>
 80090a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80090aa:	e779      	b.n	8008fa0 <__ieee754_atan2+0x40>
 80090ac:	ed9d 6b00 	vldr	d6, [sp]
 80090b0:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8009110 <__ieee754_atan2+0x1b0>
 80090b4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80090b8:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8009118 <__ieee754_atan2+0x1b8>
 80090bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80090c0:	e76e      	b.n	8008fa0 <__ieee754_atan2+0x40>
 80090c2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8009118 <__ieee754_atan2+0x1b8>
 80090c6:	e76b      	b.n	8008fa0 <__ieee754_atan2+0x40>
 80090c8:	54442d18 	.word	0x54442d18
 80090cc:	c00921fb 	.word	0xc00921fb
 80090d0:	54442d18 	.word	0x54442d18
 80090d4:	3ff921fb 	.word	0x3ff921fb
 80090d8:	54442d18 	.word	0x54442d18
 80090dc:	bff921fb 	.word	0xbff921fb
 80090e0:	54442d18 	.word	0x54442d18
 80090e4:	bfe921fb 	.word	0xbfe921fb
 80090e8:	54442d18 	.word	0x54442d18
 80090ec:	3fe921fb 	.word	0x3fe921fb
 80090f0:	7f3321d2 	.word	0x7f3321d2
 80090f4:	4002d97c 	.word	0x4002d97c
 80090f8:	7f3321d2 	.word	0x7f3321d2
 80090fc:	c002d97c 	.word	0xc002d97c
 8009100:	00000000 	.word	0x00000000
 8009104:	80000000 	.word	0x80000000
	...
 8009110:	33145c07 	.word	0x33145c07
 8009114:	3ca1a626 	.word	0x3ca1a626
 8009118:	54442d18 	.word	0x54442d18
 800911c:	400921fb 	.word	0x400921fb
 8009120:	7ff00000 	.word	0x7ff00000

08009124 <__ieee754_sqrtf>:
 8009124:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009128:	4770      	bx	lr
 800912a:	0000      	movs	r0, r0
 800912c:	0000      	movs	r0, r0
	...

08009130 <atan>:
 8009130:	b538      	push	{r3, r4, r5, lr}
 8009132:	eeb0 7b40 	vmov.f64	d7, d0
 8009136:	ee17 5a90 	vmov	r5, s15
 800913a:	4b73      	ldr	r3, [pc, #460]	; (8009308 <atan+0x1d8>)
 800913c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009140:	429c      	cmp	r4, r3
 8009142:	dd13      	ble.n	800916c <atan+0x3c>
 8009144:	4b71      	ldr	r3, [pc, #452]	; (800930c <atan+0x1dc>)
 8009146:	429c      	cmp	r4, r3
 8009148:	dc03      	bgt.n	8009152 <atan+0x22>
 800914a:	d107      	bne.n	800915c <atan+0x2c>
 800914c:	ee10 3a10 	vmov	r3, s0
 8009150:	b123      	cbz	r3, 800915c <atan+0x2c>
 8009152:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009156:	eeb0 0b47 	vmov.f64	d0, d7
 800915a:	bd38      	pop	{r3, r4, r5, pc}
 800915c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8009298 <atan+0x168>
 8009160:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 80092a0 <atan+0x170>
 8009164:	2d00      	cmp	r5, #0
 8009166:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800916a:	e7f4      	b.n	8009156 <atan+0x26>
 800916c:	4b68      	ldr	r3, [pc, #416]	; (8009310 <atan+0x1e0>)
 800916e:	429c      	cmp	r4, r3
 8009170:	dc11      	bgt.n	8009196 <atan+0x66>
 8009172:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009176:	429c      	cmp	r4, r3
 8009178:	dc0a      	bgt.n	8009190 <atan+0x60>
 800917a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800917e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80092a8 <atan+0x178>
 8009182:	ee30 6b06 	vadd.f64	d6, d0, d6
 8009186:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800918a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800918e:	dce2      	bgt.n	8009156 <atan+0x26>
 8009190:	f04f 33ff 	mov.w	r3, #4294967295
 8009194:	e013      	b.n	80091be <atan+0x8e>
 8009196:	f000 f8c5 	bl	8009324 <fabs>
 800919a:	4b5e      	ldr	r3, [pc, #376]	; (8009314 <atan+0x1e4>)
 800919c:	429c      	cmp	r4, r3
 800919e:	dc4f      	bgt.n	8009240 <atan+0x110>
 80091a0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80091a4:	429c      	cmp	r4, r3
 80091a6:	dc41      	bgt.n	800922c <atan+0xfc>
 80091a8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80091ac:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80091b0:	2300      	movs	r3, #0
 80091b2:	eea0 6b07 	vfma.f64	d6, d0, d7
 80091b6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80091ba:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80091be:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80092b0 <atan+0x180>
 80091c2:	ee27 4b07 	vmul.f64	d4, d7, d7
 80091c6:	ee24 5b04 	vmul.f64	d5, d4, d4
 80091ca:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80092b8 <atan+0x188>
 80091ce:	eea5 3b06 	vfma.f64	d3, d5, d6
 80091d2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80092c0 <atan+0x190>
 80091d6:	eea3 6b05 	vfma.f64	d6, d3, d5
 80091da:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80092c8 <atan+0x198>
 80091de:	eea6 3b05 	vfma.f64	d3, d6, d5
 80091e2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80092d0 <atan+0x1a0>
 80091e6:	eea3 6b05 	vfma.f64	d6, d3, d5
 80091ea:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80092d8 <atan+0x1a8>
 80091ee:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 80092e0 <atan+0x1b0>
 80091f2:	eea6 3b05 	vfma.f64	d3, d6, d5
 80091f6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80092e8 <atan+0x1b8>
 80091fa:	eea5 2b06 	vfma.f64	d2, d5, d6
 80091fe:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80092f0 <atan+0x1c0>
 8009202:	eea2 6b05 	vfma.f64	d6, d2, d5
 8009206:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 80092f8 <atan+0x1c8>
 800920a:	eea6 2b05 	vfma.f64	d2, d6, d5
 800920e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8009300 <atan+0x1d0>
 8009212:	1c5a      	adds	r2, r3, #1
 8009214:	eea2 6b05 	vfma.f64	d6, d2, d5
 8009218:	ee26 6b05 	vmul.f64	d6, d6, d5
 800921c:	eea3 6b04 	vfma.f64	d6, d3, d4
 8009220:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009224:	d121      	bne.n	800926a <atan+0x13a>
 8009226:	ee37 7b46 	vsub.f64	d7, d7, d6
 800922a:	e794      	b.n	8009156 <atan+0x26>
 800922c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009230:	2301      	movs	r3, #1
 8009232:	ee30 6b47 	vsub.f64	d6, d0, d7
 8009236:	ee30 0b07 	vadd.f64	d0, d0, d7
 800923a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800923e:	e7be      	b.n	80091be <atan+0x8e>
 8009240:	4b35      	ldr	r3, [pc, #212]	; (8009318 <atan+0x1e8>)
 8009242:	429c      	cmp	r4, r3
 8009244:	dc0b      	bgt.n	800925e <atan+0x12e>
 8009246:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800924a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800924e:	ee30 5b47 	vsub.f64	d5, d0, d7
 8009252:	eea0 6b07 	vfma.f64	d6, d0, d7
 8009256:	2302      	movs	r3, #2
 8009258:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800925c:	e7af      	b.n	80091be <atan+0x8e>
 800925e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8009262:	2303      	movs	r3, #3
 8009264:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8009268:	e7a9      	b.n	80091be <atan+0x8e>
 800926a:	4a2c      	ldr	r2, [pc, #176]	; (800931c <atan+0x1ec>)
 800926c:	492c      	ldr	r1, [pc, #176]	; (8009320 <atan+0x1f0>)
 800926e:	00db      	lsls	r3, r3, #3
 8009270:	441a      	add	r2, r3
 8009272:	440b      	add	r3, r1
 8009274:	ed93 5b00 	vldr	d5, [r3]
 8009278:	ee36 6b45 	vsub.f64	d6, d6, d5
 800927c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009280:	ed92 6b00 	vldr	d6, [r2]
 8009284:	2d00      	cmp	r5, #0
 8009286:	ee36 7b47 	vsub.f64	d7, d6, d7
 800928a:	bfb8      	it	lt
 800928c:	eeb1 7b47 	vneglt.f64	d7, d7
 8009290:	e761      	b.n	8009156 <atan+0x26>
 8009292:	bf00      	nop
 8009294:	f3af 8000 	nop.w
 8009298:	54442d18 	.word	0x54442d18
 800929c:	bff921fb 	.word	0xbff921fb
 80092a0:	54442d18 	.word	0x54442d18
 80092a4:	3ff921fb 	.word	0x3ff921fb
 80092a8:	8800759c 	.word	0x8800759c
 80092ac:	7e37e43c 	.word	0x7e37e43c
 80092b0:	e322da11 	.word	0xe322da11
 80092b4:	3f90ad3a 	.word	0x3f90ad3a
 80092b8:	24760deb 	.word	0x24760deb
 80092bc:	3fa97b4b 	.word	0x3fa97b4b
 80092c0:	a0d03d51 	.word	0xa0d03d51
 80092c4:	3fb10d66 	.word	0x3fb10d66
 80092c8:	c54c206e 	.word	0xc54c206e
 80092cc:	3fb745cd 	.word	0x3fb745cd
 80092d0:	920083ff 	.word	0x920083ff
 80092d4:	3fc24924 	.word	0x3fc24924
 80092d8:	5555550d 	.word	0x5555550d
 80092dc:	3fd55555 	.word	0x3fd55555
 80092e0:	52defd9a 	.word	0x52defd9a
 80092e4:	bfadde2d 	.word	0xbfadde2d
 80092e8:	2c6a6c2f 	.word	0x2c6a6c2f
 80092ec:	bfa2b444 	.word	0xbfa2b444
 80092f0:	af749a6d 	.word	0xaf749a6d
 80092f4:	bfb3b0f2 	.word	0xbfb3b0f2
 80092f8:	fe231671 	.word	0xfe231671
 80092fc:	bfbc71c6 	.word	0xbfbc71c6
 8009300:	9998ebc4 	.word	0x9998ebc4
 8009304:	bfc99999 	.word	0xbfc99999
 8009308:	440fffff 	.word	0x440fffff
 800930c:	7ff00000 	.word	0x7ff00000
 8009310:	3fdbffff 	.word	0x3fdbffff
 8009314:	3ff2ffff 	.word	0x3ff2ffff
 8009318:	40037fff 	.word	0x40037fff
 800931c:	08009690 	.word	0x08009690
 8009320:	080096b0 	.word	0x080096b0

08009324 <fabs>:
 8009324:	ec51 0b10 	vmov	r0, r1, d0
 8009328:	ee10 2a10 	vmov	r2, s0
 800932c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009330:	ec43 2b10 	vmov	d0, r2, r3
 8009334:	4770      	bx	lr

08009336 <matherr>:
 8009336:	2000      	movs	r0, #0
 8009338:	4770      	bx	lr
	...

0800933c <_init>:
 800933c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933e:	bf00      	nop
 8009340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009342:	bc08      	pop	{r3}
 8009344:	469e      	mov	lr, r3
 8009346:	4770      	bx	lr

08009348 <_fini>:
 8009348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934a:	bf00      	nop
 800934c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800934e:	bc08      	pop	{r3}
 8009350:	469e      	mov	lr, r3
 8009352:	4770      	bx	lr
