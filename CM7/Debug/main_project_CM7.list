
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cec4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031a8  0800d168  0800d168  0001d168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010310  08010310  00020310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010318  08010318  00020318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801031c  0801031c  0002031c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  08010320  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000518  200001e4  08010504  000301e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000754  200006fc  08010504  000306fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003057f  00000000  00000000  00030212  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005743  00000000  00000000  00060791  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000016a8  00000000  00000000  00065ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001410  00000000  00000000  00067580  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003d83a  00000000  00000000  00068990  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00019d21  00000000  00000000  000a61ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00185675  00000000  00000000  000bfeeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00245560  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000062d0  00000000  00000000  002455dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001e4 	.word	0x200001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d14c 	.word	0x0800d14c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001e8 	.word	0x200001e8
 80002dc:	0800d14c 	.word	0x0800d14c

080002e0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80002e0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80002e2:	2b01      	cmp	r3, #1
	IT       LS
 80002e4:	bf98      	it	ls
	BXLS     lr
 80002e6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80002ec:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80002f8:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80002fe:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000300:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000302:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000304:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800030e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000314:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000318:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800031c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000320:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800032a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800033c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800033e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000340:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800034a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800034c:	2b01      	cmp	r3, #1
	IT       LS
 800034e:	bf98      	it	ls
	BXLS     lr
 8000350:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000356:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000362:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000380:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000386:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800038a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800038e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000392:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 8000394:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000396:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
	POP      {r4-r9}
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 800039e:	4770      	bx	lr

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <memchr>:
 80003b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003b4:	2a10      	cmp	r2, #16
 80003b6:	db2b      	blt.n	8000410 <memchr+0x60>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	d008      	beq.n	80003d0 <memchr+0x20>
 80003be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003c2:	3a01      	subs	r2, #1
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d02d      	beq.n	8000424 <memchr+0x74>
 80003c8:	f010 0f07 	tst.w	r0, #7
 80003cc:	b342      	cbz	r2, 8000420 <memchr+0x70>
 80003ce:	d1f6      	bne.n	80003be <memchr+0xe>
 80003d0:	b4f0      	push	{r4, r5, r6, r7}
 80003d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003da:	f022 0407 	bic.w	r4, r2, #7
 80003de:	f07f 0700 	mvns.w	r7, #0
 80003e2:	2300      	movs	r3, #0
 80003e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003e8:	3c08      	subs	r4, #8
 80003ea:	ea85 0501 	eor.w	r5, r5, r1
 80003ee:	ea86 0601 	eor.w	r6, r6, r1
 80003f2:	fa85 f547 	uadd8	r5, r5, r7
 80003f6:	faa3 f587 	sel	r5, r3, r7
 80003fa:	fa86 f647 	uadd8	r6, r6, r7
 80003fe:	faa5 f687 	sel	r6, r5, r7
 8000402:	b98e      	cbnz	r6, 8000428 <memchr+0x78>
 8000404:	d1ee      	bne.n	80003e4 <memchr+0x34>
 8000406:	bcf0      	pop	{r4, r5, r6, r7}
 8000408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800040c:	f002 0207 	and.w	r2, r2, #7
 8000410:	b132      	cbz	r2, 8000420 <memchr+0x70>
 8000412:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000416:	3a01      	subs	r2, #1
 8000418:	ea83 0301 	eor.w	r3, r3, r1
 800041c:	b113      	cbz	r3, 8000424 <memchr+0x74>
 800041e:	d1f8      	bne.n	8000412 <memchr+0x62>
 8000420:	2000      	movs	r0, #0
 8000422:	4770      	bx	lr
 8000424:	3801      	subs	r0, #1
 8000426:	4770      	bx	lr
 8000428:	2d00      	cmp	r5, #0
 800042a:	bf06      	itte	eq
 800042c:	4635      	moveq	r5, r6
 800042e:	3803      	subeq	r0, #3
 8000430:	3807      	subne	r0, #7
 8000432:	f015 0f01 	tst.w	r5, #1
 8000436:	d107      	bne.n	8000448 <memchr+0x98>
 8000438:	3001      	adds	r0, #1
 800043a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800043e:	bf02      	ittt	eq
 8000440:	3001      	addeq	r0, #1
 8000442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000446:	3001      	addeq	r0, #1
 8000448:	bcf0      	pop	{r4, r5, r6, r7}
 800044a:	3801      	subs	r0, #1
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295
 8000460:	f04f 30ff 	movne.w	r0, #4294967295
 8000464:	f000 b972 	b.w	800074c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9e08      	ldr	r6, [sp, #32]
 8000486:	4604      	mov	r4, r0
 8000488:	4688      	mov	r8, r1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d14b      	bne.n	8000526 <__udivmoddi4+0xa6>
 800048e:	428a      	cmp	r2, r1
 8000490:	4615      	mov	r5, r2
 8000492:	d967      	bls.n	8000564 <__udivmoddi4+0xe4>
 8000494:	fab2 f282 	clz	r2, r2
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0720 	rsb	r7, r2, #32
 800049e:	fa01 f302 	lsl.w	r3, r1, r2
 80004a2:	fa20 f707 	lsr.w	r7, r0, r7
 80004a6:	4095      	lsls	r5, r2
 80004a8:	ea47 0803 	orr.w	r8, r7, r3
 80004ac:	4094      	lsls	r4, r2
 80004ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80004b8:	fa1f fc85 	uxth.w	ip, r5
 80004bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80004c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004c4:	fb07 f10c 	mul.w	r1, r7, ip
 80004c8:	4299      	cmp	r1, r3
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x60>
 80004cc:	18eb      	adds	r3, r5, r3
 80004ce:	f107 30ff 	add.w	r0, r7, #4294967295
 80004d2:	f080 811b 	bcs.w	800070c <__udivmoddi4+0x28c>
 80004d6:	4299      	cmp	r1, r3
 80004d8:	f240 8118 	bls.w	800070c <__udivmoddi4+0x28c>
 80004dc:	3f02      	subs	r7, #2
 80004de:	442b      	add	r3, r5
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80004f4:	45a4      	cmp	ip, r4
 80004f6:	d909      	bls.n	800050c <__udivmoddi4+0x8c>
 80004f8:	192c      	adds	r4, r5, r4
 80004fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80004fe:	f080 8107 	bcs.w	8000710 <__udivmoddi4+0x290>
 8000502:	45a4      	cmp	ip, r4
 8000504:	f240 8104 	bls.w	8000710 <__udivmoddi4+0x290>
 8000508:	3802      	subs	r0, #2
 800050a:	442c      	add	r4, r5
 800050c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000510:	eba4 040c 	sub.w	r4, r4, ip
 8000514:	2700      	movs	r7, #0
 8000516:	b11e      	cbz	r6, 8000520 <__udivmoddi4+0xa0>
 8000518:	40d4      	lsrs	r4, r2
 800051a:	2300      	movs	r3, #0
 800051c:	e9c6 4300 	strd	r4, r3, [r6]
 8000520:	4639      	mov	r1, r7
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	428b      	cmp	r3, r1
 8000528:	d909      	bls.n	800053e <__udivmoddi4+0xbe>
 800052a:	2e00      	cmp	r6, #0
 800052c:	f000 80eb 	beq.w	8000706 <__udivmoddi4+0x286>
 8000530:	2700      	movs	r7, #0
 8000532:	e9c6 0100 	strd	r0, r1, [r6]
 8000536:	4638      	mov	r0, r7
 8000538:	4639      	mov	r1, r7
 800053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053e:	fab3 f783 	clz	r7, r3
 8000542:	2f00      	cmp	r7, #0
 8000544:	d147      	bne.n	80005d6 <__udivmoddi4+0x156>
 8000546:	428b      	cmp	r3, r1
 8000548:	d302      	bcc.n	8000550 <__udivmoddi4+0xd0>
 800054a:	4282      	cmp	r2, r0
 800054c:	f200 80fa 	bhi.w	8000744 <__udivmoddi4+0x2c4>
 8000550:	1a84      	subs	r4, r0, r2
 8000552:	eb61 0303 	sbc.w	r3, r1, r3
 8000556:	2001      	movs	r0, #1
 8000558:	4698      	mov	r8, r3
 800055a:	2e00      	cmp	r6, #0
 800055c:	d0e0      	beq.n	8000520 <__udivmoddi4+0xa0>
 800055e:	e9c6 4800 	strd	r4, r8, [r6]
 8000562:	e7dd      	b.n	8000520 <__udivmoddi4+0xa0>
 8000564:	b902      	cbnz	r2, 8000568 <__udivmoddi4+0xe8>
 8000566:	deff      	udf	#255	; 0xff
 8000568:	fab2 f282 	clz	r2, r2
 800056c:	2a00      	cmp	r2, #0
 800056e:	f040 808f 	bne.w	8000690 <__udivmoddi4+0x210>
 8000572:	1b49      	subs	r1, r1, r5
 8000574:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000578:	fa1f f885 	uxth.w	r8, r5
 800057c:	2701      	movs	r7, #1
 800057e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000582:	0c23      	lsrs	r3, r4, #16
 8000584:	fb0e 111c 	mls	r1, lr, ip, r1
 8000588:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800058c:	fb08 f10c 	mul.w	r1, r8, ip
 8000590:	4299      	cmp	r1, r3
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x124>
 8000594:	18eb      	adds	r3, r5, r3
 8000596:	f10c 30ff 	add.w	r0, ip, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x122>
 800059c:	4299      	cmp	r1, r3
 800059e:	f200 80cd 	bhi.w	800073c <__udivmoddi4+0x2bc>
 80005a2:	4684      	mov	ip, r0
 80005a4:	1a59      	subs	r1, r3, r1
 80005a6:	b2a3      	uxth	r3, r4
 80005a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80005b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80005b4:	fb08 f800 	mul.w	r8, r8, r0
 80005b8:	45a0      	cmp	r8, r4
 80005ba:	d907      	bls.n	80005cc <__udivmoddi4+0x14c>
 80005bc:	192c      	adds	r4, r5, r4
 80005be:	f100 33ff 	add.w	r3, r0, #4294967295
 80005c2:	d202      	bcs.n	80005ca <__udivmoddi4+0x14a>
 80005c4:	45a0      	cmp	r8, r4
 80005c6:	f200 80b6 	bhi.w	8000736 <__udivmoddi4+0x2b6>
 80005ca:	4618      	mov	r0, r3
 80005cc:	eba4 0408 	sub.w	r4, r4, r8
 80005d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005d4:	e79f      	b.n	8000516 <__udivmoddi4+0x96>
 80005d6:	f1c7 0c20 	rsb	ip, r7, #32
 80005da:	40bb      	lsls	r3, r7
 80005dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80005e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80005e4:	fa01 f407 	lsl.w	r4, r1, r7
 80005e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80005ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80005f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80005f4:	4325      	orrs	r5, r4
 80005f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80005fa:	0c2c      	lsrs	r4, r5, #16
 80005fc:	fb08 3319 	mls	r3, r8, r9, r3
 8000600:	fa1f fa8e 	uxth.w	sl, lr
 8000604:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000608:	fb09 f40a 	mul.w	r4, r9, sl
 800060c:	429c      	cmp	r4, r3
 800060e:	fa02 f207 	lsl.w	r2, r2, r7
 8000612:	fa00 f107 	lsl.w	r1, r0, r7
 8000616:	d90b      	bls.n	8000630 <__udivmoddi4+0x1b0>
 8000618:	eb1e 0303 	adds.w	r3, lr, r3
 800061c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000620:	f080 8087 	bcs.w	8000732 <__udivmoddi4+0x2b2>
 8000624:	429c      	cmp	r4, r3
 8000626:	f240 8084 	bls.w	8000732 <__udivmoddi4+0x2b2>
 800062a:	f1a9 0902 	sub.w	r9, r9, #2
 800062e:	4473      	add	r3, lr
 8000630:	1b1b      	subs	r3, r3, r4
 8000632:	b2ad      	uxth	r5, r5
 8000634:	fbb3 f0f8 	udiv	r0, r3, r8
 8000638:	fb08 3310 	mls	r3, r8, r0, r3
 800063c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000640:	fb00 fa0a 	mul.w	sl, r0, sl
 8000644:	45a2      	cmp	sl, r4
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x1da>
 8000648:	eb1e 0404 	adds.w	r4, lr, r4
 800064c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000650:	d26b      	bcs.n	800072a <__udivmoddi4+0x2aa>
 8000652:	45a2      	cmp	sl, r4
 8000654:	d969      	bls.n	800072a <__udivmoddi4+0x2aa>
 8000656:	3802      	subs	r0, #2
 8000658:	4474      	add	r4, lr
 800065a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800065e:	fba0 8902 	umull	r8, r9, r0, r2
 8000662:	eba4 040a 	sub.w	r4, r4, sl
 8000666:	454c      	cmp	r4, r9
 8000668:	46c2      	mov	sl, r8
 800066a:	464b      	mov	r3, r9
 800066c:	d354      	bcc.n	8000718 <__udivmoddi4+0x298>
 800066e:	d051      	beq.n	8000714 <__udivmoddi4+0x294>
 8000670:	2e00      	cmp	r6, #0
 8000672:	d069      	beq.n	8000748 <__udivmoddi4+0x2c8>
 8000674:	ebb1 050a 	subs.w	r5, r1, sl
 8000678:	eb64 0403 	sbc.w	r4, r4, r3
 800067c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000680:	40fd      	lsrs	r5, r7
 8000682:	40fc      	lsrs	r4, r7
 8000684:	ea4c 0505 	orr.w	r5, ip, r5
 8000688:	e9c6 5400 	strd	r5, r4, [r6]
 800068c:	2700      	movs	r7, #0
 800068e:	e747      	b.n	8000520 <__udivmoddi4+0xa0>
 8000690:	f1c2 0320 	rsb	r3, r2, #32
 8000694:	fa20 f703 	lsr.w	r7, r0, r3
 8000698:	4095      	lsls	r5, r2
 800069a:	fa01 f002 	lsl.w	r0, r1, r2
 800069e:	fa21 f303 	lsr.w	r3, r1, r3
 80006a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006a6:	4338      	orrs	r0, r7
 80006a8:	0c01      	lsrs	r1, r0, #16
 80006aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80006ae:	fa1f f885 	uxth.w	r8, r5
 80006b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80006b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006ba:	fb07 f308 	mul.w	r3, r7, r8
 80006be:	428b      	cmp	r3, r1
 80006c0:	fa04 f402 	lsl.w	r4, r4, r2
 80006c4:	d907      	bls.n	80006d6 <__udivmoddi4+0x256>
 80006c6:	1869      	adds	r1, r5, r1
 80006c8:	f107 3cff 	add.w	ip, r7, #4294967295
 80006cc:	d22f      	bcs.n	800072e <__udivmoddi4+0x2ae>
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d92d      	bls.n	800072e <__udivmoddi4+0x2ae>
 80006d2:	3f02      	subs	r7, #2
 80006d4:	4429      	add	r1, r5
 80006d6:	1acb      	subs	r3, r1, r3
 80006d8:	b281      	uxth	r1, r0
 80006da:	fbb3 f0fe 	udiv	r0, r3, lr
 80006de:	fb0e 3310 	mls	r3, lr, r0, r3
 80006e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006e6:	fb00 f308 	mul.w	r3, r0, r8
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d907      	bls.n	80006fe <__udivmoddi4+0x27e>
 80006ee:	1869      	adds	r1, r5, r1
 80006f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80006f4:	d217      	bcs.n	8000726 <__udivmoddi4+0x2a6>
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d915      	bls.n	8000726 <__udivmoddi4+0x2a6>
 80006fa:	3802      	subs	r0, #2
 80006fc:	4429      	add	r1, r5
 80006fe:	1ac9      	subs	r1, r1, r3
 8000700:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000704:	e73b      	b.n	800057e <__udivmoddi4+0xfe>
 8000706:	4637      	mov	r7, r6
 8000708:	4630      	mov	r0, r6
 800070a:	e709      	b.n	8000520 <__udivmoddi4+0xa0>
 800070c:	4607      	mov	r7, r0
 800070e:	e6e7      	b.n	80004e0 <__udivmoddi4+0x60>
 8000710:	4618      	mov	r0, r3
 8000712:	e6fb      	b.n	800050c <__udivmoddi4+0x8c>
 8000714:	4541      	cmp	r1, r8
 8000716:	d2ab      	bcs.n	8000670 <__udivmoddi4+0x1f0>
 8000718:	ebb8 0a02 	subs.w	sl, r8, r2
 800071c:	eb69 020e 	sbc.w	r2, r9, lr
 8000720:	3801      	subs	r0, #1
 8000722:	4613      	mov	r3, r2
 8000724:	e7a4      	b.n	8000670 <__udivmoddi4+0x1f0>
 8000726:	4660      	mov	r0, ip
 8000728:	e7e9      	b.n	80006fe <__udivmoddi4+0x27e>
 800072a:	4618      	mov	r0, r3
 800072c:	e795      	b.n	800065a <__udivmoddi4+0x1da>
 800072e:	4667      	mov	r7, ip
 8000730:	e7d1      	b.n	80006d6 <__udivmoddi4+0x256>
 8000732:	4681      	mov	r9, r0
 8000734:	e77c      	b.n	8000630 <__udivmoddi4+0x1b0>
 8000736:	3802      	subs	r0, #2
 8000738:	442c      	add	r4, r5
 800073a:	e747      	b.n	80005cc <__udivmoddi4+0x14c>
 800073c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000740:	442b      	add	r3, r5
 8000742:	e72f      	b.n	80005a4 <__udivmoddi4+0x124>
 8000744:	4638      	mov	r0, r7
 8000746:	e708      	b.n	800055a <__udivmoddi4+0xda>
 8000748:	4637      	mov	r7, r6
 800074a:	e6e9      	b.n	8000520 <__udivmoddi4+0xa0>

0800074c <__aeabi_idiv0>:
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <SystemInit+0xc4>)
 8000756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075a:	4a2e      	ldr	r2, [pc, #184]	; (8000814 <SystemInit+0xc4>)
 800075c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8000764:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <SystemInit+0xc4>)
 8000766:	691b      	ldr	r3, [r3, #16]
 8000768:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <SystemInit+0xc4>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000770:	4b29      	ldr	r3, [pc, #164]	; (8000818 <SystemInit+0xc8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a28      	ldr	r2, [pc, #160]	; (8000818 <SystemInit+0xc8>)
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800077c:	4b26      	ldr	r3, [pc, #152]	; (8000818 <SystemInit+0xc8>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <SystemInit+0xc8>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4924      	ldr	r1, [pc, #144]	; (8000818 <SystemInit+0xc8>)
 8000788:	4b24      	ldr	r3, [pc, #144]	; (800081c <SystemInit+0xcc>)
 800078a:	4013      	ands	r3, r2
 800078c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <SystemInit+0xc8>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000794:	4b20      	ldr	r3, [pc, #128]	; (8000818 <SystemInit+0xc8>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <SystemInit+0xc8>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <SystemInit+0xc8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <SystemInit+0xc8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <SystemInit+0xc8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <SystemInit+0xc8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <SystemInit+0xc8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <SystemInit+0xc8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <SystemInit+0xc8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <SystemInit+0xc8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <SystemInit+0xc8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a10      	ldr	r2, [pc, #64]	; (8000818 <SystemInit+0xc8>)
 80007d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <SystemInit+0xc8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <SystemInit+0xd0>)
 80007e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <SystemInit+0xd0>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <SystemInit+0xd4>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <SystemInit+0xd8>)
 80007f4:	4013      	ands	r3, r2
 80007f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80007fa:	d202      	bcs.n	8000802 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <SystemInit+0xdc>)
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <SystemInit+0xc4>)
 8000804:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000808:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000ed00 	.word	0xe000ed00
 8000818:	58024400 	.word	0x58024400
 800081c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000820:	580000c0 	.word	0x580000c0
 8000824:	5c001000 	.word	0x5c001000
 8000828:	ffff0000 	.word	0xffff0000
 800082c:	51008108 	.word	0x51008108

08000830 <inst_absolute>:

#include "functions.h"

// Preprocessing

void inst_absolute(float32_t src[], float32_t dst[], uint32_t *length){
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
	arm_abs_f32(&src[0], &dst[0], *length);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	68b9      	ldr	r1, [r7, #8]
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	f001 fa50 	bl	8001cea <arm_abs_f32>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <mean>:
}
void inst_centralized_normalized_absolute(float32_t src[], float32_t dst[], uint32_t *length){

}

void mean(float32_t src[], float32_t *dst, uint32_t *length) {
 8000852:	b580      	push	{r7, lr}
 8000854:	b084      	sub	sp, #16
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
	arm_mean_f32(&src[0], *length, dst);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	4619      	mov	r1, r3
 8000866:	68f8      	ldr	r0, [r7, #12]
 8000868:	f001 fcdd 	bl	8002226 <arm_mean_f32>
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <mean_of_squared>:

void mean_of_squared(float32_t src[], float32_t *dst, uint32_t *length) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
	float32_t result;
	arm_power_f32(&src[0], *length, &result);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f107 0214 	add.w	r2, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f001 fd3a 	bl	8002304 <arm_power_f32>
	*dst = result / (float32_t) *length;
 8000890:	edd7 6a05 	vldr	s13, [r7, #20]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	ee07 3a90 	vmov	s15, r3
 800089c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	edc3 7a00 	vstr	s15, [r3]
}
 80008aa:	bf00      	nop
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <std_dev>:

void std_dev(float32_t src[], float32_t *dst, uint32_t *length) {
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b084      	sub	sp, #16
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
	arm_std_f32(&src[0], *length, dst);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	4619      	mov	r1, r3
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f001 fd98 	bl	80023fc <arm_std_f32>
}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <variance>:

void variance(float32_t src[], float32_t *dst, uint32_t *length) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
	arm_var_f32(&src[0], *length, dst);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	68ba      	ldr	r2, [r7, #8]
 80008e6:	4619      	mov	r1, r3
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	f001 fe83 	bl	80025f4 <arm_var_f32>
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <gmax>:

void gmax(float32_t src[], uint32_t *length, float32_t *maxValue, uint32_t *maxValueIndex){
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 80008fe:	b08b      	sub	sp, #44	; 0x2c
 8000900:	af00      	add	r7, sp, #0
 8000902:	4c5b      	ldr	r4, [pc, #364]	; (8000a70 <gmax+0x178>)
 8000904:	f242 0c28 	movw	ip, #8232	; 0x2028
 8000908:	44bc      	add	ip, r7
 800090a:	4464      	add	r4, ip
 800090c:	6020      	str	r0, [r4, #0]
 800090e:	4859      	ldr	r0, [pc, #356]	; (8000a74 <gmax+0x17c>)
 8000910:	f242 0428 	movw	r4, #8232	; 0x2028
 8000914:	443c      	add	r4, r7
 8000916:	4420      	add	r0, r4
 8000918:	6001      	str	r1, [r0, #0]
 800091a:	4957      	ldr	r1, [pc, #348]	; (8000a78 <gmax+0x180>)
 800091c:	f242 0028 	movw	r0, #8232	; 0x2028
 8000920:	4438      	add	r0, r7
 8000922:	4401      	add	r1, r0
 8000924:	600a      	str	r2, [r1, #0]
 8000926:	4a55      	ldr	r2, [pc, #340]	; (8000a7c <gmax+0x184>)
 8000928:	f242 0128 	movw	r1, #8232	; 0x2028
 800092c:	4439      	add	r1, r7
 800092e:	440a      	add	r2, r1
 8000930:	6013      	str	r3, [r2, #0]
	uint32_t fftSize = 1024;
 8000932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000936:	f242 0220 	movw	r2, #8224	; 0x2020
 800093a:	443a      	add	r2, r7
 800093c:	6013      	str	r3, [r2, #0]
	uint32_t ifftFlag = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	f242 021c 	movw	r2, #8220	; 0x201c
 8000944:	443a      	add	r2, r7
 8000946:	6013      	str	r3, [r2, #0]
	uint32_t doBitReverse = 1;
 8000948:	2301      	movs	r3, #1
 800094a:	f242 0218 	movw	r2, #8216	; 0x2018
 800094e:	443a      	add	r2, r7
 8000950:	6013      	str	r3, [r2, #0]
	float32_t *result_mag;
	float32_t result_fft[2048] = {0};
 8000952:	4b4b      	ldr	r3, [pc, #300]	; (8000a80 <gmax+0x188>)
 8000954:	f242 0228 	movw	r2, #8232	; 0x2028
 8000958:	443a      	add	r2, r7
 800095a:	4413      	add	r3, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000962:	461a      	mov	r2, r3
 8000964:	2100      	movs	r1, #0
 8000966:	f00a fc0d 	bl	800b184 <memset>

	result_mag = (float32_t *) malloc(fftSize/2 * sizeof(float32_t));
 800096a:	f242 0320 	movw	r3, #8224	; 0x2020
 800096e:	443b      	add	r3, r7
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	085b      	lsrs	r3, r3, #1
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4618      	mov	r0, r3
 8000978:	f00a fbd0 	bl	800b11c <malloc>
 800097c:	4603      	mov	r3, r0
 800097e:	f242 0214 	movw	r2, #8212	; 0x2014
 8000982:	443a      	add	r2, r7
 8000984:	6013      	str	r3, [r2, #0]

	for(int i = 0; i < 2048; i++){
 8000986:	2300      	movs	r3, #0
 8000988:	f242 0224 	movw	r2, #8228	; 0x2024
 800098c:	443a      	add	r2, r7
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	e021      	b.n	80009d6 <gmax+0xde>
		result_fft[i] = src[i];
 8000992:	f242 0324 	movw	r3, #8228	; 0x2024
 8000996:	443b      	add	r3, r7
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	009a      	lsls	r2, r3, #2
 800099c:	4b34      	ldr	r3, [pc, #208]	; (8000a70 <gmax+0x178>)
 800099e:	f242 0128 	movw	r1, #8232	; 0x2028
 80009a2:	4439      	add	r1, r7
 80009a4:	440b      	add	r3, r1
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4413      	add	r3, r2
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <gmax+0x188>)
 80009ae:	f242 0128 	movw	r1, #8232	; 0x2028
 80009b2:	4439      	add	r1, r7
 80009b4:	440b      	add	r3, r1
 80009b6:	f242 0124 	movw	r1, #8228	; 0x2024
 80009ba:	4439      	add	r1, r7
 80009bc:	6809      	ldr	r1, [r1, #0]
 80009be:	0089      	lsls	r1, r1, #2
 80009c0:	440b      	add	r3, r1
 80009c2:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 2048; i++){
 80009c4:	f242 0324 	movw	r3, #8228	; 0x2024
 80009c8:	443b      	add	r3, r7
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	3301      	adds	r3, #1
 80009ce:	f242 0224 	movw	r2, #8228	; 0x2024
 80009d2:	443a      	add	r2, r7
 80009d4:	6013      	str	r3, [r2, #0]
 80009d6:	f242 0324 	movw	r3, #8228	; 0x2024
 80009da:	443b      	add	r3, r7
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009e2:	dbd6      	blt.n	8000992 <gmax+0x9a>
	}

	arm_cfft_f32(&arm_cfft_sR_f32_len1024, &result_fft[0], ifftFlag, doBitReverse);
 80009e4:	f242 031c 	movw	r3, #8220	; 0x201c
 80009e8:	443b      	add	r3, r7
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	f242 0318 	movw	r3, #8216	; 0x2018
 80009f2:	443b      	add	r3, r7
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	4921      	ldr	r1, [pc, #132]	; (8000a80 <gmax+0x188>)
 80009fa:	f242 0028 	movw	r0, #8232	; 0x2028
 80009fe:	4438      	add	r0, r7
 8000a00:	4401      	add	r1, r0
 8000a02:	4820      	ldr	r0, [pc, #128]	; (8000a84 <gmax+0x18c>)
 8000a04:	f002 ff29 	bl	800385a <arm_cfft_f32>
	arm_cmplx_mag_f32(result_fft, result_mag, fftSize/2);
 8000a08:	f242 0320 	movw	r3, #8224	; 0x2020
 8000a0c:	443b      	add	r3, r7
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	085a      	lsrs	r2, r3, #1
 8000a12:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <gmax+0x188>)
 8000a14:	f242 0128 	movw	r1, #8232	; 0x2028
 8000a18:	4439      	add	r1, r7
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f242 0114 	movw	r1, #8212	; 0x2014
 8000a20:	4439      	add	r1, r7
 8000a22:	6809      	ldr	r1, [r1, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 fa49 	bl	8001ebc <arm_cmplx_mag_f32>
	arm_max_f32(result_mag, fftSize/2, maxValue, maxValueIndex);
 8000a2a:	f242 0320 	movw	r3, #8224	; 0x2020
 8000a2e:	443b      	add	r3, r7
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	0859      	lsrs	r1, r3, #1
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <gmax+0x184>)
 8000a36:	f242 0228 	movw	r2, #8232	; 0x2028
 8000a3a:	443a      	add	r2, r7
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <gmax+0x180>)
 8000a40:	f242 0028 	movw	r0, #8232	; 0x2028
 8000a44:	4438      	add	r0, r7
 8000a46:	4402      	add	r2, r0
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	6812      	ldr	r2, [r2, #0]
 8000a4c:	f242 0014 	movw	r0, #8212	; 0x2014
 8000a50:	4438      	add	r0, r7
 8000a52:	6800      	ldr	r0, [r0, #0]
 8000a54:	f001 fb51 	bl	80020fa <arm_max_f32>
	free(result_mag);
 8000a58:	f242 0314 	movw	r3, #8212	; 0x2014
 8000a5c:	443b      	add	r3, r7
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	f00a fb64 	bl	800b12c <free>
}
 8000a64:	bf00      	nop
 8000a66:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8000a6a:	372c      	adds	r7, #44	; 0x2c
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd90      	pop	{r4, r7, pc}
 8000a70:	ffffdfe4 	.word	0xffffdfe4
 8000a74:	ffffdfe0 	.word	0xffffdfe0
 8000a78:	ffffdfdc 	.word	0xffffdfdc
 8000a7c:	ffffdfd8 	.word	0xffffdfd8
 8000a80:	ffffdfec 	.word	0xffffdfec
 8000a84:	08010098 	.word	0x08010098

08000a88 <central_moment>:

void central_moment(float32_t src[], uint32_t *length, uint32_t *power, float32_t *dst){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
 8000a94:	603b      	str	r3, [r7, #0]
	float32_t m = 0.0f;
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	613b      	str	r3, [r7, #16]
	float32_t *sub, *mult;
	sub = (float32_t *) malloc((*length) * sizeof(float32_t));
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f00a fb3a 	bl	800b11c <malloc>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	61bb      	str	r3, [r7, #24]
	mult = (float32_t *) malloc((*length) * sizeof(float32_t));
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f00a fb32 	bl	800b11c <malloc>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	617b      	str	r3, [r7, #20]
	//float32_t parcial[2048] = {0};
	//float32_t mult[2048] = {0};
	arm_mean_f32(src, *length, &m);
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f107 0210 	add.w	r2, r7, #16
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	f001 fbad 	bl	8002226 <arm_mean_f32>
	for(uint32_t i = 0; i < (*length); i = i + 4){
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	e048      	b.n	8000b64 <central_moment+0xdc>
		sub[i+0] = (src[i+0] - m);
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	4413      	add	r3, r2
 8000ada:	ed93 7a00 	vldr	s14, [r3]
 8000ade:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	69ba      	ldr	r2, [r7, #24]
 8000ae8:	4413      	add	r3, r2
 8000aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000aee:	edc3 7a00 	vstr	s15, [r3]
		sub[i+1] = (src[i+1] - m);
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3301      	adds	r3, #1
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	ed93 7a00 	vldr	s14, [r3]
 8000b00:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	3301      	adds	r3, #1
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b12:	edc3 7a00 	vstr	s15, [r3]
		sub[i+2] = (src[i+2] - m);
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3302      	adds	r3, #2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	ed93 7a00 	vldr	s14, [r3]
 8000b24:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	4413      	add	r3, r2
 8000b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b36:	edc3 7a00 	vstr	s15, [r3]
		sub[i+3] = (src[i+3] - m);
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3303      	adds	r3, #3
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	4413      	add	r3, r2
 8000b44:	ed93 7a00 	vldr	s14, [r3]
 8000b48:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	3303      	adds	r3, #3
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	4413      	add	r3, r2
 8000b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b5a:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t i = 0; i < (*length); i = i + 4){
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	61fb      	str	r3, [r7, #28]
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	69fa      	ldr	r2, [r7, #28]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d3b1      	bcc.n	8000ad2 <central_moment+0x4a>
	}
	arm_mult_f32(sub, sub, mult, *length);
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	69b9      	ldr	r1, [r7, #24]
 8000b76:	69b8      	ldr	r0, [r7, #24]
 8000b78:	f001 f91d 	bl	8001db6 <arm_mult_f32>
	arm_mean_f32(mult, *length, dst);
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	4619      	mov	r1, r3
 8000b84:	6978      	ldr	r0, [r7, #20]
 8000b86:	f001 fb4e 	bl	8002226 <arm_mean_f32>
	free(sub);
 8000b8a:	69b8      	ldr	r0, [r7, #24]
 8000b8c:	f00a face 	bl	800b12c <free>
	free(mult);
 8000b90:	6978      	ldr	r0, [r7, #20]
 8000b92:	f00a facb 	bl	800b12c <free>
}
 8000b96:	bf00      	nop
 8000b98:	3720      	adds	r7, #32
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <MX_GPIO_Init+0x8c>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bac:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <MX_GPIO_Init+0x8c>)
 8000bae:	f043 0304 	orr.w	r3, r3, #4
 8000bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <MX_GPIO_Init+0x8c>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	f003 0304 	and.w	r3, r3, #4
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <MX_GPIO_Init+0x8c>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bca:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <MX_GPIO_Init+0x8c>)
 8000bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_GPIO_Init+0x8c>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <MX_GPIO_Init+0x8c>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be8:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <MX_GPIO_Init+0x8c>)
 8000bea:	f043 0308 	orr.w	r3, r3, #8
 8000bee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_GPIO_Init+0x8c>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	f003 0308 	and.w	r3, r3, #8
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <MX_GPIO_Init+0x8c>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c06:	4a09      	ldr	r2, [pc, #36]	; (8000c2c <MX_GPIO_Init+0x8c>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_GPIO_Init+0x8c>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]

}
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	58024400 	.word	0x58024400

08000c30 <reset_buffer>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void reset_buffer(char buffer[]){
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 1; i < 30; i++){
 8000c38:	2301      	movs	r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	e007      	b.n	8000c4e <reset_buffer+0x1e>
		buffer[i] = '\0';
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4413      	add	r3, r2
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 1; i < 30; i++){
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	2b1d      	cmp	r3, #29
 8000c52:	d9f4      	bls.n	8000c3e <reset_buffer+0xe>
	}
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c60:	b5b0      	push	{r4, r5, r7, lr}
 8000c62:	f5ad 5d06 	sub.w	sp, sp, #8576	; 0x2180
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float32_t signal_array[2048] = {0};
 8000c68:	4b9b      	ldr	r3, [pc, #620]	; (8000ed8 <main+0x278>)
 8000c6a:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000c6e:	4413      	add	r3, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c76:	461a      	mov	r2, r3
 8000c78:	2100      	movs	r1, #0
 8000c7a:	f00a fa83 	bl	800b184 <memset>
	float32_t mean_value = 0.0f, mean_of_squared_value = 0.0f, std_dev_value = 0.0f, max = 0.0f;
 8000c7e:	4b97      	ldr	r3, [pc, #604]	; (8000edc <main+0x27c>)
 8000c80:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000c84:	4413      	add	r3, r2
 8000c86:	f04f 0200 	mov.w	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	4b94      	ldr	r3, [pc, #592]	; (8000ee0 <main+0x280>)
 8000c8e:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000c92:	4413      	add	r3, r2
 8000c94:	f04f 0200 	mov.w	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	4b92      	ldr	r3, [pc, #584]	; (8000ee4 <main+0x284>)
 8000c9c:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000ca0:	4413      	add	r3, r2
 8000ca2:	f04f 0200 	mov.w	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	4b8f      	ldr	r3, [pc, #572]	; (8000ee8 <main+0x288>)
 8000caa:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000cae:	4413      	add	r3, r2
 8000cb0:	f04f 0200 	mov.w	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
	float32_t moment = 0.0f, var = 0.0f;
 8000cb6:	4b8d      	ldr	r3, [pc, #564]	; (8000eec <main+0x28c>)
 8000cb8:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000cbc:	4413      	add	r3, r2
 8000cbe:	f04f 0200 	mov.w	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	4b8a      	ldr	r3, [pc, #552]	; (8000ef0 <main+0x290>)
 8000cc6:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000cca:	4413      	add	r3, r2
 8000ccc:	f04f 0200 	mov.w	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
	float32_t * result;
	uint32_t power = 2;
 8000cd2:	4b88      	ldr	r3, [pc, #544]	; (8000ef4 <main+0x294>)
 8000cd4:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000cd8:	4413      	add	r3, r2
 8000cda:	2202      	movs	r2, #2
 8000cdc:	601a      	str	r2, [r3, #0]
	uint32_t random32bit, counter, length=2048, max_index;
 8000cde:	4b86      	ldr	r3, [pc, #536]	; (8000ef8 <main+0x298>)
 8000ce0:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000ce4:	4413      	add	r3, r2
 8000ce6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cea:	601a      	str	r2, [r3, #0]
	char rand32[30] = {'\0'};
 8000cec:	4b83      	ldr	r3, [pc, #524]	; (8000efc <main+0x29c>)
 8000cee:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	231e      	movs	r3, #30
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	f00a fa42 	bl	800b184 <memset>
	char hello_world[17] = {"\n\nHello World!\n\r"};
 8000d00:	4b7f      	ldr	r3, [pc, #508]	; (8000f00 <main+0x2a0>)
 8000d02:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000d06:	4413      	add	r3, r2
 8000d08:	4a7e      	ldr	r2, [pc, #504]	; (8000f04 <main+0x2a4>)
 8000d0a:	461c      	mov	r4, r3
 8000d0c:	4615      	mov	r5, r2
 8000d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d12:	682b      	ldr	r3, [r5, #0]
 8000d14:	7023      	strb	r3, [r4, #0]
	char size_of_signal_array[30] = {'\0'};
 8000d16:	4b7c      	ldr	r3, [pc, #496]	; (8000f08 <main+0x2a8>)
 8000d18:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	231e      	movs	r3, #30
 8000d22:	461a      	mov	r2, r3
 8000d24:	2100      	movs	r1, #0
 8000d26:	f00a fa2d 	bl	800b184 <memset>
	char counter_str[30] = {'\0'};
 8000d2a:	4b78      	ldr	r3, [pc, #480]	; (8000f0c <main+0x2ac>)
 8000d2c:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000d30:	4413      	add	r3, r2
 8000d32:	4618      	mov	r0, r3
 8000d34:	231e      	movs	r3, #30
 8000d36:	461a      	mov	r2, r3
 8000d38:	2100      	movs	r1, #0
 8000d3a:	f00a fa23 	bl	800b184 <memset>
	char buffer_0[30] = {'\0'};
 8000d3e:	4b74      	ldr	r3, [pc, #464]	; (8000f10 <main+0x2b0>)
 8000d40:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000d44:	4413      	add	r3, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	231e      	movs	r3, #30
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	f00a fa19 	bl	800b184 <memset>
	char buffer_1[30] = {'\0'};
 8000d52:	4b70      	ldr	r3, [pc, #448]	; (8000f14 <main+0x2b4>)
 8000d54:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000d58:	4413      	add	r3, r2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	231e      	movs	r3, #30
 8000d5e:	461a      	mov	r2, r3
 8000d60:	2100      	movs	r1, #0
 8000d62:	f00a fa0f 	bl	800b184 <memset>
	char buffer_2[30] = {'\0'};
 8000d66:	4b6c      	ldr	r3, [pc, #432]	; (8000f18 <main+0x2b8>)
 8000d68:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	231e      	movs	r3, #30
 8000d72:	461a      	mov	r2, r3
 8000d74:	2100      	movs	r1, #0
 8000d76:	f00a fa05 	bl	800b184 <memset>
	char buffer_3[30] = {'\0'};
 8000d7a:	4b68      	ldr	r3, [pc, #416]	; (8000f1c <main+0x2bc>)
 8000d7c:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000d80:	4413      	add	r3, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	231e      	movs	r3, #30
 8000d86:	461a      	mov	r2, r3
 8000d88:	2100      	movs	r1, #0
 8000d8a:	f00a f9fb 	bl	800b184 <memset>
	char buffer_4[30] = {'\0'};
 8000d8e:	4b64      	ldr	r3, [pc, #400]	; (8000f20 <main+0x2c0>)
 8000d90:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000d94:	4413      	add	r3, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	231e      	movs	r3, #30
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	f00a f9f1 	bl	800b184 <memset>
	char buffer_5[30] = {'\0'};
 8000da2:	4b60      	ldr	r3, [pc, #384]	; (8000f24 <main+0x2c4>)
 8000da4:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000da8:	4413      	add	r3, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	231e      	movs	r3, #30
 8000dae:	461a      	mov	r2, r3
 8000db0:	2100      	movs	r1, #0
 8000db2:	f00a f9e7 	bl	800b184 <memset>
	char receiveBuffer[9] = {'\0'};
 8000db6:	4b5c      	ldr	r3, [pc, #368]	; (8000f28 <main+0x2c8>)
 8000db8:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000dbc:	4413      	add	r3, r2
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	721a      	strb	r2, [r3, #8]
    int32_t timeout; 
  /* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dca:	f242 127c 	movw	r2, #8572	; 0x217c
 8000dce:	443a      	add	r2, r7
 8000dd0:	6013      	str	r3, [r2, #0]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000dd2:	bf00      	nop
 8000dd4:	4b55      	ldr	r3, [pc, #340]	; (8000f2c <main+0x2cc>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d00a      	beq.n	8000df6 <main+0x196>
 8000de0:	f242 137c 	movw	r3, #8572	; 0x217c
 8000de4:	443b      	add	r3, r7
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	1e5a      	subs	r2, r3, #1
 8000dea:	f242 117c 	movw	r1, #8572	; 0x217c
 8000dee:	4439      	add	r1, r7
 8000df0:	600a      	str	r2, [r1, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	dcee      	bgt.n	8000dd4 <main+0x174>
  if ( timeout < 0 )
 8000df6:	f242 137c 	movw	r3, #8572	; 0x217c
 8000dfa:	443b      	add	r3, r7
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	da01      	bge.n	8000e06 <main+0x1a6>
  {
  Error_Handler();
 8000e02:	f000 fd07 	bl	8001814 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e06:	f003 fdd1 	bl	80049ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0a:	f000 fc3d 	bl	8001688 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e0e:	4b47      	ldr	r3, [pc, #284]	; (8000f2c <main+0x2cc>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e14:	4a45      	ldr	r2, [pc, #276]	; (8000f2c <main+0x2cc>)
 8000e16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1e:	4b43      	ldr	r3, [pc, #268]	; (8000f2c <main+0x2cc>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e24:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8000e28:	4b41      	ldr	r3, [pc, #260]	; (8000f30 <main+0x2d0>)
 8000e2a:	f507 5106 	add.w	r1, r7, #8576	; 0x2180
 8000e2e:	440b      	add	r3, r1
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <main+0x2d0>)
 8000e34:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000e38:	4413      	add	r3, r2
 8000e3a:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f004 f909 	bl	8005054 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000e42:	2100      	movs	r1, #0
 8000e44:	2000      	movs	r0, #0
 8000e46:	f004 f91f 	bl	8005088 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000e4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e4e:	f242 127c 	movw	r2, #8572	; 0x217c
 8000e52:	443a      	add	r2, r7
 8000e54:	6013      	str	r3, [r2, #0]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000e56:	bf00      	nop
 8000e58:	4b34      	ldr	r3, [pc, #208]	; (8000f2c <main+0x2cc>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10a      	bne.n	8000e7a <main+0x21a>
 8000e64:	f242 137c 	movw	r3, #8572	; 0x217c
 8000e68:	443b      	add	r3, r7
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	1e5a      	subs	r2, r3, #1
 8000e6e:	f242 117c 	movw	r1, #8572	; 0x217c
 8000e72:	4439      	add	r1, r7
 8000e74:	600a      	str	r2, [r1, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	dcee      	bgt.n	8000e58 <main+0x1f8>
if ( timeout < 0 )
 8000e7a:	f242 137c 	movw	r3, #8572	; 0x217c
 8000e7e:	443b      	add	r3, r7
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	da01      	bge.n	8000e8a <main+0x22a>
{
Error_Handler();
 8000e86:	f000 fcc5 	bl	8001814 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8a:	f7ff fe89 	bl	8000ba0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e8e:	f000 fde3 	bl	8001a58 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e92:	f000 fe77 	bl	8001b84 <MX_USB_OTG_FS_PCD_Init>
  MX_RNG_Init();
 8000e96:	f000 fcc5 	bl	8001824 <MX_RNG_Init>
  MX_TIM2_Init();
 8000e9a:	f000 fd6f 	bl	800197c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Send Hello World via UART3
  if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 8000e9e:	4825      	ldr	r0, [pc, #148]	; (8000f34 <main+0x2d4>)
 8000ea0:	f007 fa4a 	bl	8008338 <HAL_UART_GetState>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b20      	cmp	r3, #32
 8000ea8:	d108      	bne.n	8000ebc <main+0x25c>
	  HAL_UART_Transmit(&huart3, (uint8_t*) &hello_world[0], sizeof(hello_world), 100);
 8000eaa:	4915      	ldr	r1, [pc, #84]	; (8000f00 <main+0x2a0>)
 8000eac:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8000eb0:	4419      	add	r1, r3
 8000eb2:	2364      	movs	r3, #100	; 0x64
 8000eb4:	2211      	movs	r2, #17
 8000eb6:	481f      	ldr	r0, [pc, #124]	; (8000f34 <main+0x2d4>)
 8000eb8:	f007 f8d8 	bl	800806c <HAL_UART_Transmit>
  }

  // Initialization of signal array using random numbers
  __HAL_RNG_ENABLE(&hrng);
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <main+0x2d8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <main+0x2d8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f042 0204 	orr.w	r2, r2, #4
 8000eca:	601a      	str	r2, [r3, #0]

  for (int i = 0; i < length; i++){
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f242 1278 	movw	r2, #8568	; 0x2178
 8000ed2:	443a      	add	r2, r7
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	e05b      	b.n	8000f90 <main+0x330>
 8000ed8:	ffffdff0 	.word	0xffffdff0
 8000edc:	ffffdfec 	.word	0xffffdfec
 8000ee0:	ffffdfe8 	.word	0xffffdfe8
 8000ee4:	ffffdfe4 	.word	0xffffdfe4
 8000ee8:	ffffdfe0 	.word	0xffffdfe0
 8000eec:	ffffdfdc 	.word	0xffffdfdc
 8000ef0:	ffffdfd8 	.word	0xffffdfd8
 8000ef4:	ffffdfd4 	.word	0xffffdfd4
 8000ef8:	ffffdfcc 	.word	0xffffdfcc
 8000efc:	ffffdfa8 	.word	0xffffdfa8
 8000f00:	ffffdf94 	.word	0xffffdf94
 8000f04:	0800d254 	.word	0x0800d254
 8000f08:	ffffdf74 	.word	0xffffdf74
 8000f0c:	ffffdf54 	.word	0xffffdf54
 8000f10:	ffffdf34 	.word	0xffffdf34
 8000f14:	ffffdf14 	.word	0xffffdf14
 8000f18:	ffffdef4 	.word	0xffffdef4
 8000f1c:	ffffded4 	.word	0xffffded4
 8000f20:	ffffdeb4 	.word	0xffffdeb4
 8000f24:	ffffde94 	.word	0xffffde94
 8000f28:	ffffde88 	.word	0xffffde88
 8000f2c:	58024400 	.word	0x58024400
 8000f30:	ffffde84 	.word	0xffffde84
 8000f34:	20000260 	.word	0x20000260
 8000f38:	2000020c 	.word	0x2000020c
  	HAL_RNG_GenerateRandomNumber(&hrng, &random32bit);
 8000f3c:	4bbf      	ldr	r3, [pc, #764]	; (800123c <main+0x5dc>)
 8000f3e:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000f42:	4413      	add	r3, r2
 8000f44:	4619      	mov	r1, r3
 8000f46:	48be      	ldr	r0, [pc, #760]	; (8001240 <main+0x5e0>)
 8000f48:	f006 fd0b 	bl	8007962 <HAL_RNG_GenerateRandomNumber>
  	signal_array[i] = (float) random32bit / UINT32_MAX; // Generates numbers between 0 and 1
 8000f4c:	4bbb      	ldr	r3, [pc, #748]	; (800123c <main+0x5dc>)
 8000f4e:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000f52:	4413      	add	r3, r2
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f5e:	eddf 6ab9 	vldr	s13, [pc, #740]	; 8001244 <main+0x5e4>
 8000f62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f66:	4bb8      	ldr	r3, [pc, #736]	; (8001248 <main+0x5e8>)
 8000f68:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000f6c:	4413      	add	r3, r2
 8000f6e:	f242 1278 	movw	r2, #8568	; 0x2178
 8000f72:	443a      	add	r2, r7
 8000f74:	6812      	ldr	r2, [r2, #0]
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < length; i++){
 8000f7e:	f242 1378 	movw	r3, #8568	; 0x2178
 8000f82:	443b      	add	r3, r7
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3301      	adds	r3, #1
 8000f88:	f242 1278 	movw	r2, #8568	; 0x2178
 8000f8c:	443a      	add	r2, r7
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	f242 1378 	movw	r3, #8568	; 0x2178
 8000f94:	443b      	add	r3, r7
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4bac      	ldr	r3, [pc, #688]	; (800124c <main+0x5ec>)
 8000f9a:	f507 5106 	add.w	r1, r7, #8576	; 0x2180
 8000f9e:	440b      	add	r3, r1
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d3ca      	bcc.n	8000f3c <main+0x2dc>
  }

  // HRTimer enable
  __HAL_TIM_ENABLE(&htim2);
 8000fa6:	4baa      	ldr	r3, [pc, #680]	; (8001250 <main+0x5f0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4ba8      	ldr	r3, [pc, #672]	; (8001250 <main+0x5f0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f042 0201 	orr.w	r2, r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]
  __HAL_TIM_UIFREMAP_DISABLE(&htim2);
 8000fb6:	4ba6      	ldr	r3, [pc, #664]	; (8001250 <main+0x5f0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4ba4      	ldr	r3, [pc, #656]	; (8001250 <main+0x5f0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fc4:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim2);
 8000fc6:	48a2      	ldr	r0, [pc, #648]	; (8001250 <main+0x5f0>)
 8000fc8:	f006 fd46 	bl	8007a58 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000fcc:	4ba0      	ldr	r3, [pc, #640]	; (8001250 <main+0x5f0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 8000fd4:	489f      	ldr	r0, [pc, #636]	; (8001254 <main+0x5f4>)
 8000fd6:	f007 f9af 	bl	8008338 <HAL_UART_GetState>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b20      	cmp	r3, #32
 8000fde:	d108      	bne.n	8000ff2 <main+0x392>
	  HAL_UART_Receive(&huart3, (uint8_t*) &receiveBuffer[0], 8, 20);
 8000fe0:	499d      	ldr	r1, [pc, #628]	; (8001258 <main+0x5f8>)
 8000fe2:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8000fe6:	4419      	add	r1, r3
 8000fe8:	2314      	movs	r3, #20
 8000fea:	2208      	movs	r2, #8
 8000fec:	4899      	ldr	r0, [pc, #612]	; (8001254 <main+0x5f4>)
 8000fee:	f007 f8d3 	bl	8008198 <HAL_UART_Receive>
  }

	// Array size
	sprintf(size_of_signal_array, "Size of signal array = %ld \n\r", length);
 8000ff2:	4b96      	ldr	r3, [pc, #600]	; (800124c <main+0x5ec>)
 8000ff4:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000ff8:	4413      	add	r3, r2
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b97      	ldr	r3, [pc, #604]	; (800125c <main+0x5fc>)
 8000ffe:	f507 5106 	add.w	r1, r7, #8576	; 0x2180
 8001002:	440b      	add	r3, r1
 8001004:	4996      	ldr	r1, [pc, #600]	; (8001260 <main+0x600>)
 8001006:	4618      	mov	r0, r3
 8001008:	f00a fdb6 	bl	800bb78 <siprintf>
		if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 800100c:	4891      	ldr	r0, [pc, #580]	; (8001254 <main+0x5f4>)
 800100e:	f007 f993 	bl	8008338 <HAL_UART_GetState>
 8001012:	4603      	mov	r3, r0
 8001014:	2b20      	cmp	r3, #32
 8001016:	d10f      	bne.n	8001038 <main+0x3d8>
		HAL_UART_Transmit(&huart3, (uint8_t*) &size_of_signal_array[0], sizeof(size_of_signal_array), 20);
 8001018:	4990      	ldr	r1, [pc, #576]	; (800125c <main+0x5fc>)
 800101a:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 800101e:	4419      	add	r1, r3
 8001020:	2314      	movs	r3, #20
 8001022:	221e      	movs	r2, #30
 8001024:	488b      	ldr	r0, [pc, #556]	; (8001254 <main+0x5f4>)
 8001026:	f007 f821 	bl	800806c <HAL_UART_Transmit>
		while(HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX){}
 800102a:	bf00      	nop
 800102c:	4889      	ldr	r0, [pc, #548]	; (8001254 <main+0x5f4>)
 800102e:	f007 f983 	bl	8008338 <HAL_UART_GetState>
 8001032:	4603      	mov	r3, r0
 8001034:	2b21      	cmp	r3, #33	; 0x21
 8001036:	d0f9      	beq.n	800102c <main+0x3cc>
	}
	// Random number examples
	sprintf(rand32, "Random = %f \n\r", signal_array[0]);
 8001038:	4b83      	ldr	r3, [pc, #524]	; (8001248 <main+0x5e8>)
 800103a:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 800103e:	4413      	add	r3, r2
 8001040:	edd3 7a00 	vldr	s15, [r3]
 8001044:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001048:	4886      	ldr	r0, [pc, #536]	; (8001264 <main+0x604>)
 800104a:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 800104e:	4418      	add	r0, r3
 8001050:	ec53 2b17 	vmov	r2, r3, d7
 8001054:	4984      	ldr	r1, [pc, #528]	; (8001268 <main+0x608>)
 8001056:	f00a fd8f 	bl	800bb78 <siprintf>
		if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 800105a:	487e      	ldr	r0, [pc, #504]	; (8001254 <main+0x5f4>)
 800105c:	f007 f96c 	bl	8008338 <HAL_UART_GetState>
 8001060:	4603      	mov	r3, r0
 8001062:	2b20      	cmp	r3, #32
 8001064:	d108      	bne.n	8001078 <main+0x418>
		HAL_UART_Transmit(&huart3, (uint8_t*) &rand32[0], sizeof(rand32), 20);
 8001066:	497f      	ldr	r1, [pc, #508]	; (8001264 <main+0x604>)
 8001068:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 800106c:	4419      	add	r1, r3
 800106e:	2314      	movs	r3, #20
 8001070:	221e      	movs	r2, #30
 8001072:	4878      	ldr	r0, [pc, #480]	; (8001254 <main+0x5f4>)
 8001074:	f006 fffa 	bl	800806c <HAL_UART_Transmit>
	}
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001078:	4b75      	ldr	r3, [pc, #468]	; (8001250 <main+0x5f0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	f242 1274 	movw	r2, #8564	; 0x2174
 8001082:	443a      	add	r2, r7
 8001084:	6013      	str	r3, [r2, #0]
	sprintf(&counter_str[0], "Test counter = %ld \n\r", counter);
 8001086:	4b79      	ldr	r3, [pc, #484]	; (800126c <main+0x60c>)
 8001088:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 800108c:	4413      	add	r3, r2
 800108e:	f242 1274 	movw	r2, #8564	; 0x2174
 8001092:	443a      	add	r2, r7
 8001094:	6812      	ldr	r2, [r2, #0]
 8001096:	4976      	ldr	r1, [pc, #472]	; (8001270 <main+0x610>)
 8001098:	4618      	mov	r0, r3
 800109a:	f00a fd6d 	bl	800bb78 <siprintf>
	if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 800109e:	486d      	ldr	r0, [pc, #436]	; (8001254 <main+0x5f4>)
 80010a0:	f007 f94a 	bl	8008338 <HAL_UART_GetState>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b20      	cmp	r3, #32
 80010a8:	d108      	bne.n	80010bc <main+0x45c>
		HAL_UART_Transmit(&huart3, (uint8_t*) &counter_str[0], sizeof(counter_str), 20);
 80010aa:	4970      	ldr	r1, [pc, #448]	; (800126c <main+0x60c>)
 80010ac:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 80010b0:	4419      	add	r1, r3
 80010b2:	2314      	movs	r3, #20
 80010b4:	221e      	movs	r2, #30
 80010b6:	4867      	ldr	r0, [pc, #412]	; (8001254 <main+0x5f4>)
 80010b8:	f006 ffd8 	bl	800806c <HAL_UART_Transmit>
	}
	reset_buffer(counter_str);
 80010bc:	4b6b      	ldr	r3, [pc, #428]	; (800126c <main+0x60c>)
 80010be:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 80010c2:	4413      	add	r3, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fdb3 	bl	8000c30 <reset_buffer>

	// Instantaneous absolute value
	result = (float32_t *) malloc(length * sizeof(float32_t));
 80010ca:	4b60      	ldr	r3, [pc, #384]	; (800124c <main+0x5ec>)
 80010cc:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 80010d0:	4413      	add	r3, r2
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f00a f820 	bl	800b11c <malloc>
 80010dc:	4603      	mov	r3, r0
 80010de:	f242 1270 	movw	r2, #8560	; 0x2170
 80010e2:	443a      	add	r2, r7
 80010e4:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80010e6:	4b5a      	ldr	r3, [pc, #360]	; (8001250 <main+0x5f0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(signal_array, result, &length);
 80010ee:	4a57      	ldr	r2, [pc, #348]	; (800124c <main+0x5ec>)
 80010f0:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 80010f4:	441a      	add	r2, r3
 80010f6:	4b54      	ldr	r3, [pc, #336]	; (8001248 <main+0x5e8>)
 80010f8:	f507 5106 	add.w	r1, r7, #8576	; 0x2180
 80010fc:	440b      	add	r3, r1
 80010fe:	f242 1170 	movw	r1, #8560	; 0x2170
 8001102:	4439      	add	r1, r7
 8001104:	6809      	ldr	r1, [r1, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fb92 	bl	8000830 <inst_absolute>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 800110c:	4b50      	ldr	r3, [pc, #320]	; (8001250 <main+0x5f0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	f242 1274 	movw	r2, #8564	; 0x2174
 8001116:	443a      	add	r2, r7
 8001118:	6013      	str	r3, [r2, #0]
	sprintf(&counter_str[0], "Inst abs counter = %ld \n\r", counter);
 800111a:	4b54      	ldr	r3, [pc, #336]	; (800126c <main+0x60c>)
 800111c:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001120:	4413      	add	r3, r2
 8001122:	f242 1274 	movw	r2, #8564	; 0x2174
 8001126:	443a      	add	r2, r7
 8001128:	6812      	ldr	r2, [r2, #0]
 800112a:	4952      	ldr	r1, [pc, #328]	; (8001274 <main+0x614>)
 800112c:	4618      	mov	r0, r3
 800112e:	f00a fd23 	bl	800bb78 <siprintf>
	if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 8001132:	4848      	ldr	r0, [pc, #288]	; (8001254 <main+0x5f4>)
 8001134:	f007 f900 	bl	8008338 <HAL_UART_GetState>
 8001138:	4603      	mov	r3, r0
 800113a:	2b20      	cmp	r3, #32
 800113c:	d108      	bne.n	8001150 <main+0x4f0>
		HAL_UART_Transmit(&huart3, (uint8_t*) &counter_str[0], sizeof(counter_str), 20);
 800113e:	494b      	ldr	r1, [pc, #300]	; (800126c <main+0x60c>)
 8001140:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001144:	4419      	add	r1, r3
 8001146:	2314      	movs	r3, #20
 8001148:	221e      	movs	r2, #30
 800114a:	4842      	ldr	r0, [pc, #264]	; (8001254 <main+0x5f4>)
 800114c:	f006 ff8e 	bl	800806c <HAL_UART_Transmit>
	}
	free(result);
 8001150:	f242 1370 	movw	r3, #8560	; 0x2170
 8001154:	443b      	add	r3, r7
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	f009 ffe8 	bl	800b12c <free>
	reset_buffer(counter_str);
 800115c:	4b43      	ldr	r3, [pc, #268]	; (800126c <main+0x60c>)
 800115e:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001162:	4413      	add	r3, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fd63 	bl	8000c30 <reset_buffer>

	// Mean
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800116a:	4b39      	ldr	r3, [pc, #228]	; (8001250 <main+0x5f0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2200      	movs	r2, #0
 8001170:	625a      	str	r2, [r3, #36]	; 0x24
	mean(signal_array, &mean_value, &length);
 8001172:	4a36      	ldr	r2, [pc, #216]	; (800124c <main+0x5ec>)
 8001174:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001178:	441a      	add	r2, r3
 800117a:	493f      	ldr	r1, [pc, #252]	; (8001278 <main+0x618>)
 800117c:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001180:	4419      	add	r1, r3
 8001182:	4b31      	ldr	r3, [pc, #196]	; (8001248 <main+0x5e8>)
 8001184:	f507 5006 	add.w	r0, r7, #8576	; 0x2180
 8001188:	4403      	add	r3, r0
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fb61 	bl	8000852 <mean>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001190:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <main+0x5f0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001196:	f242 1274 	movw	r2, #8564	; 0x2174
 800119a:	443a      	add	r2, r7
 800119c:	6013      	str	r3, [r2, #0]
	sprintf(&buffer_0[0], "Mean = %f \n\r", mean_value);
 800119e:	4b36      	ldr	r3, [pc, #216]	; (8001278 <main+0x618>)
 80011a0:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 80011a4:	4413      	add	r3, r2
 80011a6:	edd3 7a00 	vldr	s15, [r3]
 80011aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011ae:	4833      	ldr	r0, [pc, #204]	; (800127c <main+0x61c>)
 80011b0:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 80011b4:	4418      	add	r0, r3
 80011b6:	ec53 2b17 	vmov	r2, r3, d7
 80011ba:	4931      	ldr	r1, [pc, #196]	; (8001280 <main+0x620>)
 80011bc:	f00a fcdc 	bl	800bb78 <siprintf>
	if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 80011c0:	4824      	ldr	r0, [pc, #144]	; (8001254 <main+0x5f4>)
 80011c2:	f007 f8b9 	bl	8008338 <HAL_UART_GetState>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b20      	cmp	r3, #32
 80011ca:	d108      	bne.n	80011de <main+0x57e>
		HAL_UART_Transmit(&huart3, (uint8_t*) &buffer_0[0], sizeof(buffer_0), 20);
 80011cc:	492b      	ldr	r1, [pc, #172]	; (800127c <main+0x61c>)
 80011ce:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 80011d2:	4419      	add	r1, r3
 80011d4:	2314      	movs	r3, #20
 80011d6:	221e      	movs	r2, #30
 80011d8:	481e      	ldr	r0, [pc, #120]	; (8001254 <main+0x5f4>)
 80011da:	f006 ff47 	bl	800806c <HAL_UART_Transmit>
	}
	sprintf(&counter_str[0], "Counter = %ld \n\r", counter);
 80011de:	4b23      	ldr	r3, [pc, #140]	; (800126c <main+0x60c>)
 80011e0:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 80011e4:	4413      	add	r3, r2
 80011e6:	f242 1274 	movw	r2, #8564	; 0x2174
 80011ea:	443a      	add	r2, r7
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	4925      	ldr	r1, [pc, #148]	; (8001284 <main+0x624>)
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00a fcc1 	bl	800bb78 <siprintf>
	if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 80011f6:	4817      	ldr	r0, [pc, #92]	; (8001254 <main+0x5f4>)
 80011f8:	f007 f89e 	bl	8008338 <HAL_UART_GetState>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b20      	cmp	r3, #32
 8001200:	d108      	bne.n	8001214 <main+0x5b4>
		HAL_UART_Transmit(&huart3, (uint8_t*) &counter_str[0], sizeof(counter_str), 20);
 8001202:	491a      	ldr	r1, [pc, #104]	; (800126c <main+0x60c>)
 8001204:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001208:	4419      	add	r1, r3
 800120a:	2314      	movs	r3, #20
 800120c:	221e      	movs	r2, #30
 800120e:	4811      	ldr	r0, [pc, #68]	; (8001254 <main+0x5f4>)
 8001210:	f006 ff2c 	bl	800806c <HAL_UART_Transmit>
	}
	reset_buffer(counter_str);
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <main+0x60c>)
 8001216:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 800121a:	4413      	add	r3, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fd07 	bl	8000c30 <reset_buffer>

	// Mean of squared
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <main+0x5f0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2200      	movs	r2, #0
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
	mean_of_squared(signal_array, &mean_of_squared_value, &length);
 800122a:	4a08      	ldr	r2, [pc, #32]	; (800124c <main+0x5ec>)
 800122c:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001230:	441a      	add	r2, r3
 8001232:	4915      	ldr	r1, [pc, #84]	; (8001288 <main+0x628>)
 8001234:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001238:	e028      	b.n	800128c <main+0x62c>
 800123a:	bf00      	nop
 800123c:	ffffdfd0 	.word	0xffffdfd0
 8001240:	2000020c 	.word	0x2000020c
 8001244:	4f800000 	.word	0x4f800000
 8001248:	ffffdff0 	.word	0xffffdff0
 800124c:	ffffdfcc 	.word	0xffffdfcc
 8001250:	20000220 	.word	0x20000220
 8001254:	20000260 	.word	0x20000260
 8001258:	ffffde88 	.word	0xffffde88
 800125c:	ffffdf74 	.word	0xffffdf74
 8001260:	0800d168 	.word	0x0800d168
 8001264:	ffffdfa8 	.word	0xffffdfa8
 8001268:	0800d188 	.word	0x0800d188
 800126c:	ffffdf54 	.word	0xffffdf54
 8001270:	0800d198 	.word	0x0800d198
 8001274:	0800d1b0 	.word	0x0800d1b0
 8001278:	ffffdfec 	.word	0xffffdfec
 800127c:	ffffdf34 	.word	0xffffdf34
 8001280:	0800d1cc 	.word	0x0800d1cc
 8001284:	0800d1dc 	.word	0x0800d1dc
 8001288:	ffffdfe8 	.word	0xffffdfe8
 800128c:	4419      	add	r1, r3
 800128e:	4bc4      	ldr	r3, [pc, #784]	; (80015a0 <main+0x940>)
 8001290:	f507 5006 	add.w	r0, r7, #8576	; 0x2180
 8001294:	4403      	add	r3, r0
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff faec 	bl	8000874 <mean_of_squared>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 800129c:	4bc1      	ldr	r3, [pc, #772]	; (80015a4 <main+0x944>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a2:	f242 1274 	movw	r2, #8564	; 0x2174
 80012a6:	443a      	add	r2, r7
 80012a8:	6013      	str	r3, [r2, #0]
	sprintf(&buffer_1[0], "Mean of squared = %f \n\r", mean_of_squared_value);
 80012aa:	4bbf      	ldr	r3, [pc, #764]	; (80015a8 <main+0x948>)
 80012ac:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 80012b0:	4413      	add	r3, r2
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012ba:	48bc      	ldr	r0, [pc, #752]	; (80015ac <main+0x94c>)
 80012bc:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 80012c0:	4418      	add	r0, r3
 80012c2:	ec53 2b17 	vmov	r2, r3, d7
 80012c6:	49ba      	ldr	r1, [pc, #744]	; (80015b0 <main+0x950>)
 80012c8:	f00a fc56 	bl	800bb78 <siprintf>
	if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 80012cc:	48b9      	ldr	r0, [pc, #740]	; (80015b4 <main+0x954>)
 80012ce:	f007 f833 	bl	8008338 <HAL_UART_GetState>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b20      	cmp	r3, #32
 80012d6:	d108      	bne.n	80012ea <main+0x68a>
		HAL_UART_Transmit(&huart3, (uint8_t*) &buffer_1[0], sizeof(buffer_1), 20);
 80012d8:	49b4      	ldr	r1, [pc, #720]	; (80015ac <main+0x94c>)
 80012da:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 80012de:	4419      	add	r1, r3
 80012e0:	2314      	movs	r3, #20
 80012e2:	221e      	movs	r2, #30
 80012e4:	48b3      	ldr	r0, [pc, #716]	; (80015b4 <main+0x954>)
 80012e6:	f006 fec1 	bl	800806c <HAL_UART_Transmit>
	}
	sprintf(&counter_str[0], "Counter = %ld \n\r", counter);
 80012ea:	4bb3      	ldr	r3, [pc, #716]	; (80015b8 <main+0x958>)
 80012ec:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 80012f0:	4413      	add	r3, r2
 80012f2:	f242 1274 	movw	r2, #8564	; 0x2174
 80012f6:	443a      	add	r2, r7
 80012f8:	6812      	ldr	r2, [r2, #0]
 80012fa:	49b0      	ldr	r1, [pc, #704]	; (80015bc <main+0x95c>)
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00a fc3b 	bl	800bb78 <siprintf>
	if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 8001302:	48ac      	ldr	r0, [pc, #688]	; (80015b4 <main+0x954>)
 8001304:	f007 f818 	bl	8008338 <HAL_UART_GetState>
 8001308:	4603      	mov	r3, r0
 800130a:	2b20      	cmp	r3, #32
 800130c:	d108      	bne.n	8001320 <main+0x6c0>
		HAL_UART_Transmit(&huart3, (uint8_t*) &counter_str[0], sizeof(counter_str), 20);
 800130e:	49aa      	ldr	r1, [pc, #680]	; (80015b8 <main+0x958>)
 8001310:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001314:	4419      	add	r1, r3
 8001316:	2314      	movs	r3, #20
 8001318:	221e      	movs	r2, #30
 800131a:	48a6      	ldr	r0, [pc, #664]	; (80015b4 <main+0x954>)
 800131c:	f006 fea6 	bl	800806c <HAL_UART_Transmit>
	}
	reset_buffer(counter_str);
 8001320:	4ba5      	ldr	r3, [pc, #660]	; (80015b8 <main+0x958>)
 8001322:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001326:	4413      	add	r3, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fc81 	bl	8000c30 <reset_buffer>

	// Standard deviation
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800132e:	4b9d      	ldr	r3, [pc, #628]	; (80015a4 <main+0x944>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
	std_dev(signal_array, &std_dev_value, &length);
 8001336:	4aa2      	ldr	r2, [pc, #648]	; (80015c0 <main+0x960>)
 8001338:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 800133c:	441a      	add	r2, r3
 800133e:	49a1      	ldr	r1, [pc, #644]	; (80015c4 <main+0x964>)
 8001340:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001344:	4419      	add	r1, r3
 8001346:	4b96      	ldr	r3, [pc, #600]	; (80015a0 <main+0x940>)
 8001348:	f507 5006 	add.w	r0, r7, #8576	; 0x2180
 800134c:	4403      	add	r3, r0
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff faaf 	bl	80008b2 <std_dev>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001354:	4b93      	ldr	r3, [pc, #588]	; (80015a4 <main+0x944>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	f242 1274 	movw	r2, #8564	; 0x2174
 800135e:	443a      	add	r2, r7
 8001360:	6013      	str	r3, [r2, #0]
	sprintf(&buffer_2[0], "Std dev = %f \n\r", std_dev_value);
 8001362:	4b98      	ldr	r3, [pc, #608]	; (80015c4 <main+0x964>)
 8001364:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001368:	4413      	add	r3, r2
 800136a:	edd3 7a00 	vldr	s15, [r3]
 800136e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001372:	4895      	ldr	r0, [pc, #596]	; (80015c8 <main+0x968>)
 8001374:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001378:	4418      	add	r0, r3
 800137a:	ec53 2b17 	vmov	r2, r3, d7
 800137e:	4993      	ldr	r1, [pc, #588]	; (80015cc <main+0x96c>)
 8001380:	f00a fbfa 	bl	800bb78 <siprintf>
	if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 8001384:	488b      	ldr	r0, [pc, #556]	; (80015b4 <main+0x954>)
 8001386:	f006 ffd7 	bl	8008338 <HAL_UART_GetState>
 800138a:	4603      	mov	r3, r0
 800138c:	2b20      	cmp	r3, #32
 800138e:	d108      	bne.n	80013a2 <main+0x742>
		HAL_UART_Transmit(&huart3, (uint8_t*) &buffer_2[0], sizeof(buffer_2), 20);
 8001390:	498d      	ldr	r1, [pc, #564]	; (80015c8 <main+0x968>)
 8001392:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001396:	4419      	add	r1, r3
 8001398:	2314      	movs	r3, #20
 800139a:	221e      	movs	r2, #30
 800139c:	4885      	ldr	r0, [pc, #532]	; (80015b4 <main+0x954>)
 800139e:	f006 fe65 	bl	800806c <HAL_UART_Transmit>
	}
	sprintf(&counter_str[0], "Counter = %ld \n\r", counter);
 80013a2:	4b85      	ldr	r3, [pc, #532]	; (80015b8 <main+0x958>)
 80013a4:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 80013a8:	4413      	add	r3, r2
 80013aa:	f242 1274 	movw	r2, #8564	; 0x2174
 80013ae:	443a      	add	r2, r7
 80013b0:	6812      	ldr	r2, [r2, #0]
 80013b2:	4982      	ldr	r1, [pc, #520]	; (80015bc <main+0x95c>)
 80013b4:	4618      	mov	r0, r3
 80013b6:	f00a fbdf 	bl	800bb78 <siprintf>
	if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 80013ba:	487e      	ldr	r0, [pc, #504]	; (80015b4 <main+0x954>)
 80013bc:	f006 ffbc 	bl	8008338 <HAL_UART_GetState>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b20      	cmp	r3, #32
 80013c4:	d108      	bne.n	80013d8 <main+0x778>
		HAL_UART_Transmit(&huart3, (uint8_t*) &counter_str[0], sizeof(counter_str), 20);
 80013c6:	497c      	ldr	r1, [pc, #496]	; (80015b8 <main+0x958>)
 80013c8:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 80013cc:	4419      	add	r1, r3
 80013ce:	2314      	movs	r3, #20
 80013d0:	221e      	movs	r2, #30
 80013d2:	4878      	ldr	r0, [pc, #480]	; (80015b4 <main+0x954>)
 80013d4:	f006 fe4a 	bl	800806c <HAL_UART_Transmit>
	}
	reset_buffer(counter_str);
 80013d8:	4b77      	ldr	r3, [pc, #476]	; (80015b8 <main+0x958>)
 80013da:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 80013de:	4413      	add	r3, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fc25 	bl	8000c30 <reset_buffer>

	// GMAX
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80013e6:	4b6f      	ldr	r3, [pc, #444]	; (80015a4 <main+0x944>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
	gmax(signal_array, &length, &max, &max_index);
 80013ee:	4b78      	ldr	r3, [pc, #480]	; (80015d0 <main+0x970>)
 80013f0:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 80013f4:	4413      	add	r3, r2
 80013f6:	4a77      	ldr	r2, [pc, #476]	; (80015d4 <main+0x974>)
 80013f8:	f507 5106 	add.w	r1, r7, #8576	; 0x2180
 80013fc:	440a      	add	r2, r1
 80013fe:	4970      	ldr	r1, [pc, #448]	; (80015c0 <main+0x960>)
 8001400:	f507 5006 	add.w	r0, r7, #8576	; 0x2180
 8001404:	4401      	add	r1, r0
 8001406:	4866      	ldr	r0, [pc, #408]	; (80015a0 <main+0x940>)
 8001408:	f507 5406 	add.w	r4, r7, #8576	; 0x2180
 800140c:	4420      	add	r0, r4
 800140e:	f7ff fa73 	bl	80008f8 <gmax>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001412:	4b64      	ldr	r3, [pc, #400]	; (80015a4 <main+0x944>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	f242 1274 	movw	r2, #8564	; 0x2174
 800141c:	443a      	add	r2, r7
 800141e:	6013      	str	r3, [r2, #0]
	sprintf(&buffer_3[0], "Gmax = %f \n\r", max);
 8001420:	4b6c      	ldr	r3, [pc, #432]	; (80015d4 <main+0x974>)
 8001422:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001426:	4413      	add	r3, r2
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001430:	4869      	ldr	r0, [pc, #420]	; (80015d8 <main+0x978>)
 8001432:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001436:	4418      	add	r0, r3
 8001438:	ec53 2b17 	vmov	r2, r3, d7
 800143c:	4967      	ldr	r1, [pc, #412]	; (80015dc <main+0x97c>)
 800143e:	f00a fb9b 	bl	800bb78 <siprintf>
	if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 8001442:	485c      	ldr	r0, [pc, #368]	; (80015b4 <main+0x954>)
 8001444:	f006 ff78 	bl	8008338 <HAL_UART_GetState>
 8001448:	4603      	mov	r3, r0
 800144a:	2b20      	cmp	r3, #32
 800144c:	d108      	bne.n	8001460 <main+0x800>
		HAL_UART_Transmit(&huart3, (uint8_t*) &buffer_3[0], sizeof(buffer_3), 20);
 800144e:	4962      	ldr	r1, [pc, #392]	; (80015d8 <main+0x978>)
 8001450:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001454:	4419      	add	r1, r3
 8001456:	2314      	movs	r3, #20
 8001458:	221e      	movs	r2, #30
 800145a:	4856      	ldr	r0, [pc, #344]	; (80015b4 <main+0x954>)
 800145c:	f006 fe06 	bl	800806c <HAL_UART_Transmit>
	}
	sprintf(&counter_str[0], "Counter = %ld \n\r", counter);
 8001460:	4b55      	ldr	r3, [pc, #340]	; (80015b8 <main+0x958>)
 8001462:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001466:	4413      	add	r3, r2
 8001468:	f242 1274 	movw	r2, #8564	; 0x2174
 800146c:	443a      	add	r2, r7
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	4952      	ldr	r1, [pc, #328]	; (80015bc <main+0x95c>)
 8001472:	4618      	mov	r0, r3
 8001474:	f00a fb80 	bl	800bb78 <siprintf>
	if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 8001478:	484e      	ldr	r0, [pc, #312]	; (80015b4 <main+0x954>)
 800147a:	f006 ff5d 	bl	8008338 <HAL_UART_GetState>
 800147e:	4603      	mov	r3, r0
 8001480:	2b20      	cmp	r3, #32
 8001482:	d108      	bne.n	8001496 <main+0x836>
		HAL_UART_Transmit(&huart3, (uint8_t*) &counter_str[0], sizeof(counter_str), 20);
 8001484:	494c      	ldr	r1, [pc, #304]	; (80015b8 <main+0x958>)
 8001486:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 800148a:	4419      	add	r1, r3
 800148c:	2314      	movs	r3, #20
 800148e:	221e      	movs	r2, #30
 8001490:	4848      	ldr	r0, [pc, #288]	; (80015b4 <main+0x954>)
 8001492:	f006 fdeb 	bl	800806c <HAL_UART_Transmit>
	}
	reset_buffer(counter_str);
 8001496:	4b48      	ldr	r3, [pc, #288]	; (80015b8 <main+0x958>)
 8001498:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 800149c:	4413      	add	r3, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fbc6 	bl	8000c30 <reset_buffer>

	// Variance
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80014a4:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <main+0x944>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2200      	movs	r2, #0
 80014aa:	625a      	str	r2, [r3, #36]	; 0x24
	variance(signal_array, &var, &length);
 80014ac:	4a44      	ldr	r2, [pc, #272]	; (80015c0 <main+0x960>)
 80014ae:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 80014b2:	441a      	add	r2, r3
 80014b4:	494a      	ldr	r1, [pc, #296]	; (80015e0 <main+0x980>)
 80014b6:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 80014ba:	4419      	add	r1, r3
 80014bc:	4b38      	ldr	r3, [pc, #224]	; (80015a0 <main+0x940>)
 80014be:	f507 5006 	add.w	r0, r7, #8576	; 0x2180
 80014c2:	4403      	add	r3, r0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fa05 	bl	80008d4 <variance>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 80014ca:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <main+0x944>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	f242 1274 	movw	r2, #8564	; 0x2174
 80014d4:	443a      	add	r2, r7
 80014d6:	6013      	str	r3, [r2, #0]
	sprintf(&buffer_4[0], "Variance = %f \n\r", var);
 80014d8:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <main+0x980>)
 80014da:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 80014de:	4413      	add	r3, r2
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014e8:	483e      	ldr	r0, [pc, #248]	; (80015e4 <main+0x984>)
 80014ea:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 80014ee:	4418      	add	r0, r3
 80014f0:	ec53 2b17 	vmov	r2, r3, d7
 80014f4:	493c      	ldr	r1, [pc, #240]	; (80015e8 <main+0x988>)
 80014f6:	f00a fb3f 	bl	800bb78 <siprintf>
	if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 80014fa:	482e      	ldr	r0, [pc, #184]	; (80015b4 <main+0x954>)
 80014fc:	f006 ff1c 	bl	8008338 <HAL_UART_GetState>
 8001500:	4603      	mov	r3, r0
 8001502:	2b20      	cmp	r3, #32
 8001504:	d108      	bne.n	8001518 <main+0x8b8>
		HAL_UART_Transmit(&huart3, (uint8_t*) &buffer_4[0], sizeof(buffer_4), 20);
 8001506:	4937      	ldr	r1, [pc, #220]	; (80015e4 <main+0x984>)
 8001508:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 800150c:	4419      	add	r1, r3
 800150e:	2314      	movs	r3, #20
 8001510:	221e      	movs	r2, #30
 8001512:	4828      	ldr	r0, [pc, #160]	; (80015b4 <main+0x954>)
 8001514:	f006 fdaa 	bl	800806c <HAL_UART_Transmit>
	}
	sprintf(&counter_str[0], "Counter = %ld \n\r", counter);
 8001518:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <main+0x958>)
 800151a:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 800151e:	4413      	add	r3, r2
 8001520:	f242 1274 	movw	r2, #8564	; 0x2174
 8001524:	443a      	add	r2, r7
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	4924      	ldr	r1, [pc, #144]	; (80015bc <main+0x95c>)
 800152a:	4618      	mov	r0, r3
 800152c:	f00a fb24 	bl	800bb78 <siprintf>
	if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 8001530:	4820      	ldr	r0, [pc, #128]	; (80015b4 <main+0x954>)
 8001532:	f006 ff01 	bl	8008338 <HAL_UART_GetState>
 8001536:	4603      	mov	r3, r0
 8001538:	2b20      	cmp	r3, #32
 800153a:	d108      	bne.n	800154e <main+0x8ee>
		HAL_UART_Transmit(&huart3, (uint8_t*) &counter_str[0], sizeof(counter_str), 20);
 800153c:	491e      	ldr	r1, [pc, #120]	; (80015b8 <main+0x958>)
 800153e:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001542:	4419      	add	r1, r3
 8001544:	2314      	movs	r3, #20
 8001546:	221e      	movs	r2, #30
 8001548:	481a      	ldr	r0, [pc, #104]	; (80015b4 <main+0x954>)
 800154a:	f006 fd8f 	bl	800806c <HAL_UART_Transmit>
	}
	reset_buffer(counter_str);
 800154e:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <main+0x958>)
 8001550:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001554:	4413      	add	r3, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fb6a 	bl	8000c30 <reset_buffer>

	// Central moment
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <main+0x944>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2200      	movs	r2, #0
 8001562:	625a      	str	r2, [r3, #36]	; 0x24
	central_moment(signal_array, &length, &power, &moment);
 8001564:	4b21      	ldr	r3, [pc, #132]	; (80015ec <main+0x98c>)
 8001566:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 800156a:	4413      	add	r3, r2
 800156c:	4a20      	ldr	r2, [pc, #128]	; (80015f0 <main+0x990>)
 800156e:	f507 5106 	add.w	r1, r7, #8576	; 0x2180
 8001572:	440a      	add	r2, r1
 8001574:	4912      	ldr	r1, [pc, #72]	; (80015c0 <main+0x960>)
 8001576:	f507 5006 	add.w	r0, r7, #8576	; 0x2180
 800157a:	4401      	add	r1, r0
 800157c:	4808      	ldr	r0, [pc, #32]	; (80015a0 <main+0x940>)
 800157e:	f507 5406 	add.w	r4, r7, #8576	; 0x2180
 8001582:	4420      	add	r0, r4
 8001584:	f7ff fa80 	bl	8000a88 <central_moment>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <main+0x944>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	f242 1274 	movw	r2, #8564	; 0x2174
 8001592:	443a      	add	r2, r7
 8001594:	6013      	str	r3, [r2, #0]
	sprintf(&buffer_5[0], "Central moment = %f \n\r", moment);
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <main+0x98c>)
 8001598:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 800159c:	e02a      	b.n	80015f4 <main+0x994>
 800159e:	bf00      	nop
 80015a0:	ffffdff0 	.word	0xffffdff0
 80015a4:	20000220 	.word	0x20000220
 80015a8:	ffffdfe8 	.word	0xffffdfe8
 80015ac:	ffffdf14 	.word	0xffffdf14
 80015b0:	0800d1f0 	.word	0x0800d1f0
 80015b4:	20000260 	.word	0x20000260
 80015b8:	ffffdf54 	.word	0xffffdf54
 80015bc:	0800d1dc 	.word	0x0800d1dc
 80015c0:	ffffdfcc 	.word	0xffffdfcc
 80015c4:	ffffdfe4 	.word	0xffffdfe4
 80015c8:	ffffdef4 	.word	0xffffdef4
 80015cc:	0800d208 	.word	0x0800d208
 80015d0:	ffffdfc8 	.word	0xffffdfc8
 80015d4:	ffffdfe0 	.word	0xffffdfe0
 80015d8:	ffffded4 	.word	0xffffded4
 80015dc:	0800d218 	.word	0x0800d218
 80015e0:	ffffdfd8 	.word	0xffffdfd8
 80015e4:	ffffdeb4 	.word	0xffffdeb4
 80015e8:	0800d228 	.word	0x0800d228
 80015ec:	ffffdfdc 	.word	0xffffdfdc
 80015f0:	ffffdfd4 	.word	0xffffdfd4
 80015f4:	4413      	add	r3, r2
 80015f6:	edd3 7a00 	vldr	s15, [r3]
 80015fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015fe:	481d      	ldr	r0, [pc, #116]	; (8001674 <main+0xa14>)
 8001600:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001604:	4418      	add	r0, r3
 8001606:	ec53 2b17 	vmov	r2, r3, d7
 800160a:	491b      	ldr	r1, [pc, #108]	; (8001678 <main+0xa18>)
 800160c:	f00a fab4 	bl	800bb78 <siprintf>
	if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 8001610:	481a      	ldr	r0, [pc, #104]	; (800167c <main+0xa1c>)
 8001612:	f006 fe91 	bl	8008338 <HAL_UART_GetState>
 8001616:	4603      	mov	r3, r0
 8001618:	2b20      	cmp	r3, #32
 800161a:	d108      	bne.n	800162e <main+0x9ce>
		HAL_UART_Transmit(&huart3, (uint8_t*) &buffer_5[0], sizeof(buffer_5), 20);
 800161c:	4915      	ldr	r1, [pc, #84]	; (8001674 <main+0xa14>)
 800161e:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001622:	4419      	add	r1, r3
 8001624:	2314      	movs	r3, #20
 8001626:	221e      	movs	r2, #30
 8001628:	4814      	ldr	r0, [pc, #80]	; (800167c <main+0xa1c>)
 800162a:	f006 fd1f 	bl	800806c <HAL_UART_Transmit>
	}
	sprintf(&counter_str[0], "Counter = %ld \n\r", counter);
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <main+0xa20>)
 8001630:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001634:	4413      	add	r3, r2
 8001636:	f242 1274 	movw	r2, #8564	; 0x2174
 800163a:	443a      	add	r2, r7
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	4911      	ldr	r1, [pc, #68]	; (8001684 <main+0xa24>)
 8001640:	4618      	mov	r0, r3
 8001642:	f00a fa99 	bl	800bb78 <siprintf>
	if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 8001646:	480d      	ldr	r0, [pc, #52]	; (800167c <main+0xa1c>)
 8001648:	f006 fe76 	bl	8008338 <HAL_UART_GetState>
 800164c:	4603      	mov	r3, r0
 800164e:	2b20      	cmp	r3, #32
 8001650:	d108      	bne.n	8001664 <main+0xa04>
		HAL_UART_Transmit(&huart3, (uint8_t*) &counter_str[0], sizeof(counter_str), 20);
 8001652:	490b      	ldr	r1, [pc, #44]	; (8001680 <main+0xa20>)
 8001654:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001658:	4419      	add	r1, r3
 800165a:	2314      	movs	r3, #20
 800165c:	221e      	movs	r2, #30
 800165e:	4807      	ldr	r0, [pc, #28]	; (800167c <main+0xa1c>)
 8001660:	f006 fd04 	bl	800806c <HAL_UART_Transmit>
	}
	reset_buffer(counter_str);
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <main+0xa20>)
 8001666:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 800166a:	4413      	add	r3, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fadf 	bl	8000c30 <reset_buffer>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001672:	e7fe      	b.n	8001672 <main+0xa12>
 8001674:	ffffde94 	.word	0xffffde94
 8001678:	0800d23c 	.word	0x0800d23c
 800167c:	20000260 	.word	0x20000260
 8001680:	ffffdf54 	.word	0xffffdf54
 8001684:	0800d1dc 	.word	0x0800d1dc

08001688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b0cc      	sub	sp, #304	; 0x130
 800168c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001692:	224c      	movs	r2, #76	; 0x4c
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f009 fd74 	bl	800b184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800169c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80016a0:	2220      	movs	r2, #32
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f009 fd6d 	bl	800b184 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	4618      	mov	r0, r3
 80016b0:	23bc      	movs	r3, #188	; 0xbc
 80016b2:	461a      	mov	r2, r3
 80016b4:	2100      	movs	r1, #0
 80016b6:	f009 fd65 	bl	800b184 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80016ba:	2002      	movs	r0, #2
 80016bc:	f003 fe40 	bl	8005340 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	4b50      	ldr	r3, [pc, #320]	; (8001808 <SystemClock_Config+0x180>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	4a4f      	ldr	r2, [pc, #316]	; (8001808 <SystemClock_Config+0x180>)
 80016cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016d0:	6193      	str	r3, [r2, #24]
 80016d2:	4b4d      	ldr	r3, [pc, #308]	; (8001808 <SystemClock_Config+0x180>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	4b4b      	ldr	r3, [pc, #300]	; (800180c <SystemClock_Config+0x184>)
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	4a4a      	ldr	r2, [pc, #296]	; (800180c <SystemClock_Config+0x184>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80016ea:	4b48      	ldr	r3, [pc, #288]	; (800180c <SystemClock_Config+0x184>)
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	f003 0201 	and.w	r2, r3, #1
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016fa:	bf00      	nop
 80016fc:	4b42      	ldr	r3, [pc, #264]	; (8001808 <SystemClock_Config+0x180>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001708:	d1f8      	bne.n	80016fc <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800170a:	2323      	movs	r3, #35	; 0x23
 800170c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001710:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001714:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001718:	2301      	movs	r3, #1
 800171a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800171e:	2340      	movs	r3, #64	; 0x40
 8001720:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001724:	2301      	movs	r3, #1
 8001726:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172a:	2302      	movs	r3, #2
 800172c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001730:	2302      	movs	r3, #2
 8001732:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001736:	2305      	movs	r3, #5
 8001738:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 96;
 800173c:	2360      	movs	r3, #96	; 0x60
 800173e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001742:	2302      	movs	r3, #2
 8001744:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001748:	2302      	movs	r3, #2
 800174a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800174e:	2302      	movs	r3, #2
 8001750:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001754:	230c      	movs	r3, #12
 8001756:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001766:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800176a:	4618      	mov	r0, r3
 800176c:	f003 fe52 	bl	8005414 <HAL_RCC_OscConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001776:	f000 f84d 	bl	8001814 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177a:	233f      	movs	r3, #63	; 0x3f
 800177c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001780:	2303      	movs	r3, #3
 8001782:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800178c:	2308      	movs	r3, #8
 800178e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001792:	2300      	movs	r3, #0
 8001794:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017aa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017ae:	2104      	movs	r1, #4
 80017b0:	4618      	mov	r0, r3
 80017b2:	f004 fa07 	bl	8005bc4 <HAL_RCC_ClockConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0x138>
  {
    Error_Handler();
 80017bc:	f000 f82a 	bl	8001814 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_RNG
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	4a12      	ldr	r2, [pc, #72]	; (8001810 <SystemClock_Config+0x188>)
 80017c6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	2203      	movs	r2, #3
 80017ce:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80017d0:	f107 0308 	add.w	r3, r7, #8
 80017d4:	2200      	movs	r2, #0
 80017d6:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80017d8:	f107 0308 	add.w	r3, r7, #8
 80017dc:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80017e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017e4:	f107 0308 	add.w	r3, r7, #8
 80017e8:	4618      	mov	r0, r3
 80017ea:	f004 fd6f 	bl	80062cc <HAL_RCCEx_PeriphCLKConfig>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <SystemClock_Config+0x170>
  {
    Error_Handler();
 80017f4:	f000 f80e 	bl	8001814 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80017f8:	f003 fdfc 	bl	80053f4 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80017fc:	bf00      	nop
 80017fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	58024800 	.word	0x58024800
 800180c:	58000400 	.word	0x58000400
 8001810:	00060002 	.word	0x00060002

08001814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <MX_RNG_Init+0x24>)
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <MX_RNG_Init+0x28>)
 800182c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_RNG_Init+0x24>)
 8001830:	2200      	movs	r2, #0
 8001832:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <MX_RNG_Init+0x24>)
 8001836:	f006 f839 	bl	80078ac <HAL_RNG_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001840:	f7ff ffe8 	bl	8001814 <Error_Handler>
  }

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	2000020c 	.word	0x2000020c
 800184c:	48021800 	.word	0x48021800

08001850 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0b      	ldr	r2, [pc, #44]	; (800188c <HAL_RNG_MspInit+0x3c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d10e      	bne.n	8001880 <HAL_RNG_MspInit+0x30>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_RNG_MspInit+0x40>)
 8001864:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001868:	4a09      	ldr	r2, [pc, #36]	; (8001890 <HAL_RNG_MspInit+0x40>)
 800186a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800186e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <HAL_RNG_MspInit+0x40>)
 8001874:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	48021800 	.word	0x48021800
 8001890:	58024400 	.word	0x58024400

08001894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_MspInit+0x30>)
 800189c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018a0:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <HAL_MspInit+0x30>)
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_MspInit+0x30>)
 80018ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	58024400 	.word	0x58024400

080018c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <HardFault_Handler+0x4>

080018dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <MemManage_Handler+0x4>

080018e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <BusFault_Handler+0x4>

080018e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <UsageFault_Handler+0x4>

080018ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800191c:	f003 f8b8 	bl	8004a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}

08001924 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <_sbrk+0x50>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <_sbrk+0x16>
		heap_end = &end;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <_sbrk+0x50>)
 8001936:	4a10      	ldr	r2, [pc, #64]	; (8001978 <_sbrk+0x54>)
 8001938:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <_sbrk+0x50>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <_sbrk+0x50>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4413      	add	r3, r2
 8001948:	466a      	mov	r2, sp
 800194a:	4293      	cmp	r3, r2
 800194c:	d907      	bls.n	800195e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800194e:	f009 fbbb 	bl	800b0c8 <__errno>
 8001952:	4602      	mov	r2, r0
 8001954:	230c      	movs	r3, #12
 8001956:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001958:	f04f 33ff 	mov.w	r3, #4294967295
 800195c:	e006      	b.n	800196c <_sbrk+0x48>
	}

	heap_end += incr;
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <_sbrk+0x50>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	4a03      	ldr	r2, [pc, #12]	; (8001974 <_sbrk+0x50>)
 8001968:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000200 	.word	0x20000200
 8001978:	20000700 	.word	0x20000700

0800197c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001982:	f107 0310 	add.w	r3, r7, #16
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800199a:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <MX_TIM2_Init+0x98>)
 800199c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019a2:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <MX_TIM2_Init+0x98>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a8:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <MX_TIM2_Init+0x98>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFD;
 80019ae:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <MX_TIM2_Init+0x98>)
 80019b0:	f06f 0202 	mvn.w	r2, #2
 80019b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b6:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <MX_TIM2_Init+0x98>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019bc:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <MX_TIM2_Init+0x98>)
 80019be:	2200      	movs	r2, #0
 80019c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019c2:	4814      	ldr	r0, [pc, #80]	; (8001a14 <MX_TIM2_Init+0x98>)
 80019c4:	f006 f81c 	bl	8007a00 <HAL_TIM_Base_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019ce:	f7ff ff21 	bl	8001814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	4619      	mov	r1, r3
 80019de:	480d      	ldr	r0, [pc, #52]	; (8001a14 <MX_TIM2_Init+0x98>)
 80019e0:	f006 f864 	bl	8007aac <HAL_TIM_ConfigClockSource>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019ea:	f7ff ff13 	bl	8001814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	4619      	mov	r1, r3
 80019fa:	4806      	ldr	r0, [pc, #24]	; (8001a14 <MX_TIM2_Init+0x98>)
 80019fc:	f006 fa5e 	bl	8007ebc <HAL_TIMEx_MasterConfigSynchronization>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a06:	f7ff ff05 	bl	8001814 <Error_Handler>
  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3720      	adds	r7, #32
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000220 	.word	0x20000220

08001a18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a28:	d10e      	bne.n	8001a48 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_TIM_Base_MspInit+0x3c>)
 8001a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a30:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <HAL_TIM_Base_MspInit+0x3c>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_TIM_Base_MspInit+0x3c>)
 8001a3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	58024400 	.word	0x58024400

08001a58 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001a5c:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a5e:	4a23      	ldr	r2, [pc, #140]	; (8001aec <MX_USART3_UART_Init+0x94>)
 8001a60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a62:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a70:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a76:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a7e:	220c      	movs	r2, #12
 8001a80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a94:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001aa0:	4811      	ldr	r0, [pc, #68]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001aa2:	f006 fa93 	bl	8007fcc <HAL_UART_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001aac:	f7ff feb2 	bl	8001814 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	480d      	ldr	r0, [pc, #52]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001ab4:	f008 ff79 	bl	800a9aa <HAL_UARTEx_SetTxFifoThreshold>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001abe:	f7ff fea9 	bl	8001814 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4808      	ldr	r0, [pc, #32]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001ac6:	f008 ffae 	bl	800aa26 <HAL_UARTEx_SetRxFifoThreshold>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ad0:	f7ff fea0 	bl	8001814 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001ad6:	f008 ff2f 	bl	800a938 <HAL_UARTEx_DisableFifoMode>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ae0:	f7ff fe98 	bl	8001814 <Error_Handler>
  }

}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000260 	.word	0x20000260
 8001aec:	40004800 	.word	0x40004800

08001af0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a1a      	ldr	r2, [pc, #104]	; (8001b78 <HAL_UART_MspInit+0x88>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d12e      	bne.n	8001b70 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <HAL_UART_MspInit+0x8c>)
 8001b14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b18:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <HAL_UART_MspInit+0x8c>)
 8001b1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b22:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <HAL_UART_MspInit+0x8c>)
 8001b24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_UART_MspInit+0x8c>)
 8001b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b36:	4a11      	ldr	r2, [pc, #68]	; (8001b7c <HAL_UART_MspInit+0x8c>)
 8001b38:	f043 0308 	orr.w	r3, r3, #8
 8001b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_UART_MspInit+0x8c>)
 8001b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b60:	2307      	movs	r3, #7
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <HAL_UART_MspInit+0x90>)
 8001b6c:	f003 f8c2 	bl	8004cf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b70:	bf00      	nop
 8001b72:	3728      	adds	r7, #40	; 0x28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40004800 	.word	0x40004800
 8001b7c:	58024400 	.word	0x58024400
 8001b80:	58020c00 	.word	0x58020c00

08001b84 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b8a:	4a16      	ldr	r2, [pc, #88]	; (8001be4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001b8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001b8e:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b90:	2209      	movs	r2, #9
 8001b92:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b96:	2202      	movs	r2, #2
 8001b98:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001bca:	4805      	ldr	r0, [pc, #20]	; (8001be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bcc:	f003 fa70 	bl	80050b0 <HAL_PCD_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001bd6:	f7ff fe1d 	bl	8001814 <Error_Handler>
  }

}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200002ec 	.word	0x200002ec
 8001be4:	40080000 	.word	0x40080000

08001be8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <HAL_PCD_MspInit+0xa4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d13b      	bne.n	8001c82 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	4b21      	ldr	r3, [pc, #132]	; (8001c90 <HAL_PCD_MspInit+0xa8>)
 8001c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c10:	4a1f      	ldr	r2, [pc, #124]	; (8001c90 <HAL_PCD_MspInit+0xa8>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_PCD_MspInit+0xa8>)
 8001c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001c28:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001c3a:	230a      	movs	r3, #10
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	4813      	ldr	r0, [pc, #76]	; (8001c94 <HAL_PCD_MspInit+0xac>)
 8001c46:	f003 f855 	bl	8004cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	480d      	ldr	r0, [pc, #52]	; (8001c94 <HAL_PCD_MspInit+0xac>)
 8001c60:	f003 f848 	bl	8004cf4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_PCD_MspInit+0xa8>)
 8001c66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c6a:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <HAL_PCD_MspInit+0xa8>)
 8001c6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_PCD_MspInit+0xa8>)
 8001c76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001c82:	bf00      	nop
 8001c84:	3728      	adds	r7, #40	; 0x28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40080000 	.word	0x40080000
 8001c90:	58024400 	.word	0x58024400
 8001c94:	58020000 	.word	0x58020000

08001c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c9e:	e003      	b.n	8001ca8 <LoopCopyDataInit>

08001ca0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ca2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ca4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ca6:	3104      	adds	r1, #4

08001ca8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ca8:	480b      	ldr	r0, [pc, #44]	; (8001cd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cb0:	d3f6      	bcc.n	8001ca0 <CopyDataInit>
  ldr  r2, =_sbss
 8001cb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ce0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cb4:	e002      	b.n	8001cbc <LoopFillZerobss>

08001cb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cb8:	f842 3b04 	str.w	r3, [r2], #4

08001cbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001cc0:	d3f9      	bcc.n	8001cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cc2:	f7fe fd45 	bl	8000750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cc6:	f009 fa05 	bl	800b0d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cca:	f7fe ffc9 	bl	8000c60 <main>
  bx  lr    
 8001cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cd0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001cd4:	08010320 	.word	0x08010320
  ldr  r0, =_sdata
 8001cd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cdc:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001ce0:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001ce4:	200006fc 	.word	0x200006fc

08001ce8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC3_IRQHandler>

08001cea <arm_abs_f32>:

void arm_abs_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b08b      	sub	sp, #44	; 0x2c
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;                  /* temporary variables */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8001cfc:	e03b      	b.n	8001d76 <arm_abs_f32+0x8c>
  {
    /* C = |A| */
    /* Calculate absolute and then store the results in the destination buffer. */
    /* read sample from source */
    in1 = *pSrc;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	623b      	str	r3, [r7, #32]
    in2 = *(pSrc + 1);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	61fb      	str	r3, [r7, #28]
    in3 = *(pSrc + 2);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	61bb      	str	r3, [r7, #24]

    /* find absolute value */
    in1 = fabsf(in1);
 8001d10:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d14:	eef0 7ae7 	vabs.f32	s15, s15
 8001d18:	edc7 7a08 	vstr	s15, [r7, #32]

    /* read sample from source */
    in4 = *(pSrc + 3);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	617b      	str	r3, [r7, #20]

    /* find absolute value */
    in2 = fabsf(in2);
 8001d22:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d26:	eef0 7ae7 	vabs.f32	s15, s15
 8001d2a:	edc7 7a07 	vstr	s15, [r7, #28]

    /* read sample from source */
    *pDst = in1;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	6a3a      	ldr	r2, [r7, #32]
 8001d32:	601a      	str	r2, [r3, #0]

    /* find absolute value */
    in3 = fabsf(in3);
 8001d34:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d38:	eef0 7ae7 	vabs.f32	s15, s15
 8001d3c:	edc7 7a06 	vstr	s15, [r7, #24]

    /* find absolute value */
    in4 = fabsf(in4);
 8001d40:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d44:	eef0 7ae7 	vabs.f32	s15, s15
 8001d48:	edc7 7a05 	vstr	s15, [r7, #20]

    /* store result to destination */
    *(pDst + 1) = in2;
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	69fa      	ldr	r2, [r7, #28]
 8001d52:	601a      	str	r2, [r3, #0]

    /* store result to destination */
    *(pDst + 2) = in3;
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	3308      	adds	r3, #8
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	601a      	str	r2, [r3, #0]

    /* store result to destination */
    *(pDst + 3) = in4;
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	330c      	adds	r3, #12
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	601a      	str	r2, [r3, #0]


    /* Update source pointer to process next sampels */
    pSrc += 4U;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3310      	adds	r3, #16
 8001d68:	60fb      	str	r3, [r7, #12]

    /* Update destination pointer to process next sampels */
    pDst += 4U;
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	3310      	adds	r3, #16
 8001d6e:	60bb      	str	r3, [r7, #8]

    /* Decrement the loop counter */
    blkCnt--;
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	3b01      	subs	r3, #1
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1c0      	bne.n	8001cfe <arm_abs_f32+0x14>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /*   #if defined (ARM_MATH_DSP)   */

  while (blkCnt > 0U)
 8001d84:	e00e      	b.n	8001da4 <arm_abs_f32+0xba>
  {
    /* C = |A| */
    /* Calculate absolute and then store the results in the destination buffer. */
    *pDst++ = fabsf(*pSrc++);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1d1a      	adds	r2, r3, #4
 8001d8a:	60fa      	str	r2, [r7, #12]
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	1d1a      	adds	r2, r3, #4
 8001d94:	60ba      	str	r2, [r7, #8]
 8001d96:	eef0 7ae7 	vabs.f32	s15, s15
 8001d9a:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the loop counter */
    blkCnt--;
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	3b01      	subs	r3, #1
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1ed      	bne.n	8001d86 <arm_abs_f32+0x9c>
  }
}
 8001daa:	bf00      	nop
 8001dac:	372c      	adds	r7, #44	; 0x2c
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <arm_mult_f32>:
void arm_mult_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b093      	sub	sp, #76	; 0x4c
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	603b      	str	r3, [r7, #0]
  float32_t inA1, inA2, inA3, inA4;              /* temporary input variables */
  float32_t inB1, inB2, inB3, inB4;              /* temporary input variables */
  float32_t out1, out2, out3, out4;              /* temporary output variables */

  /* loop Unrolling */
  blkCnt = blockSize >> 2U;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	089b      	lsrs	r3, r3, #2
 8001dc8:	647b      	str	r3, [r7, #68]	; 0x44

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8001dca:	e052      	b.n	8001e72 <arm_mult_f32+0xbc>
  {
    /* C = A * B */
    /* Multiply the inputs and store the results in output buffer */
    /* read sample from sourceA */
    inA1 = *pSrcA;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	643b      	str	r3, [r7, #64]	; 0x40
    /* read sample from sourceB */
    inB1 = *pSrcB;
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* read sample from sourceA */
    inA2 = *(pSrcA + 1);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	63bb      	str	r3, [r7, #56]	; 0x38
    /* read sample from sourceB */
    inB2 = *(pSrcB + 1);
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	637b      	str	r3, [r7, #52]	; 0x34

    /* out = sourceA * sourceB */
    out1 = inA1 * inB1;
 8001de4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001de8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    /* read sample from sourceA */
    inA3 = *(pSrcA + 2);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* read sample from sourceB */
    inB3 = *(pSrcB + 2);
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* out = sourceA * sourceB */
    out2 = inA2 * inB2;
 8001e00:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001e04:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* read sample from sourceA */
    inA4 = *(pSrcA + 3);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	623b      	str	r3, [r7, #32]

    /* store result to destination buffer */
    *pDst = out1;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e1a:	601a      	str	r2, [r3, #0]

    /* read sample from sourceB */
    inB4 = *(pSrcB + 3);
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	61fb      	str	r3, [r7, #28]

    /* out = sourceA * sourceB */
    out3 = inA3 * inB3;
 8001e22:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001e26:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2e:	edc7 7a06 	vstr	s15, [r7, #24]

    /* store result to destination buffer */
    *(pDst + 1) = out2;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3304      	adds	r3, #4
 8001e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e38:	601a      	str	r2, [r3, #0]

    /* out = sourceA * sourceB */
    out4 = inA4 * inB4;
 8001e3a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e46:	edc7 7a05 	vstr	s15, [r7, #20]
    /* store result to destination buffer */
    *(pDst + 2) = out3;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3308      	adds	r3, #8
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	601a      	str	r2, [r3, #0]
    /* store result to destination buffer */
    *(pDst + 3) = out4;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	330c      	adds	r3, #12
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	601a      	str	r2, [r3, #0]


    /* update pointers to process next samples */
    pSrcA += 4U;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3310      	adds	r3, #16
 8001e5e:	60fb      	str	r3, [r7, #12]
    pSrcB += 4U;
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	3310      	adds	r3, #16
 8001e64:	60bb      	str	r3, [r7, #8]
    pDst += 4U;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3310      	adds	r3, #16
 8001e6a:	607b      	str	r3, [r7, #4]

    /* Decrement the blockSize loop counter */
    blkCnt--;
 8001e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 8001e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1a9      	bne.n	8001dcc <arm_mult_f32+0x16>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	647b      	str	r3, [r7, #68]	; 0x44
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8001e80:	e013      	b.n	8001eaa <arm_mult_f32+0xf4>
  {
    /* C = A * B */
    /* Multiply the inputs and store the results in output buffer */
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1d1a      	adds	r2, r3, #4
 8001e86:	60fa      	str	r2, [r7, #12]
 8001e88:	ed93 7a00 	vldr	s14, [r3]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	1d1a      	adds	r2, r3, #4
 8001e90:	60ba      	str	r2, [r7, #8]
 8001e92:	edd3 7a00 	vldr	s15, [r3]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	1d1a      	adds	r2, r3, #4
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea0:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the blockSize loop counter */
    blkCnt--;
 8001ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 8001eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1e8      	bne.n	8001e82 <arm_mult_f32+0xcc>
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	374c      	adds	r7, #76	; 0x4c
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b092      	sub	sp, #72	; 0x48
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2U;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	089b      	lsrs	r3, r3, #2
 8001ecc:	647b      	str	r3, [r7, #68]	; 0x44

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8001ece:	e0ce      	b.n	800206e <arm_cmplx_mag_f32+0x1b2>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	1d1a      	adds	r2, r3, #4
 8001ed4:	60fa      	str	r2, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1d1a      	adds	r2, r3, #4
 8001ede:	60fa      	str	r2, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001ee4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001ee8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001eec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef0:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001ef4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ef8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	1d1a      	adds	r2, r3, #4
 8001f04:	60ba      	str	r2, [r7, #8]
 8001f06:	edc7 7a08 	vstr	s15, [r7, #32]
 8001f0a:	61fb      	str	r3, [r7, #28]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001f0c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f18:	db09      	blt.n	8001f2e <arm_cmplx_mag_f32+0x72>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001f1a:	ed97 0a08 	vldr	s0, [r7, #32]
 8001f1e:	f00b f8bf 	bl	800d0a0 <sqrtf>
 8001f22:	eef0 7a40 	vmov.f32	s15, s0
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	edc3 7a00 	vstr	s15, [r3]
 8001f2c:	e003      	b.n	8001f36 <arm_cmplx_mag_f32+0x7a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]

    realIn = *pSrc++;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1d1a      	adds	r2, r3, #4
 8001f3a:	60fa      	str	r2, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1d1a      	adds	r2, r3, #4
 8001f44:	60fa      	str	r2, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001f4a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001f4e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001f52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f56:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001f5a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001f5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	1d1a      	adds	r2, r3, #4
 8001f6a:	60ba      	str	r2, [r7, #8]
 8001f6c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
    if (in >= 0.0f)
 8001f72:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7e:	db09      	blt.n	8001f94 <arm_cmplx_mag_f32+0xd8>
      *pOut = __builtin_sqrtf(in);
 8001f80:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001f84:	f00b f88c 	bl	800d0a0 <sqrtf>
 8001f88:	eef0 7a40 	vmov.f32	s15, s0
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	edc3 7a00 	vstr	s15, [r3]
 8001f92:	e003      	b.n	8001f9c <arm_cmplx_mag_f32+0xe0>
      *pOut = 0.0f;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]

    realIn = *pSrc++;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1d1a      	adds	r2, r3, #4
 8001fa0:	60fa      	str	r2, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1d1a      	adds	r2, r3, #4
 8001faa:	60fa      	str	r2, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001fb0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001fb4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001fb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fbc:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001fc0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001fc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	1d1a      	adds	r2, r3, #4
 8001fd0:	60ba      	str	r2, [r7, #8]
 8001fd2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (in >= 0.0f)
 8001fd8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001fdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe4:	db09      	blt.n	8001ffa <arm_cmplx_mag_f32+0x13e>
      *pOut = __builtin_sqrtf(in);
 8001fe6:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8001fea:	f00b f859 	bl	800d0a0 <sqrtf>
 8001fee:	eef0 7a40 	vmov.f32	s15, s0
 8001ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff4:	edc3 7a00 	vstr	s15, [r3]
 8001ff8:	e003      	b.n	8002002 <arm_cmplx_mag_f32+0x146>
      *pOut = 0.0f;
 8001ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	601a      	str	r2, [r3, #0]

    realIn = *pSrc++;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1d1a      	adds	r2, r3, #4
 8002006:	60fa      	str	r2, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1d1a      	adds	r2, r3, #4
 8002010:	60fa      	str	r2, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8002016:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800201a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800201e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002022:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002026:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800202a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800202e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	1d1a      	adds	r2, r3, #4
 8002036:	60ba      	str	r2, [r7, #8]
 8002038:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 800203c:	637b      	str	r3, [r7, #52]	; 0x34
    if (in >= 0.0f)
 800203e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002042:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204a:	db09      	blt.n	8002060 <arm_cmplx_mag_f32+0x1a4>
      *pOut = __builtin_sqrtf(in);
 800204c:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8002050:	f00b f826 	bl	800d0a0 <sqrtf>
 8002054:	eef0 7a40 	vmov.f32	s15, s0
 8002058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205a:	edc3 7a00 	vstr	s15, [r3]
 800205e:	e003      	b.n	8002068 <arm_cmplx_mag_f32+0x1ac>
      *pOut = 0.0f;
 8002060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	601a      	str	r2, [r3, #0]


    /* Decrement the loop counter */
    blkCnt--;
 8002068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800206a:	3b01      	subs	r3, #1
 800206c:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 800206e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002070:	2b00      	cmp	r3, #0
 8002072:	f47f af2d 	bne.w	8001ed0 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4U;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	647b      	str	r3, [r7, #68]	; 0x44

  while (blkCnt > 0U)
 800207e:	e035      	b.n	80020ec <arm_cmplx_mag_f32+0x230>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1d1a      	adds	r2, r3, #4
 8002084:	60fa      	str	r2, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1d1a      	adds	r2, r3, #4
 800208e:	60fa      	str	r2, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8002094:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002098:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800209c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020a0:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80020a4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80020a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	1d1a      	adds	r2, r3, #4
 80020b4:	60ba      	str	r2, [r7, #8]
 80020b6:	edc7 7a06 	vstr	s15, [r7, #24]
 80020ba:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 80020bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80020c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c8:	db09      	blt.n	80020de <arm_cmplx_mag_f32+0x222>
      *pOut = __builtin_sqrtf(in);
 80020ca:	ed97 0a06 	vldr	s0, [r7, #24]
 80020ce:	f00a ffe7 	bl	800d0a0 <sqrtf>
 80020d2:	eef0 7a40 	vmov.f32	s15, s0
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	edc3 7a00 	vstr	s15, [r3]
 80020dc:	e003      	b.n	80020e6 <arm_cmplx_mag_f32+0x22a>
      *pOut = 0.0f;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 80020e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020e8:	3b01      	subs	r3, #1
 80020ea:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 80020ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1c6      	bne.n	8002080 <arm_cmplx_mag_f32+0x1c4>
    numSamples--;
  }

#endif /* #if defined (ARM_MATH_DSP) */

}
 80020f2:	bf00      	nop
 80020f4:	3748      	adds	r7, #72	; 0x48
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b08b      	sub	sp, #44	; 0x2c
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	603b      	str	r3, [r7, #0]

  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1d1a      	adds	r2, r3, #4
 8002114:	60fa      	str	r2, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1U) >> 2U;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	3b01      	subs	r3, #1
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	623b      	str	r3, [r7, #32]

  while (blkCnt > 0U)
 8002122:	e051      	b.n	80021c8 <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1d1a      	adds	r2, r3, #4
 8002128:	60fa      	str	r2, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	617b      	str	r3, [r7, #20]
    maxVal2 = *pSrc++;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1d1a      	adds	r2, r3, #4
 8002132:	60fa      	str	r2, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal1)
 8002138:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800213c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002140:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002148:	d504      	bpl.n	8002154 <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1U;
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	3301      	adds	r3, #1
 8002152:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if (out < maxVal2)
 8002154:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002158:	edd7 7a04 	vldr	s15, [r7, #16]
 800215c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002164:	d504      	bpl.n	8002170 <arm_max_f32+0x76>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2U;
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	3302      	adds	r3, #2
 800216e:	61fb      	str	r3, [r7, #28]
    }

    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1d1a      	adds	r2, r3, #4
 8002174:	60fa      	str	r2, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	617b      	str	r3, [r7, #20]
    maxVal2 = *pSrc++;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1d1a      	adds	r2, r3, #4
 800217e:	60fa      	str	r2, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal1)
 8002184:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002188:	edd7 7a05 	vldr	s15, [r7, #20]
 800218c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002194:	d504      	bpl.n	80021a0 <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3U;
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	3303      	adds	r3, #3
 800219e:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if (out < maxVal2)
 80021a0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80021a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80021a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b0:	d504      	bpl.n	80021bc <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4U;
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	3304      	adds	r3, #4
 80021ba:	61fb      	str	r3, [r7, #28]
    }

    count += 4U;
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	3304      	adds	r3, #4
 80021c0:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1aa      	bne.n	8002124 <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1U) is not multiple of 4 */
  blkCnt = (blockSize - 1U) % 4U;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 80021d8:	e016      	b.n	8002208 <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1d1a      	adds	r2, r3, #4
 80021de:	60fa      	str	r2, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if (out < maxVal1)
 80021e4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80021e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80021ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f4:	d505      	bpl.n	8002202 <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	61fb      	str	r3, [r7, #28]
    }

    /* Decrement the loop counter */
    blkCnt--;
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	3b01      	subs	r3, #1
 8002206:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1e5      	bne.n	80021da <arm_max_f32+0xe0>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002212:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	601a      	str	r2, [r3, #0]
}
 800221a:	bf00      	nop
 800221c:	372c      	adds	r7, #44	; 0x2c
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <arm_mean_f32>:

void arm_mean_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8002226:	b480      	push	{r7}
 8002228:	b08b      	sub	sp, #44	; 0x2c
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t in1, in2, in3, in4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	623b      	str	r3, [r7, #32]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 800223e:	e036      	b.n	80022ae <arm_mean_f32+0x88>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    in1 = *pSrc++;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1d1a      	adds	r2, r3, #4
 8002244:	60fa      	str	r2, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	61fb      	str	r3, [r7, #28]
    in2 = *pSrc++;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1d1a      	adds	r2, r3, #4
 800224e:	60fa      	str	r2, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	61bb      	str	r3, [r7, #24]
    in3 = *pSrc++;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1d1a      	adds	r2, r3, #4
 8002258:	60fa      	str	r2, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	617b      	str	r3, [r7, #20]
    in4 = *pSrc++;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1d1a      	adds	r2, r3, #4
 8002262:	60fa      	str	r2, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	613b      	str	r3, [r7, #16]

    sum += in1;
 8002268:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800226c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002274:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in2;
 8002278:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800227c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002284:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in3;
 8002288:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800228c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002294:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in4;
 8002298:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800229c:	edd7 7a04 	vldr	s15, [r7, #16]
 80022a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1c5      	bne.n	8002240 <arm_mean_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	623b      	str	r3, [r7, #32]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 80022bc:	e00d      	b.n	80022da <arm_mean_f32+0xb4>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1d1a      	adds	r2, r3, #4
 80022c2:	60fa      	str	r2, [r7, #12]
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80022cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1ee      	bne.n	80022be <arm_mean_f32+0x98>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store the result to the destination */
  *pResult = sum / (float32_t) blockSize;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	ee07 3a90 	vmov	s15, r3
 80022e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022ea:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80022ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	edc3 7a00 	vstr	s15, [r3]
}
 80022f8:	bf00      	nop
 80022fa:	372c      	adds	r7, #44	; 0x2c
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <arm_power_f32>:

void arm_power_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* accumulator */
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]

#if defined (ARM_MATH_DSP)
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	61bb      	str	r3, [r7, #24]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 800231c:	e046      	b.n	80023ac <arm_power_f32+0xa8>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute Power and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1d1a      	adds	r2, r3, #4
 8002322:	60fa      	str	r2, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8002328:	ed97 7a05 	vldr	s14, [r7, #20]
 800232c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002334:	ed97 7a07 	vldr	s14, [r7, #28]
 8002338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800233c:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1d1a      	adds	r2, r3, #4
 8002344:	60fa      	str	r2, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	617b      	str	r3, [r7, #20]
    sum += in * in;
 800234a:	ed97 7a05 	vldr	s14, [r7, #20]
 800234e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002356:	ed97 7a07 	vldr	s14, [r7, #28]
 800235a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800235e:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1d1a      	adds	r2, r3, #4
 8002366:	60fa      	str	r2, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	617b      	str	r3, [r7, #20]
    sum += in * in;
 800236c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002370:	edd7 7a05 	vldr	s15, [r7, #20]
 8002374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002378:	ed97 7a07 	vldr	s14, [r7, #28]
 800237c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002380:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1d1a      	adds	r2, r3, #4
 8002388:	60fa      	str	r2, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	617b      	str	r3, [r7, #20]
    sum += in * in;
 800238e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002392:	edd7 7a05 	vldr	s15, [r7, #20]
 8002396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239a:	ed97 7a07 	vldr	s14, [r7, #28]
 800239e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a2:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1b5      	bne.n	800231e <arm_power_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	61bb      	str	r3, [r7, #24]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 80023ba:	e013      	b.n	80023e4 <arm_power_f32+0xe0>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* compute power and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1d1a      	adds	r2, r3, #4
 80023c0:	60fa      	str	r2, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	617b      	str	r3, [r7, #20]
    sum += in * in;
 80023c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80023ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80023ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80023d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023da:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1e8      	bne.n	80023bc <arm_power_f32+0xb8>
  }

  /* Store the result to the destination */
  *pResult = sum;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69fa      	ldr	r2, [r7, #28]
 80023ee:	601a      	str	r2, [r3, #0]
}
 80023f0:	bf00      	nop
 80023f2:	3724      	adds	r7, #36	; 0x24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <arm_std_f32>:

void arm_std_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08e      	sub	sp, #56	; 0x38
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	637b      	str	r3, [r7, #52]	; 0x34
  float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	633b      	str	r3, [r7, #48]	; 0x30
#else
  float32_t squareOfSum;                         /* Square of Sum */
  float32_t var;                                 /* Temporary varaince storage */
#endif

  if (blockSize == 1U)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d104      	bne.n	8002424 <arm_std_f32+0x28>
  {
    *pResult = 0;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
    return;
 8002422:	e0e4      	b.n	80025ee <arm_std_f32+0x1f2>

#if defined (ARM_MATH_DSP)
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 800242a:	e066      	b.n	80024fa <arm_std_f32+0xfe>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
    /* Compute Sum of squares of the input samples
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1d1a      	adds	r2, r3, #4
 8002430:	60fa      	str	r2, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	61fb      	str	r3, [r7, #28]
    sum += in;
 8002436:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800243a:	edd7 7a07 	vldr	s15, [r7, #28]
 800243e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002442:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    sumOfSquares += in * in;
 8002446:	ed97 7a07 	vldr	s14, [r7, #28]
 800244a:	edd7 7a07 	vldr	s15, [r7, #28]
 800244e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002452:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    in = *pSrc++;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1d1a      	adds	r2, r3, #4
 8002462:	60fa      	str	r2, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	61fb      	str	r3, [r7, #28]
    sum += in;
 8002468:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800246c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002474:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    sumOfSquares += in * in;
 8002478:	ed97 7a07 	vldr	s14, [r7, #28]
 800247c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002484:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    in = *pSrc++;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1d1a      	adds	r2, r3, #4
 8002494:	60fa      	str	r2, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	61fb      	str	r3, [r7, #28]
    sum += in;
 800249a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800249e:	edd7 7a07 	vldr	s15, [r7, #28]
 80024a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    sumOfSquares += in * in;
 80024aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80024ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80024b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80024ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024be:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    in = *pSrc++;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1d1a      	adds	r2, r3, #4
 80024c6:	60fa      	str	r2, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	61fb      	str	r3, [r7, #28]
    sum += in;
 80024cc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80024d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80024d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    sumOfSquares += in * in;
 80024dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80024e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80024e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80024ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    /* Decrement the loop counter */
    blkCnt--;
 80024f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f6:	3b01      	subs	r3, #1
 80024f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (blkCnt > 0U)
 80024fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d195      	bne.n	800242c <arm_std_f32+0x30>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c

  while (blkCnt > 0U)
 8002508:	e01b      	b.n	8002542 <arm_std_f32+0x146>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
    /* Compute Sum of squares of the input samples
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1d1a      	adds	r2, r3, #4
 800250e:	60fa      	str	r2, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	61fb      	str	r3, [r7, #28]
    sum += in;
 8002514:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002518:	edd7 7a07 	vldr	s15, [r7, #28]
 800251c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002520:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    sumOfSquares += in * in;
 8002524:	ed97 7a07 	vldr	s14, [r7, #28]
 8002528:	edd7 7a07 	vldr	s15, [r7, #28]
 800252c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002530:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002538:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    /* Decrement the loop counter */
    blkCnt--;
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	3b01      	subs	r3, #1
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (blkCnt > 0U)
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1e0      	bne.n	800250a <arm_std_f32+0x10e>
  }

  /* Compute Mean of squares of the input samples
   * and then store the result in a temporary variable, meanOfSquares. */
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002552:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002556:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800255a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800255e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002562:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  /* Compute mean of all input values */
  mean = sum / (float32_t) blockSize;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	ee07 3a90 	vmov	s15, r3
 800256c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002570:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002578:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  /* Compute square of mean */
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 800257c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002580:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002584:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	ee07 3a90 	vmov	s15, r3
 800258e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
                                  ((float32_t) blockSize - 1.0f));
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	ee07 3a90 	vmov	s15, r3
 8002598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800259c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025a0:	ee77 6ae6 	vsub.f32	s13, s15, s13
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 80025a4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80025a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ac:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32((meanOfSquares - squareOfMean), pResult);
 80025b0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80025b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80025b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025bc:	edc7 7a06 	vstr	s15, [r7, #24]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 80025c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80025c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d0:	db09      	blt.n	80025e6 <arm_std_f32+0x1ea>
      *pOut = __builtin_sqrtf(in);
 80025d2:	ed97 0a06 	vldr	s0, [r7, #24]
 80025d6:	f00a fd63 	bl	800d0a0 <sqrtf>
 80025da:	eef0 7a40 	vmov.f32	s15, s0
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	edc3 7a00 	vstr	s15, [r3]
 80025e4:	e003      	b.n	80025ee <arm_std_f32+0x1f2>
      *pOut = 0.0f;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]

  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32(var, pResult);

#endif /* #if defined (ARM_MATH_DSP) */
}
 80025ee:	3738      	adds	r7, #56	; 0x38
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <arm_var_f32>:

void arm_var_f32(
                 float32_t * pSrc,
                 uint32_t blockSize,
                 float32_t * pResult)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b08f      	sub	sp, #60	; 0x3c
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
    float32_t fMean, fValue;
    uint32_t blkCnt;            /* loop counter */
    float32_t * pInput = pSrc;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
    float32_t sum = 0.0f;
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
    float32_t fSum = 0.0f;
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
    #if defined(ARM_MATH_DSP)
    float32_t in1, in2, in3, in4;
    #endif

    if (blockSize <= 1U)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d804      	bhi.n	8002620 <arm_var_f32+0x2c>
    {
        *pResult = 0;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
        return;
 800261e:	e0f8      	b.n	8002812 <arm_var_f32+0x21e>

    #if defined(ARM_MATH_DSP)
        /* Run the below code for Cortex-M4 and Cortex-M7 */

        /*loop Unrolling */
        blkCnt = blockSize >> 2U;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	637b      	str	r3, [r7, #52]	; 0x34

        /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
        ** a second loop below computes the remaining 1 to 3 samples. */
        while (blkCnt > 0U)
 8002626:	e036      	b.n	8002696 <arm_var_f32+0xa2>
        {
            /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
            in1 = *pInput++;
 8002628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262a:	1d1a      	adds	r2, r3, #4
 800262c:	633a      	str	r2, [r7, #48]	; 0x30
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	61fb      	str	r3, [r7, #28]
            in2 = *pInput++;
 8002632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002634:	1d1a      	adds	r2, r3, #4
 8002636:	633a      	str	r2, [r7, #48]	; 0x30
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	61bb      	str	r3, [r7, #24]
            in3 = *pInput++;
 800263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263e:	1d1a      	adds	r2, r3, #4
 8002640:	633a      	str	r2, [r7, #48]	; 0x30
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	617b      	str	r3, [r7, #20]
            in4 = *pInput++;
 8002646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002648:	1d1a      	adds	r2, r3, #4
 800264a:	633a      	str	r2, [r7, #48]	; 0x30
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	613b      	str	r3, [r7, #16]

            sum += in1;
 8002650:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002654:	edd7 7a07 	vldr	s15, [r7, #28]
 8002658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800265c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            sum += in2;
 8002660:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002664:	edd7 7a06 	vldr	s15, [r7, #24]
 8002668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            sum += in3;
 8002670:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002674:	edd7 7a05 	vldr	s15, [r7, #20]
 8002678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            sum += in4;
 8002680:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002684:	edd7 7a04 	vldr	s15, [r7, #16]
 8002688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

            /* Decrement the loop counter */
            blkCnt--;
 8002690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002692:	3b01      	subs	r3, #1
 8002694:	637b      	str	r3, [r7, #52]	; 0x34
        while (blkCnt > 0U)
 8002696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1c5      	bne.n	8002628 <arm_var_f32+0x34>
        }

        /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
        ** No loop unrolling is used. */
        blkCnt = blockSize % 0x4U;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	637b      	str	r3, [r7, #52]	; 0x34
        /* Loop over blockSize number of values */
        blkCnt = blockSize;

    #endif

    while (blkCnt > 0U)
 80026a4:	e00d      	b.n	80026c2 <arm_var_f32+0xce>
    {
        /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
        sum += *pInput++;
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	1d1a      	adds	r2, r3, #4
 80026aa:	633a      	str	r2, [r7, #48]	; 0x30
 80026ac:	edd3 7a00 	vldr	s15, [r3]
 80026b0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80026b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        /* Decrement the loop counter */
        blkCnt--;
 80026bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026be:	3b01      	subs	r3, #1
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
    while (blkCnt > 0U)
 80026c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1ee      	bne.n	80026a6 <arm_var_f32+0xb2>
    }

    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
    fMean = sum / (float32_t) blockSize;
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	ee07 3a90 	vmov	s15, r3
 80026ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026d2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80026d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026da:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    pInput = pSrc;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	633b      	str	r3, [r7, #48]	; 0x30

    #if defined(ARM_MATH_DSP)

        /*loop Unrolling */
        blkCnt = blockSize >> 2U;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	637b      	str	r3, [r7, #52]	; 0x34

        /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
        ** a second loop below computes the remaining 1 to 3 samples. */
        while (blkCnt > 0U)
 80026e8:	e05e      	b.n	80027a8 <arm_var_f32+0x1b4>
        {
            fValue = *pInput++ - fMean;
 80026ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ec:	1d1a      	adds	r2, r3, #4
 80026ee:	633a      	str	r2, [r7, #48]	; 0x30
 80026f0:	ed93 7a00 	vldr	s14, [r3]
 80026f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80026f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026fc:	edc7 7a08 	vstr	s15, [r7, #32]
            fSum += fValue * fValue;
 8002700:	ed97 7a08 	vldr	s14, [r7, #32]
 8002704:	edd7 7a08 	vldr	s15, [r7, #32]
 8002708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002714:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            fValue = *pInput++ - fMean;
 8002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271a:	1d1a      	adds	r2, r3, #4
 800271c:	633a      	str	r2, [r7, #48]	; 0x30
 800271e:	ed93 7a00 	vldr	s14, [r3]
 8002722:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272a:	edc7 7a08 	vstr	s15, [r7, #32]
            fSum += fValue * fValue;
 800272e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002732:	edd7 7a08 	vldr	s15, [r7, #32]
 8002736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800273e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002742:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            fValue = *pInput++ - fMean;
 8002746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002748:	1d1a      	adds	r2, r3, #4
 800274a:	633a      	str	r2, [r7, #48]	; 0x30
 800274c:	ed93 7a00 	vldr	s14, [r3]
 8002750:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002758:	edc7 7a08 	vstr	s15, [r7, #32]
            fSum += fValue * fValue;
 800275c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002760:	edd7 7a08 	vldr	s15, [r7, #32]
 8002764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002768:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800276c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002770:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            fValue = *pInput++ - fMean;
 8002774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002776:	1d1a      	adds	r2, r3, #4
 8002778:	633a      	str	r2, [r7, #48]	; 0x30
 800277a:	ed93 7a00 	vldr	s14, [r3]
 800277e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002786:	edc7 7a08 	vstr	s15, [r7, #32]
            fSum += fValue * fValue;
 800278a:	ed97 7a08 	vldr	s14, [r7, #32]
 800278e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002796:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800279a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800279e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

            /* Decrement the loop counter */
            blkCnt--;
 80027a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a4:	3b01      	subs	r3, #1
 80027a6:	637b      	str	r3, [r7, #52]	; 0x34
        while (blkCnt > 0U)
 80027a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d19d      	bne.n	80026ea <arm_var_f32+0xf6>
        }

        blkCnt = blockSize % 0x4U;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	637b      	str	r3, [r7, #52]	; 0x34

        /* Loop over blockSize number of values */
        blkCnt = blockSize;
    #endif

    while (blkCnt > 0U)
 80027b6:	e019      	b.n	80027ec <arm_var_f32+0x1f8>
    {
        fValue = *pInput++ - fMean;
 80027b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ba:	1d1a      	adds	r2, r3, #4
 80027bc:	633a      	str	r2, [r7, #48]	; 0x30
 80027be:	ed93 7a00 	vldr	s14, [r3]
 80027c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ca:	edc7 7a08 	vstr	s15, [r7, #32]
        fSum += fValue * fValue;
 80027ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80027d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80027d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027da:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80027de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

        /* Decrement the loop counter */
        blkCnt--;
 80027e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e8:	3b01      	subs	r3, #1
 80027ea:	637b      	str	r3, [r7, #52]	; 0x34
    while (blkCnt > 0U)
 80027ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1e2      	bne.n	80027b8 <arm_var_f32+0x1c4>
    }

    /* Variance */
    *pResult = fSum / (float32_t)(blockSize - 1.0f);
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	ee07 3a90 	vmov	s15, r3
 80027f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002800:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002804:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	edc3 7a00 	vstr	s15, [r3]
}
 8002812:	373c      	adds	r7, #60	; 0x3c
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <arm_cfft_radix8by2_f32>:
* \endcode
*
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b0a0      	sub	sp, #128	; 0x80
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 800282c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	4413      	add	r3, r2
 8002834:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8002840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002842:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8002844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002846:	085b      	lsrs	r3, r3, #1
 8002848:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 800284a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	4413      	add	r3, r2
 8002852:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 8002854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800285a:	4413      	add	r3, r2
 800285c:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- )
 800285e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002860:	089b      	lsrs	r3, r3, #2
 8002862:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002864:	e1b6      	b.n	8002bd4 <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 800287e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 8002884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 800288a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 8002890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 8002896:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 800289c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 80028a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 80028a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 80028ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 80028b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 80028ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 80028c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 80028c6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80028ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	1d1a      	adds	r2, r3, #4
 80028d2:	603a      	str	r2, [r7, #0]
 80028d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d8:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 80028dc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80028e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	1d1a      	adds	r2, r3, #4
 80028e8:	603a      	str	r2, [r7, #0]
 80028ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ee:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 80028f2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80028f6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	1d1a      	adds	r2, r3, #4
 80028fe:	603a      	str	r2, [r7, #0]
 8002900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002904:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 8002908:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800290c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	1d1a      	adds	r2, r3, #4
 8002914:	603a      	str	r2, [r7, #0]
 8002916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800291a:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 800291e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002922:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002926:	ee77 7a67 	vsub.f32	s15, s14, s15
 800292a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 800292e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002932:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 800293e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002942:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800294a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 800294e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002952:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800295a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 800295e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002962:	edd7 7a02 	vldr	s15, [r7, #8]
 8002966:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002968:	1d1a      	adds	r2, r3, #4
 800296a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800296c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002970:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 8002974:	ed97 7a07 	vldr	s14, [r7, #28]
 8002978:	edd7 7a03 	vldr	s15, [r7, #12]
 800297c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800297e:	1d1a      	adds	r2, r3, #4
 8002980:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002986:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 800298a:	ed97 7a08 	vldr	s14, [r7, #32]
 800298e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002992:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002994:	1d1a      	adds	r2, r3, #4
 8002996:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800299c:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 80029a0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80029a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80029a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029aa:	1d1a      	adds	r2, r3, #4
 80029ac:	67fa      	str	r2, [r7, #124]	; 0x7c
 80029ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b2:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 80029b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80029ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80029be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c2:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 80029c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80029ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80029ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d2:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 80029d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80029da:	edd7 7a08 	vldr	s15, [r7, #32]
 80029de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029e2:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 80029e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80029ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80029ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f2:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 80029f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029f8:	1d1a      	adds	r2, r3, #4
 80029fa:	673a      	str	r2, [r7, #112]	; 0x70
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8002a00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a02:	1d1a      	adds	r2, r3, #4
 8002a04:	673a      	str	r2, [r7, #112]	; 0x70
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 8002a0a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a0e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a16:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 8002a1a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002a1e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a26:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 8002a2a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002a2e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a36:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 8002a3a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a3e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a46:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 8002a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a4c:	1d1a      	adds	r2, r3, #4
 8002a4e:	677a      	str	r2, [r7, #116]	; 0x74
 8002a50:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002a54:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a5c:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8002a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a62:	1d1a      	adds	r2, r3, #4
 8002a64:	677a      	str	r2, [r7, #116]	; 0x74
 8002a66:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002a6a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a72:	edc3 7a00 	vstr	s15, [r3]

        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 8002a76:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a7a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a82:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 8002a86:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a8a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a92:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 8002a96:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a9a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 8002aa6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002aaa:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 8002ab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ab8:	1d1a      	adds	r2, r3, #4
 8002aba:	67ba      	str	r2, [r7, #120]	; 0x78
 8002abc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002ac0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ac8:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8002acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ace:	1d1a      	adds	r2, r3, #4
 8002ad0:	67ba      	str	r2, [r7, #120]	; 0x78
 8002ad2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002ad6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ade:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 8002ae2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ae4:	1d1a      	adds	r2, r3, #4
 8002ae6:	673a      	str	r2, [r7, #112]	; 0x70
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8002aec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aee:	1d1a      	adds	r2, r3, #4
 8002af0:	673a      	str	r2, [r7, #112]	; 0x70
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	65bb      	str	r3, [r7, #88]	; 0x58

        m0 = t2[2] * twR;
 8002af6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002afa:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b02:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 8002b06:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002b0a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b12:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 8002b16:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002b1a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b22:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 8002b26:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002b2a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b32:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *p2++ = m0 + m1;
 8002b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b38:	1d1a      	adds	r2, r3, #4
 8002b3a:	677a      	str	r2, [r7, #116]	; 0x74
 8002b3c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002b40:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b48:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8002b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b4e:	1d1a      	adds	r2, r3, #4
 8002b50:	677a      	str	r2, [r7, #116]	; 0x74
 8002b52:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002b56:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b5e:	edc3 7a00 	vstr	s15, [r3]

        m0 = t4[2] * twI;
 8002b62:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b66:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b6e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 8002b72:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b76:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b7e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 8002b82:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b86:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b8e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 8002b92:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b96:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b9e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 8002ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ba4:	1d1a      	adds	r2, r3, #4
 8002ba6:	67ba      	str	r2, [r7, #120]	; 0x78
 8002ba8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002bac:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb4:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8002bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bba:	1d1a      	adds	r2, r3, #4
 8002bbc:	67ba      	str	r2, [r7, #120]	; 0x78
 8002bbe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002bc2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bca:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- )
 8002bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f47f ae45 	bne.w	8002866 <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8002bdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bde:	b299      	uxth	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	2302      	movs	r3, #2
 8002be6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002be8:	f000 feda 	bl	80039a0 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8002bec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bee:	b299      	uxth	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002bf8:	f000 fed2 	bl	80039a0 <arm_radix8_butterfly_f32>
}
 8002bfc:	bf00      	nop
 8002bfe:	3780      	adds	r7, #128	; 0x80
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b0ac      	sub	sp, #176	; 0xb0
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	085b      	lsrs	r3, r3, #1
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8002c1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	4413      	add	r3, r2
 8002c24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8002c28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002c32:	4413      	add	r3, r2
 8002c34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8002c38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002c42:	4413      	add	r3, r2
 8002c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8002c4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c50:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8002c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c56:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8002c58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c5c:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 8002c5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c62:	3b04      	subs	r3, #4
 8002c64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8002c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c6c:	3b04      	subs	r3, #4
 8002c6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8002c72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c76:	3b04      	subs	r3, #4
 8002c78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8002c7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002c86:	4413      	add	r3, r2
 8002c88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ca0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8002ca4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ca8:	085b      	lsrs	r3, r3, #1
 8002caa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8002cb2:	2304      	movs	r3, #4
 8002cb4:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8002cb6:	2306      	movs	r3, #6
 8002cb8:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	ed93 7a00 	vldr	s14, [r3]
 8002cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cc4:	edd3 7a00 	vldr	s15, [r3]
 8002cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ccc:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	ed93 7a00 	vldr	s14, [r3]
 8002cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cda:	edd3 7a00 	vldr	s15, [r3]
 8002cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ce2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	ed93 7a00 	vldr	s14, [r3]
 8002cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	edd3 7a00 	vldr	s15, [r3]
 8002cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cfc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	3304      	adds	r3, #4
 8002d04:	ed93 7a00 	vldr	s14, [r3]
 8002d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	edd3 7a00 	vldr	s15, [r3]
 8002d12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d16:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002d1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d1e:	3304      	adds	r3, #4
 8002d20:	ed93 7a00 	vldr	s14, [r3]
 8002d24:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002d28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d30:	3304      	adds	r3, #4
 8002d32:	edd3 7a00 	vldr	s15, [r3]
 8002d36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d3a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002d3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d42:	edd3 7a00 	vldr	s15, [r3]
 8002d46:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002d4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d52:	edd3 7a00 	vldr	s15, [r3]
 8002d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d5a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002d5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d62:	edd3 7a00 	vldr	s15, [r3]
 8002d66:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002d6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d72:	edd3 7a00 	vldr	s15, [r3]
 8002d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7a:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002d7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d82:	3304      	adds	r3, #4
 8002d84:	edd3 7a00 	vldr	s15, [r3]
 8002d88:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002d8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d94:	3304      	adds	r3, #4
 8002d96:	edd3 7a00 	vldr	s15, [r3]
 8002d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d9e:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002da2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002da6:	3304      	adds	r3, #4
 8002da8:	edd3 7a00 	vldr	s15, [r3]
 8002dac:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002db0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002db4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002db8:	3304      	adds	r3, #4
 8002dba:	edd3 7a00 	vldr	s15, [r3]
 8002dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc2:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002dc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dca:	ed93 7a00 	vldr	s14, [r3]
 8002dce:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002dd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dda:	edd3 7a00 	vldr	s15, [r3]
 8002dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002de2:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002de6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dea:	ed93 7a00 	vldr	s14, [r3]
 8002dee:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002df2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002df6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dfa:	edd3 7a00 	vldr	s15, [r3]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	1d1a      	adds	r2, r3, #4
 8002e02:	603a      	str	r2, [r7, #0]
 8002e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e08:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002e0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e10:	3304      	adds	r3, #4
 8002e12:	ed93 7a00 	vldr	s14, [r3]
 8002e16:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e22:	3304      	adds	r3, #4
 8002e24:	edd3 7a00 	vldr	s15, [r3]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	1d1a      	adds	r2, r3, #4
 8002e2c:	603a      	str	r2, [r7, #0]
 8002e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e32:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8002e36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e3a:	1d1a      	adds	r2, r3, #4
 8002e3c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e42:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8002e44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e48:	1d1a      	adds	r2, r3, #4
 8002e4a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e50:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8002e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e56:	1d1a      	adds	r2, r3, #4
 8002e58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e5c:	69fa      	ldr	r2, [r7, #28]
 8002e5e:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8002e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e64:	1d1a      	adds	r2, r3, #4
 8002e66:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e6a:	6a3a      	ldr	r2, [r7, #32]
 8002e6c:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8002e6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e72:	1d1a      	adds	r2, r3, #4
 8002e74:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8002e7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e80:	1d1a      	adds	r2, r3, #4
 8002e82:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8002e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002e92:	4413      	add	r3, r2
 8002e94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8002e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8002ea6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002eae:	4413      	add	r3, r2
 8002eb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8002eb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eb8:	3b02      	subs	r3, #2
 8002eba:	085b      	lsrs	r3, r3, #1
 8002ebc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ec0:	e31a      	b.n	80034f8 <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	ed93 7a00 	vldr	s14, [r3]
 8002ec8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ecc:	edd3 7a00 	vldr	s15, [r3]
 8002ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	ed93 7a00 	vldr	s14, [r3]
 8002ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ee2:	edd3 7a00 	vldr	s15, [r3]
 8002ee6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eea:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	ed93 7a00 	vldr	s14, [r3]
 8002ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002efa:	3304      	adds	r3, #4
 8002efc:	edd3 7a00 	vldr	s15, [r3]
 8002f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f04:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	ed93 7a00 	vldr	s14, [r3]
 8002f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f14:	3304      	adds	r3, #4
 8002f16:	edd3 7a00 	vldr	s15, [r3]
 8002f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f1e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002f22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f26:	3304      	adds	r3, #4
 8002f28:	ed93 7a00 	vldr	s14, [r3]
 8002f2c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002f30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f38:	3304      	adds	r3, #4
 8002f3a:	edd3 7a00 	vldr	s15, [r3]
 8002f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f42:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002f46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f4a:	edd3 7a00 	vldr	s15, [r3]
 8002f4e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002f52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f5a:	edd3 7a00 	vldr	s15, [r3]
 8002f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f62:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002f66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f6a:	edd3 7a00 	vldr	s15, [r3]
 8002f6e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002f72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f7a:	edd3 7a00 	vldr	s15, [r3]
 8002f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f82:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002f86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	edd3 7a00 	vldr	s15, [r3]
 8002f90:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002f94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	edd3 7a00 	vldr	s15, [r3]
 8002fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fa6:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002faa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fae:	3304      	adds	r3, #4
 8002fb0:	edd3 7a00 	vldr	s15, [r3]
 8002fb4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002fb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	edd3 7a00 	vldr	s15, [r3]
 8002fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fca:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002fce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fd2:	ed93 7a00 	vldr	s14, [r3]
 8002fd6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002fda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fe2:	edd3 7a00 	vldr	s15, [r3]
 8002fe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fea:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002fee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ff2:	ed93 7a00 	vldr	s14, [r3]
 8002ff6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002ffa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ffe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003002:	edd3 7a00 	vldr	s15, [r3]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	1d1a      	adds	r2, r3, #4
 800300a:	603a      	str	r2, [r7, #0]
 800300c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003010:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8003014:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003018:	3304      	adds	r3, #4
 800301a:	ed93 7a00 	vldr	s14, [r3]
 800301e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003022:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003026:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800302a:	3304      	adds	r3, #4
 800302c:	edd3 7a00 	vldr	s15, [r3]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	1d1a      	adds	r2, r3, #4
 8003034:	603a      	str	r2, [r7, #0]
 8003036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800303a:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 800303e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003042:	3b04      	subs	r3, #4
 8003044:	ed93 7a00 	vldr	s14, [r3]
 8003048:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800304c:	3b04      	subs	r3, #4
 800304e:	edd3 7a00 	vldr	s15, [r3]
 8003052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003056:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800305a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800305e:	3b04      	subs	r3, #4
 8003060:	ed93 7a00 	vldr	s14, [r3]
 8003064:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003068:	3b04      	subs	r3, #4
 800306a:	edd3 7a00 	vldr	s15, [r3]
 800306e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003072:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8003076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800307a:	ed93 7a00 	vldr	s14, [r3]
 800307e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003082:	edd3 7a00 	vldr	s15, [r3]
 8003086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800308a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 800308e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003092:	ed93 7a00 	vldr	s14, [r3]
 8003096:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800309a:	edd3 7a00 	vldr	s15, [r3]
 800309e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030a2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 80030a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030aa:	ed93 7a00 	vldr	s14, [r3]
 80030ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030b2:	edd3 7a00 	vldr	s15, [r3]
 80030b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030ba:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80030be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80030c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030ca:	ed93 7a00 	vldr	s14, [r3]
 80030ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030d2:	edd3 7a00 	vldr	s15, [r3]
 80030d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030de:	3b04      	subs	r3, #4
 80030e0:	edd3 7a00 	vldr	s15, [r3]
 80030e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030ec:	3b04      	subs	r3, #4
 80030ee:	edd3 7a00 	vldr	s15, [r3]
 80030f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 80030fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030fe:	3b04      	subs	r3, #4
 8003100:	edd3 7a00 	vldr	s15, [r3]
 8003104:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003108:	ee37 7a67 	vsub.f32	s14, s14, s15
 800310c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003110:	3b04      	subs	r3, #4
 8003112:	edd3 7a00 	vldr	s15, [r3]
 8003116:	ee77 7a67 	vsub.f32	s15, s14, s15
 800311a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 800311e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003122:	edd3 7a00 	vldr	s15, [r3]
 8003126:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800312a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800312e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003132:	edd3 7a00 	vldr	s15, [r3]
 8003136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800313a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 800313e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003142:	ed93 7a00 	vldr	s14, [r3]
 8003146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800314a:	edd3 7a00 	vldr	s15, [r3]
 800314e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003152:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800315a:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800315e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003162:	3b04      	subs	r3, #4
 8003164:	ed93 7a00 	vldr	s14, [r3]
 8003168:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800316c:	3b04      	subs	r3, #4
 800316e:	edd3 7a00 	vldr	s15, [r3]
 8003172:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003176:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800317a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800317e:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8003182:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003186:	ed93 7a00 	vldr	s14, [r3]
 800318a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800318e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003196:	edd3 7a00 	vldr	s15, [r3]
 800319a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800319e:	1f1a      	subs	r2, r3, #4
 80031a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a8:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80031ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031b0:	3b04      	subs	r3, #4
 80031b2:	ed93 7a00 	vldr	s14, [r3]
 80031b6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80031ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031c2:	3b04      	subs	r3, #4
 80031c4:	edd3 7a00 	vldr	s15, [r3]
 80031c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031cc:	1f1a      	subs	r2, r3, #4
 80031ce:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031d6:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 80031da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031de:	1d1a      	adds	r2, r3, #4
 80031e0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 80031e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031ec:	1d1a      	adds	r2, r3, #4
 80031ee:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)

        // Top
        m0 = t2[0] * twR;
 80031f6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80031fa:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80031fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003202:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8003206:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800320a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800320e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003212:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8003216:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800321a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800321e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003222:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8003226:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800322a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800322e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003232:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p2++ = m0 + m1;
 8003236:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800323a:	1d1a      	adds	r2, r3, #4
 800323c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8003240:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003244:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800324c:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8003250:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003254:	1d1a      	adds	r2, r3, #4
 8003256:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800325a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800325e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003262:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003266:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 800326a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800326e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003276:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 800327a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800327e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003286:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 800328a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800328e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003296:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 800329a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800329e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80032a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd2-- = m0 - m1;
 80032aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032ae:	1f1a      	subs	r2, r3, #4
 80032b0:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80032b4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80032b8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80032bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032c0:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 80032c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032c8:	1f1a      	subs	r2, r3, #4
 80032ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80032ce:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80032d2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80032d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032da:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 80032de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 80032e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 80032ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80032f6:	4413      	add	r3, r2
 80032f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 80032fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8003300:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003308:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 800330c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003310:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003318:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 800331c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003320:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003328:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 800332c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003330:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003338:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p3++ = m0 + m1;
 800333c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003340:	1d1a      	adds	r2, r3, #4
 8003342:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003346:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800334a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800334e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003352:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 8003356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800335a:	1d1a      	adds	r2, r3, #4
 800335c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003360:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003364:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800336c:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8003370:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003374:	eef1 7a67 	vneg.f32	s15, s15
 8003378:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800337c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003380:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8003384:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003388:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800338c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003390:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8003394:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003398:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800339c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 80033a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80033a8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80033ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd3-- = m0 - m1;
 80033b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033b8:	1f1a      	subs	r2, r3, #4
 80033ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033be:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80033c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80033c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ca:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 80033ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033d2:	1f1a      	subs	r2, r3, #4
 80033d4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033d8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80033dc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80033e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033e4:	edc3 7a00 	vstr	s15, [r3]

        // COL 4
        twR = tw4[0];
 80033e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 80033f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 80033f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003400:	4413      	add	r3, r2
 8003402:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8003406:	edd7 7a03 	vldr	s15, [r7, #12]
 800340a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800340e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003412:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8003416:	edd7 7a04 	vldr	s15, [r7, #16]
 800341a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800341e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003422:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8003426:	edd7 7a04 	vldr	s15, [r7, #16]
 800342a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800342e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003432:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8003436:	edd7 7a03 	vldr	s15, [r7, #12]
 800343a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800343e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003442:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p4++ = m0 + m1;
 8003446:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800344a:	1d1a      	adds	r2, r3, #4
 800344c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003450:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003454:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800345c:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8003460:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003464:	1d1a      	adds	r2, r3, #4
 8003466:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800346a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800346e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003476:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 800347a:	edd7 7a06 	vldr	s15, [r7, #24]
 800347e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003486:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 800348a:	edd7 7a05 	vldr	s15, [r7, #20]
 800348e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003496:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 800349a:	edd7 7a05 	vldr	s15, [r7, #20]
 800349e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80034a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 80034aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80034ae:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80034b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd4-- = m0 - m1;
 80034ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034be:	1f1a      	subs	r2, r3, #4
 80034c0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80034c4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80034c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80034cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034d0:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 80034d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034d8:	1f1a      	subs	r2, r3, #4
 80034da:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80034de:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80034e2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80034e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ea:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 80034ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034f2:	3b01      	subs	r3, #1
 80034f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f47f ace0 	bne.w	8002ec2 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	ed93 7a00 	vldr	s14, [r3]
 8003508:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800350c:	edd3 7a00 	vldr	s15, [r3]
 8003510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003514:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	ed93 7a00 	vldr	s14, [r3]
 800351e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003522:	edd3 7a00 	vldr	s15, [r3]
 8003526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800352a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	3304      	adds	r3, #4
 8003532:	ed93 7a00 	vldr	s14, [r3]
 8003536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800353a:	3304      	adds	r3, #4
 800353c:	edd3 7a00 	vldr	s15, [r3]
 8003540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003544:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	3304      	adds	r3, #4
 800354c:	ed93 7a00 	vldr	s14, [r3]
 8003550:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003554:	3304      	adds	r3, #4
 8003556:	edd3 7a00 	vldr	s15, [r3]
 800355a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800355e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8003562:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003566:	3304      	adds	r3, #4
 8003568:	ed93 7a00 	vldr	s14, [r3]
 800356c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003570:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003574:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003578:	3304      	adds	r3, #4
 800357a:	edd3 7a00 	vldr	s15, [r3]
 800357e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003582:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8003586:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800358a:	edd3 7a00 	vldr	s15, [r3]
 800358e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003592:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003596:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800359a:	edd3 7a00 	vldr	s15, [r3]
 800359e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80035a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035aa:	edd3 7a00 	vldr	s15, [r3]
 80035ae:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80035b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035ba:	edd3 7a00 	vldr	s15, [r3]
 80035be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035c2:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80035c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035ca:	3304      	adds	r3, #4
 80035cc:	edd3 7a00 	vldr	s15, [r3]
 80035d0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80035d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035dc:	3304      	adds	r3, #4
 80035de:	edd3 7a00 	vldr	s15, [r3]
 80035e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035e6:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80035ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035ee:	3304      	adds	r3, #4
 80035f0:	edd3 7a00 	vldr	s15, [r3]
 80035f4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80035f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003600:	3304      	adds	r3, #4
 8003602:	edd3 7a00 	vldr	s15, [r3]
 8003606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800360a:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800360e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003612:	ed93 7a00 	vldr	s14, [r3]
 8003616:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800361a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800361e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003622:	edd3 7a00 	vldr	s15, [r3]
 8003626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800362a:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800362e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003632:	ed93 7a00 	vldr	s14, [r3]
 8003636:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800363a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800363e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003642:	edd3 7a00 	vldr	s15, [r3]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	1d1a      	adds	r2, r3, #4
 800364a:	603a      	str	r2, [r7, #0]
 800364c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003650:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8003654:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003658:	3304      	adds	r3, #4
 800365a:	ed93 7a00 	vldr	s14, [r3]
 800365e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003662:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003666:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800366a:	3304      	adds	r3, #4
 800366c:	edd3 7a00 	vldr	s15, [r3]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	1d1a      	adds	r2, r3, #4
 8003674:	603a      	str	r2, [r7, #0]
 8003676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800367a:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 800367e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8003686:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 800368e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003692:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800369a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 800369e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80036a2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80036a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036aa:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 80036ae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80036b2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80036b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ba:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 80036be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80036c2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80036c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 80036ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036d2:	1d1a      	adds	r2, r3, #4
 80036d4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80036d8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80036dc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80036e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e4:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80036e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036ec:	1d1a      	adds	r2, r3, #4
 80036ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80036f2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80036f6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80036fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036fe:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8003702:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 800370a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8003712:	edd7 7a07 	vldr	s15, [r7, #28]
 8003716:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800371a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8003722:	edd7 7a08 	vldr	s15, [r7, #32]
 8003726:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800372a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800372e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8003732:	edd7 7a08 	vldr	s15, [r7, #32]
 8003736:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800373a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8003742:	edd7 7a07 	vldr	s15, [r7, #28]
 8003746:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800374a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800374e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8003752:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003756:	1d1a      	adds	r2, r3, #4
 8003758:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800375c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003760:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003768:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 800376c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003770:	1d1a      	adds	r2, r3, #4
 8003772:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003776:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800377a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800377e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003782:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 8003786:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 800378e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8003796:	edd7 7a03 	vldr	s15, [r7, #12]
 800379a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800379e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 80037a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80037aa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80037ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 80037b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80037ba:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80037be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 80037c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80037ca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80037ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 80037d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037da:	1d1a      	adds	r2, r3, #4
 80037dc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80037e0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80037e4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80037e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ec:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 80037f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037f4:	1d1a      	adds	r2, r3, #4
 80037f6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80037fa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80037fe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003806:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4U);
 800380a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800380e:	b299      	uxth	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	2304      	movs	r3, #4
 8003816:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003818:	f000 f8c2 	bl	80039a0 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4U);
 800381c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003820:	b299      	uxth	r1, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	2304      	movs	r3, #4
 8003828:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800382a:	f000 f8b9 	bl	80039a0 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4U);
 800382e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003832:	b299      	uxth	r1, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	2304      	movs	r3, #4
 800383a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800383c:	f000 f8b0 	bl	80039a0 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8003840:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003844:	b299      	uxth	r1, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	2304      	movs	r3, #4
 800384c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800384e:	f000 f8a7 	bl	80039a0 <arm_radix8_butterfly_f32>
}
 8003852:	bf00      	nop
 8003854:	37b0      	adds	r7, #176	; 0xb0
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <arm_cfft_f32>:
void arm_cfft_f32(
    const arm_cfft_instance_f32 * S,
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b088      	sub	sp, #32
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	4611      	mov	r1, r2
 8003866:	461a      	mov	r2, r3
 8003868:	460b      	mov	r3, r1
 800386a:	71fb      	strb	r3, [r7, #7]
 800386c:	4613      	mov	r3, r2
 800386e:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if (ifftFlag == 1U)
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d117      	bne.n	80038ac <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	3304      	adds	r3, #4
 8003880:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8003882:	2300      	movs	r3, #0
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	e00d      	b.n	80038a4 <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	edd3 7a00 	vldr	s15, [r3]
 800388e:	eef1 7a67 	vneg.f32	s15, s15
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	3308      	adds	r3, #8
 800389c:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3301      	adds	r3, #1
 80038a2:	61fb      	str	r3, [r7, #28]
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d3ed      	bcc.n	8003888 <arm_cfft_f32+0x2e>
        }
    }

    switch (L)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b2:	d024      	beq.n	80038fe <arm_cfft_f32+0xa4>
 80038b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b8:	d80b      	bhi.n	80038d2 <arm_cfft_f32+0x78>
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d01f      	beq.n	80038fe <arm_cfft_f32+0xa4>
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d802      	bhi.n	80038c8 <arm_cfft_f32+0x6e>
 80038c2:	2b10      	cmp	r3, #16
 80038c4:	d016      	beq.n	80038f4 <arm_cfft_f32+0x9a>
 80038c6:	e028      	b.n	800391a <arm_cfft_f32+0xc0>
 80038c8:	2b40      	cmp	r3, #64	; 0x40
 80038ca:	d01d      	beq.n	8003908 <arm_cfft_f32+0xae>
 80038cc:	2b80      	cmp	r3, #128	; 0x80
 80038ce:	d011      	beq.n	80038f4 <arm_cfft_f32+0x9a>
 80038d0:	e023      	b.n	800391a <arm_cfft_f32+0xc0>
 80038d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d6:	d00d      	beq.n	80038f4 <arm_cfft_f32+0x9a>
 80038d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038dc:	d803      	bhi.n	80038e6 <arm_cfft_f32+0x8c>
 80038de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e2:	d011      	beq.n	8003908 <arm_cfft_f32+0xae>
 80038e4:	e019      	b.n	800391a <arm_cfft_f32+0xc0>
 80038e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ea:	d008      	beq.n	80038fe <arm_cfft_f32+0xa4>
 80038ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f0:	d00a      	beq.n	8003908 <arm_cfft_f32+0xae>
 80038f2:	e012      	b.n	800391a <arm_cfft_f32+0xc0>
    {
    case 16:
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f7fe ff90 	bl	800281c <arm_cfft_radix8by2_f32>
        break;
 80038fc:	e00d      	b.n	800391a <arm_cfft_f32+0xc0>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f7ff f97f 	bl	8002c04 <arm_cfft_radix8by4_f32>
        break;
 8003906:	e008      	b.n	800391a <arm_cfft_f32+0xc0>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	b299      	uxth	r1, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	2301      	movs	r3, #1
 8003912:	68b8      	ldr	r0, [r7, #8]
 8003914:	f000 f844 	bl	80039a0 <arm_radix8_butterfly_f32>
        break;
 8003918:	bf00      	nop
    }

    if ( bitReverseFlag )
 800391a:	79bb      	ldrb	r3, [r7, #6]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d007      	beq.n	8003930 <arm_cfft_f32+0xd6>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8999      	ldrh	r1, [r3, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	461a      	mov	r2, r3
 800392a:	68b8      	ldr	r0, [r7, #8]
 800392c:	f7fc fcd8 	bl	80002e0 <arm_bitreversal_32>

    if (ifftFlag == 1U)
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d130      	bne.n	8003998 <arm_cfft_f32+0x13e>
    {
        invL = 1.0f/(float32_t)L;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	ee07 3a90 	vmov	s15, r3
 800393c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003940:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003948:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8003950:	2300      	movs	r3, #0
 8003952:	61fb      	str	r3, [r7, #28]
 8003954:	e01c      	b.n	8003990 <arm_cfft_f32+0x136>
        {
            *pSrc++ *=   invL ;
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	1d1a      	adds	r2, r3, #4
 800395a:	61ba      	str	r2, [r7, #24]
 800395c:	ed93 7a00 	vldr	s14, [r3]
 8003960:	edd7 7a04 	vldr	s15, [r7, #16]
 8003964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003968:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	edd3 7a00 	vldr	s15, [r3]
 8003972:	eeb1 7a67 	vneg.f32	s14, s15
 8003976:	edd7 7a04 	vldr	s15, [r7, #16]
 800397a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	3304      	adds	r3, #4
 8003988:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	3301      	adds	r3, #1
 800398e:	61fb      	str	r3, [r7, #28]
 8003990:	69fa      	ldr	r2, [r7, #28]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	429a      	cmp	r2, r3
 8003996:	d3de      	bcc.n	8003956 <arm_cfft_f32+0xfc>
        }
    }
}
 8003998:	bf00      	nop
 800399a:	3720      	adds	r7, #32
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b0bd      	sub	sp, #244	; 0xf4
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	607a      	str	r2, [r7, #4]
 80039aa:	461a      	mov	r2, r3
 80039ac:	460b      	mov	r3, r1
 80039ae:	817b      	strh	r3, [r7, #10]
 80039b0:	4613      	mov	r3, r2
 80039b2:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 80039b4:	4b09      	ldr	r3, [pc, #36]	; (80039dc <arm_radix8_butterfly_f32+0x3c>)
 80039b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 80039ba:	897b      	ldrh	r3, [r7, #10]
 80039bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 80039c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 80039c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039cc:	08db      	lsrs	r3, r3, #3
 80039ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039d8:	e002      	b.n	80039e0 <arm_radix8_butterfly_f32+0x40>
 80039da:	bf00      	nop
 80039dc:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 80039e0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80039e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e8:	4413      	add	r3, r2
 80039ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 80039ee:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80039f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f6:	4413      	add	r3, r2
 80039f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 80039fc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a04:	4413      	add	r3, r2
 8003a06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8003a0a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a12:	4413      	add	r3, r2
 8003a14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8003a18:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a20:	4413      	add	r3, r2
 8003a22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8003a26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2e:	4413      	add	r3, r2
 8003a30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8003a34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8003a42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	ed93 7a00 	vldr	s14, [r3]
 8003a50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4413      	add	r3, r2
 8003a5a:	edd3 7a00 	vldr	s15, [r3]
 8003a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a62:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8003a66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4413      	add	r3, r2
 8003a70:	ed93 7a00 	vldr	s14, [r3]
 8003a74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	edd3 7a00 	vldr	s15, [r3]
 8003a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a86:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8003a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	ed93 7a00 	vldr	s14, [r3]
 8003a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	edd3 7a00 	vldr	s15, [r3]
 8003aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aaa:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8003aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	ed93 7a00 	vldr	s14, [r3]
 8003abc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	edd3 7a00 	vldr	s15, [r3]
 8003aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ace:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8003ad2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4413      	add	r3, r2
 8003adc:	ed93 7a00 	vldr	s14, [r3]
 8003ae0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4413      	add	r3, r2
 8003aea:	edd3 7a00 	vldr	s15, [r3]
 8003aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003af2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8003af6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4413      	add	r3, r2
 8003b00:	ed93 7a00 	vldr	s14, [r3]
 8003b04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	edd3 7a00 	vldr	s15, [r3]
 8003b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b16:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8003b1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4413      	add	r3, r2
 8003b24:	ed93 7a00 	vldr	s14, [r3]
 8003b28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	edd3 7a00 	vldr	s15, [r3]
 8003b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b3a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8003b3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	ed93 7a00 	vldr	s14, [r3]
 8003b4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4413      	add	r3, r2
 8003b56:	edd3 7a00 	vldr	s15, [r3]
 8003b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b5e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8003b62:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003b66:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b6e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8003b72:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003b76:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b7e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8003b82:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8003b86:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003b8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b8e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8003b92:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8003b96:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b9e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 8003ba2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4413      	add	r3, r2
 8003bac:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003bb0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bb8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8003bbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003bca:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bd2:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8003bd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	3304      	adds	r3, #4
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4413      	add	r3, r2
 8003be2:	ed93 7a00 	vldr	s14, [r3]
 8003be6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	3304      	adds	r3, #4
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	edd3 7a00 	vldr	s15, [r3]
 8003bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bfa:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8003bfe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	3304      	adds	r3, #4
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4413      	add	r3, r2
 8003c0a:	ed93 7a00 	vldr	s14, [r3]
 8003c0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	3304      	adds	r3, #4
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4413      	add	r3, r2
 8003c1a:	edd3 7a00 	vldr	s15, [r3]
 8003c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c22:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8003c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4413      	add	r3, r2
 8003c32:	ed93 7a00 	vldr	s14, [r3]
 8003c36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4413      	add	r3, r2
 8003c42:	edd3 7a00 	vldr	s15, [r3]
 8003c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c4a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8003c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	3304      	adds	r3, #4
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4413      	add	r3, r2
 8003c5a:	ed93 7a00 	vldr	s14, [r3]
 8003c5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	3304      	adds	r3, #4
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4413      	add	r3, r2
 8003c6a:	edd3 7a00 	vldr	s15, [r3]
 8003c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c72:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8003c76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4413      	add	r3, r2
 8003c82:	ed93 7a00 	vldr	s14, [r3]
 8003c86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4413      	add	r3, r2
 8003c92:	edd3 7a00 	vldr	s15, [r3]
 8003c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c9a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8003c9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4413      	add	r3, r2
 8003caa:	ed93 7a00 	vldr	s14, [r3]
 8003cae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4413      	add	r3, r2
 8003cba:	edd3 7a00 	vldr	s15, [r3]
 8003cbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cc2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8003cc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	3304      	adds	r3, #4
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	ed93 7a00 	vldr	s14, [r3]
 8003cd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	3304      	adds	r3, #4
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	edd3 7a00 	vldr	s15, [r3]
 8003ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cea:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8003cee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	ed93 7a00 	vldr	s14, [r3]
 8003cfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	3304      	adds	r3, #4
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4413      	add	r3, r2
 8003d0a:	edd3 7a00 	vldr	s15, [r3]
 8003d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d12:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8003d16:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003d1a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d22:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8003d26:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003d2a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d32:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8003d36:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8003d3a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003d3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d42:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8003d46:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8003d4a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d52:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8003d56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4413      	add	r3, r2
 8003d62:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003d66:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d6e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8003d72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	3304      	adds	r3, #4
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003d82:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d8a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8003d8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4413      	add	r3, r2
 8003d98:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003d9c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003da4:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8003da8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4413      	add	r3, r2
 8003db2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003db6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dbe:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8003dc2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	3304      	adds	r3, #4
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4413      	add	r3, r2
 8003dce:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003dd2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dda:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8003dde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	3304      	adds	r3, #4
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4413      	add	r3, r2
 8003dea:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003dee:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003df6:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8003dfa:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8003dfe:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e06:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8003e12:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8003e16:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e1e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e26:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8003e2a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003e2e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003e32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e36:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8003e42:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003e46:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e4e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e56:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8003e5a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003e5e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e66:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8003e6a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003e6e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e76:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8003e7a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003e7e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e86:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8003e8a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003e8e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e96:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8003e9a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003e9e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003ea2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ea6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8003eaa:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003eae:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eb6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8003eba:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8003ebe:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ec6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8003eca:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8003ece:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ed6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8003eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003ee8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ef0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8003ef4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4413      	add	r3, r2
 8003efe:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003f02:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003f06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f0a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8003f0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4413      	add	r3, r2
 8003f18:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003f1c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f24:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8003f28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4413      	add	r3, r2
 8003f32:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003f36:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f3e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8003f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	3304      	adds	r3, #4
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003f52:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003f56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f5a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8003f5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	3304      	adds	r3, #4
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4413      	add	r3, r2
 8003f6a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003f6e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f76:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8003f7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	3304      	adds	r3, #4
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4413      	add	r3, r2
 8003f86:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003f8a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f92:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8003f96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003fa6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fae:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8003fb2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fba:	4413      	add	r3, r2
 8003fbc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8003fc0:	897b      	ldrh	r3, [r7, #10]
 8003fc2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	f4ff ad0a 	bcc.w	80039e0 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8003fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd0:	2b07      	cmp	r3, #7
 8003fd2:	f240 84e3 	bls.w	800499c <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8003fe2:	893b      	ldrh	r3, [r7, #8]
 8003fe4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003fe8:	4413      	add	r3, r2
 8003fea:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8003fec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8003ff2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003ff6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ff8:	4413      	add	r3, r2
 8003ffa:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8003ffc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ffe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004000:	4413      	add	r3, r2
 8004002:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8004004:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004006:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004008:	4413      	add	r3, r2
 800400a:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 800400c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800400e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004010:	4413      	add	r3, r2
 8004012:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8004014:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004016:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004018:	4413      	add	r3, r2
 800401a:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 800401c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800401e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004020:	4413      	add	r3, r2
 8004022:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8004024:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	4413      	add	r3, r2
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8004032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	4413      	add	r3, r2
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 800403e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	4413      	add	r3, r2
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800404a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8004056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	4413      	add	r3, r2
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8004062:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	4413      	add	r3, r2
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 800406e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	4413      	add	r3, r2
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 800407a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	3304      	adds	r3, #4
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4413      	add	r3, r2
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 800408a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	3304      	adds	r3, #4
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	4413      	add	r3, r2
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8004098:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	3304      	adds	r3, #4
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	4413      	add	r3, r2
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 80040a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	3304      	adds	r3, #4
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	4413      	add	r3, r2
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 80040b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	3304      	adds	r3, #4
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	4413      	add	r3, r2
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 80040c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	3304      	adds	r3, #4
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	4413      	add	r3, r2
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 80040d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	3304      	adds	r3, #4
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	4413      	add	r3, r2
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 80040de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 80040e6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80040ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ee:	4413      	add	r3, r2
 80040f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 80040f4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80040f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fc:	4413      	add	r3, r2
 80040fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8004102:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410a:	4413      	add	r3, r2
 800410c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8004110:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004118:	4413      	add	r3, r2
 800411a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 800411e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004126:	4413      	add	r3, r2
 8004128:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 800412c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004134:	4413      	add	r3, r2
 8004136:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800413a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800413e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004142:	4413      	add	r3, r2
 8004144:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8004148:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	4413      	add	r3, r2
 8004152:	ed93 7a00 	vldr	s14, [r3]
 8004156:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4413      	add	r3, r2
 8004160:	edd3 7a00 	vldr	s15, [r3]
 8004164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004168:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800416c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4413      	add	r3, r2
 8004176:	ed93 7a00 	vldr	s14, [r3]
 800417a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	edd3 7a00 	vldr	s15, [r3]
 8004188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800418c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8004190:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4413      	add	r3, r2
 800419a:	ed93 7a00 	vldr	s14, [r3]
 800419e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4413      	add	r3, r2
 80041a8:	edd3 7a00 	vldr	s15, [r3]
 80041ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041b0:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80041b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4413      	add	r3, r2
 80041be:	ed93 7a00 	vldr	s14, [r3]
 80041c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	edd3 7a00 	vldr	s15, [r3]
 80041d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041d4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80041d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4413      	add	r3, r2
 80041e2:	ed93 7a00 	vldr	s14, [r3]
 80041e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4413      	add	r3, r2
 80041f0:	edd3 7a00 	vldr	s15, [r3]
 80041f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041f8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80041fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	4413      	add	r3, r2
 8004206:	ed93 7a00 	vldr	s14, [r3]
 800420a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4413      	add	r3, r2
 8004214:	edd3 7a00 	vldr	s15, [r3]
 8004218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800421c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8004220:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4413      	add	r3, r2
 800422a:	ed93 7a00 	vldr	s14, [r3]
 800422e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4413      	add	r3, r2
 8004238:	edd3 7a00 	vldr	s15, [r3]
 800423c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004240:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8004244:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4413      	add	r3, r2
 800424e:	ed93 7a00 	vldr	s14, [r3]
 8004252:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4413      	add	r3, r2
 800425c:	edd3 7a00 	vldr	s15, [r3]
 8004260:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004264:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8004268:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800426c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004274:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8004278:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800427c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004284:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8004288:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800428c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004294:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8004298:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800429c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80042a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042a4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 80042a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4413      	add	r3, r2
 80042b2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80042b6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80042ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042be:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 80042c2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80042c6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80042ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042ce:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80042d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	3304      	adds	r3, #4
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4413      	add	r3, r2
 80042de:	ed93 7a00 	vldr	s14, [r3]
 80042e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	3304      	adds	r3, #4
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4413      	add	r3, r2
 80042ee:	edd3 7a00 	vldr	s15, [r3]
 80042f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042f6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80042fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	3304      	adds	r3, #4
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4413      	add	r3, r2
 8004306:	ed93 7a00 	vldr	s14, [r3]
 800430a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	3304      	adds	r3, #4
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4413      	add	r3, r2
 8004316:	edd3 7a00 	vldr	s15, [r3]
 800431a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800431e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8004322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	3304      	adds	r3, #4
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4413      	add	r3, r2
 800432e:	ed93 7a00 	vldr	s14, [r3]
 8004332:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	3304      	adds	r3, #4
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4413      	add	r3, r2
 800433e:	edd3 7a00 	vldr	s15, [r3]
 8004342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004346:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800434a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	3304      	adds	r3, #4
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4413      	add	r3, r2
 8004356:	ed93 7a00 	vldr	s14, [r3]
 800435a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	3304      	adds	r3, #4
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4413      	add	r3, r2
 8004366:	edd3 7a00 	vldr	s15, [r3]
 800436a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800436e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8004372:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	3304      	adds	r3, #4
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	4413      	add	r3, r2
 800437e:	ed93 7a00 	vldr	s14, [r3]
 8004382:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	3304      	adds	r3, #4
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4413      	add	r3, r2
 800438e:	edd3 7a00 	vldr	s15, [r3]
 8004392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004396:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800439a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	3304      	adds	r3, #4
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4413      	add	r3, r2
 80043a6:	ed93 7a00 	vldr	s14, [r3]
 80043aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	3304      	adds	r3, #4
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4413      	add	r3, r2
 80043b6:	edd3 7a00 	vldr	s15, [r3]
 80043ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043be:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80043c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	3304      	adds	r3, #4
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4413      	add	r3, r2
 80043ce:	ed93 7a00 	vldr	s14, [r3]
 80043d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	3304      	adds	r3, #4
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4413      	add	r3, r2
 80043de:	edd3 7a00 	vldr	s15, [r3]
 80043e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043e6:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80043ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	3304      	adds	r3, #4
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4413      	add	r3, r2
 80043f6:	ed93 7a00 	vldr	s14, [r3]
 80043fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	3304      	adds	r3, #4
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4413      	add	r3, r2
 8004406:	edd3 7a00 	vldr	s15, [r3]
 800440a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800440e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8004412:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004416:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800441a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800441e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8004422:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004426:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800442a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800442e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8004432:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004436:	edd7 7a08 	vldr	s15, [r7, #32]
 800443a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800443e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8004442:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004446:	edd7 7a08 	vldr	s15, [r7, #32]
 800444a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800444e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8004452:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004456:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800445a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800445e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8004462:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004466:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800446a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800446e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8004472:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	3304      	adds	r3, #4
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4413      	add	r3, r2
 800447e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004482:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800448a:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800448e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004492:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004496:	ee77 7a67 	vsub.f32	s15, s14, s15
 800449a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 800449e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80044a2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80044a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044aa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 80044ae:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80044b2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80044b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044ba:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 80044be:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80044c2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80044c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ca:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 80044ce:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80044d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80044d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044da:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 80044de:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80044e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80044e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ea:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 80044ee:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80044f2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80044f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fa:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 80044fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4413      	add	r3, r2
 8004508:	ed97 7a07 	vldr	s14, [r7, #28]
 800450c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004514:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8004518:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	3304      	adds	r3, #4
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	ed97 7a05 	vldr	s14, [r7, #20]
 8004528:	edd7 7a04 	vldr	s15, [r7, #16]
 800452c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004530:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8004534:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004538:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800453c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004540:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8004544:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004548:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800454c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004550:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8004554:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004558:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800455c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004560:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8004564:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004568:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800456c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004570:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8004574:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4413      	add	r3, r2
 800457e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004582:	edd7 7a06 	vldr	s15, [r7, #24]
 8004586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800458a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800458e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	3304      	adds	r3, #4
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4413      	add	r3, r2
 800459a:	ed97 7a05 	vldr	s14, [r7, #20]
 800459e:	edd7 7a04 	vldr	s15, [r7, #16]
 80045a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045a6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 80045aa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80045ae:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80045b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 80045ba:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80045be:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80045c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 80045ca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80045ce:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80045d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 80045da:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80045de:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80045e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 80045ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80045f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80045fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004600:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8004604:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	3304      	adds	r3, #4
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4413      	add	r3, r2
 8004610:	ed97 7a05 	vldr	s14, [r7, #20]
 8004614:	edd7 7a04 	vldr	s15, [r7, #16]
 8004618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800461c:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8004620:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8004624:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800462c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8004630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004634:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8004638:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800463c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004644:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8004648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8004650:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8004654:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800465c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8004660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004664:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8004668:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800466c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004674:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8004678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8004680:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004684:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800468c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8004690:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004694:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800469c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 80046a0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80046a4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80046a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ac:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 80046b0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80046b4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80046b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046bc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 80046c0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80046c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80046c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046cc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 80046d0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80046d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80046d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046dc:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 80046e0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80046e4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80046e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ec:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 80046f0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80046f4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80046f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046fc:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8004700:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004704:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8004708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800470c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8004710:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004714:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8004718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800471c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8004720:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004724:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800472c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8004730:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004734:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800473c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8004740:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004744:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800474c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8004750:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004754:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800475c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8004760:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004764:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004768:	ee77 7a67 	vsub.f32	s15, s14, s15
 800476c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8004770:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004774:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800477c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8004780:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004784:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8004790:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004794:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 80047a0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80047a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80047a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ac:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 80047b0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80047b4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80047b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047bc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 80047c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4413      	add	r3, r2
 80047ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80047ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80047d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047d6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 80047da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	3304      	adds	r3, #4
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4413      	add	r3, r2
 80047e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80047ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80047ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047f2:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 80047f6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80047fa:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80047fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004802:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8004806:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800480a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800480e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004812:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8004816:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800481a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800481e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004822:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8004826:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800482a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800482e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004832:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8004836:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4413      	add	r3, r2
 8004840:	ed97 7a07 	vldr	s14, [r7, #28]
 8004844:	edd7 7a06 	vldr	s15, [r7, #24]
 8004848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800484c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8004850:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	3304      	adds	r3, #4
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4413      	add	r3, r2
 800485c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004860:	edd7 7a04 	vldr	s15, [r7, #16]
 8004864:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004868:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800486c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004870:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004878:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800487c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004880:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8004884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004888:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800488c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004890:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8004894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004898:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800489c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80048a0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80048a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 80048ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80048ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80048be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048c2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 80048c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	3304      	adds	r3, #4
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4413      	add	r3, r2
 80048d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80048d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80048da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048de:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 80048e2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80048e6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80048ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ee:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 80048f2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80048f6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80048fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fe:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8004902:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004906:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800490a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8004912:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004916:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800491a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8004922:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4413      	add	r3, r2
 800492c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004930:	edd7 7a06 	vldr	s15, [r7, #24]
 8004934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004938:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800493c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	3304      	adds	r3, #4
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	ed97 7a05 	vldr	s14, [r7, #20]
 800494c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004954:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8004958:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800495c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004960:	4413      	add	r3, r2
 8004962:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 8004966:	897b      	ldrh	r3, [r7, #10]
 8004968:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800496c:	429a      	cmp	r2, r3
 800496e:	f4ff abba 	bcc.w	80040e6 <arm_radix8_butterfly_f32+0x746>

         j++;
 8004972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004976:	3301      	adds	r3, #1
 8004978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 800497c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004984:	429a      	cmp	r2, r3
 8004986:	f4ff ab2c 	bcc.w	8003fe2 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800498a:	893b      	ldrh	r3, [r7, #8]
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8004990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004994:	2b07      	cmp	r3, #7
 8004996:	f63f a813 	bhi.w	80039c0 <arm_radix8_butterfly_f32+0x20>
}
 800499a:	e000      	b.n	800499e <arm_radix8_butterfly_f32+0xffe>
         break;
 800499c:	bf00      	nop
}
 800499e:	bf00      	nop
 80049a0:	37f4      	adds	r7, #244	; 0xf4
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop

080049ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049b2:	2003      	movs	r0, #3
 80049b4:	f000 f96c 	bl	8004c90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80049b8:	f001 faba 	bl	8005f30 <HAL_RCC_GetSysClockFreq>
 80049bc:	4601      	mov	r1, r0
 80049be:	4b15      	ldr	r3, [pc, #84]	; (8004a14 <HAL_Init+0x68>)
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	0a1b      	lsrs	r3, r3, #8
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	4a13      	ldr	r2, [pc, #76]	; (8004a18 <HAL_Init+0x6c>)
 80049ca:	5cd3      	ldrb	r3, [r2, r3]
 80049cc:	f003 031f 	and.w	r3, r3, #31
 80049d0:	fa21 f303 	lsr.w	r3, r1, r3
 80049d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049d6:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <HAL_Init+0x68>)
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	4a0e      	ldr	r2, [pc, #56]	; (8004a18 <HAL_Init+0x6c>)
 80049e0:	5cd3      	ldrb	r3, [r2, r3]
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	fa22 f303 	lsr.w	r3, r2, r3
 80049ec:	4a0b      	ldr	r2, [pc, #44]	; (8004a1c <HAL_Init+0x70>)
 80049ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049f0:	4a0b      	ldr	r2, [pc, #44]	; (8004a20 <HAL_Init+0x74>)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80049f6:	2000      	movs	r0, #0
 80049f8:	f000 f814 	bl	8004a24 <HAL_InitTick>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e002      	b.n	8004a0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004a06:	f7fc ff45 	bl	8001894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	58024400 	.word	0x58024400
 8004a18:	0800d278 	.word	0x0800d278
 8004a1c:	20000004 	.word	0x20000004
 8004a20:	20000000 	.word	0x20000000

08004a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004a2c:	4b15      	ldr	r3, [pc, #84]	; (8004a84 <HAL_InitTick+0x60>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e021      	b.n	8004a7c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004a38:	4b13      	ldr	r3, [pc, #76]	; (8004a88 <HAL_InitTick+0x64>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	4b11      	ldr	r3, [pc, #68]	; (8004a84 <HAL_InitTick+0x60>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	4619      	mov	r1, r3
 8004a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f943 	bl	8004cda <HAL_SYSTICK_Config>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e00e      	b.n	8004a7c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b0f      	cmp	r3, #15
 8004a62:	d80a      	bhi.n	8004a7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a64:	2200      	movs	r2, #0
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6c:	f000 f91b 	bl	8004ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a70:	4a06      	ldr	r2, [pc, #24]	; (8004a8c <HAL_InitTick+0x68>)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	e000      	b.n	8004a7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	2000000c 	.word	0x2000000c
 8004a88:	20000000 	.word	0x20000000
 8004a8c:	20000008 	.word	0x20000008

08004a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004a94:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <HAL_IncTick+0x20>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <HAL_IncTick+0x24>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	4a04      	ldr	r2, [pc, #16]	; (8004ab4 <HAL_IncTick+0x24>)
 8004aa2:	6013      	str	r3, [r2, #0]
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	2000000c 	.word	0x2000000c
 8004ab4:	200006f4 	.word	0x200006f4

08004ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  return uwTick;
 8004abc:	4b03      	ldr	r3, [pc, #12]	; (8004acc <HAL_GetTick+0x14>)
 8004abe:	681b      	ldr	r3, [r3, #0]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	200006f4 	.word	0x200006f4

08004ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ad8:	f7ff ffee 	bl	8004ab8 <HAL_GetTick>
 8004adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae8:	d005      	beq.n	8004af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004aea:	4b09      	ldr	r3, [pc, #36]	; (8004b10 <HAL_Delay+0x40>)
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004af6:	bf00      	nop
 8004af8:	f7ff ffde 	bl	8004ab8 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d8f7      	bhi.n	8004af8 <HAL_Delay+0x28>
  {
  }
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	2000000c 	.word	0x2000000c

08004b14 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004b18:	4b03      	ldr	r3, [pc, #12]	; (8004b28 <HAL_GetREVID+0x14>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	0c1b      	lsrs	r3, r3, #16
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	5c001000 	.word	0x5c001000

08004b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <__NVIC_SetPriorityGrouping+0x40>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b48:	4013      	ands	r3, r2
 8004b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b54:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <__NVIC_SetPriorityGrouping+0x44>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b5a:	4a04      	ldr	r2, [pc, #16]	; (8004b6c <__NVIC_SetPriorityGrouping+0x40>)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	60d3      	str	r3, [r2, #12]
}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	e000ed00 	.word	0xe000ed00
 8004b70:	05fa0000 	.word	0x05fa0000

08004b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b78:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <__NVIC_GetPriorityGrouping+0x18>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	0a1b      	lsrs	r3, r3, #8
 8004b7e:	f003 0307 	and.w	r3, r3, #7
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	e000ed00 	.word	0xe000ed00

08004b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	6039      	str	r1, [r7, #0]
 8004b9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	db0a      	blt.n	8004bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	490c      	ldr	r1, [pc, #48]	; (8004bdc <__NVIC_SetPriority+0x4c>)
 8004baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bae:	0112      	lsls	r2, r2, #4
 8004bb0:	b2d2      	uxtb	r2, r2
 8004bb2:	440b      	add	r3, r1
 8004bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bb8:	e00a      	b.n	8004bd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	4908      	ldr	r1, [pc, #32]	; (8004be0 <__NVIC_SetPriority+0x50>)
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	3b04      	subs	r3, #4
 8004bc8:	0112      	lsls	r2, r2, #4
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	440b      	add	r3, r1
 8004bce:	761a      	strb	r2, [r3, #24]
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	e000e100 	.word	0xe000e100
 8004be0:	e000ed00 	.word	0xe000ed00

08004be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b089      	sub	sp, #36	; 0x24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f1c3 0307 	rsb	r3, r3, #7
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	bf28      	it	cs
 8004c02:	2304      	movcs	r3, #4
 8004c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	3304      	adds	r3, #4
 8004c0a:	2b06      	cmp	r3, #6
 8004c0c:	d902      	bls.n	8004c14 <NVIC_EncodePriority+0x30>
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	3b03      	subs	r3, #3
 8004c12:	e000      	b.n	8004c16 <NVIC_EncodePriority+0x32>
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c18:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	43da      	mvns	r2, r3
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	401a      	ands	r2, r3
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	fa01 f303 	lsl.w	r3, r1, r3
 8004c36:	43d9      	mvns	r1, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c3c:	4313      	orrs	r3, r2
         );
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3724      	adds	r7, #36	; 0x24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
	...

08004c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c5c:	d301      	bcc.n	8004c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e00f      	b.n	8004c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c62:	4a0a      	ldr	r2, [pc, #40]	; (8004c8c <SysTick_Config+0x40>)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c6a:	210f      	movs	r1, #15
 8004c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c70:	f7ff ff8e 	bl	8004b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c74:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <SysTick_Config+0x40>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c7a:	4b04      	ldr	r3, [pc, #16]	; (8004c8c <SysTick_Config+0x40>)
 8004c7c:	2207      	movs	r2, #7
 8004c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	e000e010 	.word	0xe000e010

08004c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff ff47 	bl	8004b2c <__NVIC_SetPriorityGrouping>
}
 8004c9e:	bf00      	nop
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b086      	sub	sp, #24
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	4603      	mov	r3, r0
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	607a      	str	r2, [r7, #4]
 8004cb2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004cb4:	f7ff ff5e 	bl	8004b74 <__NVIC_GetPriorityGrouping>
 8004cb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	68b9      	ldr	r1, [r7, #8]
 8004cbe:	6978      	ldr	r0, [r7, #20]
 8004cc0:	f7ff ff90 	bl	8004be4 <NVIC_EncodePriority>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004cca:	4611      	mov	r1, r2
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff ff5f 	bl	8004b90 <__NVIC_SetPriority>
}
 8004cd2:	bf00      	nop
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7ff ffb2 	bl	8004c4c <SysTick_Config>
 8004ce8:	4603      	mov	r3, r0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b089      	sub	sp, #36	; 0x24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004d02:	4b89      	ldr	r3, [pc, #548]	; (8004f28 <HAL_GPIO_Init+0x234>)
 8004d04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d06:	e194      	b.n	8005032 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	fa01 f303 	lsl.w	r3, r1, r3
 8004d14:	4013      	ands	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 8186 	beq.w	800502c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d00b      	beq.n	8004d40 <HAL_GPIO_Init+0x4c>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d007      	beq.n	8004d40 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d34:	2b11      	cmp	r3, #17
 8004d36:	d003      	beq.n	8004d40 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b12      	cmp	r3, #18
 8004d3e:	d130      	bne.n	8004da2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	2203      	movs	r2, #3
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	43db      	mvns	r3, r3
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	4013      	ands	r3, r2
 8004d56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d76:	2201      	movs	r2, #1
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	4013      	ands	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	091b      	lsrs	r3, r3, #4
 8004d8c:	f003 0201 	and.w	r2, r3, #1
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	2203      	movs	r2, #3
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	43db      	mvns	r3, r3
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	4013      	ands	r3, r2
 8004db8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d003      	beq.n	8004de2 <HAL_GPIO_Init+0xee>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b12      	cmp	r3, #18
 8004de0:	d123      	bne.n	8004e2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	08da      	lsrs	r2, r3, #3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3208      	adds	r2, #8
 8004dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	220f      	movs	r2, #15
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	4013      	ands	r3, r2
 8004e04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	08da      	lsrs	r2, r3, #3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3208      	adds	r2, #8
 8004e24:	69b9      	ldr	r1, [r7, #24]
 8004e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	2203      	movs	r2, #3
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f003 0203 	and.w	r2, r3, #3
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 80e0 	beq.w	800502c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e6c:	4b2f      	ldr	r3, [pc, #188]	; (8004f2c <HAL_GPIO_Init+0x238>)
 8004e6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e72:	4a2e      	ldr	r2, [pc, #184]	; (8004f2c <HAL_GPIO_Init+0x238>)
 8004e74:	f043 0302 	orr.w	r3, r3, #2
 8004e78:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e7c:	4b2b      	ldr	r3, [pc, #172]	; (8004f2c <HAL_GPIO_Init+0x238>)
 8004e7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e8a:	4a29      	ldr	r2, [pc, #164]	; (8004f30 <HAL_GPIO_Init+0x23c>)
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	089b      	lsrs	r3, r3, #2
 8004e90:	3302      	adds	r3, #2
 8004e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	220f      	movs	r2, #15
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	43db      	mvns	r3, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a20      	ldr	r2, [pc, #128]	; (8004f34 <HAL_GPIO_Init+0x240>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d052      	beq.n	8004f5c <HAL_GPIO_Init+0x268>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a1f      	ldr	r2, [pc, #124]	; (8004f38 <HAL_GPIO_Init+0x244>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d031      	beq.n	8004f22 <HAL_GPIO_Init+0x22e>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a1e      	ldr	r2, [pc, #120]	; (8004f3c <HAL_GPIO_Init+0x248>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d02b      	beq.n	8004f1e <HAL_GPIO_Init+0x22a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a1d      	ldr	r2, [pc, #116]	; (8004f40 <HAL_GPIO_Init+0x24c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d025      	beq.n	8004f1a <HAL_GPIO_Init+0x226>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a1c      	ldr	r2, [pc, #112]	; (8004f44 <HAL_GPIO_Init+0x250>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d01f      	beq.n	8004f16 <HAL_GPIO_Init+0x222>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a1b      	ldr	r2, [pc, #108]	; (8004f48 <HAL_GPIO_Init+0x254>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d019      	beq.n	8004f12 <HAL_GPIO_Init+0x21e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a1a      	ldr	r2, [pc, #104]	; (8004f4c <HAL_GPIO_Init+0x258>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d013      	beq.n	8004f0e <HAL_GPIO_Init+0x21a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a19      	ldr	r2, [pc, #100]	; (8004f50 <HAL_GPIO_Init+0x25c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00d      	beq.n	8004f0a <HAL_GPIO_Init+0x216>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <HAL_GPIO_Init+0x260>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d007      	beq.n	8004f06 <HAL_GPIO_Init+0x212>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a17      	ldr	r2, [pc, #92]	; (8004f58 <HAL_GPIO_Init+0x264>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d101      	bne.n	8004f02 <HAL_GPIO_Init+0x20e>
 8004efe:	2309      	movs	r3, #9
 8004f00:	e02d      	b.n	8004f5e <HAL_GPIO_Init+0x26a>
 8004f02:	230a      	movs	r3, #10
 8004f04:	e02b      	b.n	8004f5e <HAL_GPIO_Init+0x26a>
 8004f06:	2308      	movs	r3, #8
 8004f08:	e029      	b.n	8004f5e <HAL_GPIO_Init+0x26a>
 8004f0a:	2307      	movs	r3, #7
 8004f0c:	e027      	b.n	8004f5e <HAL_GPIO_Init+0x26a>
 8004f0e:	2306      	movs	r3, #6
 8004f10:	e025      	b.n	8004f5e <HAL_GPIO_Init+0x26a>
 8004f12:	2305      	movs	r3, #5
 8004f14:	e023      	b.n	8004f5e <HAL_GPIO_Init+0x26a>
 8004f16:	2304      	movs	r3, #4
 8004f18:	e021      	b.n	8004f5e <HAL_GPIO_Init+0x26a>
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e01f      	b.n	8004f5e <HAL_GPIO_Init+0x26a>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e01d      	b.n	8004f5e <HAL_GPIO_Init+0x26a>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e01b      	b.n	8004f5e <HAL_GPIO_Init+0x26a>
 8004f26:	bf00      	nop
 8004f28:	58000080 	.word	0x58000080
 8004f2c:	58024400 	.word	0x58024400
 8004f30:	58000400 	.word	0x58000400
 8004f34:	58020000 	.word	0x58020000
 8004f38:	58020400 	.word	0x58020400
 8004f3c:	58020800 	.word	0x58020800
 8004f40:	58020c00 	.word	0x58020c00
 8004f44:	58021000 	.word	0x58021000
 8004f48:	58021400 	.word	0x58021400
 8004f4c:	58021800 	.word	0x58021800
 8004f50:	58021c00 	.word	0x58021c00
 8004f54:	58022000 	.word	0x58022000
 8004f58:	58022400 	.word	0x58022400
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	f002 0203 	and.w	r2, r2, #3
 8004f64:	0092      	lsls	r2, r2, #2
 8004f66:	4093      	lsls	r3, r2
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f6e:	4938      	ldr	r1, [pc, #224]	; (8005050 <HAL_GPIO_Init+0x35c>)
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	089b      	lsrs	r3, r3, #2
 8004f74:	3302      	adds	r3, #2
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	43db      	mvns	r3, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	43db      	mvns	r3, r3
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004ff6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	43db      	mvns	r3, r3
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4013      	ands	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	3301      	adds	r3, #1
 8005030:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	fa22 f303 	lsr.w	r3, r2, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	f47f ae63 	bne.w	8004d08 <HAL_GPIO_Init+0x14>
  }
}
 8005042:	bf00      	nop
 8005044:	3724      	adds	r7, #36	; 0x24
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	58000400 	.word	0x58000400

08005054 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800505c:	4a08      	ldr	r2, [pc, #32]	; (8005080 <HAL_HSEM_FastTake+0x2c>)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3320      	adds	r3, #32
 8005062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005066:	4a07      	ldr	r2, [pc, #28]	; (8005084 <HAL_HSEM_FastTake+0x30>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d101      	bne.n	8005070 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	e000      	b.n	8005072 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	58026400 	.word	0x58026400
 8005084:	80000300 	.word	0x80000300

08005088 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005092:	4906      	ldr	r1, [pc, #24]	; (80050ac <HAL_HSEM_Release+0x24>)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	58026400 	.word	0x58026400

080050b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80050b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050b2:	b08f      	sub	sp, #60	; 0x3c
 80050b4:	af0a      	add	r7, sp, #40	; 0x28
 80050b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e116      	b.n	80052f0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d106      	bne.n	80050e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7fc fd83 	bl	8001be8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2203      	movs	r2, #3
 80050e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d102      	bne.n	80050fc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f005 fd99 	bl	800ac38 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	687e      	ldr	r6, [r7, #4]
 800510e:	466d      	mov	r5, sp
 8005110:	f106 0410 	add.w	r4, r6, #16
 8005114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800511a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800511c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005120:	e885 0003 	stmia.w	r5, {r0, r1}
 8005124:	1d33      	adds	r3, r6, #4
 8005126:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005128:	6838      	ldr	r0, [r7, #0]
 800512a:	f005 fd23 	bl	800ab74 <USB_CoreInit>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0d7      	b.n	80052f0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2100      	movs	r1, #0
 8005146:	4618      	mov	r0, r3
 8005148:	f005 fd87 	bl	800ac5a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800514c:	2300      	movs	r3, #0
 800514e:	73fb      	strb	r3, [r7, #15]
 8005150:	e04a      	b.n	80051e8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005152:	7bfa      	ldrb	r2, [r7, #15]
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	1a9b      	subs	r3, r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	333d      	adds	r3, #61	; 0x3d
 8005162:	2201      	movs	r2, #1
 8005164:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005166:	7bfa      	ldrb	r2, [r7, #15]
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	1a9b      	subs	r3, r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	440b      	add	r3, r1
 8005174:	333c      	adds	r3, #60	; 0x3c
 8005176:	7bfa      	ldrb	r2, [r7, #15]
 8005178:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800517a:	7bfa      	ldrb	r2, [r7, #15]
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	b298      	uxth	r0, r3
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	1a9b      	subs	r3, r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	3342      	adds	r3, #66	; 0x42
 800518e:	4602      	mov	r2, r0
 8005190:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005192:	7bfa      	ldrb	r2, [r7, #15]
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	1a9b      	subs	r3, r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	440b      	add	r3, r1
 80051a0:	333f      	adds	r3, #63	; 0x3f
 80051a2:	2200      	movs	r2, #0
 80051a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051a6:	7bfa      	ldrb	r2, [r7, #15]
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	1a9b      	subs	r3, r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	3344      	adds	r3, #68	; 0x44
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051ba:	7bfa      	ldrb	r2, [r7, #15]
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	3348      	adds	r3, #72	; 0x48
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051ce:	7bfa      	ldrb	r2, [r7, #15]
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	4613      	mov	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	1a9b      	subs	r3, r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	440b      	add	r3, r1
 80051dc:	3350      	adds	r3, #80	; 0x50
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
 80051e4:	3301      	adds	r3, #1
 80051e6:	73fb      	strb	r3, [r7, #15]
 80051e8:	7bfa      	ldrb	r2, [r7, #15]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d3af      	bcc.n	8005152 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051f2:	2300      	movs	r3, #0
 80051f4:	73fb      	strb	r3, [r7, #15]
 80051f6:	e044      	b.n	8005282 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80051f8:	7bfa      	ldrb	r2, [r7, #15]
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	1a9b      	subs	r3, r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800520a:	2200      	movs	r2, #0
 800520c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800520e:	7bfa      	ldrb	r2, [r7, #15]
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	1a9b      	subs	r3, r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	440b      	add	r3, r1
 800521c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005220:	7bfa      	ldrb	r2, [r7, #15]
 8005222:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005224:	7bfa      	ldrb	r2, [r7, #15]
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	4613      	mov	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	1a9b      	subs	r3, r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005236:	2200      	movs	r2, #0
 8005238:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800523a:	7bfa      	ldrb	r2, [r7, #15]
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005250:	7bfa      	ldrb	r2, [r7, #15]
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	4613      	mov	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	1a9b      	subs	r3, r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	440b      	add	r3, r1
 800525e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005266:	7bfa      	ldrb	r2, [r7, #15]
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	1a9b      	subs	r3, r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	3301      	adds	r3, #1
 8005280:	73fb      	strb	r3, [r7, #15]
 8005282:	7bfa      	ldrb	r2, [r7, #15]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	429a      	cmp	r2, r3
 800528a:	d3b5      	bcc.n	80051f8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	603b      	str	r3, [r7, #0]
 8005292:	687e      	ldr	r6, [r7, #4]
 8005294:	466d      	mov	r5, sp
 8005296:	f106 0410 	add.w	r4, r6, #16
 800529a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800529c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800529e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80052a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80052aa:	1d33      	adds	r3, r6, #4
 80052ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052ae:	6838      	ldr	r0, [r7, #0]
 80052b0:	f005 fcfe 	bl	800acb0 <USB_DevInit>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d005      	beq.n	80052c6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2202      	movs	r2, #2
 80052be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e014      	b.n	80052f0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d102      	bne.n	80052e4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f80a 	bl	80052f8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f005 fea0 	bl	800b02e <USB_DevDisconnect>

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005326:	4b05      	ldr	r3, [pc, #20]	; (800533c <HAL_PCDEx_ActivateLPM+0x44>)
 8005328:	4313      	orrs	r3, r2
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	10000003 	.word	0x10000003

08005340 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005348:	4b29      	ldr	r3, [pc, #164]	; (80053f0 <HAL_PWREx_ConfigSupply+0xb0>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	2b06      	cmp	r3, #6
 8005352:	d00a      	beq.n	800536a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005354:	4b26      	ldr	r3, [pc, #152]	; (80053f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	429a      	cmp	r2, r3
 8005360:	d001      	beq.n	8005366 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e040      	b.n	80053e8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	e03e      	b.n	80053e8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800536a:	4b21      	ldr	r3, [pc, #132]	; (80053f0 <HAL_PWREx_ConfigSupply+0xb0>)
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005372:	491f      	ldr	r1, [pc, #124]	; (80053f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4313      	orrs	r3, r2
 8005378:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800537a:	f7ff fb9d 	bl	8004ab8 <HAL_GetTick>
 800537e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005380:	e009      	b.n	8005396 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005382:	f7ff fb99 	bl	8004ab8 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005390:	d901      	bls.n	8005396 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e028      	b.n	80053e8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005396:	4b16      	ldr	r3, [pc, #88]	; (80053f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800539e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a2:	d1ee      	bne.n	8005382 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b1e      	cmp	r3, #30
 80053a8:	d008      	beq.n	80053bc <HAL_PWREx_ConfigSupply+0x7c>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b2e      	cmp	r3, #46	; 0x2e
 80053ae:	d005      	beq.n	80053bc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b1d      	cmp	r3, #29
 80053b4:	d002      	beq.n	80053bc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b2d      	cmp	r3, #45	; 0x2d
 80053ba:	d114      	bne.n	80053e6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80053bc:	f7ff fb7c 	bl	8004ab8 <HAL_GetTick>
 80053c0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80053c2:	e009      	b.n	80053d8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80053c4:	f7ff fb78 	bl	8004ab8 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053d2:	d901      	bls.n	80053d8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e007      	b.n	80053e8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80053d8:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <HAL_PWREx_ConfigSupply+0xb0>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e4:	d1ee      	bne.n	80053c4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	58024800 	.word	0x58024800

080053f4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	4a04      	ldr	r2, [pc, #16]	; (8005410 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80053fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005402:	60d3      	str	r3, [r2, #12]
}
 8005404:	bf00      	nop
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	58024800 	.word	0x58024800

08005414 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08c      	sub	sp, #48	; 0x30
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e3c4      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 8087 	beq.w	8005542 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005434:	4ba2      	ldr	r3, [pc, #648]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800543c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800543e:	4ba0      	ldr	r3, [pc, #640]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005442:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005446:	2b10      	cmp	r3, #16
 8005448:	d007      	beq.n	800545a <HAL_RCC_OscConfig+0x46>
 800544a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544c:	2b18      	cmp	r3, #24
 800544e:	d110      	bne.n	8005472 <HAL_RCC_OscConfig+0x5e>
 8005450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d10b      	bne.n	8005472 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800545a:	4b99      	ldr	r3, [pc, #612]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d06c      	beq.n	8005540 <HAL_RCC_OscConfig+0x12c>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d168      	bne.n	8005540 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e39e      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800547a:	d106      	bne.n	800548a <HAL_RCC_OscConfig+0x76>
 800547c:	4b90      	ldr	r3, [pc, #576]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a8f      	ldr	r2, [pc, #572]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	e02e      	b.n	80054e8 <HAL_RCC_OscConfig+0xd4>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10c      	bne.n	80054ac <HAL_RCC_OscConfig+0x98>
 8005492:	4b8b      	ldr	r3, [pc, #556]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a8a      	ldr	r2, [pc, #552]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	4b88      	ldr	r3, [pc, #544]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a87      	ldr	r2, [pc, #540]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80054a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	e01d      	b.n	80054e8 <HAL_RCC_OscConfig+0xd4>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054b4:	d10c      	bne.n	80054d0 <HAL_RCC_OscConfig+0xbc>
 80054b6:	4b82      	ldr	r3, [pc, #520]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a81      	ldr	r2, [pc, #516]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80054bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	4b7f      	ldr	r3, [pc, #508]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a7e      	ldr	r2, [pc, #504]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80054c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	e00b      	b.n	80054e8 <HAL_RCC_OscConfig+0xd4>
 80054d0:	4b7b      	ldr	r3, [pc, #492]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a7a      	ldr	r2, [pc, #488]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80054d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	4b78      	ldr	r3, [pc, #480]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a77      	ldr	r2, [pc, #476]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80054e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d013      	beq.n	8005518 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f0:	f7ff fae2 	bl	8004ab8 <HAL_GetTick>
 80054f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054f8:	f7ff fade 	bl	8004ab8 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b64      	cmp	r3, #100	; 0x64
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e352      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800550a:	4b6d      	ldr	r3, [pc, #436]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0f0      	beq.n	80054f8 <HAL_RCC_OscConfig+0xe4>
 8005516:	e014      	b.n	8005542 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005518:	f7ff face 	bl	8004ab8 <HAL_GetTick>
 800551c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005520:	f7ff faca 	bl	8004ab8 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b64      	cmp	r3, #100	; 0x64
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e33e      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005532:	4b63      	ldr	r3, [pc, #396]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1f0      	bne.n	8005520 <HAL_RCC_OscConfig+0x10c>
 800553e:	e000      	b.n	8005542 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 8092 	beq.w	8005674 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005550:	4b5b      	ldr	r3, [pc, #364]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005558:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800555a:	4b59      	ldr	r3, [pc, #356]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 800555c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d007      	beq.n	8005576 <HAL_RCC_OscConfig+0x162>
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	2b18      	cmp	r3, #24
 800556a:	d12d      	bne.n	80055c8 <HAL_RCC_OscConfig+0x1b4>
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d128      	bne.n	80055c8 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005576:	4b52      	ldr	r3, [pc, #328]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b00      	cmp	r3, #0
 8005580:	d005      	beq.n	800558e <HAL_RCC_OscConfig+0x17a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e310      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558e:	f7ff fac1 	bl	8004b14 <HAL_GetREVID>
 8005592:	4602      	mov	r2, r0
 8005594:	f241 0303 	movw	r3, #4099	; 0x1003
 8005598:	429a      	cmp	r2, r3
 800559a:	d80a      	bhi.n	80055b2 <HAL_RCC_OscConfig+0x19e>
 800559c:	4b48      	ldr	r3, [pc, #288]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	031b      	lsls	r3, r3, #12
 80055aa:	4945      	ldr	r1, [pc, #276]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055b0:	e060      	b.n	8005674 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b2:	4b43      	ldr	r3, [pc, #268]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	061b      	lsls	r3, r3, #24
 80055c0:	493f      	ldr	r1, [pc, #252]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055c6:	e055      	b.n	8005674 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d038      	beq.n	8005642 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055d0:	4b3b      	ldr	r3, [pc, #236]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f023 0219 	bic.w	r2, r3, #25
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	4938      	ldr	r1, [pc, #224]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e2:	f7ff fa69 	bl	8004ab8 <HAL_GetTick>
 80055e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ea:	f7ff fa65 	bl	8004ab8 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e2d9      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055fc:	4b30      	ldr	r3, [pc, #192]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0f0      	beq.n	80055ea <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005608:	f7ff fa84 	bl	8004b14 <HAL_GetREVID>
 800560c:	4602      	mov	r2, r0
 800560e:	f241 0303 	movw	r3, #4099	; 0x1003
 8005612:	429a      	cmp	r2, r3
 8005614:	d80a      	bhi.n	800562c <HAL_RCC_OscConfig+0x218>
 8005616:	4b2a      	ldr	r3, [pc, #168]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	031b      	lsls	r3, r3, #12
 8005624:	4926      	ldr	r1, [pc, #152]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005626:	4313      	orrs	r3, r2
 8005628:	604b      	str	r3, [r1, #4]
 800562a:	e023      	b.n	8005674 <HAL_RCC_OscConfig+0x260>
 800562c:	4b24      	ldr	r3, [pc, #144]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	061b      	lsls	r3, r3, #24
 800563a:	4921      	ldr	r1, [pc, #132]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 800563c:	4313      	orrs	r3, r2
 800563e:	604b      	str	r3, [r1, #4]
 8005640:	e018      	b.n	8005674 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005642:	4b1f      	ldr	r3, [pc, #124]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a1e      	ldr	r2, [pc, #120]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005648:	f023 0301 	bic.w	r3, r3, #1
 800564c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564e:	f7ff fa33 	bl	8004ab8 <HAL_GetTick>
 8005652:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005654:	e008      	b.n	8005668 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005656:	f7ff fa2f 	bl	8004ab8 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e2a3      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005668:	4b15      	ldr	r3, [pc, #84]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1f0      	bne.n	8005656 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0310 	and.w	r3, r3, #16
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 8091 	beq.w	80057a4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005682:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800568a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800568c:	4b0c      	ldr	r3, [pc, #48]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 800568e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005690:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2b08      	cmp	r3, #8
 8005696:	d007      	beq.n	80056a8 <HAL_RCC_OscConfig+0x294>
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b18      	cmp	r3, #24
 800569c:	d12f      	bne.n	80056fe <HAL_RCC_OscConfig+0x2ea>
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f003 0303 	and.w	r3, r3, #3
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d12a      	bne.n	80056fe <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d007      	beq.n	80056c4 <HAL_RCC_OscConfig+0x2b0>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	2b80      	cmp	r3, #128	; 0x80
 80056ba:	d003      	beq.n	80056c4 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e277      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
 80056c0:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056c4:	f7ff fa26 	bl	8004b14 <HAL_GetREVID>
 80056c8:	4602      	mov	r2, r0
 80056ca:	f241 0303 	movw	r3, #4099	; 0x1003
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d80a      	bhi.n	80056e8 <HAL_RCC_OscConfig+0x2d4>
 80056d2:	4ba2      	ldr	r3, [pc, #648]	; (800595c <HAL_RCC_OscConfig+0x548>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	069b      	lsls	r3, r3, #26
 80056e0:	499e      	ldr	r1, [pc, #632]	; (800595c <HAL_RCC_OscConfig+0x548>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056e6:	e05d      	b.n	80057a4 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056e8:	4b9c      	ldr	r3, [pc, #624]	; (800595c <HAL_RCC_OscConfig+0x548>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	061b      	lsls	r3, r3, #24
 80056f6:	4999      	ldr	r1, [pc, #612]	; (800595c <HAL_RCC_OscConfig+0x548>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056fc:	e052      	b.n	80057a4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d035      	beq.n	8005772 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005706:	4b95      	ldr	r3, [pc, #596]	; (800595c <HAL_RCC_OscConfig+0x548>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a94      	ldr	r2, [pc, #592]	; (800595c <HAL_RCC_OscConfig+0x548>)
 800570c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005712:	f7ff f9d1 	bl	8004ab8 <HAL_GetTick>
 8005716:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005718:	e008      	b.n	800572c <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800571a:	f7ff f9cd 	bl	8004ab8 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d901      	bls.n	800572c <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e241      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800572c:	4b8b      	ldr	r3, [pc, #556]	; (800595c <HAL_RCC_OscConfig+0x548>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0f0      	beq.n	800571a <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005738:	f7ff f9ec 	bl	8004b14 <HAL_GetREVID>
 800573c:	4602      	mov	r2, r0
 800573e:	f241 0303 	movw	r3, #4099	; 0x1003
 8005742:	429a      	cmp	r2, r3
 8005744:	d80a      	bhi.n	800575c <HAL_RCC_OscConfig+0x348>
 8005746:	4b85      	ldr	r3, [pc, #532]	; (800595c <HAL_RCC_OscConfig+0x548>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	069b      	lsls	r3, r3, #26
 8005754:	4981      	ldr	r1, [pc, #516]	; (800595c <HAL_RCC_OscConfig+0x548>)
 8005756:	4313      	orrs	r3, r2
 8005758:	604b      	str	r3, [r1, #4]
 800575a:	e023      	b.n	80057a4 <HAL_RCC_OscConfig+0x390>
 800575c:	4b7f      	ldr	r3, [pc, #508]	; (800595c <HAL_RCC_OscConfig+0x548>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	061b      	lsls	r3, r3, #24
 800576a:	497c      	ldr	r1, [pc, #496]	; (800595c <HAL_RCC_OscConfig+0x548>)
 800576c:	4313      	orrs	r3, r2
 800576e:	60cb      	str	r3, [r1, #12]
 8005770:	e018      	b.n	80057a4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005772:	4b7a      	ldr	r3, [pc, #488]	; (800595c <HAL_RCC_OscConfig+0x548>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a79      	ldr	r2, [pc, #484]	; (800595c <HAL_RCC_OscConfig+0x548>)
 8005778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800577c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577e:	f7ff f99b 	bl	8004ab8 <HAL_GetTick>
 8005782:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005786:	f7ff f997 	bl	8004ab8 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e20b      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005798:	4b70      	ldr	r3, [pc, #448]	; (800595c <HAL_RCC_OscConfig+0x548>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1f0      	bne.n	8005786 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0308 	and.w	r3, r3, #8
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d036      	beq.n	800581e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d019      	beq.n	80057ec <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057b8:	4b68      	ldr	r3, [pc, #416]	; (800595c <HAL_RCC_OscConfig+0x548>)
 80057ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057bc:	4a67      	ldr	r2, [pc, #412]	; (800595c <HAL_RCC_OscConfig+0x548>)
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c4:	f7ff f978 	bl	8004ab8 <HAL_GetTick>
 80057c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057cc:	f7ff f974 	bl	8004ab8 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e1e8      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057de:	4b5f      	ldr	r3, [pc, #380]	; (800595c <HAL_RCC_OscConfig+0x548>)
 80057e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0f0      	beq.n	80057cc <HAL_RCC_OscConfig+0x3b8>
 80057ea:	e018      	b.n	800581e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057ec:	4b5b      	ldr	r3, [pc, #364]	; (800595c <HAL_RCC_OscConfig+0x548>)
 80057ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f0:	4a5a      	ldr	r2, [pc, #360]	; (800595c <HAL_RCC_OscConfig+0x548>)
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f8:	f7ff f95e 	bl	8004ab8 <HAL_GetTick>
 80057fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005800:	f7ff f95a 	bl	8004ab8 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e1ce      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005812:	4b52      	ldr	r3, [pc, #328]	; (800595c <HAL_RCC_OscConfig+0x548>)
 8005814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1f0      	bne.n	8005800 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b00      	cmp	r3, #0
 8005828:	d036      	beq.n	8005898 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d019      	beq.n	8005866 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005832:	4b4a      	ldr	r3, [pc, #296]	; (800595c <HAL_RCC_OscConfig+0x548>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a49      	ldr	r2, [pc, #292]	; (800595c <HAL_RCC_OscConfig+0x548>)
 8005838:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800583c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800583e:	f7ff f93b 	bl	8004ab8 <HAL_GetTick>
 8005842:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005844:	e008      	b.n	8005858 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005846:	f7ff f937 	bl	8004ab8 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e1ab      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005858:	4b40      	ldr	r3, [pc, #256]	; (800595c <HAL_RCC_OscConfig+0x548>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0f0      	beq.n	8005846 <HAL_RCC_OscConfig+0x432>
 8005864:	e018      	b.n	8005898 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005866:	4b3d      	ldr	r3, [pc, #244]	; (800595c <HAL_RCC_OscConfig+0x548>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a3c      	ldr	r2, [pc, #240]	; (800595c <HAL_RCC_OscConfig+0x548>)
 800586c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005870:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005872:	f7ff f921 	bl	8004ab8 <HAL_GetTick>
 8005876:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005878:	e008      	b.n	800588c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800587a:	f7ff f91d 	bl	8004ab8 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e191      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800588c:	4b33      	ldr	r3, [pc, #204]	; (800595c <HAL_RCC_OscConfig+0x548>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1f0      	bne.n	800587a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 8086 	beq.w	80059b2 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058a6:	4b2e      	ldr	r3, [pc, #184]	; (8005960 <HAL_RCC_OscConfig+0x54c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a2d      	ldr	r2, [pc, #180]	; (8005960 <HAL_RCC_OscConfig+0x54c>)
 80058ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058b2:	f7ff f901 	bl	8004ab8 <HAL_GetTick>
 80058b6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058b8:	e008      	b.n	80058cc <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058ba:	f7ff f8fd 	bl	8004ab8 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b64      	cmp	r3, #100	; 0x64
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e171      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058cc:	4b24      	ldr	r3, [pc, #144]	; (8005960 <HAL_RCC_OscConfig+0x54c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0f0      	beq.n	80058ba <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d106      	bne.n	80058ee <HAL_RCC_OscConfig+0x4da>
 80058e0:	4b1e      	ldr	r3, [pc, #120]	; (800595c <HAL_RCC_OscConfig+0x548>)
 80058e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e4:	4a1d      	ldr	r2, [pc, #116]	; (800595c <HAL_RCC_OscConfig+0x548>)
 80058e6:	f043 0301 	orr.w	r3, r3, #1
 80058ea:	6713      	str	r3, [r2, #112]	; 0x70
 80058ec:	e02d      	b.n	800594a <HAL_RCC_OscConfig+0x536>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10c      	bne.n	8005910 <HAL_RCC_OscConfig+0x4fc>
 80058f6:	4b19      	ldr	r3, [pc, #100]	; (800595c <HAL_RCC_OscConfig+0x548>)
 80058f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fa:	4a18      	ldr	r2, [pc, #96]	; (800595c <HAL_RCC_OscConfig+0x548>)
 80058fc:	f023 0301 	bic.w	r3, r3, #1
 8005900:	6713      	str	r3, [r2, #112]	; 0x70
 8005902:	4b16      	ldr	r3, [pc, #88]	; (800595c <HAL_RCC_OscConfig+0x548>)
 8005904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005906:	4a15      	ldr	r2, [pc, #84]	; (800595c <HAL_RCC_OscConfig+0x548>)
 8005908:	f023 0304 	bic.w	r3, r3, #4
 800590c:	6713      	str	r3, [r2, #112]	; 0x70
 800590e:	e01c      	b.n	800594a <HAL_RCC_OscConfig+0x536>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	2b05      	cmp	r3, #5
 8005916:	d10c      	bne.n	8005932 <HAL_RCC_OscConfig+0x51e>
 8005918:	4b10      	ldr	r3, [pc, #64]	; (800595c <HAL_RCC_OscConfig+0x548>)
 800591a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591c:	4a0f      	ldr	r2, [pc, #60]	; (800595c <HAL_RCC_OscConfig+0x548>)
 800591e:	f043 0304 	orr.w	r3, r3, #4
 8005922:	6713      	str	r3, [r2, #112]	; 0x70
 8005924:	4b0d      	ldr	r3, [pc, #52]	; (800595c <HAL_RCC_OscConfig+0x548>)
 8005926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005928:	4a0c      	ldr	r2, [pc, #48]	; (800595c <HAL_RCC_OscConfig+0x548>)
 800592a:	f043 0301 	orr.w	r3, r3, #1
 800592e:	6713      	str	r3, [r2, #112]	; 0x70
 8005930:	e00b      	b.n	800594a <HAL_RCC_OscConfig+0x536>
 8005932:	4b0a      	ldr	r3, [pc, #40]	; (800595c <HAL_RCC_OscConfig+0x548>)
 8005934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005936:	4a09      	ldr	r2, [pc, #36]	; (800595c <HAL_RCC_OscConfig+0x548>)
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	6713      	str	r3, [r2, #112]	; 0x70
 800593e:	4b07      	ldr	r3, [pc, #28]	; (800595c <HAL_RCC_OscConfig+0x548>)
 8005940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005942:	4a06      	ldr	r2, [pc, #24]	; (800595c <HAL_RCC_OscConfig+0x548>)
 8005944:	f023 0304 	bic.w	r3, r3, #4
 8005948:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d01a      	beq.n	8005988 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005952:	f7ff f8b1 	bl	8004ab8 <HAL_GetTick>
 8005956:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005958:	e00f      	b.n	800597a <HAL_RCC_OscConfig+0x566>
 800595a:	bf00      	nop
 800595c:	58024400 	.word	0x58024400
 8005960:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005964:	f7ff f8a8 	bl	8004ab8 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005972:	4293      	cmp	r3, r2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e11a      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800597a:	4b8f      	ldr	r3, [pc, #572]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 800597c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0ee      	beq.n	8005964 <HAL_RCC_OscConfig+0x550>
 8005986:	e014      	b.n	80059b2 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005988:	f7ff f896 	bl	8004ab8 <HAL_GetTick>
 800598c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800598e:	e00a      	b.n	80059a6 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005990:	f7ff f892 	bl	8004ab8 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	f241 3288 	movw	r2, #5000	; 0x1388
 800599e:	4293      	cmp	r3, r2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e104      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059a6:	4b84      	ldr	r3, [pc, #528]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1ee      	bne.n	8005990 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 80f9 	beq.w	8005bae <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80059bc:	4b7e      	ldr	r3, [pc, #504]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059c4:	2b18      	cmp	r3, #24
 80059c6:	f000 80b4 	beq.w	8005b32 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	f040 8095 	bne.w	8005afe <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d4:	4b78      	ldr	r3, [pc, #480]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a77      	ldr	r2, [pc, #476]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 80059da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e0:	f7ff f86a 	bl	8004ab8 <HAL_GetTick>
 80059e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e8:	f7ff f866 	bl	8004ab8 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e0da      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059fa:	4b6f      	ldr	r3, [pc, #444]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1f0      	bne.n	80059e8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a06:	4b6c      	ldr	r3, [pc, #432]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a0a:	4b6c      	ldr	r3, [pc, #432]	; (8005bbc <HAL_RCC_OscConfig+0x7a8>)
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a16:	0112      	lsls	r2, r2, #4
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	4967      	ldr	r1, [pc, #412]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	628b      	str	r3, [r1, #40]	; 0x28
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a24:	3b01      	subs	r3, #1
 8005a26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	025b      	lsls	r3, r3, #9
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	431a      	orrs	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	041b      	lsls	r3, r3, #16
 8005a3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	061b      	lsls	r3, r3, #24
 8005a4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a50:	4959      	ldr	r1, [pc, #356]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005a56:	4b58      	ldr	r3, [pc, #352]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5a:	4a57      	ldr	r2, [pc, #348]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005a5c:	f023 0301 	bic.w	r3, r3, #1
 8005a60:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a62:	4b55      	ldr	r3, [pc, #340]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a66:	4b56      	ldr	r3, [pc, #344]	; (8005bc0 <HAL_RCC_OscConfig+0x7ac>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a6e:	00d2      	lsls	r2, r2, #3
 8005a70:	4951      	ldr	r1, [pc, #324]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a76:	4b50      	ldr	r3, [pc, #320]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7a:	f023 020c 	bic.w	r2, r3, #12
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	494d      	ldr	r1, [pc, #308]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005a88:	4b4b      	ldr	r3, [pc, #300]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	f023 0202 	bic.w	r2, r3, #2
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a94:	4948      	ldr	r1, [pc, #288]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a9a:	4b47      	ldr	r3, [pc, #284]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9e:	4a46      	ldr	r2, [pc, #280]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aa6:	4b44      	ldr	r3, [pc, #272]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	4a43      	ldr	r2, [pc, #268]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005ab2:	4b41      	ldr	r3, [pc, #260]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	4a40      	ldr	r2, [pc, #256]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005abc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005abe:	4b3e      	ldr	r3, [pc, #248]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac2:	4a3d      	ldr	r2, [pc, #244]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005ac4:	f043 0301 	orr.w	r3, r3, #1
 8005ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005aca:	4b3b      	ldr	r3, [pc, #236]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a3a      	ldr	r2, [pc, #232]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005ad0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad6:	f7fe ffef 	bl	8004ab8 <HAL_GetTick>
 8005ada:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005adc:	e008      	b.n	8005af0 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ade:	f7fe ffeb 	bl	8004ab8 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e05f      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005af0:	4b31      	ldr	r3, [pc, #196]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0f0      	beq.n	8005ade <HAL_RCC_OscConfig+0x6ca>
 8005afc:	e057      	b.n	8005bae <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005afe:	4b2e      	ldr	r3, [pc, #184]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a2d      	ldr	r2, [pc, #180]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005b04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0a:	f7fe ffd5 	bl	8004ab8 <HAL_GetTick>
 8005b0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b10:	e008      	b.n	8005b24 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b12:	f7fe ffd1 	bl	8004ab8 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e045      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b24:	4b24      	ldr	r3, [pc, #144]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1f0      	bne.n	8005b12 <HAL_RCC_OscConfig+0x6fe>
 8005b30:	e03d      	b.n	8005bae <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005b32:	4b21      	ldr	r3, [pc, #132]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b36:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b38:	4b1f      	ldr	r3, [pc, #124]	; (8005bb8 <HAL_RCC_OscConfig+0x7a4>)
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d031      	beq.n	8005baa <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f003 0203 	and.w	r2, r3, #3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d12a      	bne.n	8005baa <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	091b      	lsrs	r3, r3, #4
 8005b58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d122      	bne.n	8005baa <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d11a      	bne.n	8005baa <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	0a5b      	lsrs	r3, r3, #9
 8005b78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b80:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d111      	bne.n	8005baa <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	0c1b      	lsrs	r3, r3, #16
 8005b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b92:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d108      	bne.n	8005baa <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	0e1b      	lsrs	r3, r3, #24
 8005b9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d001      	beq.n	8005bae <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3730      	adds	r7, #48	; 0x30
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	58024400 	.word	0x58024400
 8005bbc:	fffffc0c 	.word	0xfffffc0c
 8005bc0:	ffff0007 	.word	0xffff0007

08005bc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e19c      	b.n	8005f12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bd8:	4b8a      	ldr	r3, [pc, #552]	; (8005e04 <HAL_RCC_ClockConfig+0x240>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 030f 	and.w	r3, r3, #15
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d910      	bls.n	8005c08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be6:	4b87      	ldr	r3, [pc, #540]	; (8005e04 <HAL_RCC_ClockConfig+0x240>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f023 020f 	bic.w	r2, r3, #15
 8005bee:	4985      	ldr	r1, [pc, #532]	; (8005e04 <HAL_RCC_ClockConfig+0x240>)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf6:	4b83      	ldr	r3, [pc, #524]	; (8005e04 <HAL_RCC_ClockConfig+0x240>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d001      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e184      	b.n	8005f12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d010      	beq.n	8005c36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	4b7b      	ldr	r3, [pc, #492]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d908      	bls.n	8005c36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c24:	4b78      	ldr	r3, [pc, #480]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	4975      	ldr	r1, [pc, #468]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0308 	and.w	r3, r3, #8
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d010      	beq.n	8005c64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	695a      	ldr	r2, [r3, #20]
 8005c46:	4b70      	ldr	r3, [pc, #448]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d908      	bls.n	8005c64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c52:	4b6d      	ldr	r3, [pc, #436]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	496a      	ldr	r1, [pc, #424]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0310 	and.w	r3, r3, #16
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d010      	beq.n	8005c92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	699a      	ldr	r2, [r3, #24]
 8005c74:	4b64      	ldr	r3, [pc, #400]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d908      	bls.n	8005c92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c80:	4b61      	ldr	r3, [pc, #388]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	495e      	ldr	r1, [pc, #376]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d010      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69da      	ldr	r2, [r3, #28]
 8005ca2:	4b59      	ldr	r3, [pc, #356]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d908      	bls.n	8005cc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005cae:	4b56      	ldr	r3, [pc, #344]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	4953      	ldr	r1, [pc, #332]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d010      	beq.n	8005cee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	4b4d      	ldr	r3, [pc, #308]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d908      	bls.n	8005cee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cdc:	4b4a      	ldr	r3, [pc, #296]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	f023 020f 	bic.w	r2, r3, #15
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	4947      	ldr	r1, [pc, #284]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d055      	beq.n	8005da6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005cfa:	4b43      	ldr	r3, [pc, #268]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	4940      	ldr	r1, [pc, #256]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d107      	bne.n	8005d24 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d14:	4b3c      	ldr	r3, [pc, #240]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d121      	bne.n	8005d64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e0f6      	b.n	8005f12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	d107      	bne.n	8005d3c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d2c:	4b36      	ldr	r3, [pc, #216]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d115      	bne.n	8005d64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e0ea      	b.n	8005f12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d107      	bne.n	8005d54 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d44:	4b30      	ldr	r3, [pc, #192]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d109      	bne.n	8005d64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e0de      	b.n	8005f12 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d54:	4b2c      	ldr	r3, [pc, #176]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0d6      	b.n	8005f12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d64:	4b28      	ldr	r3, [pc, #160]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f023 0207 	bic.w	r2, r3, #7
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	4925      	ldr	r1, [pc, #148]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d76:	f7fe fe9f 	bl	8004ab8 <HAL_GetTick>
 8005d7a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d7c:	e00a      	b.n	8005d94 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d7e:	f7fe fe9b 	bl	8004ab8 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e0be      	b.n	8005f12 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d94:	4b1c      	ldr	r3, [pc, #112]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d1eb      	bne.n	8005d7e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d010      	beq.n	8005dd4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	4b14      	ldr	r3, [pc, #80]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d208      	bcs.n	8005dd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dc2:	4b11      	ldr	r3, [pc, #68]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	f023 020f 	bic.w	r2, r3, #15
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	490e      	ldr	r1, [pc, #56]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dd4:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <HAL_RCC_ClockConfig+0x240>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 030f 	and.w	r3, r3, #15
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d214      	bcs.n	8005e0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005de2:	4b08      	ldr	r3, [pc, #32]	; (8005e04 <HAL_RCC_ClockConfig+0x240>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f023 020f 	bic.w	r2, r3, #15
 8005dea:	4906      	ldr	r1, [pc, #24]	; (8005e04 <HAL_RCC_ClockConfig+0x240>)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005df2:	4b04      	ldr	r3, [pc, #16]	; (8005e04 <HAL_RCC_ClockConfig+0x240>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d005      	beq.n	8005e0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e086      	b.n	8005f12 <HAL_RCC_ClockConfig+0x34e>
 8005e04:	52002000 	.word	0x52002000
 8005e08:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d010      	beq.n	8005e3a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	4b3f      	ldr	r3, [pc, #252]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d208      	bcs.n	8005e3a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e28:	4b3c      	ldr	r3, [pc, #240]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	4939      	ldr	r1, [pc, #228]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d010      	beq.n	8005e68 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	695a      	ldr	r2, [r3, #20]
 8005e4a:	4b34      	ldr	r3, [pc, #208]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d208      	bcs.n	8005e68 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e56:	4b31      	ldr	r3, [pc, #196]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	492e      	ldr	r1, [pc, #184]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0310 	and.w	r3, r3, #16
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d010      	beq.n	8005e96 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699a      	ldr	r2, [r3, #24]
 8005e78:	4b28      	ldr	r3, [pc, #160]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d208      	bcs.n	8005e96 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e84:	4b25      	ldr	r3, [pc, #148]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	4922      	ldr	r1, [pc, #136]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d010      	beq.n	8005ec4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69da      	ldr	r2, [r3, #28]
 8005ea6:	4b1d      	ldr	r3, [pc, #116]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d208      	bcs.n	8005ec4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005eb2:	4b1a      	ldr	r3, [pc, #104]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	4917      	ldr	r1, [pc, #92]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ec4:	f000 f834 	bl	8005f30 <HAL_RCC_GetSysClockFreq>
 8005ec8:	4601      	mov	r1, r0
 8005eca:	4b14      	ldr	r3, [pc, #80]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	0a1b      	lsrs	r3, r3, #8
 8005ed0:	f003 030f 	and.w	r3, r3, #15
 8005ed4:	4a12      	ldr	r2, [pc, #72]	; (8005f20 <HAL_RCC_ClockConfig+0x35c>)
 8005ed6:	5cd3      	ldrb	r3, [r2, r3]
 8005ed8:	f003 031f 	and.w	r3, r3, #31
 8005edc:	fa21 f303 	lsr.w	r3, r1, r3
 8005ee0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ee2:	4b0e      	ldr	r3, [pc, #56]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	f003 030f 	and.w	r3, r3, #15
 8005eea:	4a0d      	ldr	r2, [pc, #52]	; (8005f20 <HAL_RCC_ClockConfig+0x35c>)
 8005eec:	5cd3      	ldrb	r3, [r2, r3]
 8005eee:	f003 031f 	and.w	r3, r3, #31
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef8:	4a0a      	ldr	r2, [pc, #40]	; (8005f24 <HAL_RCC_ClockConfig+0x360>)
 8005efa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005efc:	4a0a      	ldr	r2, [pc, #40]	; (8005f28 <HAL_RCC_ClockConfig+0x364>)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005f02:	4b0a      	ldr	r3, [pc, #40]	; (8005f2c <HAL_RCC_ClockConfig+0x368>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fe fd8c 	bl	8004a24 <HAL_InitTick>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	58024400 	.word	0x58024400
 8005f20:	0800d278 	.word	0x0800d278
 8005f24:	20000004 	.word	0x20000004
 8005f28:	20000000 	.word	0x20000000
 8005f2c:	20000008 	.word	0x20000008

08005f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b089      	sub	sp, #36	; 0x24
 8005f34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f36:	4baf      	ldr	r3, [pc, #700]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f3e:	2b18      	cmp	r3, #24
 8005f40:	f200 814e 	bhi.w	80061e0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005f44:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4a:	bf00      	nop
 8005f4c:	08005fb1 	.word	0x08005fb1
 8005f50:	080061e1 	.word	0x080061e1
 8005f54:	080061e1 	.word	0x080061e1
 8005f58:	080061e1 	.word	0x080061e1
 8005f5c:	080061e1 	.word	0x080061e1
 8005f60:	080061e1 	.word	0x080061e1
 8005f64:	080061e1 	.word	0x080061e1
 8005f68:	080061e1 	.word	0x080061e1
 8005f6c:	08005fd7 	.word	0x08005fd7
 8005f70:	080061e1 	.word	0x080061e1
 8005f74:	080061e1 	.word	0x080061e1
 8005f78:	080061e1 	.word	0x080061e1
 8005f7c:	080061e1 	.word	0x080061e1
 8005f80:	080061e1 	.word	0x080061e1
 8005f84:	080061e1 	.word	0x080061e1
 8005f88:	080061e1 	.word	0x080061e1
 8005f8c:	08005fdd 	.word	0x08005fdd
 8005f90:	080061e1 	.word	0x080061e1
 8005f94:	080061e1 	.word	0x080061e1
 8005f98:	080061e1 	.word	0x080061e1
 8005f9c:	080061e1 	.word	0x080061e1
 8005fa0:	080061e1 	.word	0x080061e1
 8005fa4:	080061e1 	.word	0x080061e1
 8005fa8:	080061e1 	.word	0x080061e1
 8005fac:	08005fe3 	.word	0x08005fe3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fb0:	4b90      	ldr	r3, [pc, #576]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0320 	and.w	r3, r3, #32
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d009      	beq.n	8005fd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fbc:	4b8d      	ldr	r3, [pc, #564]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	08db      	lsrs	r3, r3, #3
 8005fc2:	f003 0303 	and.w	r3, r3, #3
 8005fc6:	4a8c      	ldr	r2, [pc, #560]	; (80061f8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fcc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005fce:	e10a      	b.n	80061e6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005fd0:	4b89      	ldr	r3, [pc, #548]	; (80061f8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005fd2:	61bb      	str	r3, [r7, #24]
    break;
 8005fd4:	e107      	b.n	80061e6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005fd6:	4b89      	ldr	r3, [pc, #548]	; (80061fc <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005fd8:	61bb      	str	r3, [r7, #24]
    break;
 8005fda:	e104      	b.n	80061e6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005fdc:	4b88      	ldr	r3, [pc, #544]	; (8006200 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005fde:	61bb      	str	r3, [r7, #24]
    break;
 8005fe0:	e101      	b.n	80061e6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fe2:	4b84      	ldr	r3, [pc, #528]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005fec:	4b81      	ldr	r3, [pc, #516]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff0:	091b      	lsrs	r3, r3, #4
 8005ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ff6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005ff8:	4b7e      	ldr	r3, [pc, #504]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006002:	4b7c      	ldr	r3, [pc, #496]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006006:	08db      	lsrs	r3, r3, #3
 8006008:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	fb02 f303 	mul.w	r3, r2, r3
 8006012:	ee07 3a90 	vmov	s15, r3
 8006016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 80da 	beq.w	80061da <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d05a      	beq.n	80060e2 <HAL_RCC_GetSysClockFreq+0x1b2>
 800602c:	2b01      	cmp	r3, #1
 800602e:	d302      	bcc.n	8006036 <HAL_RCC_GetSysClockFreq+0x106>
 8006030:	2b02      	cmp	r3, #2
 8006032:	d078      	beq.n	8006126 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006034:	e099      	b.n	800616a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006036:	4b6f      	ldr	r3, [pc, #444]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0320 	and.w	r3, r3, #32
 800603e:	2b00      	cmp	r3, #0
 8006040:	d02d      	beq.n	800609e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006042:	4b6c      	ldr	r3, [pc, #432]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	08db      	lsrs	r3, r3, #3
 8006048:	f003 0303 	and.w	r3, r3, #3
 800604c:	4a6a      	ldr	r2, [pc, #424]	; (80061f8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800604e:	fa22 f303 	lsr.w	r3, r2, r3
 8006052:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	ee07 3a90 	vmov	s15, r3
 8006064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606c:	4b61      	ldr	r3, [pc, #388]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800606e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006074:	ee07 3a90 	vmov	s15, r3
 8006078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006080:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006204 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006084:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006088:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006090:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006098:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800609c:	e087      	b.n	80061ae <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	ee07 3a90 	vmov	s15, r3
 80060a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006208 <HAL_RCC_GetSysClockFreq+0x2d8>
 80060ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b0:	4b50      	ldr	r3, [pc, #320]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b8:	ee07 3a90 	vmov	s15, r3
 80060bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80060c4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006204 <HAL_RCC_GetSysClockFreq+0x2d4>
 80060c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060e0:	e065      	b.n	80061ae <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	ee07 3a90 	vmov	s15, r3
 80060e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ec:	eddf 6a47 	vldr	s13, [pc, #284]	; 800620c <HAL_RCC_GetSysClockFreq+0x2dc>
 80060f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060f4:	4b3f      	ldr	r3, [pc, #252]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060fc:	ee07 3a90 	vmov	s15, r3
 8006100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006104:	ed97 6a02 	vldr	s12, [r7, #8]
 8006108:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006204 <HAL_RCC_GetSysClockFreq+0x2d4>
 800610c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006110:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006114:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006118:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800611c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006120:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006124:	e043      	b.n	80061ae <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	ee07 3a90 	vmov	s15, r3
 800612c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006130:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006210 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006134:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006138:	4b2e      	ldr	r3, [pc, #184]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800613a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006140:	ee07 3a90 	vmov	s15, r3
 8006144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006148:	ed97 6a02 	vldr	s12, [r7, #8]
 800614c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006204 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006150:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006154:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006158:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800615c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006164:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006168:	e021      	b.n	80061ae <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	ee07 3a90 	vmov	s15, r3
 8006170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006174:	eddf 6a25 	vldr	s13, [pc, #148]	; 800620c <HAL_RCC_GetSysClockFreq+0x2dc>
 8006178:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800617c:	4b1d      	ldr	r3, [pc, #116]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006184:	ee07 3a90 	vmov	s15, r3
 8006188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800618c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006190:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006204 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006194:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006198:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800619c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061ac:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80061ae:	4b11      	ldr	r3, [pc, #68]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	0a5b      	lsrs	r3, r3, #9
 80061b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061b8:	3301      	adds	r3, #1
 80061ba:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	ee07 3a90 	vmov	s15, r3
 80061c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80061ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061d2:	ee17 3a90 	vmov	r3, s15
 80061d6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80061d8:	e005      	b.n	80061e6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	61bb      	str	r3, [r7, #24]
    break;
 80061de:	e002      	b.n	80061e6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80061e0:	4b06      	ldr	r3, [pc, #24]	; (80061fc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80061e2:	61bb      	str	r3, [r7, #24]
    break;
 80061e4:	bf00      	nop
  }

  return sysclockfreq;
 80061e6:	69bb      	ldr	r3, [r7, #24]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3724      	adds	r7, #36	; 0x24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	58024400 	.word	0x58024400
 80061f8:	03d09000 	.word	0x03d09000
 80061fc:	003d0900 	.word	0x003d0900
 8006200:	017d7840 	.word	0x017d7840
 8006204:	46000000 	.word	0x46000000
 8006208:	4c742400 	.word	0x4c742400
 800620c:	4a742400 	.word	0x4a742400
 8006210:	4bbebc20 	.word	0x4bbebc20

08006214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800621a:	f7ff fe89 	bl	8005f30 <HAL_RCC_GetSysClockFreq>
 800621e:	4601      	mov	r1, r0
 8006220:	4b10      	ldr	r3, [pc, #64]	; (8006264 <HAL_RCC_GetHCLKFreq+0x50>)
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	0a1b      	lsrs	r3, r3, #8
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	4a0f      	ldr	r2, [pc, #60]	; (8006268 <HAL_RCC_GetHCLKFreq+0x54>)
 800622c:	5cd3      	ldrb	r3, [r2, r3]
 800622e:	f003 031f 	and.w	r3, r3, #31
 8006232:	fa21 f303 	lsr.w	r3, r1, r3
 8006236:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006238:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <HAL_RCC_GetHCLKFreq+0x50>)
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	f003 030f 	and.w	r3, r3, #15
 8006240:	4a09      	ldr	r2, [pc, #36]	; (8006268 <HAL_RCC_GetHCLKFreq+0x54>)
 8006242:	5cd3      	ldrb	r3, [r2, r3]
 8006244:	f003 031f 	and.w	r3, r3, #31
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	fa22 f303 	lsr.w	r3, r2, r3
 800624e:	4a07      	ldr	r2, [pc, #28]	; (800626c <HAL_RCC_GetHCLKFreq+0x58>)
 8006250:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006252:	4a07      	ldr	r2, [pc, #28]	; (8006270 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006258:	4b04      	ldr	r3, [pc, #16]	; (800626c <HAL_RCC_GetHCLKFreq+0x58>)
 800625a:	681b      	ldr	r3, [r3, #0]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	58024400 	.word	0x58024400
 8006268:	0800d278 	.word	0x0800d278
 800626c:	20000004 	.word	0x20000004
 8006270:	20000000 	.word	0x20000000

08006274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006278:	f7ff ffcc 	bl	8006214 <HAL_RCC_GetHCLKFreq>
 800627c:	4601      	mov	r1, r0
 800627e:	4b06      	ldr	r3, [pc, #24]	; (8006298 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	091b      	lsrs	r3, r3, #4
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	4a04      	ldr	r2, [pc, #16]	; (800629c <HAL_RCC_GetPCLK1Freq+0x28>)
 800628a:	5cd3      	ldrb	r3, [r2, r3]
 800628c:	f003 031f 	and.w	r3, r3, #31
 8006290:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006294:	4618      	mov	r0, r3
 8006296:	bd80      	pop	{r7, pc}
 8006298:	58024400 	.word	0x58024400
 800629c:	0800d278 	.word	0x0800d278

080062a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80062a4:	f7ff ffb6 	bl	8006214 <HAL_RCC_GetHCLKFreq>
 80062a8:	4601      	mov	r1, r0
 80062aa:	4b06      	ldr	r3, [pc, #24]	; (80062c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	0a1b      	lsrs	r3, r3, #8
 80062b0:	f003 0307 	and.w	r3, r3, #7
 80062b4:	4a04      	ldr	r2, [pc, #16]	; (80062c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062b6:	5cd3      	ldrb	r3, [r2, r3]
 80062b8:	f003 031f 	and.w	r3, r3, #31
 80062bc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	58024400 	.word	0x58024400
 80062c8:	0800d278 	.word	0x0800d278

080062cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062d4:	2300      	movs	r3, #0
 80062d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062d8:	2300      	movs	r3, #0
 80062da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d03d      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062f0:	d013      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80062f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062f6:	d802      	bhi.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x32>
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d007      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x40>
 80062fc:	e01f      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80062fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006302:	d013      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006304:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006308:	d01c      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800630a:	e018      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800630c:	4baf      	ldr	r3, [pc, #700]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	4aae      	ldr	r2, [pc, #696]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006316:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006318:	e015      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3304      	adds	r3, #4
 800631e:	2102      	movs	r1, #2
 8006320:	4618      	mov	r0, r3
 8006322:	f001 f95f 	bl	80075e4 <RCCEx_PLL2_Config>
 8006326:	4603      	mov	r3, r0
 8006328:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800632a:	e00c      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3324      	adds	r3, #36	; 0x24
 8006330:	2102      	movs	r1, #2
 8006332:	4618      	mov	r0, r3
 8006334:	f001 fa08 	bl	8007748 <RCCEx_PLL3_Config>
 8006338:	4603      	mov	r3, r0
 800633a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800633c:	e003      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	75fb      	strb	r3, [r7, #23]
      break;
 8006342:	e000      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006344:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006346:	7dfb      	ldrb	r3, [r7, #23]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d109      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800634c:	4b9f      	ldr	r3, [pc, #636]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800634e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006350:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006358:	499c      	ldr	r1, [pc, #624]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800635a:	4313      	orrs	r3, r2
 800635c:	650b      	str	r3, [r1, #80]	; 0x50
 800635e:	e001      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006360:	7dfb      	ldrb	r3, [r7, #23]
 8006362:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636c:	2b00      	cmp	r3, #0
 800636e:	d03d      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006374:	2b04      	cmp	r3, #4
 8006376:	d826      	bhi.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006378:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800637a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637e:	bf00      	nop
 8006380:	08006395 	.word	0x08006395
 8006384:	080063a3 	.word	0x080063a3
 8006388:	080063b5 	.word	0x080063b5
 800638c:	080063cd 	.word	0x080063cd
 8006390:	080063cd 	.word	0x080063cd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006394:	4b8d      	ldr	r3, [pc, #564]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	4a8c      	ldr	r2, [pc, #560]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800639a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800639e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063a0:	e015      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	3304      	adds	r3, #4
 80063a6:	2100      	movs	r1, #0
 80063a8:	4618      	mov	r0, r3
 80063aa:	f001 f91b 	bl	80075e4 <RCCEx_PLL2_Config>
 80063ae:	4603      	mov	r3, r0
 80063b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063b2:	e00c      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	3324      	adds	r3, #36	; 0x24
 80063b8:	2100      	movs	r1, #0
 80063ba:	4618      	mov	r0, r3
 80063bc:	f001 f9c4 	bl	8007748 <RCCEx_PLL3_Config>
 80063c0:	4603      	mov	r3, r0
 80063c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063c4:	e003      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	75fb      	strb	r3, [r7, #23]
      break;
 80063ca:	e000      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80063cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d109      	bne.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063d4:	4b7d      	ldr	r3, [pc, #500]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d8:	f023 0207 	bic.w	r2, r3, #7
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e0:	497a      	ldr	r1, [pc, #488]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	650b      	str	r3, [r1, #80]	; 0x50
 80063e6:	e001      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
 80063ea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d03e      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fc:	2b80      	cmp	r3, #128	; 0x80
 80063fe:	d01c      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006400:	2b80      	cmp	r3, #128	; 0x80
 8006402:	d804      	bhi.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006404:	2b00      	cmp	r3, #0
 8006406:	d008      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006408:	2b40      	cmp	r3, #64	; 0x40
 800640a:	d00d      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800640c:	e01e      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800640e:	2bc0      	cmp	r3, #192	; 0xc0
 8006410:	d01f      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006416:	d01e      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006418:	e018      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800641a:	4b6c      	ldr	r3, [pc, #432]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800641c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641e:	4a6b      	ldr	r2, [pc, #428]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006424:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006426:	e017      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3304      	adds	r3, #4
 800642c:	2100      	movs	r1, #0
 800642e:	4618      	mov	r0, r3
 8006430:	f001 f8d8 	bl	80075e4 <RCCEx_PLL2_Config>
 8006434:	4603      	mov	r3, r0
 8006436:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006438:	e00e      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	3324      	adds	r3, #36	; 0x24
 800643e:	2100      	movs	r1, #0
 8006440:	4618      	mov	r0, r3
 8006442:	f001 f981 	bl	8007748 <RCCEx_PLL3_Config>
 8006446:	4603      	mov	r3, r0
 8006448:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800644a:	e005      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	75fb      	strb	r3, [r7, #23]
      break;
 8006450:	e002      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006452:	bf00      	nop
 8006454:	e000      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006456:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006458:	7dfb      	ldrb	r3, [r7, #23]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d109      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800645e:	4b5b      	ldr	r3, [pc, #364]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006462:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800646a:	4958      	ldr	r1, [pc, #352]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800646c:	4313      	orrs	r3, r2
 800646e:	650b      	str	r3, [r1, #80]	; 0x50
 8006470:	e001      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006472:	7dfb      	ldrb	r3, [r7, #23]
 8006474:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800647e:	2b00      	cmp	r3, #0
 8006480:	d044      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800648c:	d01f      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x202>
 800648e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006492:	d805      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00a      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800649c:	d00e      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800649e:	e01f      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80064a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064a4:	d01f      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80064a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064aa:	d01e      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80064ac:	e018      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064ae:	4b47      	ldr	r3, [pc, #284]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b2:	4a46      	ldr	r2, [pc, #280]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064ba:	e017      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3304      	adds	r3, #4
 80064c0:	2100      	movs	r1, #0
 80064c2:	4618      	mov	r0, r3
 80064c4:	f001 f88e 	bl	80075e4 <RCCEx_PLL2_Config>
 80064c8:	4603      	mov	r3, r0
 80064ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80064cc:	e00e      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	3324      	adds	r3, #36	; 0x24
 80064d2:	2100      	movs	r1, #0
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 f937 	bl	8007748 <RCCEx_PLL3_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064de:	e005      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	75fb      	strb	r3, [r7, #23]
      break;
 80064e4:	e002      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80064e6:	bf00      	nop
 80064e8:	e000      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80064ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ec:	7dfb      	ldrb	r3, [r7, #23]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10a      	bne.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80064f2:	4b36      	ldr	r3, [pc, #216]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006500:	4932      	ldr	r1, [pc, #200]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006502:	4313      	orrs	r3, r2
 8006504:	658b      	str	r3, [r1, #88]	; 0x58
 8006506:	e001      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006508:	7dfb      	ldrb	r3, [r7, #23]
 800650a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006514:	2b00      	cmp	r3, #0
 8006516:	d044      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800651e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006522:	d01f      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006524:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006528:	d805      	bhi.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800652e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006532:	d00e      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006534:	e01f      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006536:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800653a:	d01f      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800653c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006540:	d01e      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006542:	e018      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006544:	4b21      	ldr	r3, [pc, #132]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	4a20      	ldr	r2, [pc, #128]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800654a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800654e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006550:	e017      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	3304      	adds	r3, #4
 8006556:	2100      	movs	r1, #0
 8006558:	4618      	mov	r0, r3
 800655a:	f001 f843 	bl	80075e4 <RCCEx_PLL2_Config>
 800655e:	4603      	mov	r3, r0
 8006560:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006562:	e00e      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3324      	adds	r3, #36	; 0x24
 8006568:	2100      	movs	r1, #0
 800656a:	4618      	mov	r0, r3
 800656c:	f001 f8ec 	bl	8007748 <RCCEx_PLL3_Config>
 8006570:	4603      	mov	r3, r0
 8006572:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006574:	e005      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	75fb      	strb	r3, [r7, #23]
      break;
 800657a:	e002      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800657c:	bf00      	nop
 800657e:	e000      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006580:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006582:	7dfb      	ldrb	r3, [r7, #23]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10a      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006588:	4b10      	ldr	r3, [pc, #64]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800658a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800658c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006596:	490d      	ldr	r1, [pc, #52]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006598:	4313      	orrs	r3, r2
 800659a:	658b      	str	r3, [r1, #88]	; 0x58
 800659c:	e001      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800659e:	7dfb      	ldrb	r3, [r7, #23]
 80065a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d035      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065b2:	2b10      	cmp	r3, #16
 80065b4:	d00c      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80065b6:	2b10      	cmp	r3, #16
 80065b8:	d802      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d01b      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80065be:	e017      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80065c0:	2b20      	cmp	r3, #32
 80065c2:	d00c      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x312>
 80065c4:	2b30      	cmp	r3, #48	; 0x30
 80065c6:	d018      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80065c8:	e012      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80065ca:	bf00      	nop
 80065cc:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065d0:	4baf      	ldr	r3, [pc, #700]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d4:	4aae      	ldr	r2, [pc, #696]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80065dc:	e00e      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	3304      	adds	r3, #4
 80065e2:	2102      	movs	r1, #2
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 fffd 	bl	80075e4 <RCCEx_PLL2_Config>
 80065ea:	4603      	mov	r3, r0
 80065ec:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80065ee:	e005      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	75fb      	strb	r3, [r7, #23]
      break;
 80065f4:	e002      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80065f6:	bf00      	nop
 80065f8:	e000      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80065fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065fc:	7dfb      	ldrb	r3, [r7, #23]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d109      	bne.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006602:	4ba3      	ldr	r3, [pc, #652]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006606:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800660e:	49a0      	ldr	r1, [pc, #640]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006610:	4313      	orrs	r3, r2
 8006612:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006614:	e001      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006616:	7dfb      	ldrb	r3, [r7, #23]
 8006618:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d042      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800662a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800662e:	d01f      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006634:	d805      	bhi.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663e:	d00e      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006640:	e01f      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006642:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006646:	d01f      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800664c:	d01e      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800664e:	e018      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006650:	4b8f      	ldr	r3, [pc, #572]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006654:	4a8e      	ldr	r2, [pc, #568]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800665a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800665c:	e017      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	3304      	adds	r3, #4
 8006662:	2100      	movs	r1, #0
 8006664:	4618      	mov	r0, r3
 8006666:	f000 ffbd 	bl	80075e4 <RCCEx_PLL2_Config>
 800666a:	4603      	mov	r3, r0
 800666c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800666e:	e00e      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	3324      	adds	r3, #36	; 0x24
 8006674:	2100      	movs	r1, #0
 8006676:	4618      	mov	r0, r3
 8006678:	f001 f866 	bl	8007748 <RCCEx_PLL3_Config>
 800667c:	4603      	mov	r3, r0
 800667e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006680:	e005      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	75fb      	strb	r3, [r7, #23]
      break;
 8006686:	e002      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006688:	bf00      	nop
 800668a:	e000      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800668c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800668e:	7dfb      	ldrb	r3, [r7, #23]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d109      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006694:	4b7e      	ldr	r3, [pc, #504]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006698:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066a0:	497b      	ldr	r1, [pc, #492]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	650b      	str	r3, [r1, #80]	; 0x50
 80066a6:	e001      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a8:	7dfb      	ldrb	r3, [r7, #23]
 80066aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d042      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066c0:	d01b      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80066c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066c6:	d805      	bhi.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d022      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80066cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d0:	d00a      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80066d2:	e01b      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x440>
 80066d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066d8:	d01d      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80066da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066de:	d01c      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80066e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066e4:	d01b      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x452>
 80066e6:	e011      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3304      	adds	r3, #4
 80066ec:	2101      	movs	r1, #1
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 ff78 	bl	80075e4 <RCCEx_PLL2_Config>
 80066f4:	4603      	mov	r3, r0
 80066f6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80066f8:	e012      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	3324      	adds	r3, #36	; 0x24
 80066fe:	2101      	movs	r1, #1
 8006700:	4618      	mov	r0, r3
 8006702:	f001 f821 	bl	8007748 <RCCEx_PLL3_Config>
 8006706:	4603      	mov	r3, r0
 8006708:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800670a:	e009      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	75fb      	strb	r3, [r7, #23]
      break;
 8006710:	e006      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006712:	bf00      	nop
 8006714:	e004      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006716:	bf00      	nop
 8006718:	e002      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800671a:	bf00      	nop
 800671c:	e000      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800671e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006720:	7dfb      	ldrb	r3, [r7, #23]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d109      	bne.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006726:	4b5a      	ldr	r3, [pc, #360]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800672a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006732:	4957      	ldr	r1, [pc, #348]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006734:	4313      	orrs	r3, r2
 8006736:	650b      	str	r3, [r1, #80]	; 0x50
 8006738:	e001      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673a:	7dfb      	ldrb	r3, [r7, #23]
 800673c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d044      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006754:	d01b      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800675a:	d805      	bhi.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800675c:	2b00      	cmp	r3, #0
 800675e:	d022      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006764:	d00a      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006766:	e01b      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800676c:	d01d      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800676e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006772:	d01c      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006774:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006778:	d01b      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800677a:	e011      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3304      	adds	r3, #4
 8006780:	2101      	movs	r1, #1
 8006782:	4618      	mov	r0, r3
 8006784:	f000 ff2e 	bl	80075e4 <RCCEx_PLL2_Config>
 8006788:	4603      	mov	r3, r0
 800678a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800678c:	e012      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	3324      	adds	r3, #36	; 0x24
 8006792:	2101      	movs	r1, #1
 8006794:	4618      	mov	r0, r3
 8006796:	f000 ffd7 	bl	8007748 <RCCEx_PLL3_Config>
 800679a:	4603      	mov	r3, r0
 800679c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800679e:	e009      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	75fb      	strb	r3, [r7, #23]
      break;
 80067a4:	e006      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80067a6:	bf00      	nop
 80067a8:	e004      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80067aa:	bf00      	nop
 80067ac:	e002      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80067ae:	bf00      	nop
 80067b0:	e000      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80067b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067b4:	7dfb      	ldrb	r3, [r7, #23]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10a      	bne.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80067ba:	4b35      	ldr	r3, [pc, #212]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067be:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067c8:	4931      	ldr	r1, [pc, #196]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	658b      	str	r3, [r1, #88]	; 0x58
 80067ce:	e001      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d0:	7dfb      	ldrb	r3, [r7, #23]
 80067d2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d02d      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067e8:	d005      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80067ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ee:	d009      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d013      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x550>
 80067f4:	e00f      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067f6:	4b26      	ldr	r3, [pc, #152]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fa:	4a25      	ldr	r2, [pc, #148]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006800:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006802:	e00c      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3304      	adds	r3, #4
 8006808:	2101      	movs	r1, #1
 800680a:	4618      	mov	r0, r3
 800680c:	f000 feea 	bl	80075e4 <RCCEx_PLL2_Config>
 8006810:	4603      	mov	r3, r0
 8006812:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006814:	e003      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	75fb      	strb	r3, [r7, #23]
      break;
 800681a:	e000      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800681c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800681e:	7dfb      	ldrb	r3, [r7, #23]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d109      	bne.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006824:	4b1a      	ldr	r3, [pc, #104]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006828:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006830:	4917      	ldr	r1, [pc, #92]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006832:	4313      	orrs	r3, r2
 8006834:	650b      	str	r3, [r1, #80]	; 0x50
 8006836:	e001      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006838:	7dfb      	ldrb	r3, [r7, #23]
 800683a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d035      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684c:	2b03      	cmp	r3, #3
 800684e:	d81b      	bhi.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006850:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006856:	bf00      	nop
 8006858:	08006895 	.word	0x08006895
 800685c:	08006869 	.word	0x08006869
 8006860:	08006877 	.word	0x08006877
 8006864:	08006895 	.word	0x08006895
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006868:	4b09      	ldr	r3, [pc, #36]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	4a08      	ldr	r2, [pc, #32]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800686e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006872:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006874:	e00f      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	3304      	adds	r3, #4
 800687a:	2102      	movs	r1, #2
 800687c:	4618      	mov	r0, r3
 800687e:	f000 feb1 	bl	80075e4 <RCCEx_PLL2_Config>
 8006882:	4603      	mov	r3, r0
 8006884:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006886:	e006      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	75fb      	strb	r3, [r7, #23]
      break;
 800688c:	e003      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800688e:	bf00      	nop
 8006890:	58024400 	.word	0x58024400
      break;
 8006894:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006896:	7dfb      	ldrb	r3, [r7, #23]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d109      	bne.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800689c:	4bba      	ldr	r3, [pc, #744]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800689e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a0:	f023 0203 	bic.w	r2, r3, #3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a8:	49b7      	ldr	r1, [pc, #732]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068ae:	e001      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b0:	7dfb      	ldrb	r3, [r7, #23]
 80068b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 8086 	beq.w	80069ce <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068c2:	4bb2      	ldr	r3, [pc, #712]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4ab1      	ldr	r2, [pc, #708]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80068c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068ce:	f7fe f8f3 	bl	8004ab8 <HAL_GetTick>
 80068d2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068d4:	e009      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068d6:	f7fe f8ef 	bl	8004ab8 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b64      	cmp	r3, #100	; 0x64
 80068e2:	d902      	bls.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	75fb      	strb	r3, [r7, #23]
        break;
 80068e8:	e005      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068ea:	4ba8      	ldr	r3, [pc, #672]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0ef      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80068f6:	7dfb      	ldrb	r3, [r7, #23]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d166      	bne.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80068fc:	4ba2      	ldr	r3, [pc, #648]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006906:	4053      	eors	r3, r2
 8006908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800690c:	2b00      	cmp	r3, #0
 800690e:	d013      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006910:	4b9d      	ldr	r3, [pc, #628]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006918:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800691a:	4b9b      	ldr	r3, [pc, #620]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800691c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691e:	4a9a      	ldr	r2, [pc, #616]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006924:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006926:	4b98      	ldr	r3, [pc, #608]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692a:	4a97      	ldr	r2, [pc, #604]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800692c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006930:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006932:	4a95      	ldr	r2, [pc, #596]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800693e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006942:	d115      	bne.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006944:	f7fe f8b8 	bl	8004ab8 <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800694a:	e00b      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800694c:	f7fe f8b4 	bl	8004ab8 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	f241 3288 	movw	r2, #5000	; 0x1388
 800695a:	4293      	cmp	r3, r2
 800695c:	d902      	bls.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	75fb      	strb	r3, [r7, #23]
            break;
 8006962:	e005      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006964:	4b88      	ldr	r3, [pc, #544]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0ed      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8006970:	7dfb      	ldrb	r3, [r7, #23]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d126      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800697c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006980:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006984:	d10d      	bne.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8006986:	4b80      	ldr	r3, [pc, #512]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006994:	0919      	lsrs	r1, r3, #4
 8006996:	4b7e      	ldr	r3, [pc, #504]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8006998:	400b      	ands	r3, r1
 800699a:	497b      	ldr	r1, [pc, #492]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800699c:	4313      	orrs	r3, r2
 800699e:	610b      	str	r3, [r1, #16]
 80069a0:	e005      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80069a2:	4b79      	ldr	r3, [pc, #484]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	4a78      	ldr	r2, [pc, #480]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80069ac:	6113      	str	r3, [r2, #16]
 80069ae:	4b76      	ldr	r3, [pc, #472]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069bc:	4972      	ldr	r1, [pc, #456]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	670b      	str	r3, [r1, #112]	; 0x70
 80069c2:	e004      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
 80069c6:	75bb      	strb	r3, [r7, #22]
 80069c8:	e001      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
 80069cc:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d07d      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069de:	2b28      	cmp	r3, #40	; 0x28
 80069e0:	d866      	bhi.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80069e2:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80069e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e8:	08006ab7 	.word	0x08006ab7
 80069ec:	08006ab1 	.word	0x08006ab1
 80069f0:	08006ab1 	.word	0x08006ab1
 80069f4:	08006ab1 	.word	0x08006ab1
 80069f8:	08006ab1 	.word	0x08006ab1
 80069fc:	08006ab1 	.word	0x08006ab1
 8006a00:	08006ab1 	.word	0x08006ab1
 8006a04:	08006ab1 	.word	0x08006ab1
 8006a08:	08006a8d 	.word	0x08006a8d
 8006a0c:	08006ab1 	.word	0x08006ab1
 8006a10:	08006ab1 	.word	0x08006ab1
 8006a14:	08006ab1 	.word	0x08006ab1
 8006a18:	08006ab1 	.word	0x08006ab1
 8006a1c:	08006ab1 	.word	0x08006ab1
 8006a20:	08006ab1 	.word	0x08006ab1
 8006a24:	08006ab1 	.word	0x08006ab1
 8006a28:	08006a9f 	.word	0x08006a9f
 8006a2c:	08006ab1 	.word	0x08006ab1
 8006a30:	08006ab1 	.word	0x08006ab1
 8006a34:	08006ab1 	.word	0x08006ab1
 8006a38:	08006ab1 	.word	0x08006ab1
 8006a3c:	08006ab1 	.word	0x08006ab1
 8006a40:	08006ab1 	.word	0x08006ab1
 8006a44:	08006ab1 	.word	0x08006ab1
 8006a48:	08006ab7 	.word	0x08006ab7
 8006a4c:	08006ab1 	.word	0x08006ab1
 8006a50:	08006ab1 	.word	0x08006ab1
 8006a54:	08006ab1 	.word	0x08006ab1
 8006a58:	08006ab1 	.word	0x08006ab1
 8006a5c:	08006ab1 	.word	0x08006ab1
 8006a60:	08006ab1 	.word	0x08006ab1
 8006a64:	08006ab1 	.word	0x08006ab1
 8006a68:	08006ab7 	.word	0x08006ab7
 8006a6c:	08006ab1 	.word	0x08006ab1
 8006a70:	08006ab1 	.word	0x08006ab1
 8006a74:	08006ab1 	.word	0x08006ab1
 8006a78:	08006ab1 	.word	0x08006ab1
 8006a7c:	08006ab1 	.word	0x08006ab1
 8006a80:	08006ab1 	.word	0x08006ab1
 8006a84:	08006ab1 	.word	0x08006ab1
 8006a88:	08006ab7 	.word	0x08006ab7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	2101      	movs	r1, #1
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 fda6 	bl	80075e4 <RCCEx_PLL2_Config>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a9c:	e00c      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	3324      	adds	r3, #36	; 0x24
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 fe4f 	bl	8007748 <RCCEx_PLL3_Config>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006aae:	e003      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab4:	e000      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006ab6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ab8:	7dfb      	ldrb	r3, [r7, #23]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d109      	bne.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006abe:	4b32      	ldr	r3, [pc, #200]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006aca:	492f      	ldr	r1, [pc, #188]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	654b      	str	r3, [r1, #84]	; 0x54
 8006ad0:	e001      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
 8006ad4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d037      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ae6:	2b05      	cmp	r3, #5
 8006ae8:	d820      	bhi.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006aea:	a201      	add	r2, pc, #4	; (adr r2, 8006af0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af0:	08006b33 	.word	0x08006b33
 8006af4:	08006b09 	.word	0x08006b09
 8006af8:	08006b1b 	.word	0x08006b1b
 8006afc:	08006b33 	.word	0x08006b33
 8006b00:	08006b33 	.word	0x08006b33
 8006b04:	08006b33 	.word	0x08006b33
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fd68 	bl	80075e4 <RCCEx_PLL2_Config>
 8006b14:	4603      	mov	r3, r0
 8006b16:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b18:	e00c      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	3324      	adds	r3, #36	; 0x24
 8006b1e:	2101      	movs	r1, #1
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 fe11 	bl	8007748 <RCCEx_PLL3_Config>
 8006b26:	4603      	mov	r3, r0
 8006b28:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b2a:	e003      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b30:	e000      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006b32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b34:	7dfb      	ldrb	r3, [r7, #23]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d109      	bne.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b3a:	4b13      	ldr	r3, [pc, #76]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b3e:	f023 0207 	bic.w	r2, r3, #7
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b46:	4910      	ldr	r1, [pc, #64]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	654b      	str	r3, [r1, #84]	; 0x54
 8006b4c:	e001      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b4e:	7dfb      	ldrb	r3, [r7, #23]
 8006b50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0304 	and.w	r3, r3, #4
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d040      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b64:	2b05      	cmp	r3, #5
 8006b66:	d827      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006b68:	a201      	add	r2, pc, #4	; (adr r2, 8006b70 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6e:	bf00      	nop
 8006b70:	08006bbf 	.word	0x08006bbf
 8006b74:	08006b95 	.word	0x08006b95
 8006b78:	08006ba7 	.word	0x08006ba7
 8006b7c:	08006bbf 	.word	0x08006bbf
 8006b80:	08006bbf 	.word	0x08006bbf
 8006b84:	08006bbf 	.word	0x08006bbf
 8006b88:	58024400 	.word	0x58024400
 8006b8c:	58024800 	.word	0x58024800
 8006b90:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	3304      	adds	r3, #4
 8006b98:	2101      	movs	r1, #1
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fd22 	bl	80075e4 <RCCEx_PLL2_Config>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006ba4:	e00c      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	3324      	adds	r3, #36	; 0x24
 8006baa:	2101      	movs	r1, #1
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 fdcb 	bl	8007748 <RCCEx_PLL3_Config>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bb6:	e003      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	75fb      	strb	r3, [r7, #23]
      break;
 8006bbc:	e000      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006bbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bc0:	7dfb      	ldrb	r3, [r7, #23]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10a      	bne.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bc6:	4bb2      	ldr	r3, [pc, #712]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bca:	f023 0207 	bic.w	r2, r3, #7
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd4:	49ae      	ldr	r1, [pc, #696]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	658b      	str	r3, [r1, #88]	; 0x58
 8006bda:	e001      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
 8006bde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d044      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bf6:	d01b      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bfc:	d805      	bhi.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d022      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006c02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c06:	d00a      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006c08:	e01b      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0e:	d01d      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c14:	d01c      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006c16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c1a:	d01b      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006c1c:	e011      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	3304      	adds	r3, #4
 8006c22:	2100      	movs	r1, #0
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 fcdd 	bl	80075e4 <RCCEx_PLL2_Config>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c2e:	e012      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	3324      	adds	r3, #36	; 0x24
 8006c34:	2102      	movs	r1, #2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fd86 	bl	8007748 <RCCEx_PLL3_Config>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c40:	e009      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	75fb      	strb	r3, [r7, #23]
      break;
 8006c46:	e006      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c48:	bf00      	nop
 8006c4a:	e004      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c4c:	bf00      	nop
 8006c4e:	e002      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c50:	bf00      	nop
 8006c52:	e000      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c56:	7dfb      	ldrb	r3, [r7, #23]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10a      	bne.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c5c:	4b8c      	ldr	r3, [pc, #560]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c60:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c6a:	4989      	ldr	r1, [pc, #548]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	654b      	str	r3, [r1, #84]	; 0x54
 8006c70:	e001      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c72:	7dfb      	ldrb	r3, [r7, #23]
 8006c74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d044      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c8c:	d01b      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c92:	d805      	bhi.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d022      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c9c:	d00a      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006c9e:	e01b      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ca4:	d01d      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006ca6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006caa:	d01c      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006cac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cb0:	d01b      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006cb2:	e011      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	2100      	movs	r1, #0
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fc92 	bl	80075e4 <RCCEx_PLL2_Config>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006cc4:	e012      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3324      	adds	r3, #36	; 0x24
 8006cca:	2102      	movs	r1, #2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fd3b 	bl	8007748 <RCCEx_PLL3_Config>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006cd6:	e009      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	75fb      	strb	r3, [r7, #23]
      break;
 8006cdc:	e006      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006cde:	bf00      	nop
 8006ce0:	e004      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006ce2:	bf00      	nop
 8006ce4:	e002      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006ce6:	bf00      	nop
 8006ce8:	e000      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10a      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cf2:	4b67      	ldr	r3, [pc, #412]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d00:	4963      	ldr	r1, [pc, #396]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	658b      	str	r3, [r1, #88]	; 0x58
 8006d06:	e001      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
 8006d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d044      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d22:	d01b      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d28:	d805      	bhi.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d022      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d32:	d00a      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006d34:	e01b      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d3a:	d01d      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006d3c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d40:	d01c      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006d42:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d46:	d01b      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006d48:	e011      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	2100      	movs	r1, #0
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 fc47 	bl	80075e4 <RCCEx_PLL2_Config>
 8006d56:	4603      	mov	r3, r0
 8006d58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d5a:	e012      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3324      	adds	r3, #36	; 0x24
 8006d60:	2102      	movs	r1, #2
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fcf0 	bl	8007748 <RCCEx_PLL3_Config>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d6c:	e009      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	75fb      	strb	r3, [r7, #23]
      break;
 8006d72:	e006      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d74:	bf00      	nop
 8006d76:	e004      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d78:	bf00      	nop
 8006d7a:	e002      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d7c:	bf00      	nop
 8006d7e:	e000      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d82:	7dfb      	ldrb	r3, [r7, #23]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10a      	bne.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006d88:	4b41      	ldr	r3, [pc, #260]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d8c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d96:	493e      	ldr	r1, [pc, #248]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	658b      	str	r3, [r1, #88]	; 0x58
 8006d9c:	e001      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
 8006da0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0308 	and.w	r3, r3, #8
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d01a      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db8:	d10a      	bne.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	3324      	adds	r3, #36	; 0x24
 8006dbe:	2102      	movs	r1, #2
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 fcc1 	bl	8007748 <RCCEx_PLL3_Config>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006dd0:	4b2f      	ldr	r3, [pc, #188]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dde:	492c      	ldr	r1, [pc, #176]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0310 	and.w	r3, r3, #16
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d01a      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dfa:	d10a      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	3324      	adds	r3, #36	; 0x24
 8006e00:	2102      	movs	r1, #2
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 fca0 	bl	8007748 <RCCEx_PLL3_Config>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e12:	4b1f      	ldr	r3, [pc, #124]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e20:	491b      	ldr	r1, [pc, #108]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d032      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e3c:	d00d      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006e3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e42:	d016      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d111      	bne.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 fbc8 	bl	80075e4 <RCCEx_PLL2_Config>
 8006e54:	4603      	mov	r3, r0
 8006e56:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e58:	e00c      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	3324      	adds	r3, #36	; 0x24
 8006e5e:	2102      	movs	r1, #2
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 fc71 	bl	8007748 <RCCEx_PLL3_Config>
 8006e66:	4603      	mov	r3, r0
 8006e68:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e6a:	e003      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e70:	e000      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006e72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e74:	7dfb      	ldrb	r3, [r7, #23]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10c      	bne.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e7a:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e88:	4901      	ldr	r1, [pc, #4]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	658b      	str	r3, [r1, #88]	; 0x58
 8006e8e:	e003      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006e90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e94:	7dfb      	ldrb	r3, [r7, #23]
 8006e96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d02f      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eae:	d00c      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006eb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006eb4:	d015      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eba:	d10f      	bne.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ebc:	4b71      	ldr	r3, [pc, #452]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	4a70      	ldr	r2, [pc, #448]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006ec8:	e00c      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	3324      	adds	r3, #36	; 0x24
 8006ece:	2101      	movs	r1, #1
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fc39 	bl	8007748 <RCCEx_PLL3_Config>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006eda:	e003      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee0:	e000      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006ee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10a      	bne.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006eea:	4b66      	ldr	r3, [pc, #408]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ef8:	4962      	ldr	r1, [pc, #392]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	654b      	str	r3, [r1, #84]	; 0x54
 8006efe:	e001      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d029      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f1c:	d007      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006f1e:	e00f      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f20:	4b58      	ldr	r3, [pc, #352]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	4a57      	ldr	r2, [pc, #348]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f2c:	e00b      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	3304      	adds	r3, #4
 8006f32:	2102      	movs	r1, #2
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 fb55 	bl	80075e4 <RCCEx_PLL2_Config>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f3e:	e002      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	75fb      	strb	r3, [r7, #23]
      break;
 8006f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d109      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f4c:	4b4d      	ldr	r3, [pc, #308]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f58:	494a      	ldr	r1, [pc, #296]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f5e:	e001      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
 8006f62:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00a      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3324      	adds	r3, #36	; 0x24
 8006f74:	2102      	movs	r1, #2
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fbe6 	bl	8007748 <RCCEx_PLL3_Config>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d02f      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f9a:	d00c      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fa0:	d802      	bhi.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d011      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006fa6:	e00d      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fac:	d00f      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006fae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fb2:	d00e      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006fb4:	e006      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb6:	4b33      	ldr	r3, [pc, #204]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fba:	4a32      	ldr	r2, [pc, #200]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006fc2:	e007      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc8:	e004      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006fca:	bf00      	nop
 8006fcc:	e002      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006fce:	bf00      	nop
 8006fd0:	e000      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fd4:	7dfb      	ldrb	r3, [r7, #23]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d109      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fda:	4b2a      	ldr	r3, [pc, #168]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fe6:	4927      	ldr	r1, [pc, #156]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	654b      	str	r3, [r1, #84]	; 0x54
 8006fec:	e001      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fee:	7dfb      	ldrb	r3, [r7, #23]
 8006ff0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d008      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ffe:	4b21      	ldr	r3, [pc, #132]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007002:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700a:	491e      	ldr	r1, [pc, #120]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800700c:	4313      	orrs	r3, r2
 800700e:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d008      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800701c:	4b19      	ldr	r3, [pc, #100]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800701e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007020:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007028:	4916      	ldr	r1, [pc, #88]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800702a:	4313      	orrs	r3, r2
 800702c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00d      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800703a:	4b12      	ldr	r3, [pc, #72]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	4a11      	ldr	r2, [pc, #68]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007040:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007044:	6113      	str	r3, [r2, #16]
 8007046:	4b0f      	ldr	r3, [pc, #60]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007048:	691a      	ldr	r2, [r3, #16]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007050:	490c      	ldr	r1, [pc, #48]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007052:	4313      	orrs	r3, r2
 8007054:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	da08      	bge.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800705e:	4b09      	ldr	r3, [pc, #36]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007062:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800706a:	4906      	ldr	r1, [pc, #24]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800706c:	4313      	orrs	r3, r2
 800706e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007070:	7dbb      	ldrb	r3, [r7, #22]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	e000      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
}
 800707c:	4618      	mov	r0, r3
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	58024400 	.word	0x58024400

08007088 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800708c:	f7ff f8c2 	bl	8006214 <HAL_RCC_GetHCLKFreq>
 8007090:	4601      	mov	r1, r0
 8007092:	4b06      	ldr	r3, [pc, #24]	; (80070ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	091b      	lsrs	r3, r3, #4
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	4a04      	ldr	r2, [pc, #16]	; (80070b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800709e:	5cd3      	ldrb	r3, [r2, r3]
 80070a0:	f003 031f 	and.w	r3, r3, #31
 80070a4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	58024400 	.word	0x58024400
 80070b0:	0800d278 	.word	0x0800d278

080070b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b089      	sub	sp, #36	; 0x24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070bc:	4b9d      	ldr	r3, [pc, #628]	; (8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80070be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c0:	f003 0303 	and.w	r3, r3, #3
 80070c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80070c6:	4b9b      	ldr	r3, [pc, #620]	; (8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80070c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ca:	0b1b      	lsrs	r3, r3, #12
 80070cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80070d2:	4b98      	ldr	r3, [pc, #608]	; (8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80070d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d6:	091b      	lsrs	r3, r3, #4
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80070de:	4b95      	ldr	r3, [pc, #596]	; (8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80070e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e2:	08db      	lsrs	r3, r3, #3
 80070e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	fb02 f303 	mul.w	r3, r2, r3
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 810a 	beq.w	8007316 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d05a      	beq.n	80071be <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007108:	2b01      	cmp	r3, #1
 800710a:	d302      	bcc.n	8007112 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800710c:	2b02      	cmp	r3, #2
 800710e:	d078      	beq.n	8007202 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007110:	e099      	b.n	8007246 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007112:	4b88      	ldr	r3, [pc, #544]	; (8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0320 	and.w	r3, r3, #32
 800711a:	2b00      	cmp	r3, #0
 800711c:	d02d      	beq.n	800717a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800711e:	4b85      	ldr	r3, [pc, #532]	; (8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	08db      	lsrs	r3, r3, #3
 8007124:	f003 0303 	and.w	r3, r3, #3
 8007128:	4a83      	ldr	r2, [pc, #524]	; (8007338 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800712a:	fa22 f303 	lsr.w	r3, r2, r3
 800712e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	ee07 3a90 	vmov	s15, r3
 8007140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007148:	4b7a      	ldr	r3, [pc, #488]	; (8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800714a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007150:	ee07 3a90 	vmov	s15, r3
 8007154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007158:	ed97 6a03 	vldr	s12, [r7, #12]
 800715c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800733c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007160:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007164:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007168:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800716c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007174:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007178:	e087      	b.n	800728a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	ee07 3a90 	vmov	s15, r3
 8007180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007184:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007340 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007188:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800718c:	4b69      	ldr	r3, [pc, #420]	; (8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800718e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007194:	ee07 3a90 	vmov	s15, r3
 8007198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719c:	ed97 6a03 	vldr	s12, [r7, #12]
 80071a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800733c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80071a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071bc:	e065      	b.n	800728a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	ee07 3a90 	vmov	s15, r3
 80071c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80071cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d0:	4b58      	ldr	r3, [pc, #352]	; (8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80071d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d8:	ee07 3a90 	vmov	s15, r3
 80071dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80071e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800733c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80071e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007200:	e043      	b.n	800728a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	ee07 3a90 	vmov	s15, r3
 8007208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007210:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007214:	4b47      	ldr	r3, [pc, #284]	; (8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721c:	ee07 3a90 	vmov	s15, r3
 8007220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007224:	ed97 6a03 	vldr	s12, [r7, #12]
 8007228:	eddf 5a44 	vldr	s11, [pc, #272]	; 800733c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800722c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007230:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007234:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007238:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800723c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007240:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007244:	e021      	b.n	800728a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	ee07 3a90 	vmov	s15, r3
 800724c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007250:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007254:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007258:	4b36      	ldr	r3, [pc, #216]	; (8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800725a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007260:	ee07 3a90 	vmov	s15, r3
 8007264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007268:	ed97 6a03 	vldr	s12, [r7, #12]
 800726c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800733c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007270:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007274:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007278:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800727c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007284:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007288:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800728a:	4b2a      	ldr	r3, [pc, #168]	; (8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728e:	0a5b      	lsrs	r3, r3, #9
 8007290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007294:	ee07 3a90 	vmov	s15, r3
 8007298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80072a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072b0:	ee17 2a90 	vmov	r2, s15
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80072b8:	4b1e      	ldr	r3, [pc, #120]	; (8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80072ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072bc:	0c1b      	lsrs	r3, r3, #16
 80072be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072c2:	ee07 3a90 	vmov	s15, r3
 80072c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80072d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072de:	ee17 2a90 	vmov	r2, s15
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80072e6:	4b13      	ldr	r3, [pc, #76]	; (8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80072e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ea:	0e1b      	lsrs	r3, r3, #24
 80072ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072f0:	ee07 3a90 	vmov	s15, r3
 80072f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007300:	edd7 6a07 	vldr	s13, [r7, #28]
 8007304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800730c:	ee17 2a90 	vmov	r2, s15
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007314:	e008      	b.n	8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	609a      	str	r2, [r3, #8]
}
 8007328:	bf00      	nop
 800732a:	3724      	adds	r7, #36	; 0x24
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	58024400 	.word	0x58024400
 8007338:	03d09000 	.word	0x03d09000
 800733c:	46000000 	.word	0x46000000
 8007340:	4c742400 	.word	0x4c742400
 8007344:	4a742400 	.word	0x4a742400
 8007348:	4bbebc20 	.word	0x4bbebc20

0800734c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800734c:	b480      	push	{r7}
 800734e:	b089      	sub	sp, #36	; 0x24
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007354:	4b9d      	ldr	r3, [pc, #628]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007358:	f003 0303 	and.w	r3, r3, #3
 800735c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800735e:	4b9b      	ldr	r3, [pc, #620]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007362:	0d1b      	lsrs	r3, r3, #20
 8007364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007368:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800736a:	4b98      	ldr	r3, [pc, #608]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800736c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736e:	0a1b      	lsrs	r3, r3, #8
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007376:	4b95      	ldr	r3, [pc, #596]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737a:	08db      	lsrs	r3, r3, #3
 800737c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	fb02 f303 	mul.w	r3, r2, r3
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 810a 	beq.w	80075ae <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d05a      	beq.n	8007456 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d302      	bcc.n	80073aa <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d078      	beq.n	800749a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80073a8:	e099      	b.n	80074de <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073aa:	4b88      	ldr	r3, [pc, #544]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0320 	and.w	r3, r3, #32
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d02d      	beq.n	8007412 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073b6:	4b85      	ldr	r3, [pc, #532]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	08db      	lsrs	r3, r3, #3
 80073bc:	f003 0303 	and.w	r3, r3, #3
 80073c0:	4a83      	ldr	r2, [pc, #524]	; (80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80073c2:	fa22 f303 	lsr.w	r3, r2, r3
 80073c6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	ee07 3a90 	vmov	s15, r3
 80073d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073e0:	4b7a      	ldr	r3, [pc, #488]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80073e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e8:	ee07 3a90 	vmov	s15, r3
 80073ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80073f4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80073f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007400:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007404:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800740c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007410:	e087      	b.n	8007522 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	ee07 3a90 	vmov	s15, r3
 8007418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800741c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007424:	4b69      	ldr	r3, [pc, #420]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742c:	ee07 3a90 	vmov	s15, r3
 8007430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007434:	ed97 6a03 	vldr	s12, [r7, #12]
 8007438:	eddf 5a66 	vldr	s11, [pc, #408]	; 80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800743c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007440:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007444:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007448:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800744c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007450:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007454:	e065      	b.n	8007522 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	ee07 3a90 	vmov	s15, r3
 800745c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007460:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007464:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007468:	4b58      	ldr	r3, [pc, #352]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800746a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007470:	ee07 3a90 	vmov	s15, r3
 8007474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007478:	ed97 6a03 	vldr	s12, [r7, #12]
 800747c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007480:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007484:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007488:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800748c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007494:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007498:	e043      	b.n	8007522 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	ee07 3a90 	vmov	s15, r3
 80074a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80075e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80074a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ac:	4b47      	ldr	r3, [pc, #284]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80074ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b4:	ee07 3a90 	vmov	s15, r3
 80074b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80074c0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80074c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074dc:	e021      	b.n	8007522 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	ee07 3a90 	vmov	s15, r3
 80074e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80074ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f0:	4b36      	ldr	r3, [pc, #216]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80074f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f8:	ee07 3a90 	vmov	s15, r3
 80074fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007500:	ed97 6a03 	vldr	s12, [r7, #12]
 8007504:	eddf 5a33 	vldr	s11, [pc, #204]	; 80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007508:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800750c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007510:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007514:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007520:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007522:	4b2a      	ldr	r3, [pc, #168]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	0a5b      	lsrs	r3, r3, #9
 8007528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800752c:	ee07 3a90 	vmov	s15, r3
 8007530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007534:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007538:	ee37 7a87 	vadd.f32	s14, s15, s14
 800753c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007540:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007548:	ee17 2a90 	vmov	r2, s15
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007550:	4b1e      	ldr	r3, [pc, #120]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007554:	0c1b      	lsrs	r3, r3, #16
 8007556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007562:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007566:	ee37 7a87 	vadd.f32	s14, s15, s14
 800756a:	edd7 6a07 	vldr	s13, [r7, #28]
 800756e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007576:	ee17 2a90 	vmov	r2, s15
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800757e:	4b13      	ldr	r3, [pc, #76]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	0e1b      	lsrs	r3, r3, #24
 8007584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007588:	ee07 3a90 	vmov	s15, r3
 800758c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007590:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007594:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007598:	edd7 6a07 	vldr	s13, [r7, #28]
 800759c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075a4:	ee17 2a90 	vmov	r2, s15
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80075ac:	e008      	b.n	80075c0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	609a      	str	r2, [r3, #8]
}
 80075c0:	bf00      	nop
 80075c2:	3724      	adds	r7, #36	; 0x24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr
 80075cc:	58024400 	.word	0x58024400
 80075d0:	03d09000 	.word	0x03d09000
 80075d4:	46000000 	.word	0x46000000
 80075d8:	4c742400 	.word	0x4c742400
 80075dc:	4a742400 	.word	0x4a742400
 80075e0:	4bbebc20 	.word	0x4bbebc20

080075e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075f2:	4b53      	ldr	r3, [pc, #332]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80075f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f6:	f003 0303 	and.w	r3, r3, #3
 80075fa:	2b03      	cmp	r3, #3
 80075fc:	d101      	bne.n	8007602 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e099      	b.n	8007736 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007602:	4b4f      	ldr	r3, [pc, #316]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a4e      	ldr	r2, [pc, #312]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 8007608:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800760c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800760e:	f7fd fa53 	bl	8004ab8 <HAL_GetTick>
 8007612:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007614:	e008      	b.n	8007628 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007616:	f7fd fa4f 	bl	8004ab8 <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	2b02      	cmp	r3, #2
 8007622:	d901      	bls.n	8007628 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e086      	b.n	8007736 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007628:	4b45      	ldr	r3, [pc, #276]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1f0      	bne.n	8007616 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007634:	4b42      	ldr	r3, [pc, #264]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 8007636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007638:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	031b      	lsls	r3, r3, #12
 8007642:	493f      	ldr	r1, [pc, #252]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 8007644:	4313      	orrs	r3, r2
 8007646:	628b      	str	r3, [r1, #40]	; 0x28
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	3b01      	subs	r3, #1
 800764e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	3b01      	subs	r3, #1
 8007658:	025b      	lsls	r3, r3, #9
 800765a:	b29b      	uxth	r3, r3
 800765c:	431a      	orrs	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	3b01      	subs	r3, #1
 8007664:	041b      	lsls	r3, r3, #16
 8007666:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800766a:	431a      	orrs	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	3b01      	subs	r3, #1
 8007672:	061b      	lsls	r3, r3, #24
 8007674:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007678:	4931      	ldr	r1, [pc, #196]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 800767a:	4313      	orrs	r3, r2
 800767c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800767e:	4b30      	ldr	r3, [pc, #192]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 8007680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007682:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	492d      	ldr	r1, [pc, #180]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 800768c:	4313      	orrs	r3, r2
 800768e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007690:	4b2b      	ldr	r3, [pc, #172]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 8007692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007694:	f023 0220 	bic.w	r2, r3, #32
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	4928      	ldr	r1, [pc, #160]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80076a2:	4b27      	ldr	r3, [pc, #156]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a6:	4a26      	ldr	r2, [pc, #152]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076a8:	f023 0310 	bic.w	r3, r3, #16
 80076ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80076ae:	4b24      	ldr	r3, [pc, #144]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076b2:	4b24      	ldr	r3, [pc, #144]	; (8007744 <RCCEx_PLL2_Config+0x160>)
 80076b4:	4013      	ands	r3, r2
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	69d2      	ldr	r2, [r2, #28]
 80076ba:	00d2      	lsls	r2, r2, #3
 80076bc:	4920      	ldr	r1, [pc, #128]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80076c2:	4b1f      	ldr	r3, [pc, #124]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c6:	4a1e      	ldr	r2, [pc, #120]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076c8:	f043 0310 	orr.w	r3, r3, #16
 80076cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d106      	bne.n	80076e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80076d4:	4b1a      	ldr	r3, [pc, #104]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d8:	4a19      	ldr	r2, [pc, #100]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076e0:	e00f      	b.n	8007702 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d106      	bne.n	80076f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80076e8:	4b15      	ldr	r3, [pc, #84]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ec:	4a14      	ldr	r2, [pc, #80]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076f4:	e005      	b.n	8007702 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076f6:	4b12      	ldr	r3, [pc, #72]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fa:	4a11      	ldr	r2, [pc, #68]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 80076fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007700:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007702:	4b0f      	ldr	r3, [pc, #60]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a0e      	ldr	r2, [pc, #56]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 8007708:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800770c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800770e:	f7fd f9d3 	bl	8004ab8 <HAL_GetTick>
 8007712:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007714:	e008      	b.n	8007728 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007716:	f7fd f9cf 	bl	8004ab8 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	2b02      	cmp	r3, #2
 8007722:	d901      	bls.n	8007728 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e006      	b.n	8007736 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007728:	4b05      	ldr	r3, [pc, #20]	; (8007740 <RCCEx_PLL2_Config+0x15c>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d0f0      	beq.n	8007716 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007734:	7bfb      	ldrb	r3, [r7, #15]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	58024400 	.word	0x58024400
 8007744:	ffff0007 	.word	0xffff0007

08007748 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007756:	4b53      	ldr	r3, [pc, #332]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	2b03      	cmp	r3, #3
 8007760:	d101      	bne.n	8007766 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e099      	b.n	800789a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007766:	4b4f      	ldr	r3, [pc, #316]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a4e      	ldr	r2, [pc, #312]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800776c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007772:	f7fd f9a1 	bl	8004ab8 <HAL_GetTick>
 8007776:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007778:	e008      	b.n	800778c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800777a:	f7fd f99d 	bl	8004ab8 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d901      	bls.n	800778c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e086      	b.n	800789a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800778c:	4b45      	ldr	r3, [pc, #276]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1f0      	bne.n	800777a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007798:	4b42      	ldr	r3, [pc, #264]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800779a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	051b      	lsls	r3, r3, #20
 80077a6:	493f      	ldr	r1, [pc, #252]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	628b      	str	r3, [r1, #40]	; 0x28
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	3b01      	subs	r3, #1
 80077bc:	025b      	lsls	r3, r3, #9
 80077be:	b29b      	uxth	r3, r3
 80077c0:	431a      	orrs	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	3b01      	subs	r3, #1
 80077c8:	041b      	lsls	r3, r3, #16
 80077ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80077ce:	431a      	orrs	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	061b      	lsls	r3, r3, #24
 80077d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80077dc:	4931      	ldr	r1, [pc, #196]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80077e2:	4b30      	ldr	r3, [pc, #192]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	492d      	ldr	r1, [pc, #180]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80077f4:	4b2b      	ldr	r3, [pc, #172]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	4928      	ldr	r1, [pc, #160]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 8007802:	4313      	orrs	r3, r2
 8007804:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007806:	4b27      	ldr	r3, [pc, #156]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 8007808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780a:	4a26      	ldr	r2, [pc, #152]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800780c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007810:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007812:	4b24      	ldr	r3, [pc, #144]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 8007814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007816:	4b24      	ldr	r3, [pc, #144]	; (80078a8 <RCCEx_PLL3_Config+0x160>)
 8007818:	4013      	ands	r3, r2
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	69d2      	ldr	r2, [r2, #28]
 800781e:	00d2      	lsls	r2, r2, #3
 8007820:	4920      	ldr	r1, [pc, #128]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 8007822:	4313      	orrs	r3, r2
 8007824:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007826:	4b1f      	ldr	r3, [pc, #124]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 8007828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782a:	4a1e      	ldr	r2, [pc, #120]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800782c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007830:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d106      	bne.n	8007846 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007838:	4b1a      	ldr	r3, [pc, #104]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800783a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783c:	4a19      	ldr	r2, [pc, #100]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800783e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007842:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007844:	e00f      	b.n	8007866 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d106      	bne.n	800785a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800784c:	4b15      	ldr	r3, [pc, #84]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007850:	4a14      	ldr	r2, [pc, #80]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 8007852:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007856:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007858:	e005      	b.n	8007866 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800785a:	4b12      	ldr	r3, [pc, #72]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800785c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785e:	4a11      	ldr	r2, [pc, #68]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 8007860:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007864:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007866:	4b0f      	ldr	r3, [pc, #60]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a0e      	ldr	r2, [pc, #56]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800786c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007872:	f7fd f921 	bl	8004ab8 <HAL_GetTick>
 8007876:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007878:	e008      	b.n	800788c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800787a:	f7fd f91d 	bl	8004ab8 <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	2b02      	cmp	r3, #2
 8007886:	d901      	bls.n	800788c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e006      	b.n	800789a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800788c:	4b05      	ldr	r3, [pc, #20]	; (80078a4 <RCCEx_PLL3_Config+0x15c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0f0      	beq.n	800787a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007898:	7bfb      	ldrb	r3, [r7, #15]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	58024400 	.word	0x58024400
 80078a8:	ffff0007 	.word	0xffff0007

080078ac <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e04d      	b.n	800795a <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	7a5b      	ldrb	r3, [r3, #9]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d105      	bne.n	80078d4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7f9 ffbe 	bl	8001850 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f023 0120 	bic.w	r1, r3, #32
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	601a      	str	r2, [r3, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f042 0204 	orr.w	r2, r2, #4
 80078fe:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790a:	2b40      	cmp	r3, #64	; 0x40
 800790c:	d104      	bne.n	8007918 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2204      	movs	r2, #4
 8007912:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e020      	b.n	800795a <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8007918:	f7fd f8ce 	bl	8004ab8 <HAL_GetTick>
 800791c:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800791e:	e00e      	b.n	800793e <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007920:	f7fd f8ca 	bl	8004ab8 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	2b02      	cmp	r3, #2
 800792c:	d907      	bls.n	800793e <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2204      	movs	r2, #4
 8007932:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2202      	movs	r2, #2
 8007938:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e00d      	b.n	800795a <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b04      	cmp	r3, #4
 800794a:	d0e9      	beq.n	8007920 <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	7a1b      	ldrb	r3, [r3, #8]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d101      	bne.n	800797c <HAL_RNG_GenerateRandomNumber+0x1a>
 8007978:	2302      	movs	r3, #2
 800797a:	e03d      	b.n	80079f8 <HAL_RNG_GenerateRandomNumber+0x96>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	7a5b      	ldrb	r3, [r3, #9]
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b01      	cmp	r3, #1
 800798a:	d12c      	bne.n	80079e6 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007992:	f7fd f891 	bl	8004ab8 <HAL_GetTick>
 8007996:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007998:	e011      	b.n	80079be <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800799a:	f7fd f88d 	bl	8004ab8 <HAL_GetTick>
 800799e:	4602      	mov	r2, r0
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d90a      	bls.n	80079be <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2202      	movs	r2, #2
 80079b2:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e01c      	b.n	80079f8 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f003 0301 	and.w	r3, r3, #1
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d1e6      	bne.n	800799a <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689a      	ldr	r2, [r3, #8]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691a      	ldr	r2, [r3, #16]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	725a      	strb	r2, [r3, #9]
 80079e4:	e004      	b.n	80079f0 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2204      	movs	r2, #4
 80079ea:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	721a      	strb	r2, [r3, #8]

  return status;
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e01d      	b.n	8007a4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d106      	bne.n	8007a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7f9 fff6 	bl	8001a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3304      	adds	r3, #4
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	4610      	mov	r0, r2
 8007a40:	f000 f904 	bl	8007c4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
	...

08007a58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689a      	ldr	r2, [r3, #8]
 8007a6e:	4b0e      	ldr	r3, [pc, #56]	; (8007aa8 <HAL_TIM_Base_Start+0x50>)
 8007a70:	4013      	ands	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2b06      	cmp	r3, #6
 8007a78:	d00b      	beq.n	8007a92 <HAL_TIM_Base_Start+0x3a>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a80:	d007      	beq.n	8007a92 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f042 0201 	orr.w	r2, r2, #1
 8007a90:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	00010007 	.word	0x00010007

08007aac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d101      	bne.n	8007ac4 <HAL_TIM_ConfigClockSource+0x18>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e0b7      	b.n	8007c34 <HAL_TIM_ConfigClockSource+0x188>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	4b57      	ldr	r3, [pc, #348]	; (8007c3c <HAL_TIM_ConfigClockSource+0x190>)
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007aea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b70      	cmp	r3, #112	; 0x70
 8007afa:	d02e      	beq.n	8007b5a <HAL_TIM_ConfigClockSource+0xae>
 8007afc:	2b70      	cmp	r3, #112	; 0x70
 8007afe:	d812      	bhi.n	8007b26 <HAL_TIM_ConfigClockSource+0x7a>
 8007b00:	2b30      	cmp	r3, #48	; 0x30
 8007b02:	f000 8084 	beq.w	8007c0e <HAL_TIM_ConfigClockSource+0x162>
 8007b06:	2b30      	cmp	r3, #48	; 0x30
 8007b08:	d806      	bhi.n	8007b18 <HAL_TIM_ConfigClockSource+0x6c>
 8007b0a:	2b10      	cmp	r3, #16
 8007b0c:	d07f      	beq.n	8007c0e <HAL_TIM_ConfigClockSource+0x162>
 8007b0e:	2b20      	cmp	r3, #32
 8007b10:	d07d      	beq.n	8007c0e <HAL_TIM_ConfigClockSource+0x162>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d07b      	beq.n	8007c0e <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007b16:	e084      	b.n	8007c22 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007b18:	2b50      	cmp	r3, #80	; 0x50
 8007b1a:	d048      	beq.n	8007bae <HAL_TIM_ConfigClockSource+0x102>
 8007b1c:	2b60      	cmp	r3, #96	; 0x60
 8007b1e:	d056      	beq.n	8007bce <HAL_TIM_ConfigClockSource+0x122>
 8007b20:	2b40      	cmp	r3, #64	; 0x40
 8007b22:	d064      	beq.n	8007bee <HAL_TIM_ConfigClockSource+0x142>
      break;
 8007b24:	e07d      	b.n	8007c22 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007b26:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007b2a:	d070      	beq.n	8007c0e <HAL_TIM_ConfigClockSource+0x162>
 8007b2c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007b30:	d809      	bhi.n	8007b46 <HAL_TIM_ConfigClockSource+0x9a>
 8007b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b36:	d027      	beq.n	8007b88 <HAL_TIM_ConfigClockSource+0xdc>
 8007b38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b3c:	d067      	beq.n	8007c0e <HAL_TIM_ConfigClockSource+0x162>
 8007b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b42:	d06d      	beq.n	8007c20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b44:	e06d      	b.n	8007c22 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007b46:	4a3e      	ldr	r2, [pc, #248]	; (8007c40 <HAL_TIM_ConfigClockSource+0x194>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d060      	beq.n	8007c0e <HAL_TIM_ConfigClockSource+0x162>
 8007b4c:	4a3d      	ldr	r2, [pc, #244]	; (8007c44 <HAL_TIM_ConfigClockSource+0x198>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d05d      	beq.n	8007c0e <HAL_TIM_ConfigClockSource+0x162>
 8007b52:	4a3d      	ldr	r2, [pc, #244]	; (8007c48 <HAL_TIM_ConfigClockSource+0x19c>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d05a      	beq.n	8007c0e <HAL_TIM_ConfigClockSource+0x162>
      break;
 8007b58:	e063      	b.n	8007c22 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6818      	ldr	r0, [r3, #0]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	6899      	ldr	r1, [r3, #8]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	f000 f987 	bl	8007e7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	609a      	str	r2, [r3, #8]
      break;
 8007b86:	e04c      	b.n	8007c22 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6818      	ldr	r0, [r3, #0]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	6899      	ldr	r1, [r3, #8]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	f000 f970 	bl	8007e7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689a      	ldr	r2, [r3, #8]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007baa:	609a      	str	r2, [r3, #8]
      break;
 8007bac:	e039      	b.n	8007c22 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6818      	ldr	r0, [r3, #0]
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	6859      	ldr	r1, [r3, #4]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	f000 f8e0 	bl	8007d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2150      	movs	r1, #80	; 0x50
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 f93a 	bl	8007e40 <TIM_ITRx_SetConfig>
      break;
 8007bcc:	e029      	b.n	8007c22 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6818      	ldr	r0, [r3, #0]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	6859      	ldr	r1, [r3, #4]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f000 f8ff 	bl	8007dde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2160      	movs	r1, #96	; 0x60
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 f92a 	bl	8007e40 <TIM_ITRx_SetConfig>
      break;
 8007bec:	e019      	b.n	8007c22 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6818      	ldr	r0, [r3, #0]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	6859      	ldr	r1, [r3, #4]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f000 f8c0 	bl	8007d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2140      	movs	r1, #64	; 0x40
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 f91a 	bl	8007e40 <TIM_ITRx_SetConfig>
      break;
 8007c0c:	e009      	b.n	8007c22 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4619      	mov	r1, r3
 8007c18:	4610      	mov	r0, r2
 8007c1a:	f000 f911 	bl	8007e40 <TIM_ITRx_SetConfig>
      break;
 8007c1e:	e000      	b.n	8007c22 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007c20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	ffceff88 	.word	0xffceff88
 8007c40:	00100030 	.word	0x00100030
 8007c44:	00100040 	.word	0x00100040
 8007c48:	00100020 	.word	0x00100020

08007c4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a40      	ldr	r2, [pc, #256]	; (8007d60 <TIM_Base_SetConfig+0x114>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d013      	beq.n	8007c8c <TIM_Base_SetConfig+0x40>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c6a:	d00f      	beq.n	8007c8c <TIM_Base_SetConfig+0x40>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a3d      	ldr	r2, [pc, #244]	; (8007d64 <TIM_Base_SetConfig+0x118>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d00b      	beq.n	8007c8c <TIM_Base_SetConfig+0x40>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a3c      	ldr	r2, [pc, #240]	; (8007d68 <TIM_Base_SetConfig+0x11c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d007      	beq.n	8007c8c <TIM_Base_SetConfig+0x40>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a3b      	ldr	r2, [pc, #236]	; (8007d6c <TIM_Base_SetConfig+0x120>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d003      	beq.n	8007c8c <TIM_Base_SetConfig+0x40>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a3a      	ldr	r2, [pc, #232]	; (8007d70 <TIM_Base_SetConfig+0x124>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d108      	bne.n	8007c9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a2f      	ldr	r2, [pc, #188]	; (8007d60 <TIM_Base_SetConfig+0x114>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d01f      	beq.n	8007ce6 <TIM_Base_SetConfig+0x9a>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cac:	d01b      	beq.n	8007ce6 <TIM_Base_SetConfig+0x9a>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a2c      	ldr	r2, [pc, #176]	; (8007d64 <TIM_Base_SetConfig+0x118>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d017      	beq.n	8007ce6 <TIM_Base_SetConfig+0x9a>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a2b      	ldr	r2, [pc, #172]	; (8007d68 <TIM_Base_SetConfig+0x11c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d013      	beq.n	8007ce6 <TIM_Base_SetConfig+0x9a>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a2a      	ldr	r2, [pc, #168]	; (8007d6c <TIM_Base_SetConfig+0x120>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d00f      	beq.n	8007ce6 <TIM_Base_SetConfig+0x9a>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a29      	ldr	r2, [pc, #164]	; (8007d70 <TIM_Base_SetConfig+0x124>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d00b      	beq.n	8007ce6 <TIM_Base_SetConfig+0x9a>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a28      	ldr	r2, [pc, #160]	; (8007d74 <TIM_Base_SetConfig+0x128>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d007      	beq.n	8007ce6 <TIM_Base_SetConfig+0x9a>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a27      	ldr	r2, [pc, #156]	; (8007d78 <TIM_Base_SetConfig+0x12c>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d003      	beq.n	8007ce6 <TIM_Base_SetConfig+0x9a>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a26      	ldr	r2, [pc, #152]	; (8007d7c <TIM_Base_SetConfig+0x130>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d108      	bne.n	8007cf8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	689a      	ldr	r2, [r3, #8]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a10      	ldr	r2, [pc, #64]	; (8007d60 <TIM_Base_SetConfig+0x114>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d00f      	beq.n	8007d44 <TIM_Base_SetConfig+0xf8>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a12      	ldr	r2, [pc, #72]	; (8007d70 <TIM_Base_SetConfig+0x124>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d00b      	beq.n	8007d44 <TIM_Base_SetConfig+0xf8>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a11      	ldr	r2, [pc, #68]	; (8007d74 <TIM_Base_SetConfig+0x128>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d007      	beq.n	8007d44 <TIM_Base_SetConfig+0xf8>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a10      	ldr	r2, [pc, #64]	; (8007d78 <TIM_Base_SetConfig+0x12c>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d003      	beq.n	8007d44 <TIM_Base_SetConfig+0xf8>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a0f      	ldr	r2, [pc, #60]	; (8007d7c <TIM_Base_SetConfig+0x130>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d103      	bne.n	8007d4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	691a      	ldr	r2, [r3, #16]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	615a      	str	r2, [r3, #20]
}
 8007d52:	bf00      	nop
 8007d54:	3714      	adds	r7, #20
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	40010000 	.word	0x40010000
 8007d64:	40000400 	.word	0x40000400
 8007d68:	40000800 	.word	0x40000800
 8007d6c:	40000c00 	.word	0x40000c00
 8007d70:	40010400 	.word	0x40010400
 8007d74:	40014000 	.word	0x40014000
 8007d78:	40014400 	.word	0x40014400
 8007d7c:	40014800 	.word	0x40014800

08007d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	f023 0201 	bic.w	r2, r3, #1
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	011b      	lsls	r3, r3, #4
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f023 030a 	bic.w	r3, r3, #10
 8007dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	621a      	str	r2, [r3, #32]
}
 8007dd2:	bf00      	nop
 8007dd4:	371c      	adds	r7, #28
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b087      	sub	sp, #28
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	60f8      	str	r0, [r7, #12]
 8007de6:	60b9      	str	r1, [r7, #8]
 8007de8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	f023 0210 	bic.w	r2, r3, #16
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6a1b      	ldr	r3, [r3, #32]
 8007e00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	031b      	lsls	r3, r3, #12
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	011b      	lsls	r3, r3, #4
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	621a      	str	r2, [r3, #32]
}
 8007e32:	bf00      	nop
 8007e34:	371c      	adds	r7, #28
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
	...

08007e40 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <TIM_ITRx_SetConfig+0x38>)
 8007e54:	4013      	ands	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e58:	683a      	ldr	r2, [r7, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	f043 0307 	orr.w	r3, r3, #7
 8007e62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	609a      	str	r2, [r3, #8]
}
 8007e6a:	bf00      	nop
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	ffcfff8f 	.word	0xffcfff8f

08007e7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b087      	sub	sp, #28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
 8007e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	021a      	lsls	r2, r3, #8
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	609a      	str	r2, [r3, #8]
}
 8007eb0:	bf00      	nop
 8007eb2:	371c      	adds	r7, #28
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d101      	bne.n	8007ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	e068      	b.n	8007fa6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a2e      	ldr	r2, [pc, #184]	; (8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d004      	beq.n	8007f08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a2d      	ldr	r2, [pc, #180]	; (8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d108      	bne.n	8007f1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a1e      	ldr	r2, [pc, #120]	; (8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d01d      	beq.n	8007f7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f46:	d018      	beq.n	8007f7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a1b      	ldr	r2, [pc, #108]	; (8007fbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d013      	beq.n	8007f7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a1a      	ldr	r2, [pc, #104]	; (8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d00e      	beq.n	8007f7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a18      	ldr	r2, [pc, #96]	; (8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d009      	beq.n	8007f7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a13      	ldr	r2, [pc, #76]	; (8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d004      	beq.n	8007f7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a14      	ldr	r2, [pc, #80]	; (8007fc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d10c      	bne.n	8007f94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	40010000 	.word	0x40010000
 8007fb8:	40010400 	.word	0x40010400
 8007fbc:	40000400 	.word	0x40000400
 8007fc0:	40000800 	.word	0x40000800
 8007fc4:	40000c00 	.word	0x40000c00
 8007fc8:	40001800 	.word	0x40001800

08007fcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e042      	b.n	8008064 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d106      	bne.n	8007ff6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7f9 fd7d 	bl	8001af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2224      	movs	r2, #36	; 0x24
 8007ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f022 0201 	bic.w	r2, r2, #1
 800800c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f9aa 	bl	8008368 <UART_SetConfig>
 8008014:	4603      	mov	r3, r0
 8008016:	2b01      	cmp	r3, #1
 8008018:	d101      	bne.n	800801e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e022      	b.n	8008064 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008022:	2b00      	cmp	r3, #0
 8008024:	d002      	beq.n	800802c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f002 fb1c 	bl	800a664 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800803a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	689a      	ldr	r2, [r3, #8]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800804a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0201 	orr.w	r2, r2, #1
 800805a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f002 fba3 	bl	800a7a8 <UART_CheckIdleState>
 8008062:	4603      	mov	r3, r0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08a      	sub	sp, #40	; 0x28
 8008070:	af02      	add	r7, sp, #8
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	603b      	str	r3, [r7, #0]
 8008078:	4613      	mov	r3, r2
 800807a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008082:	2b20      	cmp	r3, #32
 8008084:	f040 8083 	bne.w	800818e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d002      	beq.n	8008094 <HAL_UART_Transmit+0x28>
 800808e:	88fb      	ldrh	r3, [r7, #6]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d101      	bne.n	8008098 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e07b      	b.n	8008190 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d101      	bne.n	80080a6 <HAL_UART_Transmit+0x3a>
 80080a2:	2302      	movs	r3, #2
 80080a4:	e074      	b.n	8008190 <HAL_UART_Transmit+0x124>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2221      	movs	r2, #33	; 0x21
 80080ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80080be:	f7fc fcfb 	bl	8004ab8 <HAL_GetTick>
 80080c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	88fa      	ldrh	r2, [r7, #6]
 80080c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	88fa      	ldrh	r2, [r7, #6]
 80080d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080dc:	d108      	bne.n	80080f0 <HAL_UART_Transmit+0x84>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d104      	bne.n	80080f0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	61bb      	str	r3, [r7, #24]
 80080ee:	e003      	b.n	80080f8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080f4:	2300      	movs	r3, #0
 80080f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80080f8:	e02c      	b.n	8008154 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2200      	movs	r2, #0
 8008102:	2180      	movs	r1, #128	; 0x80
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f002 fb97 	bl	800a838 <UART_WaitOnFlagUntilTimeout>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e03d      	b.n	8008190 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10b      	bne.n	8008132 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	461a      	mov	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008128:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	3302      	adds	r3, #2
 800812e:	61bb      	str	r3, [r7, #24]
 8008130:	e007      	b.n	8008142 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	781a      	ldrb	r2, [r3, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	3301      	adds	r3, #1
 8008140:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008148:	b29b      	uxth	r3, r3
 800814a:	3b01      	subs	r3, #1
 800814c:	b29a      	uxth	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800815a:	b29b      	uxth	r3, r3
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1cc      	bne.n	80080fa <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	2200      	movs	r2, #0
 8008168:	2140      	movs	r1, #64	; 0x40
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f002 fb64 	bl	800a838 <UART_WaitOnFlagUntilTimeout>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e00a      	b.n	8008190 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2220      	movs	r2, #32
 800817e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	e000      	b.n	8008190 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800818e:	2302      	movs	r3, #2
  }
}
 8008190:	4618      	mov	r0, r3
 8008192:	3720      	adds	r7, #32
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b08a      	sub	sp, #40	; 0x28
 800819c:	af02      	add	r7, sp, #8
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	603b      	str	r3, [r7, #0]
 80081a4:	4613      	mov	r3, r2
 80081a6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ae:	2b20      	cmp	r3, #32
 80081b0:	f040 80bd 	bne.w	800832e <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d002      	beq.n	80081c0 <HAL_UART_Receive+0x28>
 80081ba:	88fb      	ldrh	r3, [r7, #6]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e0b5      	b.n	8008330 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d101      	bne.n	80081d2 <HAL_UART_Receive+0x3a>
 80081ce:	2302      	movs	r3, #2
 80081d0:	e0ae      	b.n	8008330 <HAL_UART_Receive+0x198>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2222      	movs	r2, #34	; 0x22
 80081e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80081ea:	f7fc fc65 	bl	8004ab8 <HAL_GetTick>
 80081ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	88fa      	ldrh	r2, [r7, #6]
 80081f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	88fa      	ldrh	r2, [r7, #6]
 80081fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008208:	d10e      	bne.n	8008228 <HAL_UART_Receive+0x90>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d105      	bne.n	800821e <HAL_UART_Receive+0x86>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008218:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800821c:	e02d      	b.n	800827a <HAL_UART_Receive+0xe2>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	22ff      	movs	r2, #255	; 0xff
 8008222:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008226:	e028      	b.n	800827a <HAL_UART_Receive+0xe2>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d10d      	bne.n	800824c <HAL_UART_Receive+0xb4>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d104      	bne.n	8008242 <HAL_UART_Receive+0xaa>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	22ff      	movs	r2, #255	; 0xff
 800823c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008240:	e01b      	b.n	800827a <HAL_UART_Receive+0xe2>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	227f      	movs	r2, #127	; 0x7f
 8008246:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800824a:	e016      	b.n	800827a <HAL_UART_Receive+0xe2>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008254:	d10d      	bne.n	8008272 <HAL_UART_Receive+0xda>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d104      	bne.n	8008268 <HAL_UART_Receive+0xd0>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	227f      	movs	r2, #127	; 0x7f
 8008262:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008266:	e008      	b.n	800827a <HAL_UART_Receive+0xe2>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	223f      	movs	r2, #63	; 0x3f
 800826c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008270:	e003      	b.n	800827a <HAL_UART_Receive+0xe2>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008280:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800828a:	d108      	bne.n	800829e <HAL_UART_Receive+0x106>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d104      	bne.n	800829e <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8008294:	2300      	movs	r3, #0
 8008296:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	61bb      	str	r3, [r7, #24]
 800829c:	e003      	b.n	80082a6 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082a2:	2300      	movs	r3, #0
 80082a4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80082a6:	e032      	b.n	800830e <HAL_UART_Receive+0x176>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	2200      	movs	r2, #0
 80082b0:	2120      	movs	r1, #32
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f002 fac0 	bl	800a838 <UART_WaitOnFlagUntilTimeout>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <HAL_UART_Receive+0x12a>
      {
        return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e036      	b.n	8008330 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10c      	bne.n	80082e2 <HAL_UART_Receive+0x14a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	8a7b      	ldrh	r3, [r7, #18]
 80082d2:	4013      	ands	r3, r2
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	3302      	adds	r3, #2
 80082de:	61bb      	str	r3, [r7, #24]
 80082e0:	e00c      	b.n	80082fc <HAL_UART_Receive+0x164>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	8a7b      	ldrh	r3, [r7, #18]
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	4013      	ands	r3, r2
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	3301      	adds	r3, #1
 80082fa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008302:	b29b      	uxth	r3, r3
 8008304:	3b01      	subs	r3, #1
 8008306:	b29a      	uxth	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008314:	b29b      	uxth	r3, r3
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1c6      	bne.n	80082a8 <HAL_UART_Receive+0x110>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2220      	movs	r2, #32
 800831e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_UNLOCK(huart);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	e000      	b.n	8008330 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800832e:	2302      	movs	r3, #2
  }
}
 8008330:	4618      	mov	r0, r3
 8008332:	3720      	adds	r7, #32
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008346:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800834e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	4313      	orrs	r3, r2
}
 8008356:	4618      	mov	r0, r3
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	0000      	movs	r0, r0
 8008364:	0000      	movs	r0, r0
	...

08008368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008368:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800836c:	b090      	sub	sp, #64	; 0x40
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008372:	2300      	movs	r3, #0
 8008374:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800837c:	2300      	movs	r3, #0
 800837e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	689a      	ldr	r2, [r3, #8]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	431a      	orrs	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	431a      	orrs	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	69db      	ldr	r3, [r3, #28]
 8008394:	4313      	orrs	r3, r2
 8008396:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800839c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800839e:	4313      	orrs	r3, r2
 80083a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	4bc1      	ldr	r3, [pc, #772]	; (80086b0 <UART_SetConfig+0x348>)
 80083aa:	4013      	ands	r3, r2
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	6812      	ldr	r2, [r2, #0]
 80083b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083b2:	430b      	orrs	r3, r1
 80083b4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68da      	ldr	r2, [r3, #12]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	430a      	orrs	r2, r1
 80083ca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4ab7      	ldr	r2, [pc, #732]	; (80086b4 <UART_SetConfig+0x34c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d004      	beq.n	80083e6 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a1b      	ldr	r3, [r3, #32]
 80083e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083e2:	4313      	orrs	r3, r2
 80083e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	4bb2      	ldr	r3, [pc, #712]	; (80086b8 <UART_SetConfig+0x350>)
 80083ee:	4013      	ands	r3, r2
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	6812      	ldr	r2, [r2, #0]
 80083f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083f6:	430b      	orrs	r3, r1
 80083f8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008400:	f023 010f 	bic.w	r1, r3, #15
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	430a      	orrs	r2, r1
 800840e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4aa9      	ldr	r2, [pc, #676]	; (80086bc <UART_SetConfig+0x354>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d177      	bne.n	800850a <UART_SetConfig+0x1a2>
 800841a:	4ba9      	ldr	r3, [pc, #676]	; (80086c0 <UART_SetConfig+0x358>)
 800841c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800841e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008422:	2b28      	cmp	r3, #40	; 0x28
 8008424:	d86c      	bhi.n	8008500 <UART_SetConfig+0x198>
 8008426:	a201      	add	r2, pc, #4	; (adr r2, 800842c <UART_SetConfig+0xc4>)
 8008428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842c:	080084d1 	.word	0x080084d1
 8008430:	08008501 	.word	0x08008501
 8008434:	08008501 	.word	0x08008501
 8008438:	08008501 	.word	0x08008501
 800843c:	08008501 	.word	0x08008501
 8008440:	08008501 	.word	0x08008501
 8008444:	08008501 	.word	0x08008501
 8008448:	08008501 	.word	0x08008501
 800844c:	080084d9 	.word	0x080084d9
 8008450:	08008501 	.word	0x08008501
 8008454:	08008501 	.word	0x08008501
 8008458:	08008501 	.word	0x08008501
 800845c:	08008501 	.word	0x08008501
 8008460:	08008501 	.word	0x08008501
 8008464:	08008501 	.word	0x08008501
 8008468:	08008501 	.word	0x08008501
 800846c:	080084e1 	.word	0x080084e1
 8008470:	08008501 	.word	0x08008501
 8008474:	08008501 	.word	0x08008501
 8008478:	08008501 	.word	0x08008501
 800847c:	08008501 	.word	0x08008501
 8008480:	08008501 	.word	0x08008501
 8008484:	08008501 	.word	0x08008501
 8008488:	08008501 	.word	0x08008501
 800848c:	080084e9 	.word	0x080084e9
 8008490:	08008501 	.word	0x08008501
 8008494:	08008501 	.word	0x08008501
 8008498:	08008501 	.word	0x08008501
 800849c:	08008501 	.word	0x08008501
 80084a0:	08008501 	.word	0x08008501
 80084a4:	08008501 	.word	0x08008501
 80084a8:	08008501 	.word	0x08008501
 80084ac:	080084f1 	.word	0x080084f1
 80084b0:	08008501 	.word	0x08008501
 80084b4:	08008501 	.word	0x08008501
 80084b8:	08008501 	.word	0x08008501
 80084bc:	08008501 	.word	0x08008501
 80084c0:	08008501 	.word	0x08008501
 80084c4:	08008501 	.word	0x08008501
 80084c8:	08008501 	.word	0x08008501
 80084cc:	080084f9 	.word	0x080084f9
 80084d0:	2301      	movs	r3, #1
 80084d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80084d6:	e233      	b.n	8008940 <UART_SetConfig+0x5d8>
 80084d8:	2304      	movs	r3, #4
 80084da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80084de:	e22f      	b.n	8008940 <UART_SetConfig+0x5d8>
 80084e0:	2308      	movs	r3, #8
 80084e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80084e6:	e22b      	b.n	8008940 <UART_SetConfig+0x5d8>
 80084e8:	2310      	movs	r3, #16
 80084ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80084ee:	e227      	b.n	8008940 <UART_SetConfig+0x5d8>
 80084f0:	2320      	movs	r3, #32
 80084f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80084f6:	e223      	b.n	8008940 <UART_SetConfig+0x5d8>
 80084f8:	2340      	movs	r3, #64	; 0x40
 80084fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80084fe:	e21f      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008500:	2380      	movs	r3, #128	; 0x80
 8008502:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008506:	bf00      	nop
 8008508:	e21a      	b.n	8008940 <UART_SetConfig+0x5d8>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a6d      	ldr	r2, [pc, #436]	; (80086c4 <UART_SetConfig+0x35c>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d132      	bne.n	800857a <UART_SetConfig+0x212>
 8008514:	4b6a      	ldr	r3, [pc, #424]	; (80086c0 <UART_SetConfig+0x358>)
 8008516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008518:	f003 0307 	and.w	r3, r3, #7
 800851c:	2b05      	cmp	r3, #5
 800851e:	d827      	bhi.n	8008570 <UART_SetConfig+0x208>
 8008520:	a201      	add	r2, pc, #4	; (adr r2, 8008528 <UART_SetConfig+0x1c0>)
 8008522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008526:	bf00      	nop
 8008528:	08008541 	.word	0x08008541
 800852c:	08008549 	.word	0x08008549
 8008530:	08008551 	.word	0x08008551
 8008534:	08008559 	.word	0x08008559
 8008538:	08008561 	.word	0x08008561
 800853c:	08008569 	.word	0x08008569
 8008540:	2300      	movs	r3, #0
 8008542:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008546:	e1fb      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008548:	2304      	movs	r3, #4
 800854a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800854e:	e1f7      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008550:	2308      	movs	r3, #8
 8008552:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008556:	e1f3      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008558:	2310      	movs	r3, #16
 800855a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800855e:	e1ef      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008560:	2320      	movs	r3, #32
 8008562:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008566:	e1eb      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008568:	2340      	movs	r3, #64	; 0x40
 800856a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800856e:	e1e7      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008570:	2380      	movs	r3, #128	; 0x80
 8008572:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008576:	bf00      	nop
 8008578:	e1e2      	b.n	8008940 <UART_SetConfig+0x5d8>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a52      	ldr	r2, [pc, #328]	; (80086c8 <UART_SetConfig+0x360>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d132      	bne.n	80085ea <UART_SetConfig+0x282>
 8008584:	4b4e      	ldr	r3, [pc, #312]	; (80086c0 <UART_SetConfig+0x358>)
 8008586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008588:	f003 0307 	and.w	r3, r3, #7
 800858c:	2b05      	cmp	r3, #5
 800858e:	d827      	bhi.n	80085e0 <UART_SetConfig+0x278>
 8008590:	a201      	add	r2, pc, #4	; (adr r2, 8008598 <UART_SetConfig+0x230>)
 8008592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008596:	bf00      	nop
 8008598:	080085b1 	.word	0x080085b1
 800859c:	080085b9 	.word	0x080085b9
 80085a0:	080085c1 	.word	0x080085c1
 80085a4:	080085c9 	.word	0x080085c9
 80085a8:	080085d1 	.word	0x080085d1
 80085ac:	080085d9 	.word	0x080085d9
 80085b0:	2300      	movs	r3, #0
 80085b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80085b6:	e1c3      	b.n	8008940 <UART_SetConfig+0x5d8>
 80085b8:	2304      	movs	r3, #4
 80085ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80085be:	e1bf      	b.n	8008940 <UART_SetConfig+0x5d8>
 80085c0:	2308      	movs	r3, #8
 80085c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80085c6:	e1bb      	b.n	8008940 <UART_SetConfig+0x5d8>
 80085c8:	2310      	movs	r3, #16
 80085ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80085ce:	e1b7      	b.n	8008940 <UART_SetConfig+0x5d8>
 80085d0:	2320      	movs	r3, #32
 80085d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80085d6:	e1b3      	b.n	8008940 <UART_SetConfig+0x5d8>
 80085d8:	2340      	movs	r3, #64	; 0x40
 80085da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80085de:	e1af      	b.n	8008940 <UART_SetConfig+0x5d8>
 80085e0:	2380      	movs	r3, #128	; 0x80
 80085e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80085e6:	bf00      	nop
 80085e8:	e1aa      	b.n	8008940 <UART_SetConfig+0x5d8>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a37      	ldr	r2, [pc, #220]	; (80086cc <UART_SetConfig+0x364>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d132      	bne.n	800865a <UART_SetConfig+0x2f2>
 80085f4:	4b32      	ldr	r3, [pc, #200]	; (80086c0 <UART_SetConfig+0x358>)
 80085f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f8:	f003 0307 	and.w	r3, r3, #7
 80085fc:	2b05      	cmp	r3, #5
 80085fe:	d827      	bhi.n	8008650 <UART_SetConfig+0x2e8>
 8008600:	a201      	add	r2, pc, #4	; (adr r2, 8008608 <UART_SetConfig+0x2a0>)
 8008602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008606:	bf00      	nop
 8008608:	08008621 	.word	0x08008621
 800860c:	08008629 	.word	0x08008629
 8008610:	08008631 	.word	0x08008631
 8008614:	08008639 	.word	0x08008639
 8008618:	08008641 	.word	0x08008641
 800861c:	08008649 	.word	0x08008649
 8008620:	2300      	movs	r3, #0
 8008622:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008626:	e18b      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008628:	2304      	movs	r3, #4
 800862a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800862e:	e187      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008630:	2308      	movs	r3, #8
 8008632:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008636:	e183      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008638:	2310      	movs	r3, #16
 800863a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800863e:	e17f      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008640:	2320      	movs	r3, #32
 8008642:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008646:	e17b      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008648:	2340      	movs	r3, #64	; 0x40
 800864a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800864e:	e177      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008650:	2380      	movs	r3, #128	; 0x80
 8008652:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008656:	bf00      	nop
 8008658:	e172      	b.n	8008940 <UART_SetConfig+0x5d8>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a1c      	ldr	r2, [pc, #112]	; (80086d0 <UART_SetConfig+0x368>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d144      	bne.n	80086ee <UART_SetConfig+0x386>
 8008664:	4b16      	ldr	r3, [pc, #88]	; (80086c0 <UART_SetConfig+0x358>)
 8008666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008668:	f003 0307 	and.w	r3, r3, #7
 800866c:	2b05      	cmp	r3, #5
 800866e:	d839      	bhi.n	80086e4 <UART_SetConfig+0x37c>
 8008670:	a201      	add	r2, pc, #4	; (adr r2, 8008678 <UART_SetConfig+0x310>)
 8008672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008676:	bf00      	nop
 8008678:	08008691 	.word	0x08008691
 800867c:	08008699 	.word	0x08008699
 8008680:	080086a1 	.word	0x080086a1
 8008684:	080086a9 	.word	0x080086a9
 8008688:	080086d5 	.word	0x080086d5
 800868c:	080086dd 	.word	0x080086dd
 8008690:	2300      	movs	r3, #0
 8008692:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008696:	e153      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008698:	2304      	movs	r3, #4
 800869a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800869e:	e14f      	b.n	8008940 <UART_SetConfig+0x5d8>
 80086a0:	2308      	movs	r3, #8
 80086a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80086a6:	e14b      	b.n	8008940 <UART_SetConfig+0x5d8>
 80086a8:	2310      	movs	r3, #16
 80086aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80086ae:	e147      	b.n	8008940 <UART_SetConfig+0x5d8>
 80086b0:	cfff69f3 	.word	0xcfff69f3
 80086b4:	58000c00 	.word	0x58000c00
 80086b8:	11fff4ff 	.word	0x11fff4ff
 80086bc:	40011000 	.word	0x40011000
 80086c0:	58024400 	.word	0x58024400
 80086c4:	40004400 	.word	0x40004400
 80086c8:	40004800 	.word	0x40004800
 80086cc:	40004c00 	.word	0x40004c00
 80086d0:	40005000 	.word	0x40005000
 80086d4:	2320      	movs	r3, #32
 80086d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80086da:	e131      	b.n	8008940 <UART_SetConfig+0x5d8>
 80086dc:	2340      	movs	r3, #64	; 0x40
 80086de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80086e2:	e12d      	b.n	8008940 <UART_SetConfig+0x5d8>
 80086e4:	2380      	movs	r3, #128	; 0x80
 80086e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80086ea:	bf00      	nop
 80086ec:	e128      	b.n	8008940 <UART_SetConfig+0x5d8>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4ac3      	ldr	r2, [pc, #780]	; (8008a00 <UART_SetConfig+0x698>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d178      	bne.n	80087ea <UART_SetConfig+0x482>
 80086f8:	4bc2      	ldr	r3, [pc, #776]	; (8008a04 <UART_SetConfig+0x69c>)
 80086fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008700:	2b28      	cmp	r3, #40	; 0x28
 8008702:	d86d      	bhi.n	80087e0 <UART_SetConfig+0x478>
 8008704:	a201      	add	r2, pc, #4	; (adr r2, 800870c <UART_SetConfig+0x3a4>)
 8008706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800870a:	bf00      	nop
 800870c:	080087b1 	.word	0x080087b1
 8008710:	080087e1 	.word	0x080087e1
 8008714:	080087e1 	.word	0x080087e1
 8008718:	080087e1 	.word	0x080087e1
 800871c:	080087e1 	.word	0x080087e1
 8008720:	080087e1 	.word	0x080087e1
 8008724:	080087e1 	.word	0x080087e1
 8008728:	080087e1 	.word	0x080087e1
 800872c:	080087b9 	.word	0x080087b9
 8008730:	080087e1 	.word	0x080087e1
 8008734:	080087e1 	.word	0x080087e1
 8008738:	080087e1 	.word	0x080087e1
 800873c:	080087e1 	.word	0x080087e1
 8008740:	080087e1 	.word	0x080087e1
 8008744:	080087e1 	.word	0x080087e1
 8008748:	080087e1 	.word	0x080087e1
 800874c:	080087c1 	.word	0x080087c1
 8008750:	080087e1 	.word	0x080087e1
 8008754:	080087e1 	.word	0x080087e1
 8008758:	080087e1 	.word	0x080087e1
 800875c:	080087e1 	.word	0x080087e1
 8008760:	080087e1 	.word	0x080087e1
 8008764:	080087e1 	.word	0x080087e1
 8008768:	080087e1 	.word	0x080087e1
 800876c:	080087c9 	.word	0x080087c9
 8008770:	080087e1 	.word	0x080087e1
 8008774:	080087e1 	.word	0x080087e1
 8008778:	080087e1 	.word	0x080087e1
 800877c:	080087e1 	.word	0x080087e1
 8008780:	080087e1 	.word	0x080087e1
 8008784:	080087e1 	.word	0x080087e1
 8008788:	080087e1 	.word	0x080087e1
 800878c:	080087d1 	.word	0x080087d1
 8008790:	080087e1 	.word	0x080087e1
 8008794:	080087e1 	.word	0x080087e1
 8008798:	080087e1 	.word	0x080087e1
 800879c:	080087e1 	.word	0x080087e1
 80087a0:	080087e1 	.word	0x080087e1
 80087a4:	080087e1 	.word	0x080087e1
 80087a8:	080087e1 	.word	0x080087e1
 80087ac:	080087d9 	.word	0x080087d9
 80087b0:	2301      	movs	r3, #1
 80087b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80087b6:	e0c3      	b.n	8008940 <UART_SetConfig+0x5d8>
 80087b8:	2304      	movs	r3, #4
 80087ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80087be:	e0bf      	b.n	8008940 <UART_SetConfig+0x5d8>
 80087c0:	2308      	movs	r3, #8
 80087c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80087c6:	e0bb      	b.n	8008940 <UART_SetConfig+0x5d8>
 80087c8:	2310      	movs	r3, #16
 80087ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80087ce:	e0b7      	b.n	8008940 <UART_SetConfig+0x5d8>
 80087d0:	2320      	movs	r3, #32
 80087d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80087d6:	e0b3      	b.n	8008940 <UART_SetConfig+0x5d8>
 80087d8:	2340      	movs	r3, #64	; 0x40
 80087da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80087de:	e0af      	b.n	8008940 <UART_SetConfig+0x5d8>
 80087e0:	2380      	movs	r3, #128	; 0x80
 80087e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80087e6:	bf00      	nop
 80087e8:	e0aa      	b.n	8008940 <UART_SetConfig+0x5d8>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a86      	ldr	r2, [pc, #536]	; (8008a08 <UART_SetConfig+0x6a0>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d132      	bne.n	800885a <UART_SetConfig+0x4f2>
 80087f4:	4b83      	ldr	r3, [pc, #524]	; (8008a04 <UART_SetConfig+0x69c>)
 80087f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f8:	f003 0307 	and.w	r3, r3, #7
 80087fc:	2b05      	cmp	r3, #5
 80087fe:	d827      	bhi.n	8008850 <UART_SetConfig+0x4e8>
 8008800:	a201      	add	r2, pc, #4	; (adr r2, 8008808 <UART_SetConfig+0x4a0>)
 8008802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008806:	bf00      	nop
 8008808:	08008821 	.word	0x08008821
 800880c:	08008829 	.word	0x08008829
 8008810:	08008831 	.word	0x08008831
 8008814:	08008839 	.word	0x08008839
 8008818:	08008841 	.word	0x08008841
 800881c:	08008849 	.word	0x08008849
 8008820:	2300      	movs	r3, #0
 8008822:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008826:	e08b      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008828:	2304      	movs	r3, #4
 800882a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800882e:	e087      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008830:	2308      	movs	r3, #8
 8008832:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008836:	e083      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008838:	2310      	movs	r3, #16
 800883a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800883e:	e07f      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008840:	2320      	movs	r3, #32
 8008842:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008846:	e07b      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008848:	2340      	movs	r3, #64	; 0x40
 800884a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800884e:	e077      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008850:	2380      	movs	r3, #128	; 0x80
 8008852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008856:	bf00      	nop
 8008858:	e072      	b.n	8008940 <UART_SetConfig+0x5d8>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a6b      	ldr	r2, [pc, #428]	; (8008a0c <UART_SetConfig+0x6a4>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d132      	bne.n	80088ca <UART_SetConfig+0x562>
 8008864:	4b67      	ldr	r3, [pc, #412]	; (8008a04 <UART_SetConfig+0x69c>)
 8008866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008868:	f003 0307 	and.w	r3, r3, #7
 800886c:	2b05      	cmp	r3, #5
 800886e:	d827      	bhi.n	80088c0 <UART_SetConfig+0x558>
 8008870:	a201      	add	r2, pc, #4	; (adr r2, 8008878 <UART_SetConfig+0x510>)
 8008872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008876:	bf00      	nop
 8008878:	08008891 	.word	0x08008891
 800887c:	08008899 	.word	0x08008899
 8008880:	080088a1 	.word	0x080088a1
 8008884:	080088a9 	.word	0x080088a9
 8008888:	080088b1 	.word	0x080088b1
 800888c:	080088b9 	.word	0x080088b9
 8008890:	2300      	movs	r3, #0
 8008892:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008896:	e053      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008898:	2304      	movs	r3, #4
 800889a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800889e:	e04f      	b.n	8008940 <UART_SetConfig+0x5d8>
 80088a0:	2308      	movs	r3, #8
 80088a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80088a6:	e04b      	b.n	8008940 <UART_SetConfig+0x5d8>
 80088a8:	2310      	movs	r3, #16
 80088aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80088ae:	e047      	b.n	8008940 <UART_SetConfig+0x5d8>
 80088b0:	2320      	movs	r3, #32
 80088b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80088b6:	e043      	b.n	8008940 <UART_SetConfig+0x5d8>
 80088b8:	2340      	movs	r3, #64	; 0x40
 80088ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80088be:	e03f      	b.n	8008940 <UART_SetConfig+0x5d8>
 80088c0:	2380      	movs	r3, #128	; 0x80
 80088c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80088c6:	bf00      	nop
 80088c8:	e03a      	b.n	8008940 <UART_SetConfig+0x5d8>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a50      	ldr	r2, [pc, #320]	; (8008a10 <UART_SetConfig+0x6a8>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d132      	bne.n	800893a <UART_SetConfig+0x5d2>
 80088d4:	4b4b      	ldr	r3, [pc, #300]	; (8008a04 <UART_SetConfig+0x69c>)
 80088d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d8:	f003 0307 	and.w	r3, r3, #7
 80088dc:	2b05      	cmp	r3, #5
 80088de:	d827      	bhi.n	8008930 <UART_SetConfig+0x5c8>
 80088e0:	a201      	add	r2, pc, #4	; (adr r2, 80088e8 <UART_SetConfig+0x580>)
 80088e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e6:	bf00      	nop
 80088e8:	08008901 	.word	0x08008901
 80088ec:	08008909 	.word	0x08008909
 80088f0:	08008911 	.word	0x08008911
 80088f4:	08008919 	.word	0x08008919
 80088f8:	08008921 	.word	0x08008921
 80088fc:	08008929 	.word	0x08008929
 8008900:	2302      	movs	r3, #2
 8008902:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008906:	e01b      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008908:	2304      	movs	r3, #4
 800890a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800890e:	e017      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008910:	2308      	movs	r3, #8
 8008912:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008916:	e013      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008918:	2310      	movs	r3, #16
 800891a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800891e:	e00f      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008920:	2320      	movs	r3, #32
 8008922:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008926:	e00b      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008928:	2340      	movs	r3, #64	; 0x40
 800892a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800892e:	e007      	b.n	8008940 <UART_SetConfig+0x5d8>
 8008930:	2380      	movs	r3, #128	; 0x80
 8008932:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008936:	bf00      	nop
 8008938:	e002      	b.n	8008940 <UART_SetConfig+0x5d8>
 800893a:	2380      	movs	r3, #128	; 0x80
 800893c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a32      	ldr	r2, [pc, #200]	; (8008a10 <UART_SetConfig+0x6a8>)
 8008946:	4293      	cmp	r3, r2
 8008948:	f040 86f7 	bne.w	800973a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800894c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008950:	2b08      	cmp	r3, #8
 8008952:	f000 80c0 	beq.w	8008ad6 <UART_SetConfig+0x76e>
 8008956:	2b08      	cmp	r3, #8
 8008958:	dc04      	bgt.n	8008964 <UART_SetConfig+0x5fc>
 800895a:	2b02      	cmp	r3, #2
 800895c:	d00c      	beq.n	8008978 <UART_SetConfig+0x610>
 800895e:	2b04      	cmp	r3, #4
 8008960:	d065      	beq.n	8008a2e <UART_SetConfig+0x6c6>
 8008962:	e27a      	b.n	8008e5a <UART_SetConfig+0xaf2>
 8008964:	2b20      	cmp	r3, #32
 8008966:	f000 81b0 	beq.w	8008cca <UART_SetConfig+0x962>
 800896a:	2b40      	cmp	r3, #64	; 0x40
 800896c:	f000 821e 	beq.w	8008dac <UART_SetConfig+0xa44>
 8008970:	2b10      	cmp	r3, #16
 8008972:	f000 8104 	beq.w	8008b7e <UART_SetConfig+0x816>
 8008976:	e270      	b.n	8008e5a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008978:	f7fe fb86 	bl	8007088 <HAL_RCCEx_GetD3PCLK1Freq>
 800897c:	4602      	mov	r2, r0
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008982:	2b00      	cmp	r3, #0
 8008984:	d04e      	beq.n	8008a24 <UART_SetConfig+0x6bc>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	2b01      	cmp	r3, #1
 800898c:	d048      	beq.n	8008a20 <UART_SetConfig+0x6b8>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008992:	2b02      	cmp	r3, #2
 8008994:	d042      	beq.n	8008a1c <UART_SetConfig+0x6b4>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	2b03      	cmp	r3, #3
 800899c:	d03c      	beq.n	8008a18 <UART_SetConfig+0x6b0>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	d036      	beq.n	8008a14 <UART_SetConfig+0x6ac>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089aa:	2b05      	cmp	r3, #5
 80089ac:	d026      	beq.n	80089fc <UART_SetConfig+0x694>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b2:	2b06      	cmp	r3, #6
 80089b4:	d020      	beq.n	80089f8 <UART_SetConfig+0x690>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ba:	2b07      	cmp	r3, #7
 80089bc:	d01a      	beq.n	80089f4 <UART_SetConfig+0x68c>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c2:	2b08      	cmp	r3, #8
 80089c4:	d014      	beq.n	80089f0 <UART_SetConfig+0x688>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ca:	2b09      	cmp	r3, #9
 80089cc:	d00e      	beq.n	80089ec <UART_SetConfig+0x684>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d2:	2b0a      	cmp	r3, #10
 80089d4:	d008      	beq.n	80089e8 <UART_SetConfig+0x680>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089da:	2b0b      	cmp	r3, #11
 80089dc:	d102      	bne.n	80089e4 <UART_SetConfig+0x67c>
 80089de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089e2:	e020      	b.n	8008a26 <UART_SetConfig+0x6be>
 80089e4:	2301      	movs	r3, #1
 80089e6:	e01e      	b.n	8008a26 <UART_SetConfig+0x6be>
 80089e8:	2380      	movs	r3, #128	; 0x80
 80089ea:	e01c      	b.n	8008a26 <UART_SetConfig+0x6be>
 80089ec:	2340      	movs	r3, #64	; 0x40
 80089ee:	e01a      	b.n	8008a26 <UART_SetConfig+0x6be>
 80089f0:	2320      	movs	r3, #32
 80089f2:	e018      	b.n	8008a26 <UART_SetConfig+0x6be>
 80089f4:	2310      	movs	r3, #16
 80089f6:	e016      	b.n	8008a26 <UART_SetConfig+0x6be>
 80089f8:	230c      	movs	r3, #12
 80089fa:	e014      	b.n	8008a26 <UART_SetConfig+0x6be>
 80089fc:	230a      	movs	r3, #10
 80089fe:	e012      	b.n	8008a26 <UART_SetConfig+0x6be>
 8008a00:	40011400 	.word	0x40011400
 8008a04:	58024400 	.word	0x58024400
 8008a08:	40007800 	.word	0x40007800
 8008a0c:	40007c00 	.word	0x40007c00
 8008a10:	58000c00 	.word	0x58000c00
 8008a14:	2308      	movs	r3, #8
 8008a16:	e006      	b.n	8008a26 <UART_SetConfig+0x6be>
 8008a18:	2306      	movs	r3, #6
 8008a1a:	e004      	b.n	8008a26 <UART_SetConfig+0x6be>
 8008a1c:	2304      	movs	r3, #4
 8008a1e:	e002      	b.n	8008a26 <UART_SetConfig+0x6be>
 8008a20:	2302      	movs	r3, #2
 8008a22:	e000      	b.n	8008a26 <UART_SetConfig+0x6be>
 8008a24:	2301      	movs	r3, #1
 8008a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a2c:	e219      	b.n	8008e62 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a2e:	f107 0318 	add.w	r3, r7, #24
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fe fb3e 	bl	80070b4 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008a38:	69fa      	ldr	r2, [r7, #28]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d044      	beq.n	8008acc <UART_SetConfig+0x764>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d03e      	beq.n	8008ac8 <UART_SetConfig+0x760>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d038      	beq.n	8008ac4 <UART_SetConfig+0x75c>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	2b03      	cmp	r3, #3
 8008a58:	d032      	beq.n	8008ac0 <UART_SetConfig+0x758>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5e:	2b04      	cmp	r3, #4
 8008a60:	d02c      	beq.n	8008abc <UART_SetConfig+0x754>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a66:	2b05      	cmp	r3, #5
 8008a68:	d026      	beq.n	8008ab8 <UART_SetConfig+0x750>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6e:	2b06      	cmp	r3, #6
 8008a70:	d020      	beq.n	8008ab4 <UART_SetConfig+0x74c>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a76:	2b07      	cmp	r3, #7
 8008a78:	d01a      	beq.n	8008ab0 <UART_SetConfig+0x748>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7e:	2b08      	cmp	r3, #8
 8008a80:	d014      	beq.n	8008aac <UART_SetConfig+0x744>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a86:	2b09      	cmp	r3, #9
 8008a88:	d00e      	beq.n	8008aa8 <UART_SetConfig+0x740>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8e:	2b0a      	cmp	r3, #10
 8008a90:	d008      	beq.n	8008aa4 <UART_SetConfig+0x73c>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a96:	2b0b      	cmp	r3, #11
 8008a98:	d102      	bne.n	8008aa0 <UART_SetConfig+0x738>
 8008a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a9e:	e016      	b.n	8008ace <UART_SetConfig+0x766>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e014      	b.n	8008ace <UART_SetConfig+0x766>
 8008aa4:	2380      	movs	r3, #128	; 0x80
 8008aa6:	e012      	b.n	8008ace <UART_SetConfig+0x766>
 8008aa8:	2340      	movs	r3, #64	; 0x40
 8008aaa:	e010      	b.n	8008ace <UART_SetConfig+0x766>
 8008aac:	2320      	movs	r3, #32
 8008aae:	e00e      	b.n	8008ace <UART_SetConfig+0x766>
 8008ab0:	2310      	movs	r3, #16
 8008ab2:	e00c      	b.n	8008ace <UART_SetConfig+0x766>
 8008ab4:	230c      	movs	r3, #12
 8008ab6:	e00a      	b.n	8008ace <UART_SetConfig+0x766>
 8008ab8:	230a      	movs	r3, #10
 8008aba:	e008      	b.n	8008ace <UART_SetConfig+0x766>
 8008abc:	2308      	movs	r3, #8
 8008abe:	e006      	b.n	8008ace <UART_SetConfig+0x766>
 8008ac0:	2306      	movs	r3, #6
 8008ac2:	e004      	b.n	8008ace <UART_SetConfig+0x766>
 8008ac4:	2304      	movs	r3, #4
 8008ac6:	e002      	b.n	8008ace <UART_SetConfig+0x766>
 8008ac8:	2302      	movs	r3, #2
 8008aca:	e000      	b.n	8008ace <UART_SetConfig+0x766>
 8008acc:	2301      	movs	r3, #1
 8008ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ad4:	e1c5      	b.n	8008e62 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ad6:	f107 030c 	add.w	r3, r7, #12
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe fc36 	bl	800734c <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d044      	beq.n	8008b74 <UART_SetConfig+0x80c>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d03e      	beq.n	8008b70 <UART_SetConfig+0x808>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d038      	beq.n	8008b6c <UART_SetConfig+0x804>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afe:	2b03      	cmp	r3, #3
 8008b00:	d032      	beq.n	8008b68 <UART_SetConfig+0x800>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	d02c      	beq.n	8008b64 <UART_SetConfig+0x7fc>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0e:	2b05      	cmp	r3, #5
 8008b10:	d026      	beq.n	8008b60 <UART_SetConfig+0x7f8>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b16:	2b06      	cmp	r3, #6
 8008b18:	d020      	beq.n	8008b5c <UART_SetConfig+0x7f4>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1e:	2b07      	cmp	r3, #7
 8008b20:	d01a      	beq.n	8008b58 <UART_SetConfig+0x7f0>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b26:	2b08      	cmp	r3, #8
 8008b28:	d014      	beq.n	8008b54 <UART_SetConfig+0x7ec>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2e:	2b09      	cmp	r3, #9
 8008b30:	d00e      	beq.n	8008b50 <UART_SetConfig+0x7e8>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b36:	2b0a      	cmp	r3, #10
 8008b38:	d008      	beq.n	8008b4c <UART_SetConfig+0x7e4>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3e:	2b0b      	cmp	r3, #11
 8008b40:	d102      	bne.n	8008b48 <UART_SetConfig+0x7e0>
 8008b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b46:	e016      	b.n	8008b76 <UART_SetConfig+0x80e>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e014      	b.n	8008b76 <UART_SetConfig+0x80e>
 8008b4c:	2380      	movs	r3, #128	; 0x80
 8008b4e:	e012      	b.n	8008b76 <UART_SetConfig+0x80e>
 8008b50:	2340      	movs	r3, #64	; 0x40
 8008b52:	e010      	b.n	8008b76 <UART_SetConfig+0x80e>
 8008b54:	2320      	movs	r3, #32
 8008b56:	e00e      	b.n	8008b76 <UART_SetConfig+0x80e>
 8008b58:	2310      	movs	r3, #16
 8008b5a:	e00c      	b.n	8008b76 <UART_SetConfig+0x80e>
 8008b5c:	230c      	movs	r3, #12
 8008b5e:	e00a      	b.n	8008b76 <UART_SetConfig+0x80e>
 8008b60:	230a      	movs	r3, #10
 8008b62:	e008      	b.n	8008b76 <UART_SetConfig+0x80e>
 8008b64:	2308      	movs	r3, #8
 8008b66:	e006      	b.n	8008b76 <UART_SetConfig+0x80e>
 8008b68:	2306      	movs	r3, #6
 8008b6a:	e004      	b.n	8008b76 <UART_SetConfig+0x80e>
 8008b6c:	2304      	movs	r3, #4
 8008b6e:	e002      	b.n	8008b76 <UART_SetConfig+0x80e>
 8008b70:	2302      	movs	r3, #2
 8008b72:	e000      	b.n	8008b76 <UART_SetConfig+0x80e>
 8008b74:	2301      	movs	r3, #1
 8008b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b7c:	e171      	b.n	8008e62 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b7e:	4b7a      	ldr	r3, [pc, #488]	; (8008d68 <UART_SetConfig+0xa00>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 0320 	and.w	r3, r3, #32
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d054      	beq.n	8008c34 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008b8a:	4b77      	ldr	r3, [pc, #476]	; (8008d68 <UART_SetConfig+0xa00>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	08db      	lsrs	r3, r3, #3
 8008b90:	f003 0303 	and.w	r3, r3, #3
 8008b94:	4a75      	ldr	r2, [pc, #468]	; (8008d6c <UART_SetConfig+0xa04>)
 8008b96:	40da      	lsrs	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d044      	beq.n	8008c2a <UART_SetConfig+0x8c2>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d03e      	beq.n	8008c26 <UART_SetConfig+0x8be>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d038      	beq.n	8008c22 <UART_SetConfig+0x8ba>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb4:	2b03      	cmp	r3, #3
 8008bb6:	d032      	beq.n	8008c1e <UART_SetConfig+0x8b6>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbc:	2b04      	cmp	r3, #4
 8008bbe:	d02c      	beq.n	8008c1a <UART_SetConfig+0x8b2>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc4:	2b05      	cmp	r3, #5
 8008bc6:	d026      	beq.n	8008c16 <UART_SetConfig+0x8ae>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bcc:	2b06      	cmp	r3, #6
 8008bce:	d020      	beq.n	8008c12 <UART_SetConfig+0x8aa>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd4:	2b07      	cmp	r3, #7
 8008bd6:	d01a      	beq.n	8008c0e <UART_SetConfig+0x8a6>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bdc:	2b08      	cmp	r3, #8
 8008bde:	d014      	beq.n	8008c0a <UART_SetConfig+0x8a2>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be4:	2b09      	cmp	r3, #9
 8008be6:	d00e      	beq.n	8008c06 <UART_SetConfig+0x89e>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bec:	2b0a      	cmp	r3, #10
 8008bee:	d008      	beq.n	8008c02 <UART_SetConfig+0x89a>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf4:	2b0b      	cmp	r3, #11
 8008bf6:	d102      	bne.n	8008bfe <UART_SetConfig+0x896>
 8008bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bfc:	e016      	b.n	8008c2c <UART_SetConfig+0x8c4>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e014      	b.n	8008c2c <UART_SetConfig+0x8c4>
 8008c02:	2380      	movs	r3, #128	; 0x80
 8008c04:	e012      	b.n	8008c2c <UART_SetConfig+0x8c4>
 8008c06:	2340      	movs	r3, #64	; 0x40
 8008c08:	e010      	b.n	8008c2c <UART_SetConfig+0x8c4>
 8008c0a:	2320      	movs	r3, #32
 8008c0c:	e00e      	b.n	8008c2c <UART_SetConfig+0x8c4>
 8008c0e:	2310      	movs	r3, #16
 8008c10:	e00c      	b.n	8008c2c <UART_SetConfig+0x8c4>
 8008c12:	230c      	movs	r3, #12
 8008c14:	e00a      	b.n	8008c2c <UART_SetConfig+0x8c4>
 8008c16:	230a      	movs	r3, #10
 8008c18:	e008      	b.n	8008c2c <UART_SetConfig+0x8c4>
 8008c1a:	2308      	movs	r3, #8
 8008c1c:	e006      	b.n	8008c2c <UART_SetConfig+0x8c4>
 8008c1e:	2306      	movs	r3, #6
 8008c20:	e004      	b.n	8008c2c <UART_SetConfig+0x8c4>
 8008c22:	2304      	movs	r3, #4
 8008c24:	e002      	b.n	8008c2c <UART_SetConfig+0x8c4>
 8008c26:	2302      	movs	r3, #2
 8008c28:	e000      	b.n	8008c2c <UART_SetConfig+0x8c4>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8008c32:	e116      	b.n	8008e62 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d043      	beq.n	8008cc4 <UART_SetConfig+0x95c>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d03d      	beq.n	8008cc0 <UART_SetConfig+0x958>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d037      	beq.n	8008cbc <UART_SetConfig+0x954>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c50:	2b03      	cmp	r3, #3
 8008c52:	d031      	beq.n	8008cb8 <UART_SetConfig+0x950>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	d02b      	beq.n	8008cb4 <UART_SetConfig+0x94c>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c60:	2b05      	cmp	r3, #5
 8008c62:	d025      	beq.n	8008cb0 <UART_SetConfig+0x948>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c68:	2b06      	cmp	r3, #6
 8008c6a:	d01f      	beq.n	8008cac <UART_SetConfig+0x944>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c70:	2b07      	cmp	r3, #7
 8008c72:	d019      	beq.n	8008ca8 <UART_SetConfig+0x940>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c78:	2b08      	cmp	r3, #8
 8008c7a:	d013      	beq.n	8008ca4 <UART_SetConfig+0x93c>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c80:	2b09      	cmp	r3, #9
 8008c82:	d00d      	beq.n	8008ca0 <UART_SetConfig+0x938>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c88:	2b0a      	cmp	r3, #10
 8008c8a:	d007      	beq.n	8008c9c <UART_SetConfig+0x934>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c90:	2b0b      	cmp	r3, #11
 8008c92:	d101      	bne.n	8008c98 <UART_SetConfig+0x930>
 8008c94:	4b36      	ldr	r3, [pc, #216]	; (8008d70 <UART_SetConfig+0xa08>)
 8008c96:	e016      	b.n	8008cc6 <UART_SetConfig+0x95e>
 8008c98:	4b34      	ldr	r3, [pc, #208]	; (8008d6c <UART_SetConfig+0xa04>)
 8008c9a:	e014      	b.n	8008cc6 <UART_SetConfig+0x95e>
 8008c9c:	4b35      	ldr	r3, [pc, #212]	; (8008d74 <UART_SetConfig+0xa0c>)
 8008c9e:	e012      	b.n	8008cc6 <UART_SetConfig+0x95e>
 8008ca0:	4b35      	ldr	r3, [pc, #212]	; (8008d78 <UART_SetConfig+0xa10>)
 8008ca2:	e010      	b.n	8008cc6 <UART_SetConfig+0x95e>
 8008ca4:	4b35      	ldr	r3, [pc, #212]	; (8008d7c <UART_SetConfig+0xa14>)
 8008ca6:	e00e      	b.n	8008cc6 <UART_SetConfig+0x95e>
 8008ca8:	4b35      	ldr	r3, [pc, #212]	; (8008d80 <UART_SetConfig+0xa18>)
 8008caa:	e00c      	b.n	8008cc6 <UART_SetConfig+0x95e>
 8008cac:	4b35      	ldr	r3, [pc, #212]	; (8008d84 <UART_SetConfig+0xa1c>)
 8008cae:	e00a      	b.n	8008cc6 <UART_SetConfig+0x95e>
 8008cb0:	4b35      	ldr	r3, [pc, #212]	; (8008d88 <UART_SetConfig+0xa20>)
 8008cb2:	e008      	b.n	8008cc6 <UART_SetConfig+0x95e>
 8008cb4:	4b35      	ldr	r3, [pc, #212]	; (8008d8c <UART_SetConfig+0xa24>)
 8008cb6:	e006      	b.n	8008cc6 <UART_SetConfig+0x95e>
 8008cb8:	4b35      	ldr	r3, [pc, #212]	; (8008d90 <UART_SetConfig+0xa28>)
 8008cba:	e004      	b.n	8008cc6 <UART_SetConfig+0x95e>
 8008cbc:	4b35      	ldr	r3, [pc, #212]	; (8008d94 <UART_SetConfig+0xa2c>)
 8008cbe:	e002      	b.n	8008cc6 <UART_SetConfig+0x95e>
 8008cc0:	4b35      	ldr	r3, [pc, #212]	; (8008d98 <UART_SetConfig+0xa30>)
 8008cc2:	e000      	b.n	8008cc6 <UART_SetConfig+0x95e>
 8008cc4:	4b29      	ldr	r3, [pc, #164]	; (8008d6c <UART_SetConfig+0xa04>)
 8008cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cc8:	e0cb      	b.n	8008e62 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d046      	beq.n	8008d60 <UART_SetConfig+0x9f8>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d040      	beq.n	8008d5c <UART_SetConfig+0x9f4>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d03a      	beq.n	8008d58 <UART_SetConfig+0x9f0>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d034      	beq.n	8008d54 <UART_SetConfig+0x9ec>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cee:	2b04      	cmp	r3, #4
 8008cf0:	d02e      	beq.n	8008d50 <UART_SetConfig+0x9e8>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf6:	2b05      	cmp	r3, #5
 8008cf8:	d028      	beq.n	8008d4c <UART_SetConfig+0x9e4>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfe:	2b06      	cmp	r3, #6
 8008d00:	d022      	beq.n	8008d48 <UART_SetConfig+0x9e0>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d06:	2b07      	cmp	r3, #7
 8008d08:	d01c      	beq.n	8008d44 <UART_SetConfig+0x9dc>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0e:	2b08      	cmp	r3, #8
 8008d10:	d016      	beq.n	8008d40 <UART_SetConfig+0x9d8>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d16:	2b09      	cmp	r3, #9
 8008d18:	d00f      	beq.n	8008d3a <UART_SetConfig+0x9d2>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1e:	2b0a      	cmp	r3, #10
 8008d20:	d008      	beq.n	8008d34 <UART_SetConfig+0x9cc>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	2b0b      	cmp	r3, #11
 8008d28:	d102      	bne.n	8008d30 <UART_SetConfig+0x9c8>
 8008d2a:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008d2e:	e018      	b.n	8008d62 <UART_SetConfig+0x9fa>
 8008d30:	4b13      	ldr	r3, [pc, #76]	; (8008d80 <UART_SetConfig+0xa18>)
 8008d32:	e016      	b.n	8008d62 <UART_SetConfig+0x9fa>
 8008d34:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008d38:	e013      	b.n	8008d62 <UART_SetConfig+0x9fa>
 8008d3a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008d3e:	e010      	b.n	8008d62 <UART_SetConfig+0x9fa>
 8008d40:	4b16      	ldr	r3, [pc, #88]	; (8008d9c <UART_SetConfig+0xa34>)
 8008d42:	e00e      	b.n	8008d62 <UART_SetConfig+0x9fa>
 8008d44:	4b0a      	ldr	r3, [pc, #40]	; (8008d70 <UART_SetConfig+0xa08>)
 8008d46:	e00c      	b.n	8008d62 <UART_SetConfig+0x9fa>
 8008d48:	4b15      	ldr	r3, [pc, #84]	; (8008da0 <UART_SetConfig+0xa38>)
 8008d4a:	e00a      	b.n	8008d62 <UART_SetConfig+0x9fa>
 8008d4c:	4b15      	ldr	r3, [pc, #84]	; (8008da4 <UART_SetConfig+0xa3c>)
 8008d4e:	e008      	b.n	8008d62 <UART_SetConfig+0x9fa>
 8008d50:	4b08      	ldr	r3, [pc, #32]	; (8008d74 <UART_SetConfig+0xa0c>)
 8008d52:	e006      	b.n	8008d62 <UART_SetConfig+0x9fa>
 8008d54:	4b14      	ldr	r3, [pc, #80]	; (8008da8 <UART_SetConfig+0xa40>)
 8008d56:	e004      	b.n	8008d62 <UART_SetConfig+0x9fa>
 8008d58:	4b07      	ldr	r3, [pc, #28]	; (8008d78 <UART_SetConfig+0xa10>)
 8008d5a:	e002      	b.n	8008d62 <UART_SetConfig+0x9fa>
 8008d5c:	4b07      	ldr	r3, [pc, #28]	; (8008d7c <UART_SetConfig+0xa14>)
 8008d5e:	e000      	b.n	8008d62 <UART_SetConfig+0x9fa>
 8008d60:	4b07      	ldr	r3, [pc, #28]	; (8008d80 <UART_SetConfig+0xa18>)
 8008d62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d64:	e07d      	b.n	8008e62 <UART_SetConfig+0xafa>
 8008d66:	bf00      	nop
 8008d68:	58024400 	.word	0x58024400
 8008d6c:	03d09000 	.word	0x03d09000
 8008d70:	0003d090 	.word	0x0003d090
 8008d74:	0007a120 	.word	0x0007a120
 8008d78:	000f4240 	.word	0x000f4240
 8008d7c:	001e8480 	.word	0x001e8480
 8008d80:	003d0900 	.word	0x003d0900
 8008d84:	00516155 	.word	0x00516155
 8008d88:	0061a800 	.word	0x0061a800
 8008d8c:	007a1200 	.word	0x007a1200
 8008d90:	00a2c2aa 	.word	0x00a2c2aa
 8008d94:	00f42400 	.word	0x00f42400
 8008d98:	01e84800 	.word	0x01e84800
 8008d9c:	0001e848 	.word	0x0001e848
 8008da0:	00051615 	.word	0x00051615
 8008da4:	00061a80 	.word	0x00061a80
 8008da8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d04e      	beq.n	8008e52 <UART_SetConfig+0xaea>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d047      	beq.n	8008e4c <UART_SetConfig+0xae4>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d040      	beq.n	8008e46 <UART_SetConfig+0xade>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	d039      	beq.n	8008e40 <UART_SetConfig+0xad8>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd0:	2b04      	cmp	r3, #4
 8008dd2:	d032      	beq.n	8008e3a <UART_SetConfig+0xad2>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd8:	2b05      	cmp	r3, #5
 8008dda:	d02b      	beq.n	8008e34 <UART_SetConfig+0xacc>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de0:	2b06      	cmp	r3, #6
 8008de2:	d024      	beq.n	8008e2e <UART_SetConfig+0xac6>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de8:	2b07      	cmp	r3, #7
 8008dea:	d01d      	beq.n	8008e28 <UART_SetConfig+0xac0>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	2b08      	cmp	r3, #8
 8008df2:	d016      	beq.n	8008e22 <UART_SetConfig+0xaba>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df8:	2b09      	cmp	r3, #9
 8008dfa:	d00f      	beq.n	8008e1c <UART_SetConfig+0xab4>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e00:	2b0a      	cmp	r3, #10
 8008e02:	d008      	beq.n	8008e16 <UART_SetConfig+0xaae>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e08:	2b0b      	cmp	r3, #11
 8008e0a:	d101      	bne.n	8008e10 <UART_SetConfig+0xaa8>
 8008e0c:	2380      	movs	r3, #128	; 0x80
 8008e0e:	e022      	b.n	8008e56 <UART_SetConfig+0xaee>
 8008e10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e14:	e01f      	b.n	8008e56 <UART_SetConfig+0xaee>
 8008e16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e1a:	e01c      	b.n	8008e56 <UART_SetConfig+0xaee>
 8008e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e20:	e019      	b.n	8008e56 <UART_SetConfig+0xaee>
 8008e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e26:	e016      	b.n	8008e56 <UART_SetConfig+0xaee>
 8008e28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e2c:	e013      	b.n	8008e56 <UART_SetConfig+0xaee>
 8008e2e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008e32:	e010      	b.n	8008e56 <UART_SetConfig+0xaee>
 8008e34:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008e38:	e00d      	b.n	8008e56 <UART_SetConfig+0xaee>
 8008e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e3e:	e00a      	b.n	8008e56 <UART_SetConfig+0xaee>
 8008e40:	f241 5355 	movw	r3, #5461	; 0x1555
 8008e44:	e007      	b.n	8008e56 <UART_SetConfig+0xaee>
 8008e46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e4a:	e004      	b.n	8008e56 <UART_SetConfig+0xaee>
 8008e4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008e50:	e001      	b.n	8008e56 <UART_SetConfig+0xaee>
 8008e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e58:	e003      	b.n	8008e62 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008e60:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8008e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f001 83e8 	beq.w	800a63a <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	4413      	add	r3, r2
 8008e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d305      	bcc.n	8008e86 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d904      	bls.n	8008e90 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e8c:	f001 bbd5 	b.w	800a63a <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8008e90:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008e94:	2b08      	cmp	r3, #8
 8008e96:	f000 8154 	beq.w	8009142 <UART_SetConfig+0xdda>
 8008e9a:	2b08      	cmp	r3, #8
 8008e9c:	dc06      	bgt.n	8008eac <UART_SetConfig+0xb44>
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d00f      	beq.n	8008ec2 <UART_SetConfig+0xb5a>
 8008ea2:	2b04      	cmp	r3, #4
 8008ea4:	f000 80ac 	beq.w	8009000 <UART_SetConfig+0xc98>
 8008ea8:	f000 bc30 	b.w	800970c <UART_SetConfig+0x13a4>
 8008eac:	2b20      	cmp	r3, #32
 8008eae:	f000 832d 	beq.w	800950c <UART_SetConfig+0x11a4>
 8008eb2:	2b40      	cmp	r3, #64	; 0x40
 8008eb4:	f000 83a5 	beq.w	8009602 <UART_SetConfig+0x129a>
 8008eb8:	2b10      	cmp	r3, #16
 8008eba:	f000 81e3 	beq.w	8009284 <UART_SetConfig+0xf1c>
 8008ebe:	f000 bc25 	b.w	800970c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008ec2:	f7fe f8e1 	bl	8007088 <HAL_RCCEx_GetD3PCLK1Freq>
 8008ec6:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f04f 0100 	mov.w	r1, #0
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d067      	beq.n	8008fa8 <UART_SetConfig+0xc40>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d05e      	beq.n	8008f9e <UART_SetConfig+0xc36>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d055      	beq.n	8008f94 <UART_SetConfig+0xc2c>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eec:	2b03      	cmp	r3, #3
 8008eee:	d04c      	beq.n	8008f8a <UART_SetConfig+0xc22>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef4:	2b04      	cmp	r3, #4
 8008ef6:	d043      	beq.n	8008f80 <UART_SetConfig+0xc18>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	2b05      	cmp	r3, #5
 8008efe:	d03a      	beq.n	8008f76 <UART_SetConfig+0xc0e>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	2b06      	cmp	r3, #6
 8008f06:	d031      	beq.n	8008f6c <UART_SetConfig+0xc04>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0c:	2b07      	cmp	r3, #7
 8008f0e:	d028      	beq.n	8008f62 <UART_SetConfig+0xbfa>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f14:	2b08      	cmp	r3, #8
 8008f16:	d01f      	beq.n	8008f58 <UART_SetConfig+0xbf0>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	2b09      	cmp	r3, #9
 8008f1e:	d016      	beq.n	8008f4e <UART_SetConfig+0xbe6>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f24:	2b0a      	cmp	r3, #10
 8008f26:	d00d      	beq.n	8008f44 <UART_SetConfig+0xbdc>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2c:	2b0b      	cmp	r3, #11
 8008f2e:	d104      	bne.n	8008f3a <UART_SetConfig+0xbd2>
 8008f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f34:	f04f 0400 	mov.w	r4, #0
 8008f38:	e03a      	b.n	8008fb0 <UART_SetConfig+0xc48>
 8008f3a:	f04f 0301 	mov.w	r3, #1
 8008f3e:	f04f 0400 	mov.w	r4, #0
 8008f42:	e035      	b.n	8008fb0 <UART_SetConfig+0xc48>
 8008f44:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008f48:	f04f 0400 	mov.w	r4, #0
 8008f4c:	e030      	b.n	8008fb0 <UART_SetConfig+0xc48>
 8008f4e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008f52:	f04f 0400 	mov.w	r4, #0
 8008f56:	e02b      	b.n	8008fb0 <UART_SetConfig+0xc48>
 8008f58:	f04f 0320 	mov.w	r3, #32
 8008f5c:	f04f 0400 	mov.w	r4, #0
 8008f60:	e026      	b.n	8008fb0 <UART_SetConfig+0xc48>
 8008f62:	f04f 0310 	mov.w	r3, #16
 8008f66:	f04f 0400 	mov.w	r4, #0
 8008f6a:	e021      	b.n	8008fb0 <UART_SetConfig+0xc48>
 8008f6c:	f04f 030c 	mov.w	r3, #12
 8008f70:	f04f 0400 	mov.w	r4, #0
 8008f74:	e01c      	b.n	8008fb0 <UART_SetConfig+0xc48>
 8008f76:	f04f 030a 	mov.w	r3, #10
 8008f7a:	f04f 0400 	mov.w	r4, #0
 8008f7e:	e017      	b.n	8008fb0 <UART_SetConfig+0xc48>
 8008f80:	f04f 0308 	mov.w	r3, #8
 8008f84:	f04f 0400 	mov.w	r4, #0
 8008f88:	e012      	b.n	8008fb0 <UART_SetConfig+0xc48>
 8008f8a:	f04f 0306 	mov.w	r3, #6
 8008f8e:	f04f 0400 	mov.w	r4, #0
 8008f92:	e00d      	b.n	8008fb0 <UART_SetConfig+0xc48>
 8008f94:	f04f 0304 	mov.w	r3, #4
 8008f98:	f04f 0400 	mov.w	r4, #0
 8008f9c:	e008      	b.n	8008fb0 <UART_SetConfig+0xc48>
 8008f9e:	f04f 0302 	mov.w	r3, #2
 8008fa2:	f04f 0400 	mov.w	r4, #0
 8008fa6:	e003      	b.n	8008fb0 <UART_SetConfig+0xc48>
 8008fa8:	f04f 0301 	mov.w	r3, #1
 8008fac:	f04f 0400 	mov.w	r4, #0
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	4623      	mov	r3, r4
 8008fb4:	f7f7 fa4c 	bl	8000450 <__aeabi_uldivmod>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	460c      	mov	r4, r1
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4622      	mov	r2, r4
 8008fc0:	f04f 0300 	mov.w	r3, #0
 8008fc4:	f04f 0400 	mov.w	r4, #0
 8008fc8:	0214      	lsls	r4, r2, #8
 8008fca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008fce:	020b      	lsls	r3, r1, #8
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	6852      	ldr	r2, [r2, #4]
 8008fd4:	0852      	lsrs	r2, r2, #1
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	f04f 0200 	mov.w	r2, #0
 8008fdc:	eb13 0b01 	adds.w	fp, r3, r1
 8008fe0:	eb44 0c02 	adc.w	ip, r4, r2
 8008fe4:	4658      	mov	r0, fp
 8008fe6:	4661      	mov	r1, ip
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f04f 0400 	mov.w	r4, #0
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	4623      	mov	r3, r4
 8008ff4:	f7f7 fa2c 	bl	8000450 <__aeabi_uldivmod>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008ffe:	e389      	b.n	8009714 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009000:	f107 0318 	add.w	r3, r7, #24
 8009004:	4618      	mov	r0, r3
 8009006:	f7fe f855 	bl	80070b4 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	4618      	mov	r0, r3
 800900e:	f04f 0100 	mov.w	r1, #0
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009016:	2b00      	cmp	r3, #0
 8009018:	d067      	beq.n	80090ea <UART_SetConfig+0xd82>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901e:	2b01      	cmp	r3, #1
 8009020:	d05e      	beq.n	80090e0 <UART_SetConfig+0xd78>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009026:	2b02      	cmp	r3, #2
 8009028:	d055      	beq.n	80090d6 <UART_SetConfig+0xd6e>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902e:	2b03      	cmp	r3, #3
 8009030:	d04c      	beq.n	80090cc <UART_SetConfig+0xd64>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009036:	2b04      	cmp	r3, #4
 8009038:	d043      	beq.n	80090c2 <UART_SetConfig+0xd5a>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903e:	2b05      	cmp	r3, #5
 8009040:	d03a      	beq.n	80090b8 <UART_SetConfig+0xd50>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009046:	2b06      	cmp	r3, #6
 8009048:	d031      	beq.n	80090ae <UART_SetConfig+0xd46>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904e:	2b07      	cmp	r3, #7
 8009050:	d028      	beq.n	80090a4 <UART_SetConfig+0xd3c>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	2b08      	cmp	r3, #8
 8009058:	d01f      	beq.n	800909a <UART_SetConfig+0xd32>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905e:	2b09      	cmp	r3, #9
 8009060:	d016      	beq.n	8009090 <UART_SetConfig+0xd28>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009066:	2b0a      	cmp	r3, #10
 8009068:	d00d      	beq.n	8009086 <UART_SetConfig+0xd1e>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906e:	2b0b      	cmp	r3, #11
 8009070:	d104      	bne.n	800907c <UART_SetConfig+0xd14>
 8009072:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009076:	f04f 0400 	mov.w	r4, #0
 800907a:	e03a      	b.n	80090f2 <UART_SetConfig+0xd8a>
 800907c:	f04f 0301 	mov.w	r3, #1
 8009080:	f04f 0400 	mov.w	r4, #0
 8009084:	e035      	b.n	80090f2 <UART_SetConfig+0xd8a>
 8009086:	f04f 0380 	mov.w	r3, #128	; 0x80
 800908a:	f04f 0400 	mov.w	r4, #0
 800908e:	e030      	b.n	80090f2 <UART_SetConfig+0xd8a>
 8009090:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009094:	f04f 0400 	mov.w	r4, #0
 8009098:	e02b      	b.n	80090f2 <UART_SetConfig+0xd8a>
 800909a:	f04f 0320 	mov.w	r3, #32
 800909e:	f04f 0400 	mov.w	r4, #0
 80090a2:	e026      	b.n	80090f2 <UART_SetConfig+0xd8a>
 80090a4:	f04f 0310 	mov.w	r3, #16
 80090a8:	f04f 0400 	mov.w	r4, #0
 80090ac:	e021      	b.n	80090f2 <UART_SetConfig+0xd8a>
 80090ae:	f04f 030c 	mov.w	r3, #12
 80090b2:	f04f 0400 	mov.w	r4, #0
 80090b6:	e01c      	b.n	80090f2 <UART_SetConfig+0xd8a>
 80090b8:	f04f 030a 	mov.w	r3, #10
 80090bc:	f04f 0400 	mov.w	r4, #0
 80090c0:	e017      	b.n	80090f2 <UART_SetConfig+0xd8a>
 80090c2:	f04f 0308 	mov.w	r3, #8
 80090c6:	f04f 0400 	mov.w	r4, #0
 80090ca:	e012      	b.n	80090f2 <UART_SetConfig+0xd8a>
 80090cc:	f04f 0306 	mov.w	r3, #6
 80090d0:	f04f 0400 	mov.w	r4, #0
 80090d4:	e00d      	b.n	80090f2 <UART_SetConfig+0xd8a>
 80090d6:	f04f 0304 	mov.w	r3, #4
 80090da:	f04f 0400 	mov.w	r4, #0
 80090de:	e008      	b.n	80090f2 <UART_SetConfig+0xd8a>
 80090e0:	f04f 0302 	mov.w	r3, #2
 80090e4:	f04f 0400 	mov.w	r4, #0
 80090e8:	e003      	b.n	80090f2 <UART_SetConfig+0xd8a>
 80090ea:	f04f 0301 	mov.w	r3, #1
 80090ee:	f04f 0400 	mov.w	r4, #0
 80090f2:	461a      	mov	r2, r3
 80090f4:	4623      	mov	r3, r4
 80090f6:	f7f7 f9ab 	bl	8000450 <__aeabi_uldivmod>
 80090fa:	4603      	mov	r3, r0
 80090fc:	460c      	mov	r4, r1
 80090fe:	4619      	mov	r1, r3
 8009100:	4622      	mov	r2, r4
 8009102:	f04f 0300 	mov.w	r3, #0
 8009106:	f04f 0400 	mov.w	r4, #0
 800910a:	0214      	lsls	r4, r2, #8
 800910c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009110:	020b      	lsls	r3, r1, #8
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	6852      	ldr	r2, [r2, #4]
 8009116:	0852      	lsrs	r2, r2, #1
 8009118:	4611      	mov	r1, r2
 800911a:	f04f 0200 	mov.w	r2, #0
 800911e:	eb13 0b01 	adds.w	fp, r3, r1
 8009122:	eb44 0c02 	adc.w	ip, r4, r2
 8009126:	4658      	mov	r0, fp
 8009128:	4661      	mov	r1, ip
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	f04f 0400 	mov.w	r4, #0
 8009132:	461a      	mov	r2, r3
 8009134:	4623      	mov	r3, r4
 8009136:	f7f7 f98b 	bl	8000450 <__aeabi_uldivmod>
 800913a:	4603      	mov	r3, r0
 800913c:	460c      	mov	r4, r1
 800913e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009140:	e2e8      	b.n	8009714 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009142:	f107 030c 	add.w	r3, r7, #12
 8009146:	4618      	mov	r0, r3
 8009148:	f7fe f900 	bl	800734c <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	4618      	mov	r0, r3
 8009150:	f04f 0100 	mov.w	r1, #0
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009158:	2b00      	cmp	r3, #0
 800915a:	d067      	beq.n	800922c <UART_SetConfig+0xec4>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009160:	2b01      	cmp	r3, #1
 8009162:	d05e      	beq.n	8009222 <UART_SetConfig+0xeba>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009168:	2b02      	cmp	r3, #2
 800916a:	d055      	beq.n	8009218 <UART_SetConfig+0xeb0>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009170:	2b03      	cmp	r3, #3
 8009172:	d04c      	beq.n	800920e <UART_SetConfig+0xea6>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009178:	2b04      	cmp	r3, #4
 800917a:	d043      	beq.n	8009204 <UART_SetConfig+0xe9c>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009180:	2b05      	cmp	r3, #5
 8009182:	d03a      	beq.n	80091fa <UART_SetConfig+0xe92>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009188:	2b06      	cmp	r3, #6
 800918a:	d031      	beq.n	80091f0 <UART_SetConfig+0xe88>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009190:	2b07      	cmp	r3, #7
 8009192:	d028      	beq.n	80091e6 <UART_SetConfig+0xe7e>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009198:	2b08      	cmp	r3, #8
 800919a:	d01f      	beq.n	80091dc <UART_SetConfig+0xe74>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a0:	2b09      	cmp	r3, #9
 80091a2:	d016      	beq.n	80091d2 <UART_SetConfig+0xe6a>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a8:	2b0a      	cmp	r3, #10
 80091aa:	d00d      	beq.n	80091c8 <UART_SetConfig+0xe60>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b0:	2b0b      	cmp	r3, #11
 80091b2:	d104      	bne.n	80091be <UART_SetConfig+0xe56>
 80091b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091b8:	f04f 0400 	mov.w	r4, #0
 80091bc:	e03a      	b.n	8009234 <UART_SetConfig+0xecc>
 80091be:	f04f 0301 	mov.w	r3, #1
 80091c2:	f04f 0400 	mov.w	r4, #0
 80091c6:	e035      	b.n	8009234 <UART_SetConfig+0xecc>
 80091c8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80091cc:	f04f 0400 	mov.w	r4, #0
 80091d0:	e030      	b.n	8009234 <UART_SetConfig+0xecc>
 80091d2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80091d6:	f04f 0400 	mov.w	r4, #0
 80091da:	e02b      	b.n	8009234 <UART_SetConfig+0xecc>
 80091dc:	f04f 0320 	mov.w	r3, #32
 80091e0:	f04f 0400 	mov.w	r4, #0
 80091e4:	e026      	b.n	8009234 <UART_SetConfig+0xecc>
 80091e6:	f04f 0310 	mov.w	r3, #16
 80091ea:	f04f 0400 	mov.w	r4, #0
 80091ee:	e021      	b.n	8009234 <UART_SetConfig+0xecc>
 80091f0:	f04f 030c 	mov.w	r3, #12
 80091f4:	f04f 0400 	mov.w	r4, #0
 80091f8:	e01c      	b.n	8009234 <UART_SetConfig+0xecc>
 80091fa:	f04f 030a 	mov.w	r3, #10
 80091fe:	f04f 0400 	mov.w	r4, #0
 8009202:	e017      	b.n	8009234 <UART_SetConfig+0xecc>
 8009204:	f04f 0308 	mov.w	r3, #8
 8009208:	f04f 0400 	mov.w	r4, #0
 800920c:	e012      	b.n	8009234 <UART_SetConfig+0xecc>
 800920e:	f04f 0306 	mov.w	r3, #6
 8009212:	f04f 0400 	mov.w	r4, #0
 8009216:	e00d      	b.n	8009234 <UART_SetConfig+0xecc>
 8009218:	f04f 0304 	mov.w	r3, #4
 800921c:	f04f 0400 	mov.w	r4, #0
 8009220:	e008      	b.n	8009234 <UART_SetConfig+0xecc>
 8009222:	f04f 0302 	mov.w	r3, #2
 8009226:	f04f 0400 	mov.w	r4, #0
 800922a:	e003      	b.n	8009234 <UART_SetConfig+0xecc>
 800922c:	f04f 0301 	mov.w	r3, #1
 8009230:	f04f 0400 	mov.w	r4, #0
 8009234:	461a      	mov	r2, r3
 8009236:	4623      	mov	r3, r4
 8009238:	f7f7 f90a 	bl	8000450 <__aeabi_uldivmod>
 800923c:	4603      	mov	r3, r0
 800923e:	460c      	mov	r4, r1
 8009240:	4619      	mov	r1, r3
 8009242:	4622      	mov	r2, r4
 8009244:	f04f 0300 	mov.w	r3, #0
 8009248:	f04f 0400 	mov.w	r4, #0
 800924c:	0214      	lsls	r4, r2, #8
 800924e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009252:	020b      	lsls	r3, r1, #8
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	6852      	ldr	r2, [r2, #4]
 8009258:	0852      	lsrs	r2, r2, #1
 800925a:	4611      	mov	r1, r2
 800925c:	f04f 0200 	mov.w	r2, #0
 8009260:	eb13 0b01 	adds.w	fp, r3, r1
 8009264:	eb44 0c02 	adc.w	ip, r4, r2
 8009268:	4658      	mov	r0, fp
 800926a:	4661      	mov	r1, ip
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	f04f 0400 	mov.w	r4, #0
 8009274:	461a      	mov	r2, r3
 8009276:	4623      	mov	r3, r4
 8009278:	f7f7 f8ea 	bl	8000450 <__aeabi_uldivmod>
 800927c:	4603      	mov	r3, r0
 800927e:	460c      	mov	r4, r1
 8009280:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009282:	e247      	b.n	8009714 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009284:	4b96      	ldr	r3, [pc, #600]	; (80094e0 <UART_SetConfig+0x1178>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 0320 	and.w	r3, r3, #32
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 80a3 	beq.w	80093d8 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009292:	4b93      	ldr	r3, [pc, #588]	; (80094e0 <UART_SetConfig+0x1178>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	08db      	lsrs	r3, r3, #3
 8009298:	f003 0303 	and.w	r3, r3, #3
 800929c:	4a91      	ldr	r2, [pc, #580]	; (80094e4 <UART_SetConfig+0x117c>)
 800929e:	fa22 f303 	lsr.w	r3, r2, r3
 80092a2:	4618      	mov	r0, r3
 80092a4:	f04f 0100 	mov.w	r1, #0
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d067      	beq.n	8009380 <UART_SetConfig+0x1018>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d05e      	beq.n	8009376 <UART_SetConfig+0x100e>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d055      	beq.n	800936c <UART_SetConfig+0x1004>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d04c      	beq.n	8009362 <UART_SetConfig+0xffa>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092cc:	2b04      	cmp	r3, #4
 80092ce:	d043      	beq.n	8009358 <UART_SetConfig+0xff0>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d4:	2b05      	cmp	r3, #5
 80092d6:	d03a      	beq.n	800934e <UART_SetConfig+0xfe6>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092dc:	2b06      	cmp	r3, #6
 80092de:	d031      	beq.n	8009344 <UART_SetConfig+0xfdc>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e4:	2b07      	cmp	r3, #7
 80092e6:	d028      	beq.n	800933a <UART_SetConfig+0xfd2>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ec:	2b08      	cmp	r3, #8
 80092ee:	d01f      	beq.n	8009330 <UART_SetConfig+0xfc8>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f4:	2b09      	cmp	r3, #9
 80092f6:	d016      	beq.n	8009326 <UART_SetConfig+0xfbe>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fc:	2b0a      	cmp	r3, #10
 80092fe:	d00d      	beq.n	800931c <UART_SetConfig+0xfb4>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009304:	2b0b      	cmp	r3, #11
 8009306:	d104      	bne.n	8009312 <UART_SetConfig+0xfaa>
 8009308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800930c:	f04f 0400 	mov.w	r4, #0
 8009310:	e03a      	b.n	8009388 <UART_SetConfig+0x1020>
 8009312:	f04f 0301 	mov.w	r3, #1
 8009316:	f04f 0400 	mov.w	r4, #0
 800931a:	e035      	b.n	8009388 <UART_SetConfig+0x1020>
 800931c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009320:	f04f 0400 	mov.w	r4, #0
 8009324:	e030      	b.n	8009388 <UART_SetConfig+0x1020>
 8009326:	f04f 0340 	mov.w	r3, #64	; 0x40
 800932a:	f04f 0400 	mov.w	r4, #0
 800932e:	e02b      	b.n	8009388 <UART_SetConfig+0x1020>
 8009330:	f04f 0320 	mov.w	r3, #32
 8009334:	f04f 0400 	mov.w	r4, #0
 8009338:	e026      	b.n	8009388 <UART_SetConfig+0x1020>
 800933a:	f04f 0310 	mov.w	r3, #16
 800933e:	f04f 0400 	mov.w	r4, #0
 8009342:	e021      	b.n	8009388 <UART_SetConfig+0x1020>
 8009344:	f04f 030c 	mov.w	r3, #12
 8009348:	f04f 0400 	mov.w	r4, #0
 800934c:	e01c      	b.n	8009388 <UART_SetConfig+0x1020>
 800934e:	f04f 030a 	mov.w	r3, #10
 8009352:	f04f 0400 	mov.w	r4, #0
 8009356:	e017      	b.n	8009388 <UART_SetConfig+0x1020>
 8009358:	f04f 0308 	mov.w	r3, #8
 800935c:	f04f 0400 	mov.w	r4, #0
 8009360:	e012      	b.n	8009388 <UART_SetConfig+0x1020>
 8009362:	f04f 0306 	mov.w	r3, #6
 8009366:	f04f 0400 	mov.w	r4, #0
 800936a:	e00d      	b.n	8009388 <UART_SetConfig+0x1020>
 800936c:	f04f 0304 	mov.w	r3, #4
 8009370:	f04f 0400 	mov.w	r4, #0
 8009374:	e008      	b.n	8009388 <UART_SetConfig+0x1020>
 8009376:	f04f 0302 	mov.w	r3, #2
 800937a:	f04f 0400 	mov.w	r4, #0
 800937e:	e003      	b.n	8009388 <UART_SetConfig+0x1020>
 8009380:	f04f 0301 	mov.w	r3, #1
 8009384:	f04f 0400 	mov.w	r4, #0
 8009388:	461a      	mov	r2, r3
 800938a:	4623      	mov	r3, r4
 800938c:	f7f7 f860 	bl	8000450 <__aeabi_uldivmod>
 8009390:	4603      	mov	r3, r0
 8009392:	460c      	mov	r4, r1
 8009394:	4619      	mov	r1, r3
 8009396:	4622      	mov	r2, r4
 8009398:	f04f 0300 	mov.w	r3, #0
 800939c:	f04f 0400 	mov.w	r4, #0
 80093a0:	0214      	lsls	r4, r2, #8
 80093a2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80093a6:	020b      	lsls	r3, r1, #8
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	6852      	ldr	r2, [r2, #4]
 80093ac:	0852      	lsrs	r2, r2, #1
 80093ae:	4611      	mov	r1, r2
 80093b0:	f04f 0200 	mov.w	r2, #0
 80093b4:	eb13 0b01 	adds.w	fp, r3, r1
 80093b8:	eb44 0c02 	adc.w	ip, r4, r2
 80093bc:	4658      	mov	r0, fp
 80093be:	4661      	mov	r1, ip
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f04f 0400 	mov.w	r4, #0
 80093c8:	461a      	mov	r2, r3
 80093ca:	4623      	mov	r3, r4
 80093cc:	f7f7 f840 	bl	8000450 <__aeabi_uldivmod>
 80093d0:	4603      	mov	r3, r0
 80093d2:	460c      	mov	r4, r1
 80093d4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80093d6:	e19d      	b.n	8009714 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d05b      	beq.n	8009498 <UART_SetConfig+0x1130>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d053      	beq.n	8009490 <UART_SetConfig+0x1128>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d04b      	beq.n	8009488 <UART_SetConfig+0x1120>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d043      	beq.n	8009480 <UART_SetConfig+0x1118>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fc:	2b04      	cmp	r3, #4
 80093fe:	d03b      	beq.n	8009478 <UART_SetConfig+0x1110>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009404:	2b05      	cmp	r3, #5
 8009406:	d033      	beq.n	8009470 <UART_SetConfig+0x1108>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940c:	2b06      	cmp	r3, #6
 800940e:	d02b      	beq.n	8009468 <UART_SetConfig+0x1100>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009414:	2b07      	cmp	r3, #7
 8009416:	d023      	beq.n	8009460 <UART_SetConfig+0x10f8>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941c:	2b08      	cmp	r3, #8
 800941e:	d01b      	beq.n	8009458 <UART_SetConfig+0x10f0>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009424:	2b09      	cmp	r3, #9
 8009426:	d013      	beq.n	8009450 <UART_SetConfig+0x10e8>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942c:	2b0a      	cmp	r3, #10
 800942e:	d00b      	beq.n	8009448 <UART_SetConfig+0x10e0>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009434:	2b0b      	cmp	r3, #11
 8009436:	d103      	bne.n	8009440 <UART_SetConfig+0x10d8>
 8009438:	4b2a      	ldr	r3, [pc, #168]	; (80094e4 <UART_SetConfig+0x117c>)
 800943a:	f04f 0400 	mov.w	r4, #0
 800943e:	e02e      	b.n	800949e <UART_SetConfig+0x1136>
 8009440:	4b29      	ldr	r3, [pc, #164]	; (80094e8 <UART_SetConfig+0x1180>)
 8009442:	f04f 0403 	mov.w	r4, #3
 8009446:	e02a      	b.n	800949e <UART_SetConfig+0x1136>
 8009448:	4b28      	ldr	r3, [pc, #160]	; (80094ec <UART_SetConfig+0x1184>)
 800944a:	f04f 0400 	mov.w	r4, #0
 800944e:	e026      	b.n	800949e <UART_SetConfig+0x1136>
 8009450:	4b27      	ldr	r3, [pc, #156]	; (80094f0 <UART_SetConfig+0x1188>)
 8009452:	f04f 0400 	mov.w	r4, #0
 8009456:	e022      	b.n	800949e <UART_SetConfig+0x1136>
 8009458:	4b26      	ldr	r3, [pc, #152]	; (80094f4 <UART_SetConfig+0x118c>)
 800945a:	f04f 0400 	mov.w	r4, #0
 800945e:	e01e      	b.n	800949e <UART_SetConfig+0x1136>
 8009460:	4b25      	ldr	r3, [pc, #148]	; (80094f8 <UART_SetConfig+0x1190>)
 8009462:	f04f 0400 	mov.w	r4, #0
 8009466:	e01a      	b.n	800949e <UART_SetConfig+0x1136>
 8009468:	a419      	add	r4, pc, #100	; (adr r4, 80094d0 <UART_SetConfig+0x1168>)
 800946a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800946e:	e016      	b.n	800949e <UART_SetConfig+0x1136>
 8009470:	4b22      	ldr	r3, [pc, #136]	; (80094fc <UART_SetConfig+0x1194>)
 8009472:	f04f 0400 	mov.w	r4, #0
 8009476:	e012      	b.n	800949e <UART_SetConfig+0x1136>
 8009478:	4b21      	ldr	r3, [pc, #132]	; (8009500 <UART_SetConfig+0x1198>)
 800947a:	f04f 0400 	mov.w	r4, #0
 800947e:	e00e      	b.n	800949e <UART_SetConfig+0x1136>
 8009480:	a415      	add	r4, pc, #84	; (adr r4, 80094d8 <UART_SetConfig+0x1170>)
 8009482:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009486:	e00a      	b.n	800949e <UART_SetConfig+0x1136>
 8009488:	4b1e      	ldr	r3, [pc, #120]	; (8009504 <UART_SetConfig+0x119c>)
 800948a:	f04f 0400 	mov.w	r4, #0
 800948e:	e006      	b.n	800949e <UART_SetConfig+0x1136>
 8009490:	4b1d      	ldr	r3, [pc, #116]	; (8009508 <UART_SetConfig+0x11a0>)
 8009492:	f04f 0401 	mov.w	r4, #1
 8009496:	e002      	b.n	800949e <UART_SetConfig+0x1136>
 8009498:	4b13      	ldr	r3, [pc, #76]	; (80094e8 <UART_SetConfig+0x1180>)
 800949a:	f04f 0403 	mov.w	r4, #3
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	6852      	ldr	r2, [r2, #4]
 80094a2:	0852      	lsrs	r2, r2, #1
 80094a4:	4611      	mov	r1, r2
 80094a6:	f04f 0200 	mov.w	r2, #0
 80094aa:	eb13 0b01 	adds.w	fp, r3, r1
 80094ae:	eb44 0c02 	adc.w	ip, r4, r2
 80094b2:	4658      	mov	r0, fp
 80094b4:	4661      	mov	r1, ip
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	f04f 0400 	mov.w	r4, #0
 80094be:	461a      	mov	r2, r3
 80094c0:	4623      	mov	r3, r4
 80094c2:	f7f6 ffc5 	bl	8000450 <__aeabi_uldivmod>
 80094c6:	4603      	mov	r3, r0
 80094c8:	460c      	mov	r4, r1
 80094ca:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80094cc:	e122      	b.n	8009714 <UART_SetConfig+0x13ac>
 80094ce:	bf00      	nop
 80094d0:	51615500 	.word	0x51615500
 80094d4:	00000000 	.word	0x00000000
 80094d8:	a2c2aa00 	.word	0xa2c2aa00
 80094dc:	00000000 	.word	0x00000000
 80094e0:	58024400 	.word	0x58024400
 80094e4:	03d09000 	.word	0x03d09000
 80094e8:	d0900000 	.word	0xd0900000
 80094ec:	07a12000 	.word	0x07a12000
 80094f0:	0f424000 	.word	0x0f424000
 80094f4:	1e848000 	.word	0x1e848000
 80094f8:	3d090000 	.word	0x3d090000
 80094fc:	61a80000 	.word	0x61a80000
 8009500:	7a120000 	.word	0x7a120000
 8009504:	f4240000 	.word	0xf4240000
 8009508:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009510:	2b00      	cmp	r3, #0
 8009512:	d05b      	beq.n	80095cc <UART_SetConfig+0x1264>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009518:	2b01      	cmp	r3, #1
 800951a:	d053      	beq.n	80095c4 <UART_SetConfig+0x125c>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009520:	2b02      	cmp	r3, #2
 8009522:	d04b      	beq.n	80095bc <UART_SetConfig+0x1254>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009528:	2b03      	cmp	r3, #3
 800952a:	d043      	beq.n	80095b4 <UART_SetConfig+0x124c>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009530:	2b04      	cmp	r3, #4
 8009532:	d03b      	beq.n	80095ac <UART_SetConfig+0x1244>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009538:	2b05      	cmp	r3, #5
 800953a:	d033      	beq.n	80095a4 <UART_SetConfig+0x123c>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009540:	2b06      	cmp	r3, #6
 8009542:	d02b      	beq.n	800959c <UART_SetConfig+0x1234>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009548:	2b07      	cmp	r3, #7
 800954a:	d023      	beq.n	8009594 <UART_SetConfig+0x122c>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009550:	2b08      	cmp	r3, #8
 8009552:	d01b      	beq.n	800958c <UART_SetConfig+0x1224>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009558:	2b09      	cmp	r3, #9
 800955a:	d013      	beq.n	8009584 <UART_SetConfig+0x121c>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009560:	2b0a      	cmp	r3, #10
 8009562:	d00b      	beq.n	800957c <UART_SetConfig+0x1214>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009568:	2b0b      	cmp	r3, #11
 800956a:	d103      	bne.n	8009574 <UART_SetConfig+0x120c>
 800956c:	4bc0      	ldr	r3, [pc, #768]	; (8009870 <UART_SetConfig+0x1508>)
 800956e:	f04f 0400 	mov.w	r4, #0
 8009572:	e02e      	b.n	80095d2 <UART_SetConfig+0x126a>
 8009574:	4bbf      	ldr	r3, [pc, #764]	; (8009874 <UART_SetConfig+0x150c>)
 8009576:	f04f 0400 	mov.w	r4, #0
 800957a:	e02a      	b.n	80095d2 <UART_SetConfig+0x126a>
 800957c:	4bbe      	ldr	r3, [pc, #760]	; (8009878 <UART_SetConfig+0x1510>)
 800957e:	f04f 0400 	mov.w	r4, #0
 8009582:	e026      	b.n	80095d2 <UART_SetConfig+0x126a>
 8009584:	4bbd      	ldr	r3, [pc, #756]	; (800987c <UART_SetConfig+0x1514>)
 8009586:	f04f 0400 	mov.w	r4, #0
 800958a:	e022      	b.n	80095d2 <UART_SetConfig+0x126a>
 800958c:	4bbc      	ldr	r3, [pc, #752]	; (8009880 <UART_SetConfig+0x1518>)
 800958e:	f04f 0400 	mov.w	r4, #0
 8009592:	e01e      	b.n	80095d2 <UART_SetConfig+0x126a>
 8009594:	4bbb      	ldr	r3, [pc, #748]	; (8009884 <UART_SetConfig+0x151c>)
 8009596:	f04f 0400 	mov.w	r4, #0
 800959a:	e01a      	b.n	80095d2 <UART_SetConfig+0x126a>
 800959c:	a4b0      	add	r4, pc, #704	; (adr r4, 8009860 <UART_SetConfig+0x14f8>)
 800959e:	e9d4 3400 	ldrd	r3, r4, [r4]
 80095a2:	e016      	b.n	80095d2 <UART_SetConfig+0x126a>
 80095a4:	4bb8      	ldr	r3, [pc, #736]	; (8009888 <UART_SetConfig+0x1520>)
 80095a6:	f04f 0400 	mov.w	r4, #0
 80095aa:	e012      	b.n	80095d2 <UART_SetConfig+0x126a>
 80095ac:	4bb7      	ldr	r3, [pc, #732]	; (800988c <UART_SetConfig+0x1524>)
 80095ae:	f04f 0400 	mov.w	r4, #0
 80095b2:	e00e      	b.n	80095d2 <UART_SetConfig+0x126a>
 80095b4:	a4ac      	add	r4, pc, #688	; (adr r4, 8009868 <UART_SetConfig+0x1500>)
 80095b6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80095ba:	e00a      	b.n	80095d2 <UART_SetConfig+0x126a>
 80095bc:	4bb4      	ldr	r3, [pc, #720]	; (8009890 <UART_SetConfig+0x1528>)
 80095be:	f04f 0400 	mov.w	r4, #0
 80095c2:	e006      	b.n	80095d2 <UART_SetConfig+0x126a>
 80095c4:	4bb3      	ldr	r3, [pc, #716]	; (8009894 <UART_SetConfig+0x152c>)
 80095c6:	f04f 0400 	mov.w	r4, #0
 80095ca:	e002      	b.n	80095d2 <UART_SetConfig+0x126a>
 80095cc:	4ba9      	ldr	r3, [pc, #676]	; (8009874 <UART_SetConfig+0x150c>)
 80095ce:	f04f 0400 	mov.w	r4, #0
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	6852      	ldr	r2, [r2, #4]
 80095d6:	0852      	lsrs	r2, r2, #1
 80095d8:	4611      	mov	r1, r2
 80095da:	f04f 0200 	mov.w	r2, #0
 80095de:	eb13 0b01 	adds.w	fp, r3, r1
 80095e2:	eb44 0c02 	adc.w	ip, r4, r2
 80095e6:	4658      	mov	r0, fp
 80095e8:	4661      	mov	r1, ip
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	f04f 0400 	mov.w	r4, #0
 80095f2:	461a      	mov	r2, r3
 80095f4:	4623      	mov	r3, r4
 80095f6:	f7f6 ff2b 	bl	8000450 <__aeabi_uldivmod>
 80095fa:	4603      	mov	r3, r0
 80095fc:	460c      	mov	r4, r1
 80095fe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009600:	e088      	b.n	8009714 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009606:	2b00      	cmp	r3, #0
 8009608:	d064      	beq.n	80096d4 <UART_SetConfig+0x136c>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960e:	2b01      	cmp	r3, #1
 8009610:	d05b      	beq.n	80096ca <UART_SetConfig+0x1362>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009616:	2b02      	cmp	r3, #2
 8009618:	d052      	beq.n	80096c0 <UART_SetConfig+0x1358>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961e:	2b03      	cmp	r3, #3
 8009620:	d04a      	beq.n	80096b8 <UART_SetConfig+0x1350>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	2b04      	cmp	r3, #4
 8009628:	d041      	beq.n	80096ae <UART_SetConfig+0x1346>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962e:	2b05      	cmp	r3, #5
 8009630:	d039      	beq.n	80096a6 <UART_SetConfig+0x133e>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009636:	2b06      	cmp	r3, #6
 8009638:	d031      	beq.n	800969e <UART_SetConfig+0x1336>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963e:	2b07      	cmp	r3, #7
 8009640:	d028      	beq.n	8009694 <UART_SetConfig+0x132c>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009646:	2b08      	cmp	r3, #8
 8009648:	d01f      	beq.n	800968a <UART_SetConfig+0x1322>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964e:	2b09      	cmp	r3, #9
 8009650:	d016      	beq.n	8009680 <UART_SetConfig+0x1318>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009656:	2b0a      	cmp	r3, #10
 8009658:	d00d      	beq.n	8009676 <UART_SetConfig+0x130e>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965e:	2b0b      	cmp	r3, #11
 8009660:	d104      	bne.n	800966c <UART_SetConfig+0x1304>
 8009662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009666:	f04f 0400 	mov.w	r4, #0
 800966a:	e037      	b.n	80096dc <UART_SetConfig+0x1374>
 800966c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009670:	f04f 0400 	mov.w	r4, #0
 8009674:	e032      	b.n	80096dc <UART_SetConfig+0x1374>
 8009676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800967a:	f04f 0400 	mov.w	r4, #0
 800967e:	e02d      	b.n	80096dc <UART_SetConfig+0x1374>
 8009680:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009684:	f04f 0400 	mov.w	r4, #0
 8009688:	e028      	b.n	80096dc <UART_SetConfig+0x1374>
 800968a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800968e:	f04f 0400 	mov.w	r4, #0
 8009692:	e023      	b.n	80096dc <UART_SetConfig+0x1374>
 8009694:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009698:	f04f 0400 	mov.w	r4, #0
 800969c:	e01e      	b.n	80096dc <UART_SetConfig+0x1374>
 800969e:	4b7e      	ldr	r3, [pc, #504]	; (8009898 <UART_SetConfig+0x1530>)
 80096a0:	f04f 0400 	mov.w	r4, #0
 80096a4:	e01a      	b.n	80096dc <UART_SetConfig+0x1374>
 80096a6:	4b7d      	ldr	r3, [pc, #500]	; (800989c <UART_SetConfig+0x1534>)
 80096a8:	f04f 0400 	mov.w	r4, #0
 80096ac:	e016      	b.n	80096dc <UART_SetConfig+0x1374>
 80096ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80096b2:	f04f 0400 	mov.w	r4, #0
 80096b6:	e011      	b.n	80096dc <UART_SetConfig+0x1374>
 80096b8:	4b79      	ldr	r3, [pc, #484]	; (80098a0 <UART_SetConfig+0x1538>)
 80096ba:	f04f 0400 	mov.w	r4, #0
 80096be:	e00d      	b.n	80096dc <UART_SetConfig+0x1374>
 80096c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80096c4:	f04f 0400 	mov.w	r4, #0
 80096c8:	e008      	b.n	80096dc <UART_SetConfig+0x1374>
 80096ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80096ce:	f04f 0400 	mov.w	r4, #0
 80096d2:	e003      	b.n	80096dc <UART_SetConfig+0x1374>
 80096d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80096d8:	f04f 0400 	mov.w	r4, #0
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	6852      	ldr	r2, [r2, #4]
 80096e0:	0852      	lsrs	r2, r2, #1
 80096e2:	4611      	mov	r1, r2
 80096e4:	f04f 0200 	mov.w	r2, #0
 80096e8:	eb13 0b01 	adds.w	fp, r3, r1
 80096ec:	eb44 0c02 	adc.w	ip, r4, r2
 80096f0:	4658      	mov	r0, fp
 80096f2:	4661      	mov	r1, ip
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	f04f 0400 	mov.w	r4, #0
 80096fc:	461a      	mov	r2, r3
 80096fe:	4623      	mov	r3, r4
 8009700:	f7f6 fea6 	bl	8000450 <__aeabi_uldivmod>
 8009704:	4603      	mov	r3, r0
 8009706:	460c      	mov	r4, r1
 8009708:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800970a:	e003      	b.n	8009714 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8009712:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009716:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800971a:	d309      	bcc.n	8009730 <UART_SetConfig+0x13c8>
 800971c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800971e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009722:	d205      	bcs.n	8009730 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800972a:	60da      	str	r2, [r3, #12]
 800972c:	f000 bf85 	b.w	800a63a <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009736:	f000 bf80 	b.w	800a63a <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	69db      	ldr	r3, [r3, #28]
 800973e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009742:	f040 83da 	bne.w	8009efa <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8009746:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800974a:	2b40      	cmp	r3, #64	; 0x40
 800974c:	f200 83b3 	bhi.w	8009eb6 <UART_SetConfig+0x1b4e>
 8009750:	a201      	add	r2, pc, #4	; (adr r2, 8009758 <UART_SetConfig+0x13f0>)
 8009752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009756:	bf00      	nop
 8009758:	080098a5 	.word	0x080098a5
 800975c:	0800995d 	.word	0x0800995d
 8009760:	08009eb7 	.word	0x08009eb7
 8009764:	08009eb7 	.word	0x08009eb7
 8009768:	08009a15 	.word	0x08009a15
 800976c:	08009eb7 	.word	0x08009eb7
 8009770:	08009eb7 	.word	0x08009eb7
 8009774:	08009eb7 	.word	0x08009eb7
 8009778:	08009ad1 	.word	0x08009ad1
 800977c:	08009eb7 	.word	0x08009eb7
 8009780:	08009eb7 	.word	0x08009eb7
 8009784:	08009eb7 	.word	0x08009eb7
 8009788:	08009eb7 	.word	0x08009eb7
 800978c:	08009eb7 	.word	0x08009eb7
 8009790:	08009eb7 	.word	0x08009eb7
 8009794:	08009eb7 	.word	0x08009eb7
 8009798:	08009b8d 	.word	0x08009b8d
 800979c:	08009eb7 	.word	0x08009eb7
 80097a0:	08009eb7 	.word	0x08009eb7
 80097a4:	08009eb7 	.word	0x08009eb7
 80097a8:	08009eb7 	.word	0x08009eb7
 80097ac:	08009eb7 	.word	0x08009eb7
 80097b0:	08009eb7 	.word	0x08009eb7
 80097b4:	08009eb7 	.word	0x08009eb7
 80097b8:	08009eb7 	.word	0x08009eb7
 80097bc:	08009eb7 	.word	0x08009eb7
 80097c0:	08009eb7 	.word	0x08009eb7
 80097c4:	08009eb7 	.word	0x08009eb7
 80097c8:	08009eb7 	.word	0x08009eb7
 80097cc:	08009eb7 	.word	0x08009eb7
 80097d0:	08009eb7 	.word	0x08009eb7
 80097d4:	08009eb7 	.word	0x08009eb7
 80097d8:	08009cff 	.word	0x08009cff
 80097dc:	08009eb7 	.word	0x08009eb7
 80097e0:	08009eb7 	.word	0x08009eb7
 80097e4:	08009eb7 	.word	0x08009eb7
 80097e8:	08009eb7 	.word	0x08009eb7
 80097ec:	08009eb7 	.word	0x08009eb7
 80097f0:	08009eb7 	.word	0x08009eb7
 80097f4:	08009eb7 	.word	0x08009eb7
 80097f8:	08009eb7 	.word	0x08009eb7
 80097fc:	08009eb7 	.word	0x08009eb7
 8009800:	08009eb7 	.word	0x08009eb7
 8009804:	08009eb7 	.word	0x08009eb7
 8009808:	08009eb7 	.word	0x08009eb7
 800980c:	08009eb7 	.word	0x08009eb7
 8009810:	08009eb7 	.word	0x08009eb7
 8009814:	08009eb7 	.word	0x08009eb7
 8009818:	08009eb7 	.word	0x08009eb7
 800981c:	08009eb7 	.word	0x08009eb7
 8009820:	08009eb7 	.word	0x08009eb7
 8009824:	08009eb7 	.word	0x08009eb7
 8009828:	08009eb7 	.word	0x08009eb7
 800982c:	08009eb7 	.word	0x08009eb7
 8009830:	08009eb7 	.word	0x08009eb7
 8009834:	08009eb7 	.word	0x08009eb7
 8009838:	08009eb7 	.word	0x08009eb7
 800983c:	08009eb7 	.word	0x08009eb7
 8009840:	08009eb7 	.word	0x08009eb7
 8009844:	08009eb7 	.word	0x08009eb7
 8009848:	08009eb7 	.word	0x08009eb7
 800984c:	08009eb7 	.word	0x08009eb7
 8009850:	08009eb7 	.word	0x08009eb7
 8009854:	08009eb7 	.word	0x08009eb7
 8009858:	08009df5 	.word	0x08009df5
 800985c:	f3af 8000 	nop.w
 8009860:	05161500 	.word	0x05161500
 8009864:	00000000 	.word	0x00000000
 8009868:	0a2c2a00 	.word	0x0a2c2a00
 800986c:	00000000 	.word	0x00000000
 8009870:	003d0900 	.word	0x003d0900
 8009874:	3d090000 	.word	0x3d090000
 8009878:	007a1200 	.word	0x007a1200
 800987c:	00f42400 	.word	0x00f42400
 8009880:	01e84800 	.word	0x01e84800
 8009884:	03d09000 	.word	0x03d09000
 8009888:	061a8000 	.word	0x061a8000
 800988c:	07a12000 	.word	0x07a12000
 8009890:	0f424000 	.word	0x0f424000
 8009894:	1e848000 	.word	0x1e848000
 8009898:	000aaa00 	.word	0x000aaa00
 800989c:	000ccc00 	.word	0x000ccc00
 80098a0:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098a4:	f7fc fce6 	bl	8006274 <HAL_RCC_GetPCLK1Freq>
 80098a8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d044      	beq.n	800993c <UART_SetConfig+0x15d4>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d03e      	beq.n	8009938 <UART_SetConfig+0x15d0>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d038      	beq.n	8009934 <UART_SetConfig+0x15cc>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c6:	2b03      	cmp	r3, #3
 80098c8:	d032      	beq.n	8009930 <UART_SetConfig+0x15c8>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ce:	2b04      	cmp	r3, #4
 80098d0:	d02c      	beq.n	800992c <UART_SetConfig+0x15c4>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d6:	2b05      	cmp	r3, #5
 80098d8:	d026      	beq.n	8009928 <UART_SetConfig+0x15c0>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098de:	2b06      	cmp	r3, #6
 80098e0:	d020      	beq.n	8009924 <UART_SetConfig+0x15bc>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e6:	2b07      	cmp	r3, #7
 80098e8:	d01a      	beq.n	8009920 <UART_SetConfig+0x15b8>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ee:	2b08      	cmp	r3, #8
 80098f0:	d014      	beq.n	800991c <UART_SetConfig+0x15b4>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f6:	2b09      	cmp	r3, #9
 80098f8:	d00e      	beq.n	8009918 <UART_SetConfig+0x15b0>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fe:	2b0a      	cmp	r3, #10
 8009900:	d008      	beq.n	8009914 <UART_SetConfig+0x15ac>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009906:	2b0b      	cmp	r3, #11
 8009908:	d102      	bne.n	8009910 <UART_SetConfig+0x15a8>
 800990a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800990e:	e016      	b.n	800993e <UART_SetConfig+0x15d6>
 8009910:	2301      	movs	r3, #1
 8009912:	e014      	b.n	800993e <UART_SetConfig+0x15d6>
 8009914:	2380      	movs	r3, #128	; 0x80
 8009916:	e012      	b.n	800993e <UART_SetConfig+0x15d6>
 8009918:	2340      	movs	r3, #64	; 0x40
 800991a:	e010      	b.n	800993e <UART_SetConfig+0x15d6>
 800991c:	2320      	movs	r3, #32
 800991e:	e00e      	b.n	800993e <UART_SetConfig+0x15d6>
 8009920:	2310      	movs	r3, #16
 8009922:	e00c      	b.n	800993e <UART_SetConfig+0x15d6>
 8009924:	230c      	movs	r3, #12
 8009926:	e00a      	b.n	800993e <UART_SetConfig+0x15d6>
 8009928:	230a      	movs	r3, #10
 800992a:	e008      	b.n	800993e <UART_SetConfig+0x15d6>
 800992c:	2308      	movs	r3, #8
 800992e:	e006      	b.n	800993e <UART_SetConfig+0x15d6>
 8009930:	2306      	movs	r3, #6
 8009932:	e004      	b.n	800993e <UART_SetConfig+0x15d6>
 8009934:	2304      	movs	r3, #4
 8009936:	e002      	b.n	800993e <UART_SetConfig+0x15d6>
 8009938:	2302      	movs	r3, #2
 800993a:	e000      	b.n	800993e <UART_SetConfig+0x15d6>
 800993c:	2301      	movs	r3, #1
 800993e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009940:	fbb2 f3f3 	udiv	r3, r2, r3
 8009944:	005a      	lsls	r2, r3, #1
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	085b      	lsrs	r3, r3, #1
 800994c:	441a      	add	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	fbb2 f3f3 	udiv	r3, r2, r3
 8009956:	b29b      	uxth	r3, r3
 8009958:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800995a:	e2b0      	b.n	8009ebe <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800995c:	f7fc fca0 	bl	80062a0 <HAL_RCC_GetPCLK2Freq>
 8009960:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009966:	2b00      	cmp	r3, #0
 8009968:	d044      	beq.n	80099f4 <UART_SetConfig+0x168c>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996e:	2b01      	cmp	r3, #1
 8009970:	d03e      	beq.n	80099f0 <UART_SetConfig+0x1688>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009976:	2b02      	cmp	r3, #2
 8009978:	d038      	beq.n	80099ec <UART_SetConfig+0x1684>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997e:	2b03      	cmp	r3, #3
 8009980:	d032      	beq.n	80099e8 <UART_SetConfig+0x1680>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009986:	2b04      	cmp	r3, #4
 8009988:	d02c      	beq.n	80099e4 <UART_SetConfig+0x167c>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998e:	2b05      	cmp	r3, #5
 8009990:	d026      	beq.n	80099e0 <UART_SetConfig+0x1678>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009996:	2b06      	cmp	r3, #6
 8009998:	d020      	beq.n	80099dc <UART_SetConfig+0x1674>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999e:	2b07      	cmp	r3, #7
 80099a0:	d01a      	beq.n	80099d8 <UART_SetConfig+0x1670>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a6:	2b08      	cmp	r3, #8
 80099a8:	d014      	beq.n	80099d4 <UART_SetConfig+0x166c>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ae:	2b09      	cmp	r3, #9
 80099b0:	d00e      	beq.n	80099d0 <UART_SetConfig+0x1668>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b6:	2b0a      	cmp	r3, #10
 80099b8:	d008      	beq.n	80099cc <UART_SetConfig+0x1664>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099be:	2b0b      	cmp	r3, #11
 80099c0:	d102      	bne.n	80099c8 <UART_SetConfig+0x1660>
 80099c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099c6:	e016      	b.n	80099f6 <UART_SetConfig+0x168e>
 80099c8:	2301      	movs	r3, #1
 80099ca:	e014      	b.n	80099f6 <UART_SetConfig+0x168e>
 80099cc:	2380      	movs	r3, #128	; 0x80
 80099ce:	e012      	b.n	80099f6 <UART_SetConfig+0x168e>
 80099d0:	2340      	movs	r3, #64	; 0x40
 80099d2:	e010      	b.n	80099f6 <UART_SetConfig+0x168e>
 80099d4:	2320      	movs	r3, #32
 80099d6:	e00e      	b.n	80099f6 <UART_SetConfig+0x168e>
 80099d8:	2310      	movs	r3, #16
 80099da:	e00c      	b.n	80099f6 <UART_SetConfig+0x168e>
 80099dc:	230c      	movs	r3, #12
 80099de:	e00a      	b.n	80099f6 <UART_SetConfig+0x168e>
 80099e0:	230a      	movs	r3, #10
 80099e2:	e008      	b.n	80099f6 <UART_SetConfig+0x168e>
 80099e4:	2308      	movs	r3, #8
 80099e6:	e006      	b.n	80099f6 <UART_SetConfig+0x168e>
 80099e8:	2306      	movs	r3, #6
 80099ea:	e004      	b.n	80099f6 <UART_SetConfig+0x168e>
 80099ec:	2304      	movs	r3, #4
 80099ee:	e002      	b.n	80099f6 <UART_SetConfig+0x168e>
 80099f0:	2302      	movs	r3, #2
 80099f2:	e000      	b.n	80099f6 <UART_SetConfig+0x168e>
 80099f4:	2301      	movs	r3, #1
 80099f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80099fc:	005a      	lsls	r2, r3, #1
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	085b      	lsrs	r3, r3, #1
 8009a04:	441a      	add	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009a12:	e254      	b.n	8009ebe <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a14:	f107 0318 	add.w	r3, r7, #24
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7fd fb4b 	bl	80070b4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a1e:	69fa      	ldr	r2, [r7, #28]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d044      	beq.n	8009ab2 <UART_SetConfig+0x174a>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d03e      	beq.n	8009aae <UART_SetConfig+0x1746>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d038      	beq.n	8009aaa <UART_SetConfig+0x1742>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3c:	2b03      	cmp	r3, #3
 8009a3e:	d032      	beq.n	8009aa6 <UART_SetConfig+0x173e>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a44:	2b04      	cmp	r3, #4
 8009a46:	d02c      	beq.n	8009aa2 <UART_SetConfig+0x173a>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4c:	2b05      	cmp	r3, #5
 8009a4e:	d026      	beq.n	8009a9e <UART_SetConfig+0x1736>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a54:	2b06      	cmp	r3, #6
 8009a56:	d020      	beq.n	8009a9a <UART_SetConfig+0x1732>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5c:	2b07      	cmp	r3, #7
 8009a5e:	d01a      	beq.n	8009a96 <UART_SetConfig+0x172e>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a64:	2b08      	cmp	r3, #8
 8009a66:	d014      	beq.n	8009a92 <UART_SetConfig+0x172a>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6c:	2b09      	cmp	r3, #9
 8009a6e:	d00e      	beq.n	8009a8e <UART_SetConfig+0x1726>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a74:	2b0a      	cmp	r3, #10
 8009a76:	d008      	beq.n	8009a8a <UART_SetConfig+0x1722>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7c:	2b0b      	cmp	r3, #11
 8009a7e:	d102      	bne.n	8009a86 <UART_SetConfig+0x171e>
 8009a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a84:	e016      	b.n	8009ab4 <UART_SetConfig+0x174c>
 8009a86:	2301      	movs	r3, #1
 8009a88:	e014      	b.n	8009ab4 <UART_SetConfig+0x174c>
 8009a8a:	2380      	movs	r3, #128	; 0x80
 8009a8c:	e012      	b.n	8009ab4 <UART_SetConfig+0x174c>
 8009a8e:	2340      	movs	r3, #64	; 0x40
 8009a90:	e010      	b.n	8009ab4 <UART_SetConfig+0x174c>
 8009a92:	2320      	movs	r3, #32
 8009a94:	e00e      	b.n	8009ab4 <UART_SetConfig+0x174c>
 8009a96:	2310      	movs	r3, #16
 8009a98:	e00c      	b.n	8009ab4 <UART_SetConfig+0x174c>
 8009a9a:	230c      	movs	r3, #12
 8009a9c:	e00a      	b.n	8009ab4 <UART_SetConfig+0x174c>
 8009a9e:	230a      	movs	r3, #10
 8009aa0:	e008      	b.n	8009ab4 <UART_SetConfig+0x174c>
 8009aa2:	2308      	movs	r3, #8
 8009aa4:	e006      	b.n	8009ab4 <UART_SetConfig+0x174c>
 8009aa6:	2306      	movs	r3, #6
 8009aa8:	e004      	b.n	8009ab4 <UART_SetConfig+0x174c>
 8009aaa:	2304      	movs	r3, #4
 8009aac:	e002      	b.n	8009ab4 <UART_SetConfig+0x174c>
 8009aae:	2302      	movs	r3, #2
 8009ab0:	e000      	b.n	8009ab4 <UART_SetConfig+0x174c>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab8:	005a      	lsls	r2, r3, #1
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	085b      	lsrs	r3, r3, #1
 8009ac0:	441a      	add	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ace:	e1f6      	b.n	8009ebe <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ad0:	f107 030c 	add.w	r3, r7, #12
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7fd fc39 	bl	800734c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ada:	693a      	ldr	r2, [r7, #16]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d044      	beq.n	8009b6e <UART_SetConfig+0x1806>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d03e      	beq.n	8009b6a <UART_SetConfig+0x1802>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d038      	beq.n	8009b66 <UART_SetConfig+0x17fe>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af8:	2b03      	cmp	r3, #3
 8009afa:	d032      	beq.n	8009b62 <UART_SetConfig+0x17fa>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b00:	2b04      	cmp	r3, #4
 8009b02:	d02c      	beq.n	8009b5e <UART_SetConfig+0x17f6>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b08:	2b05      	cmp	r3, #5
 8009b0a:	d026      	beq.n	8009b5a <UART_SetConfig+0x17f2>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b10:	2b06      	cmp	r3, #6
 8009b12:	d020      	beq.n	8009b56 <UART_SetConfig+0x17ee>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b18:	2b07      	cmp	r3, #7
 8009b1a:	d01a      	beq.n	8009b52 <UART_SetConfig+0x17ea>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b20:	2b08      	cmp	r3, #8
 8009b22:	d014      	beq.n	8009b4e <UART_SetConfig+0x17e6>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b28:	2b09      	cmp	r3, #9
 8009b2a:	d00e      	beq.n	8009b4a <UART_SetConfig+0x17e2>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b30:	2b0a      	cmp	r3, #10
 8009b32:	d008      	beq.n	8009b46 <UART_SetConfig+0x17de>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b38:	2b0b      	cmp	r3, #11
 8009b3a:	d102      	bne.n	8009b42 <UART_SetConfig+0x17da>
 8009b3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b40:	e016      	b.n	8009b70 <UART_SetConfig+0x1808>
 8009b42:	2301      	movs	r3, #1
 8009b44:	e014      	b.n	8009b70 <UART_SetConfig+0x1808>
 8009b46:	2380      	movs	r3, #128	; 0x80
 8009b48:	e012      	b.n	8009b70 <UART_SetConfig+0x1808>
 8009b4a:	2340      	movs	r3, #64	; 0x40
 8009b4c:	e010      	b.n	8009b70 <UART_SetConfig+0x1808>
 8009b4e:	2320      	movs	r3, #32
 8009b50:	e00e      	b.n	8009b70 <UART_SetConfig+0x1808>
 8009b52:	2310      	movs	r3, #16
 8009b54:	e00c      	b.n	8009b70 <UART_SetConfig+0x1808>
 8009b56:	230c      	movs	r3, #12
 8009b58:	e00a      	b.n	8009b70 <UART_SetConfig+0x1808>
 8009b5a:	230a      	movs	r3, #10
 8009b5c:	e008      	b.n	8009b70 <UART_SetConfig+0x1808>
 8009b5e:	2308      	movs	r3, #8
 8009b60:	e006      	b.n	8009b70 <UART_SetConfig+0x1808>
 8009b62:	2306      	movs	r3, #6
 8009b64:	e004      	b.n	8009b70 <UART_SetConfig+0x1808>
 8009b66:	2304      	movs	r3, #4
 8009b68:	e002      	b.n	8009b70 <UART_SetConfig+0x1808>
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	e000      	b.n	8009b70 <UART_SetConfig+0x1808>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b74:	005a      	lsls	r2, r3, #1
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	085b      	lsrs	r3, r3, #1
 8009b7c:	441a      	add	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b8a:	e198      	b.n	8009ebe <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b8c:	4b87      	ldr	r3, [pc, #540]	; (8009dac <UART_SetConfig+0x1a44>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f003 0320 	and.w	r3, r3, #32
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d05e      	beq.n	8009c56 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b98:	4b84      	ldr	r3, [pc, #528]	; (8009dac <UART_SetConfig+0x1a44>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	08db      	lsrs	r3, r3, #3
 8009b9e:	f003 0303 	and.w	r3, r3, #3
 8009ba2:	4a83      	ldr	r2, [pc, #524]	; (8009db0 <UART_SetConfig+0x1a48>)
 8009ba4:	40da      	lsrs	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d044      	beq.n	8009c38 <UART_SetConfig+0x18d0>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d03e      	beq.n	8009c34 <UART_SetConfig+0x18cc>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d038      	beq.n	8009c30 <UART_SetConfig+0x18c8>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc2:	2b03      	cmp	r3, #3
 8009bc4:	d032      	beq.n	8009c2c <UART_SetConfig+0x18c4>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bca:	2b04      	cmp	r3, #4
 8009bcc:	d02c      	beq.n	8009c28 <UART_SetConfig+0x18c0>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd2:	2b05      	cmp	r3, #5
 8009bd4:	d026      	beq.n	8009c24 <UART_SetConfig+0x18bc>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bda:	2b06      	cmp	r3, #6
 8009bdc:	d020      	beq.n	8009c20 <UART_SetConfig+0x18b8>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be2:	2b07      	cmp	r3, #7
 8009be4:	d01a      	beq.n	8009c1c <UART_SetConfig+0x18b4>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bea:	2b08      	cmp	r3, #8
 8009bec:	d014      	beq.n	8009c18 <UART_SetConfig+0x18b0>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf2:	2b09      	cmp	r3, #9
 8009bf4:	d00e      	beq.n	8009c14 <UART_SetConfig+0x18ac>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfa:	2b0a      	cmp	r3, #10
 8009bfc:	d008      	beq.n	8009c10 <UART_SetConfig+0x18a8>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c02:	2b0b      	cmp	r3, #11
 8009c04:	d102      	bne.n	8009c0c <UART_SetConfig+0x18a4>
 8009c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c0a:	e016      	b.n	8009c3a <UART_SetConfig+0x18d2>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e014      	b.n	8009c3a <UART_SetConfig+0x18d2>
 8009c10:	2380      	movs	r3, #128	; 0x80
 8009c12:	e012      	b.n	8009c3a <UART_SetConfig+0x18d2>
 8009c14:	2340      	movs	r3, #64	; 0x40
 8009c16:	e010      	b.n	8009c3a <UART_SetConfig+0x18d2>
 8009c18:	2320      	movs	r3, #32
 8009c1a:	e00e      	b.n	8009c3a <UART_SetConfig+0x18d2>
 8009c1c:	2310      	movs	r3, #16
 8009c1e:	e00c      	b.n	8009c3a <UART_SetConfig+0x18d2>
 8009c20:	230c      	movs	r3, #12
 8009c22:	e00a      	b.n	8009c3a <UART_SetConfig+0x18d2>
 8009c24:	230a      	movs	r3, #10
 8009c26:	e008      	b.n	8009c3a <UART_SetConfig+0x18d2>
 8009c28:	2308      	movs	r3, #8
 8009c2a:	e006      	b.n	8009c3a <UART_SetConfig+0x18d2>
 8009c2c:	2306      	movs	r3, #6
 8009c2e:	e004      	b.n	8009c3a <UART_SetConfig+0x18d2>
 8009c30:	2304      	movs	r3, #4
 8009c32:	e002      	b.n	8009c3a <UART_SetConfig+0x18d2>
 8009c34:	2302      	movs	r3, #2
 8009c36:	e000      	b.n	8009c3a <UART_SetConfig+0x18d2>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c3e:	005a      	lsls	r2, r3, #1
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	085b      	lsrs	r3, r3, #1
 8009c46:	441a      	add	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8009c54:	e133      	b.n	8009ebe <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d043      	beq.n	8009ce6 <UART_SetConfig+0x197e>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d03d      	beq.n	8009ce2 <UART_SetConfig+0x197a>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d037      	beq.n	8009cde <UART_SetConfig+0x1976>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c72:	2b03      	cmp	r3, #3
 8009c74:	d031      	beq.n	8009cda <UART_SetConfig+0x1972>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7a:	2b04      	cmp	r3, #4
 8009c7c:	d02b      	beq.n	8009cd6 <UART_SetConfig+0x196e>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c82:	2b05      	cmp	r3, #5
 8009c84:	d025      	beq.n	8009cd2 <UART_SetConfig+0x196a>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8a:	2b06      	cmp	r3, #6
 8009c8c:	d01f      	beq.n	8009cce <UART_SetConfig+0x1966>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c92:	2b07      	cmp	r3, #7
 8009c94:	d019      	beq.n	8009cca <UART_SetConfig+0x1962>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9a:	2b08      	cmp	r3, #8
 8009c9c:	d013      	beq.n	8009cc6 <UART_SetConfig+0x195e>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca2:	2b09      	cmp	r3, #9
 8009ca4:	d00d      	beq.n	8009cc2 <UART_SetConfig+0x195a>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009caa:	2b0a      	cmp	r3, #10
 8009cac:	d007      	beq.n	8009cbe <UART_SetConfig+0x1956>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb2:	2b0b      	cmp	r3, #11
 8009cb4:	d101      	bne.n	8009cba <UART_SetConfig+0x1952>
 8009cb6:	4b3f      	ldr	r3, [pc, #252]	; (8009db4 <UART_SetConfig+0x1a4c>)
 8009cb8:	e016      	b.n	8009ce8 <UART_SetConfig+0x1980>
 8009cba:	4b3f      	ldr	r3, [pc, #252]	; (8009db8 <UART_SetConfig+0x1a50>)
 8009cbc:	e014      	b.n	8009ce8 <UART_SetConfig+0x1980>
 8009cbe:	4b3f      	ldr	r3, [pc, #252]	; (8009dbc <UART_SetConfig+0x1a54>)
 8009cc0:	e012      	b.n	8009ce8 <UART_SetConfig+0x1980>
 8009cc2:	4b3f      	ldr	r3, [pc, #252]	; (8009dc0 <UART_SetConfig+0x1a58>)
 8009cc4:	e010      	b.n	8009ce8 <UART_SetConfig+0x1980>
 8009cc6:	4b3f      	ldr	r3, [pc, #252]	; (8009dc4 <UART_SetConfig+0x1a5c>)
 8009cc8:	e00e      	b.n	8009ce8 <UART_SetConfig+0x1980>
 8009cca:	4b3f      	ldr	r3, [pc, #252]	; (8009dc8 <UART_SetConfig+0x1a60>)
 8009ccc:	e00c      	b.n	8009ce8 <UART_SetConfig+0x1980>
 8009cce:	4b3f      	ldr	r3, [pc, #252]	; (8009dcc <UART_SetConfig+0x1a64>)
 8009cd0:	e00a      	b.n	8009ce8 <UART_SetConfig+0x1980>
 8009cd2:	4b3f      	ldr	r3, [pc, #252]	; (8009dd0 <UART_SetConfig+0x1a68>)
 8009cd4:	e008      	b.n	8009ce8 <UART_SetConfig+0x1980>
 8009cd6:	4b3f      	ldr	r3, [pc, #252]	; (8009dd4 <UART_SetConfig+0x1a6c>)
 8009cd8:	e006      	b.n	8009ce8 <UART_SetConfig+0x1980>
 8009cda:	4b3f      	ldr	r3, [pc, #252]	; (8009dd8 <UART_SetConfig+0x1a70>)
 8009cdc:	e004      	b.n	8009ce8 <UART_SetConfig+0x1980>
 8009cde:	4b3f      	ldr	r3, [pc, #252]	; (8009ddc <UART_SetConfig+0x1a74>)
 8009ce0:	e002      	b.n	8009ce8 <UART_SetConfig+0x1980>
 8009ce2:	4b33      	ldr	r3, [pc, #204]	; (8009db0 <UART_SetConfig+0x1a48>)
 8009ce4:	e000      	b.n	8009ce8 <UART_SetConfig+0x1980>
 8009ce6:	4b34      	ldr	r3, [pc, #208]	; (8009db8 <UART_SetConfig+0x1a50>)
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	6852      	ldr	r2, [r2, #4]
 8009cec:	0852      	lsrs	r2, r2, #1
 8009cee:	441a      	add	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009cfc:	e0df      	b.n	8009ebe <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d045      	beq.n	8009d92 <UART_SetConfig+0x1a2a>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d03f      	beq.n	8009d8e <UART_SetConfig+0x1a26>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	d039      	beq.n	8009d8a <UART_SetConfig+0x1a22>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	d033      	beq.n	8009d86 <UART_SetConfig+0x1a1e>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d22:	2b04      	cmp	r3, #4
 8009d24:	d02d      	beq.n	8009d82 <UART_SetConfig+0x1a1a>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2a:	2b05      	cmp	r3, #5
 8009d2c:	d027      	beq.n	8009d7e <UART_SetConfig+0x1a16>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d32:	2b06      	cmp	r3, #6
 8009d34:	d021      	beq.n	8009d7a <UART_SetConfig+0x1a12>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3a:	2b07      	cmp	r3, #7
 8009d3c:	d01b      	beq.n	8009d76 <UART_SetConfig+0x1a0e>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d42:	2b08      	cmp	r3, #8
 8009d44:	d015      	beq.n	8009d72 <UART_SetConfig+0x1a0a>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4a:	2b09      	cmp	r3, #9
 8009d4c:	d00f      	beq.n	8009d6e <UART_SetConfig+0x1a06>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d52:	2b0a      	cmp	r3, #10
 8009d54:	d008      	beq.n	8009d68 <UART_SetConfig+0x1a00>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5a:	2b0b      	cmp	r3, #11
 8009d5c:	d102      	bne.n	8009d64 <UART_SetConfig+0x19fc>
 8009d5e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009d62:	e017      	b.n	8009d94 <UART_SetConfig+0x1a2c>
 8009d64:	4b18      	ldr	r3, [pc, #96]	; (8009dc8 <UART_SetConfig+0x1a60>)
 8009d66:	e015      	b.n	8009d94 <UART_SetConfig+0x1a2c>
 8009d68:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009d6c:	e012      	b.n	8009d94 <UART_SetConfig+0x1a2c>
 8009d6e:	4b1c      	ldr	r3, [pc, #112]	; (8009de0 <UART_SetConfig+0x1a78>)
 8009d70:	e010      	b.n	8009d94 <UART_SetConfig+0x1a2c>
 8009d72:	4b1c      	ldr	r3, [pc, #112]	; (8009de4 <UART_SetConfig+0x1a7c>)
 8009d74:	e00e      	b.n	8009d94 <UART_SetConfig+0x1a2c>
 8009d76:	4b0f      	ldr	r3, [pc, #60]	; (8009db4 <UART_SetConfig+0x1a4c>)
 8009d78:	e00c      	b.n	8009d94 <UART_SetConfig+0x1a2c>
 8009d7a:	4b1b      	ldr	r3, [pc, #108]	; (8009de8 <UART_SetConfig+0x1a80>)
 8009d7c:	e00a      	b.n	8009d94 <UART_SetConfig+0x1a2c>
 8009d7e:	4b1b      	ldr	r3, [pc, #108]	; (8009dec <UART_SetConfig+0x1a84>)
 8009d80:	e008      	b.n	8009d94 <UART_SetConfig+0x1a2c>
 8009d82:	4b0e      	ldr	r3, [pc, #56]	; (8009dbc <UART_SetConfig+0x1a54>)
 8009d84:	e006      	b.n	8009d94 <UART_SetConfig+0x1a2c>
 8009d86:	4b1a      	ldr	r3, [pc, #104]	; (8009df0 <UART_SetConfig+0x1a88>)
 8009d88:	e004      	b.n	8009d94 <UART_SetConfig+0x1a2c>
 8009d8a:	4b0d      	ldr	r3, [pc, #52]	; (8009dc0 <UART_SetConfig+0x1a58>)
 8009d8c:	e002      	b.n	8009d94 <UART_SetConfig+0x1a2c>
 8009d8e:	4b0d      	ldr	r3, [pc, #52]	; (8009dc4 <UART_SetConfig+0x1a5c>)
 8009d90:	e000      	b.n	8009d94 <UART_SetConfig+0x1a2c>
 8009d92:	4b0d      	ldr	r3, [pc, #52]	; (8009dc8 <UART_SetConfig+0x1a60>)
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	6852      	ldr	r2, [r2, #4]
 8009d98:	0852      	lsrs	r2, r2, #1
 8009d9a:	441a      	add	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009da8:	e089      	b.n	8009ebe <UART_SetConfig+0x1b56>
 8009daa:	bf00      	nop
 8009dac:	58024400 	.word	0x58024400
 8009db0:	03d09000 	.word	0x03d09000
 8009db4:	0007a120 	.word	0x0007a120
 8009db8:	07a12000 	.word	0x07a12000
 8009dbc:	000f4240 	.word	0x000f4240
 8009dc0:	001e8480 	.word	0x001e8480
 8009dc4:	003d0900 	.word	0x003d0900
 8009dc8:	007a1200 	.word	0x007a1200
 8009dcc:	00a2c2aa 	.word	0x00a2c2aa
 8009dd0:	00c35000 	.word	0x00c35000
 8009dd4:	00f42400 	.word	0x00f42400
 8009dd8:	01458554 	.word	0x01458554
 8009ddc:	01e84800 	.word	0x01e84800
 8009de0:	0001e848 	.word	0x0001e848
 8009de4:	0003d090 	.word	0x0003d090
 8009de8:	000a2c2a 	.word	0x000a2c2a
 8009dec:	000c3500 	.word	0x000c3500
 8009df0:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d04f      	beq.n	8009e9c <UART_SetConfig+0x1b34>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d048      	beq.n	8009e96 <UART_SetConfig+0x1b2e>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	d041      	beq.n	8009e90 <UART_SetConfig+0x1b28>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e10:	2b03      	cmp	r3, #3
 8009e12:	d03a      	beq.n	8009e8a <UART_SetConfig+0x1b22>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e18:	2b04      	cmp	r3, #4
 8009e1a:	d033      	beq.n	8009e84 <UART_SetConfig+0x1b1c>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e20:	2b05      	cmp	r3, #5
 8009e22:	d02c      	beq.n	8009e7e <UART_SetConfig+0x1b16>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e28:	2b06      	cmp	r3, #6
 8009e2a:	d025      	beq.n	8009e78 <UART_SetConfig+0x1b10>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e30:	2b07      	cmp	r3, #7
 8009e32:	d01e      	beq.n	8009e72 <UART_SetConfig+0x1b0a>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e38:	2b08      	cmp	r3, #8
 8009e3a:	d017      	beq.n	8009e6c <UART_SetConfig+0x1b04>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e40:	2b09      	cmp	r3, #9
 8009e42:	d010      	beq.n	8009e66 <UART_SetConfig+0x1afe>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e48:	2b0a      	cmp	r3, #10
 8009e4a:	d009      	beq.n	8009e60 <UART_SetConfig+0x1af8>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e50:	2b0b      	cmp	r3, #11
 8009e52:	d102      	bne.n	8009e5a <UART_SetConfig+0x1af2>
 8009e54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e58:	e022      	b.n	8009ea0 <UART_SetConfig+0x1b38>
 8009e5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009e5e:	e01f      	b.n	8009ea0 <UART_SetConfig+0x1b38>
 8009e60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e64:	e01c      	b.n	8009ea0 <UART_SetConfig+0x1b38>
 8009e66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e6a:	e019      	b.n	8009ea0 <UART_SetConfig+0x1b38>
 8009e6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e70:	e016      	b.n	8009ea0 <UART_SetConfig+0x1b38>
 8009e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e76:	e013      	b.n	8009ea0 <UART_SetConfig+0x1b38>
 8009e78:	f241 5354 	movw	r3, #5460	; 0x1554
 8009e7c:	e010      	b.n	8009ea0 <UART_SetConfig+0x1b38>
 8009e7e:	f641 1398 	movw	r3, #6552	; 0x1998
 8009e82:	e00d      	b.n	8009ea0 <UART_SetConfig+0x1b38>
 8009e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e88:	e00a      	b.n	8009ea0 <UART_SetConfig+0x1b38>
 8009e8a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8009e8e:	e007      	b.n	8009ea0 <UART_SetConfig+0x1b38>
 8009e90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009e94:	e004      	b.n	8009ea0 <UART_SetConfig+0x1b38>
 8009e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e9a:	e001      	b.n	8009ea0 <UART_SetConfig+0x1b38>
 8009e9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	6852      	ldr	r2, [r2, #4]
 8009ea4:	0852      	lsrs	r2, r2, #1
 8009ea6:	441a      	add	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009eb4:	e003      	b.n	8009ebe <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009ebc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec0:	2b0f      	cmp	r3, #15
 8009ec2:	d916      	bls.n	8009ef2 <UART_SetConfig+0x1b8a>
 8009ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eca:	d212      	bcs.n	8009ef2 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	f023 030f 	bic.w	r3, r3, #15
 8009ed4:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed8:	085b      	lsrs	r3, r3, #1
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	f003 0307 	and.w	r3, r3, #7
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009eee:	60da      	str	r2, [r3, #12]
 8009ef0:	e3a3      	b.n	800a63a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ef8:	e39f      	b.n	800a63a <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8009efa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009efe:	2b40      	cmp	r3, #64	; 0x40
 8009f00:	f200 8388 	bhi.w	800a614 <UART_SetConfig+0x22ac>
 8009f04:	a201      	add	r2, pc, #4	; (adr r2, 8009f0c <UART_SetConfig+0x1ba4>)
 8009f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0a:	bf00      	nop
 8009f0c:	0800a011 	.word	0x0800a011
 8009f10:	0800a0c7 	.word	0x0800a0c7
 8009f14:	0800a615 	.word	0x0800a615
 8009f18:	0800a615 	.word	0x0800a615
 8009f1c:	0800a17d 	.word	0x0800a17d
 8009f20:	0800a615 	.word	0x0800a615
 8009f24:	0800a615 	.word	0x0800a615
 8009f28:	0800a615 	.word	0x0800a615
 8009f2c:	0800a237 	.word	0x0800a237
 8009f30:	0800a615 	.word	0x0800a615
 8009f34:	0800a615 	.word	0x0800a615
 8009f38:	0800a615 	.word	0x0800a615
 8009f3c:	0800a615 	.word	0x0800a615
 8009f40:	0800a615 	.word	0x0800a615
 8009f44:	0800a615 	.word	0x0800a615
 8009f48:	0800a615 	.word	0x0800a615
 8009f4c:	0800a2f1 	.word	0x0800a2f1
 8009f50:	0800a615 	.word	0x0800a615
 8009f54:	0800a615 	.word	0x0800a615
 8009f58:	0800a615 	.word	0x0800a615
 8009f5c:	0800a615 	.word	0x0800a615
 8009f60:	0800a615 	.word	0x0800a615
 8009f64:	0800a615 	.word	0x0800a615
 8009f68:	0800a615 	.word	0x0800a615
 8009f6c:	0800a615 	.word	0x0800a615
 8009f70:	0800a615 	.word	0x0800a615
 8009f74:	0800a615 	.word	0x0800a615
 8009f78:	0800a615 	.word	0x0800a615
 8009f7c:	0800a615 	.word	0x0800a615
 8009f80:	0800a615 	.word	0x0800a615
 8009f84:	0800a615 	.word	0x0800a615
 8009f88:	0800a615 	.word	0x0800a615
 8009f8c:	0800a461 	.word	0x0800a461
 8009f90:	0800a615 	.word	0x0800a615
 8009f94:	0800a615 	.word	0x0800a615
 8009f98:	0800a615 	.word	0x0800a615
 8009f9c:	0800a615 	.word	0x0800a615
 8009fa0:	0800a615 	.word	0x0800a615
 8009fa4:	0800a615 	.word	0x0800a615
 8009fa8:	0800a615 	.word	0x0800a615
 8009fac:	0800a615 	.word	0x0800a615
 8009fb0:	0800a615 	.word	0x0800a615
 8009fb4:	0800a615 	.word	0x0800a615
 8009fb8:	0800a615 	.word	0x0800a615
 8009fbc:	0800a615 	.word	0x0800a615
 8009fc0:	0800a615 	.word	0x0800a615
 8009fc4:	0800a615 	.word	0x0800a615
 8009fc8:	0800a615 	.word	0x0800a615
 8009fcc:	0800a615 	.word	0x0800a615
 8009fd0:	0800a615 	.word	0x0800a615
 8009fd4:	0800a615 	.word	0x0800a615
 8009fd8:	0800a615 	.word	0x0800a615
 8009fdc:	0800a615 	.word	0x0800a615
 8009fe0:	0800a615 	.word	0x0800a615
 8009fe4:	0800a615 	.word	0x0800a615
 8009fe8:	0800a615 	.word	0x0800a615
 8009fec:	0800a615 	.word	0x0800a615
 8009ff0:	0800a615 	.word	0x0800a615
 8009ff4:	0800a615 	.word	0x0800a615
 8009ff8:	0800a615 	.word	0x0800a615
 8009ffc:	0800a615 	.word	0x0800a615
 800a000:	0800a615 	.word	0x0800a615
 800a004:	0800a615 	.word	0x0800a615
 800a008:	0800a615 	.word	0x0800a615
 800a00c:	0800a555 	.word	0x0800a555
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a010:	f7fc f930 	bl	8006274 <HAL_RCC_GetPCLK1Freq>
 800a014:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d044      	beq.n	800a0a8 <UART_SetConfig+0x1d40>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a022:	2b01      	cmp	r3, #1
 800a024:	d03e      	beq.n	800a0a4 <UART_SetConfig+0x1d3c>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d038      	beq.n	800a0a0 <UART_SetConfig+0x1d38>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a032:	2b03      	cmp	r3, #3
 800a034:	d032      	beq.n	800a09c <UART_SetConfig+0x1d34>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03a:	2b04      	cmp	r3, #4
 800a03c:	d02c      	beq.n	800a098 <UART_SetConfig+0x1d30>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a042:	2b05      	cmp	r3, #5
 800a044:	d026      	beq.n	800a094 <UART_SetConfig+0x1d2c>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04a:	2b06      	cmp	r3, #6
 800a04c:	d020      	beq.n	800a090 <UART_SetConfig+0x1d28>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a052:	2b07      	cmp	r3, #7
 800a054:	d01a      	beq.n	800a08c <UART_SetConfig+0x1d24>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05a:	2b08      	cmp	r3, #8
 800a05c:	d014      	beq.n	800a088 <UART_SetConfig+0x1d20>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a062:	2b09      	cmp	r3, #9
 800a064:	d00e      	beq.n	800a084 <UART_SetConfig+0x1d1c>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06a:	2b0a      	cmp	r3, #10
 800a06c:	d008      	beq.n	800a080 <UART_SetConfig+0x1d18>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a072:	2b0b      	cmp	r3, #11
 800a074:	d102      	bne.n	800a07c <UART_SetConfig+0x1d14>
 800a076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a07a:	e016      	b.n	800a0aa <UART_SetConfig+0x1d42>
 800a07c:	2301      	movs	r3, #1
 800a07e:	e014      	b.n	800a0aa <UART_SetConfig+0x1d42>
 800a080:	2380      	movs	r3, #128	; 0x80
 800a082:	e012      	b.n	800a0aa <UART_SetConfig+0x1d42>
 800a084:	2340      	movs	r3, #64	; 0x40
 800a086:	e010      	b.n	800a0aa <UART_SetConfig+0x1d42>
 800a088:	2320      	movs	r3, #32
 800a08a:	e00e      	b.n	800a0aa <UART_SetConfig+0x1d42>
 800a08c:	2310      	movs	r3, #16
 800a08e:	e00c      	b.n	800a0aa <UART_SetConfig+0x1d42>
 800a090:	230c      	movs	r3, #12
 800a092:	e00a      	b.n	800a0aa <UART_SetConfig+0x1d42>
 800a094:	230a      	movs	r3, #10
 800a096:	e008      	b.n	800a0aa <UART_SetConfig+0x1d42>
 800a098:	2308      	movs	r3, #8
 800a09a:	e006      	b.n	800a0aa <UART_SetConfig+0x1d42>
 800a09c:	2306      	movs	r3, #6
 800a09e:	e004      	b.n	800a0aa <UART_SetConfig+0x1d42>
 800a0a0:	2304      	movs	r3, #4
 800a0a2:	e002      	b.n	800a0aa <UART_SetConfig+0x1d42>
 800a0a4:	2302      	movs	r3, #2
 800a0a6:	e000      	b.n	800a0aa <UART_SetConfig+0x1d42>
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0ac:	fbb2 f2f3 	udiv	r2, r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	085b      	lsrs	r3, r3, #1
 800a0b6:	441a      	add	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a0c4:	e2aa      	b.n	800a61c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0c6:	f7fc f8eb 	bl	80062a0 <HAL_RCC_GetPCLK2Freq>
 800a0ca:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d044      	beq.n	800a15e <UART_SetConfig+0x1df6>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d03e      	beq.n	800a15a <UART_SetConfig+0x1df2>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	d038      	beq.n	800a156 <UART_SetConfig+0x1dee>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e8:	2b03      	cmp	r3, #3
 800a0ea:	d032      	beq.n	800a152 <UART_SetConfig+0x1dea>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f0:	2b04      	cmp	r3, #4
 800a0f2:	d02c      	beq.n	800a14e <UART_SetConfig+0x1de6>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f8:	2b05      	cmp	r3, #5
 800a0fa:	d026      	beq.n	800a14a <UART_SetConfig+0x1de2>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a100:	2b06      	cmp	r3, #6
 800a102:	d020      	beq.n	800a146 <UART_SetConfig+0x1dde>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a108:	2b07      	cmp	r3, #7
 800a10a:	d01a      	beq.n	800a142 <UART_SetConfig+0x1dda>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a110:	2b08      	cmp	r3, #8
 800a112:	d014      	beq.n	800a13e <UART_SetConfig+0x1dd6>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a118:	2b09      	cmp	r3, #9
 800a11a:	d00e      	beq.n	800a13a <UART_SetConfig+0x1dd2>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a120:	2b0a      	cmp	r3, #10
 800a122:	d008      	beq.n	800a136 <UART_SetConfig+0x1dce>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a128:	2b0b      	cmp	r3, #11
 800a12a:	d102      	bne.n	800a132 <UART_SetConfig+0x1dca>
 800a12c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a130:	e016      	b.n	800a160 <UART_SetConfig+0x1df8>
 800a132:	2301      	movs	r3, #1
 800a134:	e014      	b.n	800a160 <UART_SetConfig+0x1df8>
 800a136:	2380      	movs	r3, #128	; 0x80
 800a138:	e012      	b.n	800a160 <UART_SetConfig+0x1df8>
 800a13a:	2340      	movs	r3, #64	; 0x40
 800a13c:	e010      	b.n	800a160 <UART_SetConfig+0x1df8>
 800a13e:	2320      	movs	r3, #32
 800a140:	e00e      	b.n	800a160 <UART_SetConfig+0x1df8>
 800a142:	2310      	movs	r3, #16
 800a144:	e00c      	b.n	800a160 <UART_SetConfig+0x1df8>
 800a146:	230c      	movs	r3, #12
 800a148:	e00a      	b.n	800a160 <UART_SetConfig+0x1df8>
 800a14a:	230a      	movs	r3, #10
 800a14c:	e008      	b.n	800a160 <UART_SetConfig+0x1df8>
 800a14e:	2308      	movs	r3, #8
 800a150:	e006      	b.n	800a160 <UART_SetConfig+0x1df8>
 800a152:	2306      	movs	r3, #6
 800a154:	e004      	b.n	800a160 <UART_SetConfig+0x1df8>
 800a156:	2304      	movs	r3, #4
 800a158:	e002      	b.n	800a160 <UART_SetConfig+0x1df8>
 800a15a:	2302      	movs	r3, #2
 800a15c:	e000      	b.n	800a160 <UART_SetConfig+0x1df8>
 800a15e:	2301      	movs	r3, #1
 800a160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a162:	fbb2 f2f3 	udiv	r2, r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	085b      	lsrs	r3, r3, #1
 800a16c:	441a      	add	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	fbb2 f3f3 	udiv	r3, r2, r3
 800a176:	b29b      	uxth	r3, r3
 800a178:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a17a:	e24f      	b.n	800a61c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a17c:	f107 0318 	add.w	r3, r7, #24
 800a180:	4618      	mov	r0, r3
 800a182:	f7fc ff97 	bl	80070b4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a186:	69fa      	ldr	r2, [r7, #28]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d044      	beq.n	800a21a <UART_SetConfig+0x1eb2>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a194:	2b01      	cmp	r3, #1
 800a196:	d03e      	beq.n	800a216 <UART_SetConfig+0x1eae>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19c:	2b02      	cmp	r3, #2
 800a19e:	d038      	beq.n	800a212 <UART_SetConfig+0x1eaa>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a4:	2b03      	cmp	r3, #3
 800a1a6:	d032      	beq.n	800a20e <UART_SetConfig+0x1ea6>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ac:	2b04      	cmp	r3, #4
 800a1ae:	d02c      	beq.n	800a20a <UART_SetConfig+0x1ea2>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b4:	2b05      	cmp	r3, #5
 800a1b6:	d026      	beq.n	800a206 <UART_SetConfig+0x1e9e>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1bc:	2b06      	cmp	r3, #6
 800a1be:	d020      	beq.n	800a202 <UART_SetConfig+0x1e9a>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c4:	2b07      	cmp	r3, #7
 800a1c6:	d01a      	beq.n	800a1fe <UART_SetConfig+0x1e96>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1cc:	2b08      	cmp	r3, #8
 800a1ce:	d014      	beq.n	800a1fa <UART_SetConfig+0x1e92>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d4:	2b09      	cmp	r3, #9
 800a1d6:	d00e      	beq.n	800a1f6 <UART_SetConfig+0x1e8e>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1dc:	2b0a      	cmp	r3, #10
 800a1de:	d008      	beq.n	800a1f2 <UART_SetConfig+0x1e8a>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e4:	2b0b      	cmp	r3, #11
 800a1e6:	d102      	bne.n	800a1ee <UART_SetConfig+0x1e86>
 800a1e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1ec:	e016      	b.n	800a21c <UART_SetConfig+0x1eb4>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e014      	b.n	800a21c <UART_SetConfig+0x1eb4>
 800a1f2:	2380      	movs	r3, #128	; 0x80
 800a1f4:	e012      	b.n	800a21c <UART_SetConfig+0x1eb4>
 800a1f6:	2340      	movs	r3, #64	; 0x40
 800a1f8:	e010      	b.n	800a21c <UART_SetConfig+0x1eb4>
 800a1fa:	2320      	movs	r3, #32
 800a1fc:	e00e      	b.n	800a21c <UART_SetConfig+0x1eb4>
 800a1fe:	2310      	movs	r3, #16
 800a200:	e00c      	b.n	800a21c <UART_SetConfig+0x1eb4>
 800a202:	230c      	movs	r3, #12
 800a204:	e00a      	b.n	800a21c <UART_SetConfig+0x1eb4>
 800a206:	230a      	movs	r3, #10
 800a208:	e008      	b.n	800a21c <UART_SetConfig+0x1eb4>
 800a20a:	2308      	movs	r3, #8
 800a20c:	e006      	b.n	800a21c <UART_SetConfig+0x1eb4>
 800a20e:	2306      	movs	r3, #6
 800a210:	e004      	b.n	800a21c <UART_SetConfig+0x1eb4>
 800a212:	2304      	movs	r3, #4
 800a214:	e002      	b.n	800a21c <UART_SetConfig+0x1eb4>
 800a216:	2302      	movs	r3, #2
 800a218:	e000      	b.n	800a21c <UART_SetConfig+0x1eb4>
 800a21a:	2301      	movs	r3, #1
 800a21c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	085b      	lsrs	r3, r3, #1
 800a226:	441a      	add	r2, r3
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a230:	b29b      	uxth	r3, r3
 800a232:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a234:	e1f2      	b.n	800a61c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a236:	f107 030c 	add.w	r3, r7, #12
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fd f886 	bl	800734c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a240:	693a      	ldr	r2, [r7, #16]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a246:	2b00      	cmp	r3, #0
 800a248:	d044      	beq.n	800a2d4 <UART_SetConfig+0x1f6c>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d03e      	beq.n	800a2d0 <UART_SetConfig+0x1f68>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a256:	2b02      	cmp	r3, #2
 800a258:	d038      	beq.n	800a2cc <UART_SetConfig+0x1f64>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25e:	2b03      	cmp	r3, #3
 800a260:	d032      	beq.n	800a2c8 <UART_SetConfig+0x1f60>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a266:	2b04      	cmp	r3, #4
 800a268:	d02c      	beq.n	800a2c4 <UART_SetConfig+0x1f5c>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26e:	2b05      	cmp	r3, #5
 800a270:	d026      	beq.n	800a2c0 <UART_SetConfig+0x1f58>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a276:	2b06      	cmp	r3, #6
 800a278:	d020      	beq.n	800a2bc <UART_SetConfig+0x1f54>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27e:	2b07      	cmp	r3, #7
 800a280:	d01a      	beq.n	800a2b8 <UART_SetConfig+0x1f50>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a286:	2b08      	cmp	r3, #8
 800a288:	d014      	beq.n	800a2b4 <UART_SetConfig+0x1f4c>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28e:	2b09      	cmp	r3, #9
 800a290:	d00e      	beq.n	800a2b0 <UART_SetConfig+0x1f48>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a296:	2b0a      	cmp	r3, #10
 800a298:	d008      	beq.n	800a2ac <UART_SetConfig+0x1f44>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29e:	2b0b      	cmp	r3, #11
 800a2a0:	d102      	bne.n	800a2a8 <UART_SetConfig+0x1f40>
 800a2a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2a6:	e016      	b.n	800a2d6 <UART_SetConfig+0x1f6e>
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e014      	b.n	800a2d6 <UART_SetConfig+0x1f6e>
 800a2ac:	2380      	movs	r3, #128	; 0x80
 800a2ae:	e012      	b.n	800a2d6 <UART_SetConfig+0x1f6e>
 800a2b0:	2340      	movs	r3, #64	; 0x40
 800a2b2:	e010      	b.n	800a2d6 <UART_SetConfig+0x1f6e>
 800a2b4:	2320      	movs	r3, #32
 800a2b6:	e00e      	b.n	800a2d6 <UART_SetConfig+0x1f6e>
 800a2b8:	2310      	movs	r3, #16
 800a2ba:	e00c      	b.n	800a2d6 <UART_SetConfig+0x1f6e>
 800a2bc:	230c      	movs	r3, #12
 800a2be:	e00a      	b.n	800a2d6 <UART_SetConfig+0x1f6e>
 800a2c0:	230a      	movs	r3, #10
 800a2c2:	e008      	b.n	800a2d6 <UART_SetConfig+0x1f6e>
 800a2c4:	2308      	movs	r3, #8
 800a2c6:	e006      	b.n	800a2d6 <UART_SetConfig+0x1f6e>
 800a2c8:	2306      	movs	r3, #6
 800a2ca:	e004      	b.n	800a2d6 <UART_SetConfig+0x1f6e>
 800a2cc:	2304      	movs	r3, #4
 800a2ce:	e002      	b.n	800a2d6 <UART_SetConfig+0x1f6e>
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	e000      	b.n	800a2d6 <UART_SetConfig+0x1f6e>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	fbb2 f2f3 	udiv	r2, r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	085b      	lsrs	r3, r3, #1
 800a2e0:	441a      	add	r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a2ee:	e195      	b.n	800a61c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2f0:	4b87      	ldr	r3, [pc, #540]	; (800a510 <UART_SetConfig+0x21a8>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f003 0320 	and.w	r3, r3, #32
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d05d      	beq.n	800a3b8 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2fc:	4b84      	ldr	r3, [pc, #528]	; (800a510 <UART_SetConfig+0x21a8>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	08db      	lsrs	r3, r3, #3
 800a302:	f003 0303 	and.w	r3, r3, #3
 800a306:	4a83      	ldr	r2, [pc, #524]	; (800a514 <UART_SetConfig+0x21ac>)
 800a308:	40da      	lsrs	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d044      	beq.n	800a39c <UART_SetConfig+0x2034>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a316:	2b01      	cmp	r3, #1
 800a318:	d03e      	beq.n	800a398 <UART_SetConfig+0x2030>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d038      	beq.n	800a394 <UART_SetConfig+0x202c>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a326:	2b03      	cmp	r3, #3
 800a328:	d032      	beq.n	800a390 <UART_SetConfig+0x2028>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32e:	2b04      	cmp	r3, #4
 800a330:	d02c      	beq.n	800a38c <UART_SetConfig+0x2024>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a336:	2b05      	cmp	r3, #5
 800a338:	d026      	beq.n	800a388 <UART_SetConfig+0x2020>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33e:	2b06      	cmp	r3, #6
 800a340:	d020      	beq.n	800a384 <UART_SetConfig+0x201c>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a346:	2b07      	cmp	r3, #7
 800a348:	d01a      	beq.n	800a380 <UART_SetConfig+0x2018>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34e:	2b08      	cmp	r3, #8
 800a350:	d014      	beq.n	800a37c <UART_SetConfig+0x2014>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a356:	2b09      	cmp	r3, #9
 800a358:	d00e      	beq.n	800a378 <UART_SetConfig+0x2010>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35e:	2b0a      	cmp	r3, #10
 800a360:	d008      	beq.n	800a374 <UART_SetConfig+0x200c>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a366:	2b0b      	cmp	r3, #11
 800a368:	d102      	bne.n	800a370 <UART_SetConfig+0x2008>
 800a36a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a36e:	e016      	b.n	800a39e <UART_SetConfig+0x2036>
 800a370:	2301      	movs	r3, #1
 800a372:	e014      	b.n	800a39e <UART_SetConfig+0x2036>
 800a374:	2380      	movs	r3, #128	; 0x80
 800a376:	e012      	b.n	800a39e <UART_SetConfig+0x2036>
 800a378:	2340      	movs	r3, #64	; 0x40
 800a37a:	e010      	b.n	800a39e <UART_SetConfig+0x2036>
 800a37c:	2320      	movs	r3, #32
 800a37e:	e00e      	b.n	800a39e <UART_SetConfig+0x2036>
 800a380:	2310      	movs	r3, #16
 800a382:	e00c      	b.n	800a39e <UART_SetConfig+0x2036>
 800a384:	230c      	movs	r3, #12
 800a386:	e00a      	b.n	800a39e <UART_SetConfig+0x2036>
 800a388:	230a      	movs	r3, #10
 800a38a:	e008      	b.n	800a39e <UART_SetConfig+0x2036>
 800a38c:	2308      	movs	r3, #8
 800a38e:	e006      	b.n	800a39e <UART_SetConfig+0x2036>
 800a390:	2306      	movs	r3, #6
 800a392:	e004      	b.n	800a39e <UART_SetConfig+0x2036>
 800a394:	2304      	movs	r3, #4
 800a396:	e002      	b.n	800a39e <UART_SetConfig+0x2036>
 800a398:	2302      	movs	r3, #2
 800a39a:	e000      	b.n	800a39e <UART_SetConfig+0x2036>
 800a39c:	2301      	movs	r3, #1
 800a39e:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	085b      	lsrs	r3, r3, #1
 800a3a8:	441a      	add	r2, r3
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800a3b6:	e131      	b.n	800a61c <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d043      	beq.n	800a448 <UART_SetConfig+0x20e0>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d03d      	beq.n	800a444 <UART_SetConfig+0x20dc>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d037      	beq.n	800a440 <UART_SetConfig+0x20d8>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d4:	2b03      	cmp	r3, #3
 800a3d6:	d031      	beq.n	800a43c <UART_SetConfig+0x20d4>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	2b04      	cmp	r3, #4
 800a3de:	d02b      	beq.n	800a438 <UART_SetConfig+0x20d0>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	2b05      	cmp	r3, #5
 800a3e6:	d025      	beq.n	800a434 <UART_SetConfig+0x20cc>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ec:	2b06      	cmp	r3, #6
 800a3ee:	d01f      	beq.n	800a430 <UART_SetConfig+0x20c8>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	2b07      	cmp	r3, #7
 800a3f6:	d019      	beq.n	800a42c <UART_SetConfig+0x20c4>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fc:	2b08      	cmp	r3, #8
 800a3fe:	d013      	beq.n	800a428 <UART_SetConfig+0x20c0>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a404:	2b09      	cmp	r3, #9
 800a406:	d00d      	beq.n	800a424 <UART_SetConfig+0x20bc>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	2b0a      	cmp	r3, #10
 800a40e:	d007      	beq.n	800a420 <UART_SetConfig+0x20b8>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a414:	2b0b      	cmp	r3, #11
 800a416:	d101      	bne.n	800a41c <UART_SetConfig+0x20b4>
 800a418:	4b3f      	ldr	r3, [pc, #252]	; (800a518 <UART_SetConfig+0x21b0>)
 800a41a:	e016      	b.n	800a44a <UART_SetConfig+0x20e2>
 800a41c:	4b3d      	ldr	r3, [pc, #244]	; (800a514 <UART_SetConfig+0x21ac>)
 800a41e:	e014      	b.n	800a44a <UART_SetConfig+0x20e2>
 800a420:	4b3e      	ldr	r3, [pc, #248]	; (800a51c <UART_SetConfig+0x21b4>)
 800a422:	e012      	b.n	800a44a <UART_SetConfig+0x20e2>
 800a424:	4b3e      	ldr	r3, [pc, #248]	; (800a520 <UART_SetConfig+0x21b8>)
 800a426:	e010      	b.n	800a44a <UART_SetConfig+0x20e2>
 800a428:	4b3e      	ldr	r3, [pc, #248]	; (800a524 <UART_SetConfig+0x21bc>)
 800a42a:	e00e      	b.n	800a44a <UART_SetConfig+0x20e2>
 800a42c:	4b3e      	ldr	r3, [pc, #248]	; (800a528 <UART_SetConfig+0x21c0>)
 800a42e:	e00c      	b.n	800a44a <UART_SetConfig+0x20e2>
 800a430:	4b3e      	ldr	r3, [pc, #248]	; (800a52c <UART_SetConfig+0x21c4>)
 800a432:	e00a      	b.n	800a44a <UART_SetConfig+0x20e2>
 800a434:	4b3e      	ldr	r3, [pc, #248]	; (800a530 <UART_SetConfig+0x21c8>)
 800a436:	e008      	b.n	800a44a <UART_SetConfig+0x20e2>
 800a438:	4b3e      	ldr	r3, [pc, #248]	; (800a534 <UART_SetConfig+0x21cc>)
 800a43a:	e006      	b.n	800a44a <UART_SetConfig+0x20e2>
 800a43c:	4b3e      	ldr	r3, [pc, #248]	; (800a538 <UART_SetConfig+0x21d0>)
 800a43e:	e004      	b.n	800a44a <UART_SetConfig+0x20e2>
 800a440:	4b3e      	ldr	r3, [pc, #248]	; (800a53c <UART_SetConfig+0x21d4>)
 800a442:	e002      	b.n	800a44a <UART_SetConfig+0x20e2>
 800a444:	4b3e      	ldr	r3, [pc, #248]	; (800a540 <UART_SetConfig+0x21d8>)
 800a446:	e000      	b.n	800a44a <UART_SetConfig+0x20e2>
 800a448:	4b32      	ldr	r3, [pc, #200]	; (800a514 <UART_SetConfig+0x21ac>)
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	6852      	ldr	r2, [r2, #4]
 800a44e:	0852      	lsrs	r2, r2, #1
 800a450:	441a      	add	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	fbb2 f3f3 	udiv	r3, r2, r3
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a45e:	e0dd      	b.n	800a61c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a464:	2b00      	cmp	r3, #0
 800a466:	d046      	beq.n	800a4f6 <UART_SetConfig+0x218e>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d040      	beq.n	800a4f2 <UART_SetConfig+0x218a>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a474:	2b02      	cmp	r3, #2
 800a476:	d03a      	beq.n	800a4ee <UART_SetConfig+0x2186>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47c:	2b03      	cmp	r3, #3
 800a47e:	d034      	beq.n	800a4ea <UART_SetConfig+0x2182>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a484:	2b04      	cmp	r3, #4
 800a486:	d02e      	beq.n	800a4e6 <UART_SetConfig+0x217e>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48c:	2b05      	cmp	r3, #5
 800a48e:	d028      	beq.n	800a4e2 <UART_SetConfig+0x217a>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a494:	2b06      	cmp	r3, #6
 800a496:	d022      	beq.n	800a4de <UART_SetConfig+0x2176>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49c:	2b07      	cmp	r3, #7
 800a49e:	d01c      	beq.n	800a4da <UART_SetConfig+0x2172>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a4:	2b08      	cmp	r3, #8
 800a4a6:	d016      	beq.n	800a4d6 <UART_SetConfig+0x216e>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ac:	2b09      	cmp	r3, #9
 800a4ae:	d00f      	beq.n	800a4d0 <UART_SetConfig+0x2168>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b4:	2b0a      	cmp	r3, #10
 800a4b6:	d008      	beq.n	800a4ca <UART_SetConfig+0x2162>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4bc:	2b0b      	cmp	r3, #11
 800a4be:	d102      	bne.n	800a4c6 <UART_SetConfig+0x215e>
 800a4c0:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a4c4:	e018      	b.n	800a4f8 <UART_SetConfig+0x2190>
 800a4c6:	4b18      	ldr	r3, [pc, #96]	; (800a528 <UART_SetConfig+0x21c0>)
 800a4c8:	e016      	b.n	800a4f8 <UART_SetConfig+0x2190>
 800a4ca:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a4ce:	e013      	b.n	800a4f8 <UART_SetConfig+0x2190>
 800a4d0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a4d4:	e010      	b.n	800a4f8 <UART_SetConfig+0x2190>
 800a4d6:	4b1b      	ldr	r3, [pc, #108]	; (800a544 <UART_SetConfig+0x21dc>)
 800a4d8:	e00e      	b.n	800a4f8 <UART_SetConfig+0x2190>
 800a4da:	4b0f      	ldr	r3, [pc, #60]	; (800a518 <UART_SetConfig+0x21b0>)
 800a4dc:	e00c      	b.n	800a4f8 <UART_SetConfig+0x2190>
 800a4de:	4b1a      	ldr	r3, [pc, #104]	; (800a548 <UART_SetConfig+0x21e0>)
 800a4e0:	e00a      	b.n	800a4f8 <UART_SetConfig+0x2190>
 800a4e2:	4b1a      	ldr	r3, [pc, #104]	; (800a54c <UART_SetConfig+0x21e4>)
 800a4e4:	e008      	b.n	800a4f8 <UART_SetConfig+0x2190>
 800a4e6:	4b0d      	ldr	r3, [pc, #52]	; (800a51c <UART_SetConfig+0x21b4>)
 800a4e8:	e006      	b.n	800a4f8 <UART_SetConfig+0x2190>
 800a4ea:	4b19      	ldr	r3, [pc, #100]	; (800a550 <UART_SetConfig+0x21e8>)
 800a4ec:	e004      	b.n	800a4f8 <UART_SetConfig+0x2190>
 800a4ee:	4b0c      	ldr	r3, [pc, #48]	; (800a520 <UART_SetConfig+0x21b8>)
 800a4f0:	e002      	b.n	800a4f8 <UART_SetConfig+0x2190>
 800a4f2:	4b0c      	ldr	r3, [pc, #48]	; (800a524 <UART_SetConfig+0x21bc>)
 800a4f4:	e000      	b.n	800a4f8 <UART_SetConfig+0x2190>
 800a4f6:	4b0c      	ldr	r3, [pc, #48]	; (800a528 <UART_SetConfig+0x21c0>)
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	6852      	ldr	r2, [r2, #4]
 800a4fc:	0852      	lsrs	r2, r2, #1
 800a4fe:	441a      	add	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	fbb2 f3f3 	udiv	r3, r2, r3
 800a508:	b29b      	uxth	r3, r3
 800a50a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a50c:	e086      	b.n	800a61c <UART_SetConfig+0x22b4>
 800a50e:	bf00      	nop
 800a510:	58024400 	.word	0x58024400
 800a514:	03d09000 	.word	0x03d09000
 800a518:	0003d090 	.word	0x0003d090
 800a51c:	0007a120 	.word	0x0007a120
 800a520:	000f4240 	.word	0x000f4240
 800a524:	001e8480 	.word	0x001e8480
 800a528:	003d0900 	.word	0x003d0900
 800a52c:	00516155 	.word	0x00516155
 800a530:	0061a800 	.word	0x0061a800
 800a534:	007a1200 	.word	0x007a1200
 800a538:	00a2c2aa 	.word	0x00a2c2aa
 800a53c:	00f42400 	.word	0x00f42400
 800a540:	01e84800 	.word	0x01e84800
 800a544:	0001e848 	.word	0x0001e848
 800a548:	00051615 	.word	0x00051615
 800a54c:	00061a80 	.word	0x00061a80
 800a550:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d04e      	beq.n	800a5fa <UART_SetConfig+0x2292>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a560:	2b01      	cmp	r3, #1
 800a562:	d047      	beq.n	800a5f4 <UART_SetConfig+0x228c>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d040      	beq.n	800a5ee <UART_SetConfig+0x2286>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a570:	2b03      	cmp	r3, #3
 800a572:	d039      	beq.n	800a5e8 <UART_SetConfig+0x2280>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a578:	2b04      	cmp	r3, #4
 800a57a:	d032      	beq.n	800a5e2 <UART_SetConfig+0x227a>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a580:	2b05      	cmp	r3, #5
 800a582:	d02b      	beq.n	800a5dc <UART_SetConfig+0x2274>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a588:	2b06      	cmp	r3, #6
 800a58a:	d024      	beq.n	800a5d6 <UART_SetConfig+0x226e>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a590:	2b07      	cmp	r3, #7
 800a592:	d01d      	beq.n	800a5d0 <UART_SetConfig+0x2268>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a598:	2b08      	cmp	r3, #8
 800a59a:	d016      	beq.n	800a5ca <UART_SetConfig+0x2262>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a0:	2b09      	cmp	r3, #9
 800a5a2:	d00f      	beq.n	800a5c4 <UART_SetConfig+0x225c>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a8:	2b0a      	cmp	r3, #10
 800a5aa:	d008      	beq.n	800a5be <UART_SetConfig+0x2256>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b0:	2b0b      	cmp	r3, #11
 800a5b2:	d101      	bne.n	800a5b8 <UART_SetConfig+0x2250>
 800a5b4:	2380      	movs	r3, #128	; 0x80
 800a5b6:	e022      	b.n	800a5fe <UART_SetConfig+0x2296>
 800a5b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5bc:	e01f      	b.n	800a5fe <UART_SetConfig+0x2296>
 800a5be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5c2:	e01c      	b.n	800a5fe <UART_SetConfig+0x2296>
 800a5c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5c8:	e019      	b.n	800a5fe <UART_SetConfig+0x2296>
 800a5ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5ce:	e016      	b.n	800a5fe <UART_SetConfig+0x2296>
 800a5d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a5d4:	e013      	b.n	800a5fe <UART_SetConfig+0x2296>
 800a5d6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a5da:	e010      	b.n	800a5fe <UART_SetConfig+0x2296>
 800a5dc:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a5e0:	e00d      	b.n	800a5fe <UART_SetConfig+0x2296>
 800a5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5e6:	e00a      	b.n	800a5fe <UART_SetConfig+0x2296>
 800a5e8:	f241 5355 	movw	r3, #5461	; 0x1555
 800a5ec:	e007      	b.n	800a5fe <UART_SetConfig+0x2296>
 800a5ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a5f2:	e004      	b.n	800a5fe <UART_SetConfig+0x2296>
 800a5f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a5f8:	e001      	b.n	800a5fe <UART_SetConfig+0x2296>
 800a5fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	6852      	ldr	r2, [r2, #4]
 800a602:	0852      	lsrs	r2, r2, #1
 800a604:	441a      	add	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a60e:	b29b      	uxth	r3, r3
 800a610:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a612:	e003      	b.n	800a61c <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800a614:	2301      	movs	r3, #1
 800a616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a61a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a61e:	2b0f      	cmp	r3, #15
 800a620:	d908      	bls.n	800a634 <UART_SetConfig+0x22cc>
 800a622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a628:	d204      	bcs.n	800a634 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a630:	60da      	str	r2, [r3, #12]
 800a632:	e002      	b.n	800a63a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2201      	movs	r2, #1
 800a63e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2201      	movs	r2, #1
 800a646:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a656:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3740      	adds	r7, #64	; 0x40
 800a65e:	46bd      	mov	sp, r7
 800a660:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800a664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a670:	f003 0301 	and.w	r3, r3, #1
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00a      	beq.n	800a68e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	430a      	orrs	r2, r1
 800a68c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a692:	f003 0302 	and.w	r3, r3, #2
 800a696:	2b00      	cmp	r3, #0
 800a698:	d00a      	beq.n	800a6b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	430a      	orrs	r2, r1
 800a6ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b4:	f003 0304 	and.w	r3, r3, #4
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00a      	beq.n	800a6d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d6:	f003 0308 	and.w	r3, r3, #8
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00a      	beq.n	800a6f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	430a      	orrs	r2, r1
 800a6f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f8:	f003 0310 	and.w	r3, r3, #16
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00a      	beq.n	800a716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	430a      	orrs	r2, r1
 800a714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a71a:	f003 0320 	and.w	r3, r3, #32
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00a      	beq.n	800a738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	430a      	orrs	r2, r1
 800a736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a73c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a740:	2b00      	cmp	r3, #0
 800a742:	d01a      	beq.n	800a77a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	430a      	orrs	r2, r1
 800a758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a75e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a762:	d10a      	bne.n	800a77a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	430a      	orrs	r2, r1
 800a778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a77e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00a      	beq.n	800a79c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	430a      	orrs	r2, r1
 800a79a:	605a      	str	r2, [r3, #4]
  }
}
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b086      	sub	sp, #24
 800a7ac:	af02      	add	r7, sp, #8
 800a7ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a7b8:	f7fa f97e 	bl	8004ab8 <HAL_GetTick>
 800a7bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 0308 	and.w	r3, r3, #8
 800a7c8:	2b08      	cmp	r3, #8
 800a7ca:	d10e      	bne.n	800a7ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 f82c 	bl	800a838 <UART_WaitOnFlagUntilTimeout>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d001      	beq.n	800a7ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7e6:	2303      	movs	r3, #3
 800a7e8:	e022      	b.n	800a830 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 0304 	and.w	r3, r3, #4
 800a7f4:	2b04      	cmp	r3, #4
 800a7f6:	d10e      	bne.n	800a816 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2200      	movs	r2, #0
 800a802:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 f816 	bl	800a838 <UART_WaitOnFlagUntilTimeout>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d001      	beq.n	800a816 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a812:	2303      	movs	r3, #3
 800a814:	e00c      	b.n	800a830 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2220      	movs	r2, #32
 800a81a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2220      	movs	r2, #32
 800a822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3710      	adds	r7, #16
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	603b      	str	r3, [r7, #0]
 800a844:	4613      	mov	r3, r2
 800a846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a848:	e062      	b.n	800a910 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a850:	d05e      	beq.n	800a910 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a852:	f7fa f931 	bl	8004ab8 <HAL_GetTick>
 800a856:	4602      	mov	r2, r0
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	1ad3      	subs	r3, r2, r3
 800a85c:	69ba      	ldr	r2, [r7, #24]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d302      	bcc.n	800a868 <UART_WaitOnFlagUntilTimeout+0x30>
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d11d      	bne.n	800a8a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a876:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	689a      	ldr	r2, [r3, #8]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f022 0201 	bic.w	r2, r2, #1
 800a886:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2220      	movs	r2, #32
 800a88c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2220      	movs	r2, #32
 800a894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	e045      	b.n	800a930 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f003 0304 	and.w	r3, r3, #4
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d02e      	beq.n	800a910 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	69db      	ldr	r3, [r3, #28]
 800a8b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8c0:	d126      	bne.n	800a910 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8ca:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a8da:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	689a      	ldr	r2, [r3, #8]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f022 0201 	bic.w	r2, r2, #1
 800a8ea:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2220      	movs	r2, #32
 800a8f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2220      	movs	r2, #32
 800a8f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2220      	movs	r2, #32
 800a900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800a90c:	2303      	movs	r3, #3
 800a90e:	e00f      	b.n	800a930 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	69da      	ldr	r2, [r3, #28]
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	4013      	ands	r3, r2
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	bf0c      	ite	eq
 800a920:	2301      	moveq	r3, #1
 800a922:	2300      	movne	r3, #0
 800a924:	b2db      	uxtb	r3, r3
 800a926:	461a      	mov	r2, r3
 800a928:	79fb      	ldrb	r3, [r7, #7]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d08d      	beq.n	800a84a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a946:	2b01      	cmp	r3, #1
 800a948:	d101      	bne.n	800a94e <HAL_UARTEx_DisableFifoMode+0x16>
 800a94a:	2302      	movs	r3, #2
 800a94c:	e027      	b.n	800a99e <HAL_UARTEx_DisableFifoMode+0x66>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2201      	movs	r2, #1
 800a952:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2224      	movs	r2, #36	; 0x24
 800a95a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f022 0201 	bic.w	r2, r2, #1
 800a974:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a97c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2220      	movs	r2, #32
 800a990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3714      	adds	r7, #20
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b084      	sub	sp, #16
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d101      	bne.n	800a9c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a9be:	2302      	movs	r3, #2
 800a9c0:	e02d      	b.n	800aa1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2224      	movs	r2, #36	; 0x24
 800a9ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f022 0201 	bic.w	r2, r2, #1
 800a9e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	683a      	ldr	r2, [r7, #0]
 800a9fa:	430a      	orrs	r2, r1
 800a9fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 f850 	bl	800aaa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2220      	movs	r2, #32
 800aa10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b084      	sub	sp, #16
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d101      	bne.n	800aa3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa3a:	2302      	movs	r3, #2
 800aa3c:	e02d      	b.n	800aa9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2201      	movs	r2, #1
 800aa42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2224      	movs	r2, #36	; 0x24
 800aa4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f022 0201 	bic.w	r2, r2, #1
 800aa64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	683a      	ldr	r2, [r7, #0]
 800aa76:	430a      	orrs	r2, r1
 800aa78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 f812 	bl	800aaa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2220      	movs	r2, #32
 800aa8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aa98:	2300      	movs	r3, #0
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
	...

0800aaa4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b089      	sub	sp, #36	; 0x24
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800aaac:	4a2f      	ldr	r2, [pc, #188]	; (800ab6c <UARTEx_SetNbDataToProcess+0xc8>)
 800aaae:	f107 0314 	add.w	r3, r7, #20
 800aab2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aab6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800aaba:	4a2d      	ldr	r2, [pc, #180]	; (800ab70 <UARTEx_SetNbDataToProcess+0xcc>)
 800aabc:	f107 030c 	add.w	r3, r7, #12
 800aac0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aac4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d108      	bne.n	800aae2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aae0:	e03d      	b.n	800ab5e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aae2:	2308      	movs	r3, #8
 800aae4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aae6:	2308      	movs	r3, #8
 800aae8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	0e5b      	lsrs	r3, r3, #25
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	f003 0307 	and.w	r3, r3, #7
 800aaf8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	0f5b      	lsrs	r3, r3, #29
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	f003 0307 	and.w	r3, r3, #7
 800ab08:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ab0a:	7fbb      	ldrb	r3, [r7, #30]
 800ab0c:	7f3a      	ldrb	r2, [r7, #28]
 800ab0e:	f107 0120 	add.w	r1, r7, #32
 800ab12:	440a      	add	r2, r1
 800ab14:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ab18:	fb02 f303 	mul.w	r3, r2, r3
 800ab1c:	7f3a      	ldrb	r2, [r7, #28]
 800ab1e:	f107 0120 	add.w	r1, r7, #32
 800ab22:	440a      	add	r2, r1
 800ab24:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ab28:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab2c:	b29a      	uxth	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ab34:	7ffb      	ldrb	r3, [r7, #31]
 800ab36:	7f7a      	ldrb	r2, [r7, #29]
 800ab38:	f107 0120 	add.w	r1, r7, #32
 800ab3c:	440a      	add	r2, r1
 800ab3e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ab42:	fb02 f303 	mul.w	r3, r2, r3
 800ab46:	7f7a      	ldrb	r2, [r7, #29]
 800ab48:	f107 0120 	add.w	r1, r7, #32
 800ab4c:	440a      	add	r2, r1
 800ab4e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ab52:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab56:	b29a      	uxth	r2, r3
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ab5e:	bf00      	nop
 800ab60:	3724      	adds	r7, #36	; 0x24
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	0800d268 	.word	0x0800d268
 800ab70:	0800d270 	.word	0x0800d270

0800ab74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ab74:	b084      	sub	sp, #16
 800ab76:	b580      	push	{r7, lr}
 800ab78:	b084      	sub	sp, #16
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
 800ab7e:	f107 001c 	add.w	r0, r7, #28
 800ab82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d120      	bne.n	800abce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	68da      	ldr	r2, [r3, #12]
 800ab9c:	4b25      	ldr	r3, [pc, #148]	; (800ac34 <USB_CoreInit+0xc0>)
 800ab9e:	4013      	ands	r3, r2
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800abb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d105      	bne.n	800abc2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fa4c 	bl	800b060 <USB_CoreReset>
 800abc8:	4603      	mov	r3, r0
 800abca:	73fb      	strb	r3, [r7, #15]
 800abcc:	e01a      	b.n	800ac04 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 fa40 	bl	800b060 <USB_CoreReset>
 800abe0:	4603      	mov	r3, r0
 800abe2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800abe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d106      	bne.n	800abf8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	639a      	str	r2, [r3, #56]	; 0x38
 800abf6:	e005      	b.n	800ac04 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ac04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d10b      	bne.n	800ac22 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	f043 0206 	orr.w	r2, r3, #6
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	f043 0220 	orr.w	r2, r3, #32
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ac22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3710      	adds	r7, #16
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac2e:	b004      	add	sp, #16
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	ffbdffbf 	.word	0xffbdffbf

0800ac38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	f023 0201 	bic.w	r2, r3, #1
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b082      	sub	sp, #8
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	460b      	mov	r3, r1
 800ac64:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ac72:	78fb      	ldrb	r3, [r7, #3]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d106      	bne.n	800ac86 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	60da      	str	r2, [r3, #12]
 800ac84:	e00b      	b.n	800ac9e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ac86:	78fb      	ldrb	r3, [r7, #3]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d106      	bne.n	800ac9a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	60da      	str	r2, [r3, #12]
 800ac98:	e001      	b.n	800ac9e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e003      	b.n	800aca6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ac9e:	2032      	movs	r0, #50	; 0x32
 800aca0:	f7f9 ff16 	bl	8004ad0 <HAL_Delay>

  return HAL_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
	...

0800acb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800acb0:	b084      	sub	sp, #16
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b086      	sub	sp, #24
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800acbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800acc2:	2300      	movs	r3, #0
 800acc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800acca:	2300      	movs	r3, #0
 800accc:	613b      	str	r3, [r7, #16]
 800acce:	e009      	b.n	800ace4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	3340      	adds	r3, #64	; 0x40
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	4413      	add	r3, r2
 800acda:	2200      	movs	r2, #0
 800acdc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	3301      	adds	r3, #1
 800ace2:	613b      	str	r3, [r7, #16]
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	2b0e      	cmp	r3, #14
 800ace8:	d9f2      	bls.n	800acd0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800acea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acec:	2b00      	cmp	r3, #0
 800acee:	d11c      	bne.n	800ad2a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acfe:	f043 0302 	orr.w	r3, r3, #2
 800ad02:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad08:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	601a      	str	r2, [r3, #0]
 800ad28:	e005      	b.n	800ad36 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	2300      	movs	r3, #0
 800ad40:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad48:	4619      	mov	r1, r3
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad50:	461a      	mov	r2, r3
 800ad52:	680b      	ldr	r3, [r1, #0]
 800ad54:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ad56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d10c      	bne.n	800ad76 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ad5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d104      	bne.n	800ad6c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ad62:	2100      	movs	r1, #0
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 f949 	bl	800affc <USB_SetDevSpeed>
 800ad6a:	e008      	b.n	800ad7e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ad6c:	2101      	movs	r1, #1
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 f944 	bl	800affc <USB_SetDevSpeed>
 800ad74:	e003      	b.n	800ad7e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ad76:	2103      	movs	r1, #3
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 f93f 	bl	800affc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ad7e:	2110      	movs	r1, #16
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f8f3 	bl	800af6c <USB_FlushTxFifo>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d001      	beq.n	800ad90 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 f911 	bl	800afb8 <USB_FlushRxFifo>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d001      	beq.n	800ada0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ada6:	461a      	mov	r2, r3
 800ada8:	2300      	movs	r3, #0
 800adaa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adb2:	461a      	mov	r2, r3
 800adb4:	2300      	movs	r3, #0
 800adb6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adbe:	461a      	mov	r2, r3
 800adc0:	2300      	movs	r3, #0
 800adc2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adc4:	2300      	movs	r3, #0
 800adc6:	613b      	str	r3, [r7, #16]
 800adc8:	e043      	b.n	800ae52 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	015a      	lsls	r2, r3, #5
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	4413      	add	r3, r2
 800add2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800addc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ade0:	d118      	bne.n	800ae14 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10a      	bne.n	800adfe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	015a      	lsls	r2, r3, #5
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	4413      	add	r3, r2
 800adf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf4:	461a      	mov	r2, r3
 800adf6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800adfa:	6013      	str	r3, [r2, #0]
 800adfc:	e013      	b.n	800ae26 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	015a      	lsls	r2, r3, #5
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	4413      	add	r3, r2
 800ae06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ae10:	6013      	str	r3, [r2, #0]
 800ae12:	e008      	b.n	800ae26 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	015a      	lsls	r2, r3, #5
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae20:	461a      	mov	r2, r3
 800ae22:	2300      	movs	r3, #0
 800ae24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	015a      	lsls	r2, r3, #5
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae32:	461a      	mov	r2, r3
 800ae34:	2300      	movs	r3, #0
 800ae36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	015a      	lsls	r2, r3, #5
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	4413      	add	r3, r2
 800ae40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae44:	461a      	mov	r2, r3
 800ae46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ae4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	3301      	adds	r3, #1
 800ae50:	613b      	str	r3, [r7, #16]
 800ae52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae54:	693a      	ldr	r2, [r7, #16]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d3b7      	bcc.n	800adca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	613b      	str	r3, [r7, #16]
 800ae5e:	e043      	b.n	800aee8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	015a      	lsls	r2, r3, #5
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	4413      	add	r3, r2
 800ae68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae76:	d118      	bne.n	800aeaa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d10a      	bne.n	800ae94 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	015a      	lsls	r2, r3, #5
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	4413      	add	r3, r2
 800ae86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae90:	6013      	str	r3, [r2, #0]
 800ae92:	e013      	b.n	800aebc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	015a      	lsls	r2, r3, #5
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea0:	461a      	mov	r2, r3
 800aea2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aea6:	6013      	str	r3, [r2, #0]
 800aea8:	e008      	b.n	800aebc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	015a      	lsls	r2, r3, #5
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	2300      	movs	r3, #0
 800aeba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	015a      	lsls	r2, r3, #5
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	4413      	add	r3, r2
 800aec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec8:	461a      	mov	r2, r3
 800aeca:	2300      	movs	r3, #0
 800aecc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	015a      	lsls	r2, r3, #5
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	4413      	add	r3, r2
 800aed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeda:	461a      	mov	r2, r3
 800aedc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aee0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	3301      	adds	r3, #1
 800aee6:	613b      	str	r3, [r7, #16]
 800aee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeea:	693a      	ldr	r2, [r7, #16]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d3b7      	bcc.n	800ae60 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aefe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800af10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800af12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af14:	2b00      	cmp	r3, #0
 800af16:	d105      	bne.n	800af24 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	699b      	ldr	r3, [r3, #24]
 800af1c:	f043 0210 	orr.w	r2, r3, #16
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	699a      	ldr	r2, [r3, #24]
 800af28:	4b0e      	ldr	r3, [pc, #56]	; (800af64 <USB_DevInit+0x2b4>)
 800af2a:	4313      	orrs	r3, r2
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800af30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af32:	2b00      	cmp	r3, #0
 800af34:	d005      	beq.n	800af42 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	699b      	ldr	r3, [r3, #24]
 800af3a:	f043 0208 	orr.w	r2, r3, #8
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800af42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af44:	2b01      	cmp	r3, #1
 800af46:	d105      	bne.n	800af54 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	699a      	ldr	r2, [r3, #24]
 800af4c:	4b06      	ldr	r3, [pc, #24]	; (800af68 <USB_DevInit+0x2b8>)
 800af4e:	4313      	orrs	r3, r2
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800af54:	7dfb      	ldrb	r3, [r7, #23]
}
 800af56:	4618      	mov	r0, r3
 800af58:	3718      	adds	r7, #24
 800af5a:	46bd      	mov	sp, r7
 800af5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af60:	b004      	add	sp, #16
 800af62:	4770      	bx	lr
 800af64:	803c3800 	.word	0x803c3800
 800af68:	40000004 	.word	0x40000004

0800af6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800af76:	2300      	movs	r3, #0
 800af78:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	019b      	lsls	r3, r3, #6
 800af7e:	f043 0220 	orr.w	r2, r3, #32
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	3301      	adds	r3, #1
 800af8a:	60fb      	str	r3, [r7, #12]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	4a09      	ldr	r2, [pc, #36]	; (800afb4 <USB_FlushTxFifo+0x48>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d901      	bls.n	800af98 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800af94:	2303      	movs	r3, #3
 800af96:	e006      	b.n	800afa6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	691b      	ldr	r3, [r3, #16]
 800af9c:	f003 0320 	and.w	r3, r3, #32
 800afa0:	2b20      	cmp	r3, #32
 800afa2:	d0f0      	beq.n	800af86 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3714      	adds	r7, #20
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	00030d40 	.word	0x00030d40

0800afb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800afc0:	2300      	movs	r3, #0
 800afc2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2210      	movs	r2, #16
 800afc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	3301      	adds	r3, #1
 800afce:	60fb      	str	r3, [r7, #12]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	4a09      	ldr	r2, [pc, #36]	; (800aff8 <USB_FlushRxFifo+0x40>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d901      	bls.n	800afdc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800afd8:	2303      	movs	r3, #3
 800afda:	e006      	b.n	800afea <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	f003 0310 	and.w	r3, r3, #16
 800afe4:	2b10      	cmp	r3, #16
 800afe6:	d0f0      	beq.n	800afca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3714      	adds	r7, #20
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	00030d40 	.word	0x00030d40

0800affc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800affc:	b480      	push	{r7}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	460b      	mov	r3, r1
 800b006:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	78fb      	ldrb	r3, [r7, #3]
 800b016:	68f9      	ldr	r1, [r7, #12]
 800b018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b01c:	4313      	orrs	r3, r2
 800b01e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b020:	2300      	movs	r3, #0
}
 800b022:	4618      	mov	r0, r3
 800b024:	3714      	adds	r7, #20
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr

0800b02e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b084      	sub	sp, #16
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b048:	f043 0302 	orr.w	r3, r3, #2
 800b04c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b04e:	2003      	movs	r0, #3
 800b050:	f7f9 fd3e 	bl	8004ad0 <HAL_Delay>

  return HAL_OK;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
	...

0800b060 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b060:	b480      	push	{r7}
 800b062:	b085      	sub	sp, #20
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b068:	2300      	movs	r3, #0
 800b06a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	3301      	adds	r3, #1
 800b070:	60fb      	str	r3, [r7, #12]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	4a13      	ldr	r2, [pc, #76]	; (800b0c4 <USB_CoreReset+0x64>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d901      	bls.n	800b07e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b07a:	2303      	movs	r3, #3
 800b07c:	e01b      	b.n	800b0b6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	2b00      	cmp	r3, #0
 800b084:	daf2      	bge.n	800b06c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b086:	2300      	movs	r3, #0
 800b088:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	f043 0201 	orr.w	r2, r3, #1
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	3301      	adds	r3, #1
 800b09a:	60fb      	str	r3, [r7, #12]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	4a09      	ldr	r2, [pc, #36]	; (800b0c4 <USB_CoreReset+0x64>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d901      	bls.n	800b0a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	e006      	b.n	800b0b6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	f003 0301 	and.w	r3, r3, #1
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d0f0      	beq.n	800b096 <USB_CoreReset+0x36>

  return HAL_OK;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3714      	adds	r7, #20
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	00030d40 	.word	0x00030d40

0800b0c8 <__errno>:
 800b0c8:	4b01      	ldr	r3, [pc, #4]	; (800b0d0 <__errno+0x8>)
 800b0ca:	6818      	ldr	r0, [r3, #0]
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	20000010 	.word	0x20000010

0800b0d4 <__libc_init_array>:
 800b0d4:	b570      	push	{r4, r5, r6, lr}
 800b0d6:	4e0d      	ldr	r6, [pc, #52]	; (800b10c <__libc_init_array+0x38>)
 800b0d8:	4c0d      	ldr	r4, [pc, #52]	; (800b110 <__libc_init_array+0x3c>)
 800b0da:	1ba4      	subs	r4, r4, r6
 800b0dc:	10a4      	asrs	r4, r4, #2
 800b0de:	2500      	movs	r5, #0
 800b0e0:	42a5      	cmp	r5, r4
 800b0e2:	d109      	bne.n	800b0f8 <__libc_init_array+0x24>
 800b0e4:	4e0b      	ldr	r6, [pc, #44]	; (800b114 <__libc_init_array+0x40>)
 800b0e6:	4c0c      	ldr	r4, [pc, #48]	; (800b118 <__libc_init_array+0x44>)
 800b0e8:	f002 f830 	bl	800d14c <_init>
 800b0ec:	1ba4      	subs	r4, r4, r6
 800b0ee:	10a4      	asrs	r4, r4, #2
 800b0f0:	2500      	movs	r5, #0
 800b0f2:	42a5      	cmp	r5, r4
 800b0f4:	d105      	bne.n	800b102 <__libc_init_array+0x2e>
 800b0f6:	bd70      	pop	{r4, r5, r6, pc}
 800b0f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b0fc:	4798      	blx	r3
 800b0fe:	3501      	adds	r5, #1
 800b100:	e7ee      	b.n	800b0e0 <__libc_init_array+0xc>
 800b102:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b106:	4798      	blx	r3
 800b108:	3501      	adds	r5, #1
 800b10a:	e7f2      	b.n	800b0f2 <__libc_init_array+0x1e>
 800b10c:	08010318 	.word	0x08010318
 800b110:	08010318 	.word	0x08010318
 800b114:	08010318 	.word	0x08010318
 800b118:	0801031c 	.word	0x0801031c

0800b11c <malloc>:
 800b11c:	4b02      	ldr	r3, [pc, #8]	; (800b128 <malloc+0xc>)
 800b11e:	4601      	mov	r1, r0
 800b120:	6818      	ldr	r0, [r3, #0]
 800b122:	f000 b885 	b.w	800b230 <_malloc_r>
 800b126:	bf00      	nop
 800b128:	20000010 	.word	0x20000010

0800b12c <free>:
 800b12c:	4b02      	ldr	r3, [pc, #8]	; (800b138 <free+0xc>)
 800b12e:	4601      	mov	r1, r0
 800b130:	6818      	ldr	r0, [r3, #0]
 800b132:	f000 b82f 	b.w	800b194 <_free_r>
 800b136:	bf00      	nop
 800b138:	20000010 	.word	0x20000010

0800b13c <memcpy>:
 800b13c:	b510      	push	{r4, lr}
 800b13e:	1e43      	subs	r3, r0, #1
 800b140:	440a      	add	r2, r1
 800b142:	4291      	cmp	r1, r2
 800b144:	d100      	bne.n	800b148 <memcpy+0xc>
 800b146:	bd10      	pop	{r4, pc}
 800b148:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b14c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b150:	e7f7      	b.n	800b142 <memcpy+0x6>

0800b152 <memmove>:
 800b152:	4288      	cmp	r0, r1
 800b154:	b510      	push	{r4, lr}
 800b156:	eb01 0302 	add.w	r3, r1, r2
 800b15a:	d807      	bhi.n	800b16c <memmove+0x1a>
 800b15c:	1e42      	subs	r2, r0, #1
 800b15e:	4299      	cmp	r1, r3
 800b160:	d00a      	beq.n	800b178 <memmove+0x26>
 800b162:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b166:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b16a:	e7f8      	b.n	800b15e <memmove+0xc>
 800b16c:	4283      	cmp	r3, r0
 800b16e:	d9f5      	bls.n	800b15c <memmove+0xa>
 800b170:	1881      	adds	r1, r0, r2
 800b172:	1ad2      	subs	r2, r2, r3
 800b174:	42d3      	cmn	r3, r2
 800b176:	d100      	bne.n	800b17a <memmove+0x28>
 800b178:	bd10      	pop	{r4, pc}
 800b17a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b17e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b182:	e7f7      	b.n	800b174 <memmove+0x22>

0800b184 <memset>:
 800b184:	4402      	add	r2, r0
 800b186:	4603      	mov	r3, r0
 800b188:	4293      	cmp	r3, r2
 800b18a:	d100      	bne.n	800b18e <memset+0xa>
 800b18c:	4770      	bx	lr
 800b18e:	f803 1b01 	strb.w	r1, [r3], #1
 800b192:	e7f9      	b.n	800b188 <memset+0x4>

0800b194 <_free_r>:
 800b194:	b538      	push	{r3, r4, r5, lr}
 800b196:	4605      	mov	r5, r0
 800b198:	2900      	cmp	r1, #0
 800b19a:	d045      	beq.n	800b228 <_free_r+0x94>
 800b19c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1a0:	1f0c      	subs	r4, r1, #4
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	bfb8      	it	lt
 800b1a6:	18e4      	addlt	r4, r4, r3
 800b1a8:	f001 faec 	bl	800c784 <__malloc_lock>
 800b1ac:	4a1f      	ldr	r2, [pc, #124]	; (800b22c <_free_r+0x98>)
 800b1ae:	6813      	ldr	r3, [r2, #0]
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	b933      	cbnz	r3, 800b1c2 <_free_r+0x2e>
 800b1b4:	6063      	str	r3, [r4, #4]
 800b1b6:	6014      	str	r4, [r2, #0]
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1be:	f001 bae2 	b.w	800c786 <__malloc_unlock>
 800b1c2:	42a3      	cmp	r3, r4
 800b1c4:	d90c      	bls.n	800b1e0 <_free_r+0x4c>
 800b1c6:	6821      	ldr	r1, [r4, #0]
 800b1c8:	1862      	adds	r2, r4, r1
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	bf04      	itt	eq
 800b1ce:	681a      	ldreq	r2, [r3, #0]
 800b1d0:	685b      	ldreq	r3, [r3, #4]
 800b1d2:	6063      	str	r3, [r4, #4]
 800b1d4:	bf04      	itt	eq
 800b1d6:	1852      	addeq	r2, r2, r1
 800b1d8:	6022      	streq	r2, [r4, #0]
 800b1da:	6004      	str	r4, [r0, #0]
 800b1dc:	e7ec      	b.n	800b1b8 <_free_r+0x24>
 800b1de:	4613      	mov	r3, r2
 800b1e0:	685a      	ldr	r2, [r3, #4]
 800b1e2:	b10a      	cbz	r2, 800b1e8 <_free_r+0x54>
 800b1e4:	42a2      	cmp	r2, r4
 800b1e6:	d9fa      	bls.n	800b1de <_free_r+0x4a>
 800b1e8:	6819      	ldr	r1, [r3, #0]
 800b1ea:	1858      	adds	r0, r3, r1
 800b1ec:	42a0      	cmp	r0, r4
 800b1ee:	d10b      	bne.n	800b208 <_free_r+0x74>
 800b1f0:	6820      	ldr	r0, [r4, #0]
 800b1f2:	4401      	add	r1, r0
 800b1f4:	1858      	adds	r0, r3, r1
 800b1f6:	4282      	cmp	r2, r0
 800b1f8:	6019      	str	r1, [r3, #0]
 800b1fa:	d1dd      	bne.n	800b1b8 <_free_r+0x24>
 800b1fc:	6810      	ldr	r0, [r2, #0]
 800b1fe:	6852      	ldr	r2, [r2, #4]
 800b200:	605a      	str	r2, [r3, #4]
 800b202:	4401      	add	r1, r0
 800b204:	6019      	str	r1, [r3, #0]
 800b206:	e7d7      	b.n	800b1b8 <_free_r+0x24>
 800b208:	d902      	bls.n	800b210 <_free_r+0x7c>
 800b20a:	230c      	movs	r3, #12
 800b20c:	602b      	str	r3, [r5, #0]
 800b20e:	e7d3      	b.n	800b1b8 <_free_r+0x24>
 800b210:	6820      	ldr	r0, [r4, #0]
 800b212:	1821      	adds	r1, r4, r0
 800b214:	428a      	cmp	r2, r1
 800b216:	bf04      	itt	eq
 800b218:	6811      	ldreq	r1, [r2, #0]
 800b21a:	6852      	ldreq	r2, [r2, #4]
 800b21c:	6062      	str	r2, [r4, #4]
 800b21e:	bf04      	itt	eq
 800b220:	1809      	addeq	r1, r1, r0
 800b222:	6021      	streq	r1, [r4, #0]
 800b224:	605c      	str	r4, [r3, #4]
 800b226:	e7c7      	b.n	800b1b8 <_free_r+0x24>
 800b228:	bd38      	pop	{r3, r4, r5, pc}
 800b22a:	bf00      	nop
 800b22c:	20000204 	.word	0x20000204

0800b230 <_malloc_r>:
 800b230:	b570      	push	{r4, r5, r6, lr}
 800b232:	1ccd      	adds	r5, r1, #3
 800b234:	f025 0503 	bic.w	r5, r5, #3
 800b238:	3508      	adds	r5, #8
 800b23a:	2d0c      	cmp	r5, #12
 800b23c:	bf38      	it	cc
 800b23e:	250c      	movcc	r5, #12
 800b240:	2d00      	cmp	r5, #0
 800b242:	4606      	mov	r6, r0
 800b244:	db01      	blt.n	800b24a <_malloc_r+0x1a>
 800b246:	42a9      	cmp	r1, r5
 800b248:	d903      	bls.n	800b252 <_malloc_r+0x22>
 800b24a:	230c      	movs	r3, #12
 800b24c:	6033      	str	r3, [r6, #0]
 800b24e:	2000      	movs	r0, #0
 800b250:	bd70      	pop	{r4, r5, r6, pc}
 800b252:	f001 fa97 	bl	800c784 <__malloc_lock>
 800b256:	4a21      	ldr	r2, [pc, #132]	; (800b2dc <_malloc_r+0xac>)
 800b258:	6814      	ldr	r4, [r2, #0]
 800b25a:	4621      	mov	r1, r4
 800b25c:	b991      	cbnz	r1, 800b284 <_malloc_r+0x54>
 800b25e:	4c20      	ldr	r4, [pc, #128]	; (800b2e0 <_malloc_r+0xb0>)
 800b260:	6823      	ldr	r3, [r4, #0]
 800b262:	b91b      	cbnz	r3, 800b26c <_malloc_r+0x3c>
 800b264:	4630      	mov	r0, r6
 800b266:	f000 fc77 	bl	800bb58 <_sbrk_r>
 800b26a:	6020      	str	r0, [r4, #0]
 800b26c:	4629      	mov	r1, r5
 800b26e:	4630      	mov	r0, r6
 800b270:	f000 fc72 	bl	800bb58 <_sbrk_r>
 800b274:	1c43      	adds	r3, r0, #1
 800b276:	d124      	bne.n	800b2c2 <_malloc_r+0x92>
 800b278:	230c      	movs	r3, #12
 800b27a:	6033      	str	r3, [r6, #0]
 800b27c:	4630      	mov	r0, r6
 800b27e:	f001 fa82 	bl	800c786 <__malloc_unlock>
 800b282:	e7e4      	b.n	800b24e <_malloc_r+0x1e>
 800b284:	680b      	ldr	r3, [r1, #0]
 800b286:	1b5b      	subs	r3, r3, r5
 800b288:	d418      	bmi.n	800b2bc <_malloc_r+0x8c>
 800b28a:	2b0b      	cmp	r3, #11
 800b28c:	d90f      	bls.n	800b2ae <_malloc_r+0x7e>
 800b28e:	600b      	str	r3, [r1, #0]
 800b290:	50cd      	str	r5, [r1, r3]
 800b292:	18cc      	adds	r4, r1, r3
 800b294:	4630      	mov	r0, r6
 800b296:	f001 fa76 	bl	800c786 <__malloc_unlock>
 800b29a:	f104 000b 	add.w	r0, r4, #11
 800b29e:	1d23      	adds	r3, r4, #4
 800b2a0:	f020 0007 	bic.w	r0, r0, #7
 800b2a4:	1ac3      	subs	r3, r0, r3
 800b2a6:	d0d3      	beq.n	800b250 <_malloc_r+0x20>
 800b2a8:	425a      	negs	r2, r3
 800b2aa:	50e2      	str	r2, [r4, r3]
 800b2ac:	e7d0      	b.n	800b250 <_malloc_r+0x20>
 800b2ae:	428c      	cmp	r4, r1
 800b2b0:	684b      	ldr	r3, [r1, #4]
 800b2b2:	bf16      	itet	ne
 800b2b4:	6063      	strne	r3, [r4, #4]
 800b2b6:	6013      	streq	r3, [r2, #0]
 800b2b8:	460c      	movne	r4, r1
 800b2ba:	e7eb      	b.n	800b294 <_malloc_r+0x64>
 800b2bc:	460c      	mov	r4, r1
 800b2be:	6849      	ldr	r1, [r1, #4]
 800b2c0:	e7cc      	b.n	800b25c <_malloc_r+0x2c>
 800b2c2:	1cc4      	adds	r4, r0, #3
 800b2c4:	f024 0403 	bic.w	r4, r4, #3
 800b2c8:	42a0      	cmp	r0, r4
 800b2ca:	d005      	beq.n	800b2d8 <_malloc_r+0xa8>
 800b2cc:	1a21      	subs	r1, r4, r0
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	f000 fc42 	bl	800bb58 <_sbrk_r>
 800b2d4:	3001      	adds	r0, #1
 800b2d6:	d0cf      	beq.n	800b278 <_malloc_r+0x48>
 800b2d8:	6025      	str	r5, [r4, #0]
 800b2da:	e7db      	b.n	800b294 <_malloc_r+0x64>
 800b2dc:	20000204 	.word	0x20000204
 800b2e0:	20000208 	.word	0x20000208

0800b2e4 <__cvt>:
 800b2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2e6:	ed2d 8b02 	vpush	{d8}
 800b2ea:	eeb0 8b40 	vmov.f64	d8, d0
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	4617      	mov	r7, r2
 800b2f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b2f4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b2f6:	ee18 2a90 	vmov	r2, s17
 800b2fa:	f025 0520 	bic.w	r5, r5, #32
 800b2fe:	2a00      	cmp	r2, #0
 800b300:	bfb6      	itet	lt
 800b302:	222d      	movlt	r2, #45	; 0x2d
 800b304:	2200      	movge	r2, #0
 800b306:	eeb1 8b40 	vneglt.f64	d8, d0
 800b30a:	2d46      	cmp	r5, #70	; 0x46
 800b30c:	460c      	mov	r4, r1
 800b30e:	701a      	strb	r2, [r3, #0]
 800b310:	d004      	beq.n	800b31c <__cvt+0x38>
 800b312:	2d45      	cmp	r5, #69	; 0x45
 800b314:	d100      	bne.n	800b318 <__cvt+0x34>
 800b316:	3401      	adds	r4, #1
 800b318:	2102      	movs	r1, #2
 800b31a:	e000      	b.n	800b31e <__cvt+0x3a>
 800b31c:	2103      	movs	r1, #3
 800b31e:	ab03      	add	r3, sp, #12
 800b320:	9301      	str	r3, [sp, #4]
 800b322:	ab02      	add	r3, sp, #8
 800b324:	9300      	str	r3, [sp, #0]
 800b326:	4622      	mov	r2, r4
 800b328:	4633      	mov	r3, r6
 800b32a:	eeb0 0b48 	vmov.f64	d0, d8
 800b32e:	f000 fccf 	bl	800bcd0 <_dtoa_r>
 800b332:	2d47      	cmp	r5, #71	; 0x47
 800b334:	d101      	bne.n	800b33a <__cvt+0x56>
 800b336:	07fb      	lsls	r3, r7, #31
 800b338:	d51e      	bpl.n	800b378 <__cvt+0x94>
 800b33a:	2d46      	cmp	r5, #70	; 0x46
 800b33c:	eb00 0304 	add.w	r3, r0, r4
 800b340:	d10c      	bne.n	800b35c <__cvt+0x78>
 800b342:	7802      	ldrb	r2, [r0, #0]
 800b344:	2a30      	cmp	r2, #48	; 0x30
 800b346:	d107      	bne.n	800b358 <__cvt+0x74>
 800b348:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b350:	bf1c      	itt	ne
 800b352:	f1c4 0401 	rsbne	r4, r4, #1
 800b356:	6034      	strne	r4, [r6, #0]
 800b358:	6832      	ldr	r2, [r6, #0]
 800b35a:	4413      	add	r3, r2
 800b35c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b364:	d007      	beq.n	800b376 <__cvt+0x92>
 800b366:	2130      	movs	r1, #48	; 0x30
 800b368:	9a03      	ldr	r2, [sp, #12]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d204      	bcs.n	800b378 <__cvt+0x94>
 800b36e:	1c54      	adds	r4, r2, #1
 800b370:	9403      	str	r4, [sp, #12]
 800b372:	7011      	strb	r1, [r2, #0]
 800b374:	e7f8      	b.n	800b368 <__cvt+0x84>
 800b376:	9303      	str	r3, [sp, #12]
 800b378:	9b03      	ldr	r3, [sp, #12]
 800b37a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b37c:	1a1b      	subs	r3, r3, r0
 800b37e:	6013      	str	r3, [r2, #0]
 800b380:	b005      	add	sp, #20
 800b382:	ecbd 8b02 	vpop	{d8}
 800b386:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b388 <__exponent>:
 800b388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b38a:	2900      	cmp	r1, #0
 800b38c:	4604      	mov	r4, r0
 800b38e:	bfba      	itte	lt
 800b390:	4249      	neglt	r1, r1
 800b392:	232d      	movlt	r3, #45	; 0x2d
 800b394:	232b      	movge	r3, #43	; 0x2b
 800b396:	2909      	cmp	r1, #9
 800b398:	f804 2b02 	strb.w	r2, [r4], #2
 800b39c:	7043      	strb	r3, [r0, #1]
 800b39e:	dd20      	ble.n	800b3e2 <__exponent+0x5a>
 800b3a0:	f10d 0307 	add.w	r3, sp, #7
 800b3a4:	461f      	mov	r7, r3
 800b3a6:	260a      	movs	r6, #10
 800b3a8:	fb91 f5f6 	sdiv	r5, r1, r6
 800b3ac:	fb06 1115 	mls	r1, r6, r5, r1
 800b3b0:	3130      	adds	r1, #48	; 0x30
 800b3b2:	2d09      	cmp	r5, #9
 800b3b4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b3b8:	f103 32ff 	add.w	r2, r3, #4294967295
 800b3bc:	4629      	mov	r1, r5
 800b3be:	dc09      	bgt.n	800b3d4 <__exponent+0x4c>
 800b3c0:	3130      	adds	r1, #48	; 0x30
 800b3c2:	3b02      	subs	r3, #2
 800b3c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b3c8:	42bb      	cmp	r3, r7
 800b3ca:	4622      	mov	r2, r4
 800b3cc:	d304      	bcc.n	800b3d8 <__exponent+0x50>
 800b3ce:	1a10      	subs	r0, r2, r0
 800b3d0:	b003      	add	sp, #12
 800b3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3d4:	4613      	mov	r3, r2
 800b3d6:	e7e7      	b.n	800b3a8 <__exponent+0x20>
 800b3d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3dc:	f804 2b01 	strb.w	r2, [r4], #1
 800b3e0:	e7f2      	b.n	800b3c8 <__exponent+0x40>
 800b3e2:	2330      	movs	r3, #48	; 0x30
 800b3e4:	4419      	add	r1, r3
 800b3e6:	7083      	strb	r3, [r0, #2]
 800b3e8:	1d02      	adds	r2, r0, #4
 800b3ea:	70c1      	strb	r1, [r0, #3]
 800b3ec:	e7ef      	b.n	800b3ce <__exponent+0x46>
	...

0800b3f0 <_printf_float>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	b08d      	sub	sp, #52	; 0x34
 800b3f6:	460c      	mov	r4, r1
 800b3f8:	4616      	mov	r6, r2
 800b3fa:	461f      	mov	r7, r3
 800b3fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b400:	4605      	mov	r5, r0
 800b402:	f001 f9b1 	bl	800c768 <_localeconv_r>
 800b406:	f8d0 b000 	ldr.w	fp, [r0]
 800b40a:	4658      	mov	r0, fp
 800b40c:	f7f4 ffc8 	bl	80003a0 <strlen>
 800b410:	2300      	movs	r3, #0
 800b412:	930a      	str	r3, [sp, #40]	; 0x28
 800b414:	f8d8 3000 	ldr.w	r3, [r8]
 800b418:	9005      	str	r0, [sp, #20]
 800b41a:	3307      	adds	r3, #7
 800b41c:	f023 0307 	bic.w	r3, r3, #7
 800b420:	f103 0108 	add.w	r1, r3, #8
 800b424:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b428:	6822      	ldr	r2, [r4, #0]
 800b42a:	f8c8 1000 	str.w	r1, [r8]
 800b42e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b432:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b436:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800b6c0 <_printf_float+0x2d0>
 800b43a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b43e:	eeb0 6bc0 	vabs.f64	d6, d0
 800b442:	eeb4 6b47 	vcmp.f64	d6, d7
 800b446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b44a:	dd24      	ble.n	800b496 <_printf_float+0xa6>
 800b44c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b454:	d502      	bpl.n	800b45c <_printf_float+0x6c>
 800b456:	232d      	movs	r3, #45	; 0x2d
 800b458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b45c:	499a      	ldr	r1, [pc, #616]	; (800b6c8 <_printf_float+0x2d8>)
 800b45e:	4b9b      	ldr	r3, [pc, #620]	; (800b6cc <_printf_float+0x2dc>)
 800b460:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b464:	bf8c      	ite	hi
 800b466:	4688      	movhi	r8, r1
 800b468:	4698      	movls	r8, r3
 800b46a:	f022 0204 	bic.w	r2, r2, #4
 800b46e:	2303      	movs	r3, #3
 800b470:	6123      	str	r3, [r4, #16]
 800b472:	6022      	str	r2, [r4, #0]
 800b474:	f04f 0a00 	mov.w	sl, #0
 800b478:	9700      	str	r7, [sp, #0]
 800b47a:	4633      	mov	r3, r6
 800b47c:	aa0b      	add	r2, sp, #44	; 0x2c
 800b47e:	4621      	mov	r1, r4
 800b480:	4628      	mov	r0, r5
 800b482:	f000 f9e1 	bl	800b848 <_printf_common>
 800b486:	3001      	adds	r0, #1
 800b488:	f040 8089 	bne.w	800b59e <_printf_float+0x1ae>
 800b48c:	f04f 30ff 	mov.w	r0, #4294967295
 800b490:	b00d      	add	sp, #52	; 0x34
 800b492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b496:	eeb4 0b40 	vcmp.f64	d0, d0
 800b49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b49e:	d702      	bvc.n	800b4a6 <_printf_float+0xb6>
 800b4a0:	498b      	ldr	r1, [pc, #556]	; (800b6d0 <_printf_float+0x2e0>)
 800b4a2:	4b8c      	ldr	r3, [pc, #560]	; (800b6d4 <_printf_float+0x2e4>)
 800b4a4:	e7dc      	b.n	800b460 <_printf_float+0x70>
 800b4a6:	6861      	ldr	r1, [r4, #4]
 800b4a8:	1c4b      	adds	r3, r1, #1
 800b4aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b4ae:	ab0a      	add	r3, sp, #40	; 0x28
 800b4b0:	a809      	add	r0, sp, #36	; 0x24
 800b4b2:	d13b      	bne.n	800b52c <_printf_float+0x13c>
 800b4b4:	2106      	movs	r1, #6
 800b4b6:	6061      	str	r1, [r4, #4]
 800b4b8:	f04f 0c00 	mov.w	ip, #0
 800b4bc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800b4c0:	e9cd 0900 	strd	r0, r9, [sp]
 800b4c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b4c8:	6022      	str	r2, [r4, #0]
 800b4ca:	6861      	ldr	r1, [r4, #4]
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	f7ff ff09 	bl	800b2e4 <__cvt>
 800b4d2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800b4d6:	2b47      	cmp	r3, #71	; 0x47
 800b4d8:	4680      	mov	r8, r0
 800b4da:	d109      	bne.n	800b4f0 <_printf_float+0x100>
 800b4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4de:	1cd8      	adds	r0, r3, #3
 800b4e0:	db02      	blt.n	800b4e8 <_printf_float+0xf8>
 800b4e2:	6862      	ldr	r2, [r4, #4]
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	dd47      	ble.n	800b578 <_printf_float+0x188>
 800b4e8:	f1a9 0902 	sub.w	r9, r9, #2
 800b4ec:	fa5f f989 	uxtb.w	r9, r9
 800b4f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b4f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4f6:	d824      	bhi.n	800b542 <_printf_float+0x152>
 800b4f8:	3901      	subs	r1, #1
 800b4fa:	464a      	mov	r2, r9
 800b4fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b500:	9109      	str	r1, [sp, #36]	; 0x24
 800b502:	f7ff ff41 	bl	800b388 <__exponent>
 800b506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b508:	1813      	adds	r3, r2, r0
 800b50a:	2a01      	cmp	r2, #1
 800b50c:	4682      	mov	sl, r0
 800b50e:	6123      	str	r3, [r4, #16]
 800b510:	dc02      	bgt.n	800b518 <_printf_float+0x128>
 800b512:	6822      	ldr	r2, [r4, #0]
 800b514:	07d1      	lsls	r1, r2, #31
 800b516:	d501      	bpl.n	800b51c <_printf_float+0x12c>
 800b518:	3301      	adds	r3, #1
 800b51a:	6123      	str	r3, [r4, #16]
 800b51c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b520:	2b00      	cmp	r3, #0
 800b522:	d0a9      	beq.n	800b478 <_printf_float+0x88>
 800b524:	232d      	movs	r3, #45	; 0x2d
 800b526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b52a:	e7a5      	b.n	800b478 <_printf_float+0x88>
 800b52c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800b530:	f000 8178 	beq.w	800b824 <_printf_float+0x434>
 800b534:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b538:	d1be      	bne.n	800b4b8 <_printf_float+0xc8>
 800b53a:	2900      	cmp	r1, #0
 800b53c:	d1bc      	bne.n	800b4b8 <_printf_float+0xc8>
 800b53e:	2101      	movs	r1, #1
 800b540:	e7b9      	b.n	800b4b6 <_printf_float+0xc6>
 800b542:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b546:	d119      	bne.n	800b57c <_printf_float+0x18c>
 800b548:	2900      	cmp	r1, #0
 800b54a:	6863      	ldr	r3, [r4, #4]
 800b54c:	dd0c      	ble.n	800b568 <_printf_float+0x178>
 800b54e:	6121      	str	r1, [r4, #16]
 800b550:	b913      	cbnz	r3, 800b558 <_printf_float+0x168>
 800b552:	6822      	ldr	r2, [r4, #0]
 800b554:	07d2      	lsls	r2, r2, #31
 800b556:	d502      	bpl.n	800b55e <_printf_float+0x16e>
 800b558:	3301      	adds	r3, #1
 800b55a:	440b      	add	r3, r1
 800b55c:	6123      	str	r3, [r4, #16]
 800b55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b560:	65a3      	str	r3, [r4, #88]	; 0x58
 800b562:	f04f 0a00 	mov.w	sl, #0
 800b566:	e7d9      	b.n	800b51c <_printf_float+0x12c>
 800b568:	b913      	cbnz	r3, 800b570 <_printf_float+0x180>
 800b56a:	6822      	ldr	r2, [r4, #0]
 800b56c:	07d0      	lsls	r0, r2, #31
 800b56e:	d501      	bpl.n	800b574 <_printf_float+0x184>
 800b570:	3302      	adds	r3, #2
 800b572:	e7f3      	b.n	800b55c <_printf_float+0x16c>
 800b574:	2301      	movs	r3, #1
 800b576:	e7f1      	b.n	800b55c <_printf_float+0x16c>
 800b578:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b57c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b580:	4293      	cmp	r3, r2
 800b582:	db05      	blt.n	800b590 <_printf_float+0x1a0>
 800b584:	6822      	ldr	r2, [r4, #0]
 800b586:	6123      	str	r3, [r4, #16]
 800b588:	07d1      	lsls	r1, r2, #31
 800b58a:	d5e8      	bpl.n	800b55e <_printf_float+0x16e>
 800b58c:	3301      	adds	r3, #1
 800b58e:	e7e5      	b.n	800b55c <_printf_float+0x16c>
 800b590:	2b00      	cmp	r3, #0
 800b592:	bfd4      	ite	le
 800b594:	f1c3 0302 	rsble	r3, r3, #2
 800b598:	2301      	movgt	r3, #1
 800b59a:	4413      	add	r3, r2
 800b59c:	e7de      	b.n	800b55c <_printf_float+0x16c>
 800b59e:	6823      	ldr	r3, [r4, #0]
 800b5a0:	055a      	lsls	r2, r3, #21
 800b5a2:	d407      	bmi.n	800b5b4 <_printf_float+0x1c4>
 800b5a4:	6923      	ldr	r3, [r4, #16]
 800b5a6:	4642      	mov	r2, r8
 800b5a8:	4631      	mov	r1, r6
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	47b8      	blx	r7
 800b5ae:	3001      	adds	r0, #1
 800b5b0:	d12a      	bne.n	800b608 <_printf_float+0x218>
 800b5b2:	e76b      	b.n	800b48c <_printf_float+0x9c>
 800b5b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b5b8:	f240 80de 	bls.w	800b778 <_printf_float+0x388>
 800b5bc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b5c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c8:	d133      	bne.n	800b632 <_printf_float+0x242>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	4a42      	ldr	r2, [pc, #264]	; (800b6d8 <_printf_float+0x2e8>)
 800b5ce:	4631      	mov	r1, r6
 800b5d0:	4628      	mov	r0, r5
 800b5d2:	47b8      	blx	r7
 800b5d4:	3001      	adds	r0, #1
 800b5d6:	f43f af59 	beq.w	800b48c <_printf_float+0x9c>
 800b5da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	db02      	blt.n	800b5e8 <_printf_float+0x1f8>
 800b5e2:	6823      	ldr	r3, [r4, #0]
 800b5e4:	07d8      	lsls	r0, r3, #31
 800b5e6:	d50f      	bpl.n	800b608 <_printf_float+0x218>
 800b5e8:	9b05      	ldr	r3, [sp, #20]
 800b5ea:	465a      	mov	r2, fp
 800b5ec:	4631      	mov	r1, r6
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	47b8      	blx	r7
 800b5f2:	3001      	adds	r0, #1
 800b5f4:	f43f af4a 	beq.w	800b48c <_printf_float+0x9c>
 800b5f8:	f04f 0800 	mov.w	r8, #0
 800b5fc:	f104 091a 	add.w	r9, r4, #26
 800b600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b602:	3b01      	subs	r3, #1
 800b604:	4543      	cmp	r3, r8
 800b606:	dc09      	bgt.n	800b61c <_printf_float+0x22c>
 800b608:	6823      	ldr	r3, [r4, #0]
 800b60a:	079b      	lsls	r3, r3, #30
 800b60c:	f100 8105 	bmi.w	800b81a <_printf_float+0x42a>
 800b610:	68e0      	ldr	r0, [r4, #12]
 800b612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b614:	4298      	cmp	r0, r3
 800b616:	bfb8      	it	lt
 800b618:	4618      	movlt	r0, r3
 800b61a:	e739      	b.n	800b490 <_printf_float+0xa0>
 800b61c:	2301      	movs	r3, #1
 800b61e:	464a      	mov	r2, r9
 800b620:	4631      	mov	r1, r6
 800b622:	4628      	mov	r0, r5
 800b624:	47b8      	blx	r7
 800b626:	3001      	adds	r0, #1
 800b628:	f43f af30 	beq.w	800b48c <_printf_float+0x9c>
 800b62c:	f108 0801 	add.w	r8, r8, #1
 800b630:	e7e6      	b.n	800b600 <_printf_float+0x210>
 800b632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b634:	2b00      	cmp	r3, #0
 800b636:	dc2b      	bgt.n	800b690 <_printf_float+0x2a0>
 800b638:	2301      	movs	r3, #1
 800b63a:	4a27      	ldr	r2, [pc, #156]	; (800b6d8 <_printf_float+0x2e8>)
 800b63c:	4631      	mov	r1, r6
 800b63e:	4628      	mov	r0, r5
 800b640:	47b8      	blx	r7
 800b642:	3001      	adds	r0, #1
 800b644:	f43f af22 	beq.w	800b48c <_printf_float+0x9c>
 800b648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b64a:	b923      	cbnz	r3, 800b656 <_printf_float+0x266>
 800b64c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b64e:	b913      	cbnz	r3, 800b656 <_printf_float+0x266>
 800b650:	6823      	ldr	r3, [r4, #0]
 800b652:	07d9      	lsls	r1, r3, #31
 800b654:	d5d8      	bpl.n	800b608 <_printf_float+0x218>
 800b656:	9b05      	ldr	r3, [sp, #20]
 800b658:	465a      	mov	r2, fp
 800b65a:	4631      	mov	r1, r6
 800b65c:	4628      	mov	r0, r5
 800b65e:	47b8      	blx	r7
 800b660:	3001      	adds	r0, #1
 800b662:	f43f af13 	beq.w	800b48c <_printf_float+0x9c>
 800b666:	f04f 0900 	mov.w	r9, #0
 800b66a:	f104 0a1a 	add.w	sl, r4, #26
 800b66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b670:	425b      	negs	r3, r3
 800b672:	454b      	cmp	r3, r9
 800b674:	dc01      	bgt.n	800b67a <_printf_float+0x28a>
 800b676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b678:	e795      	b.n	800b5a6 <_printf_float+0x1b6>
 800b67a:	2301      	movs	r3, #1
 800b67c:	4652      	mov	r2, sl
 800b67e:	4631      	mov	r1, r6
 800b680:	4628      	mov	r0, r5
 800b682:	47b8      	blx	r7
 800b684:	3001      	adds	r0, #1
 800b686:	f43f af01 	beq.w	800b48c <_printf_float+0x9c>
 800b68a:	f109 0901 	add.w	r9, r9, #1
 800b68e:	e7ee      	b.n	800b66e <_printf_float+0x27e>
 800b690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b692:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b694:	429a      	cmp	r2, r3
 800b696:	bfa8      	it	ge
 800b698:	461a      	movge	r2, r3
 800b69a:	2a00      	cmp	r2, #0
 800b69c:	4691      	mov	r9, r2
 800b69e:	dd07      	ble.n	800b6b0 <_printf_float+0x2c0>
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	4631      	mov	r1, r6
 800b6a4:	4642      	mov	r2, r8
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	47b8      	blx	r7
 800b6aa:	3001      	adds	r0, #1
 800b6ac:	f43f aeee 	beq.w	800b48c <_printf_float+0x9c>
 800b6b0:	f104 031a 	add.w	r3, r4, #26
 800b6b4:	f04f 0a00 	mov.w	sl, #0
 800b6b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6bc:	9307      	str	r3, [sp, #28]
 800b6be:	e017      	b.n	800b6f0 <_printf_float+0x300>
 800b6c0:	ffffffff 	.word	0xffffffff
 800b6c4:	7fefffff 	.word	0x7fefffff
 800b6c8:	080100ac 	.word	0x080100ac
 800b6cc:	080100a8 	.word	0x080100a8
 800b6d0:	080100b4 	.word	0x080100b4
 800b6d4:	080100b0 	.word	0x080100b0
 800b6d8:	080100b8 	.word	0x080100b8
 800b6dc:	2301      	movs	r3, #1
 800b6de:	9a07      	ldr	r2, [sp, #28]
 800b6e0:	4631      	mov	r1, r6
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	47b8      	blx	r7
 800b6e6:	3001      	adds	r0, #1
 800b6e8:	f43f aed0 	beq.w	800b48c <_printf_float+0x9c>
 800b6ec:	f10a 0a01 	add.w	sl, sl, #1
 800b6f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b6f2:	9306      	str	r3, [sp, #24]
 800b6f4:	eba3 0309 	sub.w	r3, r3, r9
 800b6f8:	4553      	cmp	r3, sl
 800b6fa:	dcef      	bgt.n	800b6dc <_printf_float+0x2ec>
 800b6fc:	9b06      	ldr	r3, [sp, #24]
 800b6fe:	4498      	add	r8, r3
 800b700:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b704:	429a      	cmp	r2, r3
 800b706:	db15      	blt.n	800b734 <_printf_float+0x344>
 800b708:	6823      	ldr	r3, [r4, #0]
 800b70a:	07da      	lsls	r2, r3, #31
 800b70c:	d412      	bmi.n	800b734 <_printf_float+0x344>
 800b70e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b710:	9a06      	ldr	r2, [sp, #24]
 800b712:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b714:	1a9a      	subs	r2, r3, r2
 800b716:	eba3 0a01 	sub.w	sl, r3, r1
 800b71a:	4592      	cmp	sl, r2
 800b71c:	bfa8      	it	ge
 800b71e:	4692      	movge	sl, r2
 800b720:	f1ba 0f00 	cmp.w	sl, #0
 800b724:	dc0e      	bgt.n	800b744 <_printf_float+0x354>
 800b726:	f04f 0800 	mov.w	r8, #0
 800b72a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b72e:	f104 091a 	add.w	r9, r4, #26
 800b732:	e019      	b.n	800b768 <_printf_float+0x378>
 800b734:	9b05      	ldr	r3, [sp, #20]
 800b736:	465a      	mov	r2, fp
 800b738:	4631      	mov	r1, r6
 800b73a:	4628      	mov	r0, r5
 800b73c:	47b8      	blx	r7
 800b73e:	3001      	adds	r0, #1
 800b740:	d1e5      	bne.n	800b70e <_printf_float+0x31e>
 800b742:	e6a3      	b.n	800b48c <_printf_float+0x9c>
 800b744:	4653      	mov	r3, sl
 800b746:	4642      	mov	r2, r8
 800b748:	4631      	mov	r1, r6
 800b74a:	4628      	mov	r0, r5
 800b74c:	47b8      	blx	r7
 800b74e:	3001      	adds	r0, #1
 800b750:	d1e9      	bne.n	800b726 <_printf_float+0x336>
 800b752:	e69b      	b.n	800b48c <_printf_float+0x9c>
 800b754:	2301      	movs	r3, #1
 800b756:	464a      	mov	r2, r9
 800b758:	4631      	mov	r1, r6
 800b75a:	4628      	mov	r0, r5
 800b75c:	47b8      	blx	r7
 800b75e:	3001      	adds	r0, #1
 800b760:	f43f ae94 	beq.w	800b48c <_printf_float+0x9c>
 800b764:	f108 0801 	add.w	r8, r8, #1
 800b768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b76c:	1a9b      	subs	r3, r3, r2
 800b76e:	eba3 030a 	sub.w	r3, r3, sl
 800b772:	4543      	cmp	r3, r8
 800b774:	dcee      	bgt.n	800b754 <_printf_float+0x364>
 800b776:	e747      	b.n	800b608 <_printf_float+0x218>
 800b778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b77a:	2a01      	cmp	r2, #1
 800b77c:	dc01      	bgt.n	800b782 <_printf_float+0x392>
 800b77e:	07db      	lsls	r3, r3, #31
 800b780:	d539      	bpl.n	800b7f6 <_printf_float+0x406>
 800b782:	2301      	movs	r3, #1
 800b784:	4642      	mov	r2, r8
 800b786:	4631      	mov	r1, r6
 800b788:	4628      	mov	r0, r5
 800b78a:	47b8      	blx	r7
 800b78c:	3001      	adds	r0, #1
 800b78e:	f43f ae7d 	beq.w	800b48c <_printf_float+0x9c>
 800b792:	9b05      	ldr	r3, [sp, #20]
 800b794:	465a      	mov	r2, fp
 800b796:	4631      	mov	r1, r6
 800b798:	4628      	mov	r0, r5
 800b79a:	47b8      	blx	r7
 800b79c:	3001      	adds	r0, #1
 800b79e:	f108 0801 	add.w	r8, r8, #1
 800b7a2:	f43f ae73 	beq.w	800b48c <_printf_float+0x9c>
 800b7a6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b7aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b4:	f103 33ff 	add.w	r3, r3, #4294967295
 800b7b8:	d018      	beq.n	800b7ec <_printf_float+0x3fc>
 800b7ba:	4642      	mov	r2, r8
 800b7bc:	4631      	mov	r1, r6
 800b7be:	4628      	mov	r0, r5
 800b7c0:	47b8      	blx	r7
 800b7c2:	3001      	adds	r0, #1
 800b7c4:	d10e      	bne.n	800b7e4 <_printf_float+0x3f4>
 800b7c6:	e661      	b.n	800b48c <_printf_float+0x9c>
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	464a      	mov	r2, r9
 800b7cc:	4631      	mov	r1, r6
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	47b8      	blx	r7
 800b7d2:	3001      	adds	r0, #1
 800b7d4:	f43f ae5a 	beq.w	800b48c <_printf_float+0x9c>
 800b7d8:	f108 0801 	add.w	r8, r8, #1
 800b7dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	4543      	cmp	r3, r8
 800b7e2:	dcf1      	bgt.n	800b7c8 <_printf_float+0x3d8>
 800b7e4:	4653      	mov	r3, sl
 800b7e6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b7ea:	e6dd      	b.n	800b5a8 <_printf_float+0x1b8>
 800b7ec:	f04f 0800 	mov.w	r8, #0
 800b7f0:	f104 091a 	add.w	r9, r4, #26
 800b7f4:	e7f2      	b.n	800b7dc <_printf_float+0x3ec>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e7df      	b.n	800b7ba <_printf_float+0x3ca>
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	464a      	mov	r2, r9
 800b7fe:	4631      	mov	r1, r6
 800b800:	4628      	mov	r0, r5
 800b802:	47b8      	blx	r7
 800b804:	3001      	adds	r0, #1
 800b806:	f43f ae41 	beq.w	800b48c <_printf_float+0x9c>
 800b80a:	f108 0801 	add.w	r8, r8, #1
 800b80e:	68e3      	ldr	r3, [r4, #12]
 800b810:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b812:	1a9b      	subs	r3, r3, r2
 800b814:	4543      	cmp	r3, r8
 800b816:	dcf0      	bgt.n	800b7fa <_printf_float+0x40a>
 800b818:	e6fa      	b.n	800b610 <_printf_float+0x220>
 800b81a:	f04f 0800 	mov.w	r8, #0
 800b81e:	f104 0919 	add.w	r9, r4, #25
 800b822:	e7f4      	b.n	800b80e <_printf_float+0x41e>
 800b824:	2900      	cmp	r1, #0
 800b826:	f43f ae8a 	beq.w	800b53e <_printf_float+0x14e>
 800b82a:	f04f 0c00 	mov.w	ip, #0
 800b82e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800b832:	e9cd 0900 	strd	r0, r9, [sp]
 800b836:	6022      	str	r2, [r4, #0]
 800b838:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b83c:	4628      	mov	r0, r5
 800b83e:	f7ff fd51 	bl	800b2e4 <__cvt>
 800b842:	4680      	mov	r8, r0
 800b844:	e64a      	b.n	800b4dc <_printf_float+0xec>
 800b846:	bf00      	nop

0800b848 <_printf_common>:
 800b848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b84c:	4691      	mov	r9, r2
 800b84e:	461f      	mov	r7, r3
 800b850:	688a      	ldr	r2, [r1, #8]
 800b852:	690b      	ldr	r3, [r1, #16]
 800b854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b858:	4293      	cmp	r3, r2
 800b85a:	bfb8      	it	lt
 800b85c:	4613      	movlt	r3, r2
 800b85e:	f8c9 3000 	str.w	r3, [r9]
 800b862:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b866:	4606      	mov	r6, r0
 800b868:	460c      	mov	r4, r1
 800b86a:	b112      	cbz	r2, 800b872 <_printf_common+0x2a>
 800b86c:	3301      	adds	r3, #1
 800b86e:	f8c9 3000 	str.w	r3, [r9]
 800b872:	6823      	ldr	r3, [r4, #0]
 800b874:	0699      	lsls	r1, r3, #26
 800b876:	bf42      	ittt	mi
 800b878:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b87c:	3302      	addmi	r3, #2
 800b87e:	f8c9 3000 	strmi.w	r3, [r9]
 800b882:	6825      	ldr	r5, [r4, #0]
 800b884:	f015 0506 	ands.w	r5, r5, #6
 800b888:	d107      	bne.n	800b89a <_printf_common+0x52>
 800b88a:	f104 0a19 	add.w	sl, r4, #25
 800b88e:	68e3      	ldr	r3, [r4, #12]
 800b890:	f8d9 2000 	ldr.w	r2, [r9]
 800b894:	1a9b      	subs	r3, r3, r2
 800b896:	42ab      	cmp	r3, r5
 800b898:	dc28      	bgt.n	800b8ec <_printf_common+0xa4>
 800b89a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b89e:	6822      	ldr	r2, [r4, #0]
 800b8a0:	3300      	adds	r3, #0
 800b8a2:	bf18      	it	ne
 800b8a4:	2301      	movne	r3, #1
 800b8a6:	0692      	lsls	r2, r2, #26
 800b8a8:	d42d      	bmi.n	800b906 <_printf_common+0xbe>
 800b8aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8ae:	4639      	mov	r1, r7
 800b8b0:	4630      	mov	r0, r6
 800b8b2:	47c0      	blx	r8
 800b8b4:	3001      	adds	r0, #1
 800b8b6:	d020      	beq.n	800b8fa <_printf_common+0xb2>
 800b8b8:	6823      	ldr	r3, [r4, #0]
 800b8ba:	68e5      	ldr	r5, [r4, #12]
 800b8bc:	f8d9 2000 	ldr.w	r2, [r9]
 800b8c0:	f003 0306 	and.w	r3, r3, #6
 800b8c4:	2b04      	cmp	r3, #4
 800b8c6:	bf08      	it	eq
 800b8c8:	1aad      	subeq	r5, r5, r2
 800b8ca:	68a3      	ldr	r3, [r4, #8]
 800b8cc:	6922      	ldr	r2, [r4, #16]
 800b8ce:	bf0c      	ite	eq
 800b8d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8d4:	2500      	movne	r5, #0
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	bfc4      	itt	gt
 800b8da:	1a9b      	subgt	r3, r3, r2
 800b8dc:	18ed      	addgt	r5, r5, r3
 800b8de:	f04f 0900 	mov.w	r9, #0
 800b8e2:	341a      	adds	r4, #26
 800b8e4:	454d      	cmp	r5, r9
 800b8e6:	d11a      	bne.n	800b91e <_printf_common+0xd6>
 800b8e8:	2000      	movs	r0, #0
 800b8ea:	e008      	b.n	800b8fe <_printf_common+0xb6>
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	4652      	mov	r2, sl
 800b8f0:	4639      	mov	r1, r7
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	47c0      	blx	r8
 800b8f6:	3001      	adds	r0, #1
 800b8f8:	d103      	bne.n	800b902 <_printf_common+0xba>
 800b8fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b902:	3501      	adds	r5, #1
 800b904:	e7c3      	b.n	800b88e <_printf_common+0x46>
 800b906:	18e1      	adds	r1, r4, r3
 800b908:	1c5a      	adds	r2, r3, #1
 800b90a:	2030      	movs	r0, #48	; 0x30
 800b90c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b910:	4422      	add	r2, r4
 800b912:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b916:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b91a:	3302      	adds	r3, #2
 800b91c:	e7c5      	b.n	800b8aa <_printf_common+0x62>
 800b91e:	2301      	movs	r3, #1
 800b920:	4622      	mov	r2, r4
 800b922:	4639      	mov	r1, r7
 800b924:	4630      	mov	r0, r6
 800b926:	47c0      	blx	r8
 800b928:	3001      	adds	r0, #1
 800b92a:	d0e6      	beq.n	800b8fa <_printf_common+0xb2>
 800b92c:	f109 0901 	add.w	r9, r9, #1
 800b930:	e7d8      	b.n	800b8e4 <_printf_common+0x9c>
	...

0800b934 <_printf_i>:
 800b934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b938:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b93c:	460c      	mov	r4, r1
 800b93e:	7e09      	ldrb	r1, [r1, #24]
 800b940:	b085      	sub	sp, #20
 800b942:	296e      	cmp	r1, #110	; 0x6e
 800b944:	4617      	mov	r7, r2
 800b946:	4606      	mov	r6, r0
 800b948:	4698      	mov	r8, r3
 800b94a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b94c:	f000 80b3 	beq.w	800bab6 <_printf_i+0x182>
 800b950:	d822      	bhi.n	800b998 <_printf_i+0x64>
 800b952:	2963      	cmp	r1, #99	; 0x63
 800b954:	d036      	beq.n	800b9c4 <_printf_i+0x90>
 800b956:	d80a      	bhi.n	800b96e <_printf_i+0x3a>
 800b958:	2900      	cmp	r1, #0
 800b95a:	f000 80b9 	beq.w	800bad0 <_printf_i+0x19c>
 800b95e:	2958      	cmp	r1, #88	; 0x58
 800b960:	f000 8083 	beq.w	800ba6a <_printf_i+0x136>
 800b964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b968:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b96c:	e032      	b.n	800b9d4 <_printf_i+0xa0>
 800b96e:	2964      	cmp	r1, #100	; 0x64
 800b970:	d001      	beq.n	800b976 <_printf_i+0x42>
 800b972:	2969      	cmp	r1, #105	; 0x69
 800b974:	d1f6      	bne.n	800b964 <_printf_i+0x30>
 800b976:	6820      	ldr	r0, [r4, #0]
 800b978:	6813      	ldr	r3, [r2, #0]
 800b97a:	0605      	lsls	r5, r0, #24
 800b97c:	f103 0104 	add.w	r1, r3, #4
 800b980:	d52a      	bpl.n	800b9d8 <_printf_i+0xa4>
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	6011      	str	r1, [r2, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	da03      	bge.n	800b992 <_printf_i+0x5e>
 800b98a:	222d      	movs	r2, #45	; 0x2d
 800b98c:	425b      	negs	r3, r3
 800b98e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b992:	486f      	ldr	r0, [pc, #444]	; (800bb50 <_printf_i+0x21c>)
 800b994:	220a      	movs	r2, #10
 800b996:	e039      	b.n	800ba0c <_printf_i+0xd8>
 800b998:	2973      	cmp	r1, #115	; 0x73
 800b99a:	f000 809d 	beq.w	800bad8 <_printf_i+0x1a4>
 800b99e:	d808      	bhi.n	800b9b2 <_printf_i+0x7e>
 800b9a0:	296f      	cmp	r1, #111	; 0x6f
 800b9a2:	d020      	beq.n	800b9e6 <_printf_i+0xb2>
 800b9a4:	2970      	cmp	r1, #112	; 0x70
 800b9a6:	d1dd      	bne.n	800b964 <_printf_i+0x30>
 800b9a8:	6823      	ldr	r3, [r4, #0]
 800b9aa:	f043 0320 	orr.w	r3, r3, #32
 800b9ae:	6023      	str	r3, [r4, #0]
 800b9b0:	e003      	b.n	800b9ba <_printf_i+0x86>
 800b9b2:	2975      	cmp	r1, #117	; 0x75
 800b9b4:	d017      	beq.n	800b9e6 <_printf_i+0xb2>
 800b9b6:	2978      	cmp	r1, #120	; 0x78
 800b9b8:	d1d4      	bne.n	800b964 <_printf_i+0x30>
 800b9ba:	2378      	movs	r3, #120	; 0x78
 800b9bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b9c0:	4864      	ldr	r0, [pc, #400]	; (800bb54 <_printf_i+0x220>)
 800b9c2:	e055      	b.n	800ba70 <_printf_i+0x13c>
 800b9c4:	6813      	ldr	r3, [r2, #0]
 800b9c6:	1d19      	adds	r1, r3, #4
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	6011      	str	r1, [r2, #0]
 800b9cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	e08c      	b.n	800baf2 <_printf_i+0x1be>
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	6011      	str	r1, [r2, #0]
 800b9dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b9e0:	bf18      	it	ne
 800b9e2:	b21b      	sxthne	r3, r3
 800b9e4:	e7cf      	b.n	800b986 <_printf_i+0x52>
 800b9e6:	6813      	ldr	r3, [r2, #0]
 800b9e8:	6825      	ldr	r5, [r4, #0]
 800b9ea:	1d18      	adds	r0, r3, #4
 800b9ec:	6010      	str	r0, [r2, #0]
 800b9ee:	0628      	lsls	r0, r5, #24
 800b9f0:	d501      	bpl.n	800b9f6 <_printf_i+0xc2>
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	e002      	b.n	800b9fc <_printf_i+0xc8>
 800b9f6:	0668      	lsls	r0, r5, #25
 800b9f8:	d5fb      	bpl.n	800b9f2 <_printf_i+0xbe>
 800b9fa:	881b      	ldrh	r3, [r3, #0]
 800b9fc:	4854      	ldr	r0, [pc, #336]	; (800bb50 <_printf_i+0x21c>)
 800b9fe:	296f      	cmp	r1, #111	; 0x6f
 800ba00:	bf14      	ite	ne
 800ba02:	220a      	movne	r2, #10
 800ba04:	2208      	moveq	r2, #8
 800ba06:	2100      	movs	r1, #0
 800ba08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba0c:	6865      	ldr	r5, [r4, #4]
 800ba0e:	60a5      	str	r5, [r4, #8]
 800ba10:	2d00      	cmp	r5, #0
 800ba12:	f2c0 8095 	blt.w	800bb40 <_printf_i+0x20c>
 800ba16:	6821      	ldr	r1, [r4, #0]
 800ba18:	f021 0104 	bic.w	r1, r1, #4
 800ba1c:	6021      	str	r1, [r4, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d13d      	bne.n	800ba9e <_printf_i+0x16a>
 800ba22:	2d00      	cmp	r5, #0
 800ba24:	f040 808e 	bne.w	800bb44 <_printf_i+0x210>
 800ba28:	4665      	mov	r5, ip
 800ba2a:	2a08      	cmp	r2, #8
 800ba2c:	d10b      	bne.n	800ba46 <_printf_i+0x112>
 800ba2e:	6823      	ldr	r3, [r4, #0]
 800ba30:	07db      	lsls	r3, r3, #31
 800ba32:	d508      	bpl.n	800ba46 <_printf_i+0x112>
 800ba34:	6923      	ldr	r3, [r4, #16]
 800ba36:	6862      	ldr	r2, [r4, #4]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	bfde      	ittt	le
 800ba3c:	2330      	movle	r3, #48	; 0x30
 800ba3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba42:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ba46:	ebac 0305 	sub.w	r3, ip, r5
 800ba4a:	6123      	str	r3, [r4, #16]
 800ba4c:	f8cd 8000 	str.w	r8, [sp]
 800ba50:	463b      	mov	r3, r7
 800ba52:	aa03      	add	r2, sp, #12
 800ba54:	4621      	mov	r1, r4
 800ba56:	4630      	mov	r0, r6
 800ba58:	f7ff fef6 	bl	800b848 <_printf_common>
 800ba5c:	3001      	adds	r0, #1
 800ba5e:	d14d      	bne.n	800bafc <_printf_i+0x1c8>
 800ba60:	f04f 30ff 	mov.w	r0, #4294967295
 800ba64:	b005      	add	sp, #20
 800ba66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba6a:	4839      	ldr	r0, [pc, #228]	; (800bb50 <_printf_i+0x21c>)
 800ba6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ba70:	6813      	ldr	r3, [r2, #0]
 800ba72:	6821      	ldr	r1, [r4, #0]
 800ba74:	1d1d      	adds	r5, r3, #4
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	6015      	str	r5, [r2, #0]
 800ba7a:	060a      	lsls	r2, r1, #24
 800ba7c:	d50b      	bpl.n	800ba96 <_printf_i+0x162>
 800ba7e:	07ca      	lsls	r2, r1, #31
 800ba80:	bf44      	itt	mi
 800ba82:	f041 0120 	orrmi.w	r1, r1, #32
 800ba86:	6021      	strmi	r1, [r4, #0]
 800ba88:	b91b      	cbnz	r3, 800ba92 <_printf_i+0x15e>
 800ba8a:	6822      	ldr	r2, [r4, #0]
 800ba8c:	f022 0220 	bic.w	r2, r2, #32
 800ba90:	6022      	str	r2, [r4, #0]
 800ba92:	2210      	movs	r2, #16
 800ba94:	e7b7      	b.n	800ba06 <_printf_i+0xd2>
 800ba96:	064d      	lsls	r5, r1, #25
 800ba98:	bf48      	it	mi
 800ba9a:	b29b      	uxthmi	r3, r3
 800ba9c:	e7ef      	b.n	800ba7e <_printf_i+0x14a>
 800ba9e:	4665      	mov	r5, ip
 800baa0:	fbb3 f1f2 	udiv	r1, r3, r2
 800baa4:	fb02 3311 	mls	r3, r2, r1, r3
 800baa8:	5cc3      	ldrb	r3, [r0, r3]
 800baaa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800baae:	460b      	mov	r3, r1
 800bab0:	2900      	cmp	r1, #0
 800bab2:	d1f5      	bne.n	800baa0 <_printf_i+0x16c>
 800bab4:	e7b9      	b.n	800ba2a <_printf_i+0xf6>
 800bab6:	6813      	ldr	r3, [r2, #0]
 800bab8:	6825      	ldr	r5, [r4, #0]
 800baba:	6961      	ldr	r1, [r4, #20]
 800babc:	1d18      	adds	r0, r3, #4
 800babe:	6010      	str	r0, [r2, #0]
 800bac0:	0628      	lsls	r0, r5, #24
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	d501      	bpl.n	800baca <_printf_i+0x196>
 800bac6:	6019      	str	r1, [r3, #0]
 800bac8:	e002      	b.n	800bad0 <_printf_i+0x19c>
 800baca:	066a      	lsls	r2, r5, #25
 800bacc:	d5fb      	bpl.n	800bac6 <_printf_i+0x192>
 800bace:	8019      	strh	r1, [r3, #0]
 800bad0:	2300      	movs	r3, #0
 800bad2:	6123      	str	r3, [r4, #16]
 800bad4:	4665      	mov	r5, ip
 800bad6:	e7b9      	b.n	800ba4c <_printf_i+0x118>
 800bad8:	6813      	ldr	r3, [r2, #0]
 800bada:	1d19      	adds	r1, r3, #4
 800badc:	6011      	str	r1, [r2, #0]
 800bade:	681d      	ldr	r5, [r3, #0]
 800bae0:	6862      	ldr	r2, [r4, #4]
 800bae2:	2100      	movs	r1, #0
 800bae4:	4628      	mov	r0, r5
 800bae6:	f7f4 fc63 	bl	80003b0 <memchr>
 800baea:	b108      	cbz	r0, 800baf0 <_printf_i+0x1bc>
 800baec:	1b40      	subs	r0, r0, r5
 800baee:	6060      	str	r0, [r4, #4]
 800baf0:	6863      	ldr	r3, [r4, #4]
 800baf2:	6123      	str	r3, [r4, #16]
 800baf4:	2300      	movs	r3, #0
 800baf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bafa:	e7a7      	b.n	800ba4c <_printf_i+0x118>
 800bafc:	6923      	ldr	r3, [r4, #16]
 800bafe:	462a      	mov	r2, r5
 800bb00:	4639      	mov	r1, r7
 800bb02:	4630      	mov	r0, r6
 800bb04:	47c0      	blx	r8
 800bb06:	3001      	adds	r0, #1
 800bb08:	d0aa      	beq.n	800ba60 <_printf_i+0x12c>
 800bb0a:	6823      	ldr	r3, [r4, #0]
 800bb0c:	079b      	lsls	r3, r3, #30
 800bb0e:	d413      	bmi.n	800bb38 <_printf_i+0x204>
 800bb10:	68e0      	ldr	r0, [r4, #12]
 800bb12:	9b03      	ldr	r3, [sp, #12]
 800bb14:	4298      	cmp	r0, r3
 800bb16:	bfb8      	it	lt
 800bb18:	4618      	movlt	r0, r3
 800bb1a:	e7a3      	b.n	800ba64 <_printf_i+0x130>
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	464a      	mov	r2, r9
 800bb20:	4639      	mov	r1, r7
 800bb22:	4630      	mov	r0, r6
 800bb24:	47c0      	blx	r8
 800bb26:	3001      	adds	r0, #1
 800bb28:	d09a      	beq.n	800ba60 <_printf_i+0x12c>
 800bb2a:	3501      	adds	r5, #1
 800bb2c:	68e3      	ldr	r3, [r4, #12]
 800bb2e:	9a03      	ldr	r2, [sp, #12]
 800bb30:	1a9b      	subs	r3, r3, r2
 800bb32:	42ab      	cmp	r3, r5
 800bb34:	dcf2      	bgt.n	800bb1c <_printf_i+0x1e8>
 800bb36:	e7eb      	b.n	800bb10 <_printf_i+0x1dc>
 800bb38:	2500      	movs	r5, #0
 800bb3a:	f104 0919 	add.w	r9, r4, #25
 800bb3e:	e7f5      	b.n	800bb2c <_printf_i+0x1f8>
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d1ac      	bne.n	800ba9e <_printf_i+0x16a>
 800bb44:	7803      	ldrb	r3, [r0, #0]
 800bb46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb4e:	e76c      	b.n	800ba2a <_printf_i+0xf6>
 800bb50:	080100ba 	.word	0x080100ba
 800bb54:	080100cb 	.word	0x080100cb

0800bb58 <_sbrk_r>:
 800bb58:	b538      	push	{r3, r4, r5, lr}
 800bb5a:	4c06      	ldr	r4, [pc, #24]	; (800bb74 <_sbrk_r+0x1c>)
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	4605      	mov	r5, r0
 800bb60:	4608      	mov	r0, r1
 800bb62:	6023      	str	r3, [r4, #0]
 800bb64:	f7f5 fede 	bl	8001924 <_sbrk>
 800bb68:	1c43      	adds	r3, r0, #1
 800bb6a:	d102      	bne.n	800bb72 <_sbrk_r+0x1a>
 800bb6c:	6823      	ldr	r3, [r4, #0]
 800bb6e:	b103      	cbz	r3, 800bb72 <_sbrk_r+0x1a>
 800bb70:	602b      	str	r3, [r5, #0]
 800bb72:	bd38      	pop	{r3, r4, r5, pc}
 800bb74:	200006f8 	.word	0x200006f8

0800bb78 <siprintf>:
 800bb78:	b40e      	push	{r1, r2, r3}
 800bb7a:	b500      	push	{lr}
 800bb7c:	b09c      	sub	sp, #112	; 0x70
 800bb7e:	ab1d      	add	r3, sp, #116	; 0x74
 800bb80:	9002      	str	r0, [sp, #8]
 800bb82:	9006      	str	r0, [sp, #24]
 800bb84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb88:	4809      	ldr	r0, [pc, #36]	; (800bbb0 <siprintf+0x38>)
 800bb8a:	9107      	str	r1, [sp, #28]
 800bb8c:	9104      	str	r1, [sp, #16]
 800bb8e:	4909      	ldr	r1, [pc, #36]	; (800bbb4 <siprintf+0x3c>)
 800bb90:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb94:	9105      	str	r1, [sp, #20]
 800bb96:	6800      	ldr	r0, [r0, #0]
 800bb98:	9301      	str	r3, [sp, #4]
 800bb9a:	a902      	add	r1, sp, #8
 800bb9c:	f001 f938 	bl	800ce10 <_svfiprintf_r>
 800bba0:	9b02      	ldr	r3, [sp, #8]
 800bba2:	2200      	movs	r2, #0
 800bba4:	701a      	strb	r2, [r3, #0]
 800bba6:	b01c      	add	sp, #112	; 0x70
 800bba8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbac:	b003      	add	sp, #12
 800bbae:	4770      	bx	lr
 800bbb0:	20000010 	.word	0x20000010
 800bbb4:	ffff0208 	.word	0xffff0208

0800bbb8 <quorem>:
 800bbb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbbc:	6903      	ldr	r3, [r0, #16]
 800bbbe:	690c      	ldr	r4, [r1, #16]
 800bbc0:	42a3      	cmp	r3, r4
 800bbc2:	4680      	mov	r8, r0
 800bbc4:	f2c0 8082 	blt.w	800bccc <quorem+0x114>
 800bbc8:	3c01      	subs	r4, #1
 800bbca:	f101 0714 	add.w	r7, r1, #20
 800bbce:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800bbd2:	f100 0614 	add.w	r6, r0, #20
 800bbd6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800bbda:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800bbde:	eb06 030c 	add.w	r3, r6, ip
 800bbe2:	3501      	adds	r5, #1
 800bbe4:	eb07 090c 	add.w	r9, r7, ip
 800bbe8:	9301      	str	r3, [sp, #4]
 800bbea:	fbb0 f5f5 	udiv	r5, r0, r5
 800bbee:	b395      	cbz	r5, 800bc56 <quorem+0x9e>
 800bbf0:	f04f 0a00 	mov.w	sl, #0
 800bbf4:	4638      	mov	r0, r7
 800bbf6:	46b6      	mov	lr, r6
 800bbf8:	46d3      	mov	fp, sl
 800bbfa:	f850 2b04 	ldr.w	r2, [r0], #4
 800bbfe:	b293      	uxth	r3, r2
 800bc00:	fb05 a303 	mla	r3, r5, r3, sl
 800bc04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	ebab 0303 	sub.w	r3, fp, r3
 800bc0e:	0c12      	lsrs	r2, r2, #16
 800bc10:	f8de b000 	ldr.w	fp, [lr]
 800bc14:	fb05 a202 	mla	r2, r5, r2, sl
 800bc18:	fa13 f38b 	uxtah	r3, r3, fp
 800bc1c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bc20:	fa1f fb82 	uxth.w	fp, r2
 800bc24:	f8de 2000 	ldr.w	r2, [lr]
 800bc28:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800bc2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc36:	4581      	cmp	r9, r0
 800bc38:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bc3c:	f84e 3b04 	str.w	r3, [lr], #4
 800bc40:	d2db      	bcs.n	800bbfa <quorem+0x42>
 800bc42:	f856 300c 	ldr.w	r3, [r6, ip]
 800bc46:	b933      	cbnz	r3, 800bc56 <quorem+0x9e>
 800bc48:	9b01      	ldr	r3, [sp, #4]
 800bc4a:	3b04      	subs	r3, #4
 800bc4c:	429e      	cmp	r6, r3
 800bc4e:	461a      	mov	r2, r3
 800bc50:	d330      	bcc.n	800bcb4 <quorem+0xfc>
 800bc52:	f8c8 4010 	str.w	r4, [r8, #16]
 800bc56:	4640      	mov	r0, r8
 800bc58:	f000 ffac 	bl	800cbb4 <__mcmp>
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	db25      	blt.n	800bcac <quorem+0xf4>
 800bc60:	3501      	adds	r5, #1
 800bc62:	4630      	mov	r0, r6
 800bc64:	f04f 0c00 	mov.w	ip, #0
 800bc68:	f857 2b04 	ldr.w	r2, [r7], #4
 800bc6c:	f8d0 e000 	ldr.w	lr, [r0]
 800bc70:	b293      	uxth	r3, r2
 800bc72:	ebac 0303 	sub.w	r3, ip, r3
 800bc76:	0c12      	lsrs	r2, r2, #16
 800bc78:	fa13 f38e 	uxtah	r3, r3, lr
 800bc7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bc80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc8a:	45b9      	cmp	r9, r7
 800bc8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bc90:	f840 3b04 	str.w	r3, [r0], #4
 800bc94:	d2e8      	bcs.n	800bc68 <quorem+0xb0>
 800bc96:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bc9a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bc9e:	b92a      	cbnz	r2, 800bcac <quorem+0xf4>
 800bca0:	3b04      	subs	r3, #4
 800bca2:	429e      	cmp	r6, r3
 800bca4:	461a      	mov	r2, r3
 800bca6:	d30b      	bcc.n	800bcc0 <quorem+0x108>
 800bca8:	f8c8 4010 	str.w	r4, [r8, #16]
 800bcac:	4628      	mov	r0, r5
 800bcae:	b003      	add	sp, #12
 800bcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb4:	6812      	ldr	r2, [r2, #0]
 800bcb6:	3b04      	subs	r3, #4
 800bcb8:	2a00      	cmp	r2, #0
 800bcba:	d1ca      	bne.n	800bc52 <quorem+0x9a>
 800bcbc:	3c01      	subs	r4, #1
 800bcbe:	e7c5      	b.n	800bc4c <quorem+0x94>
 800bcc0:	6812      	ldr	r2, [r2, #0]
 800bcc2:	3b04      	subs	r3, #4
 800bcc4:	2a00      	cmp	r2, #0
 800bcc6:	d1ef      	bne.n	800bca8 <quorem+0xf0>
 800bcc8:	3c01      	subs	r4, #1
 800bcca:	e7ea      	b.n	800bca2 <quorem+0xea>
 800bccc:	2000      	movs	r0, #0
 800bcce:	e7ee      	b.n	800bcae <quorem+0xf6>

0800bcd0 <_dtoa_r>:
 800bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	ec57 6b10 	vmov	r6, r7, d0
 800bcd8:	b095      	sub	sp, #84	; 0x54
 800bcda:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bcdc:	9108      	str	r1, [sp, #32]
 800bcde:	4604      	mov	r4, r0
 800bce0:	920a      	str	r2, [sp, #40]	; 0x28
 800bce2:	9311      	str	r3, [sp, #68]	; 0x44
 800bce4:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800bce8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bcec:	b93d      	cbnz	r5, 800bcfe <_dtoa_r+0x2e>
 800bcee:	2010      	movs	r0, #16
 800bcf0:	f7ff fa14 	bl	800b11c <malloc>
 800bcf4:	6260      	str	r0, [r4, #36]	; 0x24
 800bcf6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bcfa:	6005      	str	r5, [r0, #0]
 800bcfc:	60c5      	str	r5, [r0, #12]
 800bcfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd00:	6819      	ldr	r1, [r3, #0]
 800bd02:	b151      	cbz	r1, 800bd1a <_dtoa_r+0x4a>
 800bd04:	685a      	ldr	r2, [r3, #4]
 800bd06:	604a      	str	r2, [r1, #4]
 800bd08:	2301      	movs	r3, #1
 800bd0a:	4093      	lsls	r3, r2
 800bd0c:	608b      	str	r3, [r1, #8]
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f000 fd6e 	bl	800c7f0 <_Bfree>
 800bd14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd16:	2200      	movs	r2, #0
 800bd18:	601a      	str	r2, [r3, #0]
 800bd1a:	1e3b      	subs	r3, r7, #0
 800bd1c:	bfb9      	ittee	lt
 800bd1e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bd22:	9303      	strlt	r3, [sp, #12]
 800bd24:	2300      	movge	r3, #0
 800bd26:	f8c8 3000 	strge.w	r3, [r8]
 800bd2a:	9d03      	ldr	r5, [sp, #12]
 800bd2c:	4bac      	ldr	r3, [pc, #688]	; (800bfe0 <_dtoa_r+0x310>)
 800bd2e:	bfbc      	itt	lt
 800bd30:	2201      	movlt	r2, #1
 800bd32:	f8c8 2000 	strlt.w	r2, [r8]
 800bd36:	43ab      	bics	r3, r5
 800bd38:	d11b      	bne.n	800bd72 <_dtoa_r+0xa2>
 800bd3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bd3c:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd40:	6013      	str	r3, [r2, #0]
 800bd42:	9b02      	ldr	r3, [sp, #8]
 800bd44:	b923      	cbnz	r3, 800bd50 <_dtoa_r+0x80>
 800bd46:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800bd4a:	2d00      	cmp	r5, #0
 800bd4c:	f000 84dd 	beq.w	800c70a <_dtoa_r+0xa3a>
 800bd50:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bd52:	b953      	cbnz	r3, 800bd6a <_dtoa_r+0x9a>
 800bd54:	4ba3      	ldr	r3, [pc, #652]	; (800bfe4 <_dtoa_r+0x314>)
 800bd56:	e020      	b.n	800bd9a <_dtoa_r+0xca>
 800bd58:	4ba3      	ldr	r3, [pc, #652]	; (800bfe8 <_dtoa_r+0x318>)
 800bd5a:	9304      	str	r3, [sp, #16]
 800bd5c:	3308      	adds	r3, #8
 800bd5e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bd60:	6013      	str	r3, [r2, #0]
 800bd62:	9804      	ldr	r0, [sp, #16]
 800bd64:	b015      	add	sp, #84	; 0x54
 800bd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd6a:	4b9e      	ldr	r3, [pc, #632]	; (800bfe4 <_dtoa_r+0x314>)
 800bd6c:	9304      	str	r3, [sp, #16]
 800bd6e:	3303      	adds	r3, #3
 800bd70:	e7f5      	b.n	800bd5e <_dtoa_r+0x8e>
 800bd72:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd7e:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bd82:	d10c      	bne.n	800bd9e <_dtoa_r+0xce>
 800bd84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bd86:	2301      	movs	r3, #1
 800bd88:	6013      	str	r3, [r2, #0]
 800bd8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f000 84b9 	beq.w	800c704 <_dtoa_r+0xa34>
 800bd92:	4b96      	ldr	r3, [pc, #600]	; (800bfec <_dtoa_r+0x31c>)
 800bd94:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bd96:	6013      	str	r3, [r2, #0]
 800bd98:	3b01      	subs	r3, #1
 800bd9a:	9304      	str	r3, [sp, #16]
 800bd9c:	e7e1      	b.n	800bd62 <_dtoa_r+0x92>
 800bd9e:	a913      	add	r1, sp, #76	; 0x4c
 800bda0:	aa12      	add	r2, sp, #72	; 0x48
 800bda2:	ed9d 0b04 	vldr	d0, [sp, #16]
 800bda6:	4620      	mov	r0, r4
 800bda8:	f000 ff7b 	bl	800cca2 <__d2b>
 800bdac:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800bdb0:	9001      	str	r0, [sp, #4]
 800bdb2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bdb4:	2e00      	cmp	r6, #0
 800bdb6:	d046      	beq.n	800be46 <_dtoa_r+0x176>
 800bdb8:	9805      	ldr	r0, [sp, #20]
 800bdba:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800bdbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdc2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800bdc6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bdca:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800bdce:	2700      	movs	r7, #0
 800bdd0:	ee07 aa90 	vmov	s15, sl
 800bdd4:	ec43 2b16 	vmov	d6, r2, r3
 800bdd8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800bddc:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800bfc8 <_dtoa_r+0x2f8>
 800bde0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800bde4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bde8:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800bfd0 <_dtoa_r+0x300>
 800bdec:	eea7 6b04 	vfma.f64	d6, d7, d4
 800bdf0:	eeb0 7b46 	vmov.f64	d7, d6
 800bdf4:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800bfd8 <_dtoa_r+0x308>
 800bdf8:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bdfc:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800be00:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800be04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be08:	ee16 ba90 	vmov	fp, s13
 800be0c:	d508      	bpl.n	800be20 <_dtoa_r+0x150>
 800be0e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800be12:	eeb4 6b47 	vcmp.f64	d6, d7
 800be16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be1a:	bf18      	it	ne
 800be1c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800be20:	f1bb 0f16 	cmp.w	fp, #22
 800be24:	d834      	bhi.n	800be90 <_dtoa_r+0x1c0>
 800be26:	4b72      	ldr	r3, [pc, #456]	; (800bff0 <_dtoa_r+0x320>)
 800be28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800be2c:	ed93 7b00 	vldr	d7, [r3]
 800be30:	ed9d 6b02 	vldr	d6, [sp, #8]
 800be34:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800be38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be3c:	dd01      	ble.n	800be42 <_dtoa_r+0x172>
 800be3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be42:	2300      	movs	r3, #0
 800be44:	e025      	b.n	800be92 <_dtoa_r+0x1c2>
 800be46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be48:	eb01 0a03 	add.w	sl, r1, r3
 800be4c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800be50:	2b20      	cmp	r3, #32
 800be52:	dd17      	ble.n	800be84 <_dtoa_r+0x1b4>
 800be54:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800be58:	9a02      	ldr	r2, [sp, #8]
 800be5a:	409d      	lsls	r5, r3
 800be5c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800be60:	fa22 f303 	lsr.w	r3, r2, r3
 800be64:	432b      	orrs	r3, r5
 800be66:	ee07 3a90 	vmov	s15, r3
 800be6a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800be6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be72:	ed8d 7b04 	vstr	d7, [sp, #16]
 800be76:	9805      	ldr	r0, [sp, #20]
 800be78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be7c:	2701      	movs	r7, #1
 800be7e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800be82:	e7a5      	b.n	800bdd0 <_dtoa_r+0x100>
 800be84:	9a02      	ldr	r2, [sp, #8]
 800be86:	f1c3 0320 	rsb	r3, r3, #32
 800be8a:	fa02 f303 	lsl.w	r3, r2, r3
 800be8e:	e7ea      	b.n	800be66 <_dtoa_r+0x196>
 800be90:	2301      	movs	r3, #1
 800be92:	eba1 0a0a 	sub.w	sl, r1, sl
 800be96:	9310      	str	r3, [sp, #64]	; 0x40
 800be98:	f1ba 0301 	subs.w	r3, sl, #1
 800be9c:	9307      	str	r3, [sp, #28]
 800be9e:	bf43      	ittte	mi
 800bea0:	2300      	movmi	r3, #0
 800bea2:	f1ca 0a01 	rsbmi	sl, sl, #1
 800bea6:	9307      	strmi	r3, [sp, #28]
 800bea8:	f04f 0a00 	movpl.w	sl, #0
 800beac:	f1bb 0f00 	cmp.w	fp, #0
 800beb0:	db19      	blt.n	800bee6 <_dtoa_r+0x216>
 800beb2:	9b07      	ldr	r3, [sp, #28]
 800beb4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800beb8:	445b      	add	r3, fp
 800beba:	9307      	str	r3, [sp, #28]
 800bebc:	f04f 0800 	mov.w	r8, #0
 800bec0:	9b08      	ldr	r3, [sp, #32]
 800bec2:	2b09      	cmp	r3, #9
 800bec4:	d866      	bhi.n	800bf94 <_dtoa_r+0x2c4>
 800bec6:	2b05      	cmp	r3, #5
 800bec8:	bfc4      	itt	gt
 800beca:	3b04      	subgt	r3, #4
 800becc:	9308      	strgt	r3, [sp, #32]
 800bece:	9b08      	ldr	r3, [sp, #32]
 800bed0:	f1a3 0302 	sub.w	r3, r3, #2
 800bed4:	bfcc      	ite	gt
 800bed6:	2500      	movgt	r5, #0
 800bed8:	2501      	movle	r5, #1
 800beda:	2b03      	cmp	r3, #3
 800bedc:	d866      	bhi.n	800bfac <_dtoa_r+0x2dc>
 800bede:	e8df f003 	tbb	[pc, r3]
 800bee2:	5755      	.short	0x5755
 800bee4:	4909      	.short	0x4909
 800bee6:	2300      	movs	r3, #0
 800bee8:	ebaa 0a0b 	sub.w	sl, sl, fp
 800beec:	f1cb 0800 	rsb	r8, fp, #0
 800bef0:	930b      	str	r3, [sp, #44]	; 0x2c
 800bef2:	e7e5      	b.n	800bec0 <_dtoa_r+0x1f0>
 800bef4:	2301      	movs	r3, #1
 800bef6:	9309      	str	r3, [sp, #36]	; 0x24
 800bef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800befa:	2b00      	cmp	r3, #0
 800befc:	dd59      	ble.n	800bfb2 <_dtoa_r+0x2e2>
 800befe:	9306      	str	r3, [sp, #24]
 800bf00:	4699      	mov	r9, r3
 800bf02:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf04:	2200      	movs	r2, #0
 800bf06:	6072      	str	r2, [r6, #4]
 800bf08:	2204      	movs	r2, #4
 800bf0a:	f102 0014 	add.w	r0, r2, #20
 800bf0e:	4298      	cmp	r0, r3
 800bf10:	6871      	ldr	r1, [r6, #4]
 800bf12:	d953      	bls.n	800bfbc <_dtoa_r+0x2ec>
 800bf14:	4620      	mov	r0, r4
 800bf16:	f000 fc37 	bl	800c788 <_Balloc>
 800bf1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf1c:	6030      	str	r0, [r6, #0]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	9304      	str	r3, [sp, #16]
 800bf22:	f1b9 0f0e 	cmp.w	r9, #14
 800bf26:	f200 80c2 	bhi.w	800c0ae <_dtoa_r+0x3de>
 800bf2a:	2d00      	cmp	r5, #0
 800bf2c:	f000 80bf 	beq.w	800c0ae <_dtoa_r+0x3de>
 800bf30:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf34:	f1bb 0f00 	cmp.w	fp, #0
 800bf38:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800bf3c:	f340 80e6 	ble.w	800c10c <_dtoa_r+0x43c>
 800bf40:	4a2b      	ldr	r2, [pc, #172]	; (800bff0 <_dtoa_r+0x320>)
 800bf42:	f00b 030f 	and.w	r3, fp, #15
 800bf46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bf4a:	ed93 7b00 	vldr	d7, [r3]
 800bf4e:	ea4f 132b 	mov.w	r3, fp, asr #4
 800bf52:	06da      	lsls	r2, r3, #27
 800bf54:	f140 80d8 	bpl.w	800c108 <_dtoa_r+0x438>
 800bf58:	4a26      	ldr	r2, [pc, #152]	; (800bff4 <_dtoa_r+0x324>)
 800bf5a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800bf5e:	ed92 6b08 	vldr	d6, [r2, #32]
 800bf62:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800bf66:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bf6a:	f003 030f 	and.w	r3, r3, #15
 800bf6e:	2203      	movs	r2, #3
 800bf70:	4920      	ldr	r1, [pc, #128]	; (800bff4 <_dtoa_r+0x324>)
 800bf72:	e04a      	b.n	800c00a <_dtoa_r+0x33a>
 800bf74:	2301      	movs	r3, #1
 800bf76:	9309      	str	r3, [sp, #36]	; 0x24
 800bf78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf7a:	445b      	add	r3, fp
 800bf7c:	f103 0901 	add.w	r9, r3, #1
 800bf80:	9306      	str	r3, [sp, #24]
 800bf82:	464b      	mov	r3, r9
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	bfb8      	it	lt
 800bf88:	2301      	movlt	r3, #1
 800bf8a:	e7ba      	b.n	800bf02 <_dtoa_r+0x232>
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	e7b2      	b.n	800bef6 <_dtoa_r+0x226>
 800bf90:	2300      	movs	r3, #0
 800bf92:	e7f0      	b.n	800bf76 <_dtoa_r+0x2a6>
 800bf94:	2501      	movs	r5, #1
 800bf96:	2300      	movs	r3, #0
 800bf98:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800bf9c:	f04f 33ff 	mov.w	r3, #4294967295
 800bfa0:	9306      	str	r3, [sp, #24]
 800bfa2:	4699      	mov	r9, r3
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	2312      	movs	r3, #18
 800bfa8:	920a      	str	r2, [sp, #40]	; 0x28
 800bfaa:	e7aa      	b.n	800bf02 <_dtoa_r+0x232>
 800bfac:	2301      	movs	r3, #1
 800bfae:	9309      	str	r3, [sp, #36]	; 0x24
 800bfb0:	e7f4      	b.n	800bf9c <_dtoa_r+0x2cc>
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	9306      	str	r3, [sp, #24]
 800bfb6:	4699      	mov	r9, r3
 800bfb8:	461a      	mov	r2, r3
 800bfba:	e7f5      	b.n	800bfa8 <_dtoa_r+0x2d8>
 800bfbc:	3101      	adds	r1, #1
 800bfbe:	6071      	str	r1, [r6, #4]
 800bfc0:	0052      	lsls	r2, r2, #1
 800bfc2:	e7a2      	b.n	800bf0a <_dtoa_r+0x23a>
 800bfc4:	f3af 8000 	nop.w
 800bfc8:	636f4361 	.word	0x636f4361
 800bfcc:	3fd287a7 	.word	0x3fd287a7
 800bfd0:	8b60c8b3 	.word	0x8b60c8b3
 800bfd4:	3fc68a28 	.word	0x3fc68a28
 800bfd8:	509f79fb 	.word	0x509f79fb
 800bfdc:	3fd34413 	.word	0x3fd34413
 800bfe0:	7ff00000 	.word	0x7ff00000
 800bfe4:	080100e5 	.word	0x080100e5
 800bfe8:	080100dc 	.word	0x080100dc
 800bfec:	080100b9 	.word	0x080100b9
 800bff0:	08010118 	.word	0x08010118
 800bff4:	080100f0 	.word	0x080100f0
 800bff8:	07de      	lsls	r6, r3, #31
 800bffa:	d504      	bpl.n	800c006 <_dtoa_r+0x336>
 800bffc:	ed91 6b00 	vldr	d6, [r1]
 800c000:	3201      	adds	r2, #1
 800c002:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c006:	105b      	asrs	r3, r3, #1
 800c008:	3108      	adds	r1, #8
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d1f4      	bne.n	800bff8 <_dtoa_r+0x328>
 800c00e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c012:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c016:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c01a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f000 80a7 	beq.w	800c170 <_dtoa_r+0x4a0>
 800c022:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c026:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c02a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c032:	f140 809d 	bpl.w	800c170 <_dtoa_r+0x4a0>
 800c036:	f1b9 0f00 	cmp.w	r9, #0
 800c03a:	f000 8099 	beq.w	800c170 <_dtoa_r+0x4a0>
 800c03e:	9b06      	ldr	r3, [sp, #24]
 800c040:	2b00      	cmp	r3, #0
 800c042:	dd30      	ble.n	800c0a6 <_dtoa_r+0x3d6>
 800c044:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c048:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c04c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c050:	9d06      	ldr	r5, [sp, #24]
 800c052:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c056:	3201      	adds	r2, #1
 800c058:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c05c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c060:	ee07 2a90 	vmov	s15, r2
 800c064:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c068:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c06c:	ed8d 5b02 	vstr	d5, [sp, #8]
 800c070:	9a03      	ldr	r2, [sp, #12]
 800c072:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c076:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800c07a:	2d00      	cmp	r5, #0
 800c07c:	d17b      	bne.n	800c176 <_dtoa_r+0x4a6>
 800c07e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c082:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c086:	ec41 0b17 	vmov	d7, r0, r1
 800c08a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c092:	f300 8253 	bgt.w	800c53c <_dtoa_r+0x86c>
 800c096:	eeb1 7b47 	vneg.f64	d7, d7
 800c09a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a2:	f100 8249 	bmi.w	800c538 <_dtoa_r+0x868>
 800c0a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c0aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	f2c0 8119 	blt.w	800c2e8 <_dtoa_r+0x618>
 800c0b6:	f1bb 0f0e 	cmp.w	fp, #14
 800c0ba:	f300 8115 	bgt.w	800c2e8 <_dtoa_r+0x618>
 800c0be:	4bc3      	ldr	r3, [pc, #780]	; (800c3cc <_dtoa_r+0x6fc>)
 800c0c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c0c4:	ed93 6b00 	vldr	d6, [r3]
 800c0c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	f280 80ba 	bge.w	800c244 <_dtoa_r+0x574>
 800c0d0:	f1b9 0f00 	cmp.w	r9, #0
 800c0d4:	f300 80b6 	bgt.w	800c244 <_dtoa_r+0x574>
 800c0d8:	f040 822d 	bne.w	800c536 <_dtoa_r+0x866>
 800c0dc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c0e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c0e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0f0:	464d      	mov	r5, r9
 800c0f2:	464f      	mov	r7, r9
 800c0f4:	f280 8204 	bge.w	800c500 <_dtoa_r+0x830>
 800c0f8:	9b04      	ldr	r3, [sp, #16]
 800c0fa:	9a04      	ldr	r2, [sp, #16]
 800c0fc:	1c5e      	adds	r6, r3, #1
 800c0fe:	2331      	movs	r3, #49	; 0x31
 800c100:	7013      	strb	r3, [r2, #0]
 800c102:	f10b 0b01 	add.w	fp, fp, #1
 800c106:	e1ff      	b.n	800c508 <_dtoa_r+0x838>
 800c108:	2202      	movs	r2, #2
 800c10a:	e731      	b.n	800bf70 <_dtoa_r+0x2a0>
 800c10c:	d02e      	beq.n	800c16c <_dtoa_r+0x49c>
 800c10e:	f1cb 0300 	rsb	r3, fp, #0
 800c112:	4aae      	ldr	r2, [pc, #696]	; (800c3cc <_dtoa_r+0x6fc>)
 800c114:	f003 010f 	and.w	r1, r3, #15
 800c118:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c11c:	ed92 7b00 	vldr	d7, [r2]
 800c120:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800c124:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c128:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c12c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800c130:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800c134:	49a6      	ldr	r1, [pc, #664]	; (800c3d0 <_dtoa_r+0x700>)
 800c136:	111b      	asrs	r3, r3, #4
 800c138:	2000      	movs	r0, #0
 800c13a:	2202      	movs	r2, #2
 800c13c:	b93b      	cbnz	r3, 800c14e <_dtoa_r+0x47e>
 800c13e:	2800      	cmp	r0, #0
 800c140:	f43f af6b 	beq.w	800c01a <_dtoa_r+0x34a>
 800c144:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c148:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c14c:	e765      	b.n	800c01a <_dtoa_r+0x34a>
 800c14e:	07dd      	lsls	r5, r3, #31
 800c150:	d509      	bpl.n	800c166 <_dtoa_r+0x496>
 800c152:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800c156:	ed91 7b00 	vldr	d7, [r1]
 800c15a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c15e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c162:	3201      	adds	r2, #1
 800c164:	2001      	movs	r0, #1
 800c166:	105b      	asrs	r3, r3, #1
 800c168:	3108      	adds	r1, #8
 800c16a:	e7e7      	b.n	800c13c <_dtoa_r+0x46c>
 800c16c:	2202      	movs	r2, #2
 800c16e:	e754      	b.n	800c01a <_dtoa_r+0x34a>
 800c170:	465b      	mov	r3, fp
 800c172:	464d      	mov	r5, r9
 800c174:	e770      	b.n	800c058 <_dtoa_r+0x388>
 800c176:	4a95      	ldr	r2, [pc, #596]	; (800c3cc <_dtoa_r+0x6fc>)
 800c178:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800c17c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c182:	ec41 0b17 	vmov	d7, r0, r1
 800c186:	b35a      	cbz	r2, 800c1e0 <_dtoa_r+0x510>
 800c188:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c18c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c190:	9e04      	ldr	r6, [sp, #16]
 800c192:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c196:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c19a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c19e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c1a2:	ee14 2a90 	vmov	r2, s9
 800c1a6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c1aa:	3230      	adds	r2, #48	; 0x30
 800c1ac:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c1b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1b8:	f806 2b01 	strb.w	r2, [r6], #1
 800c1bc:	d43b      	bmi.n	800c236 <_dtoa_r+0x566>
 800c1be:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c1c2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ca:	d472      	bmi.n	800c2b2 <_dtoa_r+0x5e2>
 800c1cc:	9a04      	ldr	r2, [sp, #16]
 800c1ce:	1ab2      	subs	r2, r6, r2
 800c1d0:	4295      	cmp	r5, r2
 800c1d2:	f77f af68 	ble.w	800c0a6 <_dtoa_r+0x3d6>
 800c1d6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c1da:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c1de:	e7de      	b.n	800c19e <_dtoa_r+0x4ce>
 800c1e0:	9a04      	ldr	r2, [sp, #16]
 800c1e2:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c1e6:	1956      	adds	r6, r2, r5
 800c1e8:	4611      	mov	r1, r2
 800c1ea:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c1ee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c1f2:	ee14 2a90 	vmov	r2, s9
 800c1f6:	3230      	adds	r2, #48	; 0x30
 800c1f8:	f801 2b01 	strb.w	r2, [r1], #1
 800c1fc:	42b1      	cmp	r1, r6
 800c1fe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c202:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c206:	d11a      	bne.n	800c23e <_dtoa_r+0x56e>
 800c208:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c20c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c210:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c218:	dc4b      	bgt.n	800c2b2 <_dtoa_r+0x5e2>
 800c21a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c21e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c226:	f57f af3e 	bpl.w	800c0a6 <_dtoa_r+0x3d6>
 800c22a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c22e:	2a30      	cmp	r2, #48	; 0x30
 800c230:	f106 31ff 	add.w	r1, r6, #4294967295
 800c234:	d001      	beq.n	800c23a <_dtoa_r+0x56a>
 800c236:	469b      	mov	fp, r3
 800c238:	e02a      	b.n	800c290 <_dtoa_r+0x5c0>
 800c23a:	460e      	mov	r6, r1
 800c23c:	e7f5      	b.n	800c22a <_dtoa_r+0x55a>
 800c23e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c242:	e7d4      	b.n	800c1ee <_dtoa_r+0x51e>
 800c244:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c248:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c24c:	9e04      	ldr	r6, [sp, #16]
 800c24e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c252:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c256:	ee15 3a10 	vmov	r3, s10
 800c25a:	3330      	adds	r3, #48	; 0x30
 800c25c:	f806 3b01 	strb.w	r3, [r6], #1
 800c260:	9b04      	ldr	r3, [sp, #16]
 800c262:	1af3      	subs	r3, r6, r3
 800c264:	4599      	cmp	r9, r3
 800c266:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c26a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c26e:	d133      	bne.n	800c2d8 <_dtoa_r+0x608>
 800c270:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c274:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c27c:	dc18      	bgt.n	800c2b0 <_dtoa_r+0x5e0>
 800c27e:	eeb4 7b46 	vcmp.f64	d7, d6
 800c282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c286:	d103      	bne.n	800c290 <_dtoa_r+0x5c0>
 800c288:	ee15 3a10 	vmov	r3, s10
 800c28c:	07db      	lsls	r3, r3, #31
 800c28e:	d40f      	bmi.n	800c2b0 <_dtoa_r+0x5e0>
 800c290:	9901      	ldr	r1, [sp, #4]
 800c292:	4620      	mov	r0, r4
 800c294:	f000 faac 	bl	800c7f0 <_Bfree>
 800c298:	2300      	movs	r3, #0
 800c29a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c29c:	7033      	strb	r3, [r6, #0]
 800c29e:	f10b 0301 	add.w	r3, fp, #1
 800c2a2:	6013      	str	r3, [r2, #0]
 800c2a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	f43f ad5b 	beq.w	800bd62 <_dtoa_r+0x92>
 800c2ac:	601e      	str	r6, [r3, #0]
 800c2ae:	e558      	b.n	800bd62 <_dtoa_r+0x92>
 800c2b0:	465b      	mov	r3, fp
 800c2b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c2b6:	2939      	cmp	r1, #57	; 0x39
 800c2b8:	f106 32ff 	add.w	r2, r6, #4294967295
 800c2bc:	d106      	bne.n	800c2cc <_dtoa_r+0x5fc>
 800c2be:	9904      	ldr	r1, [sp, #16]
 800c2c0:	4291      	cmp	r1, r2
 800c2c2:	d107      	bne.n	800c2d4 <_dtoa_r+0x604>
 800c2c4:	2230      	movs	r2, #48	; 0x30
 800c2c6:	700a      	strb	r2, [r1, #0]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	460a      	mov	r2, r1
 800c2cc:	7811      	ldrb	r1, [r2, #0]
 800c2ce:	3101      	adds	r1, #1
 800c2d0:	7011      	strb	r1, [r2, #0]
 800c2d2:	e7b0      	b.n	800c236 <_dtoa_r+0x566>
 800c2d4:	4616      	mov	r6, r2
 800c2d6:	e7ec      	b.n	800c2b2 <_dtoa_r+0x5e2>
 800c2d8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c2dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2e4:	d1b3      	bne.n	800c24e <_dtoa_r+0x57e>
 800c2e6:	e7d3      	b.n	800c290 <_dtoa_r+0x5c0>
 800c2e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2ea:	2a00      	cmp	r2, #0
 800c2ec:	f000 808d 	beq.w	800c40a <_dtoa_r+0x73a>
 800c2f0:	9a08      	ldr	r2, [sp, #32]
 800c2f2:	2a01      	cmp	r2, #1
 800c2f4:	dc72      	bgt.n	800c3dc <_dtoa_r+0x70c>
 800c2f6:	2f00      	cmp	r7, #0
 800c2f8:	d06c      	beq.n	800c3d4 <_dtoa_r+0x704>
 800c2fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c2fe:	4645      	mov	r5, r8
 800c300:	4656      	mov	r6, sl
 800c302:	9a07      	ldr	r2, [sp, #28]
 800c304:	2101      	movs	r1, #1
 800c306:	441a      	add	r2, r3
 800c308:	4620      	mov	r0, r4
 800c30a:	449a      	add	sl, r3
 800c30c:	9207      	str	r2, [sp, #28]
 800c30e:	f000 fb0f 	bl	800c930 <__i2b>
 800c312:	4607      	mov	r7, r0
 800c314:	2e00      	cmp	r6, #0
 800c316:	dd0b      	ble.n	800c330 <_dtoa_r+0x660>
 800c318:	9b07      	ldr	r3, [sp, #28]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	dd08      	ble.n	800c330 <_dtoa_r+0x660>
 800c31e:	42b3      	cmp	r3, r6
 800c320:	9a07      	ldr	r2, [sp, #28]
 800c322:	bfa8      	it	ge
 800c324:	4633      	movge	r3, r6
 800c326:	ebaa 0a03 	sub.w	sl, sl, r3
 800c32a:	1af6      	subs	r6, r6, r3
 800c32c:	1ad3      	subs	r3, r2, r3
 800c32e:	9307      	str	r3, [sp, #28]
 800c330:	f1b8 0f00 	cmp.w	r8, #0
 800c334:	d01d      	beq.n	800c372 <_dtoa_r+0x6a2>
 800c336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d06a      	beq.n	800c412 <_dtoa_r+0x742>
 800c33c:	b18d      	cbz	r5, 800c362 <_dtoa_r+0x692>
 800c33e:	4639      	mov	r1, r7
 800c340:	462a      	mov	r2, r5
 800c342:	4620      	mov	r0, r4
 800c344:	f000 fb94 	bl	800ca70 <__pow5mult>
 800c348:	9a01      	ldr	r2, [sp, #4]
 800c34a:	4601      	mov	r1, r0
 800c34c:	4607      	mov	r7, r0
 800c34e:	4620      	mov	r0, r4
 800c350:	f000 faf7 	bl	800c942 <__multiply>
 800c354:	9901      	ldr	r1, [sp, #4]
 800c356:	900c      	str	r0, [sp, #48]	; 0x30
 800c358:	4620      	mov	r0, r4
 800c35a:	f000 fa49 	bl	800c7f0 <_Bfree>
 800c35e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c360:	9301      	str	r3, [sp, #4]
 800c362:	ebb8 0205 	subs.w	r2, r8, r5
 800c366:	d004      	beq.n	800c372 <_dtoa_r+0x6a2>
 800c368:	9901      	ldr	r1, [sp, #4]
 800c36a:	4620      	mov	r0, r4
 800c36c:	f000 fb80 	bl	800ca70 <__pow5mult>
 800c370:	9001      	str	r0, [sp, #4]
 800c372:	2101      	movs	r1, #1
 800c374:	4620      	mov	r0, r4
 800c376:	f000 fadb 	bl	800c930 <__i2b>
 800c37a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c37c:	4605      	mov	r5, r0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f000 81ca 	beq.w	800c718 <_dtoa_r+0xa48>
 800c384:	461a      	mov	r2, r3
 800c386:	4601      	mov	r1, r0
 800c388:	4620      	mov	r0, r4
 800c38a:	f000 fb71 	bl	800ca70 <__pow5mult>
 800c38e:	9b08      	ldr	r3, [sp, #32]
 800c390:	2b01      	cmp	r3, #1
 800c392:	4605      	mov	r5, r0
 800c394:	dc44      	bgt.n	800c420 <_dtoa_r+0x750>
 800c396:	9b02      	ldr	r3, [sp, #8]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d13c      	bne.n	800c416 <_dtoa_r+0x746>
 800c39c:	9b03      	ldr	r3, [sp, #12]
 800c39e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d137      	bne.n	800c416 <_dtoa_r+0x746>
 800c3a6:	9b03      	ldr	r3, [sp, #12]
 800c3a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c3ac:	0d1b      	lsrs	r3, r3, #20
 800c3ae:	051b      	lsls	r3, r3, #20
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d033      	beq.n	800c41c <_dtoa_r+0x74c>
 800c3b4:	9b07      	ldr	r3, [sp, #28]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	f10a 0a01 	add.w	sl, sl, #1
 800c3bc:	9307      	str	r3, [sp, #28]
 800c3be:	f04f 0801 	mov.w	r8, #1
 800c3c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3c4:	bb73      	cbnz	r3, 800c424 <_dtoa_r+0x754>
 800c3c6:	2001      	movs	r0, #1
 800c3c8:	e034      	b.n	800c434 <_dtoa_r+0x764>
 800c3ca:	bf00      	nop
 800c3cc:	08010118 	.word	0x08010118
 800c3d0:	080100f0 	.word	0x080100f0
 800c3d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c3d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c3da:	e790      	b.n	800c2fe <_dtoa_r+0x62e>
 800c3dc:	f109 35ff 	add.w	r5, r9, #4294967295
 800c3e0:	45a8      	cmp	r8, r5
 800c3e2:	bfbf      	itttt	lt
 800c3e4:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800c3e6:	eba5 0808 	sublt.w	r8, r5, r8
 800c3ea:	4443      	addlt	r3, r8
 800c3ec:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800c3ee:	bfb6      	itet	lt
 800c3f0:	46a8      	movlt	r8, r5
 800c3f2:	eba8 0505 	subge.w	r5, r8, r5
 800c3f6:	2500      	movlt	r5, #0
 800c3f8:	f1b9 0f00 	cmp.w	r9, #0
 800c3fc:	bfb9      	ittee	lt
 800c3fe:	ebaa 0609 	sublt.w	r6, sl, r9
 800c402:	2300      	movlt	r3, #0
 800c404:	4656      	movge	r6, sl
 800c406:	464b      	movge	r3, r9
 800c408:	e77b      	b.n	800c302 <_dtoa_r+0x632>
 800c40a:	4645      	mov	r5, r8
 800c40c:	4656      	mov	r6, sl
 800c40e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c410:	e780      	b.n	800c314 <_dtoa_r+0x644>
 800c412:	4642      	mov	r2, r8
 800c414:	e7a8      	b.n	800c368 <_dtoa_r+0x698>
 800c416:	f04f 0800 	mov.w	r8, #0
 800c41a:	e7d2      	b.n	800c3c2 <_dtoa_r+0x6f2>
 800c41c:	4698      	mov	r8, r3
 800c41e:	e7d0      	b.n	800c3c2 <_dtoa_r+0x6f2>
 800c420:	f04f 0800 	mov.w	r8, #0
 800c424:	692b      	ldr	r3, [r5, #16]
 800c426:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c42a:	6918      	ldr	r0, [r3, #16]
 800c42c:	f000 fa32 	bl	800c894 <__hi0bits>
 800c430:	f1c0 0020 	rsb	r0, r0, #32
 800c434:	9b07      	ldr	r3, [sp, #28]
 800c436:	4418      	add	r0, r3
 800c438:	f010 001f 	ands.w	r0, r0, #31
 800c43c:	d047      	beq.n	800c4ce <_dtoa_r+0x7fe>
 800c43e:	f1c0 0320 	rsb	r3, r0, #32
 800c442:	2b04      	cmp	r3, #4
 800c444:	dd3b      	ble.n	800c4be <_dtoa_r+0x7ee>
 800c446:	9b07      	ldr	r3, [sp, #28]
 800c448:	f1c0 001c 	rsb	r0, r0, #28
 800c44c:	4482      	add	sl, r0
 800c44e:	4406      	add	r6, r0
 800c450:	4403      	add	r3, r0
 800c452:	9307      	str	r3, [sp, #28]
 800c454:	f1ba 0f00 	cmp.w	sl, #0
 800c458:	dd05      	ble.n	800c466 <_dtoa_r+0x796>
 800c45a:	4652      	mov	r2, sl
 800c45c:	9901      	ldr	r1, [sp, #4]
 800c45e:	4620      	mov	r0, r4
 800c460:	f000 fb54 	bl	800cb0c <__lshift>
 800c464:	9001      	str	r0, [sp, #4]
 800c466:	9b07      	ldr	r3, [sp, #28]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	dd05      	ble.n	800c478 <_dtoa_r+0x7a8>
 800c46c:	4629      	mov	r1, r5
 800c46e:	461a      	mov	r2, r3
 800c470:	4620      	mov	r0, r4
 800c472:	f000 fb4b 	bl	800cb0c <__lshift>
 800c476:	4605      	mov	r5, r0
 800c478:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c47a:	b353      	cbz	r3, 800c4d2 <_dtoa_r+0x802>
 800c47c:	4629      	mov	r1, r5
 800c47e:	9801      	ldr	r0, [sp, #4]
 800c480:	f000 fb98 	bl	800cbb4 <__mcmp>
 800c484:	2800      	cmp	r0, #0
 800c486:	da24      	bge.n	800c4d2 <_dtoa_r+0x802>
 800c488:	2300      	movs	r3, #0
 800c48a:	220a      	movs	r2, #10
 800c48c:	9901      	ldr	r1, [sp, #4]
 800c48e:	4620      	mov	r0, r4
 800c490:	f000 f9c5 	bl	800c81e <__multadd>
 800c494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c496:	9001      	str	r0, [sp, #4]
 800c498:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f000 8142 	beq.w	800c726 <_dtoa_r+0xa56>
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	4639      	mov	r1, r7
 800c4a6:	220a      	movs	r2, #10
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	f000 f9b8 	bl	800c81e <__multadd>
 800c4ae:	9b06      	ldr	r3, [sp, #24]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	4607      	mov	r7, r0
 800c4b4:	dc4b      	bgt.n	800c54e <_dtoa_r+0x87e>
 800c4b6:	9b08      	ldr	r3, [sp, #32]
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	dd48      	ble.n	800c54e <_dtoa_r+0x87e>
 800c4bc:	e011      	b.n	800c4e2 <_dtoa_r+0x812>
 800c4be:	d0c9      	beq.n	800c454 <_dtoa_r+0x784>
 800c4c0:	9a07      	ldr	r2, [sp, #28]
 800c4c2:	331c      	adds	r3, #28
 800c4c4:	441a      	add	r2, r3
 800c4c6:	449a      	add	sl, r3
 800c4c8:	441e      	add	r6, r3
 800c4ca:	4613      	mov	r3, r2
 800c4cc:	e7c1      	b.n	800c452 <_dtoa_r+0x782>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	e7f6      	b.n	800c4c0 <_dtoa_r+0x7f0>
 800c4d2:	f1b9 0f00 	cmp.w	r9, #0
 800c4d6:	dc34      	bgt.n	800c542 <_dtoa_r+0x872>
 800c4d8:	9b08      	ldr	r3, [sp, #32]
 800c4da:	2b02      	cmp	r3, #2
 800c4dc:	dd31      	ble.n	800c542 <_dtoa_r+0x872>
 800c4de:	f8cd 9018 	str.w	r9, [sp, #24]
 800c4e2:	9b06      	ldr	r3, [sp, #24]
 800c4e4:	b963      	cbnz	r3, 800c500 <_dtoa_r+0x830>
 800c4e6:	4629      	mov	r1, r5
 800c4e8:	2205      	movs	r2, #5
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	f000 f997 	bl	800c81e <__multadd>
 800c4f0:	4601      	mov	r1, r0
 800c4f2:	4605      	mov	r5, r0
 800c4f4:	9801      	ldr	r0, [sp, #4]
 800c4f6:	f000 fb5d 	bl	800cbb4 <__mcmp>
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	f73f adfc 	bgt.w	800c0f8 <_dtoa_r+0x428>
 800c500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c502:	9e04      	ldr	r6, [sp, #16]
 800c504:	ea6f 0b03 	mvn.w	fp, r3
 800c508:	f04f 0900 	mov.w	r9, #0
 800c50c:	4629      	mov	r1, r5
 800c50e:	4620      	mov	r0, r4
 800c510:	f000 f96e 	bl	800c7f0 <_Bfree>
 800c514:	2f00      	cmp	r7, #0
 800c516:	f43f aebb 	beq.w	800c290 <_dtoa_r+0x5c0>
 800c51a:	f1b9 0f00 	cmp.w	r9, #0
 800c51e:	d005      	beq.n	800c52c <_dtoa_r+0x85c>
 800c520:	45b9      	cmp	r9, r7
 800c522:	d003      	beq.n	800c52c <_dtoa_r+0x85c>
 800c524:	4649      	mov	r1, r9
 800c526:	4620      	mov	r0, r4
 800c528:	f000 f962 	bl	800c7f0 <_Bfree>
 800c52c:	4639      	mov	r1, r7
 800c52e:	4620      	mov	r0, r4
 800c530:	f000 f95e 	bl	800c7f0 <_Bfree>
 800c534:	e6ac      	b.n	800c290 <_dtoa_r+0x5c0>
 800c536:	2500      	movs	r5, #0
 800c538:	462f      	mov	r7, r5
 800c53a:	e7e1      	b.n	800c500 <_dtoa_r+0x830>
 800c53c:	469b      	mov	fp, r3
 800c53e:	462f      	mov	r7, r5
 800c540:	e5da      	b.n	800c0f8 <_dtoa_r+0x428>
 800c542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c544:	f8cd 9018 	str.w	r9, [sp, #24]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	f000 80f3 	beq.w	800c734 <_dtoa_r+0xa64>
 800c54e:	2e00      	cmp	r6, #0
 800c550:	dd05      	ble.n	800c55e <_dtoa_r+0x88e>
 800c552:	4639      	mov	r1, r7
 800c554:	4632      	mov	r2, r6
 800c556:	4620      	mov	r0, r4
 800c558:	f000 fad8 	bl	800cb0c <__lshift>
 800c55c:	4607      	mov	r7, r0
 800c55e:	f1b8 0f00 	cmp.w	r8, #0
 800c562:	d04c      	beq.n	800c5fe <_dtoa_r+0x92e>
 800c564:	6879      	ldr	r1, [r7, #4]
 800c566:	4620      	mov	r0, r4
 800c568:	f000 f90e 	bl	800c788 <_Balloc>
 800c56c:	693a      	ldr	r2, [r7, #16]
 800c56e:	3202      	adds	r2, #2
 800c570:	4606      	mov	r6, r0
 800c572:	0092      	lsls	r2, r2, #2
 800c574:	f107 010c 	add.w	r1, r7, #12
 800c578:	300c      	adds	r0, #12
 800c57a:	f7fe fddf 	bl	800b13c <memcpy>
 800c57e:	2201      	movs	r2, #1
 800c580:	4631      	mov	r1, r6
 800c582:	4620      	mov	r0, r4
 800c584:	f000 fac2 	bl	800cb0c <__lshift>
 800c588:	9b02      	ldr	r3, [sp, #8]
 800c58a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c58e:	f003 0301 	and.w	r3, r3, #1
 800c592:	46b9      	mov	r9, r7
 800c594:	9307      	str	r3, [sp, #28]
 800c596:	4607      	mov	r7, r0
 800c598:	4629      	mov	r1, r5
 800c59a:	9801      	ldr	r0, [sp, #4]
 800c59c:	f7ff fb0c 	bl	800bbb8 <quorem>
 800c5a0:	4649      	mov	r1, r9
 800c5a2:	4606      	mov	r6, r0
 800c5a4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c5a8:	9801      	ldr	r0, [sp, #4]
 800c5aa:	f000 fb03 	bl	800cbb4 <__mcmp>
 800c5ae:	463a      	mov	r2, r7
 800c5b0:	9002      	str	r0, [sp, #8]
 800c5b2:	4629      	mov	r1, r5
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	f000 fb17 	bl	800cbe8 <__mdiff>
 800c5ba:	68c3      	ldr	r3, [r0, #12]
 800c5bc:	4602      	mov	r2, r0
 800c5be:	bb03      	cbnz	r3, 800c602 <_dtoa_r+0x932>
 800c5c0:	4601      	mov	r1, r0
 800c5c2:	9009      	str	r0, [sp, #36]	; 0x24
 800c5c4:	9801      	ldr	r0, [sp, #4]
 800c5c6:	f000 faf5 	bl	800cbb4 <__mcmp>
 800c5ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	4611      	mov	r1, r2
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c5d4:	f000 f90c 	bl	800c7f0 <_Bfree>
 800c5d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5da:	b9a3      	cbnz	r3, 800c606 <_dtoa_r+0x936>
 800c5dc:	9a08      	ldr	r2, [sp, #32]
 800c5de:	b992      	cbnz	r2, 800c606 <_dtoa_r+0x936>
 800c5e0:	9a07      	ldr	r2, [sp, #28]
 800c5e2:	b982      	cbnz	r2, 800c606 <_dtoa_r+0x936>
 800c5e4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c5e8:	d029      	beq.n	800c63e <_dtoa_r+0x96e>
 800c5ea:	9b02      	ldr	r3, [sp, #8]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	dd01      	ble.n	800c5f4 <_dtoa_r+0x924>
 800c5f0:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800c5f4:	f10a 0601 	add.w	r6, sl, #1
 800c5f8:	f88a 8000 	strb.w	r8, [sl]
 800c5fc:	e786      	b.n	800c50c <_dtoa_r+0x83c>
 800c5fe:	4638      	mov	r0, r7
 800c600:	e7c2      	b.n	800c588 <_dtoa_r+0x8b8>
 800c602:	2301      	movs	r3, #1
 800c604:	e7e3      	b.n	800c5ce <_dtoa_r+0x8fe>
 800c606:	9a02      	ldr	r2, [sp, #8]
 800c608:	2a00      	cmp	r2, #0
 800c60a:	db04      	blt.n	800c616 <_dtoa_r+0x946>
 800c60c:	d124      	bne.n	800c658 <_dtoa_r+0x988>
 800c60e:	9a08      	ldr	r2, [sp, #32]
 800c610:	bb12      	cbnz	r2, 800c658 <_dtoa_r+0x988>
 800c612:	9a07      	ldr	r2, [sp, #28]
 800c614:	bb02      	cbnz	r2, 800c658 <_dtoa_r+0x988>
 800c616:	2b00      	cmp	r3, #0
 800c618:	ddec      	ble.n	800c5f4 <_dtoa_r+0x924>
 800c61a:	2201      	movs	r2, #1
 800c61c:	9901      	ldr	r1, [sp, #4]
 800c61e:	4620      	mov	r0, r4
 800c620:	f000 fa74 	bl	800cb0c <__lshift>
 800c624:	4629      	mov	r1, r5
 800c626:	9001      	str	r0, [sp, #4]
 800c628:	f000 fac4 	bl	800cbb4 <__mcmp>
 800c62c:	2800      	cmp	r0, #0
 800c62e:	dc03      	bgt.n	800c638 <_dtoa_r+0x968>
 800c630:	d1e0      	bne.n	800c5f4 <_dtoa_r+0x924>
 800c632:	f018 0f01 	tst.w	r8, #1
 800c636:	d0dd      	beq.n	800c5f4 <_dtoa_r+0x924>
 800c638:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c63c:	d1d8      	bne.n	800c5f0 <_dtoa_r+0x920>
 800c63e:	2339      	movs	r3, #57	; 0x39
 800c640:	f10a 0601 	add.w	r6, sl, #1
 800c644:	f88a 3000 	strb.w	r3, [sl]
 800c648:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c64c:	2b39      	cmp	r3, #57	; 0x39
 800c64e:	f106 32ff 	add.w	r2, r6, #4294967295
 800c652:	d04c      	beq.n	800c6ee <_dtoa_r+0xa1e>
 800c654:	3301      	adds	r3, #1
 800c656:	e051      	b.n	800c6fc <_dtoa_r+0xa2c>
 800c658:	2b00      	cmp	r3, #0
 800c65a:	f10a 0601 	add.w	r6, sl, #1
 800c65e:	dd05      	ble.n	800c66c <_dtoa_r+0x99c>
 800c660:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c664:	d0eb      	beq.n	800c63e <_dtoa_r+0x96e>
 800c666:	f108 0801 	add.w	r8, r8, #1
 800c66a:	e7c5      	b.n	800c5f8 <_dtoa_r+0x928>
 800c66c:	9b04      	ldr	r3, [sp, #16]
 800c66e:	9a06      	ldr	r2, [sp, #24]
 800c670:	f806 8c01 	strb.w	r8, [r6, #-1]
 800c674:	1af3      	subs	r3, r6, r3
 800c676:	4293      	cmp	r3, r2
 800c678:	d021      	beq.n	800c6be <_dtoa_r+0x9ee>
 800c67a:	2300      	movs	r3, #0
 800c67c:	220a      	movs	r2, #10
 800c67e:	9901      	ldr	r1, [sp, #4]
 800c680:	4620      	mov	r0, r4
 800c682:	f000 f8cc 	bl	800c81e <__multadd>
 800c686:	45b9      	cmp	r9, r7
 800c688:	9001      	str	r0, [sp, #4]
 800c68a:	f04f 0300 	mov.w	r3, #0
 800c68e:	f04f 020a 	mov.w	r2, #10
 800c692:	4649      	mov	r1, r9
 800c694:	4620      	mov	r0, r4
 800c696:	d105      	bne.n	800c6a4 <_dtoa_r+0x9d4>
 800c698:	f000 f8c1 	bl	800c81e <__multadd>
 800c69c:	4681      	mov	r9, r0
 800c69e:	4607      	mov	r7, r0
 800c6a0:	46b2      	mov	sl, r6
 800c6a2:	e779      	b.n	800c598 <_dtoa_r+0x8c8>
 800c6a4:	f000 f8bb 	bl	800c81e <__multadd>
 800c6a8:	4639      	mov	r1, r7
 800c6aa:	4681      	mov	r9, r0
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	220a      	movs	r2, #10
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	f000 f8b4 	bl	800c81e <__multadd>
 800c6b6:	4607      	mov	r7, r0
 800c6b8:	e7f2      	b.n	800c6a0 <_dtoa_r+0x9d0>
 800c6ba:	f04f 0900 	mov.w	r9, #0
 800c6be:	2201      	movs	r2, #1
 800c6c0:	9901      	ldr	r1, [sp, #4]
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	f000 fa22 	bl	800cb0c <__lshift>
 800c6c8:	4629      	mov	r1, r5
 800c6ca:	9001      	str	r0, [sp, #4]
 800c6cc:	f000 fa72 	bl	800cbb4 <__mcmp>
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	dcb9      	bgt.n	800c648 <_dtoa_r+0x978>
 800c6d4:	d102      	bne.n	800c6dc <_dtoa_r+0xa0c>
 800c6d6:	f018 0f01 	tst.w	r8, #1
 800c6da:	d1b5      	bne.n	800c648 <_dtoa_r+0x978>
 800c6dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c6e0:	2b30      	cmp	r3, #48	; 0x30
 800c6e2:	f106 32ff 	add.w	r2, r6, #4294967295
 800c6e6:	f47f af11 	bne.w	800c50c <_dtoa_r+0x83c>
 800c6ea:	4616      	mov	r6, r2
 800c6ec:	e7f6      	b.n	800c6dc <_dtoa_r+0xa0c>
 800c6ee:	9b04      	ldr	r3, [sp, #16]
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d105      	bne.n	800c700 <_dtoa_r+0xa30>
 800c6f4:	9a04      	ldr	r2, [sp, #16]
 800c6f6:	f10b 0b01 	add.w	fp, fp, #1
 800c6fa:	2331      	movs	r3, #49	; 0x31
 800c6fc:	7013      	strb	r3, [r2, #0]
 800c6fe:	e705      	b.n	800c50c <_dtoa_r+0x83c>
 800c700:	4616      	mov	r6, r2
 800c702:	e7a1      	b.n	800c648 <_dtoa_r+0x978>
 800c704:	4b16      	ldr	r3, [pc, #88]	; (800c760 <_dtoa_r+0xa90>)
 800c706:	f7ff bb48 	b.w	800bd9a <_dtoa_r+0xca>
 800c70a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f47f ab23 	bne.w	800bd58 <_dtoa_r+0x88>
 800c712:	4b14      	ldr	r3, [pc, #80]	; (800c764 <_dtoa_r+0xa94>)
 800c714:	f7ff bb41 	b.w	800bd9a <_dtoa_r+0xca>
 800c718:	9b08      	ldr	r3, [sp, #32]
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	f77f ae3b 	ble.w	800c396 <_dtoa_r+0x6c6>
 800c720:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800c724:	e64f      	b.n	800c3c6 <_dtoa_r+0x6f6>
 800c726:	9b06      	ldr	r3, [sp, #24]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	dc03      	bgt.n	800c734 <_dtoa_r+0xa64>
 800c72c:	9b08      	ldr	r3, [sp, #32]
 800c72e:	2b02      	cmp	r3, #2
 800c730:	f73f aed7 	bgt.w	800c4e2 <_dtoa_r+0x812>
 800c734:	9e04      	ldr	r6, [sp, #16]
 800c736:	9801      	ldr	r0, [sp, #4]
 800c738:	4629      	mov	r1, r5
 800c73a:	f7ff fa3d 	bl	800bbb8 <quorem>
 800c73e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c742:	f806 8b01 	strb.w	r8, [r6], #1
 800c746:	9b04      	ldr	r3, [sp, #16]
 800c748:	9a06      	ldr	r2, [sp, #24]
 800c74a:	1af3      	subs	r3, r6, r3
 800c74c:	429a      	cmp	r2, r3
 800c74e:	ddb4      	ble.n	800c6ba <_dtoa_r+0x9ea>
 800c750:	2300      	movs	r3, #0
 800c752:	220a      	movs	r2, #10
 800c754:	9901      	ldr	r1, [sp, #4]
 800c756:	4620      	mov	r0, r4
 800c758:	f000 f861 	bl	800c81e <__multadd>
 800c75c:	9001      	str	r0, [sp, #4]
 800c75e:	e7ea      	b.n	800c736 <_dtoa_r+0xa66>
 800c760:	080100b8 	.word	0x080100b8
 800c764:	080100dc 	.word	0x080100dc

0800c768 <_localeconv_r>:
 800c768:	4b04      	ldr	r3, [pc, #16]	; (800c77c <_localeconv_r+0x14>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	6a18      	ldr	r0, [r3, #32]
 800c76e:	4b04      	ldr	r3, [pc, #16]	; (800c780 <_localeconv_r+0x18>)
 800c770:	2800      	cmp	r0, #0
 800c772:	bf08      	it	eq
 800c774:	4618      	moveq	r0, r3
 800c776:	30f0      	adds	r0, #240	; 0xf0
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	20000010 	.word	0x20000010
 800c780:	20000074 	.word	0x20000074

0800c784 <__malloc_lock>:
 800c784:	4770      	bx	lr

0800c786 <__malloc_unlock>:
 800c786:	4770      	bx	lr

0800c788 <_Balloc>:
 800c788:	b570      	push	{r4, r5, r6, lr}
 800c78a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c78c:	4604      	mov	r4, r0
 800c78e:	460e      	mov	r6, r1
 800c790:	b93d      	cbnz	r5, 800c7a2 <_Balloc+0x1a>
 800c792:	2010      	movs	r0, #16
 800c794:	f7fe fcc2 	bl	800b11c <malloc>
 800c798:	6260      	str	r0, [r4, #36]	; 0x24
 800c79a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c79e:	6005      	str	r5, [r0, #0]
 800c7a0:	60c5      	str	r5, [r0, #12]
 800c7a2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c7a4:	68eb      	ldr	r3, [r5, #12]
 800c7a6:	b183      	cbz	r3, 800c7ca <_Balloc+0x42>
 800c7a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7aa:	68db      	ldr	r3, [r3, #12]
 800c7ac:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c7b0:	b9b8      	cbnz	r0, 800c7e2 <_Balloc+0x5a>
 800c7b2:	2101      	movs	r1, #1
 800c7b4:	fa01 f506 	lsl.w	r5, r1, r6
 800c7b8:	1d6a      	adds	r2, r5, #5
 800c7ba:	0092      	lsls	r2, r2, #2
 800c7bc:	4620      	mov	r0, r4
 800c7be:	f000 fabf 	bl	800cd40 <_calloc_r>
 800c7c2:	b160      	cbz	r0, 800c7de <_Balloc+0x56>
 800c7c4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c7c8:	e00e      	b.n	800c7e8 <_Balloc+0x60>
 800c7ca:	2221      	movs	r2, #33	; 0x21
 800c7cc:	2104      	movs	r1, #4
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	f000 fab6 	bl	800cd40 <_calloc_r>
 800c7d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7d6:	60e8      	str	r0, [r5, #12]
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d1e4      	bne.n	800c7a8 <_Balloc+0x20>
 800c7de:	2000      	movs	r0, #0
 800c7e0:	bd70      	pop	{r4, r5, r6, pc}
 800c7e2:	6802      	ldr	r2, [r0, #0]
 800c7e4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c7ee:	e7f7      	b.n	800c7e0 <_Balloc+0x58>

0800c7f0 <_Bfree>:
 800c7f0:	b570      	push	{r4, r5, r6, lr}
 800c7f2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c7f4:	4606      	mov	r6, r0
 800c7f6:	460d      	mov	r5, r1
 800c7f8:	b93c      	cbnz	r4, 800c80a <_Bfree+0x1a>
 800c7fa:	2010      	movs	r0, #16
 800c7fc:	f7fe fc8e 	bl	800b11c <malloc>
 800c800:	6270      	str	r0, [r6, #36]	; 0x24
 800c802:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c806:	6004      	str	r4, [r0, #0]
 800c808:	60c4      	str	r4, [r0, #12]
 800c80a:	b13d      	cbz	r5, 800c81c <_Bfree+0x2c>
 800c80c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c80e:	686a      	ldr	r2, [r5, #4]
 800c810:	68db      	ldr	r3, [r3, #12]
 800c812:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c816:	6029      	str	r1, [r5, #0]
 800c818:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c81c:	bd70      	pop	{r4, r5, r6, pc}

0800c81e <__multadd>:
 800c81e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c822:	690d      	ldr	r5, [r1, #16]
 800c824:	461f      	mov	r7, r3
 800c826:	4606      	mov	r6, r0
 800c828:	460c      	mov	r4, r1
 800c82a:	f101 0c14 	add.w	ip, r1, #20
 800c82e:	2300      	movs	r3, #0
 800c830:	f8dc 0000 	ldr.w	r0, [ip]
 800c834:	b281      	uxth	r1, r0
 800c836:	fb02 7101 	mla	r1, r2, r1, r7
 800c83a:	0c0f      	lsrs	r7, r1, #16
 800c83c:	0c00      	lsrs	r0, r0, #16
 800c83e:	fb02 7000 	mla	r0, r2, r0, r7
 800c842:	b289      	uxth	r1, r1
 800c844:	3301      	adds	r3, #1
 800c846:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c84a:	429d      	cmp	r5, r3
 800c84c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c850:	f84c 1b04 	str.w	r1, [ip], #4
 800c854:	dcec      	bgt.n	800c830 <__multadd+0x12>
 800c856:	b1d7      	cbz	r7, 800c88e <__multadd+0x70>
 800c858:	68a3      	ldr	r3, [r4, #8]
 800c85a:	42ab      	cmp	r3, r5
 800c85c:	dc12      	bgt.n	800c884 <__multadd+0x66>
 800c85e:	6861      	ldr	r1, [r4, #4]
 800c860:	4630      	mov	r0, r6
 800c862:	3101      	adds	r1, #1
 800c864:	f7ff ff90 	bl	800c788 <_Balloc>
 800c868:	6922      	ldr	r2, [r4, #16]
 800c86a:	3202      	adds	r2, #2
 800c86c:	f104 010c 	add.w	r1, r4, #12
 800c870:	4680      	mov	r8, r0
 800c872:	0092      	lsls	r2, r2, #2
 800c874:	300c      	adds	r0, #12
 800c876:	f7fe fc61 	bl	800b13c <memcpy>
 800c87a:	4621      	mov	r1, r4
 800c87c:	4630      	mov	r0, r6
 800c87e:	f7ff ffb7 	bl	800c7f0 <_Bfree>
 800c882:	4644      	mov	r4, r8
 800c884:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c888:	3501      	adds	r5, #1
 800c88a:	615f      	str	r7, [r3, #20]
 800c88c:	6125      	str	r5, [r4, #16]
 800c88e:	4620      	mov	r0, r4
 800c890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c894 <__hi0bits>:
 800c894:	0c02      	lsrs	r2, r0, #16
 800c896:	0412      	lsls	r2, r2, #16
 800c898:	4603      	mov	r3, r0
 800c89a:	b9b2      	cbnz	r2, 800c8ca <__hi0bits+0x36>
 800c89c:	0403      	lsls	r3, r0, #16
 800c89e:	2010      	movs	r0, #16
 800c8a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c8a4:	bf04      	itt	eq
 800c8a6:	021b      	lsleq	r3, r3, #8
 800c8a8:	3008      	addeq	r0, #8
 800c8aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c8ae:	bf04      	itt	eq
 800c8b0:	011b      	lsleq	r3, r3, #4
 800c8b2:	3004      	addeq	r0, #4
 800c8b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c8b8:	bf04      	itt	eq
 800c8ba:	009b      	lsleq	r3, r3, #2
 800c8bc:	3002      	addeq	r0, #2
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	db06      	blt.n	800c8d0 <__hi0bits+0x3c>
 800c8c2:	005b      	lsls	r3, r3, #1
 800c8c4:	d503      	bpl.n	800c8ce <__hi0bits+0x3a>
 800c8c6:	3001      	adds	r0, #1
 800c8c8:	4770      	bx	lr
 800c8ca:	2000      	movs	r0, #0
 800c8cc:	e7e8      	b.n	800c8a0 <__hi0bits+0xc>
 800c8ce:	2020      	movs	r0, #32
 800c8d0:	4770      	bx	lr

0800c8d2 <__lo0bits>:
 800c8d2:	6803      	ldr	r3, [r0, #0]
 800c8d4:	f013 0207 	ands.w	r2, r3, #7
 800c8d8:	4601      	mov	r1, r0
 800c8da:	d00b      	beq.n	800c8f4 <__lo0bits+0x22>
 800c8dc:	07da      	lsls	r2, r3, #31
 800c8de:	d423      	bmi.n	800c928 <__lo0bits+0x56>
 800c8e0:	0798      	lsls	r0, r3, #30
 800c8e2:	bf49      	itett	mi
 800c8e4:	085b      	lsrmi	r3, r3, #1
 800c8e6:	089b      	lsrpl	r3, r3, #2
 800c8e8:	2001      	movmi	r0, #1
 800c8ea:	600b      	strmi	r3, [r1, #0]
 800c8ec:	bf5c      	itt	pl
 800c8ee:	600b      	strpl	r3, [r1, #0]
 800c8f0:	2002      	movpl	r0, #2
 800c8f2:	4770      	bx	lr
 800c8f4:	b298      	uxth	r0, r3
 800c8f6:	b9a8      	cbnz	r0, 800c924 <__lo0bits+0x52>
 800c8f8:	0c1b      	lsrs	r3, r3, #16
 800c8fa:	2010      	movs	r0, #16
 800c8fc:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c900:	bf04      	itt	eq
 800c902:	0a1b      	lsreq	r3, r3, #8
 800c904:	3008      	addeq	r0, #8
 800c906:	071a      	lsls	r2, r3, #28
 800c908:	bf04      	itt	eq
 800c90a:	091b      	lsreq	r3, r3, #4
 800c90c:	3004      	addeq	r0, #4
 800c90e:	079a      	lsls	r2, r3, #30
 800c910:	bf04      	itt	eq
 800c912:	089b      	lsreq	r3, r3, #2
 800c914:	3002      	addeq	r0, #2
 800c916:	07da      	lsls	r2, r3, #31
 800c918:	d402      	bmi.n	800c920 <__lo0bits+0x4e>
 800c91a:	085b      	lsrs	r3, r3, #1
 800c91c:	d006      	beq.n	800c92c <__lo0bits+0x5a>
 800c91e:	3001      	adds	r0, #1
 800c920:	600b      	str	r3, [r1, #0]
 800c922:	4770      	bx	lr
 800c924:	4610      	mov	r0, r2
 800c926:	e7e9      	b.n	800c8fc <__lo0bits+0x2a>
 800c928:	2000      	movs	r0, #0
 800c92a:	4770      	bx	lr
 800c92c:	2020      	movs	r0, #32
 800c92e:	4770      	bx	lr

0800c930 <__i2b>:
 800c930:	b510      	push	{r4, lr}
 800c932:	460c      	mov	r4, r1
 800c934:	2101      	movs	r1, #1
 800c936:	f7ff ff27 	bl	800c788 <_Balloc>
 800c93a:	2201      	movs	r2, #1
 800c93c:	6144      	str	r4, [r0, #20]
 800c93e:	6102      	str	r2, [r0, #16]
 800c940:	bd10      	pop	{r4, pc}

0800c942 <__multiply>:
 800c942:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c946:	4614      	mov	r4, r2
 800c948:	690a      	ldr	r2, [r1, #16]
 800c94a:	6923      	ldr	r3, [r4, #16]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	bfb8      	it	lt
 800c950:	460b      	movlt	r3, r1
 800c952:	4688      	mov	r8, r1
 800c954:	bfbc      	itt	lt
 800c956:	46a0      	movlt	r8, r4
 800c958:	461c      	movlt	r4, r3
 800c95a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c95e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c962:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c966:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c96a:	eb07 0609 	add.w	r6, r7, r9
 800c96e:	42b3      	cmp	r3, r6
 800c970:	bfb8      	it	lt
 800c972:	3101      	addlt	r1, #1
 800c974:	f7ff ff08 	bl	800c788 <_Balloc>
 800c978:	f100 0514 	add.w	r5, r0, #20
 800c97c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c980:	462b      	mov	r3, r5
 800c982:	2200      	movs	r2, #0
 800c984:	4573      	cmp	r3, lr
 800c986:	d316      	bcc.n	800c9b6 <__multiply+0x74>
 800c988:	f104 0214 	add.w	r2, r4, #20
 800c98c:	f108 0114 	add.w	r1, r8, #20
 800c990:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c994:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c998:	9300      	str	r3, [sp, #0]
 800c99a:	9b00      	ldr	r3, [sp, #0]
 800c99c:	9201      	str	r2, [sp, #4]
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d80c      	bhi.n	800c9bc <__multiply+0x7a>
 800c9a2:	2e00      	cmp	r6, #0
 800c9a4:	dd03      	ble.n	800c9ae <__multiply+0x6c>
 800c9a6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d05d      	beq.n	800ca6a <__multiply+0x128>
 800c9ae:	6106      	str	r6, [r0, #16]
 800c9b0:	b003      	add	sp, #12
 800c9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9b6:	f843 2b04 	str.w	r2, [r3], #4
 800c9ba:	e7e3      	b.n	800c984 <__multiply+0x42>
 800c9bc:	f8b2 b000 	ldrh.w	fp, [r2]
 800c9c0:	f1bb 0f00 	cmp.w	fp, #0
 800c9c4:	d023      	beq.n	800ca0e <__multiply+0xcc>
 800c9c6:	4689      	mov	r9, r1
 800c9c8:	46ac      	mov	ip, r5
 800c9ca:	f04f 0800 	mov.w	r8, #0
 800c9ce:	f859 4b04 	ldr.w	r4, [r9], #4
 800c9d2:	f8dc a000 	ldr.w	sl, [ip]
 800c9d6:	b2a3      	uxth	r3, r4
 800c9d8:	fa1f fa8a 	uxth.w	sl, sl
 800c9dc:	fb0b a303 	mla	r3, fp, r3, sl
 800c9e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c9e4:	f8dc 4000 	ldr.w	r4, [ip]
 800c9e8:	4443      	add	r3, r8
 800c9ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c9ee:	fb0b 840a 	mla	r4, fp, sl, r8
 800c9f2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c9f6:	46e2      	mov	sl, ip
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c9fe:	454f      	cmp	r7, r9
 800ca00:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ca04:	f84a 3b04 	str.w	r3, [sl], #4
 800ca08:	d82b      	bhi.n	800ca62 <__multiply+0x120>
 800ca0a:	f8cc 8004 	str.w	r8, [ip, #4]
 800ca0e:	9b01      	ldr	r3, [sp, #4]
 800ca10:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ca14:	3204      	adds	r2, #4
 800ca16:	f1ba 0f00 	cmp.w	sl, #0
 800ca1a:	d020      	beq.n	800ca5e <__multiply+0x11c>
 800ca1c:	682b      	ldr	r3, [r5, #0]
 800ca1e:	4689      	mov	r9, r1
 800ca20:	46a8      	mov	r8, r5
 800ca22:	f04f 0b00 	mov.w	fp, #0
 800ca26:	f8b9 c000 	ldrh.w	ip, [r9]
 800ca2a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ca2e:	fb0a 440c 	mla	r4, sl, ip, r4
 800ca32:	445c      	add	r4, fp
 800ca34:	46c4      	mov	ip, r8
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ca3c:	f84c 3b04 	str.w	r3, [ip], #4
 800ca40:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca44:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ca48:	0c1b      	lsrs	r3, r3, #16
 800ca4a:	fb0a b303 	mla	r3, sl, r3, fp
 800ca4e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ca52:	454f      	cmp	r7, r9
 800ca54:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ca58:	d805      	bhi.n	800ca66 <__multiply+0x124>
 800ca5a:	f8c8 3004 	str.w	r3, [r8, #4]
 800ca5e:	3504      	adds	r5, #4
 800ca60:	e79b      	b.n	800c99a <__multiply+0x58>
 800ca62:	46d4      	mov	ip, sl
 800ca64:	e7b3      	b.n	800c9ce <__multiply+0x8c>
 800ca66:	46e0      	mov	r8, ip
 800ca68:	e7dd      	b.n	800ca26 <__multiply+0xe4>
 800ca6a:	3e01      	subs	r6, #1
 800ca6c:	e799      	b.n	800c9a2 <__multiply+0x60>
	...

0800ca70 <__pow5mult>:
 800ca70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca74:	4615      	mov	r5, r2
 800ca76:	f012 0203 	ands.w	r2, r2, #3
 800ca7a:	4606      	mov	r6, r0
 800ca7c:	460f      	mov	r7, r1
 800ca7e:	d007      	beq.n	800ca90 <__pow5mult+0x20>
 800ca80:	3a01      	subs	r2, #1
 800ca82:	4c21      	ldr	r4, [pc, #132]	; (800cb08 <__pow5mult+0x98>)
 800ca84:	2300      	movs	r3, #0
 800ca86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca8a:	f7ff fec8 	bl	800c81e <__multadd>
 800ca8e:	4607      	mov	r7, r0
 800ca90:	10ad      	asrs	r5, r5, #2
 800ca92:	d035      	beq.n	800cb00 <__pow5mult+0x90>
 800ca94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ca96:	b93c      	cbnz	r4, 800caa8 <__pow5mult+0x38>
 800ca98:	2010      	movs	r0, #16
 800ca9a:	f7fe fb3f 	bl	800b11c <malloc>
 800ca9e:	6270      	str	r0, [r6, #36]	; 0x24
 800caa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800caa4:	6004      	str	r4, [r0, #0]
 800caa6:	60c4      	str	r4, [r0, #12]
 800caa8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800caac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cab0:	b94c      	cbnz	r4, 800cac6 <__pow5mult+0x56>
 800cab2:	f240 2171 	movw	r1, #625	; 0x271
 800cab6:	4630      	mov	r0, r6
 800cab8:	f7ff ff3a 	bl	800c930 <__i2b>
 800cabc:	2300      	movs	r3, #0
 800cabe:	f8c8 0008 	str.w	r0, [r8, #8]
 800cac2:	4604      	mov	r4, r0
 800cac4:	6003      	str	r3, [r0, #0]
 800cac6:	f04f 0800 	mov.w	r8, #0
 800caca:	07eb      	lsls	r3, r5, #31
 800cacc:	d50a      	bpl.n	800cae4 <__pow5mult+0x74>
 800cace:	4639      	mov	r1, r7
 800cad0:	4622      	mov	r2, r4
 800cad2:	4630      	mov	r0, r6
 800cad4:	f7ff ff35 	bl	800c942 <__multiply>
 800cad8:	4639      	mov	r1, r7
 800cada:	4681      	mov	r9, r0
 800cadc:	4630      	mov	r0, r6
 800cade:	f7ff fe87 	bl	800c7f0 <_Bfree>
 800cae2:	464f      	mov	r7, r9
 800cae4:	106d      	asrs	r5, r5, #1
 800cae6:	d00b      	beq.n	800cb00 <__pow5mult+0x90>
 800cae8:	6820      	ldr	r0, [r4, #0]
 800caea:	b938      	cbnz	r0, 800cafc <__pow5mult+0x8c>
 800caec:	4622      	mov	r2, r4
 800caee:	4621      	mov	r1, r4
 800caf0:	4630      	mov	r0, r6
 800caf2:	f7ff ff26 	bl	800c942 <__multiply>
 800caf6:	6020      	str	r0, [r4, #0]
 800caf8:	f8c0 8000 	str.w	r8, [r0]
 800cafc:	4604      	mov	r4, r0
 800cafe:	e7e4      	b.n	800caca <__pow5mult+0x5a>
 800cb00:	4638      	mov	r0, r7
 800cb02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb06:	bf00      	nop
 800cb08:	080101e0 	.word	0x080101e0

0800cb0c <__lshift>:
 800cb0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb10:	460c      	mov	r4, r1
 800cb12:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb16:	6923      	ldr	r3, [r4, #16]
 800cb18:	6849      	ldr	r1, [r1, #4]
 800cb1a:	eb0a 0903 	add.w	r9, sl, r3
 800cb1e:	68a3      	ldr	r3, [r4, #8]
 800cb20:	4607      	mov	r7, r0
 800cb22:	4616      	mov	r6, r2
 800cb24:	f109 0501 	add.w	r5, r9, #1
 800cb28:	42ab      	cmp	r3, r5
 800cb2a:	db32      	blt.n	800cb92 <__lshift+0x86>
 800cb2c:	4638      	mov	r0, r7
 800cb2e:	f7ff fe2b 	bl	800c788 <_Balloc>
 800cb32:	2300      	movs	r3, #0
 800cb34:	4680      	mov	r8, r0
 800cb36:	f100 0114 	add.w	r1, r0, #20
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	4553      	cmp	r3, sl
 800cb3e:	db2b      	blt.n	800cb98 <__lshift+0x8c>
 800cb40:	6920      	ldr	r0, [r4, #16]
 800cb42:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb46:	f104 0314 	add.w	r3, r4, #20
 800cb4a:	f016 021f 	ands.w	r2, r6, #31
 800cb4e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb52:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cb56:	d025      	beq.n	800cba4 <__lshift+0x98>
 800cb58:	f1c2 0e20 	rsb	lr, r2, #32
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	681e      	ldr	r6, [r3, #0]
 800cb60:	468a      	mov	sl, r1
 800cb62:	4096      	lsls	r6, r2
 800cb64:	4330      	orrs	r0, r6
 800cb66:	f84a 0b04 	str.w	r0, [sl], #4
 800cb6a:	f853 0b04 	ldr.w	r0, [r3], #4
 800cb6e:	459c      	cmp	ip, r3
 800cb70:	fa20 f00e 	lsr.w	r0, r0, lr
 800cb74:	d814      	bhi.n	800cba0 <__lshift+0x94>
 800cb76:	6048      	str	r0, [r1, #4]
 800cb78:	b108      	cbz	r0, 800cb7e <__lshift+0x72>
 800cb7a:	f109 0502 	add.w	r5, r9, #2
 800cb7e:	3d01      	subs	r5, #1
 800cb80:	4638      	mov	r0, r7
 800cb82:	f8c8 5010 	str.w	r5, [r8, #16]
 800cb86:	4621      	mov	r1, r4
 800cb88:	f7ff fe32 	bl	800c7f0 <_Bfree>
 800cb8c:	4640      	mov	r0, r8
 800cb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb92:	3101      	adds	r1, #1
 800cb94:	005b      	lsls	r3, r3, #1
 800cb96:	e7c7      	b.n	800cb28 <__lshift+0x1c>
 800cb98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	e7cd      	b.n	800cb3c <__lshift+0x30>
 800cba0:	4651      	mov	r1, sl
 800cba2:	e7dc      	b.n	800cb5e <__lshift+0x52>
 800cba4:	3904      	subs	r1, #4
 800cba6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbaa:	f841 2f04 	str.w	r2, [r1, #4]!
 800cbae:	459c      	cmp	ip, r3
 800cbb0:	d8f9      	bhi.n	800cba6 <__lshift+0x9a>
 800cbb2:	e7e4      	b.n	800cb7e <__lshift+0x72>

0800cbb4 <__mcmp>:
 800cbb4:	6903      	ldr	r3, [r0, #16]
 800cbb6:	690a      	ldr	r2, [r1, #16]
 800cbb8:	1a9b      	subs	r3, r3, r2
 800cbba:	b530      	push	{r4, r5, lr}
 800cbbc:	d10c      	bne.n	800cbd8 <__mcmp+0x24>
 800cbbe:	0092      	lsls	r2, r2, #2
 800cbc0:	3014      	adds	r0, #20
 800cbc2:	3114      	adds	r1, #20
 800cbc4:	1884      	adds	r4, r0, r2
 800cbc6:	4411      	add	r1, r2
 800cbc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cbcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cbd0:	4295      	cmp	r5, r2
 800cbd2:	d003      	beq.n	800cbdc <__mcmp+0x28>
 800cbd4:	d305      	bcc.n	800cbe2 <__mcmp+0x2e>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	4618      	mov	r0, r3
 800cbda:	bd30      	pop	{r4, r5, pc}
 800cbdc:	42a0      	cmp	r0, r4
 800cbde:	d3f3      	bcc.n	800cbc8 <__mcmp+0x14>
 800cbe0:	e7fa      	b.n	800cbd8 <__mcmp+0x24>
 800cbe2:	f04f 33ff 	mov.w	r3, #4294967295
 800cbe6:	e7f7      	b.n	800cbd8 <__mcmp+0x24>

0800cbe8 <__mdiff>:
 800cbe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbec:	460d      	mov	r5, r1
 800cbee:	4607      	mov	r7, r0
 800cbf0:	4611      	mov	r1, r2
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	4614      	mov	r4, r2
 800cbf6:	f7ff ffdd 	bl	800cbb4 <__mcmp>
 800cbfa:	1e06      	subs	r6, r0, #0
 800cbfc:	d108      	bne.n	800cc10 <__mdiff+0x28>
 800cbfe:	4631      	mov	r1, r6
 800cc00:	4638      	mov	r0, r7
 800cc02:	f7ff fdc1 	bl	800c788 <_Balloc>
 800cc06:	2301      	movs	r3, #1
 800cc08:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cc0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc10:	bfa4      	itt	ge
 800cc12:	4623      	movge	r3, r4
 800cc14:	462c      	movge	r4, r5
 800cc16:	4638      	mov	r0, r7
 800cc18:	6861      	ldr	r1, [r4, #4]
 800cc1a:	bfa6      	itte	ge
 800cc1c:	461d      	movge	r5, r3
 800cc1e:	2600      	movge	r6, #0
 800cc20:	2601      	movlt	r6, #1
 800cc22:	f7ff fdb1 	bl	800c788 <_Balloc>
 800cc26:	692b      	ldr	r3, [r5, #16]
 800cc28:	60c6      	str	r6, [r0, #12]
 800cc2a:	6926      	ldr	r6, [r4, #16]
 800cc2c:	f105 0914 	add.w	r9, r5, #20
 800cc30:	f104 0214 	add.w	r2, r4, #20
 800cc34:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800cc38:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800cc3c:	f100 0514 	add.w	r5, r0, #20
 800cc40:	f04f 0e00 	mov.w	lr, #0
 800cc44:	f852 ab04 	ldr.w	sl, [r2], #4
 800cc48:	f859 4b04 	ldr.w	r4, [r9], #4
 800cc4c:	fa1e f18a 	uxtah	r1, lr, sl
 800cc50:	b2a3      	uxth	r3, r4
 800cc52:	1ac9      	subs	r1, r1, r3
 800cc54:	0c23      	lsrs	r3, r4, #16
 800cc56:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800cc5a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cc5e:	b289      	uxth	r1, r1
 800cc60:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800cc64:	45c8      	cmp	r8, r9
 800cc66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cc6a:	4694      	mov	ip, r2
 800cc6c:	f845 3b04 	str.w	r3, [r5], #4
 800cc70:	d8e8      	bhi.n	800cc44 <__mdiff+0x5c>
 800cc72:	45bc      	cmp	ip, r7
 800cc74:	d304      	bcc.n	800cc80 <__mdiff+0x98>
 800cc76:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800cc7a:	b183      	cbz	r3, 800cc9e <__mdiff+0xb6>
 800cc7c:	6106      	str	r6, [r0, #16]
 800cc7e:	e7c5      	b.n	800cc0c <__mdiff+0x24>
 800cc80:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cc84:	fa1e f381 	uxtah	r3, lr, r1
 800cc88:	141a      	asrs	r2, r3, #16
 800cc8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc94:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800cc98:	f845 3b04 	str.w	r3, [r5], #4
 800cc9c:	e7e9      	b.n	800cc72 <__mdiff+0x8a>
 800cc9e:	3e01      	subs	r6, #1
 800cca0:	e7e9      	b.n	800cc76 <__mdiff+0x8e>

0800cca2 <__d2b>:
 800cca2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cca6:	460e      	mov	r6, r1
 800cca8:	2101      	movs	r1, #1
 800ccaa:	ec59 8b10 	vmov	r8, r9, d0
 800ccae:	4615      	mov	r5, r2
 800ccb0:	f7ff fd6a 	bl	800c788 <_Balloc>
 800ccb4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ccb8:	4607      	mov	r7, r0
 800ccba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ccbe:	bb34      	cbnz	r4, 800cd0e <__d2b+0x6c>
 800ccc0:	9301      	str	r3, [sp, #4]
 800ccc2:	f1b8 0300 	subs.w	r3, r8, #0
 800ccc6:	d027      	beq.n	800cd18 <__d2b+0x76>
 800ccc8:	a802      	add	r0, sp, #8
 800ccca:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ccce:	f7ff fe00 	bl	800c8d2 <__lo0bits>
 800ccd2:	9900      	ldr	r1, [sp, #0]
 800ccd4:	b1f0      	cbz	r0, 800cd14 <__d2b+0x72>
 800ccd6:	9a01      	ldr	r2, [sp, #4]
 800ccd8:	f1c0 0320 	rsb	r3, r0, #32
 800ccdc:	fa02 f303 	lsl.w	r3, r2, r3
 800cce0:	430b      	orrs	r3, r1
 800cce2:	40c2      	lsrs	r2, r0
 800cce4:	617b      	str	r3, [r7, #20]
 800cce6:	9201      	str	r2, [sp, #4]
 800cce8:	9b01      	ldr	r3, [sp, #4]
 800ccea:	61bb      	str	r3, [r7, #24]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	bf14      	ite	ne
 800ccf0:	2102      	movne	r1, #2
 800ccf2:	2101      	moveq	r1, #1
 800ccf4:	6139      	str	r1, [r7, #16]
 800ccf6:	b1c4      	cbz	r4, 800cd2a <__d2b+0x88>
 800ccf8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ccfc:	4404      	add	r4, r0
 800ccfe:	6034      	str	r4, [r6, #0]
 800cd00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cd04:	6028      	str	r0, [r5, #0]
 800cd06:	4638      	mov	r0, r7
 800cd08:	b003      	add	sp, #12
 800cd0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd12:	e7d5      	b.n	800ccc0 <__d2b+0x1e>
 800cd14:	6179      	str	r1, [r7, #20]
 800cd16:	e7e7      	b.n	800cce8 <__d2b+0x46>
 800cd18:	a801      	add	r0, sp, #4
 800cd1a:	f7ff fdda 	bl	800c8d2 <__lo0bits>
 800cd1e:	9b01      	ldr	r3, [sp, #4]
 800cd20:	617b      	str	r3, [r7, #20]
 800cd22:	2101      	movs	r1, #1
 800cd24:	6139      	str	r1, [r7, #16]
 800cd26:	3020      	adds	r0, #32
 800cd28:	e7e5      	b.n	800ccf6 <__d2b+0x54>
 800cd2a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800cd2e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cd32:	6030      	str	r0, [r6, #0]
 800cd34:	6918      	ldr	r0, [r3, #16]
 800cd36:	f7ff fdad 	bl	800c894 <__hi0bits>
 800cd3a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800cd3e:	e7e1      	b.n	800cd04 <__d2b+0x62>

0800cd40 <_calloc_r>:
 800cd40:	b538      	push	{r3, r4, r5, lr}
 800cd42:	fb02 f401 	mul.w	r4, r2, r1
 800cd46:	4621      	mov	r1, r4
 800cd48:	f7fe fa72 	bl	800b230 <_malloc_r>
 800cd4c:	4605      	mov	r5, r0
 800cd4e:	b118      	cbz	r0, 800cd58 <_calloc_r+0x18>
 800cd50:	4622      	mov	r2, r4
 800cd52:	2100      	movs	r1, #0
 800cd54:	f7fe fa16 	bl	800b184 <memset>
 800cd58:	4628      	mov	r0, r5
 800cd5a:	bd38      	pop	{r3, r4, r5, pc}

0800cd5c <__ssputs_r>:
 800cd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd60:	688e      	ldr	r6, [r1, #8]
 800cd62:	429e      	cmp	r6, r3
 800cd64:	4682      	mov	sl, r0
 800cd66:	460c      	mov	r4, r1
 800cd68:	4690      	mov	r8, r2
 800cd6a:	4699      	mov	r9, r3
 800cd6c:	d837      	bhi.n	800cdde <__ssputs_r+0x82>
 800cd6e:	898a      	ldrh	r2, [r1, #12]
 800cd70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd74:	d031      	beq.n	800cdda <__ssputs_r+0x7e>
 800cd76:	6825      	ldr	r5, [r4, #0]
 800cd78:	6909      	ldr	r1, [r1, #16]
 800cd7a:	1a6f      	subs	r7, r5, r1
 800cd7c:	6965      	ldr	r5, [r4, #20]
 800cd7e:	2302      	movs	r3, #2
 800cd80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd84:	fb95 f5f3 	sdiv	r5, r5, r3
 800cd88:	f109 0301 	add.w	r3, r9, #1
 800cd8c:	443b      	add	r3, r7
 800cd8e:	429d      	cmp	r5, r3
 800cd90:	bf38      	it	cc
 800cd92:	461d      	movcc	r5, r3
 800cd94:	0553      	lsls	r3, r2, #21
 800cd96:	d530      	bpl.n	800cdfa <__ssputs_r+0x9e>
 800cd98:	4629      	mov	r1, r5
 800cd9a:	f7fe fa49 	bl	800b230 <_malloc_r>
 800cd9e:	4606      	mov	r6, r0
 800cda0:	b950      	cbnz	r0, 800cdb8 <__ssputs_r+0x5c>
 800cda2:	230c      	movs	r3, #12
 800cda4:	f8ca 3000 	str.w	r3, [sl]
 800cda8:	89a3      	ldrh	r3, [r4, #12]
 800cdaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdae:	81a3      	strh	r3, [r4, #12]
 800cdb0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdb8:	463a      	mov	r2, r7
 800cdba:	6921      	ldr	r1, [r4, #16]
 800cdbc:	f7fe f9be 	bl	800b13c <memcpy>
 800cdc0:	89a3      	ldrh	r3, [r4, #12]
 800cdc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cdc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdca:	81a3      	strh	r3, [r4, #12]
 800cdcc:	6126      	str	r6, [r4, #16]
 800cdce:	6165      	str	r5, [r4, #20]
 800cdd0:	443e      	add	r6, r7
 800cdd2:	1bed      	subs	r5, r5, r7
 800cdd4:	6026      	str	r6, [r4, #0]
 800cdd6:	60a5      	str	r5, [r4, #8]
 800cdd8:	464e      	mov	r6, r9
 800cdda:	454e      	cmp	r6, r9
 800cddc:	d900      	bls.n	800cde0 <__ssputs_r+0x84>
 800cdde:	464e      	mov	r6, r9
 800cde0:	4632      	mov	r2, r6
 800cde2:	4641      	mov	r1, r8
 800cde4:	6820      	ldr	r0, [r4, #0]
 800cde6:	f7fe f9b4 	bl	800b152 <memmove>
 800cdea:	68a3      	ldr	r3, [r4, #8]
 800cdec:	1b9b      	subs	r3, r3, r6
 800cdee:	60a3      	str	r3, [r4, #8]
 800cdf0:	6823      	ldr	r3, [r4, #0]
 800cdf2:	441e      	add	r6, r3
 800cdf4:	6026      	str	r6, [r4, #0]
 800cdf6:	2000      	movs	r0, #0
 800cdf8:	e7dc      	b.n	800cdb4 <__ssputs_r+0x58>
 800cdfa:	462a      	mov	r2, r5
 800cdfc:	f000 f912 	bl	800d024 <_realloc_r>
 800ce00:	4606      	mov	r6, r0
 800ce02:	2800      	cmp	r0, #0
 800ce04:	d1e2      	bne.n	800cdcc <__ssputs_r+0x70>
 800ce06:	6921      	ldr	r1, [r4, #16]
 800ce08:	4650      	mov	r0, sl
 800ce0a:	f7fe f9c3 	bl	800b194 <_free_r>
 800ce0e:	e7c8      	b.n	800cda2 <__ssputs_r+0x46>

0800ce10 <_svfiprintf_r>:
 800ce10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce14:	461d      	mov	r5, r3
 800ce16:	898b      	ldrh	r3, [r1, #12]
 800ce18:	061f      	lsls	r7, r3, #24
 800ce1a:	b09d      	sub	sp, #116	; 0x74
 800ce1c:	4680      	mov	r8, r0
 800ce1e:	460c      	mov	r4, r1
 800ce20:	4616      	mov	r6, r2
 800ce22:	d50f      	bpl.n	800ce44 <_svfiprintf_r+0x34>
 800ce24:	690b      	ldr	r3, [r1, #16]
 800ce26:	b96b      	cbnz	r3, 800ce44 <_svfiprintf_r+0x34>
 800ce28:	2140      	movs	r1, #64	; 0x40
 800ce2a:	f7fe fa01 	bl	800b230 <_malloc_r>
 800ce2e:	6020      	str	r0, [r4, #0]
 800ce30:	6120      	str	r0, [r4, #16]
 800ce32:	b928      	cbnz	r0, 800ce40 <_svfiprintf_r+0x30>
 800ce34:	230c      	movs	r3, #12
 800ce36:	f8c8 3000 	str.w	r3, [r8]
 800ce3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce3e:	e0c8      	b.n	800cfd2 <_svfiprintf_r+0x1c2>
 800ce40:	2340      	movs	r3, #64	; 0x40
 800ce42:	6163      	str	r3, [r4, #20]
 800ce44:	2300      	movs	r3, #0
 800ce46:	9309      	str	r3, [sp, #36]	; 0x24
 800ce48:	2320      	movs	r3, #32
 800ce4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce4e:	2330      	movs	r3, #48	; 0x30
 800ce50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce54:	9503      	str	r5, [sp, #12]
 800ce56:	f04f 0b01 	mov.w	fp, #1
 800ce5a:	4637      	mov	r7, r6
 800ce5c:	463d      	mov	r5, r7
 800ce5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ce62:	b10b      	cbz	r3, 800ce68 <_svfiprintf_r+0x58>
 800ce64:	2b25      	cmp	r3, #37	; 0x25
 800ce66:	d13e      	bne.n	800cee6 <_svfiprintf_r+0xd6>
 800ce68:	ebb7 0a06 	subs.w	sl, r7, r6
 800ce6c:	d00b      	beq.n	800ce86 <_svfiprintf_r+0x76>
 800ce6e:	4653      	mov	r3, sl
 800ce70:	4632      	mov	r2, r6
 800ce72:	4621      	mov	r1, r4
 800ce74:	4640      	mov	r0, r8
 800ce76:	f7ff ff71 	bl	800cd5c <__ssputs_r>
 800ce7a:	3001      	adds	r0, #1
 800ce7c:	f000 80a4 	beq.w	800cfc8 <_svfiprintf_r+0x1b8>
 800ce80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce82:	4453      	add	r3, sl
 800ce84:	9309      	str	r3, [sp, #36]	; 0x24
 800ce86:	783b      	ldrb	r3, [r7, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	f000 809d 	beq.w	800cfc8 <_svfiprintf_r+0x1b8>
 800ce8e:	2300      	movs	r3, #0
 800ce90:	f04f 32ff 	mov.w	r2, #4294967295
 800ce94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce98:	9304      	str	r3, [sp, #16]
 800ce9a:	9307      	str	r3, [sp, #28]
 800ce9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cea0:	931a      	str	r3, [sp, #104]	; 0x68
 800cea2:	462f      	mov	r7, r5
 800cea4:	2205      	movs	r2, #5
 800cea6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ceaa:	4850      	ldr	r0, [pc, #320]	; (800cfec <_svfiprintf_r+0x1dc>)
 800ceac:	f7f3 fa80 	bl	80003b0 <memchr>
 800ceb0:	9b04      	ldr	r3, [sp, #16]
 800ceb2:	b9d0      	cbnz	r0, 800ceea <_svfiprintf_r+0xda>
 800ceb4:	06d9      	lsls	r1, r3, #27
 800ceb6:	bf44      	itt	mi
 800ceb8:	2220      	movmi	r2, #32
 800ceba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cebe:	071a      	lsls	r2, r3, #28
 800cec0:	bf44      	itt	mi
 800cec2:	222b      	movmi	r2, #43	; 0x2b
 800cec4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cec8:	782a      	ldrb	r2, [r5, #0]
 800ceca:	2a2a      	cmp	r2, #42	; 0x2a
 800cecc:	d015      	beq.n	800cefa <_svfiprintf_r+0xea>
 800cece:	9a07      	ldr	r2, [sp, #28]
 800ced0:	462f      	mov	r7, r5
 800ced2:	2000      	movs	r0, #0
 800ced4:	250a      	movs	r5, #10
 800ced6:	4639      	mov	r1, r7
 800ced8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cedc:	3b30      	subs	r3, #48	; 0x30
 800cede:	2b09      	cmp	r3, #9
 800cee0:	d94d      	bls.n	800cf7e <_svfiprintf_r+0x16e>
 800cee2:	b1b8      	cbz	r0, 800cf14 <_svfiprintf_r+0x104>
 800cee4:	e00f      	b.n	800cf06 <_svfiprintf_r+0xf6>
 800cee6:	462f      	mov	r7, r5
 800cee8:	e7b8      	b.n	800ce5c <_svfiprintf_r+0x4c>
 800ceea:	4a40      	ldr	r2, [pc, #256]	; (800cfec <_svfiprintf_r+0x1dc>)
 800ceec:	1a80      	subs	r0, r0, r2
 800ceee:	fa0b f000 	lsl.w	r0, fp, r0
 800cef2:	4318      	orrs	r0, r3
 800cef4:	9004      	str	r0, [sp, #16]
 800cef6:	463d      	mov	r5, r7
 800cef8:	e7d3      	b.n	800cea2 <_svfiprintf_r+0x92>
 800cefa:	9a03      	ldr	r2, [sp, #12]
 800cefc:	1d11      	adds	r1, r2, #4
 800cefe:	6812      	ldr	r2, [r2, #0]
 800cf00:	9103      	str	r1, [sp, #12]
 800cf02:	2a00      	cmp	r2, #0
 800cf04:	db01      	blt.n	800cf0a <_svfiprintf_r+0xfa>
 800cf06:	9207      	str	r2, [sp, #28]
 800cf08:	e004      	b.n	800cf14 <_svfiprintf_r+0x104>
 800cf0a:	4252      	negs	r2, r2
 800cf0c:	f043 0302 	orr.w	r3, r3, #2
 800cf10:	9207      	str	r2, [sp, #28]
 800cf12:	9304      	str	r3, [sp, #16]
 800cf14:	783b      	ldrb	r3, [r7, #0]
 800cf16:	2b2e      	cmp	r3, #46	; 0x2e
 800cf18:	d10c      	bne.n	800cf34 <_svfiprintf_r+0x124>
 800cf1a:	787b      	ldrb	r3, [r7, #1]
 800cf1c:	2b2a      	cmp	r3, #42	; 0x2a
 800cf1e:	d133      	bne.n	800cf88 <_svfiprintf_r+0x178>
 800cf20:	9b03      	ldr	r3, [sp, #12]
 800cf22:	1d1a      	adds	r2, r3, #4
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	9203      	str	r2, [sp, #12]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	bfb8      	it	lt
 800cf2c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf30:	3702      	adds	r7, #2
 800cf32:	9305      	str	r3, [sp, #20]
 800cf34:	4d2e      	ldr	r5, [pc, #184]	; (800cff0 <_svfiprintf_r+0x1e0>)
 800cf36:	7839      	ldrb	r1, [r7, #0]
 800cf38:	2203      	movs	r2, #3
 800cf3a:	4628      	mov	r0, r5
 800cf3c:	f7f3 fa38 	bl	80003b0 <memchr>
 800cf40:	b138      	cbz	r0, 800cf52 <_svfiprintf_r+0x142>
 800cf42:	2340      	movs	r3, #64	; 0x40
 800cf44:	1b40      	subs	r0, r0, r5
 800cf46:	fa03 f000 	lsl.w	r0, r3, r0
 800cf4a:	9b04      	ldr	r3, [sp, #16]
 800cf4c:	4303      	orrs	r3, r0
 800cf4e:	3701      	adds	r7, #1
 800cf50:	9304      	str	r3, [sp, #16]
 800cf52:	7839      	ldrb	r1, [r7, #0]
 800cf54:	4827      	ldr	r0, [pc, #156]	; (800cff4 <_svfiprintf_r+0x1e4>)
 800cf56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf5a:	2206      	movs	r2, #6
 800cf5c:	1c7e      	adds	r6, r7, #1
 800cf5e:	f7f3 fa27 	bl	80003b0 <memchr>
 800cf62:	2800      	cmp	r0, #0
 800cf64:	d038      	beq.n	800cfd8 <_svfiprintf_r+0x1c8>
 800cf66:	4b24      	ldr	r3, [pc, #144]	; (800cff8 <_svfiprintf_r+0x1e8>)
 800cf68:	bb13      	cbnz	r3, 800cfb0 <_svfiprintf_r+0x1a0>
 800cf6a:	9b03      	ldr	r3, [sp, #12]
 800cf6c:	3307      	adds	r3, #7
 800cf6e:	f023 0307 	bic.w	r3, r3, #7
 800cf72:	3308      	adds	r3, #8
 800cf74:	9303      	str	r3, [sp, #12]
 800cf76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf78:	444b      	add	r3, r9
 800cf7a:	9309      	str	r3, [sp, #36]	; 0x24
 800cf7c:	e76d      	b.n	800ce5a <_svfiprintf_r+0x4a>
 800cf7e:	fb05 3202 	mla	r2, r5, r2, r3
 800cf82:	2001      	movs	r0, #1
 800cf84:	460f      	mov	r7, r1
 800cf86:	e7a6      	b.n	800ced6 <_svfiprintf_r+0xc6>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	3701      	adds	r7, #1
 800cf8c:	9305      	str	r3, [sp, #20]
 800cf8e:	4619      	mov	r1, r3
 800cf90:	250a      	movs	r5, #10
 800cf92:	4638      	mov	r0, r7
 800cf94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf98:	3a30      	subs	r2, #48	; 0x30
 800cf9a:	2a09      	cmp	r2, #9
 800cf9c:	d903      	bls.n	800cfa6 <_svfiprintf_r+0x196>
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d0c8      	beq.n	800cf34 <_svfiprintf_r+0x124>
 800cfa2:	9105      	str	r1, [sp, #20]
 800cfa4:	e7c6      	b.n	800cf34 <_svfiprintf_r+0x124>
 800cfa6:	fb05 2101 	mla	r1, r5, r1, r2
 800cfaa:	2301      	movs	r3, #1
 800cfac:	4607      	mov	r7, r0
 800cfae:	e7f0      	b.n	800cf92 <_svfiprintf_r+0x182>
 800cfb0:	ab03      	add	r3, sp, #12
 800cfb2:	9300      	str	r3, [sp, #0]
 800cfb4:	4622      	mov	r2, r4
 800cfb6:	4b11      	ldr	r3, [pc, #68]	; (800cffc <_svfiprintf_r+0x1ec>)
 800cfb8:	a904      	add	r1, sp, #16
 800cfba:	4640      	mov	r0, r8
 800cfbc:	f7fe fa18 	bl	800b3f0 <_printf_float>
 800cfc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cfc4:	4681      	mov	r9, r0
 800cfc6:	d1d6      	bne.n	800cf76 <_svfiprintf_r+0x166>
 800cfc8:	89a3      	ldrh	r3, [r4, #12]
 800cfca:	065b      	lsls	r3, r3, #25
 800cfcc:	f53f af35 	bmi.w	800ce3a <_svfiprintf_r+0x2a>
 800cfd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfd2:	b01d      	add	sp, #116	; 0x74
 800cfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd8:	ab03      	add	r3, sp, #12
 800cfda:	9300      	str	r3, [sp, #0]
 800cfdc:	4622      	mov	r2, r4
 800cfde:	4b07      	ldr	r3, [pc, #28]	; (800cffc <_svfiprintf_r+0x1ec>)
 800cfe0:	a904      	add	r1, sp, #16
 800cfe2:	4640      	mov	r0, r8
 800cfe4:	f7fe fca6 	bl	800b934 <_printf_i>
 800cfe8:	e7ea      	b.n	800cfc0 <_svfiprintf_r+0x1b0>
 800cfea:	bf00      	nop
 800cfec:	080101ec 	.word	0x080101ec
 800cff0:	080101f2 	.word	0x080101f2
 800cff4:	080101f6 	.word	0x080101f6
 800cff8:	0800b3f1 	.word	0x0800b3f1
 800cffc:	0800cd5d 	.word	0x0800cd5d

0800d000 <__ascii_mbtowc>:
 800d000:	b082      	sub	sp, #8
 800d002:	b901      	cbnz	r1, 800d006 <__ascii_mbtowc+0x6>
 800d004:	a901      	add	r1, sp, #4
 800d006:	b142      	cbz	r2, 800d01a <__ascii_mbtowc+0x1a>
 800d008:	b14b      	cbz	r3, 800d01e <__ascii_mbtowc+0x1e>
 800d00a:	7813      	ldrb	r3, [r2, #0]
 800d00c:	600b      	str	r3, [r1, #0]
 800d00e:	7812      	ldrb	r2, [r2, #0]
 800d010:	1c10      	adds	r0, r2, #0
 800d012:	bf18      	it	ne
 800d014:	2001      	movne	r0, #1
 800d016:	b002      	add	sp, #8
 800d018:	4770      	bx	lr
 800d01a:	4610      	mov	r0, r2
 800d01c:	e7fb      	b.n	800d016 <__ascii_mbtowc+0x16>
 800d01e:	f06f 0001 	mvn.w	r0, #1
 800d022:	e7f8      	b.n	800d016 <__ascii_mbtowc+0x16>

0800d024 <_realloc_r>:
 800d024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d026:	4607      	mov	r7, r0
 800d028:	4614      	mov	r4, r2
 800d02a:	460e      	mov	r6, r1
 800d02c:	b921      	cbnz	r1, 800d038 <_realloc_r+0x14>
 800d02e:	4611      	mov	r1, r2
 800d030:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d034:	f7fe b8fc 	b.w	800b230 <_malloc_r>
 800d038:	b922      	cbnz	r2, 800d044 <_realloc_r+0x20>
 800d03a:	f7fe f8ab 	bl	800b194 <_free_r>
 800d03e:	4625      	mov	r5, r4
 800d040:	4628      	mov	r0, r5
 800d042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d044:	f000 f821 	bl	800d08a <_malloc_usable_size_r>
 800d048:	42a0      	cmp	r0, r4
 800d04a:	d20f      	bcs.n	800d06c <_realloc_r+0x48>
 800d04c:	4621      	mov	r1, r4
 800d04e:	4638      	mov	r0, r7
 800d050:	f7fe f8ee 	bl	800b230 <_malloc_r>
 800d054:	4605      	mov	r5, r0
 800d056:	2800      	cmp	r0, #0
 800d058:	d0f2      	beq.n	800d040 <_realloc_r+0x1c>
 800d05a:	4631      	mov	r1, r6
 800d05c:	4622      	mov	r2, r4
 800d05e:	f7fe f86d 	bl	800b13c <memcpy>
 800d062:	4631      	mov	r1, r6
 800d064:	4638      	mov	r0, r7
 800d066:	f7fe f895 	bl	800b194 <_free_r>
 800d06a:	e7e9      	b.n	800d040 <_realloc_r+0x1c>
 800d06c:	4635      	mov	r5, r6
 800d06e:	e7e7      	b.n	800d040 <_realloc_r+0x1c>

0800d070 <__ascii_wctomb>:
 800d070:	b149      	cbz	r1, 800d086 <__ascii_wctomb+0x16>
 800d072:	2aff      	cmp	r2, #255	; 0xff
 800d074:	bf85      	ittet	hi
 800d076:	238a      	movhi	r3, #138	; 0x8a
 800d078:	6003      	strhi	r3, [r0, #0]
 800d07a:	700a      	strbls	r2, [r1, #0]
 800d07c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d080:	bf98      	it	ls
 800d082:	2001      	movls	r0, #1
 800d084:	4770      	bx	lr
 800d086:	4608      	mov	r0, r1
 800d088:	4770      	bx	lr

0800d08a <_malloc_usable_size_r>:
 800d08a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d08e:	1f18      	subs	r0, r3, #4
 800d090:	2b00      	cmp	r3, #0
 800d092:	bfbc      	itt	lt
 800d094:	580b      	ldrlt	r3, [r1, r0]
 800d096:	18c0      	addlt	r0, r0, r3
 800d098:	4770      	bx	lr
 800d09a:	0000      	movs	r0, r0
 800d09c:	0000      	movs	r0, r0
	...

0800d0a0 <sqrtf>:
 800d0a0:	b500      	push	{lr}
 800d0a2:	ed2d 8b02 	vpush	{d8}
 800d0a6:	b08b      	sub	sp, #44	; 0x2c
 800d0a8:	eeb0 8a40 	vmov.f32	s16, s0
 800d0ac:	f000 f848 	bl	800d140 <__ieee754_sqrtf>
 800d0b0:	4b21      	ldr	r3, [pc, #132]	; (800d138 <sqrtf+0x98>)
 800d0b2:	f993 3000 	ldrsb.w	r3, [r3]
 800d0b6:	1c5a      	adds	r2, r3, #1
 800d0b8:	d028      	beq.n	800d10c <sqrtf+0x6c>
 800d0ba:	eeb4 8a48 	vcmp.f32	s16, s16
 800d0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c2:	d623      	bvs.n	800d10c <sqrtf+0x6c>
 800d0c4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0cc:	d51e      	bpl.n	800d10c <sqrtf+0x6c>
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800d0d4:	9200      	str	r2, [sp, #0]
 800d0d6:	4a19      	ldr	r2, [pc, #100]	; (800d13c <sqrtf+0x9c>)
 800d0d8:	9201      	str	r2, [sp, #4]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	9208      	str	r2, [sp, #32]
 800d0de:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d0e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d0e6:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800d130 <sqrtf+0x90>
 800d0ea:	b9a3      	cbnz	r3, 800d116 <sqrtf+0x76>
 800d0ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d0f0:	4668      	mov	r0, sp
 800d0f2:	f000 f828 	bl	800d146 <matherr>
 800d0f6:	b1a0      	cbz	r0, 800d122 <sqrtf+0x82>
 800d0f8:	9b08      	ldr	r3, [sp, #32]
 800d0fa:	b11b      	cbz	r3, 800d104 <sqrtf+0x64>
 800d0fc:	f7fd ffe4 	bl	800b0c8 <__errno>
 800d100:	9b08      	ldr	r3, [sp, #32]
 800d102:	6003      	str	r3, [r0, #0]
 800d104:	ed9d 0b06 	vldr	d0, [sp, #24]
 800d108:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d10c:	b00b      	add	sp, #44	; 0x2c
 800d10e:	ecbd 8b02 	vpop	{d8}
 800d112:	f85d fb04 	ldr.w	pc, [sp], #4
 800d116:	2b02      	cmp	r3, #2
 800d118:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800d11c:	ed8d 6b06 	vstr	d6, [sp, #24]
 800d120:	d1e6      	bne.n	800d0f0 <sqrtf+0x50>
 800d122:	f7fd ffd1 	bl	800b0c8 <__errno>
 800d126:	2321      	movs	r3, #33	; 0x21
 800d128:	6003      	str	r3, [r0, #0]
 800d12a:	e7e5      	b.n	800d0f8 <sqrtf+0x58>
 800d12c:	f3af 8000 	nop.w
	...
 800d138:	200001e0 	.word	0x200001e0
 800d13c:	08010308 	.word	0x08010308

0800d140 <__ieee754_sqrtf>:
 800d140:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d144:	4770      	bx	lr

0800d146 <matherr>:
 800d146:	2000      	movs	r0, #0
 800d148:	4770      	bx	lr
	...

0800d14c <_init>:
 800d14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d14e:	bf00      	nop
 800d150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d152:	bc08      	pop	{r3}
 800d154:	469e      	mov	lr, r3
 800d156:	4770      	bx	lr

0800d158 <_fini>:
 800d158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d15a:	bf00      	nop
 800d15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d15e:	bc08      	pop	{r3}
 800d160:	469e      	mov	lr, r3
 800d162:	4770      	bx	lr
